{"bugs": {"646360": {"comments": [{"time": "2011-03-30T06:54:04Z", "is_private": false, "attachment_id": null, "bug_id": 646360, "count": 0, "creator": "jteh@mozilla.com", "tags": [], "raw_text": "In Firefox <= 3.6, the document accessible which embedded a plugin was the parent of the plugin window accessible, which meant that the document was part of the plugin's ancestry. This occurred because each document had its own window (HWND) which was the parent of any plugin windows it created. In Firefox >= 4, there is only one HWND. This means that the parent of the plugin window accessible is the top level Firefox frame accessible, which in turn means that the document is no longer part of the plugin's ancestry. A way needs to be found to fix the hierarchy so that the document is part of the plugin's ancestry, which is needed to determine the document which embeds a plugin.\n\nA work around for this problem is to use NAVRELATION_EMBEDS on the top level frame accessible to find the document in the active tab. However, this is extremely hacky or inelegant at best. It also only works for plugins in the current tab (though there aren't any realistic use cases for examining plugins in background tabs).", "id": 5379712, "text": "In Firefox <= 3.6, the document accessible which embedded a plugin was the parent of the plugin window accessible, which meant that the document was part of the plugin's ancestry. This occurred because each document had its own window (HWND) which was the parent of any plugin windows it created. In Firefox >= 4, there is only one HWND. This means that the parent of the plugin window accessible is the top level Firefox frame accessible, which in turn means that the document is no longer part of the plugin's ancestry. A way needs to be found to fix the hierarchy so that the document is part of the plugin's ancestry, which is needed to determine the document which embeds a plugin.\n\nA work around for this problem is to use NAVRELATION_EMBEDS on the top level frame accessible to find the document in the active tab. However, this is extremely hacky or inelegant at best. It also only works for plugins in the current tab (though there aren't any realistic use cases for examining plugins in background tabs).", "creation_time": "2011-03-30T06:54:04Z", "author": "jteh@mozilla.com"}, {"attachment_id": null, "author": "jteh@mozilla.com", "count": 1, "tags": [], "time": "2012-01-31T07:56:35Z", "creator": "jteh@mozilla.com", "bug_id": 646360, "id": 6021927, "raw_text": "(In reply to James Teh [:Jamie] from comment #0)\n> A work around for this problem is to use NAVRELATION_EMBEDS on the top level\n> frame accessible to find the document in the active tab.\nTo implement this work around, for Firefox <= 10, we got to the top level frame accessible by simply retrieving the parent of the GeckoPluginWindow client accessible. However, in Firefox >= 11, the parent of the GeckoPluginWindow client accessible is an oleacc generated client accessible and its parent is an oleacc generated window accessible, meaning that we have to walk up three parents instead of one to get to the top level frame accessible.\n\nIt seems there is a MozillaWindowClass HWND between the GeckoPluginWindow HWND and the main browser HWND. This was present in Firefox <= 10 as well. However, in Firefox <= 10, WM_GETOBJECT with this wrapper HWND and OBJID_CLIENT returned the top level frame accessible, even though that accessible actually belongs to the parent HWND. In Firefox >= 11, Gecko doesn't handle WM_GETOBJECT in this case, causing oleacc to create a generic object.\n\nThe behaviour in Firefox <= 10 is probably not quite correct, as it's returning a client accessible for the wrong HWND, so I'm not necessarily suggesting that this should be reinstated. However, I'm curious as to why this changed, as I don't recall any changes related to WM_GETOBJECT and any unexplainable changes in this area are likely to bite us later.", "is_private": false, "creation_time": "2012-01-31T07:56:35Z", "text": "(In reply to James Teh [:Jamie] from comment #0)\n> A work around for this problem is to use NAVRELATION_EMBEDS on the top level\n> frame accessible to find the document in the active tab.\nTo implement this work around, for Firefox <= 10, we got to the top level frame accessible by simply retrieving the parent of the GeckoPluginWindow client accessible. However, in Firefox >= 11, the parent of the GeckoPluginWindow client accessible is an oleacc generated client accessible and its parent is an oleacc generated window accessible, meaning that we have to walk up three parents instead of one to get to the top level frame accessible.\n\nIt seems there is a MozillaWindowClass HWND between the GeckoPluginWindow HWND and the main browser HWND. This was present in Firefox <= 10 as well. However, in Firefox <= 10, WM_GETOBJECT with this wrapper HWND and OBJID_CLIENT returned the top level frame accessible, even though that accessible actually belongs to the parent HWND. In Firefox >= 11, Gecko doesn't handle WM_GETOBJECT in this case, causing oleacc to create a generic object.\n\nThe behaviour in Firefox <= 10 is probably not quite correct, as it's returning a client accessible for the wrong HWND, so I'm not necessarily suggesting that this should be reinstated. However, I'm curious as to why this changed, as I don't recall any changes related to WM_GETOBJECT and any unexplainable changes in this area are likely to bite us later."}, {"attachment_id": null, "time": "2012-01-31T13:01:20Z", "is_private": false, "author": "surkov.alexander@gmail.com", "bug_id": 646360, "count": 2, "tags": [], "creator": "surkov.alexander@gmail.com", "text": "accessible hierarchy:\nroot document (has associated HWND)\n  tab document\n    embed element\n      plugin window and plugin document\n\nwindow hierarchy:\nmain browser HWND\n  MozillaWindowClass\n    GeckoPluginWindow\n\nIf embed element will be exposed with MozillaWindowClass HWND and WM_GETOBJECT for this HWND returns embed element then does it cause/fix any problems and does it look like reasonable solution?", "creation_time": "2012-01-31T13:01:20Z", "raw_text": "accessible hierarchy:\nroot document (has associated HWND)\n  tab document\n    embed element\n      plugin window and plugin document\n\nwindow hierarchy:\nmain browser HWND\n  MozillaWindowClass\n    GeckoPluginWindow\n\nIf embed element will be exposed with MozillaWindowClass HWND and WM_GETOBJECT for this HWND returns embed element then does it cause/fix any problems and does it look like reasonable solution?", "id": 6022300}, {"author": "jteh@mozilla.com", "creator": "jteh@mozilla.com", "tags": [], "count": 3, "bug_id": 646360, "id": 6023549, "raw_text": "(In reply to alexander :surkov from comment #2)\n> If embed element will be exposed with MozillaWindowClass HWND and\n> WM_GETOBJECT for this HWND returns embed element then does it cause/fix any\n> problems and does it look like reasonable solution?\nIn theory, that should work nicely and completely solves this bug, assuming the MozillaWindowClass wrapper doesn't disappear in the future. Very nice thinking! :)\n\nNote that WindowFromAccessibleObject on the embed element will probably return the wrong window, as the oleacc generated window object is missing, but IAccessible2::windowHandle will be correct. Fixing WindowFromAccessibleObject requires bug 441553.\n\nNote also that we've hacked around this in NVDA for both Firefox <= 10 and Firefox 11/12. I still think this is a much more elegant solution, but it's not critical for us, assuming NAVRELATION_EMBEDS works correctly.", "creation_time": "2012-01-31T20:12:41Z", "text": "(In reply to alexander :surkov from comment #2)\n> If embed element will be exposed with MozillaWindowClass HWND and\n> WM_GETOBJECT for this HWND returns embed element then does it cause/fix any\n> problems and does it look like reasonable solution?\nIn theory, that should work nicely and completely solves this bug, assuming the MozillaWindowClass wrapper doesn't disappear in the future. Very nice thinking! :)\n\nNote that WindowFromAccessibleObject on the embed element will probably return the wrong window, as the oleacc generated window object is missing, but IAccessible2::windowHandle will be correct. Fixing WindowFromAccessibleObject requires bug 441553.\n\nNote also that we've hacked around this in NVDA for both Firefox <= 10 and Firefox 11/12. I still think this is a much more elegant solution, but it's not critical for us, assuming NAVRELATION_EMBEDS works correctly.", "attachment_id": null, "time": "2012-01-31T20:12:41Z", "is_private": false}, {"author": "jteh@mozilla.com", "tags": [], "count": 4, "creator": "jteh@mozilla.com", "bug_id": 646360, "creation_time": "2012-02-01T11:35:13Z", "text": "(In reply to alexander :surkov from comment #2)\n> If embed element will be exposed with MozillaWindowClass HWND\nSorry. Actually, this part of the solution will cause problems for NVDA due to the algorithm we use to determine whether an object is inside a given document. If the object's HWND is a descendant of the document HWND, we assume it is part of the document, which isn't necessarily true in this case. This code exists to support Firefox <= 3.6. I'm happy to discuss changing this, but it'll definitely break backwards compatibility. If the embed element is exposed with the document HWND as it is now, everything is fine.\n\n> WM_GETOBJECT for this HWND returns embed element\nThis is still fine. However, technically, this is a bit weird because WM_GETOBJECT for this HWND will return an accessible whose HWND is the document HWND. I guess this doesn't really matter that much, but it's worth noting.", "id": 6025311, "raw_text": "(In reply to alexander :surkov from comment #2)\n> If embed element will be exposed with MozillaWindowClass HWND\nSorry. Actually, this part of the solution will cause problems for NVDA due to the algorithm we use to determine whether an object is inside a given document. If the object's HWND is a descendant of the document HWND, we assume it is part of the document, which isn't necessarily true in this case. This code exists to support Firefox <= 3.6. I'm happy to discuss changing this, but it'll definitely break backwards compatibility. If the embed element is exposed with the document HWND as it is now, everything is fine.\n\n> WM_GETOBJECT for this HWND returns embed element\nThis is still fine. However, technically, this is a bit weird because WM_GETOBJECT for this HWND will return an accessible whose HWND is the document HWND. I guess this doesn't really matter that much, but it's worth noting.", "attachment_id": null, "time": "2012-02-01T11:35:13Z", "is_private": false}]}}, "comments": {}}