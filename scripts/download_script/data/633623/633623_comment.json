{"bugs": {"633623": {"comments": [{"bug_id": 633623, "tags": [], "creation_time": "2011-02-11T22:44:35Z", "attachment_id": null, "id": 5273936, "is_private": false, "author": "jwalden@mit.edu", "text": "var toSource = function() { throw 17; }\n  Object.preventExtensions(this);\n  eval(\"var x\");\n\nAccording to ES5 this should throw a TypeError, but because we invoke the user-specified toSource function when decompiling the global object, we instead end up throwing 17.  We should not invoke the user-specified method here and should instead use only our own decompilation facilities.", "raw_text": "var toSource = function() { throw 17; }\n  Object.preventExtensions(this);\n  eval(\"var x\");\n\nAccording to ES5 this should throw a TypeError, but because we invoke the user-specified toSource function when decompiling the global object, we instead end up throwing 17.  We should not invoke the user-specified method here and should instead use only our own decompilation facilities.", "creator": "jwalden@mit.edu", "time": "2011-02-11T22:44:35Z", "count": 0}, {"time": "2011-02-16T16:30:17Z", "count": 1, "raw_text": "Shorter and even more unfunny:\n\n  js> Object.prototype.toSource = {};\n  too much recursion", "creator": "jorendorff@mozilla.com", "text": "Shorter and even more unfunny:\n\n  js> Object.prototype.toSource = {};\n  too much recursion", "author": "jorendorff@mozilla.com", "is_private": false, "id": 5283176, "tags": [], "creation_time": "2011-02-16T16:30:17Z", "attachment_id": null, "bug_id": 633623}, {"raw_text": "I am vaguely optimistic that we could do this nowadays. The Firefox devtools now use their own code for displaying error objects, so they don't depend on toStringResult as much anymore. This could however regress the error message we log to stdout (and maybe the Browser console), so this could be annoying for Firefox/Gecko developers.\n\nOh additionally we are pretty far with removing `toSource` in general. They are not defined on content JS accessible objects anymore. `js::ValueToSource` will still try to invoke `toSource` even with toSourceEnabled is false. We should fix that. Additionally some of the other custom formatters like `ArrayToSource` are not side-effect free either.", "creator": "evilpies@gmail.com", "text": "I am vaguely optimistic that we could do this nowadays. The Firefox devtools now use their own code for displaying error objects, so they don't depend on toStringResult as much anymore. This could however regress the error message we log to stdout (and maybe the Browser console), so this could be annoying for Firefox/Gecko developers.\n\nOh additionally we are pretty far with removing `toSource` in general. They are not defined on content JS accessible objects anymore. `js::ValueToSource` will still try to invoke `toSource` even with toSourceEnabled is false. We should fix that. Additionally some of the other custom formatters like `ArrayToSource` are not side-effect free either.", "time": "2020-05-16T10:18:53Z", "count": 2, "tags": [], "creation_time": "2020-05-16T10:18:53Z", "attachment_id": null, "bug_id": 633623, "author": "evilpies@gmail.com", "is_private": false, "id": 14825257}]}}, "comments": {}}