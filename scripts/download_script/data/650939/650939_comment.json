{"comments": {}, "bugs": {"650939": {"comments": [{"author": "david.humphrey@senecacollege.ca", "text": "Here's an interesting post, with tests, showing performance of using Arrays and TypedArrays in the noVNC project:\n\nhttp://blog.n01se.net/?p=248\n\nIn it, the author finds that Firefox suffers from speed issues with random reads, perhaps a regression in the 4 time frame.\n\nThe tests are at https://github.com/kanaka/noVNC/blob/master/tests/arrays.html", "creation_time": "2011-04-18T22:00:13Z", "raw_text": "Here's an interesting post, with tests, showing performance of using Arrays and TypedArrays in the noVNC project:\n\nhttp://blog.n01se.net/?p=248\n\nIn it, the author finds that Firefox suffers from speed issues with random reads, perhaps a regression in the 4 time frame.\n\nThe tests are at https://github.com/kanaka/noVNC/blob/master/tests/arrays.html", "id": 5416910, "bug_id": 650939, "creator": "david.humphrey@senecacollege.ca", "tags": [], "count": 0, "attachment_id": null, "is_private": false, "time": "2011-04-18T22:00:13Z"}, {"is_private": false, "time": "2011-04-18T22:28:38Z", "attachment_id": null, "raw_text": "So the test loop is this:\nfor (cnt = 0; cnt < conf.read_cnt; cnt++) {\n    i = (arr[i] + cnt) % arraySize;\n}\nIf i change the mod to and and the time drops from 828 (5000000 reads / 1000000 array size) to 247.", "id": 5416998, "text": "So the test loop is this:\nfor (cnt = 0; cnt < conf.read_cnt; cnt++) {\n    i = (arr[i] + cnt) % arraySize;\n}\nIf i change the mod to and and the time drops from 828 (5000000 reads / 1000000 array size) to 247.", "creation_time": "2011-04-18T22:28:38Z", "bug_id": 650939, "creator": "evilpies@gmail.com", "tags": [], "count": 1, "author": "evilpies@gmail.com"}, {"is_private": false, "time": "2011-04-18T22:29:44Z", "attachment_id": null, "creation_time": "2011-04-18T22:29:44Z", "text": "*an and (&)", "id": 5417001, "raw_text": "*an and (&)", "tags": [], "count": 2, "creator": "evilpies@gmail.com", "bug_id": 650939, "author": "evilpies@gmail.com"}, {"bug_id": 650939, "creator": "bzbarsky@mit.edu", "tags": [], "count": 3, "text": "This is a tracer issue; if I disable the tracer then the problem more or less goes away.", "creation_time": "2011-04-20T06:11:10Z", "raw_text": "This is a tracer issue; if I disable the tracer then the problem more or less goes away.", "id": 5420613, "author": "bzbarsky@mit.edu", "time": "2011-04-20T06:11:10Z", "is_private": false, "attachment_id": null}, {"bug_id": 650939, "count": 4, "tags": [], "creator": "bzbarsky@mit.edu", "time": "2011-04-20T06:12:16Z", "raw_text": "And so far I have not managed to reproduce this in the shell....", "id": 5420614, "text": "And so far I have not managed to reproduce this in the shell....", "creation_time": "2011-04-20T06:12:16Z", "is_private": false, "author": "bzbarsky@mit.edu", "attachment_id": null}, {"id": 5420625, "raw_text": "", "creation_time": "2011-04-20T06:24:48Z", "text": "Created attachment 527201\nTotally non-minimal shell testcase which does NOT show the problem", "creator": "bzbarsky@mit.edu", "count": 5, "tags": [], "bug_id": 650939, "author": "bzbarsky@mit.edu", "is_private": false, "time": "2011-04-20T06:24:48Z", "attachment_id": 527201}, {"bug_id": 650939, "tags": [], "creator": "bzbarsky@mit.edu", "count": 6, "raw_text": "", "id": 5420630, "text": "Created attachment 527202\nMinimal HTML testcase using the same script which _does_ show the problem.", "creation_time": "2011-04-20T06:26:02Z", "author": "bzbarsky@mit.edu", "time": "2011-04-20T06:26:02Z", "is_private": false, "attachment_id": 527202}, {"time": "2011-04-20T06:43:29Z", "count": 7, "creator": "bzbarsky@mit.edu", "tags": [], "bug_id": 650939, "id": 5420717, "raw_text": "For what it's worth, I can't reproduce the \"normal\" array thing in browser either.\n\nBut for typed arrays I see us spending a ton of time under js::GetPropertyByName and js_NumberToStringWithBase.\n\nObvious guess is that we somehow end up with 'i' being a double; the question is _why_.  And why it only happens in browser....", "is_private": false, "creation_time": "2011-04-20T06:43:29Z", "text": "For what it's worth, I can't reproduce the \"normal\" array thing in browser either.\n\nBut for typed arrays I see us spending a ton of time under js::GetPropertyByName and js_NumberToStringWithBase.\n\nObvious guess is that we somehow end up with 'i' being a double; the question is _why_.  And why it only happens in browser....", "attachment_id": null, "author": "bzbarsky@mit.edu"}, {"attachment_id": 527206, "author": "bzbarsky@mit.edu", "count": 8, "creator": "bzbarsky@mit.edu", "tags": [], "time": "2011-04-20T06:54:18Z", "bug_id": 650939, "creation_time": "2011-04-20T06:54:18Z", "is_private": false, "text": "Created attachment 527206\nWhat looks like a minimal shell testcase; must be run with -m -j\n\nI might have been using just -j for the other shell testcase...\n\nThis testcase shows the problem when run with -m -j (as well as -m -j -p -a), but NOT with just -j or just -m.  Furthermore, it stops showing the problem if the typed array sequential read test is removed.  It stops showing the problem if the \"normal\" array random read test is removed or moved to after the typed array random read test. \n\nI hope someone who understands things like the oracle better than I can make sense of this...", "id": 5420719, "raw_text": "I might have been using just -j for the other shell testcase...\n\nThis testcase shows the problem when run with -m -j (as well as -m -j -p -a), but NOT with just -j or just -m.  Furthermore, it stops showing the problem if the typed array sequential read test is removed.  It stops showing the problem if the \"normal\" array random read test is removed or moved to after the typed array random read test. \n\nI hope someone who understands things like the oracle better than I can make sense of this..."}, {"bug_id": 650939, "creator": "bzbarsky@mit.edu", "count": 9, "time": "2011-04-20T07:22:47Z", "tags": [], "raw_text": "Interestingly, the type inference branch doesn't seem to have this problem, even if I just run |-m -j -p -a| or |-m -j| (i.e. without -n).  If I toss in -n, the behavior is identical to just -m except a bit faster (not nearly as fast as -j on either branch, though).\n\nBrian, any idea what changes on the TI branch might be affects -m -j without -n?", "id": 5420748, "text": "Interestingly, the type inference branch doesn't seem to have this problem, even if I just run |-m -j -p -a| or |-m -j| (i.e. without -n).  If I toss in -n, the behavior is identical to just -m except a bit faster (not nearly as fast as -j on either branch, though).\n\nBrian, any idea what changes on the TI branch might be affects -m -j without -n?", "creation_time": "2011-04-20T07:22:47Z", "is_private": false, "author": "bzbarsky@mit.edu", "attachment_id": null}, {"author": "jdemooij@mozilla.com", "raw_text": "JM typed array IC's are disabled on the TI branch (also without -n), see bug 643842.", "id": 5420758, "text": "JM typed array IC's are disabled on the TI branch (also without -n), see bug 643842.", "creation_time": "2011-04-20T07:35:13Z", "bug_id": 650939, "tags": [], "creator": "jdemooij@mozilla.com", "count": 10, "attachment_id": null, "is_private": false, "time": "2011-04-20T07:35:13Z"}, {"author": "bzbarsky@mit.edu", "tags": [], "count": 11, "creator": "bzbarsky@mit.edu", "bug_id": 650939, "id": 5421215, "raw_text": "Aha!  Let me go look at those; I bet they produce doubles for integer typed arrays or something.", "creation_time": "2011-04-20T14:50:49Z", "text": "Aha!  Let me go look at those; I bet they produce doubles for integer typed arrays or something.", "attachment_id": null, "time": "2011-04-20T14:50:49Z", "is_private": false}, {"count": 12, "tags": [], "creator": "bzbarsky@mit.edu", "time": "2011-04-20T15:25:08Z", "bug_id": 650939, "id": 5421286, "raw_text": "Hmm.  Except LoadFromTypedArray seems to tell masm that these are integers...  And disabling typed array ICs locally in my TM tree does not make the problem go away.", "creation_time": "2011-04-20T15:25:08Z", "is_private": false, "text": "Hmm.  Except LoadFromTypedArray seems to tell masm that these are integers...  And disabling typed array ICs locally in my TM tree does not make the problem go away.", "attachment_id": null, "author": "bzbarsky@mit.edu"}, {"author": "evilpies@gmail.com", "attachment_id": null, "text": "This just came up on HN again. http://news.ycombinator.com/item?id=4246967 (http://blog.varunkumar.me/2012/07/binary-data-processing-in-javascript.html)", "is_private": false, "creation_time": "2012-07-15T19:46:20Z", "raw_text": "This just came up on HN again. http://news.ycombinator.com/item?id=4246967 (http://blog.varunkumar.me/2012/07/binary-data-processing-in-javascript.html)", "id": 6474268, "bug_id": 650939, "time": "2012-07-15T19:46:20Z", "tags": [], "count": 13, "creator": "evilpies@gmail.com"}, {"attachment_id": null, "is_private": false, "time": "2012-07-15T21:18:50Z", "author": "msclrhd@gmail.com", "text": "There is a note at the end of the blog saying that when the generic function is replaced with one for each array type the performance improved significantly.\n\nThus, firefox is not instantiating a specialization of each function call. What should happen ideally is that if the type inference oracle (JM and/or Ion version) knows all the types of a function, it should create a specialization for that function using that information (remembering which specializations it has).", "creation_time": "2012-07-15T21:18:50Z", "raw_text": "There is a note at the end of the blog saying that when the generic function is replaced with one for each array type the performance improved significantly.\n\nThus, firefox is not instantiating a specialization of each function call. What should happen ideally is that if the type inference oracle (JM and/or Ion version) knows all the types of a function, it should create a specialization for that function using that information (remembering which specializations it has).", "id": 6474378, "bug_id": 650939, "creator": "msclrhd@gmail.com", "tags": [], "count": 14}]}}}