{"comments": {}, "bugs": {"676118": {"comments": [{"id": 5628984, "raw_text": "This patch adds the ability for NSS to encrypt and decrypt CMS (and S/MIME) messages using ECDH.  This patch is dependent on the patches in bug numbers 591640, 676100, and 676108 being accepted.  It also requires the patch in bug #676114 in order to work with smart cards, such as the PIV Card, that only implement the ECDH primitive.\n\nI have performed interoperability testing with Microsoft Outlook 2010 in order to verify that the patch implements ECDH in CMS correctly.\n\nI did not include any #ifdef statements in the patch, such as \"#ifdef NSS_ECC_MORE_THAN_SUITE_B\", but I understand that such an #ifdef will likely be added to any version of the patch that is incorporated into NSS.", "attachment_id": 550231, "text": "Created attachment 550231\nPatch to add ability to encrypt and decrypt CMS messages using ECDH\n\nThis patch adds the ability for NSS to encrypt and decrypt CMS (and S/MIME) messages using ECDH.  This patch is dependent on the patches in bug numbers 591640, 676100, and 676108 being accepted.  It also requires the patch in bug #676114 in order to work with smart cards, such as the PIV Card, that only implement the ECDH primitive.\n\nI have performed interoperability testing with Microsoft Outlook 2010 in order to verify that the patch implements ECDH in CMS correctly.\n\nI did not include any #ifdef statements in the patch, such as \"#ifdef NSS_ECC_MORE_THAN_SUITE_B\", but I understand that such an #ifdef will likely be added to any version of the patch that is incorporated into NSS.", "tags": [], "time": "2011-08-02T22:11:17Z", "creation_time": "2011-08-02T22:11:17Z", "author": "dcooper16@gmail.com", "is_private": false, "creator": "dcooper16@gmail.com", "bug_id": 676118, "count": 0}, {"count": 1, "bug_id": 676118, "attachment_id": 550235, "raw_text": "Based on my testing, I believe that the patch in attachment 550231 correctly implements ECDH in CMS.  However, I did encounter some problems when performing interoperability testing with Microsoft Outlook 2010.  The patch in attachment 550231 will decrypt messages that are encrypted using Outlook 2010, but messages that are encrypted using the patch in attachment 550231 cannot be decrypted using Outlook 2010.\n\nThe problem is due to a bug in Outlook 2010.  RFC 3635 (Section 2.3.2) and RFC 5753 (Section 7.2 and Appendix A.1) state that the parameters field MUST be absent for AES key wrap.  However, Outlook 2010 includes a parameters field with a value of NULL.  The value of the parameters field for the key wrap algorithm is used in the construction of ECC-CMS-SharedInfo, which is an input to the KDF.  So, having parameters present with a value of NULL rather than absent affects the result of the key derivation function.\n\nThis patch makes the messages encrypted by NSS compatible with Outlook 2010 by specifying a parameters field of NULL for AES key wrap rather than leaving the parameters field absent.  The result of this patch is to create encrypted messages that can be decrypted by Outlook 2010, but that are not compliant with the standard.  (This patch does not affect the decryption of messages.  When decrypting the code uses the the parameters field as encoded in the received message to construct ECC-CMS-SharedInfo.)\n\nI have reported this problem to someone at Microsoft and am hoping that Outlook 2010 will be patched so that it can decrypt messages that are encrypted in a standards compliant manner, in which case it would not be necessary to include this patch in NSS.  However, until Outlook is fixed, this patch is necessary to perform interoperability testing with Outlook.", "id": 5629020, "is_private": false, "creator": "dcooper16@gmail.com", "creation_time": "2011-08-02T22:26:05Z", "author": "dcooper16@gmail.com", "text": "Created attachment 550235\nMicrosoft Outlook 2010 compatibility patch\n\nBased on my testing, I believe that the patch in attachment 550231 correctly implements ECDH in CMS.  However, I did encounter some problems when performing interoperability testing with Microsoft Outlook 2010.  The patch in attachment 550231 will decrypt messages that are encrypted using Outlook 2010, but messages that are encrypted using the patch in attachment 550231 cannot be decrypted using Outlook 2010.\n\nThe problem is due to a bug in Outlook 2010.  RFC 3635 (Section 2.3.2) and RFC 5753 (Section 7.2 and Appendix A.1) state that the parameters field MUST be absent for AES key wrap.  However, Outlook 2010 includes a parameters field with a value of NULL.  The value of the parameters field for the key wrap algorithm is used in the construction of ECC-CMS-SharedInfo, which is an input to the KDF.  So, having parameters present with a value of NULL rather than absent affects the result of the key derivation function.\n\nThis patch makes the messages encrypted by NSS compatible with Outlook 2010 by specifying a parameters field of NULL for AES key wrap rather than leaving the parameters field absent.  The result of this patch is to create encrypted messages that can be decrypted by Outlook 2010, but that are not compliant with the standard.  (This patch does not affect the decryption of messages.  When decrypting the code uses the the parameters field as encoded in the received message to construct ECC-CMS-SharedInfo.)\n\nI have reported this problem to someone at Microsoft and am hoping that Outlook 2010 will be patched so that it can decrypt messages that are encrypted in a standards compliant manner, in which case it would not be necessary to include this patch in NSS.  However, until Outlook is fixed, this patch is necessary to perform interoperability testing with Outlook.", "time": "2011-08-02T22:26:05Z", "tags": []}, {"id": 5631949, "raw_text": "David, are the existing functions with similar names supposed to do what your new functions do? I recommended removing the existing functions in bug 671060 because they were incorrect and/or unused. At fist glance, it seems like you can instead replace the existing functions with your functions, instead of leaving them intact. If so, then I will resolve bug 671060 as a duplicate of this one.", "attachment_id": null, "bug_id": 676118, "tags": [], "time": "2011-08-04T00:08:37Z", "text": "David, are the existing functions with similar names supposed to do what your new functions do? I recommended removing the existing functions in bug 671060 because they were incorrect and/or unused. At fist glance, it seems like you can instead replace the existing functions with your functions, instead of leaving them intact. If so, then I will resolve bug 671060 as a duplicate of this one.", "author": "brian@briansmith.org", "creation_time": "2011-08-04T00:08:37Z", "count": 2, "creator": "brian@briansmith.org", "is_private": false}, {"id": 5631952, "attachment_id": null, "raw_text": "", "creation_time": "2011-08-04T00:09:52Z", "author": "brian@briansmith.org", "text": "*** Bug 671060 has been marked as a duplicate of this bug. ***", "time": "2011-08-04T00:09:52Z", "bug_id": 676118, "tags": [], "is_private": false, "creator": "brian@briansmith.org", "count": 3}, {"tags": [], "time": "2011-08-04T12:14:16Z", "text": "(In reply to comment #2)\n> David, are the existing functions with similar names supposed to do what\n> your new functions do? I recommended removing the existing functions in bug\n> 671060 because they were incorrect and/or unused. At fist glance, it seems\n> like you can instead replace the existing functions with your functions,\n> instead of leaving them intact. If so, then I will resolve bug 671060 as a\n> duplicate of this one.\n\nBrian, Sorry if my naming scheme caused confusion, but my new functions do not do the same thing as the functions mentioned in bug #671060,  so bug #671060 is not a duplicate of this bug.\n\nNSS_CMSUtil_EncryptSymKey_ESDH and NSS_CMSUtil_DecryptSymKey_ESDH are supposed to implement ephemeral-static Diffie-Hellman (i.e., the Diffie-Hellman algorithm using finite field cryptography) whereas NSS_CMSUtil_EncryptSymKey_ESECDH and NSS_CMSUtil_DecryptSymKey_ECDH implement ephemeral-static elliptic curve Diffie-Hellman (i.e., the Diffie-Hellman algorithm using elliptic curve cryptography).  Thus, I took the names from the functions in bug #671060 and added \"EC\" for \"elliptic curve\", although I named the decryption function \"ECDH\" rather than \"ESECDH\" since the function could be extended to support static-static elliptic-curve Diffie-Hellman (RFC 6278).\n\nMy original idea when implementing this patch was to first implement NSS_CMSUtil_EncryptSymKey_ESDH and NSS_CMSUtil_DecryptSymKey_ESDH and then use the resulting code to implement the elliptic curve version.  But I quickly discovered that the CMS implementations of Diffie-Hellman (RFC 2631) and elliptic curve Diffie-Hellman (RFC 5753) are quite different.  Each uses a different KDF and uses different inputs to the KDF.  Since I wasn't really interested in Diffie-Hellman anyway, I decided to just implement elliptic curve Diffie-Hellman and not bother to try to implement Diffie-Hellman.  Although the code in this patch could be used as a starting point if anyone did want to implement CMS encryption and decryption using (finite field) Diffie-Hellman.", "author": "dcooper16@gmail.com", "creation_time": "2011-08-04T12:14:16Z", "creator": "dcooper16@gmail.com", "is_private": false, "id": 5632895, "raw_text": "(In reply to comment #2)\n> David, are the existing functions with similar names supposed to do what\n> your new functions do? I recommended removing the existing functions in bug\n> 671060 because they were incorrect and/or unused. At fist glance, it seems\n> like you can instead replace the existing functions with your functions,\n> instead of leaving them intact. If so, then I will resolve bug 671060 as a\n> duplicate of this one.\n\nBrian, Sorry if my naming scheme caused confusion, but my new functions do not do the same thing as the functions mentioned in bug #671060,  so bug #671060 is not a duplicate of this bug.\n\nNSS_CMSUtil_EncryptSymKey_ESDH and NSS_CMSUtil_DecryptSymKey_ESDH are supposed to implement ephemeral-static Diffie-Hellman (i.e., the Diffie-Hellman algorithm using finite field cryptography) whereas NSS_CMSUtil_EncryptSymKey_ESECDH and NSS_CMSUtil_DecryptSymKey_ECDH implement ephemeral-static elliptic curve Diffie-Hellman (i.e., the Diffie-Hellman algorithm using elliptic curve cryptography).  Thus, I took the names from the functions in bug #671060 and added \"EC\" for \"elliptic curve\", although I named the decryption function \"ECDH\" rather than \"ESECDH\" since the function could be extended to support static-static elliptic-curve Diffie-Hellman (RFC 6278).\n\nMy original idea when implementing this patch was to first implement NSS_CMSUtil_EncryptSymKey_ESDH and NSS_CMSUtil_DecryptSymKey_ESDH and then use the resulting code to implement the elliptic curve version.  But I quickly discovered that the CMS implementations of Diffie-Hellman (RFC 2631) and elliptic curve Diffie-Hellman (RFC 5753) are quite different.  Each uses a different KDF and uses different inputs to the KDF.  Since I wasn't really interested in Diffie-Hellman anyway, I decided to just implement elliptic curve Diffie-Hellman and not bother to try to implement Diffie-Hellman.  Although the code in this patch could be used as a starting point if anyone did want to implement CMS encryption and decryption using (finite field) Diffie-Hellman.", "attachment_id": null, "bug_id": 676118, "count": 4}, {"bug_id": 676118, "count": 5, "author": "dcooper16@gmail.com", "creation_time": "2012-03-08T21:16:13Z", "time": "2012-03-08T21:16:13Z", "tags": [], "text": "Created attachment 604173\nPatch to add ability to encrypt and decrypt CMS messages using ECDH\n\nI didn't make any changes to the patch.  I just updated it so that it works with the current (i.e., HEAD) code in CVS.", "creator": "dcooper16@gmail.com", "is_private": false, "id": 6125605, "attachment_id": 604173, "raw_text": "I didn't make any changes to the patch.  I just updated it so that it works with the current (i.e., HEAD) code in CVS."}, {"bug_id": 676118, "count": 6, "text": "Created attachment 642001\nUpdated patch to add ability to encrypt and decrypt CMS messages using ECDH\n\nJust a very minor update to make the patch work with the current (i.e., HEAD) code in CVS.  I updated the portion of the patch for secoidt.h and secoidt.c to account for the two new OIDs that were just added to those files: SEC_OID_NIST_DSA_SIGNATURE_WITH_SHA224_DIGEST and SEC_OID_NIST_DSA_SIGNATURE_WITH_SHA256_DIGEST.", "time": "2012-07-13T19:28:37Z", "tags": [], "creation_time": "2012-07-13T19:28:37Z", "author": "dcooper16@gmail.com", "is_private": false, "creator": "dcooper16@gmail.com", "id": 6470898, "raw_text": "Just a very minor update to make the patch work with the current (i.e., HEAD) code in CVS.  I updated the portion of the patch for secoidt.h and secoidt.c to account for the two new OIDs that were just added to those files: SEC_OID_NIST_DSA_SIGNATURE_WITH_SHA224_DIGEST and SEC_OID_NIST_DSA_SIGNATURE_WITH_SHA256_DIGEST.", "attachment_id": 642001}, {"creation_time": "2019-09-05T18:46:10Z", "author": "dcooper16@gmail.com", "text": "Created attachment 9090793\nUpdated patch to add ability to encrypt and decrypt CMS messages using ECDH\n\nThis is just an update so that the patch works with the current NSS code.", "time": "2019-09-05T18:46:10Z", "bug_id": 676118, "tags": [], "is_private": false, "creator": "dcooper16@gmail.com", "count": 7, "id": 14344308, "attachment_id": 9090793, "raw_text": "This is just an update so that the patch works with the current NSS code."}, {"attachment_id": 9090793, "raw_text": "Assuming you need a sheriff opinion, redirecting this to Aryx.", "id": 14344378, "creator": "apavel@mozilla.com", "is_private": false, "author": "apavel@mozilla.com", "creation_time": "2019-09-05T19:13:58Z", "time": "2019-09-05T19:13:58Z", "tags": [], "text": "Comment on attachment 9090793\nUpdated patch to add ability to encrypt and decrypt CMS messages using ECDH\n\nAssuming you need a sheriff opinion, redirecting this to Aryx.", "count": 8, "bug_id": 676118}, {"is_private": false, "creator": "kaie@kuix.de", "count": 9, "creation_time": "2019-09-06T13:45:50Z", "author": "kaie@kuix.de", "text": "Which email clients already support ECDH with S/MIME?", "bug_id": 676118, "tags": [], "time": "2019-09-06T13:45:50Z", "attachment_id": null, "raw_text": "Which email clients already support ECDH with S/MIME?", "id": 14345876}, {"is_private": false, "creator": "dcooper16@gmail.com", "text": "(In reply to Kai Engert (:kaie:) from comment #9)\n> Which email clients already support ECDH with S/MIME?\n\nAs noted above, Microsoft Outlook 2010 supported ECDH in 2011, when I first developed a set of patches needed for NSS to support ECDH.  However, I haven't done anything with Outlook since then.\n\nOpenSSL's cms command can also encrypt and decrypt S/MIME messages using ECDH. I just tried it with OpenSSL 1.0.2s, 1.1.0k, and 1.1.1c, and all three support it.\n\nI have not tried any other email clients, so I don't know whether any others support it.", "tags": [], "time": "2019-09-06T17:25:15Z", "creation_time": "2019-09-06T17:25:15Z", "author": "dcooper16@gmail.com", "raw_text": "(In reply to Kai Engert (:kaie:) from comment #9)\n> Which email clients already support ECDH with S/MIME?\n\nAs noted above, Microsoft Outlook 2010 supported ECDH in 2011, when I first developed a set of patches needed for NSS to support ECDH.  However, I haven't done anything with Outlook since then.\n\nOpenSSL's cms command can also encrypt and decrypt S/MIME messages using ECDH. I just tried it with OpenSSL 1.0.2s, 1.1.0k, and 1.1.1c, and all three support it.\n\nI have not tried any other email clients, so I don't know whether any others support it.", "attachment_id": null, "id": 14346311, "count": 10, "bug_id": 676118}, {"id": 14357913, "attachment_id": null, "raw_text": "Just to set expectations, I've never seriously worked with this part of NSS, and I'm on my way to W3C TPAC for the next week. I probably won't be able to get to these reviews until the week of the 22nd. That said, Kai's review is sufficient to merge, certainly. If you need a second opinion while I'm unavailable, please ask kjacobs.", "creation_time": "2019-09-12T16:49:35Z", "author": "jc@insufficient.coffee", "text": "Just to set expectations, I've never seriously worked with this part of NSS, and I'm on my way to W3C TPAC for the next week. I probably won't be able to get to these reviews until the week of the 22nd. That said, Kai's review is sufficient to merge, certainly. If you need a second opinion while I'm unavailable, please ask kjacobs.", "tags": [], "time": "2019-09-12T16:49:35Z", "bug_id": 676118, "is_private": false, "creator": "jc@insufficient.coffee", "count": 11}, {"raw_text": "This patch adds some tests to nss/tests/smime for CMS messages encrypted using ECDH. It includes one test in which NSS is used to encrypt and then decrypt a message using ECDH. It also changes the multiple recipient test so that one of the recipients has an ECDH key.\n\nThis patch also adds several tests in which NSS is used to decrypt messages that were encrypted using OpenSSL. These tests may be particularly useful for bug #676100, as they help to demonstrate that the ASN.1 templates need to be corrected in order to be able to parse correctly encoded messages that were enveloped using ECDH.\n\nThe decryption tests are a work in progress. The PKCS #12 file and the sample encrypted messages should really just be separate files. However, since I didn't know how to include binary files in a patch file, I just included code in the smime.sh script to generate these binary files.\n\nMy original plan was to just have smime.sh call openssl to generate test files, and then use cmsutil to decrypt them. I also wanted to have cmsutil encrypt some messages and then use openssl to decrypt them. However, it seems that that would not be very portable. While OpenSSL has supported \"openssl cms\" with ECDH since version 1.0.2, the \"cms\" command is not supported the version of openssl (LibreSSL 2.6.5) that comes with the Mac.", "attachment_id": 9093918, "id": 14371691, "count": 12, "creator": "dcooper16@gmail.com", "is_private": false, "time": "2019-09-19T14:08:46Z", "tags": [], "bug_id": 676118, "text": "Created attachment 9093918\nECDH CMS tests\n\nThis patch adds some tests to nss/tests/smime for CMS messages encrypted using ECDH. It includes one test in which NSS is used to encrypt and then decrypt a message using ECDH. It also changes the multiple recipient test so that one of the recipients has an ECDH key.\n\nThis patch also adds several tests in which NSS is used to decrypt messages that were encrypted using OpenSSL. These tests may be particularly useful for bug #676100, as they help to demonstrate that the ASN.1 templates need to be corrected in order to be able to parse correctly encoded messages that were enveloped using ECDH.\n\nThe decryption tests are a work in progress. The PKCS #12 file and the sample encrypted messages should really just be separate files. However, since I didn't know how to include binary files in a patch file, I just included code in the smime.sh script to generate these binary files.\n\nMy original plan was to just have smime.sh call openssl to generate test files, and then use cmsutil to decrypt them. I also wanted to have cmsutil encrypt some messages and then use openssl to decrypt them. However, it seems that that would not be very portable. While OpenSSL has supported \"openssl cms\" with ECDH since version 1.0.2, the \"cms\" command is not supported the version of openssl (LibreSSL 2.6.5) that comes with the Mac.", "author": "dcooper16@gmail.com", "creation_time": "2019-09-19T14:08:46Z"}, {"raw_text": "FYI: I just discovered that RFC 8551, *Secure/Multipurpose Internet Mail Extensions (S/MIME) Version 4.0 Message Specification*, was published in April 2019, obsoleting RFC 5751.\n\nSection 2.3 of RFC 8551 says:\n>   Receiving and sending agents:\n>\n>   -  MUST support Elliptic Curve Diffie-Hellman (ECDH) ephemeral-static\n>      mode for P-256, as specified in [RFC5753].\n>\n>   -  MUST support ECDH ephemeral-static mode for X25519 using HKDF-256\n>      (\"HKDF\" stands for \"HMAC-based Key Derivation Function\") for the\n>      KDF, as specified in [RFC8418].", "attachment_id": null, "id": 14471509, "count": 13, "creator": "dcooper16@gmail.com", "is_private": false, "time": "2019-11-06T15:31:42Z", "tags": [], "bug_id": 676118, "text": "FYI: I just discovered that RFC 8551, *Secure/Multipurpose Internet Mail Extensions (S/MIME) Version 4.0 Message Specification*, was published in April 2019, obsoleting RFC 5751.\n\nSection 2.3 of RFC 8551 says:\n>   Receiving and sending agents:\n>\n>   -  MUST support Elliptic Curve Diffie-Hellman (ECDH) ephemeral-static\n>      mode for P-256, as specified in [RFC5753].\n>\n>   -  MUST support ECDH ephemeral-static mode for X25519 using HKDF-256\n>      (\"HKDF\" stands for \"HMAC-based Key Derivation Function\") for the\n>      KDF, as specified in [RFC8418].", "author": "dcooper16@gmail.com", "creation_time": "2019-11-06T15:31:42Z"}, {"bug_id": 676118, "count": 14, "id": 15065436, "attachment_id": null, "raw_text": "Hello David.\n\nI was very busy with OpenPGP in the previous year, and didn't want to risk regressions in S/MIME, because I knew I wouldn't have time to follow up.\nNow, I think this has been waiting long enough, and we should try to get this landed.\nWe're in the middle of the yearly Thunderbird development period, so we should have sufficient time to gather feedback on these enhancements.\n\nLooking at your patch, my only issue is that I cannot tell if the cryptographic code you're adding to cmspubkey.c is correct.\n\nJ.C. is there someone in the NSS team who could understand if David's code is correct, and would have time to review?", "creation_time": "2020-10-02T16:50:13Z", "author": "kaie@kuix.de", "text": "Hello David.\n\nI was very busy with OpenPGP in the previous year, and didn't want to risk regressions in S/MIME, because I knew I wouldn't have time to follow up.\nNow, I think this has been waiting long enough, and we should try to get this landed.\nWe're in the middle of the yearly Thunderbird development period, so we should have sufficient time to gather feedback on these enhancements.\n\nLooking at your patch, my only issue is that I cannot tell if the cryptographic code you're adding to cmspubkey.c is correct.\n\nJ.C. is there someone in the NSS team who could understand if David's code is correct, and would have time to review?", "tags": [], "time": "2020-10-02T16:50:13Z", "is_private": false, "creator": "kaie@kuix.de"}, {"count": 15, "creator": "kaie@kuix.de", "is_private": false, "tags": [], "bug_id": 676118, "time": "2021-03-01T13:53:37Z", "text": "Benjamin, what do you think about comment 14?", "author": "kaie@kuix.de", "creation_time": "2021-03-01T13:53:37Z", "raw_text": "Benjamin, what do you think about comment 14?", "attachment_id": null, "id": 15288340}, {"bug_id": 676118, "count": 16, "text": "Hi Kai, I think it is fine to take it.\nI can't really spend time on this, could you take the lead by providing the patch and review it?\nI can have a second look when you think it is ready.", "time": "2021-03-02T07:59:26Z", "tags": [], "creation_time": "2021-03-02T07:59:26Z", "author": "bbeurdouche@mozilla.com", "is_private": false, "creator": "bbeurdouche@mozilla.com", "id": 15289751, "raw_text": "Hi Kai, I think it is fine to take it.\nI can't really spend time on this, could you take the lead by providing the patch and review it?\nI can have a second look when you think it is ready.", "attachment_id": null}]}}}