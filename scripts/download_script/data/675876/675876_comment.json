{"bugs": {"675876": {"comments": [{"author": "u238590@disabled.tld", "creator": "u238590@disabled.tld", "attachment_id": 550022, "time": "2011-08-02T07:55:34Z", "text": "Created attachment 550022\nServer code to generate the core dump\n\nI can reproduce a crash in PORT_Assert(!ss->xtnData.sniNameArr); \nhttp://mxr.mozilla.org/mozilla/source/security/nss/lib/ssl/sslsock.c#441\n\nAttached is file my.cpp. \n\nTo build it use the following Makefile :\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n$cat Makefile \nSECURITY_DIR=/share/builds/components/security/SECURITY_3.12.10_20110506/SunOS5.8_DBG.OBJ/\nall:\n        /usr/dist/share/sunstudio_sparc,v12.0/SUNWspro/bin/CC -g -I$(INCL_DIR) -I$(SECURITY_DIR)/include -L$(SECURITY_DIR)/lib -lnspr4 -lnss3 -lssl3 my.cpp\n\nTo create certs :\n~~~~~~~~~~~~~~~\n$certutil -N -d sql:.\n$certutil -S -d sql:. -n ecccert -s \"CN=www.ecc.com\" -t \"Cu,Cu,Cu\" -k ec -q nistp256 -x -m 1343 -v 120 -5\n$certutil -S -d sql:. -n rsacert -s \"CN=www.rsa.com\" -t \"Cu,Cu,Cu\" -x -v 120 -5\n\nWhen it asks for input type\n1     5      9    y\n\nTo run tests :\n~~~~~~~~~~~~~~~\nServer :\n$./a.out 3333\n\nClient :\n$tstclnt -c :C00A -h hostname -d sql:. -o -p 3333 -2 -a www.abc.com < sni-abc.req \ntstclnt: write to SSL socket failed: Cannot communicate securely with peer: no common encryption algorithm(s).\n\nQuestion is why when I have enabled that cipher in the server program?\ncipher TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA = { 0xC0, 0x0A } i.e. -c :C00A  \n\n$cat sni-abc.req\nGET /sec.html HTTP/1.1\nHost: www.abc.com\nConnection: close\n\n\ncore dump :\n~~~~~~~~~~~~\n$dbx a.out core.23855\nt@1 (l@1) program terminated by signal ABRT (Abort)\n0xfee4c95c: __lwp_kill+0x0008:  bcc,a,pt  %icc,__lwp_kill+0x18  ! 0xfee4c96c\nCurrent function is PR_Assert\n(dbx) where                                                                  \ncurrent thread: t@1\n  [1] __lwp_kill(0x0, 0x6, 0x0, 0x6, 0xffbffeff, 0x0), at 0xfee4c95c \n  [2] raise(0x6, 0x0, 0x0, 0xfee2c1f8, 0xffffffff, 0x6), at 0xfede5d3c \n  [3] abort(0x0, 0x1, 0xfee2c1d4, 0xeea98, 0xfeeb3418, 0x0), at 0xfedc1a2c \n=>[4] PR_Assert(s = 0xff07a51c \"!ss->xtnData.sniNameArr\", file = 0xff07a534 \"sslsock.c\", ln = 441), line 577 in \"prlog.c\"\n  [5] ssl_DestroySocketContents(ss = 0xffbfc8b0), line 441 in \"sslsock.c\"\n  [6] ssl_FreeSocket(ss = 0x9d8c0), line 478 in \"sslsock.c\"\n  [7] ssl_DefClose(ss = 0x9d8c0), line 233 in \"ssldef.c\"\n  [8] ssl_SecureClose(ss = 0x9d8c0), line 1078 in \"sslsecur.c\"\n  [9] ssl_Close(fd = 0x6af58), line 1572 in \"sslsock.c\"\n  [10] PR_Close(fd = 0x6af58), line 136 in \"priometh.c\"\n  [11] cleanup(fd = 0x6af58), line 228 in \"my.cpp\"\n  [12] main(argc = 2, argv = 0xffbff95c), line 292 in \"my.cpp\"", "creation_time": "2011-08-02T07:55:34Z", "raw_text": "I can reproduce a crash in PORT_Assert(!ss->xtnData.sniNameArr); \nhttp://mxr.mozilla.org/mozilla/source/security/nss/lib/ssl/sslsock.c#441\n\nAttached is file my.cpp. \n\nTo build it use the following Makefile :\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n$cat Makefile \nSECURITY_DIR=/share/builds/components/security/SECURITY_3.12.10_20110506/SunOS5.8_DBG.OBJ/\nall:\n        /usr/dist/share/sunstudio_sparc,v12.0/SUNWspro/bin/CC -g -I$(INCL_DIR) -I$(SECURITY_DIR)/include -L$(SECURITY_DIR)/lib -lnspr4 -lnss3 -lssl3 my.cpp\n\nTo create certs :\n~~~~~~~~~~~~~~~\n$certutil -N -d sql:.\n$certutil -S -d sql:. -n ecccert -s \"CN=www.ecc.com\" -t \"Cu,Cu,Cu\" -k ec -q nistp256 -x -m 1343 -v 120 -5\n$certutil -S -d sql:. -n rsacert -s \"CN=www.rsa.com\" -t \"Cu,Cu,Cu\" -x -v 120 -5\n\nWhen it asks for input type\n1     5      9    y\n\nTo run tests :\n~~~~~~~~~~~~~~~\nServer :\n$./a.out 3333\n\nClient :\n$tstclnt -c :C00A -h hostname -d sql:. -o -p 3333 -2 -a www.abc.com < sni-abc.req \ntstclnt: write to SSL socket failed: Cannot communicate securely with peer: no common encryption algorithm(s).\n\nQuestion is why when I have enabled that cipher in the server program?\ncipher TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA = { 0xC0, 0x0A } i.e. -c :C00A  \n\n$cat sni-abc.req\nGET /sec.html HTTP/1.1\nHost: www.abc.com\nConnection: close\n\n\ncore dump :\n~~~~~~~~~~~~\n$dbx a.out core.23855\nt@1 (l@1) program terminated by signal ABRT (Abort)\n0xfee4c95c: __lwp_kill+0x0008:  bcc,a,pt  %icc,__lwp_kill+0x18  ! 0xfee4c96c\nCurrent function is PR_Assert\n(dbx) where                                                                  \ncurrent thread: t@1\n  [1] __lwp_kill(0x0, 0x6, 0x0, 0x6, 0xffbffeff, 0x0), at 0xfee4c95c \n  [2] raise(0x6, 0x0, 0x0, 0xfee2c1f8, 0xffffffff, 0x6), at 0xfede5d3c \n  [3] abort(0x0, 0x1, 0xfee2c1d4, 0xeea98, 0xfeeb3418, 0x0), at 0xfedc1a2c \n=>[4] PR_Assert(s = 0xff07a51c \"!ss->xtnData.sniNameArr\", file = 0xff07a534 \"sslsock.c\", ln = 441), line 577 in \"prlog.c\"\n  [5] ssl_DestroySocketContents(ss = 0xffbfc8b0), line 441 in \"sslsock.c\"\n  [6] ssl_FreeSocket(ss = 0x9d8c0), line 478 in \"sslsock.c\"\n  [7] ssl_DefClose(ss = 0x9d8c0), line 233 in \"ssldef.c\"\n  [8] ssl_SecureClose(ss = 0x9d8c0), line 1078 in \"sslsecur.c\"\n  [9] ssl_Close(fd = 0x6af58), line 1572 in \"sslsock.c\"\n  [10] PR_Close(fd = 0x6af58), line 136 in \"priometh.c\"\n  [11] cleanup(fd = 0x6af58), line 228 in \"my.cpp\"\n  [12] main(argc = 2, argv = 0xffbff95c), line 292 in \"my.cpp\"", "bug_id": 675876, "id": 5627181, "is_private": false, "count": 0, "tags": []}, {"creator": "u238590@disabled.tld", "author": "u238590@disabled.tld", "text": "Note that the same problem exists if only 1 ECC cert is added first on the socket. And client requests for RSA cert. That RSA cert is suposed to be returned by SNI Callback using SSL_ConfigureSecureServer. \n\nHere is what I think is happening : \nWhen a socket is configured with only one either ECC/RSA cert . Client sends request for the other one RSA/ECC.  We dynamically add the certificate in SNI callback using SSL_ConfigureSecureServer. But I think its too late. Even before that tstclnt gets the error.", "attachment_id": null, "time": "2011-08-02T12:11:11Z", "raw_text": "Note that the same problem exists if only 1 ECC cert is added first on the socket. And client requests for RSA cert. That RSA cert is suposed to be returned by SNI Callback using SSL_ConfigureSecureServer. \n\nHere is what I think is happening : \nWhen a socket is configured with only one either ECC/RSA cert . Client sends request for the other one RSA/ECC.  We dynamically add the certificate in SNI callback using SSL_ConfigureSecureServer. But I think its too late. Even before that tstclnt gets the error.", "creation_time": "2011-08-02T12:11:11Z", "bug_id": 675876, "is_private": false, "count": 1, "tags": [], "id": 5627423}, {"author": "u238590@disabled.tld", "creator": "u238590@disabled.tld", "creation_time": "2011-08-03T07:56:59Z", "raw_text": "Reason why tstclnt is getting \"no common cipher ...\" error is  : \n\n In ssl3_HandleClientHello in file \"ssl3con.c\", NSS is calling this function  \n\n    /* Disable any ECC cipher suites for which we have no cert. */  \n    ssl3_FilterECCipherSuitesByServerCerts(ss);\n\nsee http://mxr.mozilla.org/mozilla/source/security/nss/lib/ssl/ssl3con.c#6190\n\nWhich disables all ECC ciphers if no ECC certs are registered with the socket  yet. \n\nWe are not registering default ECC cert with this socket in the beginning. \n\nWe add ECC cert when SNI callback is called later which is too late.\n\nSo for SNI to work, we must mandate that the users have to add atleast one cert of each type as the default cert in the beginning for all the certs of that type to work in SNI callback.", "time": "2011-08-03T07:56:59Z", "attachment_id": null, "text": "Reason why tstclnt is getting \"no common cipher ...\" error is  : \n\n In ssl3_HandleClientHello in file \"ssl3con.c\", NSS is calling this function  \n\n    /* Disable any ECC cipher suites for which we have no cert. */  \n    ssl3_FilterECCipherSuitesByServerCerts(ss);\n\nsee http://mxr.mozilla.org/mozilla/source/security/nss/lib/ssl/ssl3con.c#6190\n\nWhich disables all ECC ciphers if no ECC certs are registered with the socket  yet. \n\nWe are not registering default ECC cert with this socket in the beginning. \n\nWe add ECC cert when SNI callback is called later which is too late.\n\nSo for SNI to work, we must mandate that the users have to add atleast one cert of each type as the default cert in the beginning for all the certs of that type to work in SNI callback.", "id": 5629886, "count": 2, "is_private": false, "tags": [], "bug_id": 675876}, {"attachment_id": null, "time": "2011-08-03T09:34:26Z", "author": "u238590@disabled.tld", "text": "Also an assumption is made in function ssl3_config_match_init() that if the server cert of that type is already registered as a default certificate for that socket, then only set suite->isPresent flag true. \n\nhttp://mxr.mozilla.org/mozilla/source/security/nss/lib/ssl/ssl3con.c#695\n\n 694         svrAuth = ss->serverCerts + exchKeyType;\n...\n 700         suite->isPresent = (PRBool)\n 701         (((exchKeyType == kt_null) ||\n 702            ((!isServer || (svrAuth->serverKeyPair &&\n 703                            svrAuth->SERVERKEY &&\n 704                    svrAuth->serverCertChain)) &&\n 705             PK11_TokenExists(kea_alg_defs[exchKeyType]))) &&\n 706         ((cipher_alg == calg_null) || PK11_TokenExists(cipher_mech)));", "creator": "u238590@disabled.tld", "raw_text": "Also an assumption is made in function ssl3_config_match_init() that if the server cert of that type is already registered as a default certificate for that socket, then only set suite->isPresent flag true. \n\nhttp://mxr.mozilla.org/mozilla/source/security/nss/lib/ssl/ssl3con.c#695\n\n 694         svrAuth = ss->serverCerts + exchKeyType;\n...\n 700         suite->isPresent = (PRBool)\n 701         (((exchKeyType == kt_null) ||\n 702            ((!isServer || (svrAuth->serverKeyPair &&\n 703                            svrAuth->SERVERKEY &&\n 704                    svrAuth->serverCertChain)) &&\n 705             PK11_TokenExists(kea_alg_defs[exchKeyType]))) &&\n 706         ((cipher_alg == calg_null) || PK11_TokenExists(cipher_mech)));", "creation_time": "2011-08-03T09:34:26Z", "bug_id": 675876, "id": 5629999, "count": 3, "is_private": false, "tags": []}, {"text": "As far as core dump is concerned, \n\n    5966 ssl3_HandleClientHello(sslSocket *ss, SSL3Opaque *b, PRUint32 length)\ncalls   ssl3_HandleHelloExtensions() where xtnData is populated as shown below :\n (dbx) p *xtnData\n  *xtnData = {\n     serverSenders           = (\n     {\n         sniNameArr              = 0x690a8\n        sniNameArrSize          = 1U\n     }\n (dbx) p *xtnData->sniNameArr\n  *xtnData->sniNameArr = {\n      type = siBuffer\n      data = 0xa46c2 \"www.abc.com\"\n      len  = 11U\n }\nbut in this case my program goes to alert_loser  \nhttp://mxr.mozilla.org/mozilla/source/security/nss/lib/ssl/ssl3con.c#6287\n    6286     errCode = SSL_ERROR_NO_CYPHER_OVERLAP;\n    6287     goto alert_loser;\n\nSince it goes to alert_loser i.e. line 6655 , it skips lines where we are freeing this sniNameArr :\n\n    6603         if (ss->xtnData.sniNameArr) {\n    6604             PORT_Free(ss->xtnData.sniNameArr);\n    6605             ss->xtnData.sniNameArr = NULL;\n    6606             ss->xtnData.sniNameArrSize = 0;\n    6607         }\n\nin the end in my program, PR_Close()  calls ssl_DestroySocketContents() which calls  ssl_DestroyGather(). As you can see ssl_DestroyGather sets \"www.abc.com\" to \"\".\n\nhttp://mxr.mozilla.org/mozilla/source/security/nss/lib/ssl/ssl3con.c#6287 \n(dbx) n\nt@1 (l@1) stopped in ssl_DestroySocketContents at line 411 in file \"sslsock.c\"\n  411       ssl_DestroyGather(&ss->gs);\nj = <not active>\n*ss->xtnData.sniNameArr = {\n    type = siBuffer\n    data = 0xa46c2 \"www.abc.com\"\n    len  = 11U\n}\nss->xtnData.sniNameArrSize = 1U\n(dbx) n\nt@1 (l@1) stopped in ssl_DestroySocketContents at line 413 in file \"sslsock.c\"\n  413       if (ss->peerID != NULL)\nj = <not active>\n*ss->xtnData.sniNameArr = {\n    type = siBuffer\n    data = 0xa46c2 \"\"\n    len  = 11U\n}\nand then it dumps core at\n\nt@1 (l@1) stopped in ssl_DestroySocketContents at line 441 in file \"sslsock.c\"\n  441       PORT_Assert(!ss->xtnData.sniNameArr);", "creator": "u238590@disabled.tld", "time": "2011-08-03T11:47:23Z", "attachment_id": null, "author": "u238590@disabled.tld", "creation_time": "2011-08-03T11:47:23Z", "raw_text": "As far as core dump is concerned, \n\n    5966 ssl3_HandleClientHello(sslSocket *ss, SSL3Opaque *b, PRUint32 length)\ncalls   ssl3_HandleHelloExtensions() where xtnData is populated as shown below :\n (dbx) p *xtnData\n  *xtnData = {\n     serverSenders           = (\n     {\n         sniNameArr              = 0x690a8\n        sniNameArrSize          = 1U\n     }\n (dbx) p *xtnData->sniNameArr\n  *xtnData->sniNameArr = {\n      type = siBuffer\n      data = 0xa46c2 \"www.abc.com\"\n      len  = 11U\n }\nbut in this case my program goes to alert_loser  \nhttp://mxr.mozilla.org/mozilla/source/security/nss/lib/ssl/ssl3con.c#6287\n    6286     errCode = SSL_ERROR_NO_CYPHER_OVERLAP;\n    6287     goto alert_loser;\n\nSince it goes to alert_loser i.e. line 6655 , it skips lines where we are freeing this sniNameArr :\n\n    6603         if (ss->xtnData.sniNameArr) {\n    6604             PORT_Free(ss->xtnData.sniNameArr);\n    6605             ss->xtnData.sniNameArr = NULL;\n    6606             ss->xtnData.sniNameArrSize = 0;\n    6607         }\n\nin the end in my program, PR_Close()  calls ssl_DestroySocketContents() which calls  ssl_DestroyGather(). As you can see ssl_DestroyGather sets \"www.abc.com\" to \"\".\n\nhttp://mxr.mozilla.org/mozilla/source/security/nss/lib/ssl/ssl3con.c#6287 \n(dbx) n\nt@1 (l@1) stopped in ssl_DestroySocketContents at line 411 in file \"sslsock.c\"\n  411       ssl_DestroyGather(&ss->gs);\nj = <not active>\n*ss->xtnData.sniNameArr = {\n    type = siBuffer\n    data = 0xa46c2 \"www.abc.com\"\n    len  = 11U\n}\nss->xtnData.sniNameArrSize = 1U\n(dbx) n\nt@1 (l@1) stopped in ssl_DestroySocketContents at line 413 in file \"sslsock.c\"\n  413       if (ss->peerID != NULL)\nj = <not active>\n*ss->xtnData.sniNameArr = {\n    type = siBuffer\n    data = 0xa46c2 \"\"\n    len  = 11U\n}\nand then it dumps core at\n\nt@1 (l@1) stopped in ssl_DestroySocketContents at line 441 in file \"sslsock.c\"\n  441       PORT_Assert(!ss->xtnData.sniNameArr);", "bug_id": 675876, "count": 4, "is_private": false, "tags": [], "id": 5630126}, {"text": "Created attachment 566166\nAttaching rough patch given by Alexei (not ready for review)\n\nAttaching rough patch given by Alexei (not ready for review). There is one bug in this patch as given in https://bugzilla.mozilla.org/show_bug.cgi?id=693274#c2", "time": "2011-10-11T10:59:21Z", "attachment_id": 566166, "creation_time": "2011-10-11T10:59:21Z", "raw_text": "Attaching rough patch given by Alexei (not ready for review). There is one bug in this patch as given in https://bugzilla.mozilla.org/show_bug.cgi?id=693274#c2", "bug_id": 675876, "tags": [], "count": 5, "is_private": false, "id": 5774001, "creator": "u238590@disabled.tld", "author": "u238590@disabled.tld"}, {"bug_id": 675876, "id": 5785643, "tags": [], "is_private": false, "count": 6, "attachment_id": 567391, "time": "2011-10-17T05:01:26Z", "text": "Created attachment 567391\nPatch v1 - set up socket for the negotiated name before checking cache\n\nAssertion happens during the restart due to incorrect setup of the socket when session info is taken from cache. The solution is to pre-configure socket with the sni callback before restring session info from the cache. It has minimum performance impact to restart.\n\nThis fix will also resolve the bug 693274", "creation_time": "2011-10-17T05:01:26Z", "raw_text": "Assertion happens during the restart due to incorrect setup of the socket when session info is taken from cache. The solution is to pre-configure socket with the sni callback before restring session info from the cache. It has minimum performance impact to restart.\n\nThis fix will also resolve the bug 693274", "author": "alvolkov.bgs@gmail.com", "creator": "alvolkov.bgs@gmail.com"}, {"creation_time": "2011-10-17T05:40:59Z", "raw_text": "Thanx Alexei for working in the weekend.", "time": "2011-10-17T05:40:59Z", "attachment_id": null, "text": "Thanx Alexei for working in the weekend.", "id": 5785672, "count": 7, "is_private": false, "tags": [], "bug_id": 675876, "author": "u238590@disabled.tld", "creator": "u238590@disabled.tld"}, {"text": "Can you tell me which build tags should I use to check out NSS and NSPR to test this patch?\n\nFrom what I see this patch is built on cvs revision 1.51\n    https://bug675876.bugzilla.mozilla.org/attachment.cgi?id=567391&action=diff&collapsed=&context=patch&format=raw&headers=1\n    See at the top.\n\nFrom cvs stats it has one more version 1.52\n    $cvs stat ssl3con.c\n    ...\n    revision 1.152\n    date: 2011/10/01 03:59:54; author: bsmith%mozilla.com; state: Exp; lines: +68 -28   \n    Bug 665814: Prevent chosen plaintext attacks on SSL 3.0 and TLS 1.0 connections, r=wtc, sr=rrelyea   \n    ---------------------------- \n    revision 1.151    \n    date: 2011/07/26 02:13:37;  author: wtc%google.com;  state: Exp; lines: +3 -4  \n    Bug 673477: Expose the error code set by CERT_ExtractPublicKey in ssl3_VerifySignedHashes and ssl3_SendClientKeyExchange.  r=wtc.      \n    ----------------------------\n\nAs per the graph http://bonsai.mozilla.org/cvsgraph.cgi?file=mozilla/security/nss/lib/ssl/ssl3con.c\n1.51 was checked into NSS_3_13_BETA1\nand \n1.52 was checked into NSS_3_13_RTM, NSS_3_13_RC0, NSS_3_13_BETA2, HEAD.", "attachment_id": null, "time": "2011-10-19T07:29:21Z", "raw_text": "Can you tell me which build tags should I use to check out NSS and NSPR to test this patch?\n\nFrom what I see this patch is built on cvs revision 1.51\n    https://bug675876.bugzilla.mozilla.org/attachment.cgi?id=567391&action=diff&collapsed=&context=patch&format=raw&headers=1\n    See at the top.\n\nFrom cvs stats it has one more version 1.52\n    $cvs stat ssl3con.c\n    ...\n    revision 1.152\n    date: 2011/10/01 03:59:54; author: bsmith%mozilla.com; state: Exp; lines: +68 -28   \n    Bug 665814: Prevent chosen plaintext attacks on SSL 3.0 and TLS 1.0 connections, r=wtc, sr=rrelyea   \n    ---------------------------- \n    revision 1.151    \n    date: 2011/07/26 02:13:37;  author: wtc%google.com;  state: Exp; lines: +3 -4  \n    Bug 673477: Expose the error code set by CERT_ExtractPublicKey in ssl3_VerifySignedHashes and ssl3_SendClientKeyExchange.  r=wtc.      \n    ----------------------------\n\nAs per the graph http://bonsai.mozilla.org/cvsgraph.cgi?file=mozilla/security/nss/lib/ssl/ssl3con.c\n1.51 was checked into NSS_3_13_BETA1\nand \n1.52 was checked into NSS_3_13_RTM, NSS_3_13_RC0, NSS_3_13_BETA2, HEAD.", "creation_time": "2011-10-19T07:29:21Z", "bug_id": 675876, "tags": [], "is_private": false, "count": 8, "id": 5791322, "creator": "u238590@disabled.tld", "author": "u238590@disabled.tld"}, {"id": 5793871, "count": 9, "is_private": false, "tags": [], "bug_id": 675876, "raw_text": "Alexei,\nI patched these diffs on NSS 3.12 as shown below.\n\ncvs -q -z3 co -P -r NSPR_4_8_9_RTM mozilla/nsprpub\ncvs -q -z3 co -P -r NSS_3_12_BRANCH mozilla/dbm mozilla/security/dbm mozilla/security/coreconf mozilla/security/nss\ncvs -q -z3 co -P -r NSS_3_11_1_RTM mozilla/security/nss/lib/freebl/ecl/ecl-curve.h\ncd mozilla/security/nss\ngmake nss_build_all NSS_ENABLE_ECC=1 NSS_ECC_MORE_THAN_SUITE_B=1 \n\nAssert failures are gone. But the test program attached is failing. Can you please take a look? I am still getting in the client :\n\ntstclnt: write to SSL socket failed: Cannot communicate securely with peer: no common encryption algorithm(s).", "creation_time": "2011-10-20T06:47:23Z", "time": "2011-10-20T06:47:23Z", "attachment_id": null, "text": "Alexei,\nI patched these diffs on NSS 3.12 as shown below.\n\ncvs -q -z3 co -P -r NSPR_4_8_9_RTM mozilla/nsprpub\ncvs -q -z3 co -P -r NSS_3_12_BRANCH mozilla/dbm mozilla/security/dbm mozilla/security/coreconf mozilla/security/nss\ncvs -q -z3 co -P -r NSS_3_11_1_RTM mozilla/security/nss/lib/freebl/ecl/ecl-curve.h\ncd mozilla/security/nss\ngmake nss_build_all NSS_ENABLE_ECC=1 NSS_ECC_MORE_THAN_SUITE_B=1 \n\nAssert failures are gone. But the test program attached is failing. Can you please take a look? I am still getting in the client :\n\ntstclnt: write to SSL socket failed: Cannot communicate securely with peer: no common encryption algorithm(s).", "author": "u238590@disabled.tld", "creator": "u238590@disabled.tld"}, {"creation_time": "2011-10-21T06:15:56Z", "raw_text": "Alexei,\n    Could this failure be due to the fact that  client uses v2 hello? if yes, how can I change the client code for testing? \nRegards, \nMeena", "text": "Alexei,\n    Could this failure be due to the fact that  client uses v2 hello? if yes, how can I change the client code for testing? \nRegards, \nMeena", "time": "2011-10-21T06:15:56Z", "attachment_id": null, "tags": [], "count": 10, "is_private": false, "id": 5796310, "bug_id": 675876, "creator": "u238590@disabled.tld", "author": "u238590@disabled.tld"}, {"author": "u238590@disabled.tld", "creator": "u238590@disabled.tld", "raw_text": "I tested with our server and tstclnt its working. So looks like the test program I attached was buggy. Please ignore my last two comments.", "creation_time": "2011-10-21T12:43:01Z", "attachment_id": null, "time": "2011-10-21T12:43:01Z", "text": "I tested with our server and tstclnt its working. So looks like the test program I attached was buggy. Please ignore my last two comments.", "id": 5796594, "is_private": false, "count": 11, "tags": [], "bug_id": 675876}, {"raw_text": "Alexei,\n    This doesn't fix the reconfig Bug 693274 - \"If SNI callback function returns a new cert for the same SNI name, SSL session cache returns the older cert by mistake\"", "creation_time": "2011-10-21T13:13:49Z", "time": "2011-10-21T13:13:49Z", "attachment_id": null, "text": "Alexei,\n    This doesn't fix the reconfig Bug 693274 - \"If SNI callback function returns a new cert for the same SNI name, SSL session cache returns the older cert by mistake\"", "id": 5796632, "is_private": false, "count": 12, "tags": [], "bug_id": 675876, "author": "u238590@disabled.tld", "creator": "u238590@disabled.tld"}, {"author": "u238590@disabled.tld", "creator": "u238590@disabled.tld", "time": "2011-10-22T13:43:01Z", "attachment_id": null, "text": "I debugged what is happening in my test program, I saw\n\nIts disabling ECC suites first sslecc.cpp file function ssl3_HandleSupportedCurvesXtn\n\n1184 ssl3_DisableECCSuites(ss, ecdhe_ecdsa_suites);\n\nSTACK : \n\n(gdb) where\n#0  ssl3_HandleSupportedCurvesXtn (ss=0x6a6280, ex_type=10, data=0x7fffffffd820) at ssl3ecc.c:1184\n#1  0x00002aaaab0b18af in ssl3_HandleHelloExtensions (ss=0x6a6280, b=0x7fffffffd880,   length=0x7fffffffd87c) at ssl3ext.c:1384\n#2  0x00002aaaab09e44b in ssl3_HandleClientHello (ss=0x6a6280, b=0x6adc6d \"\", length=6)  at ssl3con.c:6192\n#3  0x00002aaaab0a3855 in ssl3_HandleHandshakeMessage (ss=0x6a6280,   b=0x6adbf4 \"\\003\\001N\\242\\263h\\313\\372u0\\263\\234g\\374\\061\\236\\254\\377\\071+\\260\\224\\373\\315\\036\\224\\300\\273\\027C\\375I\\330#\", length=127) at ssl3con.c:8586\n#4  0x00002aaaab0a3cee in ssl3_HandleHandshake (ss=0x6a6280, origBuf=0x6a65e8) at ssl3con.c:8721\n#5  0x00002aaaab0a48ca in ssl3_HandleRecord (ss=0x6a6280, cText=0x7fffffffdbf0, databuf=0x6a65e8)   at ssl3con.c:9060\n#6  0x00002aaaab0a5a65 in ssl3_GatherCompleteHandshake (ss=0x6a6280, flags=0) at ssl3gthr.c:209\n#7  0x00002aaaab0a8694 in ssl_GatherRecord1stHandshake (ss=0x6a6280) at sslcon.c:1258\n#8  0x00002aaaab0b4203 in ssl_Do1stHandshake (ss=0x6a6280) at sslsecur.c:151\n#9  0x00002aaaab0b61cb in ssl_SecureRecv (ss=0x6a6280, buf=0x7fffffffe190 \"\", len=1024, flags=0)\n    at sslsecur.c:1150\n#10 0x00002aaaab0b6297 in ssl_SecureRead (ss=0x6a6280, buf=0x7fffffffe190 \"\", len=1024)   at sslsecur.c:1169\n#11 0x00002aaaab0be4c2 in ssl_Read (fd=0x695250, buf=0x7fffffffe190, len=1024) at sslsock.c:1639\n#12 0x00002aaaaaabc8e2 in PR_Read (fd=0x695250, buf=0x7fffffffe190, amount=1024)   at ../../../../pr/src/io/priometh.c:141\n#13 0x0000000000401449 in readDataFromSocket (sslSocket=0x695250) at my.cpp:195\n#14 0x00000000004014f7 in read_write (fd=0x695250) at my.cpp:228\n#15 0x0000000000401bfa in main (argc=2, argv=0x7fffffffe778) at my.cpp:293\n\n....\n\nLater In\n5874 static int\n5875 ssl3_sniSocketConfig(sslSocket *ss, SSL3AlertDescription *desc,\n5876                      int *errCode)\n\nIt calls SNI Callback function of my test program which returns 0 which is the index of SNI Names array\n\nso it goes to\n5928         } else if (ret < ss->xtnData.sniNameArrSize) {\n\nIt calls ssl3_config_match_init :\n\n5964\t    configedCiphers = ssl3_config_match_init(ss);\n\nIn this function I printed the cipher suite set unfortunately it contains only 5 enabled ciphers : \n\n {{cipher_suite = 49162, policy = 1, enabled = 0, isPresent = 0}, \n {cipher_suite = 49172, policy = 1, enabled = 0, isPresent = 0}, \n {cipher_suite = 136, policy = 1, enabled = 0,  isPresent = 0}, \n {cipher_suite = 135, policy = 1, enabled = 0, isPresent = 0}, \n {cipher_suite = 57, policy = 1, enabled = 0, isPresent = 0}, \n {cipher_suite = 56, policy = 1, enabled = 0, isPresent = 0}, \n {cipher_suite = 49167, policy = 1, enabled = 0, isPresent = 0}, \n {cipher_suite = 49157, policy = 1, enabled = 0, isPresent = 0}, \n {cipher_suite = 132, policy = 1, enabled = 0, isPresent = 0}, \n {cipher_suite = 53, policy = 1, enabled = 0, isPresent = 0}, \n {cipher_suite = 49159, policy = 1, enabled = 0, isPresent = 0}, \n {cipher_suite = 49161, policy = 1, enabled = 0, isPresent = 0}, \n {cipher_suite = 49169,  policy = 1, enabled = 0, isPresent = 0}, \n {cipher_suite = 49171, policy = 1, enabled = 0,  isPresent = 0}, \n {cipher_suite = 69, policy = 1, enabled = 0, isPresent = 0}, \n {cipher_suite = 68, policy = 1, enabled = 0, isPresent = 0}, \n {cipher_suite = 102, policy = 1, enabled = 0, isPresent = 0}, \n {cipher_suite = 51, policy = 1, enabled = 0, isPresent = 0}, \n {cipher_suite = 50, policy = 1, enabled = 0, isPresent = 0}, \n {cipher_suite = 49164, policy = 1,  enabled = 0, isPresent = 0}, \n {cipher_suite = 49166, policy = 1, enabled = 0, isPresent = 0},\n {cipher_suite = 49154, policy = 1, enabled = 0, isPresent = 0}, \n {cipher_suite = 49156, policy = 1, enabled = 0, isPresent = 0}, \n {cipher_suite = 150, policy = 1, enabled = 0, isPresent = 0}, \n {cipher_suite = 65, policy = 1, enabled = 0, isPresent = 0}, \n{cipher_suite = 4, policy = 1, enabled = 1, isPresent = 0}, \n {cipher_suite = 5, policy = 1,  enabled = 0, isPresent = 0}, \n {cipher_suite = 47, policy = 1, enabled = 0, isPresent = 0}, \n {cipher_suite = 49160, policy = 1, enabled = 0, isPresent = 0}, \n {cipher_suite = 49170,  policy = 1, enabled = 0, isPresent = 0}, \n {cipher_suite = 22, policy = 1, enabled = 0, isPresent = 0}, \n {cipher_suite = 19, policy = 1, enabled = 0, isPresent = 0}, \n {cipher_suite = 49165, policy = 1, enabled = 0, isPresent = 0}, \n {cipher_suite = 49155, policy = 1, enabled = 0, isPresent = 0}, \n{cipher_suite = 65279, policy = 1, enabled = 1, isPresent = 0}, \n{cipher_suite = 10, policy = 1, enabled = 1, isPresent = 0}, \n {cipher_suite = 21, policy = 1, enabled = 0, isPresent = 0}, \n {cipher_suite = 18, policy = 1, enabled = 0, isPresent = 0}, \n{cipher_suite = 65278, policy = 1, enabled = 1, isPresent = 0}, \n{cipher_suite = 9, policy = 1, enabled = 1, isPresent = 0}, \n {cipher_suite = 100, policy = 1,  enabled = 0, isPresent = 0},\n {cipher_suite = 98, policy = 1, enabled = 0, isPresent = 0}, \n {cipher_suite = 3, policy = 1, enabled = 0, isPresent = 0}, \n {cipher_suite = 6, policy = 1, enabled = 0, isPresent = 0}, \n {cipher_suite = 49158, policy = 1, enabled = 0, isPresent = 0}, \n {cipher_suite = 49168, policy = 1, enabled = 0, isPresent = 0}, \n {cipher_suite = 49163,  policy = 1, enabled = 0, isPresent = 0}, \n {cipher_suite = 49153, policy = 1, enabled = 0,  isPresent = 0}, \n {cipher_suite = 2, policy = 1, enabled = 0, isPresent = 0}, \n {cipher_suite = 1, policy = 1, enabled = 0, isPresent = 0}}\n\nWhen I printed out the details of these ciphers I got : \ncipher_suite #   bulk_cipher_alg   mac_alg       key_exchange_alg\n             4        cipher_rc4   ssl_mac_md5   kea_rsa\n         65279       cipher_3des   ssl_mac_sha   kea_rsa_fips\n            10       cipher_3des   ssl_mac_sha   kea_rsa\n         65278        cipher_des   ssl_mac_sha   kea_rsa_fips\n             9        cipher_des   ssl_mac_sha   kea_rsa\n\nAs you can see no ECC ciphers are enabled in the above set so it eventually fails in\n\n6423\t    errCode = SSL_ERROR_NO_CYPHER_OVERLAP;\n6424\t    goto alert_loser;\n\nof lines ssl3_HandleClientHello.\n\nHope this helps to debug the reason why my test program doesn't work.", "creation_time": "2011-10-22T13:43:01Z", "raw_text": "I debugged what is happening in my test program, I saw\n\nIts disabling ECC suites first sslecc.cpp file function ssl3_HandleSupportedCurvesXtn\n\n1184 ssl3_DisableECCSuites(ss, ecdhe_ecdsa_suites);\n\nSTACK : \n\n(gdb) where\n#0  ssl3_HandleSupportedCurvesXtn (ss=0x6a6280, ex_type=10, data=0x7fffffffd820) at ssl3ecc.c:1184\n#1  0x00002aaaab0b18af in ssl3_HandleHelloExtensions (ss=0x6a6280, b=0x7fffffffd880,   length=0x7fffffffd87c) at ssl3ext.c:1384\n#2  0x00002aaaab09e44b in ssl3_HandleClientHello (ss=0x6a6280, b=0x6adc6d \"\", length=6)  at ssl3con.c:6192\n#3  0x00002aaaab0a3855 in ssl3_HandleHandshakeMessage (ss=0x6a6280,   b=0x6adbf4 \"\\003\\001N\\242\\263h\\313\\372u0\\263\\234g\\374\\061\\236\\254\\377\\071+\\260\\224\\373\\315\\036\\224\\300\\273\\027C\\375I\\330#\", length=127) at ssl3con.c:8586\n#4  0x00002aaaab0a3cee in ssl3_HandleHandshake (ss=0x6a6280, origBuf=0x6a65e8) at ssl3con.c:8721\n#5  0x00002aaaab0a48ca in ssl3_HandleRecord (ss=0x6a6280, cText=0x7fffffffdbf0, databuf=0x6a65e8)   at ssl3con.c:9060\n#6  0x00002aaaab0a5a65 in ssl3_GatherCompleteHandshake (ss=0x6a6280, flags=0) at ssl3gthr.c:209\n#7  0x00002aaaab0a8694 in ssl_GatherRecord1stHandshake (ss=0x6a6280) at sslcon.c:1258\n#8  0x00002aaaab0b4203 in ssl_Do1stHandshake (ss=0x6a6280) at sslsecur.c:151\n#9  0x00002aaaab0b61cb in ssl_SecureRecv (ss=0x6a6280, buf=0x7fffffffe190 \"\", len=1024, flags=0)\n    at sslsecur.c:1150\n#10 0x00002aaaab0b6297 in ssl_SecureRead (ss=0x6a6280, buf=0x7fffffffe190 \"\", len=1024)   at sslsecur.c:1169\n#11 0x00002aaaab0be4c2 in ssl_Read (fd=0x695250, buf=0x7fffffffe190, len=1024) at sslsock.c:1639\n#12 0x00002aaaaaabc8e2 in PR_Read (fd=0x695250, buf=0x7fffffffe190, amount=1024)   at ../../../../pr/src/io/priometh.c:141\n#13 0x0000000000401449 in readDataFromSocket (sslSocket=0x695250) at my.cpp:195\n#14 0x00000000004014f7 in read_write (fd=0x695250) at my.cpp:228\n#15 0x0000000000401bfa in main (argc=2, argv=0x7fffffffe778) at my.cpp:293\n\n....\n\nLater In\n5874 static int\n5875 ssl3_sniSocketConfig(sslSocket *ss, SSL3AlertDescription *desc,\n5876                      int *errCode)\n\nIt calls SNI Callback function of my test program which returns 0 which is the index of SNI Names array\n\nso it goes to\n5928         } else if (ret < ss->xtnData.sniNameArrSize) {\n\nIt calls ssl3_config_match_init :\n\n5964\t    configedCiphers = ssl3_config_match_init(ss);\n\nIn this function I printed the cipher suite set unfortunately it contains only 5 enabled ciphers : \n\n {{cipher_suite = 49162, policy = 1, enabled = 0, isPresent = 0}, \n {cipher_suite = 49172, policy = 1, enabled = 0, isPresent = 0}, \n {cipher_suite = 136, policy = 1, enabled = 0,  isPresent = 0}, \n {cipher_suite = 135, policy = 1, enabled = 0, isPresent = 0}, \n {cipher_suite = 57, policy = 1, enabled = 0, isPresent = 0}, \n {cipher_suite = 56, policy = 1, enabled = 0, isPresent = 0}, \n {cipher_suite = 49167, policy = 1, enabled = 0, isPresent = 0}, \n {cipher_suite = 49157, policy = 1, enabled = 0, isPresent = 0}, \n {cipher_suite = 132, policy = 1, enabled = 0, isPresent = 0}, \n {cipher_suite = 53, policy = 1, enabled = 0, isPresent = 0}, \n {cipher_suite = 49159, policy = 1, enabled = 0, isPresent = 0}, \n {cipher_suite = 49161, policy = 1, enabled = 0, isPresent = 0}, \n {cipher_suite = 49169,  policy = 1, enabled = 0, isPresent = 0}, \n {cipher_suite = 49171, policy = 1, enabled = 0,  isPresent = 0}, \n {cipher_suite = 69, policy = 1, enabled = 0, isPresent = 0}, \n {cipher_suite = 68, policy = 1, enabled = 0, isPresent = 0}, \n {cipher_suite = 102, policy = 1, enabled = 0, isPresent = 0}, \n {cipher_suite = 51, policy = 1, enabled = 0, isPresent = 0}, \n {cipher_suite = 50, policy = 1, enabled = 0, isPresent = 0}, \n {cipher_suite = 49164, policy = 1,  enabled = 0, isPresent = 0}, \n {cipher_suite = 49166, policy = 1, enabled = 0, isPresent = 0},\n {cipher_suite = 49154, policy = 1, enabled = 0, isPresent = 0}, \n {cipher_suite = 49156, policy = 1, enabled = 0, isPresent = 0}, \n {cipher_suite = 150, policy = 1, enabled = 0, isPresent = 0}, \n {cipher_suite = 65, policy = 1, enabled = 0, isPresent = 0}, \n{cipher_suite = 4, policy = 1, enabled = 1, isPresent = 0}, \n {cipher_suite = 5, policy = 1,  enabled = 0, isPresent = 0}, \n {cipher_suite = 47, policy = 1, enabled = 0, isPresent = 0}, \n {cipher_suite = 49160, policy = 1, enabled = 0, isPresent = 0}, \n {cipher_suite = 49170,  policy = 1, enabled = 0, isPresent = 0}, \n {cipher_suite = 22, policy = 1, enabled = 0, isPresent = 0}, \n {cipher_suite = 19, policy = 1, enabled = 0, isPresent = 0}, \n {cipher_suite = 49165, policy = 1, enabled = 0, isPresent = 0}, \n {cipher_suite = 49155, policy = 1, enabled = 0, isPresent = 0}, \n{cipher_suite = 65279, policy = 1, enabled = 1, isPresent = 0}, \n{cipher_suite = 10, policy = 1, enabled = 1, isPresent = 0}, \n {cipher_suite = 21, policy = 1, enabled = 0, isPresent = 0}, \n {cipher_suite = 18, policy = 1, enabled = 0, isPresent = 0}, \n{cipher_suite = 65278, policy = 1, enabled = 1, isPresent = 0}, \n{cipher_suite = 9, policy = 1, enabled = 1, isPresent = 0}, \n {cipher_suite = 100, policy = 1,  enabled = 0, isPresent = 0},\n {cipher_suite = 98, policy = 1, enabled = 0, isPresent = 0}, \n {cipher_suite = 3, policy = 1, enabled = 0, isPresent = 0}, \n {cipher_suite = 6, policy = 1, enabled = 0, isPresent = 0}, \n {cipher_suite = 49158, policy = 1, enabled = 0, isPresent = 0}, \n {cipher_suite = 49168, policy = 1, enabled = 0, isPresent = 0}, \n {cipher_suite = 49163,  policy = 1, enabled = 0, isPresent = 0}, \n {cipher_suite = 49153, policy = 1, enabled = 0,  isPresent = 0}, \n {cipher_suite = 2, policy = 1, enabled = 0, isPresent = 0}, \n {cipher_suite = 1, policy = 1, enabled = 0, isPresent = 0}}\n\nWhen I printed out the details of these ciphers I got : \ncipher_suite #   bulk_cipher_alg   mac_alg       key_exchange_alg\n             4        cipher_rc4   ssl_mac_md5   kea_rsa\n         65279       cipher_3des   ssl_mac_sha   kea_rsa_fips\n            10       cipher_3des   ssl_mac_sha   kea_rsa\n         65278        cipher_des   ssl_mac_sha   kea_rsa_fips\n             9        cipher_des   ssl_mac_sha   kea_rsa\n\nAs you can see no ECC ciphers are enabled in the above set so it eventually fails in\n\n6423\t    errCode = SSL_ERROR_NO_CYPHER_OVERLAP;\n6424\t    goto alert_loser;\n\nof lines ssl3_HandleClientHello.\n\nHope this helps to debug the reason why my test program doesn't work.", "bug_id": 675876, "id": 5798604, "tags": [], "count": 13, "is_private": false}, {"id": 5798740, "count": 14, "is_private": false, "tags": [], "bug_id": 675876, "raw_text": "My guess is the cipher in my test case and curve do not match. I will fix my test case and let you know.", "creation_time": "2011-10-22T16:50:29Z", "attachment_id": null, "time": "2011-10-22T16:50:29Z", "text": "My guess is the cipher in my test case and curve do not match. I will fix my test case and let you know.", "author": "u238590@disabled.tld", "creator": "u238590@disabled.tld"}, {"creator": "u238590@disabled.tld", "author": "u238590@disabled.tld", "text": "When I try the reverse case ECC in listen socket and RSA in SNI VS and passing -c c (RSA cipher) in the test client. That works. :-)\n\nEven without SNI my test program crashes  in\n    Assertion failure: numPresent > 0 || numEnabled == 0, at ssl3con.c:711\n    Aborted\nSo confirms my belief about curve and cipher.\n\nBut when I test in Web Server, the same tstclnt, same NSS libraries, this works. wonder how. \n\nHere is ssltap output :\n    --> [\n    (136 bytes of 131)\n    SSLRecord { [Mon Oct 24 08:36:09 2011]\n       type    = 22 (handshake)\n       version = { 3,1 }\n       length  = 131 (0x83)\n       handshake {\n          type = 1 (client_hello)\n          length = 127 (0x00007f)\n             ClientHelloV3 {\n                client_version = {3, 1}\n   ...\n                cipher_suites[2] = {\n                    (0x00ff) TLS_EMPTY_RENEGOTIATION_INFO_SCSV\n                    (0xc00a) TLS/ECDHE-ECDSA/AES256-CBC/SHA\n                }\n                compression[1] = {\n                    (00) NULL\n                }\n                extensions[82] = {\n                  extension type server_name, length [16] = {\n       0: 00 0e 00 00  0b 77 77 77  2e 61 62 63  2e 63 6f 6d  | .....www.abc.com\n                  }\n                  extension type elliptic_curves, length [52] = {\n       0: 00 32 00 01  00 02 00 03  00 04 00 05  00 06 00 07  | .2..............\n      10: 00 08 00 09  00 0a 00 0b  00 0c 00 0d  00 0e 00 0f  | ................\n      20: 00 10 00 11  00 12 00 13  00 14 00 15  00 16 00 17  | ................\n      30: 00 18 00 19                                         | ....\n                  }\n                  extension type ec_point_formats, length [2] = {\n       0: 01 00                                               | ..\n                  }\n                }\n             }\n       }\n    }\n    ]\n    <-- [\n    (7 bytes of 2)\n    SSLRecord { [Mon Oct 24 08:36:09 2011]\n       type    = 21 (alert)\n       version = { 3,1 }\n       length  = 2 (0x2)\n       fatal: handshake_failure\n    }\n    ]\n...\n\nMy cert is :\n\n    $certutil -L -d sql:. -n ecccert\n    Certificate:\n        Data:\n            Version: 3 (0x2)\n            Serial Number: 1343 (0x53f)\n            Signature Algorithm: X9.62 ECDSA signature with SHA-1\n            Issuer: \"CN=www.abc.com\"\n            Validity:  Not Before: ...  Not After : ...\n            Subject: \"CN=www.abc.com\"\n            Subject Public Key Info:\n                Public Key Algorithm: X9.62 elliptic curve public key\n                    Args:   06:08:2a:86:48:ce:3d:03:01:07\n                EC Public Key:\n                    PublicValue:\n                        04:fd:77:40:1e:8f:82:53:c2:b3:51:38:b1:dd:4f:14:\n                        3f:96:e9:a8:ef:ae:f4:f4:cb:3f:63:38:5d:68:69:12:\n                        33:a0:ce:ac:21:0c:96:e7:4b:b3:d2:c0:29:db:8c:92:\n                        32:cc:72:f0:06:73:7b:ec:90:d4:04:35:e4:cf:0c:b3:\n                        e2\n                    Curve: ANSI X9.62 elliptic curve prime256v1 (aka secp256r1, NIST P-256)\n            Signed Extensions:  Name: Certificate Type   Critical: True   Data: <SSL Server,SSL CA>\n        Signature Algorithm: X9.62 ECDSA signature with SHA-1\n        Signature:\n  ...", "attachment_id": null, "time": "2011-10-24T16:23:02Z", "creation_time": "2011-10-24T16:23:02Z", "raw_text": "When I try the reverse case ECC in listen socket and RSA in SNI VS and passing -c c (RSA cipher) in the test client. That works. :-)\n\nEven without SNI my test program crashes  in\n    Assertion failure: numPresent > 0 || numEnabled == 0, at ssl3con.c:711\n    Aborted\nSo confirms my belief about curve and cipher.\n\nBut when I test in Web Server, the same tstclnt, same NSS libraries, this works. wonder how. \n\nHere is ssltap output :\n    --> [\n    (136 bytes of 131)\n    SSLRecord { [Mon Oct 24 08:36:09 2011]\n       type    = 22 (handshake)\n       version = { 3,1 }\n       length  = 131 (0x83)\n       handshake {\n          type = 1 (client_hello)\n          length = 127 (0x00007f)\n             ClientHelloV3 {\n                client_version = {3, 1}\n   ...\n                cipher_suites[2] = {\n                    (0x00ff) TLS_EMPTY_RENEGOTIATION_INFO_SCSV\n                    (0xc00a) TLS/ECDHE-ECDSA/AES256-CBC/SHA\n                }\n                compression[1] = {\n                    (00) NULL\n                }\n                extensions[82] = {\n                  extension type server_name, length [16] = {\n       0: 00 0e 00 00  0b 77 77 77  2e 61 62 63  2e 63 6f 6d  | .....www.abc.com\n                  }\n                  extension type elliptic_curves, length [52] = {\n       0: 00 32 00 01  00 02 00 03  00 04 00 05  00 06 00 07  | .2..............\n      10: 00 08 00 09  00 0a 00 0b  00 0c 00 0d  00 0e 00 0f  | ................\n      20: 00 10 00 11  00 12 00 13  00 14 00 15  00 16 00 17  | ................\n      30: 00 18 00 19                                         | ....\n                  }\n                  extension type ec_point_formats, length [2] = {\n       0: 01 00                                               | ..\n                  }\n                }\n             }\n       }\n    }\n    ]\n    <-- [\n    (7 bytes of 2)\n    SSLRecord { [Mon Oct 24 08:36:09 2011]\n       type    = 21 (alert)\n       version = { 3,1 }\n       length  = 2 (0x2)\n       fatal: handshake_failure\n    }\n    ]\n...\n\nMy cert is :\n\n    $certutil -L -d sql:. -n ecccert\n    Certificate:\n        Data:\n            Version: 3 (0x2)\n            Serial Number: 1343 (0x53f)\n            Signature Algorithm: X9.62 ECDSA signature with SHA-1\n            Issuer: \"CN=www.abc.com\"\n            Validity:  Not Before: ...  Not After : ...\n            Subject: \"CN=www.abc.com\"\n            Subject Public Key Info:\n                Public Key Algorithm: X9.62 elliptic curve public key\n                    Args:   06:08:2a:86:48:ce:3d:03:01:07\n                EC Public Key:\n                    PublicValue:\n                        04:fd:77:40:1e:8f:82:53:c2:b3:51:38:b1:dd:4f:14:\n                        3f:96:e9:a8:ef:ae:f4:f4:cb:3f:63:38:5d:68:69:12:\n                        33:a0:ce:ac:21:0c:96:e7:4b:b3:d2:c0:29:db:8c:92:\n                        32:cc:72:f0:06:73:7b:ec:90:d4:04:35:e4:cf:0c:b3:\n                        e2\n                    Curve: ANSI X9.62 elliptic curve prime256v1 (aka secp256r1, NIST P-256)\n            Signed Extensions:  Name: Certificate Type   Critical: True   Data: <SSL Server,SSL CA>\n        Signature Algorithm: X9.62 ECDSA signature with SHA-1\n        Signature:\n  ...", "bug_id": 675876, "count": 15, "is_private": false, "tags": [], "id": 5800608}, {"bug_id": 675876, "id": 5802143, "count": 16, "is_private": false, "tags": [], "time": "2011-10-25T01:42:09Z", "attachment_id": null, "text": "Meena,\n\nExactly how did you trigger another assertion ? Please detail what the test case is.", "raw_text": "Meena,\n\nExactly how did you trigger another assertion ? Please detail what the test case is.", "creation_time": "2011-10-25T01:42:09Z", "author": "julien.pierre@oracle.com", "creator": "julien.pierre@oracle.com"}, {"tags": [], "count": 17, "is_private": false, "id": 5802175, "bug_id": 675876, "creation_time": "2011-10-25T01:59:20Z", "raw_text": "Review of attachment 566166:\n-----------------------------------------------------------------\n\nThis patch was reportedly not working.", "text": "Comment on attachment 566166\nAttaching rough patch given by Alexei (not ready for review)\n\nReview of attachment 566166:\n-----------------------------------------------------------------\n\nThis patch was reportedly not working.", "time": "2011-10-25T01:59:20Z", "attachment_id": 566166, "creator": "julien.pierre@oracle.com", "author": "julien.pierre@oracle.com"}, {"bug_id": 675876, "count": 18, "is_private": false, "tags": [], "id": 5802212, "text": "I found a  problem.\n\nThe test program uses SSL_CipherPrefSetDefault to create the mode socket. If the listener only has an RSA cert, NSS disables the ECC cipher suites early on during handshake processing.\nThe ECC suites don't get re-enabled again after SNI processing.\n\nIf the program is modified to use SSL_CipherPrefSet instead, then things work as expected.", "attachment_id": null, "time": "2011-10-25T02:25:55Z", "creation_time": "2011-10-25T02:25:55Z", "raw_text": "I found a  problem.\n\nThe test program uses SSL_CipherPrefSetDefault to create the mode socket. If the listener only has an RSA cert, NSS disables the ECC cipher suites early on during handshake processing.\nThe ECC suites don't get re-enabled again after SNI processing.\n\nIf the program is modified to use SSL_CipherPrefSet instead, then things work as expected.", "creator": "julien.pierre@oracle.com", "author": "julien.pierre@oracle.com"}, {"raw_text": "Bob, Wan-Teh,\n\nWe need a reviewer for the latest patch attached to this bug. Alexei is no longer with Oracle, and Nelson doesn't have the time. Would either of you be able to take care of it this week ?", "creation_time": "2011-10-25T02:28:08Z", "time": "2011-10-25T02:28:08Z", "attachment_id": null, "author": "julien.pierre@oracle.com", "creator": "julien.pierre@oracle.com", "text": "Bob, Wan-Teh,\n\nWe need a reviewer for the latest patch attached to this bug. Alexei is no longer with Oracle, and Nelson doesn't have the time. Would either of you be able to take care of it this week ?", "id": 5802217, "count": 19, "is_private": false, "tags": [], "bug_id": 675876}, {"creator": "u238590@disabled.tld", "author": "u238590@disabled.tld", "is_private": false, "count": 20, "tags": [], "id": 5802541, "bug_id": 675876, "raw_text": "If I modify this test program I attached and remove all Virtual Server and SNI part and have just ECC certificate set on listener and with cipher set as follows:\n\n  secStatus = SSL_CipherPrefSetDefault(TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA, PR_TRUE);\n\nRun this command\n/export/home/meena/security/nss-sni-fix-3.12/Linux2.6_64_DBG.OBJ/bin/tstclnt -c :C00A -h hostname -d sql:. -o -p 3333 -2 -a www.abc.com < req.txt\n\nMy test program crashes as shown below\n\n$./a.out 3333\nCreate Listener model socket, add SSL properties, add certificate.\nAbout to call accept.\nReading data from socket...\nAssertion failure: numPresent > 0 || numEnabled == 0, at ssl3con.c:711\nAborted\n\n$gdb a.out core\n...\n(gdb) p numPresent\n$1 = 0\n(gdb) p numEnabled\n$2 = 5\n(gdb) where\n#0  0x0000003beea30265 in raise () from /lib64/libc.so.6\n#1  0x0000003beea31d10 in abort () from /lib64/libc.so.6\n#2  0x00002b128a28fa9e in PR_Assert (s=0x2b128a897f80 \"numPresent > 0 || numEnabled == 0\",\n    file=0x2b128a897f3e \"ssl3con.c\", ln=711) at ../../../../pr/src/io/prlog.c:577\n#3  0x00002b128a861334 in ssl3_config_match_init (ss=0x97e4510) at ssl3con.c:711\n#4  0x00002b128a875412 in ssl2_ConstructCipherSpecs (ss=0x97e4510) at sslcon.c:206\n#5  0x00002b128a87d574 in ssl2_BeginServerHandshake (ss=0x97e4510) at sslcon.c:3800\n#6  0x00002b128a883203 in ssl_Do1stHandshake (ss=0x97e4510) at sslsecur.c:151\n#7  0x00002b128a8851cb in ssl_SecureRecv (ss=0x97e4510, buf=0x7fff4be7f500 \"\", len=1024, flags=0) at sslsecur.c:1150\n#8  0x00002b128a885297 in ssl_SecureRead (ss=0x97e4510, buf=0x7fff4be7f500 \"\", len=1024) at sslsecur.c:1169\n#9  0x00002b128a88d4c2 in ssl_Read (fd=0x97de2a0, buf=0x7fff4be7f500, len=1024) at sslsock.c:1639\n#10 0x00002b128a28b8e2 in PR_Read (fd=0x97de2a0, buf=0x7fff4be7f500, amount=1024) at ../../../../pr/src/io/priometh.c:141\n#11 0x0000000000401269 in readDataFromSocket (sslSocket=0x97de2a0) at my.cpp:126\n#12 0x0000000000401317 in read_write (fd=0x97de2a0) at my.cpp:159\n#13 0x0000000000401804 in main (argc=2, argv=0x7fff4be7fad8) at my.cpp:219\n(gdb)", "creation_time": "2011-10-25T07:25:24Z", "text": "If I modify this test program I attached and remove all Virtual Server and SNI part and have just ECC certificate set on listener and with cipher set as follows:\n\n  secStatus = SSL_CipherPrefSetDefault(TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA, PR_TRUE);\n\nRun this command\n/export/home/meena/security/nss-sni-fix-3.12/Linux2.6_64_DBG.OBJ/bin/tstclnt -c :C00A -h hostname -d sql:. -o -p 3333 -2 -a www.abc.com < req.txt\n\nMy test program crashes as shown below\n\n$./a.out 3333\nCreate Listener model socket, add SSL properties, add certificate.\nAbout to call accept.\nReading data from socket...\nAssertion failure: numPresent > 0 || numEnabled == 0, at ssl3con.c:711\nAborted\n\n$gdb a.out core\n...\n(gdb) p numPresent\n$1 = 0\n(gdb) p numEnabled\n$2 = 5\n(gdb) where\n#0  0x0000003beea30265 in raise () from /lib64/libc.so.6\n#1  0x0000003beea31d10 in abort () from /lib64/libc.so.6\n#2  0x00002b128a28fa9e in PR_Assert (s=0x2b128a897f80 \"numPresent > 0 || numEnabled == 0\",\n    file=0x2b128a897f3e \"ssl3con.c\", ln=711) at ../../../../pr/src/io/prlog.c:577\n#3  0x00002b128a861334 in ssl3_config_match_init (ss=0x97e4510) at ssl3con.c:711\n#4  0x00002b128a875412 in ssl2_ConstructCipherSpecs (ss=0x97e4510) at sslcon.c:206\n#5  0x00002b128a87d574 in ssl2_BeginServerHandshake (ss=0x97e4510) at sslcon.c:3800\n#6  0x00002b128a883203 in ssl_Do1stHandshake (ss=0x97e4510) at sslsecur.c:151\n#7  0x00002b128a8851cb in ssl_SecureRecv (ss=0x97e4510, buf=0x7fff4be7f500 \"\", len=1024, flags=0) at sslsecur.c:1150\n#8  0x00002b128a885297 in ssl_SecureRead (ss=0x97e4510, buf=0x7fff4be7f500 \"\", len=1024) at sslsecur.c:1169\n#9  0x00002b128a88d4c2 in ssl_Read (fd=0x97de2a0, buf=0x7fff4be7f500, len=1024) at sslsock.c:1639\n#10 0x00002b128a28b8e2 in PR_Read (fd=0x97de2a0, buf=0x7fff4be7f500, amount=1024) at ../../../../pr/src/io/priometh.c:141\n#11 0x0000000000401269 in readDataFromSocket (sslSocket=0x97de2a0) at my.cpp:126\n#12 0x0000000000401317 in read_write (fd=0x97de2a0) at my.cpp:159\n#13 0x0000000000401804 in main (argc=2, argv=0x7fff4be7fad8) at my.cpp:219\n(gdb)", "time": "2011-10-25T07:25:24Z", "attachment_id": null}, {"tags": [], "is_private": false, "count": 21, "id": 5803914, "bug_id": 675876, "creation_time": "2011-10-25T18:39:14Z", "raw_text": "assert.cpp test program for crash as reported above. \ncat Makefile:\nSECURITY_DIR=/bucket2/home/meena/security/old/64/\nall:\n\tg++ -g -I$(SECURITY_DIR)/include -L$(SECURITY_DIR)/lib -lnspr4 -lnss3 -lssl3 my.cpp", "text": "Created attachment 569439\nassert.cpp test program for crash as reported above\n\nassert.cpp test program for crash as reported above. \ncat Makefile:\nSECURITY_DIR=/bucket2/home/meena/security/old/64/\nall:\n\tg++ -g -I$(SECURITY_DIR)/include -L$(SECURITY_DIR)/lib -lnspr4 -lnss3 -lssl3 my.cpp", "time": "2011-10-25T18:39:14Z", "attachment_id": 569439, "creator": "u238590@disabled.tld", "author": "u238590@disabled.tld"}, {"id": 5803917, "count": 22, "is_private": false, "tags": [], "bug_id": 675876, "raw_text": "", "creation_time": "2011-10-25T18:40:11Z", "attachment_id": 569440, "time": "2011-10-25T18:40:11Z", "text": "Created attachment 569440\nNSS DBs for testing above crash", "author": "u238590@disabled.tld", "creator": "u238590@disabled.tld"}, {"author": "u238590@disabled.tld", "creator": "u238590@disabled.tld", "attachment_id": null, "time": "2011-10-25T18:54:20Z", "text": "When I replace      \n\nSSL_CipherPrefSetDefault(TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA, PR_TRUE); \n\nby\n\nSSL_CipherPrefSet(sock, TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA, PR_TRUE);\n\nit fixes this crash.\n\nSo we are not having any crashes now.", "raw_text": "When I replace      \n\nSSL_CipherPrefSetDefault(TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA, PR_TRUE); \n\nby\n\nSSL_CipherPrefSet(sock, TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA, PR_TRUE);\n\nit fixes this crash.\n\nSo we are not having any crashes now.", "creation_time": "2011-10-25T18:54:20Z", "bug_id": 675876, "id": 5803961, "tags": [], "is_private": false, "count": 23}, {"count": 24, "is_private": false, "tags": [], "id": 5805186, "bug_id": 675876, "raw_text": "Meena,\n\nThat's because your test program is calling SSL_CipherPrefSetDefault after it calls SSL_ImportFD. The default setting only applies to new sockets. If you move your SSL_CipherPrefSetDefault up, before SSL_ImportFD, then it works as expected - there is no assertion. I don't know if NSS should really asset for this case, as it's actually an application bug if no ciphers have been configured on the socket at all.\n\nIMO, the ssl3con.c assertion should be changed. It should not assert that numEnabled is greater than 0 . Even without SNI involved, this is incorrect - it's still an application configuration error, not an NSS bug, so NSS should just return SSL_ERROR_NO_CIPHERS_SUPPORTED .", "creation_time": "2011-10-26T02:31:25Z", "text": "Meena,\n\nThat's because your test program is calling SSL_CipherPrefSetDefault after it calls SSL_ImportFD. The default setting only applies to new sockets. If you move your SSL_CipherPrefSetDefault up, before SSL_ImportFD, then it works as expected - there is no assertion. I don't know if NSS should really asset for this case, as it's actually an application bug if no ciphers have been configured on the socket at all.\n\nIMO, the ssl3con.c assertion should be changed. It should not assert that numEnabled is greater than 0 . Even without SNI involved, this is incorrect - it's still an application configuration error, not an NSS bug, so NSS should just return SSL_ERROR_NO_CIPHERS_SUPPORTED .", "attachment_id": null, "time": "2011-10-26T02:31:25Z", "creator": "julien.pierre@oracle.com", "author": "julien.pierre@oracle.com"}, {"bug_id": 675876, "is_private": false, "count": 25, "tags": [], "id": 5816024, "text": "Julien, You're right that it's an application configuration error when no cipher\nsuites are enabled, and that we don't generally assert for application errors.\nThis is an exception to that general rule. There's a reason for this exception.\n\nBefore that assertion was put in, the most common complaint that the NSS team \nwould receive in bug reports from the field was that \"the server doesn't work\".\nThey'd misconfigure it, and instead of the server failing in configuration, \nit would simply fail to complete any handshakes.  This was due, in part, to the \nserver apps not doing sufficient sanity checking on their own configurations,\nand even ignoring error codes returned by some calls.  something that the NSS \nteam was unable to get applications to correct.\n\nThe \"server doesn't work\" reports were frequent, time consuming.  Now, the \nassertion failure is trivial to spot and understand, and will not be ignored.", "time": "2011-10-31T19:54:37Z", "attachment_id": null, "raw_text": "Julien, You're right that it's an application configuration error when no cipher\nsuites are enabled, and that we don't generally assert for application errors.\nThis is an exception to that general rule. There's a reason for this exception.\n\nBefore that assertion was put in, the most common complaint that the NSS team \nwould receive in bug reports from the field was that \"the server doesn't work\".\nThey'd misconfigure it, and instead of the server failing in configuration, \nit would simply fail to complete any handshakes.  This was due, in part, to the \nserver apps not doing sufficient sanity checking on their own configurations,\nand even ignoring error codes returned by some calls.  something that the NSS \nteam was unable to get applications to correct.\n\nThe \"server doesn't work\" reports were frequent, time consuming.  Now, the \nassertion failure is trivial to spot and understand, and will not be ignored.", "creation_time": "2011-10-31T19:54:37Z", "creator": "nelson@bolyard.me", "author": "nelson@bolyard.me"}, {"bug_id": 675876, "tags": [], "count": 26, "is_private": false, "id": 9045881, "text": "Comment on attachment 567391\nPatch v1 - set up socket for the negotiated name before checking cache\n\nReview of attachment 567391:\n-----------------------------------------------------------------\n\nDropping this old review request. I'm not as familiar with the server-side stuff as others are.", "time": "2014-07-12T00:26:23Z", "attachment_id": 567391, "creation_time": "2014-07-12T00:26:23Z", "raw_text": "Review of attachment 567391:\n-----------------------------------------------------------------\n\nDropping this old review request. I'm not as familiar with the server-side stuff as others are.", "creator": "brian@briansmith.org", "author": "brian@briansmith.org"}]}}, "comments": {}}