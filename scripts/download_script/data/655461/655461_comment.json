{"comments": {}, "bugs": {"655461": {"comments": [{"is_private": false, "time": "2011-05-07T09:27:07Z", "attachment_id": null, "creation_time": "2011-05-07T09:27:07Z", "text": "See https://bugzilla.mozilla.org/show_bug.cgi?id=652752#c9", "id": 5455119, "raw_text": "See https://bugzilla.mozilla.org/show_bug.cgi?id=652752#c9", "creator": "bugs@pettay.fi", "count": 0, "tags": [], "bug_id": 655461, "author": "bugs@pettay.fi"}, {"is_private": false, "time": "2011-05-08T00:54:59Z", "attachment_id": 530887, "text": "Created attachment 530887\nPatch v1.0\n\nThere are a couple of problems about click event and dblclick event dispatching code in ESM.\n\nThe main issue is, these events have multiple event target if a deepest target in subtree but we don't handle it correctly. E.g., assume following tree:\n\n+ E0 + E1\n     + E2 - A0 + A1\n               + A2 - B0 + B1\n                         + B2\n\nE11 has a subtree which has A0, A1 and A2. A2 has a nested subtree which has B0, B1 and B2.\n\nIf B1 is clicked, the deepest click event target is B0 (XBL) or B1 (<svg:use> or native anonymous tree). Furthermore, a click event is fired on A2 for subtree A (except when subtree A is XBL. A0 is the target at that time.) and also E2 for main tree. By this mechanism, each tree event handler can handle the events.\n# Note that ESM doesn't need to think about the difference between XBL subtree and others. The redirect is done by another point.\n\nThe first issue is, when mousedown element is A1 and mouseup element A2, both A1 and A2 (of course A0 too) shouldn't be fired click event *but* E2 should be fired it because the subtree A looks like an element from the parent tree. Similarly, if mousedown element is B1 and mouseup element is B2, both A2 and E2 should be fired click events. And also mousedown element is A1 and mouseup element is B1, only E2 should be fired a click event.\n\ndblclick event is similar to this. You should replace \"mousedown\" with \"first click\", \"mouseup\" with \"second click\" and \"click\"  with \"dblclick\" in the previous paragraph. Then, the paragraph will explain the behavior of dblclick event.\n\nFor dispatching to correct target, we need to cache last mousedown content for click event and last click content for dblclick event. They are named mMouseDownContent and mClickedContent in this patch. And we need to compute the each level event target. This is done by GetAncestorMouseEventTargets() in the patch.\n\nLet me explain the actual handling process:\n\nFirst of all, OnMouseDown() computes clickCount. I'm going to explain about this later. If the computed clickCount is 0, the mousedown event doesn't cause click event. At this time, it clears mMouseDownContent and mClickedContent because they will be never used. If the computed clickCount is 1, it clears mClickedContent because it will be never used. And the mMouseDownContent stores the mousedown event's explicitOriginalTarget. Otherwise, so, when clickCount is 2 or larger, OnMouseDown() checks whether the next click event can be a continuous action of previous click. If there is no click event target between previous click event target and current mousedown event target, it resets clickCount with 1 and clears mClickedContent. So, the next click event becomes first click event on the content.\n\nSecond, OnMouseUp() checks whether the mousedown event and current mouseup event can dispatch a click event. A nearest common ancestor event target is the deepest click event target. If there is no common event target, it clears mClickCount to 0 for preventing click event. Otherwise, it sets the target to mNextClickEventTarget. On the other hand, mMouseDownContent is cleared this time because it will be never used. Furthermore, if the mClickCount is larger than 1, it checks whether the next click event target and the previous clicked content have common event target. If there is a common target and mClickCount is 2, the click event causes dblclick event too. Therefore, it sets the common target to mNextDblClickEventTarget. Otherwise, it resets 1 to the mClickCount because the next click event is first click event on the content.\n\nFinally, CheckForAndDispatchClick() is called by PostHandleEvent() of mouseup event. If clickCount is 1 or larger, it dispatches a click event to an element for mNextClickEventTarget (mNextClickEventTarget may be a textnode). If it succeeded, it set mNextClickEventTarget to mClickedContent. If clickCount is 2, it also dispatches a dblclick event to an element for mNextDblClickEventTarget. If this succeeded, it set mNextDblClickEventTarget to mClickedContent. And it clears mNextClickEventTarget and mNextDblClickEventTarget.\n\nBy this new logic, we can dispatch to different elements for click event and dblclick event (e.g., mousedown element is A1 and mouseup element is B2 case).\n\nAnd this patch also cleans up the clickCount handling. At OnMouseDown(), aEvent->clickCount was set by the platform. So, it's not unconsidered about content level. In other words, even if aEvent->clickCount is 2, the previous click event may be dispatched on another content. Therefore, OnMouseDown() computes actual clickCount first. It has the clickCount of previous mouse event in mLatestNativeClickCount. If coming event's clickCount is larger than the previous and mClickEvent isn't NULL (i.e., click event is fired by the previous mouse button events and the target hasn't been gone), increases mClickCount. Otherwise, it sets 1 to mClickCount. And it sets mClickCount to aEvent->clickCount.\n\nBy this change, all tests need to dispatch click event twice for testing double click event. For example:\n\nsynthesizeMouse(e, 5, 5, {clickCount: 1});\nsynthesizeMouse(e, 5, 5, {clickCount: 2});\n\nI think that this is better test because the first click handling code might break the double click event's behavior.\n\nFinally, let be explain about the stored contents.\n\nContentRemoved() handles the mutation events. It checks whether the removed content is ancestor (or same) content of mMouseDownContent, mClickedContent, mNextClickEventTarget and mNextDblClickEventTarget. If there is a common click event target between the each member and parent of the removing content, sets it to the member. Otherwise, just clears it.", "creation_time": "2011-05-08T00:54:59Z", "raw_text": "There are a couple of problems about click event and dblclick event dispatching code in ESM.\n\nThe main issue is, these events have multiple event target if a deepest target in subtree but we don't handle it correctly. E.g., assume following tree:\n\n+ E0 + E1\n     + E2 - A0 + A1\n               + A2 - B0 + B1\n                         + B2\n\nE11 has a subtree which has A0, A1 and A2. A2 has a nested subtree which has B0, B1 and B2.\n\nIf B1 is clicked, the deepest click event target is B0 (XBL) or B1 (<svg:use> or native anonymous tree). Furthermore, a click event is fired on A2 for subtree A (except when subtree A is XBL. A0 is the target at that time.) and also E2 for main tree. By this mechanism, each tree event handler can handle the events.\n# Note that ESM doesn't need to think about the difference between XBL subtree and others. The redirect is done by another point.\n\nThe first issue is, when mousedown element is A1 and mouseup element A2, both A1 and A2 (of course A0 too) shouldn't be fired click event *but* E2 should be fired it because the subtree A looks like an element from the parent tree. Similarly, if mousedown element is B1 and mouseup element is B2, both A2 and E2 should be fired click events. And also mousedown element is A1 and mouseup element is B1, only E2 should be fired a click event.\n\ndblclick event is similar to this. You should replace \"mousedown\" with \"first click\", \"mouseup\" with \"second click\" and \"click\"  with \"dblclick\" in the previous paragraph. Then, the paragraph will explain the behavior of dblclick event.\n\nFor dispatching to correct target, we need to cache last mousedown content for click event and last click content for dblclick event. They are named mMouseDownContent and mClickedContent in this patch. And we need to compute the each level event target. This is done by GetAncestorMouseEventTargets() in the patch.\n\nLet me explain the actual handling process:\n\nFirst of all, OnMouseDown() computes clickCount. I'm going to explain about this later. If the computed clickCount is 0, the mousedown event doesn't cause click event. At this time, it clears mMouseDownContent and mClickedContent because they will be never used. If the computed clickCount is 1, it clears mClickedContent because it will be never used. And the mMouseDownContent stores the mousedown event's explicitOriginalTarget. Otherwise, so, when clickCount is 2 or larger, OnMouseDown() checks whether the next click event can be a continuous action of previous click. If there is no click event target between previous click event target and current mousedown event target, it resets clickCount with 1 and clears mClickedContent. So, the next click event becomes first click event on the content.\n\nSecond, OnMouseUp() checks whether the mousedown event and current mouseup event can dispatch a click event. A nearest common ancestor event target is the deepest click event target. If there is no common event target, it clears mClickCount to 0 for preventing click event. Otherwise, it sets the target to mNextClickEventTarget. On the other hand, mMouseDownContent is cleared this time because it will be never used. Furthermore, if the mClickCount is larger than 1, it checks whether the next click event target and the previous clicked content have common event target. If there is a common target and mClickCount is 2, the click event causes dblclick event too. Therefore, it sets the common target to mNextDblClickEventTarget. Otherwise, it resets 1 to the mClickCount because the next click event is first click event on the content.\n\nFinally, CheckForAndDispatchClick() is called by PostHandleEvent() of mouseup event. If clickCount is 1 or larger, it dispatches a click event to an element for mNextClickEventTarget (mNextClickEventTarget may be a textnode). If it succeeded, it set mNextClickEventTarget to mClickedContent. If clickCount is 2, it also dispatches a dblclick event to an element for mNextDblClickEventTarget. If this succeeded, it set mNextDblClickEventTarget to mClickedContent. And it clears mNextClickEventTarget and mNextDblClickEventTarget.\n\nBy this new logic, we can dispatch to different elements for click event and dblclick event (e.g., mousedown element is A1 and mouseup element is B2 case).\n\nAnd this patch also cleans up the clickCount handling. At OnMouseDown(), aEvent->clickCount was set by the platform. So, it's not unconsidered about content level. In other words, even if aEvent->clickCount is 2, the previous click event may be dispatched on another content. Therefore, OnMouseDown() computes actual clickCount first. It has the clickCount of previous mouse event in mLatestNativeClickCount. If coming event's clickCount is larger than the previous and mClickEvent isn't NULL (i.e., click event is fired by the previous mouse button events and the target hasn't been gone), increases mClickCount. Otherwise, it sets 1 to mClickCount. And it sets mClickCount to aEvent->clickCount.\n\nBy this change, all tests need to dispatch click event twice for testing double click event. For example:\n\nsynthesizeMouse(e, 5, 5, {clickCount: 1});\nsynthesizeMouse(e, 5, 5, {clickCount: 2});\n\nI think that this is better test because the first click handling code might break the double click event's behavior.\n\nFinally, let be explain about the stored contents.\n\nContentRemoved() handles the mutation events. It checks whether the removed content is ancestor (or same) content of mMouseDownContent, mClickedContent, mNextClickEventTarget and mNextDblClickEventTarget. If there is a common click event target between the each member and parent of the removing content, sets it to the member. Otherwise, just clears it.", "id": 5455633, "bug_id": 655461, "creator": "masayuki@d-toybox.com", "tags": [], "count": 1, "author": "masayuki@d-toybox.com"}, {"raw_text": "> E11 has a subtree which has A0, A1 and A2. A2 has a nested subtree which has B0, B1 and B2.\n\nE11 -> E2.", "id": 5455643, "text": "> E11 has a subtree which has A0, A1 and A2. A2 has a nested subtree which has B0, B1 and B2.\n\nE11 -> E2.", "is_private": false, "creation_time": "2011-05-08T01:00:40Z", "bug_id": 655461, "time": "2011-05-08T01:00:40Z", "tags": [], "creator": "masayuki@d-toybox.com", "count": 2, "author": "masayuki@d-toybox.com", "attachment_id": null}, {"author": "masayuki@d-toybox.com", "attachment_id": 530889, "text": "Created attachment 530889\nPatch v1.0.1\n\nrenamed new test files for consistency with other test files.", "creation_time": "2011-05-08T01:54:37Z", "is_private": false, "raw_text": "renamed new test files for consistency with other test files.", "id": 5455675, "bug_id": 655461, "creator": "masayuki@d-toybox.com", "tags": [], "count": 3, "time": "2011-05-08T01:54:37Z"}, {"author": "bugs@pettay.fi", "text": "Comment on attachment 530889\nPatch v1.0.1\n\n\n>+  // Be aware, mNextDblClickEventTarget might be removed by this click event.\n>+  // For detecting it, we restore mNextDblClickEventTarget.\n>+  dblClickTarget.swap(mNextDblClickEventTarget);\n>+  rv = presShell->HandleEventWithTarget(&event2, dblClickFrame,\n>+                                        dblClickElement, aStatus);\n>+  dblClickTarget.swap(mNextDblClickEventTarget);\n>+\n>+  if (NS_FAILED(rv) || !dblClickTarget) {\n>+    NS_ASSERTION(NS_SUCCEEDED(rv), \"PresShell::HandleEventWithTarget() failed\");\n>+    mClickCount = 0;\n>+    mClickedContent = nsnull;\n>+    return rv;\n>+  }\n>+\n>+  mClickedContent = dblClickTarget;\nWhy does mClickedContent need to be set here?\n\n\n>+nsEventStateManager::ClickEventManager::ContentRemoved(nsIDocument* aDocument,\n>+                                                       nsIContent*y aContent)\nI need to still review this.\nBut even before that, could you add some comments why and when we're updating\nthe member variables.\n\n\n\n\n>@@ -4452,16 +4710,20 @@ nsEventStateManager::ContentRemoved(nsID\n>     mDragOverContent = nsnull;\n>   }\n> \n>   if (mLastMouseOverElement &&\n>       nsContentUtils::ContentIsDescendantOf(mLastMouseOverElement, aContent)) {\n>     // See bug 292146 for why we want to null this out\n>     mLastMouseOverElement = nsnull;\n>   }\n>+\n>+  mLeftClickEventManager.ContentRemoved(aDocument, aContent);\n>+  mMiddleClickEventManager.ContentRemoved(aDocument, aContent);\n>+  mRightClickEventManager.ContentRemoved(aDocument, aContent);\nWould be interesting to know if this affects to some performance tests.\nAt least need to be careful that ClickEventManager.ContentRemoved() doesn't \ndo any extra work (including as few implicit addref/release calls as possible).\n\n\n> }\n> \n> PRBool\n> nsEventStateManager::EventStatusOK(nsGUIEvent* aEvent)\n> {\n>   return !(aEvent->message == NS_MOUSE_BUTTON_DOWN &&\n>       static_cast<nsMouseEvent*>(aEvent)->button == nsMouseEvent::eLeftButton  && \n>       !sNormalLMouseEventInProcess);\n>diff --git a/content/events/src/nsEventStateManager.h b/content/events/src/nsEventStateManager.h\n>--- a/content/events/src/nsEventStateManager.h\n>+++ b/content/events/src/nsEventStateManager.h\n>@@ -259,17 +259,16 @@ protected:\n>                            nsIContent* aTargetContent,\n>                            nsWeakFrame& aTargetFrame);\n>   /**\n>    * Update the initial drag session data transfer with any changes that occur\n>    * on cloned data transfer objects used for events.\n>    */\n>   void UpdateDragDataTransfer(nsDragEvent* dragEvent);\n> \n>-  nsresult SetClickCount(nsPresContext* aPresContext, nsMouseEvent *aEvent, nsEventStatus* aStatus);\n>   nsresult CheckForAndDispatchClick(nsPresContext* aPresContext, nsMouseEvent *aEvent, nsEventStatus* aStatus);\n>   void EnsureDocument(nsPresContext* aPresContext);\n>   void FlushPendingEvents(nsPresContext* aPresContext);\n> \n>   /**\n>    * The phases of HandleAccessKey processing. See below.\n>    */\n>   typedef enum {\n>@@ -430,22 +429,70 @@ protected:\n>   // an <area> of an image map this is the image. (bug 289667)\n>   nsCOMPtr<nsIContent> mGestureDownFrameOwner;\n>   // State of keys when the original gesture-down happened\n>   PRPackedBool mGestureDownShift;\n>   PRPackedBool mGestureDownControl;\n>   PRPackedBool mGestureDownAlt;\n>   PRPackedBool mGestureDownMeta;\n> \n>-  nsCOMPtr<nsIContent> mLastLeftMouseDownContent;\n>-  nsCOMPtr<nsIContent> mLastLeftMouseDownContentParent;\n>-  nsCOMPtr<nsIContent> mLastMiddleMouseDownContent;\n>-  nsCOMPtr<nsIContent> mLastMiddleMouseDownContentParent;\n>-  nsCOMPtr<nsIContent> mLastRightMouseDownContent;\n>-  nsCOMPtr<nsIContent> mLastRightMouseDownContentParent;\n>+  struct ClickEventManager\n>+  {\n>+    // mClickCount is clickCount of mouse events.  This is computed by\n>+    // OnMouseDown() from native event's clickCount.\n>+    PRUint32 mClickCount;\n>+    // mLatestNativeClickCount is the last clickCount of native mouse event.\n>+    // This is set by OnMouseClick().\n>+    PRUint32 mLatestNativeClickCount;\n>+    // mMouseDownContent is last mousedown event's explicitOriginalTarget.\nIt is not, if I read code correctly. The thing called \"explicitOriginalTarget\"\nis never in anonymous content.  (I know the terminology is strange)\n\nI need to still review tests.\n\nIn general I like this, but I wonder if this will cause some regressions because\nanonymous content expects different event handling.\nHave you tested for example <audio>/<video>? Or does this affect how and when\nclick is dispatched when <select size=\"1\"><option>1<option>2<option>3<option4<option5<option>6</select>\nis scrolled by clicking the scrollbar?", "creation_time": "2011-05-12T22:42:14Z", "raw_text": "\n>+  // Be aware, mNextDblClickEventTarget might be removed by this click event.\n>+  // For detecting it, we restore mNextDblClickEventTarget.\n>+  dblClickTarget.swap(mNextDblClickEventTarget);\n>+  rv = presShell->HandleEventWithTarget(&event2, dblClickFrame,\n>+                                        dblClickElement, aStatus);\n>+  dblClickTarget.swap(mNextDblClickEventTarget);\n>+\n>+  if (NS_FAILED(rv) || !dblClickTarget) {\n>+    NS_ASSERTION(NS_SUCCEEDED(rv), \"PresShell::HandleEventWithTarget() failed\");\n>+    mClickCount = 0;\n>+    mClickedContent = nsnull;\n>+    return rv;\n>+  }\n>+\n>+  mClickedContent = dblClickTarget;\nWhy does mClickedContent need to be set here?\n\n\n>+nsEventStateManager::ClickEventManager::ContentRemoved(nsIDocument* aDocument,\n>+                                                       nsIContent*y aContent)\nI need to still review this.\nBut even before that, could you add some comments why and when we're updating\nthe member variables.\n\n\n\n\n>@@ -4452,16 +4710,20 @@ nsEventStateManager::ContentRemoved(nsID\n>     mDragOverContent = nsnull;\n>   }\n> \n>   if (mLastMouseOverElement &&\n>       nsContentUtils::ContentIsDescendantOf(mLastMouseOverElement, aContent)) {\n>     // See bug 292146 for why we want to null this out\n>     mLastMouseOverElement = nsnull;\n>   }\n>+\n>+  mLeftClickEventManager.ContentRemoved(aDocument, aContent);\n>+  mMiddleClickEventManager.ContentRemoved(aDocument, aContent);\n>+  mRightClickEventManager.ContentRemoved(aDocument, aContent);\nWould be interesting to know if this affects to some performance tests.\nAt least need to be careful that ClickEventManager.ContentRemoved() doesn't \ndo any extra work (including as few implicit addref/release calls as possible).\n\n\n> }\n> \n> PRBool\n> nsEventStateManager::EventStatusOK(nsGUIEvent* aEvent)\n> {\n>   return !(aEvent->message == NS_MOUSE_BUTTON_DOWN &&\n>       static_cast<nsMouseEvent*>(aEvent)->button == nsMouseEvent::eLeftButton  && \n>       !sNormalLMouseEventInProcess);\n>diff --git a/content/events/src/nsEventStateManager.h b/content/events/src/nsEventStateManager.h\n>--- a/content/events/src/nsEventStateManager.h\n>+++ b/content/events/src/nsEventStateManager.h\n>@@ -259,17 +259,16 @@ protected:\n>                            nsIContent* aTargetContent,\n>                            nsWeakFrame& aTargetFrame);\n>   /**\n>    * Update the initial drag session data transfer with any changes that occur\n>    * on cloned data transfer objects used for events.\n>    */\n>   void UpdateDragDataTransfer(nsDragEvent* dragEvent);\n> \n>-  nsresult SetClickCount(nsPresContext* aPresContext, nsMouseEvent *aEvent, nsEventStatus* aStatus);\n>   nsresult CheckForAndDispatchClick(nsPresContext* aPresContext, nsMouseEvent *aEvent, nsEventStatus* aStatus);\n>   void EnsureDocument(nsPresContext* aPresContext);\n>   void FlushPendingEvents(nsPresContext* aPresContext);\n> \n>   /**\n>    * The phases of HandleAccessKey processing. See below.\n>    */\n>   typedef enum {\n>@@ -430,22 +429,70 @@ protected:\n>   // an <area> of an image map this is the image. (bug 289667)\n>   nsCOMPtr<nsIContent> mGestureDownFrameOwner;\n>   // State of keys when the original gesture-down happened\n>   PRPackedBool mGestureDownShift;\n>   PRPackedBool mGestureDownControl;\n>   PRPackedBool mGestureDownAlt;\n>   PRPackedBool mGestureDownMeta;\n> \n>-  nsCOMPtr<nsIContent> mLastLeftMouseDownContent;\n>-  nsCOMPtr<nsIContent> mLastLeftMouseDownContentParent;\n>-  nsCOMPtr<nsIContent> mLastMiddleMouseDownContent;\n>-  nsCOMPtr<nsIContent> mLastMiddleMouseDownContentParent;\n>-  nsCOMPtr<nsIContent> mLastRightMouseDownContent;\n>-  nsCOMPtr<nsIContent> mLastRightMouseDownContentParent;\n>+  struct ClickEventManager\n>+  {\n>+    // mClickCount is clickCount of mouse events.  This is computed by\n>+    // OnMouseDown() from native event's clickCount.\n>+    PRUint32 mClickCount;\n>+    // mLatestNativeClickCount is the last clickCount of native mouse event.\n>+    // This is set by OnMouseClick().\n>+    PRUint32 mLatestNativeClickCount;\n>+    // mMouseDownContent is last mousedown event's explicitOriginalTarget.\nIt is not, if I read code correctly. The thing called \"explicitOriginalTarget\"\nis never in anonymous content.  (I know the terminology is strange)\n\nI need to still review tests.\n\nIn general I like this, but I wonder if this will cause some regressions because\nanonymous content expects different event handling.\nHave you tested for example <audio>/<video>? Or does this affect how and when\nclick is dispatched when <select size=\"1\"><option>1<option>2<option>3<option4<option5<option>6</select>\nis scrolled by clicking the scrollbar?", "id": 5466861, "bug_id": 655461, "tags": [], "creator": "bugs@pettay.fi", "count": 4, "attachment_id": 530889, "is_private": false, "time": "2011-05-12T22:42:14Z"}, {"author": "bugs@pettay.fi", "attachment_id": null, "bug_id": 655461, "tags": [], "creator": "bugs@pettay.fi", "time": "2011-05-12T22:45:56Z", "count": 5, "text": "For example, if you click on \nhttp://mozilla.pettay.fi/moztests/innerhtml_nonsimple_nostyle_test.html page,\ndoes the test perhaps slow down, or does ContentRemoved show up in the\nprofiles? (If you don't have a Mac, I could profile using Shark)", "is_private": false, "creation_time": "2011-05-12T22:45:56Z", "raw_text": "For example, if you click on \nhttp://mozilla.pettay.fi/moztests/innerhtml_nonsimple_nostyle_test.html page,\ndoes the test perhaps slow down, or does ContentRemoved show up in the\nprofiles? (If you don't have a Mac, I could profile using Shark)", "id": 5466873}, {"author": "masayuki@d-toybox.com", "id": 5467563, "raw_text": "(In reply to comment #4)\n> >+  // Be aware, mNextDblClickEventTarget might be removed by this click event.\n> >+  // For detecting it, we restore mNextDblClickEventTarget.\n> >+  dblClickTarget.swap(mNextDblClickEventTarget);\n> >+  rv = presShell->HandleEventWithTarget(&event2, dblClickFrame,\n> >+                                        dblClickElement, aStatus);\n> >+  dblClickTarget.swap(mNextDblClickEventTarget);\n> >+\n> >+  if (NS_FAILED(rv) || !dblClickTarget) {\n> >+    NS_ASSERTION(NS_SUCCEEDED(rv), \"PresShell::HandleEventWithTarget() failed\");\n> >+    mClickCount = 0;\n> >+    mClickedContent = nsnull;\n> >+    return rv;\n> >+  }\n> >+\n> >+  mClickedContent = dblClickTarget;\n> Why does mClickedContent need to be set here?\n\nOh, right.\n\n> >@@ -4452,16 +4710,20 @@ nsEventStateManager::ContentRemoved(nsID\n> >     mDragOverContent = nsnull;\n> >   }\n> > \n> >   if (mLastMouseOverElement &&\n> >       nsContentUtils::ContentIsDescendantOf(mLastMouseOverElement, aContent)) {\n> >     // See bug 292146 for why we want to null this out\n> >     mLastMouseOverElement = nsnull;\n> >   }\n> >+\n> >+  mLeftClickEventManager.ContentRemoved(aDocument, aContent);\n> >+  mMiddleClickEventManager.ContentRemoved(aDocument, aContent);\n> >+  mRightClickEventManager.ContentRemoved(aDocument, aContent);\n> Would be interesting to know if this affects to some performance tests.\n> At least need to be careful that ClickEventManager.ContentRemoved() doesn't \n> do any extra work (including as few implicit addref/release calls as\n> possible).\n\nExcuse me, what should I do?\n\n> >+  struct ClickEventManager\n> >+  {\n> >+    // mClickCount is clickCount of mouse events.  This is computed by\n> >+    // OnMouseDown() from native event's clickCount.\n> >+    PRUint32 mClickCount;\n> >+    // mLatestNativeClickCount is the last clickCount of native mouse event.\n> >+    // This is set by OnMouseClick().\n> >+    PRUint32 mLatestNativeClickCount;\n> >+    // mMouseDownContent is last mousedown event's explicitOriginalTarget.\n> It is not, if I read code correctly. The thing called\n> \"explicitOriginalTarget\"\n> is never in anonymous content.  (I know the terminology is strange)\n\nWhen I clicked on text node, explicitOriginalTarget is the text node.\nWhen I clicked on <input type=\"text\">, explicitOriginalTarget is always the input element rather than anonymous <div> or text node.\n\nOkay, I'll modify it.\n\n> Have you tested for example <audio>/<video>?\n\nI don't find any regressions on <video> with controls.\n\n> Or does this affect how and when\n> click is dispatched when <select\n> size=\"1\"><option>1<option>2<option>3<option4<option5<option>6</select>\n> is scrolled by clicking the scrollbar?\n\nI don't find any problems too.\n\n(In reply to comment #5)\n> For example, if you click on \n> http://mozilla.pettay.fi/moztests/innerhtml_nonsimple_nostyle_test.html page,\n> does the test perhaps slow down, or does ContentRemoved show up in the\n> profiles? (If you don't have a Mac, I could profile using Shark)\n\nHow to register the debug symbols to Shark? I tested on debug build and recorded the Time Profile of firefox-bin, but all Libraries are Unknown Library and only addresses of the methods are listed.", "creation_time": "2011-05-13T07:08:51Z", "text": "(In reply to comment #4)\n> >+  // Be aware, mNextDblClickEventTarget might be removed by this click event.\n> >+  // For detecting it, we restore mNextDblClickEventTarget.\n> >+  dblClickTarget.swap(mNextDblClickEventTarget);\n> >+  rv = presShell->HandleEventWithTarget(&event2, dblClickFrame,\n> >+                                        dblClickElement, aStatus);\n> >+  dblClickTarget.swap(mNextDblClickEventTarget);\n> >+\n> >+  if (NS_FAILED(rv) || !dblClickTarget) {\n> >+    NS_ASSERTION(NS_SUCCEEDED(rv), \"PresShell::HandleEventWithTarget() failed\");\n> >+    mClickCount = 0;\n> >+    mClickedContent = nsnull;\n> >+    return rv;\n> >+  }\n> >+\n> >+  mClickedContent = dblClickTarget;\n> Why does mClickedContent need to be set here?\n\nOh, right.\n\n> >@@ -4452,16 +4710,20 @@ nsEventStateManager::ContentRemoved(nsID\n> >     mDragOverContent = nsnull;\n> >   }\n> > \n> >   if (mLastMouseOverElement &&\n> >       nsContentUtils::ContentIsDescendantOf(mLastMouseOverElement, aContent)) {\n> >     // See bug 292146 for why we want to null this out\n> >     mLastMouseOverElement = nsnull;\n> >   }\n> >+\n> >+  mLeftClickEventManager.ContentRemoved(aDocument, aContent);\n> >+  mMiddleClickEventManager.ContentRemoved(aDocument, aContent);\n> >+  mRightClickEventManager.ContentRemoved(aDocument, aContent);\n> Would be interesting to know if this affects to some performance tests.\n> At least need to be careful that ClickEventManager.ContentRemoved() doesn't \n> do any extra work (including as few implicit addref/release calls as\n> possible).\n\nExcuse me, what should I do?\n\n> >+  struct ClickEventManager\n> >+  {\n> >+    // mClickCount is clickCount of mouse events.  This is computed by\n> >+    // OnMouseDown() from native event's clickCount.\n> >+    PRUint32 mClickCount;\n> >+    // mLatestNativeClickCount is the last clickCount of native mouse event.\n> >+    // This is set by OnMouseClick().\n> >+    PRUint32 mLatestNativeClickCount;\n> >+    // mMouseDownContent is last mousedown event's explicitOriginalTarget.\n> It is not, if I read code correctly. The thing called\n> \"explicitOriginalTarget\"\n> is never in anonymous content.  (I know the terminology is strange)\n\nWhen I clicked on text node, explicitOriginalTarget is the text node.\nWhen I clicked on <input type=\"text\">, explicitOriginalTarget is always the input element rather than anonymous <div> or text node.\n\nOkay, I'll modify it.\n\n> Have you tested for example <audio>/<video>?\n\nI don't find any regressions on <video> with controls.\n\n> Or does this affect how and when\n> click is dispatched when <select\n> size=\"1\"><option>1<option>2<option>3<option4<option5<option>6</select>\n> is scrolled by clicking the scrollbar?\n\nI don't find any problems too.\n\n(In reply to comment #5)\n> For example, if you click on \n> http://mozilla.pettay.fi/moztests/innerhtml_nonsimple_nostyle_test.html page,\n> does the test perhaps slow down, or does ContentRemoved show up in the\n> profiles? (If you don't have a Mac, I could profile using Shark)\n\nHow to register the debug symbols to Shark? I tested on debug build and recorded the Time Profile of firefox-bin, but all Libraries are Unknown Library and only addresses of the methods are listed.", "creator": "masayuki@d-toybox.com", "tags": [], "count": 6, "bug_id": 655461, "attachment_id": null, "is_private": false, "time": "2011-05-13T07:08:51Z"}, {"author": "masayuki@d-toybox.com", "creator": "masayuki@d-toybox.com", "count": 7, "tags": [], "bug_id": 655461, "id": 5467584, "raw_text": "(In reply to comment #6)\n> (In reply to comment #5)\n> > For example, if you click on \n> > http://mozilla.pettay.fi/moztests/innerhtml_nonsimple_nostyle_test.html page,\n> > does the test perhaps slow down, or does ContentRemoved show up in the\n> > profiles? (If you don't have a Mac, I could profile using Shark)\n> \n> How to register the debug symbols to Shark? I tested on debug build and\n> recorded the Time Profile of firefox-bin, but all Libraries are Unknown\n> Library and only addresses of the methods are listed.\n\nFYI: Even if I clicked very very many times during the test, I don't see the performance regression.", "creation_time": "2011-05-13T07:34:45Z", "text": "(In reply to comment #6)\n> (In reply to comment #5)\n> > For example, if you click on \n> > http://mozilla.pettay.fi/moztests/innerhtml_nonsimple_nostyle_test.html page,\n> > does the test perhaps slow down, or does ContentRemoved show up in the\n> > profiles? (If you don't have a Mac, I could profile using Shark)\n> \n> How to register the debug symbols to Shark? I tested on debug build and\n> recorded the Time Profile of firefox-bin, but all Libraries are Unknown\n> Library and only addresses of the methods are listed.\n\nFYI: Even if I clicked very very many times during the test, I don't see the performance regression.", "attachment_id": null, "time": "2011-05-13T07:34:45Z", "is_private": false}, {"author": "masayuki@d-toybox.com", "text": ">> >@@ -4452,16 +4710,20 @@ nsEventStateManager::ContentRemoved(nsID\n>> >     mDragOverContent = nsnull;\n>> >   }\n>> > \n>> >   if (mLastMouseOverElement &&\n>> >       nsContentUtils::ContentIsDescendantOf(mLastMouseOverElement, aContent)) {\n>> >     // See bug 292146 for why we want to null this out\n>> >     mLastMouseOverElement = nsnull;\n>> >   }\n>> >+\n>> >+  mLeftClickEventManager.ContentRemoved(aDocument, aContent);\n>> >+  mMiddleClickEventManager.ContentRemoved(aDocument, aContent);\n>> >+  mRightClickEventManager.ContentRemoved(aDocument, aContent);\n>> Would be interesting to know if this affects to some performance tests.\n>> At least need to be careful that ClickEventManager.ContentRemoved() doesn't \n>> do any extra work (including as few implicit addref/release calls as\n>> possible).\n> \n> Excuse me, what should I do?\n\nAnd another possible design is, we should create the instance when we need them first time. Furthermore, they could be shared between all ESM instances.", "creation_time": "2011-05-13T07:49:03Z", "raw_text": ">> >@@ -4452,16 +4710,20 @@ nsEventStateManager::ContentRemoved(nsID\n>> >     mDragOverContent = nsnull;\n>> >   }\n>> > \n>> >   if (mLastMouseOverElement &&\n>> >       nsContentUtils::ContentIsDescendantOf(mLastMouseOverElement, aContent)) {\n>> >     // See bug 292146 for why we want to null this out\n>> >     mLastMouseOverElement = nsnull;\n>> >   }\n>> >+\n>> >+  mLeftClickEventManager.ContentRemoved(aDocument, aContent);\n>> >+  mMiddleClickEventManager.ContentRemoved(aDocument, aContent);\n>> >+  mRightClickEventManager.ContentRemoved(aDocument, aContent);\n>> Would be interesting to know if this affects to some performance tests.\n>> At least need to be careful that ClickEventManager.ContentRemoved() doesn't \n>> do any extra work (including as few implicit addref/release calls as\n>> possible).\n> \n> Excuse me, what should I do?\n\nAnd another possible design is, we should create the instance when we need them first time. Furthermore, they could be shared between all ESM instances.", "id": 5467597, "bug_id": 655461, "count": 8, "creator": "masayuki@d-toybox.com", "tags": [], "attachment_id": null, "is_private": false, "time": "2011-05-13T07:49:03Z"}, {"creation_time": "2011-05-13T07:59:12Z", "text": "Created attachment 532136\nPatch v1.1\n\ntest builds:\nhttp://ftp.mozilla.org/pub/mozilla.org/firefox/try-builds/masayuki@d-toybox.com-5b8c67740e7f", "id": 5467607, "raw_text": "test builds:\nhttp://ftp.mozilla.org/pub/mozilla.org/firefox/try-builds/masayuki@d-toybox.com-5b8c67740e7f", "tags": [], "creator": "masayuki@d-toybox.com", "count": 9, "bug_id": 655461, "author": "masayuki@d-toybox.com", "is_private": false, "time": "2011-05-13T07:59:12Z", "attachment_id": 532136}, {"author": "bugs@pettay.fi", "id": 5467760, "raw_text": "(In reply to comment #6)\n> How to register the debug symbols to Shark? I tested on debug build and\n> recorded the Time Profile of firefox-bin, but all Libraries are Unknown\n> Library and only addresses of the methods are listed.\nDon't profile with debug builds (it won't give any real performance numbers).\nJust a normal build should be enough.", "creation_time": "2011-05-13T10:19:36Z", "text": "(In reply to comment #6)\n> How to register the debug symbols to Shark? I tested on debug build and\n> recorded the Time Profile of firefox-bin, but all Libraries are Unknown\n> Library and only addresses of the methods are listed.\nDon't profile with debug builds (it won't give any real performance numbers).\nJust a normal build should be enough.", "count": 10, "creator": "bugs@pettay.fi", "tags": [], "bug_id": 655461, "attachment_id": null, "is_private": false, "time": "2011-05-13T10:19:36Z"}, {"creator": "bugs@pettay.fi", "tags": [], "count": 11, "bug_id": 655461, "id": 5467771, "raw_text": "(In reply to comment #8)\n> And another possible design is, we should create the instance when we need\n> them first time. Furthermore, they could be shared between all ESM instances.\n\nI'm not sure if that helps. (Well, I'm not yet sure there is a performance\nregression).\nBut actually, seems like we should optimize nsEventStateManager::ContentRemoved\nanyway. It does ContentIsDescendantOf way too many times, and that\ncan show up in profiles (depends on testcase though).\nI'll try to write a worst case test for ESM::ContentRemoved.\n\nSo, perhaps we could do the optimization work in a different bug.", "creation_time": "2011-05-13T10:24:16Z", "text": "(In reply to comment #8)\n> And another possible design is, we should create the instance when we need\n> them first time. Furthermore, they could be shared between all ESM instances.\n\nI'm not sure if that helps. (Well, I'm not yet sure there is a performance\nregression).\nBut actually, seems like we should optimize nsEventStateManager::ContentRemoved\nanyway. It does ContentIsDescendantOf way too many times, and that\ncan show up in profiles (depends on testcase though).\nI'll try to write a worst case test for ESM::ContentRemoved.\n\nSo, perhaps we could do the optimization work in a different bug.", "author": "bugs@pettay.fi", "time": "2011-05-13T10:24:16Z", "is_private": false, "attachment_id": null}, {"author": "bugs@pettay.fi", "id": 5473131, "raw_text": "Question: after clicking (just once) do mMouseDownContent, mClickedContent,\nmNextClickEventTarget and/or mNextDblClickEventTarget point to some value\nbasically forever? \n(Just wondering what kind of performance testcase to write.)", "creation_time": "2011-05-16T20:06:34Z", "text": "Question: after clicking (just once) do mMouseDownContent, mClickedContent,\nmNextClickEventTarget and/or mNextDblClickEventTarget point to some value\nbasically forever? \n(Just wondering what kind of performance testcase to write.)", "creator": "bugs@pettay.fi", "count": 12, "tags": [], "bug_id": 655461, "attachment_id": null, "is_private": false, "time": "2011-05-16T20:06:34Z"}, {"time": "2011-05-16T20:26:41Z", "is_private": false, "attachment_id": 532725, "tags": [], "creator": "bugs@pettay.fi", "count": 13, "bug_id": 655461, "id": 5473187, "raw_text": "I don't have a Mac right now with me. I can profile this later this week when I have one.", "creation_time": "2011-05-16T20:26:41Z", "text": "Created attachment 532725\npossible test\n\nI don't have a Mac right now with me. I can profile this later this week when I have one.", "author": "bugs@pettay.fi"}, {"is_private": false, "time": "2011-05-17T00:39:28Z", "attachment_id": null, "id": 5473848, "raw_text": "(In reply to comment #12)\n> Question: after clicking (just once) do mMouseDownContent, mClickedContent,\n> mNextClickEventTarget and/or mNextDblClickEventTarget point to some value\n> basically forever? \n> (Just wondering what kind of performance testcase to write.)\n\nmMouseDownContent is released on mouseup event.\nmNextClickEventTarget and mNextDblClickEventTarget are released at CheckForAndDispatchClick() which is called from ESM::PostHandle() at mouseup.\n\nUnfortunately, mClickedContent may be grabbed forever since final click (or dblclick) event on the ESM. The possible solution may be:\n\n1. Release when ESM loses focus.\n2. Make the new members as static variables, then, they can be released at every mouse button event on all ESMs.", "creation_time": "2011-05-17T00:39:28Z", "text": "(In reply to comment #12)\n> Question: after clicking (just once) do mMouseDownContent, mClickedContent,\n> mNextClickEventTarget and/or mNextDblClickEventTarget point to some value\n> basically forever? \n> (Just wondering what kind of performance testcase to write.)\n\nmMouseDownContent is released on mouseup event.\nmNextClickEventTarget and mNextDblClickEventTarget are released at CheckForAndDispatchClick() which is called from ESM::PostHandle() at mouseup.\n\nUnfortunately, mClickedContent may be grabbed forever since final click (or dblclick) event on the ESM. The possible solution may be:\n\n1. Release when ESM loses focus.\n2. Make the new members as static variables, then, they can be released at every mouse button event on all ESMs.", "tags": [], "creator": "masayuki@d-toybox.com", "count": 14, "bug_id": 655461, "author": "masayuki@d-toybox.com"}, {"attachment_id": null, "time": "2011-10-10T18:45:29Z", "is_private": false, "author": "bugs@pettay.fi", "creator": "bugs@pettay.fi", "tags": [], "count": 15, "bug_id": 655461, "creation_time": "2011-10-10T18:45:29Z", "text": "I think we should do 2.", "id": 5772184, "raw_text": "I think we should do 2."}, {"author": "bugs@pettay.fi", "attachment_id": 532136, "raw_text": "(And sorry for the terrible delay. This hasn't been a top-priority at all.)", "id": 5772188, "text": "Comment on attachment 532136\nPatch v1.1\n\n(And sorry for the terrible delay. This hasn't been a top-priority at all.)", "creation_time": "2011-10-10T18:46:54Z", "is_private": false, "bug_id": 655461, "count": 16, "creator": "bugs@pettay.fi", "time": "2011-10-10T18:46:54Z", "tags": []}, {"attachment_id": null, "time": "2020-08-12T08:58:07Z", "is_private": false, "author": "masayuki@d-toybox.com", "bug_id": 655461, "tags": [], "count": 17, "creator": "masayuki@d-toybox.com", "text": "Resetting assignee which I don't work on in this several months.", "creation_time": "2020-08-12T08:58:07Z", "raw_text": "Resetting assignee which I don't work on in this several months.", "id": 14986001}]}}}