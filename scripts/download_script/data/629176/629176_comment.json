{"comments": {}, "bugs": {"629176": {"comments": [{"tags": [], "author": "jwatt@jwatt.org", "attachment_id": null, "bug_id": 629176, "raw_text": "Forking this off from bug 410820 for discussion regarding whether <svg> elements that are inline in HTML should, by default (that is, when 'pointer-events' isn't specified for the elements, or is specified as 'auto'), intercept pointer events that are inside their border box.\n\nFor consistency with other elements in an HTML/CSS context we have <svg> intercept pointer events by default. In this respect we're treating <svg> just like a <div>, in that, although its background-color has the initial/default value 'transparent', the background area of the <svg> still intercepts pointer events.\n\nThe main problems with our current behavior are that it's counter to what SVG authors seem to expect/want, counter to what many seem to understand from the SVG 1.1 spec, and the workarounds may not be considered to be very convenient.\n\nThere are at least a couple of ways authors can work around our behavior to stop outer-<svg> elements from intercepting pointer events. They can either specify pointer-events=\"none\" on the <svg> tag and then, to stop that value inheriting to all the children, wrap all the children in a new <g> tag and set pointer-events=\"auto\" on it. An alternative is to add the following (thanks bz!) to the HTML document to change the behavior for all <svg> elements:\n\n<style>\nsvg { pointer-events: none; }\nsvg > * { pointer-events: auto; }\n</style>\n\nIf we changed our current default behavior so that the value 'auto' for 'pointer-events' on <svg> would mean that the element would not intercept pointer events by default, the workaround for those authors that did want <svg> elements to intercept events would be shorter. They would simply need to add pointer-events=\"visiblePainted\" to their <svg> tags, or add the following to their HTML document:\n\n<style>\nsvg { pointer-events: visiblePainted; }\n</style>\n\nHowever, the reality is that we will almost certainly not be changing our default behavior for <svg> inline in HTML. First there are the arguments behind the second paragraph above, so it's not at all clear that the proposed change in default behavior is more desirable than what we currently do. However, really this point is moot. The bottom line is this: We have released several versions of Firefox that have significant market share with the current behavior. Webkit (Google Chrome + Safari) also has significant market share and has the same default behavior (but without supporting the workarounds above). Finally, IE 9 is about to be release, will no doubt attain significant market share, and again, has the same default behavior (also without a workaround, unfortunately). There is simply too much momentum behind the current behavior, and the arguments to change it are simply not strong enough to overcome that momentum. Besides the difficulty of getting multiple implementations to agree to change their behavior, the fact is that the overwhelming (and increasing) majority of SVG capable browsers running out there have our current behavior, and as such changing the behavior would carry too much of a risk of breaking content.\n\nFor the record, Opera implements the opposite default behavior to us.", "count": 0, "creator": "jwatt@jwatt.org", "creation_time": "2011-01-26T22:28:54Z", "is_private": false, "id": 5230048, "text": "Forking this off from bug 410820 for discussion regarding whether <svg> elements that are inline in HTML should, by default (that is, when 'pointer-events' isn't specified for the elements, or is specified as 'auto'), intercept pointer events that are inside their border box.\n\nFor consistency with other elements in an HTML/CSS context we have <svg> intercept pointer events by default. In this respect we're treating <svg> just like a <div>, in that, although its background-color has the initial/default value 'transparent', the background area of the <svg> still intercepts pointer events.\n\nThe main problems with our current behavior are that it's counter to what SVG authors seem to expect/want, counter to what many seem to understand from the SVG 1.1 spec, and the workarounds may not be considered to be very convenient.\n\nThere are at least a couple of ways authors can work around our behavior to stop outer-<svg> elements from intercepting pointer events. They can either specify pointer-events=\"none\" on the <svg> tag and then, to stop that value inheriting to all the children, wrap all the children in a new <g> tag and set pointer-events=\"auto\" on it. An alternative is to add the following (thanks bz!) to the HTML document to change the behavior for all <svg> elements:\n\n<style>\nsvg { pointer-events: none; }\nsvg > * { pointer-events: auto; }\n</style>\n\nIf we changed our current default behavior so that the value 'auto' for 'pointer-events' on <svg> would mean that the element would not intercept pointer events by default, the workaround for those authors that did want <svg> elements to intercept events would be shorter. They would simply need to add pointer-events=\"visiblePainted\" to their <svg> tags, or add the following to their HTML document:\n\n<style>\nsvg { pointer-events: visiblePainted; }\n</style>\n\nHowever, the reality is that we will almost certainly not be changing our default behavior for <svg> inline in HTML. First there are the arguments behind the second paragraph above, so it's not at all clear that the proposed change in default behavior is more desirable than what we currently do. However, really this point is moot. The bottom line is this: We have released several versions of Firefox that have significant market share with the current behavior. Webkit (Google Chrome + Safari) also has significant market share and has the same default behavior (but without supporting the workarounds above). Finally, IE 9 is about to be release, will no doubt attain significant market share, and again, has the same default behavior (also without a workaround, unfortunately). There is simply too much momentum behind the current behavior, and the arguments to change it are simply not strong enough to overcome that momentum. Besides the difficulty of getting multiple implementations to agree to change their behavior, the fact is that the overwhelming (and increasing) majority of SVG capable browsers running out there have our current behavior, and as such changing the behavior would carry too much of a risk of breaking content.\n\nFor the record, Opera implements the opposite default behavior to us.", "time": "2011-01-26T22:28:54Z"}, {"bug_id": 629176, "attachment_id": 507256, "creation_time": "2011-01-26T22:30:18Z", "author": "jwatt@jwatt.org", "tags": [], "creator": "jwatt@jwatt.org", "count": 1, "time": "2011-01-26T22:30:18Z", "raw_text": "", "id": 5230058, "text": "Created attachment 507256\ntestcase", "is_private": false}, {"is_private": false, "text": "My own opinion is that we should close this bug as won't-fix.", "id": 5230088, "time": "2011-01-26T22:35:44Z", "creation_time": "2011-01-26T22:35:44Z", "creator": "jwatt@jwatt.org", "count": 2, "raw_text": "My own opinion is that we should close this bug as won't-fix.", "attachment_id": null, "bug_id": 629176, "tags": [], "author": "jwatt@jwatt.org"}, {"author": "chordol@gmail.com", "creator": "chordol@gmail.com", "tags": [], "bug_id": 629176, "attachment_id": null, "creation_time": "2011-10-16T19:18:18Z", "time": "2011-10-16T19:18:18Z", "id": 5785308, "raw_text": "Jonathan, \nThank you for the detailed explanation. You see, I was looking for a solution to this perceived problem for two days now. My problem was that I was focusing too much on the root svg pointer-events property.\n\nYour simple css example solves the real problem. I would like to suggest that most of the people that I found having the same problem were looking at it from the perspective that the pointer-events on root svg either works or not. \n\nI think that a good thing to do would be to propagate what the default behavior is and that it does facilitate \"clicking through svg\" as is.", "text": "Jonathan, \nThank you for the detailed explanation. You see, I was looking for a solution to this perceived problem for two days now. My problem was that I was focusing too much on the root svg pointer-events property.\n\nYour simple css example solves the real problem. I would like to suggest that most of the people that I found having the same problem were looking at it from the perspective that the pointer-events on root svg either works or not. \n\nI think that a good thing to do would be to propagate what the default behavior is and that it does facilitate \"clicking through svg\" as is.", "is_private": false, "count": 3}]}}}