{"bugs": {"683471": {"comments": [{"raw_text": "+++ This bug was initially created as a clone of Bug #674251 +++\n\nWe should investigate the TDHTML regression first found in the bug 674251 and now revealed itself after type-inference branch landing. See bug 674251 comment 58 and later.", "attachment_id": null, "id": 5690235, "count": 0, "creator": "igor@mir2.org", "is_private": false, "bug_id": 683471, "tags": [], "time": "2011-08-31T11:33:09Z", "text": "+++ This bug was initially created as a clone of Bug #674251 +++\n\nWe should investigate the TDHTML regression first found in the bug 674251 and now revealed itself after type-inference branch landing. See bug 674251 comment 58 and later.", "author": "igor@mir2.org", "creation_time": "2011-08-31T11:33:09Z"}, {"id": 5690750, "attachment_id": null, "raw_text": "One interesting question here is how using jemalloc on mac affects this, if at all.", "author": "bzbarsky@mit.edu", "creation_time": "2011-08-31T15:18:56Z", "bug_id": 683471, "tags": [], "time": "2011-08-31T15:18:56Z", "text": "One interesting question here is how using jemalloc on mac affects this, if at all.", "creator": "bzbarsky@mit.edu", "is_private": false, "count": 1}, {"count": 2, "is_private": false, "creator": "bzbarsky@mit.edu", "text": "And requesting tracking for Fx9 for this performance regression.", "tags": [], "time": "2011-08-31T15:20:21Z", "bug_id": 683471, "creation_time": "2011-08-31T15:20:21Z", "author": "bzbarsky@mit.edu", "raw_text": "And requesting tracking for Fx9 for this performance regression.", "attachment_id": null, "id": 5690753}, {"author": "dmandelin@mozilla.com", "creation_time": "2011-08-31T17:35:11Z", "bug_id": 683471, "tags": [], "time": "2011-08-31T17:35:11Z", "text": "(In reply to Boris Zbarsky (:bz) from comment #2)\n> And requesting tracking for Fx9 for this performance regression.\n\nCan you post in this bug a clear listing of what the regressions are that you want to be required fixed for Fx9?", "creator": "dmandelin@mozilla.com", "is_private": false, "count": 3, "id": 5691281, "attachment_id": null, "raw_text": "(In reply to Boris Zbarsky (:bz) from comment #2)\n> And requesting tracking for Fx9 for this performance regression.\n\nCan you post in this bug a clear listing of what the regressions are that you want to be required fixed for Fx9?"}, {"bug_id": 683471, "count": 4, "id": 5691295, "attachment_id": null, "raw_text": "I'm not requiring a fix.\n\nI'm requiring some understanding for the 2x performance regression on the scrolling Tdhtml test, at the very least....", "creation_time": "2011-08-31T17:39:23Z", "author": "bzbarsky@mit.edu", "text": "I'm not requiring a fix.\n\nI'm requiring some understanding for the 2x performance regression on the scrolling Tdhtml test, at the very least....", "time": "2011-08-31T17:39:23Z", "tags": [], "is_private": false, "creator": "bzbarsky@mit.edu"}, {"creator": "gal@uci.edu", "is_private": false, "count": 5, "author": "gal@uci.edu", "creation_time": "2011-08-31T17:44:21Z", "tags": [], "bug_id": 683471, "time": "2011-08-31T17:44:21Z", "text": "We keep taking patches that significantly ding performance metrics. Bug 683631 just went past my inbox too. I think we should maintain a high standard for performance regressions and either back out the regressor or start working on a follow-up fix right away.", "attachment_id": null, "raw_text": "We keep taking patches that significantly ding performance metrics. Bug 683631 just went past my inbox too. I think we should maintain a high standard for performance regressions and either back out the regressor or start working on a follow-up fix right away.", "id": 5691312}, {"text": "Bug 683631 is much more important than this one: it reflects a slowdown when webpages interact with the DOM, something which real webpages definitely do.  I want to understand and fix bug 683631 within the next two weeks (I suspect it is from not having getter/setter paths in JM for DOM accesses).\n\nThis bug is for a test suite that manufactures tens of thousands of short scripts (bug 674251 comment 55), and the regression is caused by hanging onto those short scripts a few seconds longer (bug 674251 comment 58).  Maybe this is something which real websites do, but it isn't what this benchmark is supposed to be testing.  It is bad for benchmarks testing X to actually be gated on Y, and I think the TDHTML tests should just be changed.", "tags": [], "time": "2011-08-31T18:57:33Z", "creation_time": "2011-08-31T18:57:33Z", "author": "bhackett1024@gmail.com", "is_private": false, "creator": "bhackett1024@gmail.com", "id": 5691599, "raw_text": "Bug 683631 is much more important than this one: it reflects a slowdown when webpages interact with the DOM, something which real webpages definitely do.  I want to understand and fix bug 683631 within the next two weeks (I suspect it is from not having getter/setter paths in JM for DOM accesses).\n\nThis bug is for a test suite that manufactures tens of thousands of short scripts (bug 674251 comment 55), and the regression is caused by hanging onto those short scripts a few seconds longer (bug 674251 comment 58).  Maybe this is something which real websites do, but it isn't what this benchmark is supposed to be testing.  It is bad for benchmarks testing X to actually be gated on Y, and I think the TDHTML tests should just be changed.", "attachment_id": null, "bug_id": 683471, "count": 6}, {"attachment_id": null, "raw_text": "The setTimeout(string) code pattern is definitely something websites do, in spite of attempts to convince them otherwise.  This benchmark in particular was reduced from an actual site...\n\nIt may be worth changing the benchmark to be non-silly yes, but I'd still like to understand why the hit is test-specific.  That part is odd.  Maybe a matter of GC timing?", "id": 5691677, "is_private": false, "creator": "bzbarsky@mit.edu", "count": 7, "creation_time": "2011-08-31T19:26:01Z", "author": "bzbarsky@mit.edu", "text": "The setTimeout(string) code pattern is definitely something websites do, in spite of attempts to convince them otherwise.  This benchmark in particular was reduced from an actual site...\n\nIt may be worth changing the benchmark to be non-silly yes, but I'd still like to understand why the hit is test-specific.  That part is odd.  Maybe a matter of GC timing?", "tags": [], "bug_id": 683471, "time": "2011-08-31T19:26:01Z"}, {"text": "(In reply to Brian Hackett from comment #6)\n> This bug is for a test suite that manufactures tens of thousands of short\n> scripts (bug 674251 comment 55), and the regression is caused by hanging\n> onto those short scripts a few seconds longer (bug 674251 comment 58). \n\nAs Boris pointed out the regression could be due to a number of loops over all JSScript instances that are done by JM/TM code. Delaying the script destruction until the GC could made that more visible. It should be possible to verify that by having a try server run based on a revision prior TI landing where cx->free(script) is commented out in DestroyScript effectively leaking the malloc memory but avoiding the extra cost for loops over all scripts.\n\nIf that would not show the regression, then we know that we have problems in JM/TM regarding script management. If the regression would be on the scale that is observed with TI landing or like that from my initial attempts to land the bug 674251, then the problem is in MAC allocation inefficiencies that using jemalloc presumably would address.", "tags": [], "bug_id": 683471, "time": "2011-08-31T19:35:24Z", "creation_time": "2011-08-31T19:35:24Z", "author": "igor@mir2.org", "count": 8, "is_private": false, "creator": "igor@mir2.org", "id": 5691704, "raw_text": "(In reply to Brian Hackett from comment #6)\n> This bug is for a test suite that manufactures tens of thousands of short\n> scripts (bug 674251 comment 55), and the regression is caused by hanging\n> onto those short scripts a few seconds longer (bug 674251 comment 58). \n\nAs Boris pointed out the regression could be due to a number of loops over all JSScript instances that are done by JM/TM code. Delaying the script destruction until the GC could made that more visible. It should be possible to verify that by having a try server run based on a revision prior TI landing where cx->free(script) is commented out in DestroyScript effectively leaking the malloc memory but avoiding the extra cost for loops over all scripts.\n\nIf that would not show the regression, then we know that we have problems in JM/TM regarding script management. If the regression would be on the scale that is observed with TI landing or like that from my initial attempts to land the bug 674251, then the problem is in MAC allocation inefficiencies that using jemalloc presumably would address.", "attachment_id": null}, {"text": "Results of TDHTML experiments on the try server for OSX Opt:\n\nbase (MC tip before TI): 309\nbase with cx->free(script) disabled: 312 (http://tbpl.allizom.org/?tree=Try&usebuildbot=1&rev=231a07b34872)\nbase with DestroyScript() in EvaluateScript commented out: 322\nCurrent MC tip: 322\n\nSo there is a small regression coming from leaking script malloc, but the main regression comes from the dead scripts affecting live performance. So it looks like dead script enumeration or perhaps JIT data allocated for no longer reachable scripts affects the performance rather significantly.", "tags": [], "time": "2011-09-01T05:44:24Z", "bug_id": 683471, "creation_time": "2011-09-01T05:44:24Z", "author": "igor@mir2.org", "count": 9, "is_private": false, "creator": "igor@mir2.org", "id": 5692876, "raw_text": "Results of TDHTML experiments on the try server for OSX Opt:\n\nbase (MC tip before TI): 309\nbase with cx->free(script) disabled: 312 (http://tbpl.allizom.org/?tree=Try&usebuildbot=1&rev=231a07b34872)\nbase with DestroyScript() in EvaluateScript commented out: 322\nCurrent MC tip: 322\n\nSo there is a small regression coming from leaking script malloc, but the main regression comes from the dead scripts affecting live performance. So it looks like dead script enumeration or perhaps JIT data allocated for no longer reachable scripts affects the performance rather significantly.", "attachment_id": null}, {"bug_id": 683471, "count": 10, "id": 5692884, "attachment_id": null, "raw_text": "The results above implies that TI and scripts-as-GC things just exposed the problem that we have before. They are not responsible for the problem on its own and at worst can contribute only to the regression on the scale of malloc leak.", "creation_time": "2011-09-01T05:50:35Z", "author": "igor@mir2.org", "text": "The results above implies that TI and scripts-as-GC things just exposed the problem that we have before. They are not responsible for the problem on its own and at worst can contribute only to the regression on the scale of malloc leak.", "tags": [], "time": "2011-09-01T05:50:35Z", "is_private": false, "creator": "igor@mir2.org"}, {"raw_text": "Thats not how things work around here. If you expose it, you own it.", "attachment_id": null, "id": 5692887, "count": 11, "creator": "gal@uci.edu", "is_private": false, "time": "2011-09-01T05:53:18Z", "bug_id": 683471, "tags": [], "text": "Thats not how things work around here. If you expose it, you own it.", "author": "gal@uci.edu", "creation_time": "2011-09-01T05:53:18Z"}, {"count": 12, "creator": "dmandelin@mozilla.com", "is_private": false, "time": "2011-09-02T00:26:59Z", "tags": [], "bug_id": 683471, "text": ">So there is a small regression coming from leaking script malloc, \n\nWhat does that mean exactly? And is that from scripts-as-GCThings, or from TI?\n\n>but the main regression comes from the dead scripts affecting live performance.\n\nIs this from scripts-as-GCThings, or from TI?\n\nAssuming it's true that this is mostly coming from looping over dead scripts, we have to fix this.", "author": "dmandelin@mozilla.com", "creation_time": "2011-09-02T00:26:59Z", "raw_text": ">So there is a small regression coming from leaking script malloc, \n\nWhat does that mean exactly? And is that from scripts-as-GCThings, or from TI?\n\n>but the main regression comes from the dead scripts affecting live performance.\n\nIs this from scripts-as-GCThings, or from TI?\n\nAssuming it's true that this is mostly coming from looping over dead scripts, we have to fix this.", "attachment_id": null, "id": 5695227}, {"bug_id": 683471, "count": 13, "id": 5695683, "raw_text": "(In reply to David Mandelin from comment #12)\n> >So there is a small regression coming from leaking script malloc, \n> \n> What does that mean exactly? And is that from scripts-as-GCThings, or from\n> TI?\n\nBoth scripts-as-GCThings and TI require to destroy scripts only during the GC. As such any of this bugs alone or combined trigger the same regression.\n\n> \n> >but the main regression comes from the dead scripts affecting live performance.\n> \n> Is this from scripts-as-GCThings, or from TI?\n\nAgain, any of these patches exposes the problem that were previously hidden.\n\n> Assuming it's true that this is mostly coming from looping over dead\n> scripts, we have to fix this.\n\nI suspect it is either loops or hash tables bloated by the dead scripts that caused the regression as all tests/experiments points into this direction.", "attachment_id": null, "time": "2011-09-02T06:59:14Z", "tags": [], "text": "(In reply to David Mandelin from comment #12)\n> >So there is a small regression coming from leaking script malloc, \n> \n> What does that mean exactly? And is that from scripts-as-GCThings, or from\n> TI?\n\nBoth scripts-as-GCThings and TI require to destroy scripts only during the GC. As such any of this bugs alone or combined trigger the same regression.\n\n> \n> >but the main regression comes from the dead scripts affecting live performance.\n> \n> Is this from scripts-as-GCThings, or from TI?\n\nAgain, any of these patches exposes the problem that were previously hidden.\n\n> Assuming it's true that this is mostly coming from looping over dead\n> scripts, we have to fix this.\n\nI suspect it is either loops or hash tables bloated by the dead scripts that caused the regression as all tests/experiments points into this direction.", "author": "igor@mir2.org", "creation_time": "2011-09-02T06:59:14Z", "creator": "igor@mir2.org", "is_private": false}, {"attachment_id": null, "raw_text": "(In reply to Igor Bukanov from comment #13)\n> (In reply to David Mandelin from comment #12)\n> > >So there is a small regression coming from leaking script malloc, \n> > \n> > What does that mean exactly? And is that from scripts-as-GCThings, or from\n> > TI?\n> \n> Both scripts-as-GCThings and TI require to destroy scripts only during the\n> GC. As such any of this bugs alone or combined trigger the same regression.\n\nCool, thanks.", "id": 5697677, "is_private": false, "creator": "dmandelin@mozilla.com", "count": 14, "creation_time": "2011-09-02T23:00:38Z", "author": "dmandelin@mozilla.com", "text": "(In reply to Igor Bukanov from comment #13)\n> (In reply to David Mandelin from comment #12)\n> > >So there is a small regression coming from leaking script malloc, \n> > \n> > What does that mean exactly? And is that from scripts-as-GCThings, or from\n> > TI?\n> \n> Both scripts-as-GCThings and TI require to destroy scripts only during the\n> GC. As such any of this bugs alone or combined trigger the same regression.\n\nCool, thanks.", "time": "2011-09-02T23:00:38Z", "tags": [], "bug_id": 683471}, {"text": "We took this regression and now this bug is unassigned and not moving.\n\nWe need a hero. Someone who knows how to use Shark.", "time": "2011-09-08T20:34:34Z", "tags": [], "creation_time": "2011-09-08T20:34:34Z", "author": "jorendorff@mozilla.com", "is_private": false, "creator": "jorendorff@mozilla.com", "id": 5708961, "raw_text": "We took this regression and now this bug is unassigned and not moving.\n\nWe need a hero. Someone who knows how to use Shark.", "attachment_id": null, "bug_id": 683471, "count": 15}, {"creator": "dmandelin@mozilla.com", "is_private": false, "time": "2011-10-07T02:02:06Z", "tags": [], "text": "What's the current status of this bug?", "author": "dmandelin@mozilla.com", "creation_time": "2011-10-07T02:02:06Z", "raw_text": "What's the current status of this bug?", "attachment_id": null, "id": 5765482, "count": 16, "bug_id": 683471}, {"text": "Brian says this will not affect perf in practice.", "bug_id": 683471, "time": "2011-10-25T18:52:56Z", "tags": [], "creation_time": "2011-10-25T18:52:56Z", "author": "dmandelin@mozilla.com", "count": 17, "is_private": false, "creator": "dmandelin@mozilla.com", "id": 5803951, "raw_text": "Brian says this will not affect perf in practice.", "attachment_id": null}, {"raw_text": "Why not?\n\nNote that the Tdhtml testcases were based on actual websites at one point.", "attachment_id": null, "id": 5803967, "is_private": false, "creator": "bzbarsky@mit.edu", "text": "Why not?\n\nNote that the Tdhtml testcases were based on actual websites at one point.", "time": "2011-10-25T18:55:12Z", "tags": [], "creation_time": "2011-10-25T18:55:12Z", "author": "bzbarsky@mit.edu", "count": 18, "bug_id": 683471}, {"raw_text": "What is the website the testcase was based on?  The testcase basically schedules tons of timeouts at short intervals which do a puny amount of work when they fire.  So even if a website had behavior similar to this, I suspect the testcase has exaggerated that behavior to the point where it becomes pathological.", "attachment_id": null, "id": 5804543, "count": 19, "is_private": false, "creator": "bhackett1024@gmail.com", "text": "What is the website the testcase was based on?  The testcase basically schedules tons of timeouts at short intervals which do a puny amount of work when they fire.  So even if a website had behavior similar to this, I suspect the testcase has exaggerated that behavior to the point where it becomes pathological.", "tags": [], "bug_id": 683471, "time": "2011-10-25T21:57:53Z", "creation_time": "2011-10-25T21:57:53Z", "author": "bhackett1024@gmail.com"}, {"count": 20, "creator": "bzbarsky@mit.edu", "is_private": false, "tags": [], "bug_id": 683471, "time": "2011-10-25T22:17:24Z", "text": "I think the website is gone at this point... but the behavior you describe is not uncommon for JS animations, actually.  :(", "author": "bzbarsky@mit.edu", "creation_time": "2011-10-25T22:17:24Z", "raw_text": "I think the website is gone at this point... but the behavior you describe is not uncommon for JS animations, actually.  :(", "attachment_id": null, "id": 5804605}, {"count": 21, "bug_id": 683471, "creator": "bzbarsky@mit.edu", "is_private": false, "tags": [], "time": "2011-10-25T22:18:52Z", "text": "Is the issue here that these are string-based timeouts, and we're ending up with tons of JSScripts from all those strings?\n\nAnd there are no other ways that we can end up with tons of JSScripts like that (e.g. lots of inline event handlers, etc)?\n\nIf so, I agree with not worrying about this for now and setting up something similar to the eval cache for setTimeout that maps strings to scripts.", "author": "bzbarsky@mit.edu", "creation_time": "2011-10-25T22:18:52Z", "raw_text": "Is the issue here that these are string-based timeouts, and we're ending up with tons of JSScripts from all those strings?\n\nAnd there are no other ways that we can end up with tons of JSScripts like that (e.g. lots of inline event handlers, etc)?\n\nIf so, I agree with not worrying about this for now and setting up something similar to the eval cache for setTimeout that maps strings to scripts.", "attachment_id": null, "id": 5804611}, {"bug_id": 683471, "count": 22, "id": 5804634, "attachment_id": null, "raw_text": "I like the idea in comment #21 a lot. Brian, is that feasible to implement quickly?", "creation_time": "2011-10-25T22:27:33Z", "author": "gal@uci.edu", "text": "I like the idea in comment #21 a lot. Brian, is that feasible to implement quickly?", "tags": [], "time": "2011-10-25T22:27:33Z", "is_private": false, "creator": "gal@uci.edu"}, {"count": 23, "is_private": false, "creator": "igor@mir2.org", "text": "(In reply to Andreas Gal :gal from comment #22)\n> I like the idea in comment #21 a lot. \n\nIIRC the main culprit for the slowdown came from the test doing:\n\nfunction animation_function(x, y) {\n    ...\n    setTimeout(\"animation_function(\"+(x + x_step)+\", \"+(y + y_step)+\")\");\n} \n\nThe caching is not helpful in this case as the source changes at each setTimeout call.", "bug_id": 683471, "time": "2011-10-25T22:40:11Z", "tags": [], "creation_time": "2011-10-25T22:40:11Z", "author": "igor@mir2.org", "raw_text": "(In reply to Andreas Gal :gal from comment #22)\n> I like the idea in comment #21 a lot. \n\nIIRC the main culprit for the slowdown came from the test doing:\n\nfunction animation_function(x, y) {\n    ...\n    setTimeout(\"animation_function(\"+(x + x_step)+\", \"+(y + y_step)+\")\");\n} \n\nThe caching is not helpful in this case as the source changes at each setTimeout call.", "attachment_id": null, "id": 5804669}, {"author": "igor@mir2.org", "creation_time": "2011-10-25T22:43:47Z", "bug_id": 683471, "time": "2011-10-25T22:43:47Z", "tags": [], "text": "I think instead of caching it maybe worth to try to recognize the timeout scripts in the form of function_name(constant_parameters) and simply turn that into a function call.", "creator": "igor@mir2.org", "is_private": false, "count": 24, "id": 5804681, "attachment_id": null, "raw_text": "I think instead of caching it maybe worth to try to recognize the timeout scripts in the form of function_name(constant_parameters) and simply turn that into a function call."}, {"count": 25, "is_private": false, "creator": "bhackett1024@gmail.com", "text": "I don't think it would be a huge amount of work to either expand the eval cache, add another similar cache or pattern match setTimeout(\"foo()\").  We really need a real website though that spends a measurable amount of time repeatedly compiling scripts and which would be helped by such changes.", "time": "2011-10-25T22:46:49Z", "tags": [], "bug_id": 683471, "creation_time": "2011-10-25T22:46:49Z", "author": "bhackett1024@gmail.com", "raw_text": "I don't think it would be a huge amount of work to either expand the eval cache, add another similar cache or pattern match setTimeout(\"foo()\").  We really need a real website though that spends a measurable amount of time repeatedly compiling scripts and which would be helped by such changes.", "attachment_id": null, "id": 5804694}, {"tags": [], "time": "2011-10-25T23:03:36Z", "bug_id": 683471, "text": "(In reply to Brian Hackett from comment #25)\n> We\n> really need a real website though that spends a measurable amount of time\n> repeatedly compiling scripts and which would be helped by such changes.\n\nI do not see it this way. The Talos test shows that holding about 1000 JSScript instances at least until the GC has measurable effects on performance. Many complex sites has more functions and corresponding script instances than that so we should not ignore this bug as an example of pathological code that does not exist on the real Web.\n\nAs Boris pointed out in the bug 674251 this could be due to O(N^2) or similar scalability problems in our GC implementation as we loop over all scripts in a few places doing non-trivial amount of work for each script. So we should check this first.", "author": "igor@mir2.org", "creation_time": "2011-10-25T23:03:36Z", "count": 26, "creator": "igor@mir2.org", "is_private": false, "id": 5804743, "raw_text": "(In reply to Brian Hackett from comment #25)\n> We\n> really need a real website though that spends a measurable amount of time\n> repeatedly compiling scripts and which would be helped by such changes.\n\nI do not see it this way. The Talos test shows that holding about 1000 JSScript instances at least until the GC has measurable effects on performance. Many complex sites has more functions and corresponding script instances than that so we should not ignore this bug as an example of pathological code that does not exist on the real Web.\n\nAs Boris pointed out in the bug 674251 this could be due to O(N^2) or similar scalability problems in our GC implementation as we loop over all scripts in a few places doing non-trivial amount of work for each script. So we should check this first.", "attachment_id": null}, {"bug_id": 683471, "count": 27, "author": "dmandelin@mozilla.com", "creation_time": "2011-10-26T01:00:39Z", "tags": [], "time": "2011-10-26T01:00:39Z", "text": "(In reply to Igor Bukanov from comment #26)\n> (In reply to Brian Hackett from comment #25)\n> > We\n> > really need a real website though that spends a measurable amount of time\n> > repeatedly compiling scripts and which would be helped by such changes.\n> \n> I do not see it this way. The Talos test shows that holding about 1000\n> JSScript instances at least until the GC has measurable effects on\n> performance. Many complex sites has more functions and corresponding script\n> instances than that so we should not ignore this bug as an example of\n> pathological code that does not exist on the real Web.\n> \n> As Boris pointed out in the bug 674251 this could be due to O(N^2) or\n> similar scalability problems in our GC implementation as we loop over all\n> scripts in a few places doing non-trivial amount of work for each script. So\n> we should check this first.\n\nOK. Back in comment 12, I wrote:\n\n>Assuming it's true that this is mostly coming from looping over dead scripts, we \n>have to fix this.\n\nIs it true that this is mostly from looping over dead scripts? If so, it seems like \"change it so we don't loop over dead scripts\" would take care of this.", "creator": "dmandelin@mozilla.com", "is_private": false, "id": 5805030, "attachment_id": null, "raw_text": "(In reply to Igor Bukanov from comment #26)\n> (In reply to Brian Hackett from comment #25)\n> > We\n> > really need a real website though that spends a measurable amount of time\n> > repeatedly compiling scripts and which would be helped by such changes.\n> \n> I do not see it this way. The Talos test shows that holding about 1000\n> JSScript instances at least until the GC has measurable effects on\n> performance. Many complex sites has more functions and corresponding script\n> instances than that so we should not ignore this bug as an example of\n> pathological code that does not exist on the real Web.\n> \n> As Boris pointed out in the bug 674251 this could be due to O(N^2) or\n> similar scalability problems in our GC implementation as we loop over all\n> scripts in a few places doing non-trivial amount of work for each script. So\n> we should check this first.\n\nOK. Back in comment 12, I wrote:\n\n>Assuming it's true that this is mostly coming from looping over dead scripts, we \n>have to fix this.\n\nIs it true that this is mostly from looping over dead scripts? If so, it seems like \"change it so we don't loop over dead scripts\" would take care of this."}, {"raw_text": "(In reply to David Mandelin from comment #27)\n> Is it true that this is mostly from looping over dead scripts? If so, it\n> seems like \"change it so we don't loop over dead scripts\" would take care of\n> this.\n\nI do not know if this is attributed to loops over dead scripts or not. In shell I see no pathological behavior in the following test case that tries to simulate the Talos test:\n\nfunction foo(x) {\n    return Function(\"return foo(\"+(x + 1)+\")\");\n}\n\nfunction test(N) {\n    var test_start = Date.now();\n    var f = foo;\n    for (var i = 0; i != N; ++i)\n\tf = f(i)();\n    var gc_start = Date.now();\n    gc();\n    gc();\n    var end_time = Date.now();\n    return [end_time - test_start, end_time - gc_start];\n}\n\nvar first_run_time;\nfor (var i = 1; i <= 10; ++i) {\n    var times = test(i * 10*1000);\n    if (!first_run_time)\n\tfirst_run_time = times[0];\n    print(\"gc_time=\"+times[1]+\" full_time=\"+times[0]+\" scaling=\"+(times[0]/first_run_time/i).toFixed(3)); \n}\n\n\nThe output shows O(1) behavior in the GC and linear scaling in total timing with the number of scripts:\n\ngc_time=2 full_time=139 scaling=1.000\ngc_time=4 full_time=272 scaling=0.978\ngc_time=6 full_time=412 scaling=0.988\ngc_time=2 full_time=545 scaling=0.980\ngc_time=3 full_time=679 scaling=0.977\ngc_time=5 full_time=815 scaling=0.977\ngc_time=2 full_time=950 scaling=0.976\ngc_time=3 full_time=1085 scaling=0.976\ngc_time=5 full_time=1220 scaling=0.975\ngc_time=1 full_time=1357 scaling=0.976", "attachment_id": null, "id": 5805444, "count": 28, "is_private": false, "creator": "igor@mir2.org", "text": "(In reply to David Mandelin from comment #27)\n> Is it true that this is mostly from looping over dead scripts? If so, it\n> seems like \"change it so we don't loop over dead scripts\" would take care of\n> this.\n\nI do not know if this is attributed to loops over dead scripts or not. In shell I see no pathological behavior in the following test case that tries to simulate the Talos test:\n\nfunction foo(x) {\n    return Function(\"return foo(\"+(x + 1)+\")\");\n}\n\nfunction test(N) {\n    var test_start = Date.now();\n    var f = foo;\n    for (var i = 0; i != N; ++i)\n\tf = f(i)();\n    var gc_start = Date.now();\n    gc();\n    gc();\n    var end_time = Date.now();\n    return [end_time - test_start, end_time - gc_start];\n}\n\nvar first_run_time;\nfor (var i = 1; i <= 10; ++i) {\n    var times = test(i * 10*1000);\n    if (!first_run_time)\n\tfirst_run_time = times[0];\n    print(\"gc_time=\"+times[1]+\" full_time=\"+times[0]+\" scaling=\"+(times[0]/first_run_time/i).toFixed(3)); \n}\n\n\nThe output shows O(1) behavior in the GC and linear scaling in total timing with the number of scripts:\n\ngc_time=2 full_time=139 scaling=1.000\ngc_time=4 full_time=272 scaling=0.978\ngc_time=6 full_time=412 scaling=0.988\ngc_time=2 full_time=545 scaling=0.980\ngc_time=3 full_time=679 scaling=0.977\ngc_time=5 full_time=815 scaling=0.977\ngc_time=2 full_time=950 scaling=0.976\ngc_time=3 full_time=1085 scaling=0.976\ngc_time=5 full_time=1220 scaling=0.975\ngc_time=1 full_time=1357 scaling=0.976", "time": "2011-10-26T05:05:31Z", "bug_id": 683471, "tags": [], "creation_time": "2011-10-26T05:05:31Z", "author": "igor@mir2.org"}, {"count": 29, "creator": "till@tillschneidereit.net", "is_private": false, "bug_id": 683471, "time": "2013-06-16T17:32:12Z", "tags": [], "text": "See comment 23 and following.\n\nBesides it being unclear whether this would translate into any real-world wins, however, I'm not convinced that translating this into a function call really is straight-forward.\n\nConsider the concrete example in comment 23: I suppose we'd transform the setTimeout into something roughly like\n\nsetTimeout(animation_function, timeout, x + x_step, y + y_step);\n\nHow are we going to guarantee that eagerly evaluating the parameters won't get different results from lazily evaluating them at resolution of the timeout? even if we detect that x and y can't change, x_step and y_step certainly could.\n\nObviously, I might just miss some details of how setTimeout works.", "author": "till@tillschneidereit.net", "creation_time": "2013-06-16T17:32:12Z", "raw_text": "See comment 23 and following.\n\nBesides it being unclear whether this would translate into any real-world wins, however, I'm not convinced that translating this into a function call really is straight-forward.\n\nConsider the concrete example in comment 23: I suppose we'd transform the setTimeout into something roughly like\n\nsetTimeout(animation_function, timeout, x + x_step, y + y_step);\n\nHow are we going to guarantee that eagerly evaluating the parameters won't get different results from lazily evaluating them at resolution of the timeout? even if we detect that x and y can't change, x_step and y_step certainly could.\n\nObviously, I might just miss some details of how setTimeout works.", "attachment_id": null, "id": 7539992}]}}, "comments": {}}