{"bugs": {"652377": {"comments": [{"time": "2011-04-24T01:49:09Z", "is_private": false, "attachment_id": 527972, "bug_id": 652377, "count": 0, "creator": "mail@lukewagner.name", "tags": [], "raw_text": "Douglas Crockford had an interesting post:\n  http://crockford.com/javascript/performance.html\nHe timed (though with an unspecified method) JSLint running on jslint.js and found that IE was the fastest, JM was second (70% slower), and Chrome 5x worse.\n\nI attached a jslint.js shell testcase that snarfs and runs JSLINT on itself.  My months-old d8 is indeed 3x slower than us (wasn't able to try IE, and my old jsc build crashed).  Sharking 'js -m -j -p attachment.js' gives the following breakdown:\n\n31.0% in mjit code\n 2.6% in regex jit code\n12.1% creating regex return object\n 5.5% kernel time  (mostly vm faults near regexp object creation)\n20.1% under prop/name mjit stubs\n   7.0% under stubs::GetProp\n   4.2% under stubs::GetElem\n   4.2% under stubs::CallName\n   2.6% under stubs::SetName\n   1.3% under stubs::BindElem\n   0.8% under stubs::SetElem\n 4.6% stubs involving string manipulation\n   2.3% under stubs::StrictEq (js::EqualStrings)\n   0.9% under stubs::StrictNe (js::EqualStrings)\n   0.6% under stubs::Add (js_ConcatStrings)\n   0.8% under stubs::LookupSwitch (js::EqualStrings)\n 3.4% under stubs::CreateFunCallObject\n 1.5% under obj_create\n 0.9% stubs::FixupArity\n\nA few notes on this:\n\nJSLINT does a lot of regexp exec().  Our exec()-return-object creation is already known to be really slow.  Bug 586842 would let us build a dense array for the result instead of slow array.  Also, we should be able to make js_DefineProperties faster than just calling js_DefineProperty in a loop, or just make a fast path specialized for regexp.exec; js_DefineProperty is, relatively, a *really* slow path.\n\nGenerational GC should help on all that kernel time (collect regexp.exec garbage, stay in cache).  Even better (perhaps built with IonMonkey infrastructure) the seemginly one focal place where regexp.exec is called would be highly amenable to linearity inference would would let us eagerly free objects.\n\nI don't know much about the property access stubs, but it seems Crockford really likes to use Object.create which may be producing new shapes each time?\n\nThere have also been plans for mjit fast paths for strings and call obj creation.\n\nLastly bug 648698 would make the FixupArity go away.\n\nAltogether, these sources of slow-down would account for ~45% of our time and, if they were all magically fixed, would put us at or better than IE.", "id": 5428258, "text": "Created attachment 527972\nshell benchmark\n\nDouglas Crockford had an interesting post:\n  http://crockford.com/javascript/performance.html\nHe timed (though with an unspecified method) JSLint running on jslint.js and found that IE was the fastest, JM was second (70% slower), and Chrome 5x worse.\n\nI attached a jslint.js shell testcase that snarfs and runs JSLINT on itself.  My months-old d8 is indeed 3x slower than us (wasn't able to try IE, and my old jsc build crashed).  Sharking 'js -m -j -p attachment.js' gives the following breakdown:\n\n31.0% in mjit code\n 2.6% in regex jit code\n12.1% creating regex return object\n 5.5% kernel time  (mostly vm faults near regexp object creation)\n20.1% under prop/name mjit stubs\n   7.0% under stubs::GetProp\n   4.2% under stubs::GetElem\n   4.2% under stubs::CallName\n   2.6% under stubs::SetName\n   1.3% under stubs::BindElem\n   0.8% under stubs::SetElem\n 4.6% stubs involving string manipulation\n   2.3% under stubs::StrictEq (js::EqualStrings)\n   0.9% under stubs::StrictNe (js::EqualStrings)\n   0.6% under stubs::Add (js_ConcatStrings)\n   0.8% under stubs::LookupSwitch (js::EqualStrings)\n 3.4% under stubs::CreateFunCallObject\n 1.5% under obj_create\n 0.9% stubs::FixupArity\n\nA few notes on this:\n\nJSLINT does a lot of regexp exec().  Our exec()-return-object creation is already known to be really slow.  Bug 586842 would let us build a dense array for the result instead of slow array.  Also, we should be able to make js_DefineProperties faster than just calling js_DefineProperty in a loop, or just make a fast path specialized for regexp.exec; js_DefineProperty is, relatively, a *really* slow path.\n\nGenerational GC should help on all that kernel time (collect regexp.exec garbage, stay in cache).  Even better (perhaps built with IonMonkey infrastructure) the seemginly one focal place where regexp.exec is called would be highly amenable to linearity inference would would let us eagerly free objects.\n\nI don't know much about the property access stubs, but it seems Crockford really likes to use Object.create which may be producing new shapes each time?\n\nThere have also been plans for mjit fast paths for strings and call obj creation.\n\nLastly bug 648698 would make the FixupArity go away.\n\nAltogether, these sources of slow-down would account for ~45% of our time and, if they were all magically fixed, would put us at or better than IE.", "creation_time": "2011-04-24T01:49:09Z", "author": "mail@lukewagner.name"}, {"time": "2013-01-11T02:18:12Z", "is_private": false, "attachment_id": null, "creator": "n.nethercote@gmail.com", "tags": [], "count": 1, "bug_id": 652377, "creation_time": "2013-01-11T02:18:12Z", "text": "Bug 827490 just landed.  It might help here.", "id": 6988640, "raw_text": "Bug 827490 just landed.  It might help here.", "author": "n.nethercote@gmail.com"}, {"author": "guijoselito@gmail.com", "attachment_id": null, "raw_text": "According to AWFY, this benchmark regressed more than 30% since June.", "id": 7854311, "text": "According to AWFY, this benchmark regressed more than 30% since June.", "is_private": false, "creation_time": "2013-09-12T15:45:22Z", "bug_id": 652377, "tags": [], "creator": "guijoselito@gmail.com", "count": 2, "time": "2013-09-12T15:45:22Z"}]}}, "comments": {}}