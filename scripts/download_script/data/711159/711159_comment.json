{"comments": {}, "bugs": {"711159": {"comments": [{"bug_id": 711159, "tags": [], "time": "2011-12-15T18:33:48Z", "text": "BaseShape::unowned_ optimizes several cases in the VM where we need to find the UnownedBaseShape equivalent to a given (owned) BaseShape.  However, it's possible this isn't necessary or, in the cases where it is, we could achieve the same perf through other means. This would be a bit simpler (since BaseShape::unowned_ has been a bit confusing to people) and save memory.  Since owned and unowned BaseShapes use the same struct, BaseShape::unowned_ costs an extra word for every BaseShape, owned or not.  Membuster shows 25MB (2.5% of gc heap) of BaseShapes so this would shave off 1/7th of that which is.. eh.  Not a priority, but I wanted to remember the idea.", "author": "mail@lukewagner.name", "creation_time": "2011-12-15T18:33:48Z", "count": 0, "creator": "mail@lukewagner.name", "is_private": false, "id": 5919517, "raw_text": "BaseShape::unowned_ optimizes several cases in the VM where we need to find the UnownedBaseShape equivalent to a given (owned) BaseShape.  However, it's possible this isn't necessary or, in the cases where it is, we could achieve the same perf through other means. This would be a bit simpler (since BaseShape::unowned_ has been a bit confusing to people) and save memory.  Since owned and unowned BaseShapes use the same struct, BaseShape::unowned_ costs an extra word for every BaseShape, owned or not.  Membuster shows 25MB (2.5% of gc heap) of BaseShapes so this would shave off 1/7th of that which is.. eh.  Not a priority, but I wanted to remember the idea.", "attachment_id": null}]}}}