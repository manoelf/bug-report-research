{"comments": {}, "bugs": {"653015": {"comments": [{"is_private": false, "count": 0, "time": "2011-04-27T00:22:01Z", "author": "firstpeterfourten@gmail.com", "id": 5433657, "attachment_id": null, "tags": [], "creation_time": "2011-04-27T00:22:01Z", "creator": "firstpeterfourten@gmail.com", "raw_text": "User-Agent:       Mozilla/5.0 (Windows NT 6.1; rv:2.0) Gecko/20100101 Firefox/4.0\nBuild Identifier: Mozilla/5.0 (Windows NT 6.1; rv:2.0) Gecko/20100101 Firefox/4.0\n\nThe area of the FF window that looks like it will let you drag the window around is significantly larger than the area of the window that will actually let you drag it around. \n\nReproducible: Always\n\nSteps to Reproduce:\nI'm using Windows 7 and FF4 with the Menu bar shown.\nI see (1) the title bar at the top of the window, with (2) the menu bar below it, and then (3) a row for tabs; below that is a line and a clear separation to (4) the toolbar area of the screen.  At startup I only have one tab open.  For most of the screen width (esp. middle and right areas), there is NO visual separation at all between (1), (2), and (3).\n\n\nActual Results:  \nThat looks pretty cool and it's neat UI. \nHowever, when I want to click and drag the window around on the screen, I'm only allowed to click on the title bar to do that.\n\nExpected Results:  \nI would like to be able to click in any of the area that looks just like the title bar, even if it's a little below where the title bar *technically* is (e. g. on the menu or tab bar), and drag the window.\nIf we can't do that, we should at least give users some visual guidance on where the boundary is between the click-and-draggable area and the dead space.  At LEAST as an option.", "bug_id": 653015, "text": "User-Agent:       Mozilla/5.0 (Windows NT 6.1; rv:2.0) Gecko/20100101 Firefox/4.0\nBuild Identifier: Mozilla/5.0 (Windows NT 6.1; rv:2.0) Gecko/20100101 Firefox/4.0\n\nThe area of the FF window that looks like it will let you drag the window around is significantly larger than the area of the window that will actually let you drag it around. \n\nReproducible: Always\n\nSteps to Reproduce:\nI'm using Windows 7 and FF4 with the Menu bar shown.\nI see (1) the title bar at the top of the window, with (2) the menu bar below it, and then (3) a row for tabs; below that is a line and a clear separation to (4) the toolbar area of the screen.  At startup I only have one tab open.  For most of the screen width (esp. middle and right areas), there is NO visual separation at all between (1), (2), and (3).\n\n\nActual Results:  \nThat looks pretty cool and it's neat UI. \nHowever, when I want to click and drag the window around on the screen, I'm only allowed to click on the title bar to do that.\n\nExpected Results:  \nI would like to be able to click in any of the area that looks just like the title bar, even if it's a little below where the title bar *technically* is (e. g. on the menu or tab bar), and drag the window.\nIf we can't do that, we should at least give users some visual guidance on where the boundary is between the click-and-draggable area and the dead space.  At LEAST as an option."}, {"bug_id": 653015, "attachment_id": 528517, "tags": [], "creation_time": "2011-04-27T03:02:29Z", "id": 5433877, "is_private": false, "author": "firstpeterfourten@gmail.com", "text": "Created attachment 528517\nScreenshot illustrating visually \"draggable\" area (see comment 1)\n\nI've attached a screenshot showing what area I mean.  Intuitively, I should be able to click on any of the area circled in orange and drag the window around.  There's no distinction visually between which part of that region is going to work and which part isn't.\n\nThe blue boxes are just covering over some irrelevant extensions.", "creator": "firstpeterfourten@gmail.com", "raw_text": "I've attached a screenshot showing what area I mean.  Intuitively, I should be able to click on any of the area circled in orange and drag the window around.  There's no distinction visually between which part of that region is going to work and which part isn't.\n\nThe blue boxes are just covering over some irrelevant extensions.", "count": 1, "time": "2011-04-27T03:02:29Z"}, {"id": 5437854, "is_private": false, "time": "2011-04-28T19:31:47Z", "author": "xtc4uall@gmail.com", "count": 2, "bug_id": 653015, "text": "If I recall correctly this was done on Purpose.\nMoving to Theme for the \"visual guidance\" Stuff.", "creation_time": "2011-04-28T19:31:47Z", "tags": [], "attachment_id": null, "raw_text": "If I recall correctly this was done on Purpose.\nMoving to Theme for the \"visual guidance\" Stuff.", "creator": "xtc4uall@gmail.com"}, {"bug_id": 653015, "creation_time": "2011-05-11T14:23:07Z", "tags": [], "attachment_id": null, "id": 5462567, "is_private": false, "author": "vlad.ghetiu@softvision.ro", "text": "Considering comment2, setting resolution to Resolved Invalid.", "raw_text": "Considering comment2, setting resolution to Resolved Invalid.", "creator": "vlad.ghetiu@softvision.ro", "time": "2011-05-11T14:23:07Z", "count": 3}, {"raw_text": "Comment 2 was not a resolution, it was changing the component.\nI would like to hear what were the reasons behind the design (\"done on Purpose\") and at least see some visual guidance so that we can have a clue where to click that will work, vs. the neighboring pixel that looks the same and won't.", "creator": "firstpeterfourten@gmail.com", "text": "Comment 2 was not a resolution, it was changing the component.\nI would like to hear what were the reasons behind the design (\"done on Purpose\") and at least see some visual guidance so that we can have a clue where to click that will work, vs. the neighboring pixel that looks the same and won't.", "time": "2011-05-13T01:44:32Z", "count": 4, "creation_time": "2011-05-13T01:44:32Z", "tags": [], "attachment_id": null, "bug_id": 653015, "is_private": false, "author": "firstpeterfourten@gmail.com", "id": 5467248}, {"count": 5, "time": "2011-05-23T14:10:30Z", "creator": "andrei.domuta@softvision.ro", "raw_text": "(In reply to comment #4)\n> Comment 2 was not a resolution, it was changing the component.\n> I would like to hear what were the reasons behind the design (\"done on\n> Purpose\") and at least see some visual guidance so that we can have a clue\n> where to click that will work, vs. the neighboring pixel that looks the same\n> and won't.\n\nThis looks more as an enhancement rather than a bug. If so, please mark this in the importance field. Thanks", "text": "(In reply to comment #4)\n> Comment 2 was not a resolution, it was changing the component.\n> I would like to hear what were the reasons behind the design (\"done on\n> Purpose\") and at least see some visual guidance so that we can have a clue\n> where to click that will work, vs. the neighboring pixel that looks the same\n> and won't.\n\nThis looks more as an enhancement rather than a bug. If so, please mark this in the importance field. Thanks", "author": "andrei.domuta@softvision.ro", "is_private": false, "id": 5486343, "attachment_id": null, "creation_time": "2011-05-23T14:10:30Z", "tags": [], "bug_id": 653015}, {"is_private": false, "count": 6, "author": "purchases@robertinventor.com", "time": "2012-08-24T18:01:23Z", "id": 6581496, "attachment_id": null, "creation_time": "2012-08-24T18:01:23Z", "tags": [], "creator": "purchases@robertinventor.com", "raw_text": "I'm a developer of Windows software, and I would most definitely count this as a bug if any of my programs behaved like this, not as an enhancement. \n\nThe code is:\n\n case WM_NCHITTEST:\n  // check to see if it is in the title bar region\n  return HTCAPTION;\n\n\nSee how Chrome does it for an example.\n\nIt's a bug because there is no indication to the user to show which part of the title bar to click on when the user wants to drag the window. For some reason Firefox seems to be using the default height of the title bar that Windows sets instead of the area of the title bar the program itself draws. In other words the program is visually inconsistent, it behaves like a standard window with a standard height of title bar but is displayed with a larger than normal title bar.\n\nTo fix that you need to return HTCAPTION for the visible title bar - or else need to change the height of the visible title bar to match the HTCAPTION return value - it's buggy because HTCAPTION doesn't match the visible title bar.\n\nInteresting to hear what the reason is for not doing that. Maybe there is some other way of achieving the desired objective whatever it was, without having this confusing side effect.", "bug_id": 653015, "text": "I'm a developer of Windows software, and I would most definitely count this as a bug if any of my programs behaved like this, not as an enhancement. \n\nThe code is:\n\n case WM_NCHITTEST:\n  // check to see if it is in the title bar region\n  return HTCAPTION;\n\n\nSee how Chrome does it for an example.\n\nIt's a bug because there is no indication to the user to show which part of the title bar to click on when the user wants to drag the window. For some reason Firefox seems to be using the default height of the title bar that Windows sets instead of the area of the title bar the program itself draws. In other words the program is visually inconsistent, it behaves like a standard window with a standard height of title bar but is displayed with a larger than normal title bar.\n\nTo fix that you need to return HTCAPTION for the visible title bar - or else need to change the height of the visible title bar to match the HTCAPTION return value - it's buggy because HTCAPTION doesn't match the visible title bar.\n\nInteresting to hear what the reason is for not doing that. Maybe there is some other way of achieving the desired objective whatever it was, without having this confusing side effect."}, {"raw_text": "See/dig around on Bug 513162 and its Dependencies for Context around the whole Topic.", "creator": "xtc4uall@gmail.com", "tags": [], "creation_time": "2012-08-24T21:09:58Z", "attachment_id": null, "text": "See/dig around on Bug 513162 and its Dependencies for Context around the whole Topic.", "bug_id": 653015, "time": "2012-08-24T21:09:58Z", "author": "xtc4uall@gmail.com", "count": 7, "is_private": false, "id": 6582057}, {"id": 6582141, "author": "purchases@robertinventor.com", "is_private": false, "bug_id": 653015, "creation_time": "2012-08-24T21:35:56Z", "tags": [], "attachment_id": null, "time": "2012-08-24T21:35:56Z", "count": 8, "text": "Ok, thanks, just had a first look at it, can't see why it should be a problem, summary says\n\n\"That's exactly what we're relying on - WM_NCCALCSIZE for custom margin setting, WM_NCHITTEST for hit testing the various custom controls we will be drawing via personas, and WM_NCPAINT for rendering.\n\"\n\n- if that's what they are doing it should be okay I'd have thought, the thing is just to make sure that you return the right values for the WM_NCHITTEST so that it returns HTCAPTION  whenever the mouse isn't in any of the custom controls that you drew on top of the caption. Maybe that's where it gets tricky trying to work out where the boundaries of the buttons are? If that's not built into the architecture at an early stage of the design might be hard to enumerate over all the controls to make sure that none of them is on top of the area you want to tell Windows is part of the caption. You wouldn't want to return HTCAPTION if the mouse is clicking on a button.\n\nI haven't actually had to do any painting on top of the caption myself so not speaking from experience there, don't think I've had to draw on WM_NCPAINT  yet. But do handle the WM_NCHITTEST in my program.\n\nAnyway sorry it would obviously take a fair bit of time to figure out what is going on and what the issues are, and I haven't got the time to get involved really. Can see it is potentially tricky depending on how the rest of the code works, but if you can figure out where all the buttons are to return the right hit test value would have thought that's the hardest part, rest would be straightforward as Windows handles the rest the actual moving of the window.\n\nRobert", "raw_text": "Ok, thanks, just had a first look at it, can't see why it should be a problem, summary says\n\n\"That's exactly what we're relying on - WM_NCCALCSIZE for custom margin setting, WM_NCHITTEST for hit testing the various custom controls we will be drawing via personas, and WM_NCPAINT for rendering.\n\"\n\n- if that's what they are doing it should be okay I'd have thought, the thing is just to make sure that you return the right values for the WM_NCHITTEST so that it returns HTCAPTION  whenever the mouse isn't in any of the custom controls that you drew on top of the caption. Maybe that's where it gets tricky trying to work out where the boundaries of the buttons are? If that's not built into the architecture at an early stage of the design might be hard to enumerate over all the controls to make sure that none of them is on top of the area you want to tell Windows is part of the caption. You wouldn't want to return HTCAPTION if the mouse is clicking on a button.\n\nI haven't actually had to do any painting on top of the caption myself so not speaking from experience there, don't think I've had to draw on WM_NCPAINT  yet. But do handle the WM_NCHITTEST in my program.\n\nAnyway sorry it would obviously take a fair bit of time to figure out what is going on and what the issues are, and I haven't got the time to get involved really. Can see it is potentially tricky depending on how the rest of the code works, but if you can figure out where all the buttons are to return the right hit test value would have thought that's the hardest part, rest would be straightforward as Windows handles the rest the actual moving of the window.\n\nRobert", "creator": "purchases@robertinventor.com"}]}}}