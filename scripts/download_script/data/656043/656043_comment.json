{"bugs": {"656043": {"comments": [{"author": "jwalden@mit.edu", "text": "After bug 655192, js_InitClass is only relevant to JS_InitClass.  So it should be inlined into JS_InitClass, and the parts of it that are no longer necessary for standard-class initialization should be removed.\n\nThis builds on bug 655192, of course.", "creator": "jwalden@mit.edu", "attachment_id": null, "id": 5459881, "creation_time": "2011-05-10T16:52:13Z", "tags": [], "is_private": false, "time": "2011-05-10T16:52:13Z", "count": 0, "bug_id": 656043, "raw_text": "After bug 655192, js_InitClass is only relevant to JS_InitClass.  So it should be inlined into JS_InitClass, and the parts of it that are no longer necessary for standard-class initialization should be removed.\n\nThis builds on bug 655192, of course."}, {"count": 1, "raw_text": "", "bug_id": 656043, "is_private": false, "tags": [], "time": "2011-05-10T17:02:54Z", "creation_time": "2011-05-10T17:02:54Z", "author": "jwalden@mit.edu", "attachment_id": 531359, "id": 5459907, "text": "Created attachment 531359\nInline js_InitClass (and a couple functions called only by it) into JS_InitClass", "creator": "jwalden@mit.edu"}, {"creation_time": "2011-05-10T17:03:56Z", "author": "jwalden@mit.edu", "id": 5459913, "attachment_id": 531361, "creator": "jwalden@mit.edu", "text": "Created attachment 531361\nRemove unused JSCLASS_* code from JS_InitClass, also much of the code to handle cached prototypes", "count": 2, "raw_text": "", "bug_id": 656043, "is_private": false, "tags": [], "time": "2011-05-10T17:03:56Z"}, {"time": "2011-05-10T17:04:45Z", "is_private": false, "tags": [], "raw_text": "", "bug_id": 656043, "count": 3, "id": 5459915, "attachment_id": 531362, "creator": "jwalden@mit.edu", "text": "Created attachment 531362\nInline DefineStandardSlot into JS_InitClass, remove its code to handle cached prototypes", "author": "jwalden@mit.edu", "creation_time": "2011-05-10T17:04:45Z"}, {"tags": [], "is_private": false, "raw_text": "Review of attachment 531359:\n-----------------------------------------------------------------\n\nr=me with the one concern below addressed.\n\n::: js/src/jsapi.cpp\n@@ +2948,5 @@\n> +     * be &js_FunctionClass (we could break compatibility easily). But fixing\n> +     * (3) is not enough without addressing the bootstrapping dependency on (1)\n> +     * and (2).\n> +     */\n> +    JSObject *proto = NewNonFunction<WithProto::Given>(cx, clasp, protoProto, obj);\n\nChanging NewObject to NewNonFunction is fine, but changinge from WithProto::Class to\nWithProto::Given seems like it will change the behavior. The API docs don't say what's supposed to happen if the proto_proto argument is NULL; WithProto::Class means we look it up in the global, and not finding it (since we haven't defined it yet) we would default to Object.prototype ...right? With your new code, the new prototype actually has no prototype. I imagine that will break something somewhere.\n\nr=me if you decide to either\n  a) revert to WithProto::Class behavior, as in tm tip\n  b) keep the change to WithProto::Given, but right before that do something like\n         if (protoProto == NULL)\n             protoProto = obj->getGlobal()->getObjectPrototype();\n     and update the MDN doc to specify this behavior.\n\nA jsapi-test wouldn't hurt either!", "text": "Comment on attachment 531359\nInline js_InitClass (and a couple functions called only by it) into JS_InitClass\n\nReview of attachment 531359:\n-----------------------------------------------------------------\n\nr=me with the one concern below addressed.\n\n::: js/src/jsapi.cpp\n@@ +2948,5 @@\n> +     * be &js_FunctionClass (we could break compatibility easily). But fixing\n> +     * (3) is not enough without addressing the bootstrapping dependency on (1)\n> +     * and (2).\n> +     */\n> +    JSObject *proto = NewNonFunction<WithProto::Given>(cx, clasp, protoProto, obj);\n\nChanging NewObject to NewNonFunction is fine, but changinge from WithProto::Class to\nWithProto::Given seems like it will change the behavior. The API docs don't say what's supposed to happen if the proto_proto argument is NULL; WithProto::Class means we look it up in the global, and not finding it (since we haven't defined it yet) we would default to Object.prototype ...right? With your new code, the new prototype actually has no prototype. I imagine that will break something somewhere.\n\nr=me if you decide to either\n  a) revert to WithProto::Class behavior, as in tm tip\n  b) keep the change to WithProto::Given, but right before that do something like\n         if (protoProto == NULL)\n             protoProto = obj->getGlobal()->getObjectPrototype();\n     and update the MDN doc to specify this behavior.\n\nA jsapi-test wouldn't hurt either!", "id": 5569803, "attachment_id": 531359, "creation_time": "2011-07-01T17:00:09Z", "time": "2011-07-01T17:00:09Z", "bug_id": 656043, "count": 4, "creator": "jorendorff@mozilla.com", "author": "jorendorff@mozilla.com"}, {"creation_time": "2011-07-01T17:51:01Z", "author": "jorendorff@mozilla.com", "attachment_id": 531359, "id": 5569927, "creator": "jorendorff@mozilla.com", "text": "Comment on attachment 531359\nInline js_InitClass (and a couple functions called only by it) into JS_InitClass\n\nSwitching to r- just to avoid confusion.\n\nThis patch needs to follow additional work in bug 655192; it's not ripe yet.", "count": 5, "raw_text": "Switching to r- just to avoid confusion.\n\nThis patch needs to follow additional work in bug 655192; it's not ripe yet.", "bug_id": 656043, "is_private": false, "tags": [], "time": "2011-07-01T17:51:01Z"}, {"count": 6, "bug_id": 656043, "time": "2011-07-01T18:58:33Z", "author": "jorendorff@mozilla.com", "creator": "jorendorff@mozilla.com", "raw_text": "Clearing review flags for now, since this stuff isn't ripe yet.", "is_private": false, "tags": [], "creation_time": "2011-07-01T18:58:33Z", "id": 5570073, "attachment_id": 531361, "text": "Comment on attachment 531361\nRemove unused JSCLASS_* code from JS_InitClass, also much of the code to handle cached prototypes\n\nClearing review flags for now, since this stuff isn't ripe yet."}]}}, "comments": {}}