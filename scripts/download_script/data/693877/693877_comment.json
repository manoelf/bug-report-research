{"bugs": {"693877": {"comments": [{"author": "bill.mccloskey@gmail.com", "creator": "bill.mccloskey@gmail.com", "creation_time": "2011-10-12T00:32:35Z", "time": "2011-10-12T00:32:35Z", "is_private": false, "count": 0, "id": 5776360, "bug_id": 693877, "text": "After Andrew found bug 693527, it got me thinking that debugger objects might also be involved in leaks. The marking logic for them is quite complex. To me, it looks like it might be possible.\n\nAs an example, maybe a DOM object could point to a Debugger object. Then the debugger object could have a breakpoint, and the handler for the breakpoint could point back to the DOM object. The GC will not collect this cycle because it pretty much treats the pointers from DOM as roots. The cycle collector will not collect this cycle because it doesn't know about the any of the weak edges caused by the debugger and the breakpoint.\n\nAndrew and I worked out a way that we might be able to inform the cycle collector of these edges, but it would be a fair amount of work. Jason and Jim, does this seem like something that could happen? And if it could, how worried should we be?", "tags": [], "raw_text": "After Andrew found bug 693527, it got me thinking that debugger objects might also be involved in leaks. The marking logic for them is quite complex. To me, it looks like it might be possible.\n\nAs an example, maybe a DOM object could point to a Debugger object. Then the debugger object could have a breakpoint, and the handler for the breakpoint could point back to the DOM object. The GC will not collect this cycle because it pretty much treats the pointers from DOM as roots. The cycle collector will not collect this cycle because it doesn't know about the any of the weak edges caused by the debugger and the breakpoint.\n\nAndrew and I worked out a way that we might be able to inform the cycle collector of these edges, but it would be a fair amount of work. Jason and Jim, does this seem like something that could happen? And if it could, how worried should we be?", "attachment_id": null}, {"raw_text": "Can the debugger use weak maps to make sure the cycles can be broken?", "attachment_id": null, "bug_id": 693877, "text": "Can the debugger use weak maps to make sure the cycles can be broken?", "tags": [], "is_private": false, "id": 5776804, "count": 1, "author": "gal@uci.edu", "creator": "gal@uci.edu", "time": "2011-10-12T06:51:23Z", "creation_time": "2011-10-12T06:51:23Z"}, {"tags": [], "bug_id": 693877, "text": "Debugger objects seem to have weird lifetimes with side conditions like \"keep this object alive if we're currently executing its associated breakpoint\", so I'm not sure weak maps can be directly used.  The debugger is already using weak maps in some places, so I assume these non-weakmaps are there for a reason. ;)", "attachment_id": null, "raw_text": "Debugger objects seem to have weird lifetimes with side conditions like \"keep this object alive if we're currently executing its associated breakpoint\", so I'm not sure weak maps can be directly used.  The debugger is already using weak maps in some places, so I assume these non-weakmaps are there for a reason. ;)", "time": "2011-10-12T16:28:46Z", "creation_time": "2011-10-12T16:28:46Z", "creator": "continuation@gmail.com", "author": "continuation@gmail.com", "count": 2, "id": 5777698, "is_private": false}, {"raw_text": "Here's another scenario that's fairly realistic and clearly leaks.\n\nChrome script creates a Debugger object, obtains a Debug.Object referring to a content DOM object with an event handler, and sets a breakpoint in the event handler script. The breakpoint handler has a reference to the Debug.Object.\n\nNow we have:\n\n  DOM object -> event handler -> script -> breakpoint -> breakpoint handler\n  -> Debug.Object -> DOM object\n\nThe edge \"script -> breakpoint\" is drawn by Debugger::markAllIteratively. :-P\n\nJust chatted with billm and we have about a third of a hand-wavy plan to replace that edge with a WeakMap. It could work maybe.", "attachment_id": null, "tags": [], "text": "Here's another scenario that's fairly realistic and clearly leaks.\n\nChrome script creates a Debugger object, obtains a Debug.Object referring to a content DOM object with an event handler, and sets a breakpoint in the event handler script. The breakpoint handler has a reference to the Debug.Object.\n\nNow we have:\n\n  DOM object -> event handler -> script -> breakpoint -> breakpoint handler\n  -> Debug.Object -> DOM object\n\nThe edge \"script -> breakpoint\" is drawn by Debugger::markAllIteratively. :-P\n\nJust chatted with billm and we have about a third of a hand-wavy plan to replace that edge with a WeakMap. It could work maybe.", "bug_id": 693877, "count": 3, "id": 5784007, "is_private": false, "author": "jorendorff@mozilla.com", "creation_time": "2011-10-14T23:29:02Z", "time": "2011-10-14T23:29:02Z", "creator": "jorendorff@mozilla.com"}, {"author": "bill.mccloskey@gmail.com", "creator": "bill.mccloskey@gmail.com", "time": "2011-10-14T23:34:28Z", "creation_time": "2011-10-14T23:34:28Z", "is_private": false, "count": 4, "id": 5784017, "tags": [], "text": "To elaborate on what Jason said, we're thinking of simplifying Debugger::hasAnyLiveHooks so that it just returns enabled.", "bug_id": 693877, "raw_text": "To elaborate on what Jason said, we're thinking of simplifying Debugger::hasAnyLiveHooks so that it just returns enabled.", "attachment_id": null}, {"author": "jimb@mozilla.com", "creation_time": "2011-10-24T21:17:12Z", "time": "2011-10-24T21:17:12Z", "creator": "jimb@mozilla.com", "id": 5801505, "count": 5, "is_private": false, "bug_id": 693877, "text": "It seems to me like hooks of an enabled debugger should be handled as strong references from the debuggees (for onNewScript, onThrow, etc.) or frames (for onPop) or Objects (for watchpoints).\n\nThe issue here is that these edges are conditional on the debugger's 'enabled' flag. It might not be bad for clearing 'enabled' to actually go out and delete a bunch of incoming edges, and setting 'enabled' to go and stick 'em back in. It seems like that might simplify a lot of stuff (other than the 'enabled' getter and setter).\n\nBut if that works, then I think everything could become either an ordinary edge or a WeakMap instance.", "tags": [], "raw_text": "It seems to me like hooks of an enabled debugger should be handled as strong references from the debuggees (for onNewScript, onThrow, etc.) or frames (for onPop) or Objects (for watchpoints).\n\nThe issue here is that these edges are conditional on the debugger's 'enabled' flag. It might not be bad for clearing 'enabled' to actually go out and delete a bunch of incoming edges, and setting 'enabled' to go and stick 'em back in. It seems like that might simplify a lot of stuff (other than the 'enabled' getter and setter).\n\nBut if that works, then I think everything could become either an ordinary edge or a WeakMap instance.", "attachment_id": null}]}}, "comments": {}}