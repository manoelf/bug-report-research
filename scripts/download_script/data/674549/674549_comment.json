{"bugs": {"674549": {"comments": [{"count": 0, "bug_id": 674549, "is_private": false, "creator": "justin.lebar+bug@gmail.com", "text": "One problem we discovered with bug 666352's yielding during image decode after 5ms is that we repaint images this quickly.  This end up being much more expensive than the decode itself.\n\nWe should try to use bug 666446's refresh notifications to repaint at the right rate.", "time": "2011-07-27T15:43:54Z", "tags": [], "creation_time": "2011-07-27T15:43:54Z", "author": "justin.lebar+bug@gmail.com", "raw_text": "One problem we discovered with bug 666352's yielding during image decode after 5ms is that we repaint images this quickly.  This end up being much more expensive than the decode itself.\n\nWe should try to use bug 666446's refresh notifications to repaint at the right rate.", "attachment_id": null, "id": 5616734}, {"text": "jesup pointed out on IRC that it would probably be helpful to understand exactly why flushing invalidations more often is more expensive than flushing less often.  This might yield a smarter solution than simply decreasing the frequency with which we draw.", "tags": [], "bug_id": 674549, "time": "2011-08-02T16:51:09Z", "creation_time": "2011-08-02T16:51:09Z", "author": "justin.lebar+bug@gmail.com", "count": 1, "is_private": false, "creator": "justin.lebar+bug@gmail.com", "id": 5627989, "raw_text": "jesup pointed out on IRC that it would probably be helpful to understand exactly why flushing invalidations more often is more expensive than flushing less often.  This might yield a smarter solution than simply decreasing the frequency with which we draw.", "attachment_id": null}, {"raw_text": "Large images are the likely place where this is a win:\n\nThe test is \"<jlebar> jesup, The testcase is: Load a page with many large JPEGs in a new tab. Discard the images, then switch to the tab.\"\n\nFor large images, time to decode is >> 50ms.  So jlebar's test of drawing every 5ms versus drawing every 50ms means 10x less trips through the Draw code path.\n\nNote that the anim refresh timer is normally ~16ms, so the difference would be much smaller (but may still be significant).  We could also have it draw every N anim refresh times instead of every one - note that the longer between draws once you're over the screen refresh rate (normally 60Hz, sometimes 75-85Hz or more), the more \"jerky\" it will appear.  Lines will appear in groups.\n\nThe final draw on decode done should be done immediately, and not wait for the timer.\n\nNote also that decoding one image at a time instead of all images simultaneously will greatly reduce the number of partial-image draws that occur.  This was the one-worker versus n-workers discussion from bug 666352 (I believe).\n\nIt would be interesting to do a differential jprof between two draw rates, but I think the above analysis is a very likely explanation, so it's probably not needed.", "attachment_id": null, "id": 5628152, "count": 2, "creator": "rjesup@jesup.org", "is_private": false, "time": "2011-08-02T17:42:36Z", "bug_id": 674549, "tags": [], "text": "Large images are the likely place where this is a win:\n\nThe test is \"<jlebar> jesup, The testcase is: Load a page with many large JPEGs in a new tab. Discard the images, then switch to the tab.\"\n\nFor large images, time to decode is >> 50ms.  So jlebar's test of drawing every 5ms versus drawing every 50ms means 10x less trips through the Draw code path.\n\nNote that the anim refresh timer is normally ~16ms, so the difference would be much smaller (but may still be significant).  We could also have it draw every N anim refresh times instead of every one - note that the longer between draws once you're over the screen refresh rate (normally 60Hz, sometimes 75-85Hz or more), the more \"jerky\" it will appear.  Lines will appear in groups.\n\nThe final draw on decode done should be done immediately, and not wait for the timer.\n\nNote also that decoding one image at a time instead of all images simultaneously will greatly reduce the number of partial-image draws that occur.  This was the one-worker versus n-workers discussion from bug 666352 (I believe).\n\nIt would be interesting to do a differential jprof between two draw rates, but I think the above analysis is a very likely explanation, so it's probably not needed.", "author": "rjesup@jesup.org", "creation_time": "2011-08-02T17:42:36Z"}, {"tags": [], "time": "2011-08-02T17:53:16Z", "bug_id": 674549, "text": "(In reply to comment #1)\n> jesup pointed out on IRC that it would probably be helpful to understand\n> exactly why flushing invalidations more often is more expensive than\n> flushing less often.\n\nThe problem is that currently an invalidation will always result in a paint by the next trip through the event loop, no matter how long ago the last paint was.\nInstead, what should happen is that we limit the repaint rate to 60 FPS and let invalidations accumulate during the time in between. That's the goal of bug 598482.\nIn fact, bug 598482 should make any work in this bug unnecessary. Unfortunately there's quite a bit of work left until bug 598482 is in a landable state.", "author": "mstange.moz@gmail.com", "creation_time": "2011-08-02T17:53:16Z", "count": 3, "creator": "mstange.moz@gmail.com", "is_private": false, "id": 5628186, "raw_text": "(In reply to comment #1)\n> jesup pointed out on IRC that it would probably be helpful to understand\n> exactly why flushing invalidations more often is more expensive than\n> flushing less often.\n\nThe problem is that currently an invalidation will always result in a paint by the next trip through the event loop, no matter how long ago the last paint was.\nInstead, what should happen is that we limit the repaint rate to 60 FPS and let invalidations accumulate during the time in between. That's the goal of bug 598482.\nIn fact, bug 598482 should make any work in this bug unnecessary. Unfortunately there's quite a bit of work left until bug 598482 is in a landable state.", "attachment_id": null}, {"is_private": false, "creator": "rjesup@jesup.org", "count": 4, "creation_time": "2011-08-02T19:22:32Z", "author": "rjesup@jesup.org", "text": "I should note (again) that 60Hz isn't always the best choice, and that on a non-60Hz monitor will cause some slightly odd/annoying behavior, especially when scrolling or animating.\n\nBest would be to match it to the refresh rate, if we can - that will minimize the oddities, though not necessarily produce the lowest-latency display (since it wouldn't be synced to the monitor refresh).", "bug_id": 674549, "tags": [], "time": "2011-08-02T19:22:32Z", "attachment_id": null, "raw_text": "I should note (again) that 60Hz isn't always the best choice, and that on a non-60Hz monitor will cause some slightly odd/annoying behavior, especially when scrolling or animating.\n\nBest would be to match it to the refresh rate, if we can - that will minimize the oddities, though not necessarily produce the lowest-latency display (since it wouldn't be synced to the monitor refresh).", "id": 5628470}, {"id": 5995780, "raw_text": "This will very likely help with bug 698298.", "attachment_id": null, "time": "2012-01-20T18:08:35Z", "tags": [], "text": "This will very likely help with bug 698298.", "author": "joe@drew.ca", "creation_time": "2012-01-20T18:08:35Z", "creator": "joe@drew.ca", "is_private": false, "bug_id": 674549, "count": 5}, {"bug_id": 674549, "count": 6, "id": 5995812, "attachment_id": null, "raw_text": "Note that when decoding previously-discarded images, we only flush invalidations when we're completely done decoding the image.  So this only affects the initial, progressive display of an image while we download it.", "author": "justin.lebar+bug@gmail.com", "creation_time": "2012-01-20T18:15:42Z", "time": "2012-01-20T18:15:42Z", "tags": [], "text": "Note that when decoding previously-discarded images, we only flush invalidations when we're completely done decoding the image.  So this only affects the initial, progressive display of an image while we download it.", "creator": "justin.lebar+bug@gmail.com", "is_private": false}]}}, "comments": {}}