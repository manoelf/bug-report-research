{"comments": {}, "bugs": {"688176": {"comments": [{"attachment_id": null, "raw_text": "I just tried to use Object.getOwnPropertyNames(this); to find out about the additional objects that exist in xpcshell for the fuzzer. I got this on xpcshell:\n\njs> Object.getOwnPropertyNames(this);\nObject,Function,eval,Components,XPCNativeWrapper,Reflect,print,readline,load,quit,version,build,dumpXPC,dump,gc,gczeal,clear,options,parent,dumpHeap,sendCommand,getChildGlobalObject,environment,__LOCATION__,Array,arguments\n\n\nIn the normal JS shell I get this instead:\n\n[\"Function\", \"Object\", \"eval\", \"Reflect\", \"Debugger\", \"PerfMeasurement\", \"version\", \"revertVersion\", \"options\", \"load\", \"evaluate\", \"run\", \"readline\", \"print\", \"putstr\", \"dateNow\", \"help\", \"quit\", \"assertEq\", \"assertJit\", \"gc\", \"gcparam\", \"countHeap\", \"makeFinalizeObserver\", \"finalizeCount\", \"gczeal\", \"schedulegc\", \"internalConst\", \"setDebug\", \"setDebuggerHandler\", \"setThrowHook\", \"trap\", \"untrap\", \"line2pc\", \"pc2line\", \"stringsAreUTF8\", \"testUTF8\", \"throwError\", \"disassemble\", \"dis\", \"disfile\", \"dissrc\", \"dumpHeap\", \"dumpObject\", \"notes\", \"stats\", \"findReferences\", \"dumpStack\", \"build\", \"clear\", \"intern\", \"clone\", \"getpda\", \"getslx\", \"toint32\", \"evalcx\", \"evalInFrame\", \"shapeOf\", \"resolver\", \"arrayInfo\", \"snarf\", \"read\", \"compile\", \"parse\", \"timeout\", \"elapsed\", \"parent\", \"wrap\", \"serialize\", \"deserialize\", \"mjitcodestats\", \"mjitdatastats\", \"stringstats\", \"newGlobal\", \"parseLegacyJSON\", \"enableStackWalkingAssertion\", \"getMaxArgs\", \"it\", \"custom\", \"customRdOnly\", \"environment\", \"Array\", \"arguments\", \"undefined\", \"Boolean\", \"Date\", \"Math\", \"Number\", \"isNaN\", \"isFinite\", \"parseFloat\", \"parseInt\", \"NaN\", \"Infinity\", \"String\", \"escape\", \"unescape\", \"uneval\", \"decodeURI\", \"encodeURI\", \"decodeURIComponent\", \"encodeURIComponent\", \"Error\", \"InternalError\", \"EvalError\", \"RangeError\", \"ReferenceError\", \"SyntaxError\", \"TypeError\", \"URIError\", \"RegExp\", \"XMLList\", \"XML\", \"isXMLName\", \"Namespace\", \"QName\", \"Iterator\", \"StopIteration\", \"JSON\", \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\", \"Uint32Array\", \"Float32Array\", \"Float64Array\", \"Uint8ClampedArray\", \"ArrayBuffer\", \"WeakMap\"]\n\n\n\nI would appreciate it if we could add all the objects into the xpcshell list as well, so I know which objects live there. If there is another static list of additional components/natives living there, let me know.", "time": "2011-09-21T16:21:27Z", "tags": [], "author": "choller@mozilla.com", "count": 0, "text": "I just tried to use Object.getOwnPropertyNames(this); to find out about the additional objects that exist in xpcshell for the fuzzer. I got this on xpcshell:\n\njs> Object.getOwnPropertyNames(this);\nObject,Function,eval,Components,XPCNativeWrapper,Reflect,print,readline,load,quit,version,build,dumpXPC,dump,gc,gczeal,clear,options,parent,dumpHeap,sendCommand,getChildGlobalObject,environment,__LOCATION__,Array,arguments\n\n\nIn the normal JS shell I get this instead:\n\n[\"Function\", \"Object\", \"eval\", \"Reflect\", \"Debugger\", \"PerfMeasurement\", \"version\", \"revertVersion\", \"options\", \"load\", \"evaluate\", \"run\", \"readline\", \"print\", \"putstr\", \"dateNow\", \"help\", \"quit\", \"assertEq\", \"assertJit\", \"gc\", \"gcparam\", \"countHeap\", \"makeFinalizeObserver\", \"finalizeCount\", \"gczeal\", \"schedulegc\", \"internalConst\", \"setDebug\", \"setDebuggerHandler\", \"setThrowHook\", \"trap\", \"untrap\", \"line2pc\", \"pc2line\", \"stringsAreUTF8\", \"testUTF8\", \"throwError\", \"disassemble\", \"dis\", \"disfile\", \"dissrc\", \"dumpHeap\", \"dumpObject\", \"notes\", \"stats\", \"findReferences\", \"dumpStack\", \"build\", \"clear\", \"intern\", \"clone\", \"getpda\", \"getslx\", \"toint32\", \"evalcx\", \"evalInFrame\", \"shapeOf\", \"resolver\", \"arrayInfo\", \"snarf\", \"read\", \"compile\", \"parse\", \"timeout\", \"elapsed\", \"parent\", \"wrap\", \"serialize\", \"deserialize\", \"mjitcodestats\", \"mjitdatastats\", \"stringstats\", \"newGlobal\", \"parseLegacyJSON\", \"enableStackWalkingAssertion\", \"getMaxArgs\", \"it\", \"custom\", \"customRdOnly\", \"environment\", \"Array\", \"arguments\", \"undefined\", \"Boolean\", \"Date\", \"Math\", \"Number\", \"isNaN\", \"isFinite\", \"parseFloat\", \"parseInt\", \"NaN\", \"Infinity\", \"String\", \"escape\", \"unescape\", \"uneval\", \"decodeURI\", \"encodeURI\", \"decodeURIComponent\", \"encodeURIComponent\", \"Error\", \"InternalError\", \"EvalError\", \"RangeError\", \"ReferenceError\", \"SyntaxError\", \"TypeError\", \"URIError\", \"RegExp\", \"XMLList\", \"XML\", \"isXMLName\", \"Namespace\", \"QName\", \"Iterator\", \"StopIteration\", \"JSON\", \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\", \"Uint32Array\", \"Float32Array\", \"Float64Array\", \"Uint8ClampedArray\", \"ArrayBuffer\", \"WeakMap\"]\n\n\n\nI would appreciate it if we could add all the objects into the xpcshell list as well, so I know which objects live there. If there is another static list of additional components/natives living there, let me know.", "creator": "choller@mozilla.com", "is_private": false, "creation_time": "2011-09-21T16:21:27Z", "id": 5728425, "bug_id": 688176}, {"creator": "bzbarsky@mit.edu", "is_private": false, "creation_time": "2011-09-21T17:54:52Z", "attachment_id": null, "tags": [], "count": 1, "text": "A bunch of the things you're seeing in JS shell there do not in fact exist in xpcshell, right?\n\nFor the rest, are we just seeing lazy standard class init or something?  Once I touch \"Uint32Array\" in xpcshell, for example, all the typed array classes appear on the global.", "author": "bzbarsky@mit.edu", "bug_id": 688176, "id": 5728710, "raw_text": "A bunch of the things you're seeing in JS shell there do not in fact exist in xpcshell, right?\n\nFor the rest, are we just seeing lazy standard class init or something?  Once I touch \"Uint32Array\" in xpcshell, for example, all the typed array classes appear on the global.", "time": "2011-09-21T17:54:52Z"}, {"creator": "jorendorff@mozilla.com", "creation_time": "2012-05-07T15:55:53Z", "is_private": false, "attachment_id": null, "tags": [], "text": "One of the differences is that the plain JS shell uses JS_ValueToSource to print the array, and xpcshell uses JS_ValueToString. It's a silly difference to have; I'd be thrilled to see some of the code duplication between js.cpp and xpcshell.cpp boiled away. I can't do it though.\n\n(In reply to Boris Zbarsky (:bz) from comment #1)\n> A bunch of the things you're seeing in JS shell there do not in fact exist\n> in xpcshell, right?\n\nRight.\n\n> For the rest, are we just seeing lazy standard class init or something? \n> Once I touch \"Uint32Array\" in xpcshell, for example, all the typed array\n> classes appear on the global.\n\nRight again. The reason it works correctly in the plain JS shell is that:\n\n  obj_getOwnPropertyNames\n    indirectly calls the global object's enumerate hook, global_enumerate\n      which calls JS_EnumerateStandardClasses\n        which defines all the desired properties.\n\nThe BackstagePass object that serves as xpcshell's global has a resolve hook but no enumerate hook. That's the bug. I'm not sure where to go to fix that though.", "count": 2, "author": "jorendorff@mozilla.com", "id": 6285762, "bug_id": 688176, "raw_text": "One of the differences is that the plain JS shell uses JS_ValueToSource to print the array, and xpcshell uses JS_ValueToString. It's a silly difference to have; I'd be thrilled to see some of the code duplication between js.cpp and xpcshell.cpp boiled away. I can't do it though.\n\n(In reply to Boris Zbarsky (:bz) from comment #1)\n> A bunch of the things you're seeing in JS shell there do not in fact exist\n> in xpcshell, right?\n\nRight.\n\n> For the rest, are we just seeing lazy standard class init or something? \n> Once I touch \"Uint32Array\" in xpcshell, for example, all the typed array\n> classes appear on the global.\n\nRight again. The reason it works correctly in the plain JS shell is that:\n\n  obj_getOwnPropertyNames\n    indirectly calls the global object's enumerate hook, global_enumerate\n      which calls JS_EnumerateStandardClasses\n        which defines all the desired properties.\n\nThe BackstagePass object that serves as xpcshell's global has a resolve hook but no enumerate hook. That's the bug. I'm not sure where to go to fix that though.", "time": "2012-05-07T15:55:53Z"}, {"raw_text": "Sorry-- this isn't \"enhancement\"; it's an actual bug. But not critical.", "time": "2012-05-07T15:56:43Z", "author": "jorendorff@mozilla.com", "text": "Sorry-- this isn't \"enhancement\"; it's an actual bug. But not critical.", "count": 3, "bug_id": 688176, "id": 6285765, "attachment_id": null, "tags": [], "creator": "jorendorff@mozilla.com", "is_private": false, "creation_time": "2012-05-07T15:56:43Z"}, {"is_private": false, "creation_time": "2012-05-07T16:48:47Z", "bug_id": 688176, "id": 6285940, "text": "Where to go in what sense?  We just need to add an enumerate hook to BackstagePass, right?", "count": 4, "author": "bzbarsky@mit.edu", "creator": "bzbarsky@mit.edu", "tags": [], "raw_text": "Where to go in what sense?  We just need to add an enumerate hook to BackstagePass, right?", "attachment_id": null, "time": "2012-05-07T16:48:47Z"}, {"id": 6286906, "bug_id": 688176, "is_private": false, "creation_time": "2012-05-07T20:19:09Z", "creator": "jorendorff@mozilla.com", "author": "jorendorff@mozilla.com", "count": 5, "text": "Yes. Looks like it'd go right next to BackstagePass::NewResolve, and you'd have to add WANT_ENUMERATE to the XPC_MAP_FLAGS. And write a test.", "tags": [], "time": "2012-05-07T20:19:09Z", "attachment_id": null, "raw_text": "Yes. Looks like it'd go right next to BackstagePass::NewResolve, and you'd have to add WANT_ENUMERATE to the XPC_MAP_FLAGS. And write a test."}]}}}