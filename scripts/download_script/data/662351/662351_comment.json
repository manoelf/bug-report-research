{"comments": {}, "bugs": {"662351": {"comments": [{"id": 5515792, "bug_id": 662351, "is_private": false, "creation_time": "2011-06-06T19:54:46Z", "creator": "jykng@shaw.ca", "text": "User-Agent:       Mozilla/5.0 (Windows NT 6.1; WOW64; rv:6.0a2) Gecko/20110606 Firefox/6.0a2\nBuild Identifier: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:6.0a2) Gecko/20110606 Firefox/6.0a2\n\nI know it's non-standard in the first place but with being able to style the progress bar of a progress element using ::-moz-progress-bar but I've determined that css transitions and animations won't work on it.\n\nIn an attempt to simulate a progress bar that's sort of like the windows 7 default system one, it would help if you could at least animate something like the background position.\n\nReproducible: Always", "count": 0, "author": "jykng@shaw.ca", "tags": [], "time": "2011-06-06T19:54:46Z", "raw_text": "User-Agent:       Mozilla/5.0 (Windows NT 6.1; WOW64; rv:6.0a2) Gecko/20110606 Firefox/6.0a2\nBuild Identifier: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:6.0a2) Gecko/20110606 Firefox/6.0a2\n\nI know it's non-standard in the first place but with being able to style the progress bar of a progress element using ::-moz-progress-bar but I've determined that css transitions and animations won't work on it.\n\nIn an attempt to simulate a progress bar that's sort of like the windows 7 default system one, it would help if you could at least animate something like the background position.\n\nReproducible: Always", "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "mounir@lamouri.fr", "creation_time": "2011-06-06T22:20:50Z", "is_private": false, "raw_text": "It is possible to animate progress but not the anonymous child. Are animations disabled for anonymous child on purpose or is that a bug?", "time": "2011-06-06T22:20:50Z", "text": "It is possible to animate progress but not the anonymous child. Are animations disabled for anonymous child on purpose or is that a bug?", "count": 1, "author": "mounir@lamouri.fr", "id": 5516215, "bug_id": 662351}, {"bug_id": 662351, "id": 5545413, "creation_time": "2011-06-21T14:56:02Z", "is_private": false, "creator": "bzbarsky@mit.edu", "author": "bzbarsky@mit.edu", "text": "*** Bug 665364 has been marked as a duplicate of this bug. ***", "count": 2, "tags": [], "time": "2011-06-21T14:56:02Z", "attachment_id": null, "raw_text": ""}, {"creation_time": "2011-06-21T15:19:11Z", "is_private": false, "id": 5545482, "bug_id": 662351, "author": "bzbarsky@mit.edu", "text": "Animations and transitions are tied to elements.\n\n::before and ::after pseudo-elements are explicitly special-cased to also work.\n\nYou could try adding such special-casing for ::-moz-progress-bar and seeing what happens....\n\nDavid, do you recall why we didn't just allow transitions on all pseudo-elements?  I guess there's the issue of figuring out which Element to actually hang the transitions off of, since this differs for different pseudo-elements...", "count": 3, "creator": "bzbarsky@mit.edu", "tags": [], "attachment_id": null, "raw_text": "Animations and transitions are tied to elements.\n\n::before and ::after pseudo-elements are explicitly special-cased to also work.\n\nYou could try adding such special-casing for ::-moz-progress-bar and seeing what happens....\n\nDavid, do you recall why we didn't just allow transitions on all pseudo-elements?  I guess there's the issue of figuring out which Element to actually hang the transitions off of, since this differs for different pseudo-elements...", "time": "2011-06-21T15:19:11Z"}, {"attachment_id": null, "raw_text": "I suppose we could store pseudo-element transition/animation data in a hash table in the element properties.\n\nThe motivation for storing the data on elements was preserving it across reframes; the pseudo-element anonymous content is not preserved across reframes (as far as I know, anyway), so it's all stored on the real element.", "time": "2011-06-21T15:27:18Z", "tags": [], "author": "dbaron@dbaron.org", "count": 4, "text": "I suppose we could store pseudo-element transition/animation data in a hash table in the element properties.\n\nThe motivation for storing the data on elements was preserving it across reframes; the pseudo-element anonymous content is not preserved across reframes (as far as I know, anyway), so it's all stored on the real element.", "creator": "dbaron@dbaron.org", "is_private": false, "creation_time": "2011-06-21T15:27:18Z", "id": 5545501, "bug_id": 662351}, {"tags": [], "time": "2011-06-21T17:11:38Z", "raw_text": "We could store it as we do now; just have a list of atoms that correspond to all the pseudo-element IDs.\n\n> The motivation for storing the data on elements was preserving it across\n> reframes\n\nThat's probably worth documenting in the code.", "attachment_id": null, "bug_id": 662351, "id": 5545832, "creation_time": "2011-06-21T17:11:38Z", "is_private": false, "creator": "bzbarsky@mit.edu", "text": "We could store it as we do now; just have a list of atoms that correspond to all the pseudo-element IDs.\n\n> The motivation for storing the data on elements was preserving it across\n> reframes\n\nThat's probably worth documenting in the code.", "count": 5, "author": "bzbarsky@mit.edu"}, {"creation_time": "2011-06-21T17:25:06Z", "is_private": false, "id": 5545884, "bug_id": 662351, "author": "dbaron@dbaron.org", "count": 6, "text": "(In reply to comment #5)\n> We could store it as we do now; just have a list of atoms that correspond to\n> all the pseudo-element IDs.\n\nThat leads to a lot of property lookup when removing nodes from the tree, though, to check for and destroy each property, and it means adding new code for each new pseudo-element (possibly via preprocessing hacks, but it's still new code).", "creator": "dbaron@dbaron.org", "tags": [], "attachment_id": null, "raw_text": "(In reply to comment #5)\n> We could store it as we do now; just have a list of atoms that correspond to\n> all the pseudo-element IDs.\n\nThat leads to a lot of property lookup when removing nodes from the tree, though, to check for and destroy each property, and it means adding new code for each new pseudo-element (possibly via preprocessing hacks, but it's still new code).", "time": "2011-06-21T17:25:06Z"}, {"raw_text": "Hmm.  That first is a good point.  The second would be automatic if we used nsCSSPseudoElementList right, as you note, but the first is something that would best to avoid.", "time": "2011-06-21T17:38:21Z", "bug_id": 662351, "id": 5545937, "author": "bzbarsky@mit.edu", "count": 7, "text": "Hmm.  That first is a good point.  The second would be automatic if we used nsCSSPseudoElementList right, as you note, but the first is something that would best to avoid.", "tags": [], "attachment_id": null, "creation_time": "2011-06-21T17:38:21Z", "is_private": false, "creator": "bzbarsky@mit.edu"}, {"author": "bzbarsky@mit.edu", "count": 8, "text": "Created attachment 560227\nMake sure to skip animation rules as well as transition rules when we're reparenting a style context when not processing an animation restyle.", "creator": "bzbarsky@mit.edu", "is_private": false, "creation_time": "2011-09-14T19:45:05Z", "bug_id": 662351, "id": 5717473, "attachment_id": 560227, "raw_text": "", "time": "2011-09-14T19:45:05Z", "tags": []}, {"attachment_id": 560231, "tags": [], "creator": "bzbarsky@mit.edu", "is_private": false, "creation_time": "2011-09-14T19:49:54Z", "raw_text": "", "time": "2011-09-14T19:49:54Z", "text": "Created attachment 560231\nMake sure to skip animation rules as well as transition rules when we're reparenting a style context when not processing an animation restyle.", "count": 9, "author": "bzbarsky@mit.edu", "bug_id": 662351, "id": 5717484}, {"author": "mounir@lamouri.fr", "count": 10, "text": "*** Bug 812442 has been marked as a duplicate of this bug. ***", "bug_id": 662351, "id": 6828479, "time": "2012-11-16T11:16:56Z", "raw_text": "", "creator": "mounir@lamouri.fr", "creation_time": "2012-11-16T11:16:56Z", "is_private": false, "attachment_id": null, "tags": []}]}}}