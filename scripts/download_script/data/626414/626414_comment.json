{"bugs": {"626414": {"comments": [{"text": "As described in bug 394919 comment 55, the fix to bug 394919 can fail if the application runs out of memory during the call to CERT_GetCommonName from CERT_GetConstrainedCertificateNames, so that CERT_GetCommonName returns NULL and the name constraints are not checked.\n\nThis is based on code inspection.  I have not attempted to reproduce the bug in a real process.", "is_private": false, "bug_id": 626414, "id": 5205079, "count": 0, "raw_text": "As described in bug 394919 comment 55, the fix to bug 394919 can fail if the application runs out of memory during the call to CERT_GetCommonName from CERT_GetConstrainedCertificateNames, so that CERT_GetCommonName returns NULL and the name constraints are not checked.\n\nThis is based on code inspection.  I have not attempted to reproduce the bug in a real process.", "time": "2011-01-17T15:36:12Z", "author": "matt@mattmccutchen.net", "creator": "matt@mattmccutchen.net", "attachment_id": null, "creation_time": "2011-01-17T15:36:12Z", "tags": []}, {"time": "2016-06-07T05:46:41Z", "author": "franziskuskiefer@gmail.com", "attachment_id": 8760587, "creator": "franziskuskiefer@gmail.com", "tags": [], "creation_time": "2016-06-07T05:46:41Z", "bug_id": 626414, "is_private": false, "text": "Created attachment 8760587\nfix-constrained-cert-names.patch\n\nI don't think we ever ran into this, but it seems worth being safe here and always return NULL from CERT_GetConstrainedCertificateNames if something goes wrong.", "raw_text": "I don't think we ever ran into this, but it seems worth being safe here and always return NULL from CERT_GetConstrainedCertificateNames if something goes wrong.", "count": 1, "id": 11468161}, {"id": 11469776, "count": 2, "raw_text": "Review of attachment 8760587:\n-----------------------------------------------------------------\n\nFWIW, this patch does not appear to fix the specific case I identified in comment #0, where CERT_GetCommonName runs out of memory and returns NULL and the certificate passes name constraint verification even if it contains a subject common name usable for SSL that violates the name constraint.  We'd somehow need to distinguish \"out of memory\" from \"certificate contains no subject common name\".", "text": "Comment on attachment 8760587\nfix-constrained-cert-names.patch\n\nReview of attachment 8760587:\n-----------------------------------------------------------------\n\nFWIW, this patch does not appear to fix the specific case I identified in comment #0, where CERT_GetCommonName runs out of memory and returns NULL and the certificate passes name constraint verification even if it contains a subject common name usable for SSL that violates the name constraint.  We'd somehow need to distinguish \"out of memory\" from \"certificate contains no subject common name\".", "bug_id": 626414, "is_private": false, "creator": "matt@mattmccutchen.net", "author": "matt@mattmccutchen.net", "attachment_id": 8760587, "time": "2016-06-07T16:25:09Z", "tags": [], "creation_time": "2016-06-07T16:25:09Z"}, {"time": "2016-06-08T00:57:31Z", "author": "mt@lowentropy.net", "attachment_id": 8760587, "creator": "mt@lowentropy.net", "bug_id": 626414, "raw_text": "Review of attachment 8760587:\n-----------------------------------------------------------------\n\nI can't tell from context if you have addressed Matt's concerns, but you should try to do that.  The mark and free on the arena seems like a fine improvement, but I'd like to understand why this helps.\n\n::: lib/certdb/certdb.c\n@@ +1771,1 @@\n>      return rv;\n\nI've recently concluded that \"return rv\" is a sign that we have a problem.  Why not change the block so that you return SECFailure at the point that the failure occurs (way up there in the context I can't see)?\n\n::: lib/certdb/genname.c\n@@ +1142,5 @@\n>                  rv = SECITEM_CopyItem(arena, &CN->name.other, &cnItem);\n>                  if (rv == SECSuccess) {\n>                      DN = cert_CombineNamesLists(DN, CN);\n> +                } else {\n> +                    PORT_Free(cn);\n\nThis is horrible code.  A better pattern is:\n\nCERTGeneralName *CN = NULL;\n...\nCN = CERT_NewGeneralName(arena, certDNSName);\nif (!CN) { goto loser; }\n...\nrv = SECITEM_CopyItem(arena, &CN->name.other, &cnItem);\nif (rv != SECSuccess) { goto loser; }\n...\n\nreturn SECSuccess;\nloser:\nif (CN) PORT_Free(cn);\nPORT_ArenaRelease(arena, mark);\nreturn NULL;", "tags": [], "creation_time": "2016-06-08T00:57:31Z", "is_private": false, "text": "Comment on attachment 8760587\nfix-constrained-cert-names.patch\n\nReview of attachment 8760587:\n-----------------------------------------------------------------\n\nI can't tell from context if you have addressed Matt's concerns, but you should try to do that.  The mark and free on the arena seems like a fine improvement, but I'd like to understand why this helps.\n\n::: lib/certdb/certdb.c\n@@ +1771,1 @@\n>      return rv;\n\nI've recently concluded that \"return rv\" is a sign that we have a problem.  Why not change the block so that you return SECFailure at the point that the failure occurs (way up there in the context I can't see)?\n\n::: lib/certdb/genname.c\n@@ +1142,5 @@\n>                  rv = SECITEM_CopyItem(arena, &CN->name.other, &cnItem);\n>                  if (rv == SECSuccess) {\n>                      DN = cert_CombineNamesLists(DN, CN);\n> +                } else {\n> +                    PORT_Free(cn);\n\nThis is horrible code.  A better pattern is:\n\nCERTGeneralName *CN = NULL;\n...\nCN = CERT_NewGeneralName(arena, certDNSName);\nif (!CN) { goto loser; }\n...\nrv = SECITEM_CopyItem(arena, &CN->name.other, &cnItem);\nif (rv != SECSuccess) { goto loser; }\n...\n\nreturn SECSuccess;\nloser:\nif (CN) PORT_Free(cn);\nPORT_ArenaRelease(arena, mark);\nreturn NULL;", "id": 11471163, "count": 3}]}}, "comments": {}}