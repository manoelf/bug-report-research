{"comments": {}, "bugs": {"652000": {"comments": [{"text": "JSNatives have no JSStackFrame. The debugger (and Error.stack for that matter) should show them, so we need a way to recover that information.\n\nThere are quite a few cases, but consider the basic case where a script actually explicitly, directly calls a native Function via JSOP_CALL.\n\nThe callee, this-value, and arguments are all on the stack at the moment the JSNative is first called. But the JSNative may then overwrite all those slots. Overwriting the callee slot--the one the debugger cares about the most--is in fact mandatory, since that's the return slot.\n\nIt seems like either\n\n  * we change the JSNative contract to ban writing to vp[0] until\n    after the native is done calling back into the engine; OR\n\n  * we accept overhead, a write instruction to store the native callee\n    redundantly somewhere else on the stack; OR\n\n  * we accept that the stack can be wrong.", "bug_id": 652000, "raw_text": "JSNatives have no JSStackFrame. The debugger (and Error.stack for that matter) should show them, so we need a way to recover that information.\n\nThere are quite a few cases, but consider the basic case where a script actually explicitly, directly calls a native Function via JSOP_CALL.\n\nThe callee, this-value, and arguments are all on the stack at the moment the JSNative is first called. But the JSNative may then overwrite all those slots. Overwriting the callee slot--the one the debugger cares about the most--is in fact mandatory, since that's the return slot.\n\nIt seems like either\n\n  * we change the JSNative contract to ban writing to vp[0] until\n    after the native is done calling back into the engine; OR\n\n  * we accept overhead, a write instruction to store the native callee\n    redundantly somewhere else on the stack; OR\n\n  * we accept that the stack can be wrong.", "creator": "jorendorff@mozilla.com", "tags": [], "creation_time": "2011-04-21T22:46:22Z", "attachment_id": null, "id": 5425224, "author": "jorendorff@mozilla.com", "time": "2011-04-21T22:46:22Z", "count": 0, "is_private": false}, {"id": 5425429, "author": "mail@lukewagner.name", "is_private": false, "bug_id": 652000, "tags": [], "creation_time": "2011-04-22T00:00:11Z", "attachment_id": null, "time": "2011-04-22T00:00:11Z", "count": 1, "text": "This question has come up several times in the last year of stack refactoring.  There have been several cases where \"oh, but what if we were called by a native\" has been a confounding case for our analysis.  For example, when constructor natives lost their stack frames, we got lucky that XPCCallContexts essentially remembers the native callee which allowed us to hack up nsXPConnect::GetCaller to make nsContentUtils::GetDocumentFromCaller work again.\n\nOption 2 seems simplest (well, after Option 1).  However, when Waldo tried to solve a similar problem in bug 631135 with a technique that didn't even add any overhead to natives-called-from-jit or property-access-from-jit, still Dromaeo regressed.  So that makes me think we'd really feel it.\n\nAs for Option 1: I dislike vp[0] clobbering and I have had bugs where I rearranged some lines of code but failed to notice that I was reading a callee after an early rval-setting.  I have tried to remove uses of this in SM as I see them (most obviated by stack scanning).  In fact, CallArgs now asserts CallArgs::rval() doesn't precede CallArgs::callee().  So it would be cool to officially ban this.\n\nThe only technicality is that pushInvokeArgs/pushInvokeFrame can pile up multiple native calls on top of a single StackFrame so, to really catch 'em all, we'd need more than just regs.sp/pc snooping; StackSpace would have to do a bit of extra record-keeping, but this shouldn't be too hard or expensive.", "raw_text": "This question has come up several times in the last year of stack refactoring.  There have been several cases where \"oh, but what if we were called by a native\" has been a confounding case for our analysis.  For example, when constructor natives lost their stack frames, we got lucky that XPCCallContexts essentially remembers the native callee which allowed us to hack up nsXPConnect::GetCaller to make nsContentUtils::GetDocumentFromCaller work again.\n\nOption 2 seems simplest (well, after Option 1).  However, when Waldo tried to solve a similar problem in bug 631135 with a technique that didn't even add any overhead to natives-called-from-jit or property-access-from-jit, still Dromaeo regressed.  So that makes me think we'd really feel it.\n\nAs for Option 1: I dislike vp[0] clobbering and I have had bugs where I rearranged some lines of code but failed to notice that I was reading a callee after an early rval-setting.  I have tried to remove uses of this in SM as I see them (most obviated by stack scanning).  In fact, CallArgs now asserts CallArgs::rval() doesn't precede CallArgs::callee().  So it would be cool to officially ban this.\n\nThe only technicality is that pushInvokeArgs/pushInvokeFrame can pile up multiple native calls on top of a single StackFrame so, to really catch 'em all, we'd need more than just regs.sp/pc snooping; StackSpace would have to do a bit of extra record-keeping, but this shouldn't be too hard or expensive.", "creator": "mail@lukewagner.name"}, {"attachment_id": null, "creation_time": "2011-04-22T13:21:46Z", "tags": [], "bug_id": 652000, "author": "jorendorff@mozilla.com", "is_private": false, "id": 5426136, "creator": "jorendorff@mozilla.com", "raw_text": "(In reply to comment #1)\n\nThanks for the thorough response.\n\n> Option 2 seems simplest (well, after Option 1).\n\nHey, option 3 is simplest of all! ;)\n\n> The only technicality is that pushInvokeArgs/pushInvokeFrame can pile up\n> multiple native calls on top of a single StackFrame so, to really catch 'em\n> all, we'd need more than just regs.sp/pc snooping; StackSpace would have to do\n> a bit of extra record-keeping, but this shouldn't be too hard or expensive.\n\nI was hoping you'd say this! I had come to the same conclusion. Script-to-native calls are surely the hottest case. They're almost all leaf calls.\n\nSounds like we should shoot for option 1. I'll look into it.", "text": "(In reply to comment #1)\n\nThanks for the thorough response.\n\n> Option 2 seems simplest (well, after Option 1).\n\nHey, option 3 is simplest of all! ;)\n\n> The only technicality is that pushInvokeArgs/pushInvokeFrame can pile up\n> multiple native calls on top of a single StackFrame so, to really catch 'em\n> all, we'd need more than just regs.sp/pc snooping; StackSpace would have to do\n> a bit of extra record-keeping, but this shouldn't be too hard or expensive.\n\nI was hoping you'd say this! I had come to the same conclusion. Script-to-native calls are surely the hottest case. They're almost all leaf calls.\n\nSounds like we should shoot for option 1. I'll look into it.", "count": 2, "time": "2011-04-22T13:21:46Z"}, {"count": 3, "time": "2011-04-22T17:01:07Z", "text": "(In reply to comment #2)\n> > Option 2 seems simplest (well, after Option 1).\n> \n> Hey, option 3 is simplest of all! ;)\n\nOops, joke fail, I meant to say option 3...\n\n> Sounds like we should shoot for option 1. I'll look into it.\n\nSweet, three birds, one bug!  If you handle the vp[0] clobbering (which is what I hope you mean by \"I'll look into it\" :), I'll write CalleeIter.", "creator": "mail@lukewagner.name", "raw_text": "(In reply to comment #2)\n> > Option 2 seems simplest (well, after Option 1).\n> \n> Hey, option 3 is simplest of all! ;)\n\nOops, joke fail, I meant to say option 3...\n\n> Sounds like we should shoot for option 1. I'll look into it.\n\nSweet, three birds, one bug!  If you handle the vp[0] clobbering (which is what I hope you mean by \"I'll look into it\" :), I'll write CalleeIter.", "id": 5426437, "is_private": false, "author": "mail@lukewagner.name", "bug_id": 652000, "attachment_id": null, "creation_time": "2011-04-22T17:01:07Z", "tags": []}, {"author": "jwalden@mit.edu", "is_private": false, "id": 5426854, "attachment_id": null, "tags": [], "creation_time": "2011-04-22T19:48:47Z", "bug_id": 652000, "count": 4, "time": "2011-04-22T19:48:47Z", "creator": "jwalden@mit.edu", "raw_text": "I too am in favor of option 1, and had been thinking about possibly implementing it at some point when I found the time.", "text": "I too am in favor of option 1, and had been thinking about possibly implementing it at some point when I found the time."}, {"creation_time": "2011-05-11T22:04:59Z", "tags": [], "attachment_id": null, "bug_id": 652000, "is_private": false, "author": "jorendorff@mozilla.com", "id": 5464095, "raw_text": "OK, narrowing this bug to be about calls to JSNatives from script.\n\nFiled bug 656462 for calls to JSNatives from everywhere else.", "creator": "jorendorff@mozilla.com", "text": "OK, narrowing this bug to be about calls to JSNatives from script.\n\nFiled bug 656462 for calls to JSNatives from everywhere else.", "time": "2011-05-11T22:04:59Z", "count": 5}]}}}