{"bugs": {"678174": {"comments": [{"is_private": false, "creation_time": "2011-08-11T13:37:36Z", "id": 5647394, "bug_id": 678174, "text": "I ran into the following crash and noticed that the stack wasn't great. \nhttp://tinderbox.mozilla.org/showlog.cgi?log=Mozilla-Inbound/1313023027.1313025329.11041.gz&fulltext=1#err1\n\nShouldn't we be using CFI here instead of stack scanning?", "count": 0, "author": "jmuizelaar@mozilla.com", "creator": "jmuizelaar@mozilla.com", "tags": [], "raw_text": "I ran into the following crash and noticed that the stack wasn't great. \nhttp://tinderbox.mozilla.org/showlog.cgi?log=Mozilla-Inbound/1313023027.1313025329.11041.gz&fulltext=1#err1\n\nShouldn't we be using CFI here instead of stack scanning?", "attachment_id": null, "time": "2011-08-11T13:37:36Z"}, {"attachment_id": null, "tags": [], "creator": "ted@mielczarek.org", "creation_time": "2011-08-11T14:27:35Z", "is_private": false, "raw_text": "I see what's going wrong.\n\nThe top two frames look like:\nThread 0 (crashed)\n 0  libpthread-2.11.so + 0xee6b\n    rbx = 0x000000d5   r12 = 0xe0202490   r13 = 0xdf26c160   r14 = 0x010280f0\n    r15 = 0x0102b860   rip = 0xd360ee6b   rsp = 0x84d6ec78   rbp = 0x84d6ec80\n    Found by: given as instruction pointer in context\n 1  libxul.so!CrashInJS [jsutil.cpp:17fa5a741f84 : 95 + 0x9]\n    rip = 0xe0e87896   rsp = 0x84d6ec80\n    Found by: stack scanning\n\n(the register values are truncated to 32-bits, that's fixed in Breakpad FWIW)\n\nThe symbol data for CrashInJS looks like:\nFUNC 2536888 10 0 CrashInJS\n2536888 4 72 4403\n253688c a 95 4403\n2536896 2 97 4403\n\nSTACK CFI INIT 2536888 10 .cfa: $rsp 8 + .ra: .cfa -8 + ^\nSTACK CFI 2536889 $rbp: .cfa -16 + ^ .cfa: $rsp 16 +\nSTACK CFI 253688c .cfa: $rbp 16 +\nSTACK CFI 2536897 .cfa: $rsp 8 +\n\nThe rva for frame 1 is 0x2536896, so we're in the third line of the CFI rules, which says that .cfa is based on rbp. Since we got to frame 1 from frame 0 via stack scanning, we didn't recover rbp, so we can't use the CFI rules to unwind.\n\nI guess it's using rbp here because this is a debug build, so it's using a frame pointer? I think there are two ways to fix this:\n1) fix bug 528231, which is feasible now that we're fixing bug 561754\n2) Make the amd64 stackwalker able to recover rbp when stack scanning. The x86 stackwalker attempts to recover ebp:\nhttp://code.google.com/p/google-breakpad/source/browse/trunk/src/processor/stackwalker_x86.cc#497", "time": "2011-08-11T14:27:35Z", "author": "ted@mielczarek.org", "count": 1, "text": "I see what's going wrong.\n\nThe top two frames look like:\nThread 0 (crashed)\n 0  libpthread-2.11.so + 0xee6b\n    rbx = 0x000000d5   r12 = 0xe0202490   r13 = 0xdf26c160   r14 = 0x010280f0\n    r15 = 0x0102b860   rip = 0xd360ee6b   rsp = 0x84d6ec78   rbp = 0x84d6ec80\n    Found by: given as instruction pointer in context\n 1  libxul.so!CrashInJS [jsutil.cpp:17fa5a741f84 : 95 + 0x9]\n    rip = 0xe0e87896   rsp = 0x84d6ec80\n    Found by: stack scanning\n\n(the register values are truncated to 32-bits, that's fixed in Breakpad FWIW)\n\nThe symbol data for CrashInJS looks like:\nFUNC 2536888 10 0 CrashInJS\n2536888 4 72 4403\n253688c a 95 4403\n2536896 2 97 4403\n\nSTACK CFI INIT 2536888 10 .cfa: $rsp 8 + .ra: .cfa -8 + ^\nSTACK CFI 2536889 $rbp: .cfa -16 + ^ .cfa: $rsp 16 +\nSTACK CFI 253688c .cfa: $rbp 16 +\nSTACK CFI 2536897 .cfa: $rsp 8 +\n\nThe rva for frame 1 is 0x2536896, so we're in the third line of the CFI rules, which says that .cfa is based on rbp. Since we got to frame 1 from frame 0 via stack scanning, we didn't recover rbp, so we can't use the CFI rules to unwind.\n\nI guess it's using rbp here because this is a debug build, so it's using a frame pointer? I think there are two ways to fix this:\n1) fix bug 528231, which is feasible now that we're fixing bug 561754\n2) Make the amd64 stackwalker able to recover rbp when stack scanning. The x86 stackwalker attempts to recover ebp:\nhttp://code.google.com/p/google-breakpad/source/browse/trunk/src/processor/stackwalker_x86.cc#497", "bug_id": 678174, "id": 5647489}]}}, "comments": {}}