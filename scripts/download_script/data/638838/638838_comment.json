{"comments": {}, "bugs": {"638838": {"comments": [{"is_private": false, "raw_text": "User-Agent:       Mozilla/5.0 (X11; Linux i686; rv:2.0b11) Gecko/20100101 Firefox/4.0b11\nBuild Identifier: Mozilla/5.0 (X11; Linux i686; rv:2.0b11) Gecko/20100101 Firefox/4.0b11\n\nOne of my users reported an issue occurring on Firefox 4.0b12 while it was working on 4.0b11\n\nI narrowed down the problem to the inability to post a message to a worker created from nsIWorkerFactory. More exactly the message is never received by the worker.\n\nI wrote a minimal extension (attached to this bug entry) to demonstrate the issue:\n\nLauncher code:\nvar workerFactory = Components.classes[\"@mozilla.org/threads/workerfactory;1\"].createInstance(Components.interfaces.nsIWorkerFactory);\nvar worker = workerFactory.newChromeWorker(\"chrome://bugworker/content/bugworker.js\");\nworker.postMessage({});\n\nWorker code:\ndump(\"[bugworker] loading\\n\");\nvar onmessage = function(event) {\n\tdump(\"[bugworker] onmessage\\n\");\n};\ndump(\"[bugworker] loaded\\n\");\n\n\n\n\nReproducible: Always\n\nSteps to Reproduce:\n1. install the attached extension\n2. visit chrome://bugworker/content/bugworker.xul\n3. watch the console\nActual Results:  \nFrom Firefox 4.0b11 (working as expected), console output is:\n[bugworker] loading\n[bugworker] loaded\n[bugworker] onmessage\n\nOn Firefox 4.0b12 (message never received by the worker):\n[bugworker] loading\n[bugworker] loaded\n\n\n\nExpected Results:  \nOn Firefox 4.0b12, the message should be received.", "creation_time": "2011-03-04T17:44:04Z", "bug_id": 638838, "tags": [], "time": "2011-03-04T17:44:04Z", "id": 5322027, "attachment_id": null, "creator": "michel.gutierrez@gmail.com", "author": "michel.gutierrez@gmail.com", "count": 0, "text": "User-Agent:       Mozilla/5.0 (X11; Linux i686; rv:2.0b11) Gecko/20100101 Firefox/4.0b11\nBuild Identifier: Mozilla/5.0 (X11; Linux i686; rv:2.0b11) Gecko/20100101 Firefox/4.0b11\n\nOne of my users reported an issue occurring on Firefox 4.0b12 while it was working on 4.0b11\n\nI narrowed down the problem to the inability to post a message to a worker created from nsIWorkerFactory. More exactly the message is never received by the worker.\n\nI wrote a minimal extension (attached to this bug entry) to demonstrate the issue:\n\nLauncher code:\nvar workerFactory = Components.classes[\"@mozilla.org/threads/workerfactory;1\"].createInstance(Components.interfaces.nsIWorkerFactory);\nvar worker = workerFactory.newChromeWorker(\"chrome://bugworker/content/bugworker.js\");\nworker.postMessage({});\n\nWorker code:\ndump(\"[bugworker] loading\\n\");\nvar onmessage = function(event) {\n\tdump(\"[bugworker] onmessage\\n\");\n};\ndump(\"[bugworker] loaded\\n\");\n\n\n\n\nReproducible: Always\n\nSteps to Reproduce:\n1. install the attached extension\n2. visit chrome://bugworker/content/bugworker.xul\n3. watch the console\nActual Results:  \nFrom Firefox 4.0b11 (working as expected), console output is:\n[bugworker] loading\n[bugworker] loaded\n[bugworker] onmessage\n\nOn Firefox 4.0b12 (message never received by the worker):\n[bugworker] loading\n[bugworker] loaded\n\n\n\nExpected Results:  \nOn Firefox 4.0b12, the message should be received."}, {"time": "2011-03-04T17:45:20Z", "author": "michel.gutierrez@gmail.com", "id": 5322032, "text": "Created attachment 516914\nMinimal extension to demonstrate the issue\n\nAfter installing the extension, visit chrome://bugworker/content/bugworker.xul and watch the console.", "count": 1, "is_private": false, "attachment_id": 516914, "bug_id": 638838, "creation_time": "2011-03-04T17:45:20Z", "raw_text": "After installing the extension, visit chrome://bugworker/content/bugworker.xul and watch the console.", "tags": [], "creator": "michel.gutierrez@gmail.com"}, {"count": 2, "text": "Ben, can you look at this and figure out whether this was an intentional change or something that's seriously broken for chrome workers?", "id": 5322503, "time": "2011-03-04T19:53:51Z", "author": "bzbarsky@mit.edu", "tags": [], "creator": "bzbarsky@mit.edu", "creation_time": "2011-03-04T19:53:51Z", "bug_id": 638838, "raw_text": "Ben, can you look at this and figure out whether this was an intentional change or something that's seriously broken for chrome workers?", "is_private": false, "attachment_id": null}, {"is_private": false, "creation_time": "2011-03-05T00:48:17Z", "bug_id": 638838, "raw_text": "Ugh... This isn't just for ChromeWorkers...\n\nIt looks like some JS engine changes have made this code not work:\n\n  var onmessage = function(event) { ... }\n\nWorkaround is simple, just change that to:\n\n  onmessage = function(event) { ... }\n\nSomehow specifying the var there means that our addProperty hook no longer gets called here:\n\nhttps://mxr.mozilla.org/mozilla-central/source/dom/src/threads/nsDOMWorker.cpp#953", "tags": [], "time": "2011-03-05T00:48:17Z", "id": 5323175, "attachment_id": null, "creator": "bent.mozilla@gmail.com", "author": "bent.mozilla@gmail.com", "text": "Ugh... This isn't just for ChromeWorkers...\n\nIt looks like some JS engine changes have made this code not work:\n\n  var onmessage = function(event) { ... }\n\nWorkaround is simple, just change that to:\n\n  onmessage = function(event) { ... }\n\nSomehow specifying the var there means that our addProperty hook no longer gets called here:\n\nhttps://mxr.mozilla.org/mozilla-central/source/dom/src/threads/nsDOMWorker.cpp#953", "count": 3}, {"count": 4, "text": "All signs are pointing to bug 632003.", "author": "bent.mozilla@gmail.com", "time": "2011-03-05T01:17:42Z", "id": 5323238, "raw_text": "All signs are pointing to bug 632003.", "bug_id": 638838, "creation_time": "2011-03-05T01:17:42Z", "creator": "bent.mozilla@gmail.com", "tags": [], "is_private": false, "attachment_id": null}, {"attachment_id": null, "creator": "jwalden@mit.edu", "author": "jwalden@mit.edu", "text": "Maybe we need an addProperty call after the js_DNP in JSOP_DEFVAR in the interpreter?", "count": 5, "is_private": false, "creation_time": "2011-03-05T01:52:36Z", "bug_id": 638838, "raw_text": "Maybe we need an addProperty call after the js_DNP in JSOP_DEFVAR in the interpreter?", "tags": [], "time": "2011-03-05T01:52:36Z", "id": 5323362}, {"raw_text": "Oh, the var part there...  I always thought that the AddProperty thing was pretty weird, but I think jst claimed that at least for DOM event receivers this was needed for web compat?", "bug_id": 638838, "creation_time": "2011-03-05T01:59:31Z", "creator": "bzbarsky@mit.edu", "tags": [], "attachment_id": null, "is_private": false, "count": 6, "text": "Oh, the var part there...  I always thought that the AddProperty thing was pretty weird, but I think jst claimed that at least for DOM event receivers this was needed for web compat?", "author": "bzbarsky@mit.edu", "time": "2011-03-05T01:59:31Z", "id": 5323398}, {"creator": "jwalden@mit.edu", "attachment_id": null, "count": 7, "text": "jst was saying that workers use IDL to define properties, so it's possible there's a \"onmessage\" property on Object.getPrototypeOf(this) in workers.  If so, before we'd not define a var then (because we found the property), and now we do (because we found it, but it wasn't on the global object directly), so the shadowing var now would hide the other one and result in the event-handling special behavior happening.", "author": "jwalden@mit.edu", "tags": [], "raw_text": "jst was saying that workers use IDL to define properties, so it's possible there's a \"onmessage\" property on Object.getPrototypeOf(this) in workers.  If so, before we'd not define a var then (because we found the property), and now we do (because we found it, but it wasn't on the global object directly), so the shadowing var now would hide the other one and result in the event-handling special behavior happening.", "bug_id": 638838, "creation_time": "2011-03-05T02:15:46Z", "is_private": false, "id": 5323423, "time": "2011-03-05T02:15:46Z"}, {"text": "It's not the AddProperty hook that has changed. Apparently it is no longer needed (which is weird - we had to add it specifically to solve this problem eons ago, something must have changed in XPConnect since).\n\nReversing the patch in bug 632003 fixes this bug.", "count": 8, "author": "bent.mozilla@gmail.com", "creator": "bent.mozilla@gmail.com", "attachment_id": null, "time": "2011-03-05T02:40:51Z", "id": 5323461, "creation_time": "2011-03-05T02:40:51Z", "bug_id": 638838, "raw_text": "It's not the AddProperty hook that has changed. Apparently it is no longer needed (which is weird - we had to add it specifically to solve this problem eons ago, something must have changed in XPConnect since).\n\nReversing the patch in bug 632003 fixes this bug.", "tags": [], "is_private": false}, {"is_private": false, "raw_text": "I chatted with mrbkap about this, he's convinced that regular DOM event handlers (onclick, onunload, etc.) are unaffected because of the way DOMClassInfo handles this (there's no IDL for this and it works by resolving on the object itself, not its prototype).\n\nAre there other cases like workers, though? It would have to be an IDL-specified global object where the property being asssigned lives on the prototype, not the actual object.\n\nGiven that we can fix workers separately (after 4.0) and suggest a simple workaround in the meantime (don't use 'var') I don't think this is an emergency.", "bug_id": 638838, "creation_time": "2011-03-05T02:54:47Z", "tags": [], "time": "2011-03-05T02:54:47Z", "id": 5323473, "attachment_id": null, "creator": "bent.mozilla@gmail.com", "author": "bent.mozilla@gmail.com", "count": 9, "text": "I chatted with mrbkap about this, he's convinced that regular DOM event handlers (onclick, onunload, etc.) are unaffected because of the way DOMClassInfo handles this (there's no IDL for this and it works by resolving on the object itself, not its prototype).\n\nAre there other cases like workers, though? It would have to be an IDL-specified global object where the property being asssigned lives on the prototype, not the actual object.\n\nGiven that we can fix workers separately (after 4.0) and suggest a simple workaround in the meantime (don't use 'var') I don't think this is an emergency."}, {"count": 10, "text": "> Are there other cases like workers, though?\n\nNot for |var| usage, I think, since that only affects global objects.  That means Window (which uses the classinfo code), workers, js components (which iirc don't use IDL for the global), and XBL (where |var| in fields treats the element as the global, but it's generally all kinda broken).  Oh, sandboxes, where again I think we don't use IDL for the global _and_ we don't have the on* stuff.", "id": 5323477, "author": "bzbarsky@mit.edu", "time": "2011-03-05T02:58:29Z", "creator": "bzbarsky@mit.edu", "tags": [], "raw_text": "> Are there other cases like workers, though?\n\nNot for |var| usage, I think, since that only affects global objects.  That means Window (which uses the classinfo code), workers, js components (which iirc don't use IDL for the global), and XBL (where |var| in fields treats the element as the global, but it's generally all kinda broken).  Oh, sandboxes, where again I think we don't use IDL for the global _and_ we don't have the on* stuff.", "bug_id": 638838, "creation_time": "2011-03-05T02:58:29Z", "attachment_id": null, "is_private": false}, {"author": "bent.mozilla@gmail.com", "count": 11, "text": "Oh, and, I think changing the way we define properties on global objects with var vs. without var shouldn't have been changed in b12. Isn't that really really late for such a change?\n\nOf course, we would have caught the problem with a test, but it has literally never crossed my mind to try defining one of these message handlers as a var (what nasty syntax!). In any case I'll add a test for this once we fix it.", "attachment_id": null, "creator": "bent.mozilla@gmail.com", "time": "2011-03-05T03:00:49Z", "id": 5323480, "is_private": false, "raw_text": "Oh, and, I think changing the way we define properties on global objects with var vs. without var shouldn't have been changed in b12. Isn't that really really late for such a change?\n\nOf course, we would have caught the problem with a test, but it has literally never crossed my mind to try defining one of these message handlers as a var (what nasty syntax!). In any case I'll add a test for this once we fix it.", "bug_id": 638838, "creation_time": "2011-03-05T03:00:49Z", "tags": []}, {"author": "bent.mozilla@gmail.com", "text": "Consensus among bz, shaver, and waldo is that this should be WONTFIX. Workaround is to not use 'var'. I'll file a followup to remove the AddProperty hook that isn't actually doing anything for us now.", "count": 12, "attachment_id": null, "creator": "bent.mozilla@gmail.com", "time": "2011-03-05T03:50:25Z", "id": 5323530, "is_private": false, "raw_text": "Consensus among bz, shaver, and waldo is that this should be WONTFIX. Workaround is to not use 'var'. I'll file a followup to remove the AddProperty hook that isn't actually doing anything for us now.", "bug_id": 638838, "creation_time": "2011-03-05T03:50:25Z", "tags": []}, {"author": "bzbarsky@mit.edu", "count": 13, "text": "More precisely, using |var| there should not work, per spec.", "attachment_id": null, "creator": "bzbarsky@mit.edu", "time": "2011-03-05T04:24:29Z", "id": 5323561, "is_private": false, "raw_text": "More precisely, using |var| there should not work, per spec.", "bug_id": 638838, "creation_time": "2011-03-05T04:24:29Z", "tags": []}, {"creator": "jonas@sicking.cc", "attachment_id": null, "text": "(In reply to comment #10)\n> > Are there other cases like workers, though?\n> \n> Not for |var| usage, I think, since that only affects global objects.\n\nIs that true even for:\n\n<input onclick=\"var onmouseup = x;\">\n\n?\n\nAnother issue is that HTML5 uses IDL to add all onfoo properties to elements and global objects. This is something that we really want to implement since it allows feature detection using things like |if (\"onbar\" in myelement) { ... }|\n\nThat's of course not something we need to worry about for FF4 though.", "count": 14, "author": "jonas@sicking.cc", "tags": [], "raw_text": "(In reply to comment #10)\n> > Are there other cases like workers, though?\n> \n> Not for |var| usage, I think, since that only affects global objects.\n\nIs that true even for:\n\n<input onclick=\"var onmouseup = x;\">\n\n?\n\nAnother issue is that HTML5 uses IDL to add all onfoo properties to elements and global objects. This is something that we really want to implement since it allows feature detection using things like |if (\"onbar\" in myelement) { ... }|\n\nThat's of course not something we need to worry about for FF4 though.", "bug_id": 638838, "creation_time": "2011-03-05T05:48:51Z", "is_private": false, "id": 5323644, "time": "2011-03-05T05:48:51Z"}, {"id": 5323650, "time": "2011-03-05T05:58:40Z", "is_private": false, "tags": [], "bug_id": 638838, "creation_time": "2011-03-05T05:58:40Z", "raw_text": "> Is that true even for:\n> <input onclick=\"var onmouseup = x;\">\n\nYes.  That's compiled using nsJSContext::CompileEventHandler, which which passes the string to JS_CompileUCFunctionForPrincipalsVersion (hence compiles it as a function body).  So |var| in there will define variables on the current function invocation's Call object.\n\n> Another issue is that HTML5 uses IDL to add all onfoo properties\n\nRight; that's what comment 13 is based on.  If the on* are declared as properties in IDL and WebIDL puts properties on the prototype (which it does), then |var onfoo| will just shadow the IDL-declared |foo| instead of setting it.", "author": "bzbarsky@mit.edu", "text": "> Is that true even for:\n> <input onclick=\"var onmouseup = x;\">\n\nYes.  That's compiled using nsJSContext::CompileEventHandler, which which passes the string to JS_CompileUCFunctionForPrincipalsVersion (hence compiles it as a function body).  So |var| in there will define variables on the current function invocation's Call object.\n\n> Another issue is that HTML5 uses IDL to add all onfoo properties\n\nRight; that's what comment 13 is based on.  If the on* are declared as properties in IDL and WebIDL puts properties on the prototype (which it does), then |var onfoo| will just shadow the IDL-declared |foo| instead of setting it.", "count": 15, "attachment_id": null, "creator": "bzbarsky@mit.edu"}, {"attachment_id": null, "creator": "jonas@sicking.cc", "author": "jonas@sicking.cc", "text": "> > Another issue is that HTML5 uses IDL to add all onfoo properties\n> \n> Right; that's what comment 13 is based on.  If the on* are declared as\n> properties in IDL and WebIDL puts properties on the prototype (which it does),\n> then |var onfoo| will just shadow the IDL-declared |foo| instead of setting it.\n\nThat might not be compatible with the web then :( I would even say that it likely isn't.\n\nWhat does\n\nfunction onmessage(e) {\n  ...\n}\n\ndo in workers? I bet there are loads of pages out there that does\n\nfunction onload() {\n  ...\n}\n\non the web today.", "count": 16, "is_private": false, "creation_time": "2011-03-05T06:16:37Z", "bug_id": 638838, "raw_text": "> > Another issue is that HTML5 uses IDL to add all onfoo properties\n> \n> Right; that's what comment 13 is based on.  If the on* are declared as\n> properties in IDL and WebIDL puts properties on the prototype (which it does),\n> then |var onfoo| will just shadow the IDL-declared |foo| instead of setting it.\n\nThat might not be compatible with the web then :( I would even say that it likely isn't.\n\nWhat does\n\nfunction onmessage(e) {\n  ...\n}\n\ndo in workers? I bet there are loads of pages out there that does\n\nfunction onload() {\n  ...\n}\n\non the web today.", "tags": [], "time": "2011-03-05T06:16:37Z", "id": 5323667}, {"creator": "jwalden@mit.edu", "tags": [], "raw_text": "data:text/html,<script>function onload() { alert('hi'); }</script>\n\nalerts in a nightly.  Why, I don't actually know, to be honest, but that's not actually \"broken\" right now.", "bug_id": 638838, "creation_time": "2011-03-05T06:25:24Z", "is_private": false, "attachment_id": null, "text": "data:text/html,<script>function onload() { alert('hi'); }</script>\n\nalerts in a nightly.  Why, I don't actually know, to be honest, but that's not actually \"broken\" right now.", "count": 17, "id": 5323672, "author": "jwalden@mit.edu", "time": "2011-03-05T06:25:24Z"}, {"creator": "jonas@sicking.cc", "attachment_id": null, "text": "In existing code we don't use IDL to define onfoo properties (other than in a few instances, like workers and XMLHttpRequest).\n\nInstead we simply look at for \"expando\" properties set on the JS object for the window when we go looking for event handlers to fire.\n\nHowever HTML5 changes that such that IDL *is* used. And we want to follow that for several reasons. My concern is that that, in combination with the changes in bug 632003, would break the web.", "count": 18, "author": "jonas@sicking.cc", "creation_time": "2011-03-05T06:38:25Z", "bug_id": 638838, "raw_text": "In existing code we don't use IDL to define onfoo properties (other than in a few instances, like workers and XMLHttpRequest).\n\nInstead we simply look at for \"expando\" properties set on the JS object for the window when we go looking for event handlers to fire.\n\nHowever HTML5 changes that such that IDL *is* used. And we want to follow that for several reasons. My concern is that that, in combination with the changes in bug 632003, would break the web.", "tags": [], "is_private": false, "time": "2011-03-05T06:38:25Z", "id": 5323682}, {"author": "brendan@mozilla.org", "text": "(In reply to comment #18)\n> In existing code we don't use IDL to define onfoo properties (other than in a\n> few instances, like workers and XMLHttpRequest).\n> \n> Instead we simply look at for \"expando\" properties set on the JS object for the\n> window when we go looking for event handlers to fire.\n\nWe always should look up \"onload\" (e.g.) starting with the window object.\n\nLooking for the property when firing the event, and defining the property based on markup, are two different things.\n\n> However HTML5 changes that such that IDL *is* used.\n\nHow, exactly? Do you mean to bind a property named 'onload' based on <body onload=\"...\">, HTML5 says something other than define an \"own\" property of the window object?\n\n/be", "count": 19, "attachment_id": null, "creator": "brendan@mozilla.org", "time": "2011-03-05T07:42:39Z", "id": 5323730, "is_private": false, "bug_id": 638838, "creation_time": "2011-03-05T07:42:39Z", "raw_text": "(In reply to comment #18)\n> In existing code we don't use IDL to define onfoo properties (other than in a\n> few instances, like workers and XMLHttpRequest).\n> \n> Instead we simply look at for \"expando\" properties set on the JS object for the\n> window when we go looking for event handlers to fire.\n\nWe always should look up \"onload\" (e.g.) starting with the window object.\n\nLooking for the property when firing the event, and defining the property based on markup, are two different things.\n\n> However HTML5 changes that such that IDL *is* used.\n\nHow, exactly? Do you mean to bind a property named 'onload' based on <body onload=\"...\">, HTML5 says something other than define an \"own\" property of the window object?\n\n/be", "tags": []}, {"attachment_id": null, "creator": "brendan@mozilla.org", "author": "brendan@mozilla.org", "count": 20, "text": "(In reply to comment #17)\n> data:text/html,<script>function onload() { alert('hi'); }</script>\n> \n> alerts in a nightly.  Why, I don't actually know, to be honest, but that's not\n> actually \"broken\" right now.\n\nWhy wouldn't that work?\n\nIE had some strangeness where function onload(){} shadowed the event handler induced by <body onload='...'> but no Netscape or Mozilla browser ever did that.\n\n/be", "is_private": false, "raw_text": "(In reply to comment #17)\n> data:text/html,<script>function onload() { alert('hi'); }</script>\n> \n> alerts in a nightly.  Why, I don't actually know, to be honest, but that's not\n> actually \"broken\" right now.\n\nWhy wouldn't that work?\n\nIE had some strangeness where function onload(){} shadowed the event handler induced by <body onload='...'> but no Netscape or Mozilla browser ever did that.\n\n/be", "bug_id": 638838, "creation_time": "2011-03-05T07:44:48Z", "tags": [], "time": "2011-03-05T07:44:48Z", "id": 5323732}, {"raw_text": "> > However HTML5 changes that such that IDL *is* used.\n> \n> How, exactly? Do you mean to bind a property named 'onload' based on <body\n> onload=\"...\">, HTML5 says something other than define an \"own\" property of the\n> window object?\n\nHTML5 uses normal WebIDL to define all the on* properties. So it contains:\n\ninterface Window {\n  ...\n  attribute Function onload;\n  ...\n};\n\nWebIDL defines what prototype chain this maps to, and since in all implementations (possibly except for IE, don't know) the above IDL has mapped to onload being a getter+setter on some object on the prototype chain, rather than on the object itself, I imagine that that is what WebIDL will say.", "bug_id": 638838, "creation_time": "2011-03-05T09:00:17Z", "tags": [], "is_private": false, "time": "2011-03-05T09:00:17Z", "id": 5323773, "creator": "jonas@sicking.cc", "attachment_id": null, "text": "> > However HTML5 changes that such that IDL *is* used.\n> \n> How, exactly? Do you mean to bind a property named 'onload' based on <body\n> onload=\"...\">, HTML5 says something other than define an \"own\" property of the\n> window object?\n\nHTML5 uses normal WebIDL to define all the on* properties. So it contains:\n\ninterface Window {\n  ...\n  attribute Function onload;\n  ...\n};\n\nWebIDL defines what prototype chain this maps to, and since in all implementations (possibly except for IE, don't know) the above IDL has mapped to onload being a getter+setter on some object on the prototype chain, rather than on the object itself, I imagine that that is what WebIDL will say.", "count": 21, "author": "jonas@sicking.cc"}, {"is_private": false, "attachment_id": null, "creation_time": "2011-03-05T09:49:54Z", "bug_id": 638838, "raw_text": "Thanks guys for sorting that out.\n\nI suggest fixing the web worker documentation at https://developer.mozilla.org/en/using_web_workers where the example for echoing a message from the worker is written as:\n\n1\tvar onmessage = function(e) {\n2\t  postMessage(e.data);\n3\t};", "tags": [], "creator": "michel.gutierrez@gmail.com", "time": "2011-03-05T09:49:54Z", "author": "michel.gutierrez@gmail.com", "id": 5323794, "text": "Thanks guys for sorting that out.\n\nI suggest fixing the web worker documentation at https://developer.mozilla.org/en/using_web_workers where the example for echoing a message from the worker is written as:\n\n1\tvar onmessage = function(e) {\n2\t  postMessage(e.data);\n3\t};", "count": 22}, {"count": 23, "text": "I fixed/clarified/expanded it, thanks.  Do note that anyone can create an account on MDN to make changes to articles (or even to write new ones), so nothing prevents you from fixing any mistakes you happen to notice in them yourself.  :-)", "author": "jwalden@mit.edu", "creator": "jwalden@mit.edu", "attachment_id": null, "time": "2011-03-05T10:23:49Z", "id": 5323815, "creation_time": "2011-03-05T10:23:49Z", "bug_id": 638838, "raw_text": "I fixed/clarified/expanded it, thanks.  Do note that anyone can create an account on MDN to make changes to articles (or even to write new ones), so nothing prevents you from fixing any mistakes you happen to notice in them yourself.  :-)", "tags": [], "is_private": false}, {"is_private": false, "tags": [], "raw_text": "http://mozilla.pettay.fi/moztests/w.html returns PASS on FF4, Opera 11 and\nChrome 9.  \nFAIL&PASS on FF3.6.\n\nThe FAIL case is testing 'var onmessage =' and the PASS case 'onmessage ='.\n\n\n\nFor post FF work I'm still worried about the change for the reasons\nsicking mentioned.", "bug_id": 638838, "creation_time": "2011-03-05T10:40:21Z", "id": 5323825, "time": "2011-03-05T10:40:21Z", "attachment_id": null, "creator": "bugs@pettay.fi", "author": "bugs@pettay.fi", "count": 24, "text": "http://mozilla.pettay.fi/moztests/w.html returns PASS on FF4, Opera 11 and\nChrome 9.  \nFAIL&PASS on FF3.6.\n\nThe FAIL case is testing 'var onmessage =' and the PASS case 'onmessage ='.\n\n\n\nFor post FF work I'm still worried about the change for the reasons\nsicking mentioned."}, {"raw_text": "Jonas, IDL attributes map to getter/setter pairs on the prototype in IE and Gecko.  They map to own properties in JSC/V8.  I don't recall what Opera does.  This is the case for all properties defined in IDL, not just on*.\n\nWebIDL was going to define the IE/Gecko behavior here as correct; at least the JSC folks indicated they would switch to it.\n\nI'm a little surprised the |function onload()| works while |var onload| does not against Window (the latter in both 4.0 and 3.6).  Does the |function| case call addProperty or something?\n\nIn any case, before we start implementing this stuff for Window we should write some exhaustive tests and compare cross-browser behavior.", "creation_time": "2011-03-05T14:07:37Z", "bug_id": 638838, "tags": [], "is_private": false, "time": "2011-03-05T14:07:37Z", "id": 5323966, "creator": "bzbarsky@mit.edu", "attachment_id": null, "text": "Jonas, IDL attributes map to getter/setter pairs on the prototype in IE and Gecko.  They map to own properties in JSC/V8.  I don't recall what Opera does.  This is the case for all properties defined in IDL, not just on*.\n\nWebIDL was going to define the IE/Gecko behavior here as correct; at least the JSC folks indicated they would switch to it.\n\nI'm a little surprised the |function onload()| works while |var onload| does not against Window (the latter in both 4.0 and 3.6).  Does the |function| case call addProperty or something?\n\nIn any case, before we start implementing this stuff for Window we should write some exhaustive tests and compare cross-browser behavior.", "count": 25, "author": "bzbarsky@mit.edu"}, {"creator": "igor@mir2.org", "attachment_id": null, "count": 26, "text": "(In reply to comment #25)\n> I'm a little surprised the |function onload()| works while |var onload| does\n> not against Window (the latter in both 4.0 and 3.6).\n\nI suppose this is because JSOP_DEFVAR case in the interpreter calls js_DefineNativeProperty(obj) while JSOP_DEFFUN calls obj->defineProperty() allowing to override js_DefineNativeProperty with a custom operation. We should definitely have the uniform behavior for both cases. I will dig into this farther.", "author": "igor@mir2.org", "tags": [], "creation_time": "2011-03-05T15:13:49Z", "bug_id": 638838, "raw_text": "(In reply to comment #25)\n> I'm a little surprised the |function onload()| works while |var onload| does\n> not against Window (the latter in both 4.0 and 3.6).\n\nI suppose this is because JSOP_DEFVAR case in the interpreter calls js_DefineNativeProperty(obj) while JSOP_DEFFUN calls obj->defineProperty() allowing to override js_DefineNativeProperty with a custom operation. We should definitely have the uniform behavior for both cases. I will dig into this farther.", "is_private": false, "id": 5324015, "time": "2011-03-05T15:13:49Z"}, {"attachment_id": null, "creator": "igor@mir2.org", "author": "igor@mir2.org", "count": 27, "text": "The reason function onload() works while var onload = function()  does not is that in the former case the runtime calls js_DefineNativeProperty with the function as a value while for the latter we pass JSVAL_VOID to the define method. Only later the bytecode will set the value of the already existing property.\n\nThis means that AddProperty hook for the window, http://mxr.mozilla.org/mozilla-central/ident?i=NS_IMETHODIMP , does nothing for the var case due to the checks in http://mxr.mozilla.org/mozilla-central/source/dom/base/nsDOMClassInfo.cpp#7649 that skips the void value:\n\n7649   if ((::JS_TypeOfValue(cx, *vp) != JSTYPE_FUNCTION && !JSVAL_IS_NULL(*vp)) ||\n7650       !JSID_IS_STRING(id) || id == sAddEventListener_id) {\n7651     return NS_OK;\n7652   }\n7653 \n7654   PRBool did_compile; // Ignored here.\n7655 \n7656   return RegisterCompileHandler(wrapper, cx, obj, id, PR_FALSE,\n7657                                 JSVAL_IS_NULL(*vp), &did_compile);", "is_private": false, "raw_text": "The reason function onload() works while var onload = function()  does not is that in the former case the runtime calls js_DefineNativeProperty with the function as a value while for the latter we pass JSVAL_VOID to the define method. Only later the bytecode will set the value of the already existing property.\n\nThis means that AddProperty hook for the window, http://mxr.mozilla.org/mozilla-central/ident?i=NS_IMETHODIMP , does nothing for the var case due to the checks in http://mxr.mozilla.org/mozilla-central/source/dom/base/nsDOMClassInfo.cpp#7649 that skips the void value:\n\n7649   if ((::JS_TypeOfValue(cx, *vp) != JSTYPE_FUNCTION && !JSVAL_IS_NULL(*vp)) ||\n7650       !JSID_IS_STRING(id) || id == sAddEventListener_id) {\n7651     return NS_OK;\n7652   }\n7653 \n7654   PRBool did_compile; // Ignored here.\n7655 \n7656   return RegisterCompileHandler(wrapper, cx, obj, id, PR_FALSE,\n7657                                 JSVAL_IS_NULL(*vp), &did_compile);", "bug_id": 638838, "creation_time": "2011-03-06T14:51:17Z", "tags": [], "time": "2011-03-06T14:51:17Z", "id": 5325704}, {"count": 28, "text": "I reopen the bug so the code treats var onload and function onload uniformly.", "author": "igor@mir2.org", "creator": "igor@mir2.org", "attachment_id": null, "id": 5325983, "time": "2011-03-06T20:07:46Z", "tags": [], "bug_id": 638838, "creation_time": "2011-03-06T20:07:46Z", "raw_text": "I reopen the bug so the code treats var onload and function onload uniformly.", "is_private": false}, {"id": 13436262, "author": "bug-husbandry-bot@mozilla.bugs", "time": "2018-06-29T04:49:34Z", "count": 29, "text": "https://bugzilla.mozilla.org/show_bug.cgi?id=1472046\n\nMove all DOM bugs that haven\u2019t been updated in more than 3 years and has no one currently assigned to P5.\n\nIf you have questions, please contact :mdaly.", "attachment_id": null, "is_private": false, "creator": "bug-husbandry-bot@mozilla.bugs", "tags": [], "raw_text": "https://bugzilla.mozilla.org/show_bug.cgi?id=1472046\n\nMove all DOM bugs that haven\u2019t been updated in more than 3 years and has no one currently assigned to P5.\n\nIf you have questions, please contact :mdaly.", "creation_time": "2018-06-29T04:49:34Z", "bug_id": 638838}]}}}