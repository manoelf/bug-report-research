{"comments": {}, "bugs": {"643570": {"comments": [{"raw_text": "The goal is to integrate statistics from Bugzilla on a per-wordpress/buddypress user basis to better identify community member involvement around quality-related tasks.\n\nThis requires a Wordpress plugin that can speak to the Rest APIs that Bugzilla uses in order to pull data on open bugs from Bugzilla.\n\nRequirements\n\n1. Uses new *Bugzilla address* field from user profile on QMO\n2. Queries Bugzilla for bugs associated with this e-mail address\n3. Pulls aggregate data (not entire bug details) into new table in QMO's Wordpress DB\n4. Data is displayed as wordpress shortcode/templatable text that can be added to Wordpress pages and have a setting to specify user in shortcode so it can be embedded in a profile page.\n5. If no data is available for an explicitly specified user, states that no data is available and to check that e-mail address configured.\n6. Aggregate numbers displayed with shortcode/template text should be hyperlinkable to bugzilla results page that will present bugs that are being aggregated (no need to store bug details in DB).\n\nProposed initial data to be pulled per user and displayed in version 1 of plugin:\n\n1. Bugs opened (ever)\n2. Bugs opened within last x days (probably 30)\n3. Bugs confirmed (ever)\n4. Bugs verified (ever) \n\nDevelopment Work\n\n1. Creation of plugin (webdev)\n2. Integration with QMO theme on each user profile page in new \"Metrics\" tab (Craig Cook?) \n\nOpen question: Is it possible to show bug statistics on QMO Team pages (which are Buddypress groups) of users who have joined team as an aggregate (i.e. Bugs opened by team members ever or in last 30 days)? This could be in a \"Metrics\" tab within the team/group page just as on the user profile page.\n\nWhen this is done, it might be useful to kick this out to the Wordpress community as a contribution as well.", "bug_id": 643570, "creation_time": "2011-03-21T21:33:54Z", "creator": "albill@gmail.com", "tags": [], "attachment_id": null, "is_private": false, "count": 0, "text": "The goal is to integrate statistics from Bugzilla on a per-wordpress/buddypress user basis to better identify community member involvement around quality-related tasks.\n\nThis requires a Wordpress plugin that can speak to the Rest APIs that Bugzilla uses in order to pull data on open bugs from Bugzilla.\n\nRequirements\n\n1. Uses new *Bugzilla address* field from user profile on QMO\n2. Queries Bugzilla for bugs associated with this e-mail address\n3. Pulls aggregate data (not entire bug details) into new table in QMO's Wordpress DB\n4. Data is displayed as wordpress shortcode/templatable text that can be added to Wordpress pages and have a setting to specify user in shortcode so it can be embedded in a profile page.\n5. If no data is available for an explicitly specified user, states that no data is available and to check that e-mail address configured.\n6. Aggregate numbers displayed with shortcode/template text should be hyperlinkable to bugzilla results page that will present bugs that are being aggregated (no need to store bug details in DB).\n\nProposed initial data to be pulled per user and displayed in version 1 of plugin:\n\n1. Bugs opened (ever)\n2. Bugs opened within last x days (probably 30)\n3. Bugs confirmed (ever)\n4. Bugs verified (ever) \n\nDevelopment Work\n\n1. Creation of plugin (webdev)\n2. Integration with QMO theme on each user profile page in new \"Metrics\" tab (Craig Cook?) \n\nOpen question: Is it possible to show bug statistics on QMO Team pages (which are Buddypress groups) of users who have joined team as an aggregate (i.e. Bugs opened by team members ever or in last 30 days)? This could be in a \"Metrics\" tab within the team/group page just as on the user profile page.\n\nWhen this is done, it might be useful to kick this out to the Wordpress community as a contribution as well.", "author": "albill@gmail.com", "time": "2011-03-21T21:33:54Z", "id": 5358357}, {"id": 5495807, "time": "2011-05-26T19:00:23Z", "author": "chrismore.bugzilla@gmail.com", "count": 1, "text": "Alex:\n\nCan you review the requirements for this bug and let us know if you need any clarification?\n\nThanks,\nChris", "attachment_id": null, "is_private": false, "tags": [], "creator": "chrismore.bugzilla@gmail.com", "bug_id": 643570, "creation_time": "2011-05-26T19:00:23Z", "raw_text": "Alex:\n\nCan you review the requirements for this bug and let us know if you need any clarification?\n\nThanks,\nChris"}, {"count": 2, "text": "Alex: here's the svn repo:\n\nhttp://viewvc.svn.mozilla.org/vc/projects/quality.mozilla.org/branches/wordpress/", "author": "malexis@mozilla.com", "creator": "malexis@mozilla.com", "attachment_id": null, "id": 5516046, "time": "2011-06-06T21:25:10Z", "tags": [], "raw_text": "Alex: here's the svn repo:\n\nhttp://viewvc.svn.mozilla.org/vc/projects/quality.mozilla.org/branches/wordpress/", "creation_time": "2011-06-06T21:25:10Z", "bug_id": 643570, "is_private": false}, {"time": "2011-06-09T16:29:19Z", "id": 5522549, "is_private": false, "creation_time": "2011-06-09T16:29:19Z", "bug_id": 643570, "raw_text": "Alex:\n\nCan you provide us an update on the development of this plugin? We need to get an ETA from you on when the team can review what you have created so that we can accurately plan the next phases.\n\nThanks,\nChris", "tags": [], "author": "chrismore.bugzilla@gmail.com", "count": 3, "text": "Alex:\n\nCan you provide us an update on the development of this plugin? We need to get an ETA from you on when the team can review what you have created so that we can accurately plan the next phases.\n\nThanks,\nChris", "attachment_id": null, "creator": "chrismore.bugzilla@gmail.com"}, {"count": 4, "text": "Alex: Also, this plugin is part of the Q2 goal and we only have a 3 weeks left in this quarter.", "author": "chrismore.bugzilla@gmail.com", "creator": "chrismore.bugzilla@gmail.com", "attachment_id": null, "time": "2011-06-09T16:52:34Z", "id": 5522612, "raw_text": "Alex: Also, this plugin is part of the Q2 goal and we only have a 3 weeks left in this quarter.", "creation_time": "2011-06-09T16:52:34Z", "bug_id": 643570, "tags": [], "is_private": false}, {"attachment_id": null, "creator": "malexis@mozilla.com", "author": "malexis@mozilla.com", "text": "From Alex's email:\n\nI have created the plugin and now it is capable of connecting to bugzilla with the following configuration:\n\nBugzilla Url\nBugzilla Username\nBugzilla Password\n\nAnd it is capable of receiving the information about bugs that have current user as:\n\nBug Creator\nBug Assignee\n\nI understand that you would like to store this info into the database. My current dilemma is developing the schema so that it would not be clugged by the overwhelming amount of the details in the bug record.\n\nMy current plan is to store serialized info into a blob and separately add fileds such as \n\nAssignee, \nCreator, \nBug Id, \nRecord update date \nCreation date \n\nFor searching, presuming that the database will play a role of cache, I would need your approval on this minimal set of searchable fields to establish a query string to use as key in the records. Please let me know if the above list is sufficient.", "count": 5, "is_private": false, "tags": [], "creation_time": "2011-06-09T22:40:46Z", "bug_id": 643570, "raw_text": "From Alex's email:\n\nI have created the plugin and now it is capable of connecting to bugzilla with the following configuration:\n\nBugzilla Url\nBugzilla Username\nBugzilla Password\n\nAnd it is capable of receiving the information about bugs that have current user as:\n\nBug Creator\nBug Assignee\n\nI understand that you would like to store this info into the database. My current dilemma is developing the schema so that it would not be clugged by the overwhelming amount of the details in the bug record.\n\nMy current plan is to store serialized info into a blob and separately add fileds such as \n\nAssignee, \nCreator, \nBug Id, \nRecord update date \nCreation date \n\nFor searching, presuming that the database will play a role of cache, I would need your approval on this minimal set of searchable fields to establish a query string to use as key in the records. Please let me know if the above list is sufficient.", "id": 5523656, "time": "2011-06-09T22:40:46Z"}, {"id": 5523658, "time": "2011-06-09T22:41:32Z", "is_private": false, "tags": [], "raw_text": "(In reply to comment #5)\n \n> For searching, presuming that the database will play a role of cache, I\n> would need your approval on this minimal set of searchable fields to\n> establish a query string to use as key in the records. Please let me know if\n> the above list is sufficient.\n\nAl, can you advise?", "creation_time": "2011-06-09T22:41:32Z", "bug_id": 643570, "author": "malexis@mozilla.com", "count": 6, "text": "(In reply to comment #5)\n \n> For searching, presuming that the database will play a role of cache, I\n> would need your approval on this minimal set of searchable fields to\n> establish a query string to use as key in the records. Please let me know if\n> the above list is sufficient.\n\nAl, can you advise?", "attachment_id": null, "creator": "malexis@mozilla.com"}, {"is_private": false, "attachment_id": null, "bug_id": 643570, "creation_time": "2011-06-09T22:57:43Z", "raw_text": "(In reply to comment #5)\n> From Alex's email:\n> \n> I have created the plugin and now it is capable of connecting to bugzilla\n> with the following configuration:\n> \n> Bugzilla Url\n> Bugzilla Username\n> Bugzilla Password\n\nI'm not sure of what the above means, exactly.\n\nLeaving aside any and all other features, I need to be able to query bugzilla by bugzilla e-mail address (which is normally the username) and get public bug data back. One of the primary design considerations is that *no* password information would be collected by this plugin, thus avoiding any and all security issues by only consuming public bug data and not storing any passwords or private credentials within wordpress. Reading the above, it isn't clear that this need is being met. Am I misunderstanding?\n \n> And it is capable of receiving the information about bugs that have current\n> user as:\n> \n> Bug Creator\n> Bug Assignee\n> \n> I understand that you would like to store this info into the database. My\n> current dilemma is developing the schema so that it would not be clugged by\n> the overwhelming amount of the details in the bug record.\n> \n> My current plan is to store serialized info into a blob and separately add\n> fileds such as \n> \n> Assignee, \n> Creator, \n> Bug Id, \n> Record update date \n> Creation date \n> \n> For searching, presuming that the database will play a role of cache, I\n> would need your approval on this minimal set of searchable fields to\n> establish a query string to use as key in the records. Please let me know if\n> the above list is sufficient.\n\nBased on the spec (https://wiki.mozilla.org/QA/QMO/QMO_4.0), here is what I need for the plugin that is relevant here. This is an except.\n\nRequirements\n\nPulls aggregate data (not entire bug details) into new table in QMO's Wordpress DB\nAggregate numbers displayed with shortcode/template text should be hyperlinkable to bugzilla results page that will present bugs that are being aggregated (no need to store bug details in DB). \n\nProposed initial data to be pulled per user and displayed in version 1 of plugin:\n\n    Bugs opened (ever)\n    Bugs opened within last x days (probably 30)\n    Bugs confirmed (ever)\n    Bugs verified (ever) \n\nAl's current comment: All of the four above functions should return simply a number that is usable in the Wordpress template and hyperlinks back to a page that brings up the bugzilla query that shows the details on bugzilla itself.\n\nIn other words, If bugs opened for User X is \"40\", that \"40\" should just show \"40\" with a hyperlink to a Bugzilla search page that shows \"Bugs opened by User X.\" From there, people could drill as deep as they want because they'll actually be on Bugzilla.\n\nI'm not sure if the data being stored in the Wordpress DB, as proposed above, really matches to this need. We don't need to pull much data. We just need to create aggregate numbers based on opener, opened data, confirmation by user, and verified by user with links back to bugzilla.\n\nDoes this make sense?", "tags": [], "creator": "albill@gmail.com", "time": "2011-06-09T22:57:43Z", "author": "albill@gmail.com", "id": 5523697, "text": "(In reply to comment #5)\n> From Alex's email:\n> \n> I have created the plugin and now it is capable of connecting to bugzilla\n> with the following configuration:\n> \n> Bugzilla Url\n> Bugzilla Username\n> Bugzilla Password\n\nI'm not sure of what the above means, exactly.\n\nLeaving aside any and all other features, I need to be able to query bugzilla by bugzilla e-mail address (which is normally the username) and get public bug data back. One of the primary design considerations is that *no* password information would be collected by this plugin, thus avoiding any and all security issues by only consuming public bug data and not storing any passwords or private credentials within wordpress. Reading the above, it isn't clear that this need is being met. Am I misunderstanding?\n \n> And it is capable of receiving the information about bugs that have current\n> user as:\n> \n> Bug Creator\n> Bug Assignee\n> \n> I understand that you would like to store this info into the database. My\n> current dilemma is developing the schema so that it would not be clugged by\n> the overwhelming amount of the details in the bug record.\n> \n> My current plan is to store serialized info into a blob and separately add\n> fileds such as \n> \n> Assignee, \n> Creator, \n> Bug Id, \n> Record update date \n> Creation date \n> \n> For searching, presuming that the database will play a role of cache, I\n> would need your approval on this minimal set of searchable fields to\n> establish a query string to use as key in the records. Please let me know if\n> the above list is sufficient.\n\nBased on the spec (https://wiki.mozilla.org/QA/QMO/QMO_4.0), here is what I need for the plugin that is relevant here. This is an except.\n\nRequirements\n\nPulls aggregate data (not entire bug details) into new table in QMO's Wordpress DB\nAggregate numbers displayed with shortcode/template text should be hyperlinkable to bugzilla results page that will present bugs that are being aggregated (no need to store bug details in DB). \n\nProposed initial data to be pulled per user and displayed in version 1 of plugin:\n\n    Bugs opened (ever)\n    Bugs opened within last x days (probably 30)\n    Bugs confirmed (ever)\n    Bugs verified (ever) \n\nAl's current comment: All of the four above functions should return simply a number that is usable in the Wordpress template and hyperlinks back to a page that brings up the bugzilla query that shows the details on bugzilla itself.\n\nIn other words, If bugs opened for User X is \"40\", that \"40\" should just show \"40\" with a hyperlink to a Bugzilla search page that shows \"Bugs opened by User X.\" From there, people could drill as deep as they want because they'll actually be on Bugzilla.\n\nI'm not sure if the data being stored in the Wordpress DB, as proposed above, really matches to this need. We don't need to pull much data. We just need to create aggregate numbers based on opener, opened data, confirmation by user, and verified by user with links back to bugzilla.\n\nDoes this make sense?", "count": 7}, {"attachment_id": null, "creator": "chrismore.bugzilla@gmail.com", "author": "chrismore.bugzilla@gmail.com", "count": 8, "text": "@Al: This makes sense to me and your requirements is exactly how I read it too. I will get a phone call set up with Alex to make sure we are all on the same page.", "is_private": false, "tags": [], "creation_time": "2011-06-09T23:59:08Z", "bug_id": 643570, "raw_text": "@Al: This makes sense to me and your requirements is exactly how I read it too. I will get a phone call set up with Alex to make sure we are all on the same page.", "id": 5523850, "time": "2011-06-09T23:59:08Z"}, {"time": "2011-06-14T21:47:59Z", "id": 5532511, "is_private": false, "creation_time": "2011-06-14T21:47:59Z", "bug_id": 643570, "raw_text": "Documentation links:\n\nhttp://www.bugzilla.org/docs/4.0/en/html/api/Bugzilla/WebService.html (search for \"logging in\")\n\nFrom Bugzilla API person: \"If for example you do a Bug.get on a public bug in Bugzilla, it will return the bug's data back. But if it is private it will throw an error that you must login first.\"", "tags": [], "author": "chrismore.bugzilla@gmail.com", "text": "Documentation links:\n\nhttp://www.bugzilla.org/docs/4.0/en/html/api/Bugzilla/WebService.html (search for \"logging in\")\n\nFrom Bugzilla API person: \"If for example you do a Bug.get on a public bug in Bugzilla, it will return the bug's data back. But if it is private it will throw an error that you must login first.\"", "count": 9, "attachment_id": null, "creator": "chrismore.bugzilla@gmail.com"}, {"text": "Notes from the meeting:\n\n1. Break plugin into two pieces:\n   a. PHP script for cron job that requests aggregated data and polulates the db with it\n   b. Redo the plugin to pull the cached data from the DB.\n\n2. Enable anonymous access for the script to the bugzilla", "count": 10, "author": "apodgorny@mozilla.com", "creator": "apodgorny@mozilla.com", "attachment_id": null, "time": "2011-06-14T21:59:06Z", "id": 5532546, "raw_text": "Notes from the meeting:\n\n1. Break plugin into two pieces:\n   a. PHP script for cron job that requests aggregated data and polulates the db with it\n   b. Redo the plugin to pull the cached data from the DB.\n\n2. Enable anonymous access for the script to the bugzilla", "creation_time": "2011-06-14T21:59:06Z", "bug_id": 643570, "tags": [], "is_private": false}, {"id": 5536255, "time": "2011-06-16T10:00:52Z", "author": "apodgorny@mozilla.com", "count": 11, "text": "Progress: got the webservice to return data anonymously. Turns out the library adopted from another mozilla project had a logical error when it comes to omitting login step for anonymous requests. \n\nCreated new schema for aggregated data.\n\nProceeding to write the script to populate database. \n\nHaving a question: where will my script get the list of all wp users to get aggregate data for?\nIs there a table that i can read it from? If so, where do I find the schema?", "is_private": false, "attachment_id": null, "tags": [], "creator": "apodgorny@mozilla.com", "bug_id": 643570, "creation_time": "2011-06-16T10:00:52Z", "raw_text": "Progress: got the webservice to return data anonymously. Turns out the library adopted from another mozilla project had a logical error when it comes to omitting login step for anonymous requests. \n\nCreated new schema for aggregated data.\n\nProceeding to write the script to populate database. \n\nHaving a question: where will my script get the list of all wp users to get aggregate data for?\nIs there a table that i can read it from? If so, where do I find the schema?"}, {"creator": "craigcook.bugz@gmail.com", "attachment_id": null, "count": 12, "text": "(In reply to comment #11)\n\n> Having a question: where will my script get the list of all wp users to get\n> aggregate data for?\n> Is there a table that i can read it from? If so, where do I find the schema?\n\nThey're kept in the WordPress database, in the wp_users table. See  http://codex.wordpress.org/Database_Description#Table:_wp_users\n\nNote that the \"wp_\" prefix is variable, not hardcoded, so you'll want to get $table_prefix from wp-config. \n\nEach user also gets a status assigned to indicate whether they're active or inactive. We probably only need to fetch data for active users (those who have completed registration, not spammers or bots or failed signups).", "author": "craigcook.bugz@gmail.com", "tags": [], "creation_time": "2011-06-16T15:43:50Z", "bug_id": 643570, "raw_text": "(In reply to comment #11)\n\n> Having a question: where will my script get the list of all wp users to get\n> aggregate data for?\n> Is there a table that i can read it from? If so, where do I find the schema?\n\nThey're kept in the WordPress database, in the wp_users table. See  http://codex.wordpress.org/Database_Description#Table:_wp_users\n\nNote that the \"wp_\" prefix is variable, not hardcoded, so you'll want to get $table_prefix from wp-config. \n\nEach user also gets a status assigned to indicate whether they're active or inactive. We probably only need to fetch data for active users (those who have completed registration, not spammers or bots or failed signups).", "is_private": false, "id": 5536738, "time": "2011-06-16T15:43:50Z"}, {"id": 5541168, "time": "2011-06-19T00:31:28Z", "is_private": false, "tags": [], "raw_text": "Please verify my interpretation of the queries:\n\n    Bugs opened (ever):\nAs a CREATOR of the bug, number of bugs existing with any status in all times\n    Bugs opened within last x days (probably 30):\nAs a CREATOR of the bug, number of bugs existing with any status in last 30 days\n    Bugs confirmed (ever):\nAs an assignee (ASSIGNED_TO) of the bug, number of bugs existing with IS_CONFIRMED = 1\n    Bugs verified (ever):\nAs a QA_CONTACT of the bug, number of bugs existing with status VERIFIED", "bug_id": 643570, "creation_time": "2011-06-19T00:31:28Z", "author": "apodgorny@mozilla.com", "text": "Please verify my interpretation of the queries:\n\n    Bugs opened (ever):\nAs a CREATOR of the bug, number of bugs existing with any status in all times\n    Bugs opened within last x days (probably 30):\nAs a CREATOR of the bug, number of bugs existing with any status in last 30 days\n    Bugs confirmed (ever):\nAs an assignee (ASSIGNED_TO) of the bug, number of bugs existing with IS_CONFIRMED = 1\n    Bugs verified (ever):\nAs a QA_CONTACT of the bug, number of bugs existing with status VERIFIED", "count": 13, "attachment_id": null, "creator": "apodgorny@mozilla.com"}, {"tags": [], "raw_text": "(In reply to comment #13)\n> Please verify my interpretation of the queries:\n> \n>     Bugs opened (ever):\n> As a CREATOR of the bug, number of bugs existing with any status in all times\n>     Bugs opened within last x days (probably 30):\n> As a CREATOR of the bug, number of bugs existing with any status in last 30\n> days\n\nAs long as the open date is within the last 30 days.\n\n>     Bugs confirmed (ever):\n> As an assignee (ASSIGNED_TO) of the bug, number of bugs existing with\n> IS_CONFIRMED = 1\n\nAssignee doesn't matter. People confirm bugs that are not assigned to themselves. We should be watching if the person in question marked the bug as confirmed only.\n\n>     Bugs verified (ever):\n> As a QA_CONTACT of the bug, number of bugs existing with status VERIFIED\n\n QA Contact is not relevant. That field isn't actually used for anything useful by anyone. We should be tracking bugs where the individual in question changed the resolution status to verified.", "bug_id": 643570, "creation_time": "2011-06-20T16:29:22Z", "is_private": false, "id": 5542782, "time": "2011-06-20T16:29:22Z", "creator": "albill@gmail.com", "attachment_id": null, "count": 14, "text": "(In reply to comment #13)\n> Please verify my interpretation of the queries:\n> \n>     Bugs opened (ever):\n> As a CREATOR of the bug, number of bugs existing with any status in all times\n>     Bugs opened within last x days (probably 30):\n> As a CREATOR of the bug, number of bugs existing with any status in last 30\n> days\n\nAs long as the open date is within the last 30 days.\n\n>     Bugs confirmed (ever):\n> As an assignee (ASSIGNED_TO) of the bug, number of bugs existing with\n> IS_CONFIRMED = 1\n\nAssignee doesn't matter. People confirm bugs that are not assigned to themselves. We should be watching if the person in question marked the bug as confirmed only.\n\n>     Bugs verified (ever):\n> As a QA_CONTACT of the bug, number of bugs existing with status VERIFIED\n\n QA Contact is not relevant. That field isn't actually used for anything useful by anyone. We should be tracking bugs where the individual in question changed the resolution status to verified.", "author": "albill@gmail.com"}, {"tags": [], "creator": "apodgorny@mozilla.com", "bug_id": 643570, "creation_time": "2011-06-21T08:18:22Z", "raw_text": "To my knowledge, Bugzilla API does not provide direct information about person who confirmed or verified the bug, however we can do compound queries asking for bugs with a particular \"reporter\", \"creator\", \"assignee\" or \"qa contact\" in one clause and in it's status in the other.\n\nThat raises two questions:\n\nQuestion 1: is the person who confirms the bug necessarily among the above list of roles? If yes, which one?\n\nQuestion 2: is the person who verifies the bug necessarily among the above list of roles? If yes, which one?", "attachment_id": null, "is_private": false, "text": "To my knowledge, Bugzilla API does not provide direct information about person who confirmed or verified the bug, however we can do compound queries asking for bugs with a particular \"reporter\", \"creator\", \"assignee\" or \"qa contact\" in one clause and in it's status in the other.\n\nThat raises two questions:\n\nQuestion 1: is the person who confirms the bug necessarily among the above list of roles? If yes, which one?\n\nQuestion 2: is the person who verifies the bug necessarily among the above list of roles? If yes, which one?", "count": 15, "id": 5544771, "time": "2011-06-21T08:18:22Z", "author": "apodgorny@mozilla.com"}, {"text": "Progress: coding is done, documentation is done as well. The last things that remain uncertain are the queries to bugzilla. (See prev. comment)", "count": 16, "author": "apodgorny@mozilla.com", "creator": "apodgorny@mozilla.com", "attachment_id": null, "id": 5546078, "time": "2011-06-21T18:24:20Z", "tags": [], "raw_text": "Progress: coding is done, documentation is done as well. The last things that remain uncertain are the queries to bugzilla. (See prev. comment)", "creation_time": "2011-06-21T18:24:20Z", "bug_id": 643570, "is_private": false}, {"creator": "albill@gmail.com", "attachment_id": null, "text": "(In reply to comment #15)\n> That raises two questions:\n> \n> Question 1: is the person who confirms the bug necessarily among the above\n> list of roles? If yes, which one?\n\n No. People look for unconfirmed bugs in certain product areas without any prior association with the bug.\n \n> Question 2: is the person who verifies the bug necessarily among the above\n> list of roles? If yes, which one?\n\n Same answer as #1.", "count": 17, "author": "albill@gmail.com", "creation_time": "2011-06-21T19:51:32Z", "bug_id": 643570, "raw_text": "(In reply to comment #15)\n> That raises two questions:\n> \n> Question 1: is the person who confirms the bug necessarily among the above\n> list of roles? If yes, which one?\n\n No. People look for unconfirmed bugs in certain product areas without any prior association with the bug.\n \n> Question 2: is the person who verifies the bug necessarily among the above\n> list of roles? If yes, which one?\n\n Same answer as #1.", "tags": [], "is_private": false, "time": "2011-06-21T19:51:32Z", "id": 5546297}, {"tags": [], "creator": "apodgorny@mozilla.com", "creation_time": "2011-06-22T11:09:27Z", "bug_id": 643570, "raw_text": "In this case, I don't see a way to search for \"confirmer\" or \"verifier\" through API without parsing the history of all available bugs. How would you like me to proceed from here?", "attachment_id": null, "is_private": false, "count": 18, "text": "In this case, I don't see a way to search for \"confirmer\" or \"verifier\" through API without parsing the history of all available bugs. How would you like me to proceed from here?", "id": 5547845, "time": "2011-06-22T11:09:27Z", "author": "apodgorny@mozilla.com"}, {"creation_time": "2011-06-23T22:44:22Z", "bug_id": 643570, "raw_text": "Alex: Can you post your latest code to github or another location that the team can get to? We know it is not complete and there are still some open questions. I am going to investigate the confirmer and verifier fields.", "tags": [], "is_private": false, "time": "2011-06-23T22:44:22Z", "id": 5552669, "creator": "chrismore.bugzilla@gmail.com", "attachment_id": null, "text": "Alex: Can you post your latest code to github or another location that the team can get to? We know it is not complete and there are still some open questions. I am going to investigate the confirmer and verifier fields.", "count": 19, "author": "chrismore.bugzilla@gmail.com"}, {"author": "chrismore.bugzilla@gmail.com", "count": 20, "text": "Alex: I talked to the Bugzilla folks and they said you should be able to retrieve the confirmer and verifier from the Bug.history API method. More info here:\n\nhttp://www.bugzilla.org/docs/tip/en/html/api/Bugzilla/WebService/Bug.html#history\n\nYou will still have to parse the results, but it is also publicly accessible.", "attachment_id": null, "creator": "chrismore.bugzilla@gmail.com", "time": "2011-06-23T23:38:28Z", "id": 5552800, "is_private": false, "bug_id": 643570, "creation_time": "2011-06-23T23:38:28Z", "raw_text": "Alex: I talked to the Bugzilla folks and they said you should be able to retrieve the confirmer and verifier from the Bug.history API method. More info here:\n\nhttp://www.bugzilla.org/docs/tip/en/html/api/Bugzilla/WebService/Bug.html#history\n\nYou will still have to parse the results, but it is also publicly accessible.", "tags": []}, {"attachment_id": null, "creator": "apodgorny@mozilla.com", "author": "apodgorny@mozilla.com", "count": 21, "text": "Yes, I know it is possible to do that, however this means that we would have to access sequentially each of half a million bugs contained in bugzilla by id every time the script runs. This could take a very long time, not to mention it could keep bugzilla server very busy. I can go ahead and implement that, but once again I am concerned about it's performance.\n\nI am attaching a working copy of the plugin and the aggregator script herein.", "is_private": false, "creation_time": "2011-06-24T18:22:51Z", "bug_id": 643570, "raw_text": "Yes, I know it is possible to do that, however this means that we would have to access sequentially each of half a million bugs contained in bugzilla by id every time the script runs. This could take a very long time, not to mention it could keep bugzilla server very busy. I can go ahead and implement that, but once again I am concerned about it's performance.\n\nI am attaching a working copy of the plugin and the aggregator script herein.", "tags": [], "time": "2011-06-24T18:22:51Z", "id": 5554520}, {"raw_text": "", "creation_time": "2011-06-24T18:24:13Z", "bug_id": 643570, "tags": [], "is_private": false, "time": "2011-06-24T18:24:13Z", "id": 5554524, "creator": "apodgorny@mozilla.com", "attachment_id": 541729, "count": 22, "text": "Created attachment 541729\nBugzilla Aggregator. Version 01.", "author": "apodgorny@mozilla.com"}, {"time": "2011-06-24T19:30:55Z", "id": 5554744, "creation_time": "2011-06-24T19:30:55Z", "bug_id": 643570, "raw_text": "Al/Craig: Do you want to push off the confirmer/verifier until a version 2 so we can try to get this out the door by the end of Q2? I'm going to vote yes. Please install version 01 from Alex and confirm it is what you are looking for.\n\nCraig: You might as well integrate it into stage so we can test it out.", "tags": [], "is_private": false, "count": 23, "text": "Al/Craig: Do you want to push off the confirmer/verifier until a version 2 so we can try to get this out the door by the end of Q2? I'm going to vote yes. Please install version 01 from Alex and confirm it is what you are looking for.\n\nCraig: You might as well integrate it into stage so we can test it out.", "author": "chrismore.bugzilla@gmail.com", "creator": "chrismore.bugzilla@gmail.com", "attachment_id": null}, {"text": "Craig, you can find readme.txt with installation instructions within one of the zips inside. Please feel free to ask me any additional questions, if any.", "count": 24, "author": "apodgorny@mozilla.com", "creator": "apodgorny@mozilla.com", "attachment_id": null, "id": 5554826, "time": "2011-06-24T20:05:11Z", "tags": [], "raw_text": "Craig, you can find readme.txt with installation instructions within one of the zips inside. Please feel free to ask me any additional questions, if any.", "bug_id": 643570, "creation_time": "2011-06-24T20:05:11Z", "is_private": false}, {"time": "2011-06-24T20:30:38Z", "id": 5554902, "creation_time": "2011-06-24T20:30:38Z", "bug_id": 643570, "raw_text": "(In reply to comment #23)\n> Al/Craig: Do you want to push off the confirmer/verifier until a version 2\n> so we can try to get this out the door by the end of Q2? I'm going to vote\n> yes. Please install version 01 from Alex and confirm it is what you are\n> looking for.\n\nYeah, lets get rev 01 out the door.\n\nIs there really no way to get the data for 02 without crawling tens or hundreds of thousands of entries?", "tags": [], "is_private": false, "text": "(In reply to comment #23)\n> Al/Craig: Do you want to push off the confirmer/verifier until a version 2\n> so we can try to get this out the door by the end of Q2? I'm going to vote\n> yes. Please install version 01 from Alex and confirm it is what you are\n> looking for.\n\nYeah, lets get rev 01 out the door.\n\nIs there really no way to get the data for 02 without crawling tens or hundreds of thousands of entries?", "count": 25, "author": "albill@gmail.com", "creator": "albill@gmail.com", "attachment_id": null}, {"is_private": false, "bug_id": 643570, "creation_time": "2011-06-24T21:01:19Z", "raw_text": "Al: It seems like getting the data for 02 would be more complicated since you would have to get the history for all bugs, walk through the results, and find users in the results that are in the QMO database, and then count and aggregate numbers for each of the users. What makes it more complicated is that the history data is accessed for a bug ID or a set of bug IDs. There is no way to get the history for a particular user who confirmed a bug without getting all of the bug data and then finding that user in the history. A custom SQL statement could be written on the bugzilla side to do it I'm sure, but we have to work through the API. \n\nAlex: Is that how you interpret the complexity of getting this data?", "tags": [], "time": "2011-06-24T21:01:19Z", "id": 5555005, "attachment_id": null, "creator": "chrismore.bugzilla@gmail.com", "author": "chrismore.bugzilla@gmail.com", "text": "Al: It seems like getting the data for 02 would be more complicated since you would have to get the history for all bugs, walk through the results, and find users in the results that are in the QMO database, and then count and aggregate numbers for each of the users. What makes it more complicated is that the history data is accessed for a bug ID or a set of bug IDs. There is no way to get the history for a particular user who confirmed a bug without getting all of the bug data and then finding that user in the history. A custom SQL statement could be written on the bugzilla side to do it I'm sure, but we have to work through the API. \n\nAlex: Is that how you interpret the complexity of getting this data?", "count": 26}, {"creator": "craigcook.bugz@gmail.com", "attachment_id": null, "text": "I'm still not able to get this working and I'm not sure what I may be doing wrong. The database tables are empty. I'm also not sure how to display results; the readme doesn't contain a usage example, and the code from the previous readme doesn't work.\n\nAlex, is there any way you can put this online somewhere and show me a working example? Do you have access to the QMO repository in Subversion?\n\nAlso, it would be good to bundle it all into a single folder to help keep the plugins folder tidy (we've got a lot of plugins).", "count": 27, "author": "craigcook.bugz@gmail.com", "bug_id": 643570, "creation_time": "2011-06-27T21:25:10Z", "raw_text": "I'm still not able to get this working and I'm not sure what I may be doing wrong. The database tables are empty. I'm also not sure how to display results; the readme doesn't contain a usage example, and the code from the previous readme doesn't work.\n\nAlex, is there any way you can put this online somewhere and show me a working example? Do you have access to the QMO repository in Subversion?\n\nAlso, it would be good to bundle it all into a single folder to help keep the plugins folder tidy (we've got a lot of plugins).", "tags": [], "is_private": false, "time": "2011-06-27T21:25:10Z", "id": 5559796}, {"author": "apodgorny@mozilla.com", "count": 28, "text": "Chris: yes, this is my interpretation as well. Either we ask them to add verifier and confirmer as search parameters to the API or we crawl the history :(\n\nCraig, the usage example would be printing out the results of the function call like so:\n\n<?php print_r(get_bugzilla_stats()); ?>\n\nBut if the table is empty, than something else has gone wrong. The easiest way would be to set up a time and work on installation together. Please send me an invite and we can do this over skype if you wish. My first guess is to blame the difference in the wordpress configuration. Like I said, I used a fresh wordpress copy for development.\n\nAs far as bundling it into a single folder, it is your choice, you can unzip the aggregator script into the bugzilla plugin folder. It should make no difference. I just assumed that you keep cron jobs in a separate place.", "attachment_id": null, "creator": "apodgorny@mozilla.com", "time": "2011-06-28T08:08:01Z", "id": 5561103, "is_private": false, "raw_text": "Chris: yes, this is my interpretation as well. Either we ask them to add verifier and confirmer as search parameters to the API or we crawl the history :(\n\nCraig, the usage example would be printing out the results of the function call like so:\n\n<?php print_r(get_bugzilla_stats()); ?>\n\nBut if the table is empty, than something else has gone wrong. The easiest way would be to set up a time and work on installation together. Please send me an invite and we can do this over skype if you wish. My first guess is to blame the difference in the wordpress configuration. Like I said, I used a fresh wordpress copy for development.\n\nAs far as bundling it into a single folder, it is your choice, you can unzip the aggregator script into the bugzilla plugin folder. It should make no difference. I just assumed that you keep cron jobs in a separate place.", "creation_time": "2011-06-28T08:08:01Z", "bug_id": 643570, "tags": []}, {"id": 5561350, "author": "sdaugherty@gmail.com", "time": "2011-06-28T12:26:57Z", "text": "It might be worth asking the BMO team for an extension that adds the queries you need to the API, since it's going to be simpler and probably less resource intensive than crawling history.", "count": 29, "is_private": false, "attachment_id": null, "creator": "sdaugherty@gmail.com", "tags": [], "raw_text": "It might be worth asking the BMO team for an extension that adds the queries you need to the API, since it's going to be simpler and probably less resource intensive than crawling history.", "bug_id": 643570, "creation_time": "2011-06-28T12:26:57Z"}, {"is_private": false, "raw_text": "Could you please point me in the direction of the right person?", "creation_time": "2011-06-28T16:51:06Z", "bug_id": 643570, "tags": [], "time": "2011-06-28T16:51:06Z", "id": 5561996, "attachment_id": null, "creator": "apodgorny@mozilla.com", "author": "apodgorny@mozilla.com", "text": "Could you please point me in the direction of the right person?", "count": 30}, {"creator": "glob@mozilla.com", "tags": [], "raw_text": "(In reply to comment #28)\n> Chris: yes, this is my interpretation as well. Either we ask them to add\n> verifier and confirmer as search parameters to the API or we crawl the\n> history :(\n\ni'll investigate how much work is involved in adding these parameters to search for you.", "bug_id": 643570, "creation_time": "2011-06-29T18:20:36Z", "is_private": false, "attachment_id": null, "count": 31, "text": "(In reply to comment #28)\n> Chris: yes, this is my interpretation as well. Either we ask them to add\n> verifier and confirmer as search parameters to the API or we crawl the\n> history :(\n\ni'll investigate how much work is involved in adding these parameters to search for you.", "id": 5565032, "author": "glob@mozilla.com", "time": "2011-06-29T18:20:36Z"}, {"id": 5569636, "time": "2011-07-01T15:37:09Z", "tags": [], "raw_text": "I can take this one. Will look at the requirements and come back with a plan on rolling the changes out. We will create bugzilla.mozilla.org bugs for the changes needed so we can track them separately.\n\ndkl", "bug_id": 643570, "creation_time": "2011-07-01T15:37:09Z", "is_private": false, "count": 32, "text": "I can take this one. Will look at the requirements and come back with a plan on rolling the changes out. We will create bugzilla.mozilla.org bugs for the changes needed so we can track them separately.\n\ndkl", "author": "dkl@mozilla.com", "creator": "dkl@mozilla.com", "attachment_id": null}, {"tags": [], "creator": "dkl@mozilla.com", "bug_id": 643570, "creation_time": "2011-07-05T16:43:37Z", "raw_text": "After discussing this one with other Bugzilla developers we think it is best for now to go the route of adding custom XMLRPC WebService API method(s) for returning the information you need for your plugin. The other alternative was to extend the search code on the backend to support querying on confirmer or verifier but with upcoming releases of Bugzilla, the code will likely be much different and our patches would need to be re-written. The API methods are more of a guarantee to continue to work.\n\nThat being said, what is the data that you would need the methods to return to satisfy your requirements? A simple count or a full list of bug ids? I feel the latter since you will be able to use that to make a buglist.cgi query that can take the user to the same bug list on BMO. (i.e. buglist.cgi?bug_id=BUG1,BUG2,...).\n\nThe API methods could be called:\n\nBMO.getBugsConfirmer({ names => ['dkl@mozilla.com',...] })\n\nBMO.getBugsVerifier({ names => ['dkl@mozilla.com',...] })\n\nWe could even combine them into one using some sort of flag to trigger the proper query but not really necessary at this point.\n\nSound good?\n\ndkl", "attachment_id": null, "is_private": false, "text": "After discussing this one with other Bugzilla developers we think it is best for now to go the route of adding custom XMLRPC WebService API method(s) for returning the information you need for your plugin. The other alternative was to extend the search code on the backend to support querying on confirmer or verifier but with upcoming releases of Bugzilla, the code will likely be much different and our patches would need to be re-written. The API methods are more of a guarantee to continue to work.\n\nThat being said, what is the data that you would need the methods to return to satisfy your requirements? A simple count or a full list of bug ids? I feel the latter since you will be able to use that to make a buglist.cgi query that can take the user to the same bug list on BMO. (i.e. buglist.cgi?bug_id=BUG1,BUG2,...).\n\nThe API methods could be called:\n\nBMO.getBugsConfirmer({ names => ['dkl@mozilla.com',...] })\n\nBMO.getBugsVerifier({ names => ['dkl@mozilla.com',...] })\n\nWe could even combine them into one using some sort of flag to trigger the proper query but not really necessary at this point.\n\nSound good?\n\ndkl", "count": 33, "id": 5574134, "time": "2011-07-05T16:43:37Z", "author": "dkl@mozilla.com"}, {"is_private": false, "tags": [], "raw_text": "Thank you for investigating, David. The ideal solution would be to extend the search method, but if it is not the option, I would have to say a list of ids would be my best bet. At least we would not have to ask for additional modifications to the method should we need another piece of information from the bugs returned. We could just use Bug.get to request them one by one, should the need arise.\n\nWill this patch be documented somewhere?", "bug_id": 643570, "creation_time": "2011-07-05T21:33:14Z", "id": 5574944, "time": "2011-07-05T21:33:14Z", "attachment_id": null, "creator": "apodgorny@mozilla.com", "author": "apodgorny@mozilla.com", "text": "Thank you for investigating, David. The ideal solution would be to extend the search method, but if it is not the option, I would have to say a list of ids would be my best bet. At least we would not have to ask for additional modifications to the method should we need another piece of information from the bugs returned. We could just use Bug.get to request them one by one, should the need arise.\n\nWill this patch be documented somewhere?", "count": 34}, {"author": "albill@gmail.com", "count": 35, "text": "(In reply to comment #33) \n> That being said, what is the data that you would need the methods to return\n> to satisfy your requirements? A simple count or a full list of bug ids? I\n> feel the latter since you will be able to use that to make a buglist.cgi\n> query that can take the user to the same bug list on BMO. (i.e.\n> buglist.cgi?bug_id=BUG1,BUG2,...).\n\n I think the best solution for the widest use is a list of Bug IDs.\n \n> The API methods could be called:\n> \n> BMO.getBugsConfirmer({ names => ['dkl@mozilla.com',...] })\n> \n> BMO.getBugsVerifier({ names => ['dkl@mozilla.com',...] })\n> \n> We could even combine them into one using some sort of flag to trigger the\n> proper query but not really necessary at this point.\n> \n> Sound good?\n\n From my point of view, yes.", "attachment_id": null, "creator": "albill@gmail.com", "id": 5575093, "time": "2011-07-05T22:28:47Z", "is_private": false, "tags": [], "raw_text": "(In reply to comment #33) \n> That being said, what is the data that you would need the methods to return\n> to satisfy your requirements? A simple count or a full list of bug ids? I\n> feel the latter since you will be able to use that to make a buglist.cgi\n> query that can take the user to the same bug list on BMO. (i.e.\n> buglist.cgi?bug_id=BUG1,BUG2,...).\n\n I think the best solution for the widest use is a list of Bug IDs.\n \n> The API methods could be called:\n> \n> BMO.getBugsConfirmer({ names => ['dkl@mozilla.com',...] })\n> \n> BMO.getBugsVerifier({ names => ['dkl@mozilla.com',...] })\n> \n> We could even combine them into one using some sort of flag to trigger the\n> proper query but not really necessary at this point.\n> \n> Sound good?\n\n From my point of view, yes.", "bug_id": 643570, "creation_time": "2011-07-05T22:28:47Z"}, {"is_private": false, "tags": [], "creation_time": "2011-07-06T21:45:13Z", "bug_id": 643570, "raw_text": "This version allows for a username being passed directly into the plugin function. For usage example see included readme.txt", "id": 5577440, "time": "2011-07-06T21:45:13Z", "attachment_id": 544347, "creator": "apodgorny@mozilla.com", "author": "apodgorny@mozilla.com", "text": "Created attachment 544347\nBugzilla Aggregator. Version 02.\n\nThis version allows for a username being passed directly into the plugin function. For usage example see included readme.txt", "count": 36}, {"author": "apodgorny@mozilla.com", "text": "Created attachment 544960\nbugzilla.php\n\nCraig, I am adding two functions to produce urls to bugzilla bug search pages you requested. Usage examples are in the comments. Please replace existing bugzilla.php file in the plugin folder with this one.", "count": 37, "attachment_id": 544960, "creator": "apodgorny@mozilla.com", "id": 5582429, "time": "2011-07-09T07:45:29Z", "is_private": false, "tags": [], "creation_time": "2011-07-09T07:45:29Z", "bug_id": 643570, "raw_text": "Craig, I am adding two functions to produce urls to bugzilla bug search pages you requested. Usage examples are in the comments. Please replace existing bugzilla.php file in the plugin folder with this one."}, {"count": 38, "text": "Created attachment 546170\nPatch adding new webservice methods for QMO (v1)\n\nPatch attached that adds new methods BMO.getBugsVerifier and BMO.getBugsConfirmer for use by QMO Wordpress plugin. \n\nCurrently it returns a hash of email addresses each pointing to a list of bug ids that match for whichever method you use. \n\nAlso it just does simple auth of the client to make sure they are logged in but will return another user's bug list since normally bug ids are ok and do not give away any sensitive information.\n\nQuestion: Should we limit it to the user's own bug list and not allow others to get lists for someone else?\n\nPlease review\ndkl", "id": 5593621, "time": "2011-07-15T16:19:20Z", "author": "dkl@mozilla.com", "tags": [], "creator": "dkl@mozilla.com", "bug_id": 643570, "creation_time": "2011-07-15T16:19:20Z", "raw_text": "Patch attached that adds new methods BMO.getBugsVerifier and BMO.getBugsConfirmer for use by QMO Wordpress plugin. \n\nCurrently it returns a hash of email addresses each pointing to a list of bug ids that match for whichever method you use. \n\nAlso it just does simple auth of the client to make sure they are logged in but will return another user's bug list since normally bug ids are ok and do not give away any sensitive information.\n\nQuestion: Should we limit it to the user's own bug list and not allow others to get lists for someone else?\n\nPlease review\ndkl", "is_private": false, "attachment_id": 546170}, {"attachment_id": null, "creator": "craigcook.bugz@gmail.com", "author": "craigcook.bugz@gmail.com", "count": 39, "text": "(In reply to comment #38)\n> Also it just does simple auth of the client to make sure they are logged in\n> but will return another user's bug list since normally bug ids are ok and do\n> not give away any sensitive information.\n> \n> Question: Should we limit it to the user's own bug list and not allow others\n> to get lists for someone else?\n\nFor our purposes on QMO we're specifically searching only public bugs and not passing any auth, so any private or security bugs are excluded. Essentially, QMO is an anonymous user, so every bug is treated as someone else's bug.", "is_private": false, "raw_text": "(In reply to comment #38)\n> Also it just does simple auth of the client to make sure they are logged in\n> but will return another user's bug list since normally bug ids are ok and do\n> not give away any sensitive information.\n> \n> Question: Should we limit it to the user's own bug list and not allow others\n> to get lists for someone else?\n\nFor our purposes on QMO we're specifically searching only public bugs and not passing any auth, so any private or security bugs are excluded. Essentially, QMO is an anonymous user, so every bug is treated as someone else's bug.", "bug_id": 643570, "creation_time": "2011-07-15T17:41:49Z", "tags": [], "time": "2011-07-15T17:41:49Z", "id": 5593823}, {"time": "2011-07-15T19:18:34Z", "id": 5594032, "is_private": false, "bug_id": 643570, "creation_time": "2011-07-15T19:18:34Z", "raw_text": "(In reply to comment #39)\n> For our purposes on QMO we're specifically searching only public bugs and\n> not passing any auth, so any private or security bugs are excluded.\n> Essentially, QMO is an anonymous user, so every bug is treated as someone\n> else's bug.\n\nAh ok. I missed earlier the part about public bugs only. That makes me feel better. I will submit a revised patch that only returns public ids. That does skew the results a little especially if the user in question is doing quite a bit of work verifying/confirming private bugs as well. So the numbers will seem lower than reality.\n\ndkl", "tags": [], "author": "dkl@mozilla.com", "count": 40, "text": "(In reply to comment #39)\n> For our purposes on QMO we're specifically searching only public bugs and\n> not passing any auth, so any private or security bugs are excluded.\n> Essentially, QMO is an anonymous user, so every bug is treated as someone\n> else's bug.\n\nAh ok. I missed earlier the part about public bugs only. That makes me feel better. I will submit a revised patch that only returns public ids. That does skew the results a little especially if the user in question is doing quite a bit of work verifying/confirming private bugs as well. So the numbers will seem lower than reality.\n\ndkl", "attachment_id": null, "creator": "dkl@mozilla.com"}, {"attachment_id": 546211, "creator": "dkl@mozilla.com", "author": "dkl@mozilla.com", "text": "Created attachment 546211\nPatch adding new webservice methods for QMO (v2)\n\nNew patch the filters out private bug ids.\n\ndkl", "count": 41, "is_private": false, "tags": [], "creation_time": "2011-07-15T19:53:21Z", "bug_id": 643570, "raw_text": "New patch the filters out private bug ids.\n\ndkl", "id": 5594081, "time": "2011-07-15T19:53:21Z"}, {"time": "2011-07-18T04:05:01Z", "id": 5595885, "creation_time": "2011-07-18T04:05:01Z", "bug_id": 643570, "raw_text": "Review of attachment 546211:\n-----------------------------------------------------------------\n\nare we better off taking this to a new bug which blocks this one, to avoid spamming the qmo team?\n\nr- due to the broken select in getBugsVerifier.\n\n::: extensions/BMO/lib/WebService.pm\n@@ +14,5 @@\n> +# by the Initial Developer are Copyright (C) 2011 the Mozilla Foundation. All\n> +# Rights Reserved.\n> +#\n> +# Contributor(s):\n> +#   Dave Lawrence <dkl@mozilla.com>)))\n\nnit: )))\n\n@@ +43,5 @@\n> +    @user_objects = map { Bugzilla::User->check($_) } @{ $params->{names} };\n> +\n> +    # start filtering to remove duplicate user ids\n> +    my %unique_users = map { $_->id => $_ } @user_objects;\n> +    @user_objects = values %unique_users;\n\nyou can do this without the transient variable with:\n  @user_objects = values %{{ map { $_->id => $_ } @user_objects }};\n\n@@ +52,5 @@\n> +                   FROM bugs_activity\n> +                        LEFT JOIN bug_group_map \n> +                        ON bugs_activity.bug_id = bug_group_map.bug_id\n> +                  WHERE bugs_activity.fieldid = ?\n> +                        AND bugs_activity.added = 'VERIFIED'\n\nthis should be:\n  AND bugs_activity.removed = 'UNCONFIRMED'\n  AND bugs_activity.added = 'NEW'\n\n@@ +81,5 @@\n> +    @user_objects = map { Bugzilla::User->check($_) } @{ $params->{names} };\n> +\n> +    # start filtering to remove duplicate user ids\n> +    my %unique_users = map { $_->id => $_ } @user_objects;\n> +    @user_objects = values %unique_users;\n\ndrop the transient variable here too please.\n\n@@ +130,5 @@\n> +\n> +=item B<Description>\n> +\n> +This method returns public bug ids that a given user has confirmed (changed from \n> +C<UNCONFIRMED> to C<NEW>) in the past. \n\nremove \"in the past\".\n\n@@ +134,5 @@\n> +C<UNCONFIRMED> to C<NEW>) in the past. \n> +\n> +=item B<Params>\n> +\n> +You pass a field called C<names> that is a list of Bugzilla user accounts to find bugs for.\n\n\"user accounts\" isn't clear enough in this context; it would be better to say:\n  You pass a field called C<names> that is a list of Bugzilla login names to find bugs for.\n\n@@ +138,5 @@\n> +You pass a field called C<names> that is a list of Bugzilla user accounts to find bugs for.\n> +\n> +=over\n> +\n> +=item C<names> (array) - An array of strings representing Bugzilla user accounts.\n\nagain you need to s/user accounts/login names/\n\n@@ +147,5 @@\n> +\n> +=over\n> +\n> +A hash of Bugzilla user accounts. Each account is an array of bug ids that the user has confirmed\n> +in the past.\n\ns/user accounts/login names/\n\n@@ +167,5 @@\n> +=back\n> +\n> +=back\n> +\n> +=head2 getBugsVerifier\n\nmy comments for getBugsConfirmer also apply to getBugsVerifier", "tags": [], "is_private": false, "text": "Comment on attachment 546211\nPatch adding new webservice methods for QMO (v2)\n\nReview of attachment 546211:\n-----------------------------------------------------------------\n\nare we better off taking this to a new bug which blocks this one, to avoid spamming the qmo team?\n\nr- due to the broken select in getBugsVerifier.\n\n::: extensions/BMO/lib/WebService.pm\n@@ +14,5 @@\n> +# by the Initial Developer are Copyright (C) 2011 the Mozilla Foundation. All\n> +# Rights Reserved.\n> +#\n> +# Contributor(s):\n> +#   Dave Lawrence <dkl@mozilla.com>)))\n\nnit: )))\n\n@@ +43,5 @@\n> +    @user_objects = map { Bugzilla::User->check($_) } @{ $params->{names} };\n> +\n> +    # start filtering to remove duplicate user ids\n> +    my %unique_users = map { $_->id => $_ } @user_objects;\n> +    @user_objects = values %unique_users;\n\nyou can do this without the transient variable with:\n  @user_objects = values %{{ map { $_->id => $_ } @user_objects }};\n\n@@ +52,5 @@\n> +                   FROM bugs_activity\n> +                        LEFT JOIN bug_group_map \n> +                        ON bugs_activity.bug_id = bug_group_map.bug_id\n> +                  WHERE bugs_activity.fieldid = ?\n> +                        AND bugs_activity.added = 'VERIFIED'\n\nthis should be:\n  AND bugs_activity.removed = 'UNCONFIRMED'\n  AND bugs_activity.added = 'NEW'\n\n@@ +81,5 @@\n> +    @user_objects = map { Bugzilla::User->check($_) } @{ $params->{names} };\n> +\n> +    # start filtering to remove duplicate user ids\n> +    my %unique_users = map { $_->id => $_ } @user_objects;\n> +    @user_objects = values %unique_users;\n\ndrop the transient variable here too please.\n\n@@ +130,5 @@\n> +\n> +=item B<Description>\n> +\n> +This method returns public bug ids that a given user has confirmed (changed from \n> +C<UNCONFIRMED> to C<NEW>) in the past. \n\nremove \"in the past\".\n\n@@ +134,5 @@\n> +C<UNCONFIRMED> to C<NEW>) in the past. \n> +\n> +=item B<Params>\n> +\n> +You pass a field called C<names> that is a list of Bugzilla user accounts to find bugs for.\n\n\"user accounts\" isn't clear enough in this context; it would be better to say:\n  You pass a field called C<names> that is a list of Bugzilla login names to find bugs for.\n\n@@ +138,5 @@\n> +You pass a field called C<names> that is a list of Bugzilla user accounts to find bugs for.\n> +\n> +=over\n> +\n> +=item C<names> (array) - An array of strings representing Bugzilla user accounts.\n\nagain you need to s/user accounts/login names/\n\n@@ +147,5 @@\n> +\n> +=over\n> +\n> +A hash of Bugzilla user accounts. Each account is an array of bug ids that the user has confirmed\n> +in the past.\n\ns/user accounts/login names/\n\n@@ +167,5 @@\n> +=back\n> +\n> +=back\n> +\n> +=head2 getBugsVerifier\n\nmy comments for getBugsConfirmer also apply to getBugsVerifier", "count": 42, "author": "glob@mozilla.com", "creator": "glob@mozilla.com", "attachment_id": 546211}, {"attachment_id": 546211, "creator": "dkl@mozilla.com", "author": "dkl@mozilla.com", "count": 43, "text": "Comment on attachment 546211\nPatch adding new webservice methods for QMO (v2)\n\nMoved work for the Bugzilla side of things to bug 672194.", "is_private": false, "raw_text": "Moved work for the Bugzilla side of things to bug 672194.", "bug_id": 643570, "creation_time": "2011-07-18T14:25:37Z", "tags": [], "time": "2011-07-18T14:25:37Z", "id": 5596404}, {"author": "dkl@mozilla.com", "text": "the new BMO API methods are on our test instance at https://bugzilla-stage-tip.mozilla.org if you want to test them with your plugin. Let me know if you need any more details to set it up.\n\ndkl", "count": 44, "attachment_id": null, "creator": "dkl@mozilla.com", "id": 5596665, "time": "2011-07-18T16:18:26Z", "is_private": false, "tags": [], "bug_id": 643570, "creation_time": "2011-07-18T16:18:26Z", "raw_text": "the new BMO API methods are on our test instance at https://bugzilla-stage-tip.mozilla.org if you want to test them with your plugin. Let me know if you need any more details to set it up.\n\ndkl"}, {"attachment_id": null, "creator": "dkl@mozilla.com", "author": "dkl@mozilla.com", "text": "(In reply to comment #44)\n> the new BMO API methods are on our test instance at\n> https://bugzilla-stage-tip.mozilla.org if you want to test them with your\n> plugin. Let me know if you need any more details to set it up.\n\nMatter of fact, I would prefer if you definitely test this against bugzilla-stage-tip first before I commit to our production code. This will minimize on any changes if needed to our production servers to fix any problems. I will wait for your sign off.\n\ndkl", "count": 45, "is_private": false, "creation_time": "2011-07-18T18:10:08Z", "bug_id": 643570, "raw_text": "(In reply to comment #44)\n> the new BMO API methods are on our test instance at\n> https://bugzilla-stage-tip.mozilla.org if you want to test them with your\n> plugin. Let me know if you need any more details to set it up.\n\nMatter of fact, I would prefer if you definitely test this against bugzilla-stage-tip first before I commit to our production code. This will minimize on any changes if needed to our production servers to fix any problems. I will wait for your sign off.\n\ndkl", "tags": [], "time": "2011-07-18T18:10:08Z", "id": 5596996}, {"count": 46, "text": "Has anyone had a chance to test out the new API methods on bugzilla-stage-tip.mozilla.org with your plugin work?\n\ndkl", "author": "dkl@mozilla.com", "creator": "dkl@mozilla.com", "attachment_id": null, "id": 5614732, "time": "2011-07-26T19:43:39Z", "tags": [], "raw_text": "Has anyone had a chance to test out the new API methods on bugzilla-stage-tip.mozilla.org with your plugin work?\n\ndkl", "creation_time": "2011-07-26T19:43:39Z", "bug_id": 643570, "is_private": false}, {"id": 5620328, "time": "2011-07-28T20:39:11Z", "is_private": false, "tags": [], "raw_text": "Github repo for plugin: https://github.com/Osmose/wp-bugzilla-stats", "creation_time": "2011-07-28T20:39:11Z", "bug_id": 643570, "author": "me@mkelly.me", "count": 47, "text": "Github repo for plugin: https://github.com/Osmose/wp-bugzilla-stats", "attachment_id": null, "creator": "me@mkelly.me"}, {"attachment_id": null, "creator": "me@mkelly.me", "author": "me@mkelly.me", "count": 48, "text": "David:\n\nWhile trying to test this I got the following error back from the staging server:\n\n\"Application failed during request deserialization: no element found at line 1, column 0, byte -1 at /usr/lib/perl5/vendor_perl/5.8.8/i386-linux-thread-multi/XML/Parser.pm line 187\"\n\nWhat's even more confusing is that the faultCode being returned is a string: \"Client\".\n\nI'm having trouble figuring out what this means. Can you provide any help?", "is_private": false, "tags": [], "creation_time": "2011-07-29T23:52:39Z", "bug_id": 643570, "raw_text": "David:\n\nWhile trying to test this I got the following error back from the staging server:\n\n\"Application failed during request deserialization: no element found at line 1, column 0, byte -1 at /usr/lib/perl5/vendor_perl/5.8.8/i386-linux-thread-multi/XML/Parser.pm line 187\"\n\nWhat's even more confusing is that the faultCode being returned is a string: \"Client\".\n\nI'm having trouble figuring out what this means. Can you provide any help?", "id": 5623161, "time": "2011-07-29T23:52:39Z"}, {"id": 5625359, "time": "2011-08-01T15:46:48Z", "author": "dkl@mozilla.com", "text": "Just a shot in the dark, but are you using xmlrpc.cgi instead of jsonrpc.cgi in your server address? They both take similar data, just one expects XML and the other expects JSON. When I do simple tests on bugzilla-stage-tip it works for me.\n\nPerl:\n\n$callobj = {\n    method => 'BMO.getBugsConfirmer',\n    params => { names => [ 'abillings@mozilla.com ],\n                Bugzilla_login => $username,\n                Bugzilla_password => $password\n              }\n};\n\n$res = eval { $rpc->call($url, $callobj) };\n\nprint Dumper($res->result);\n\nOutput:\n\n$VAR1 = {\n          'abillings@mozilla.com' => [\n                                       '350942',\n                                       '388809',\n                                       '404758',\n                                       '404766',\n                                       '404840',\n                                       '416649',\n                                       '416839',\n                                       '428842',\n                                       '431691',\n                                       '456705',\n                                       '465875',\n                                       '483510',\n                                       '495784',\n                                       '500782',\n                                       '583683',\n                                       '585819'\n                                     ]\n        };", "count": 49, "attachment_id": null, "is_private": false, "tags": [], "creator": "dkl@mozilla.com", "bug_id": 643570, "creation_time": "2011-08-01T15:46:48Z", "raw_text": "Just a shot in the dark, but are you using xmlrpc.cgi instead of jsonrpc.cgi in your server address? They both take similar data, just one expects XML and the other expects JSON. When I do simple tests on bugzilla-stage-tip it works for me.\n\nPerl:\n\n$callobj = {\n    method => 'BMO.getBugsConfirmer',\n    params => { names => [ 'abillings@mozilla.com ],\n                Bugzilla_login => $username,\n                Bugzilla_password => $password\n              }\n};\n\n$res = eval { $rpc->call($url, $callobj) };\n\nprint Dumper($res->result);\n\nOutput:\n\n$VAR1 = {\n          'abillings@mozilla.com' => [\n                                       '350942',\n                                       '388809',\n                                       '404758',\n                                       '404766',\n                                       '404840',\n                                       '416649',\n                                       '416839',\n                                       '428842',\n                                       '431691',\n                                       '456705',\n                                       '465875',\n                                       '483510',\n                                       '495784',\n                                       '500782',\n                                       '583683',\n                                       '585819'\n                                     ]\n        };"}, {"author": "me@mkelly.me", "text": "The service seems to be working again, it might've been a temporary issue.\n\nQMO is currently using non-authenticated methods to grab it's data. Can these methods be changed to not require authentication?", "count": 50, "attachment_id": null, "creator": "me@mkelly.me", "time": "2011-08-01T19:05:37Z", "id": 5625897, "is_private": false, "creation_time": "2011-08-01T19:05:37Z", "bug_id": 643570, "raw_text": "The service seems to be working again, it might've been a temporary issue.\n\nQMO is currently using non-authenticated methods to grab it's data. Can these methods be changed to not require authentication?", "tags": []}, {"is_private": false, "tags": [], "bug_id": 643570, "creation_time": "2011-08-03T21:50:36Z", "raw_text": "(In reply to comment #50)\n> The service seems to be working again, it might've been a temporary issue.\n> \n> QMO is currently using non-authenticated methods to grab it's data. Can\n> these methods be changed to not require authentication?\n\nDone. Should be live on bugzilla-stage-tip.mozilla.org very soon now.\n\ndkl", "id": 5631626, "time": "2011-08-03T21:50:36Z", "attachment_id": null, "creator": "dkl@mozilla.com", "author": "dkl@mozilla.com", "count": 51, "text": "(In reply to comment #50)\n> The service seems to be working again, it might've been a temporary issue.\n> \n> QMO is currently using non-authenticated methods to grab it's data. Can\n> these methods be changed to not require authentication?\n\nDone. Should be live on bugzilla-stage-tip.mozilla.org very soon now.\n\ndkl"}, {"id": 5640503, "time": "2011-08-08T20:51:37Z", "author": "me@mkelly.me", "count": 52, "text": "(In reply to David Lawrence [:dkl] from comment #51)\n> (In reply to comment #50)\n> > The service seems to be working again, it might've been a temporary issue.\n> > \n> > QMO is currently using non-authenticated methods to grab it's data. Can\n> > these methods be changed to not require authentication?\n> \n> Done. Should be live on bugzilla-stage-tip.mozilla.org very soon now.\n> \n> dkl\n\nSeems to be working for me. How long will it take to get these methods on the production Mozilla bugzilla instance?", "attachment_id": null, "is_private": false, "tags": [], "creator": "me@mkelly.me", "creation_time": "2011-08-08T20:51:37Z", "bug_id": 643570, "raw_text": "(In reply to David Lawrence [:dkl] from comment #51)\n> (In reply to comment #50)\n> > The service seems to be working again, it might've been a temporary issue.\n> > \n> > QMO is currently using non-authenticated methods to grab it's data. Can\n> > these methods be changed to not require authentication?\n> \n> Done. Should be live on bugzilla-stage-tip.mozilla.org very soon now.\n> \n> dkl\n\nSeems to be working for me. How long will it take to get these methods on the production Mozilla bugzilla instance?"}, {"attachment_id": null, "is_private": false, "tags": [], "creator": "dkl@mozilla.com", "bug_id": 643570, "creation_time": "2011-08-09T18:00:01Z", "raw_text": "(In reply to Michael Kelly [:mkelly] from comment #52)\n> (In reply to David Lawrence [:dkl] from comment #51)\n> > (In reply to comment #50)\n> > > The service seems to be working again, it might've been a temporary issue.\n> > > \n> > > QMO is currently using non-authenticated methods to grab it's data. Can\n> > > these methods be changed to not require authentication?\n> > \n> > Done. Should be live on bugzilla-stage-tip.mozilla.org very soon now.\n> > \n> > dkl\n> \n> Seems to be working for me. How long will it take to get these methods on\n> the production Mozilla bugzilla instance?\n\nIf I commit them today the changes could possibly be live this Thursday which is our normal update time.\n\ndkl", "id": 5642764, "time": "2011-08-09T18:00:01Z", "author": "dkl@mozilla.com", "count": 53, "text": "(In reply to Michael Kelly [:mkelly] from comment #52)\n> (In reply to David Lawrence [:dkl] from comment #51)\n> > (In reply to comment #50)\n> > > The service seems to be working again, it might've been a temporary issue.\n> > > \n> > > QMO is currently using non-authenticated methods to grab it's data. Can\n> > > these methods be changed to not require authentication?\n> > \n> > Done. Should be live on bugzilla-stage-tip.mozilla.org very soon now.\n> > \n> > dkl\n> \n> Seems to be working for me. How long will it take to get these methods on\n> the production Mozilla bugzilla instance?\n\nIf I commit them today the changes could possibly be live this Thursday which is our normal update time.\n\ndkl"}, {"author": "me@mkelly.me", "text": "David:\n\nSounds good. \n\nWe've been having speed issues with getting bug counts for users with large amounts of bugs; Bugzilla is taking many seconds to respond with the bug list for these users.\n\nWould having some API functions that give only bug counts rather than a list of bug IDs be faster, and if so, can they be added to Bugzilla?", "count": 54, "attachment_id": null, "creator": "me@mkelly.me", "time": "2011-08-11T05:42:14Z", "id": 5646986, "is_private": false, "raw_text": "David:\n\nSounds good. \n\nWe've been having speed issues with getting bug counts for users with large amounts of bugs; Bugzilla is taking many seconds to respond with the bug list for these users.\n\nWould having some API functions that give only bug counts rather than a list of bug IDs be faster, and if so, can they be added to Bugzilla?", "bug_id": 643570, "creation_time": "2011-08-11T05:42:14Z", "tags": []}, {"author": "dkl@mozilla.com", "text": "We can definitely add a parameter to the current API calls that will only return the count instead of all bug ids. This should be slightly faster, not to mention the smaller returned payload. The question then would be would returning the full list be the default behavior or the other way around. If we leave it as default we do just do something like:\n\n$callobj = {\n    method => 'BMO.getBugsConfirmer',\n    params => { names => [ 'abillings@mozilla.com ],\n                count_only => 1, \n                Bugzilla_login => $username,\n                Bugzilla_password => $password\n              }\n};\n\n$res = eval { $rpc->call($url, $callobj) };\n\nprint Dumper($res->result);\n\nOutput:\n\n$VAR1 = {\n          'abillings@mozilla.com' => 23\n        };\n\nI can put this on bugzilla-stage-tip.mozilla.org for testing.\n\ndkl", "count": 55, "attachment_id": null, "creator": "dkl@mozilla.com", "time": "2011-08-11T21:17:30Z", "id": 5648601, "is_private": false, "raw_text": "We can definitely add a parameter to the current API calls that will only return the count instead of all bug ids. This should be slightly faster, not to mention the smaller returned payload. The question then would be would returning the full list be the default behavior or the other way around. If we leave it as default we do just do something like:\n\n$callobj = {\n    method => 'BMO.getBugsConfirmer',\n    params => { names => [ 'abillings@mozilla.com ],\n                count_only => 1, \n                Bugzilla_login => $username,\n                Bugzilla_password => $password\n              }\n};\n\n$res = eval { $rpc->call($url, $callobj) };\n\nprint Dumper($res->result);\n\nOutput:\n\n$VAR1 = {\n          'abillings@mozilla.com' => 23\n        };\n\nI can put this on bugzilla-stage-tip.mozilla.org for testing.\n\ndkl", "creation_time": "2011-08-11T21:17:30Z", "bug_id": 643570, "tags": []}, {"text": "Leaving the default as it is and making the count optional I think is best.\n\nThis would be added to Bug.search as well as BMO.getBugsConfirmer and BMO.getBugsVerifier, correct? Bug.search is the major pain point currently, as some of our users has hundreds or thousands of bugs. I would imagine using a count on the server side (making the DB do the work) would help here.", "count": 56, "id": 5648615, "author": "me@mkelly.me", "time": "2011-08-11T21:21:32Z", "creator": "me@mkelly.me", "tags": [], "raw_text": "Leaving the default as it is and making the count optional I think is best.\n\nThis would be added to Bug.search as well as BMO.getBugsConfirmer and BMO.getBugsVerifier, correct? Bug.search is the major pain point currently, as some of our users has hundreds or thousands of bugs. I would imagine using a count on the server side (making the DB do the work) would help here.", "creation_time": "2011-08-11T21:21:32Z", "bug_id": 643570, "attachment_id": null, "is_private": false}, {"is_private": false, "creation_time": "2011-08-11T22:20:29Z", "bug_id": 643570, "raw_text": "Pushed changes to bugzilla-stage-tip.mozilla.org to add the count_only param to BMO.getBugsConfirmer and BMO.getBugsVerifier so please give those a try.\n\nTo add support to Bug.search will take some more time and research as that is a core WebService API call. \n\ndkl", "tags": [], "time": "2011-08-11T22:20:29Z", "id": 5648797, "attachment_id": null, "creator": "dkl@mozilla.com", "author": "dkl@mozilla.com", "count": 57, "text": "Pushed changes to bugzilla-stage-tip.mozilla.org to add the count_only param to BMO.getBugsConfirmer and BMO.getBugsVerifier so please give those a try.\n\nTo add support to Bug.search will take some more time and research as that is a core WebService API call. \n\ndkl"}, {"is_private": false, "tags": [], "creation_time": "2011-08-22T17:35:21Z", "bug_id": 643570, "raw_text": "(In reply to Michael Kelly [:mkelly] from comment #56)\n> This would be added to Bug.search as well as BMO.getBugsConfirmer and\n> BMO.getBugsVerifier, correct? Bug.search is the major pain point currently,\n> as some of our users has hundreds or thousands of bugs. I would imagine\n> using a count on the server side (making the DB do the work) would help here.\n\nLooking into adding the change Bug.search you request now. Can you give me some specific searchs that you or others do with Bug.search that I can use in my verification?\n\nBasically my thinking is to just pass a new param to Bug.search called count_only => 1 which will just return an integer instead of a list of bugs. Let me know if this is different than what you need.\n\nThanks\ndkl", "id": 5669598, "time": "2011-08-22T17:35:21Z", "attachment_id": null, "creator": "dkl@mozilla.com", "author": "dkl@mozilla.com", "count": 58, "text": "(In reply to Michael Kelly [:mkelly] from comment #56)\n> This would be added to Bug.search as well as BMO.getBugsConfirmer and\n> BMO.getBugsVerifier, correct? Bug.search is the major pain point currently,\n> as some of our users has hundreds or thousands of bugs. I would imagine\n> using a count on the server side (making the DB do the work) would help here.\n\nLooking into adding the change Bug.search you request now. Can you give me some specific searchs that you or others do with Bug.search that I can use in my verification?\n\nBasically my thinking is to just pass a new param to Bug.search called count_only => 1 which will just return an integer instead of a list of bugs. Let me know if this is different than what you need.\n\nThanks\ndkl"}, {"raw_text": "When we use Bug.search we filter by creator and creation_time to get total bug count and bug count for the last 30 days.\n\nAdding a count_only parameter sounds like it would be great.", "creation_time": "2011-08-22T17:37:42Z", "bug_id": 643570, "creator": "me@mkelly.me", "tags": [], "is_private": false, "attachment_id": null, "text": "When we use Bug.search we filter by creator and creation_time to get total bug count and bug count for the last 30 days.\n\nAdding a count_only parameter sounds like it would be great.", "count": 59, "author": "me@mkelly.me", "time": "2011-08-22T17:37:42Z", "id": 5669605}, {"author": "albill@gmail.com", "text": "Especially since we are timing out on queries (on our end) for some users.", "count": 60, "attachment_id": null, "creator": "albill@gmail.com", "time": "2011-08-22T18:28:45Z", "id": 5669768, "is_private": false, "raw_text": "Especially since we are timing out on queries (on our end) for some users.", "bug_id": 643570, "creation_time": "2011-08-22T18:28:45Z", "tags": []}, {"raw_text": "Ok, committed change that will allow bug count only for Bug.search. The API will look like this:\n\nBug.search({ product => 'Bugzilla', status => 'NEW', count_only => 1 });\n\nreturns\n\n{ bug_count => 123 }\n\nWithout count_only, you get a list of bugs and their data.\n\nLet me know if you have any problems with testing.\n\ndkl", "creation_time": "2011-08-24T22:29:33Z", "bug_id": 643570, "creator": "dkl@mozilla.com", "tags": [], "attachment_id": null, "is_private": false, "text": "Ok, committed change that will allow bug count only for Bug.search. The API will look like this:\n\nBug.search({ product => 'Bugzilla', status => 'NEW', count_only => 1 });\n\nreturns\n\n{ bug_count => 123 }\n\nWithout count_only, you get a list of bugs and their data.\n\nLet me know if you have any problems with testing.\n\ndkl", "count": 61, "author": "dkl@mozilla.com", "time": "2011-08-24T22:29:33Z", "id": 5676308}]}}}