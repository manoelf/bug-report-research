{"bugs": {"684221": {"comments": [{"author": "mounir@lamouri.fr", "time": "2011-09-02T13:55:35Z", "creation_time": "2011-09-02T13:55:35Z", "creator": "mounir@lamouri.fr", "id": 5696157, "count": 0, "is_private": false, "text": "Bug 673820 do not pass try because some tests are failing because of a bad implementation of the attributes reflection.", "bug_id": 684221, "tags": [], "raw_text": "Bug 673820 do not pass try because some tests are failing because of a bad implementation of the attributes reflection.", "attachment_id": null}, {"is_private": false, "id": 5696257, "count": 1, "creator": "mounir@lamouri.fr", "creation_time": "2011-09-02T14:47:33Z", "time": "2011-09-02T14:47:33Z", "author": "mounir@lamouri.fr", "attachment_id": 557828, "raw_text": "", "tags": [], "text": "Created attachment 557828\nPatch v1", "bug_id": 684221}, {"tags": [], "text": "Sent to try:\nhttps://tbpl.mozilla.org/?tree=Try&usebuildbot=1&rev=77915d8cac69", "bug_id": 684221, "attachment_id": null, "raw_text": "Sent to try:\nhttps://tbpl.mozilla.org/?tree=Try&usebuildbot=1&rev=77915d8cac69", "creator": "mounir@lamouri.fr", "creation_time": "2011-09-02T14:49:01Z", "time": "2011-09-02T14:49:01Z", "author": "mounir@lamouri.fr", "is_private": false, "count": 2, "id": 5696260}, {"raw_text": "colspan and rowspan aren't actually supposed to be handled the same.", "attachment_id": 557828, "tags": [], "text": "Comment on attachment 557828\nPatch v1\n\ncolspan and rowspan aren't actually supposed to be handled the same.", "bug_id": 684221, "id": 5696306, "count": 3, "is_private": false, "author": "Ms2ger@gmail.com", "creation_time": "2011-09-02T15:07:21Z", "time": "2011-09-02T15:07:21Z", "creator": "Ms2ger@gmail.com"}, {"raw_text": "Thanks Ms2ger, I misread the specs. This should fix it.", "attachment_id": 558193, "bug_id": 684221, "text": "Created attachment 558193\nPatch v1.1\n\nThanks Ms2ger, I misread the specs. This should fix it.", "tags": [], "is_private": false, "id": 5699826, "count": 4, "author": "mounir@lamouri.fr", "creator": "mounir@lamouri.fr", "time": "2011-09-04T21:02:38Z", "creation_time": "2011-09-04T21:02:38Z"}, {"is_private": false, "id": 5700359, "count": 5, "author": "Ms2ger@gmail.com", "creator": "Ms2ger@gmail.com", "creation_time": "2011-09-05T11:25:03Z", "time": "2011-09-05T11:25:03Z", "raw_text": ">--- a/content/html/content/src/nsHTMLTableCellElement.cpp\n>+++ b/content/html/content/src/nsHTMLTableCellElement.cpp\n>+NS_IMPL_UINT_ATTR_NON_ZERO(nsHTMLTableCellElement, ColSpan, colspan)\n>+NS_IMPL_UINT_ATTR_DEFAULT_VALUE(nsHTMLTableCellElement, RowSpan, rowspan, 1)\n>     if (aAttribute == nsGkAtoms::colspan) {\n>+      return aResult.ParsePositiveIntValue(aValue);\n>     if (aAttribute == nsGkAtoms::rowspan) {\n>+      return aResult.ParseNonNegativeIntValue(aValue);\n\nLooks correct per spec, but you'll need to add the clamping to nsTableCellFrame::Get{Col,Row}Span.", "attachment_id": 558193, "tags": [], "bug_id": 684221, "text": "Comment on attachment 558193\nPatch v1.1\n\n>--- a/content/html/content/src/nsHTMLTableCellElement.cpp\n>+++ b/content/html/content/src/nsHTMLTableCellElement.cpp\n>+NS_IMPL_UINT_ATTR_NON_ZERO(nsHTMLTableCellElement, ColSpan, colspan)\n>+NS_IMPL_UINT_ATTR_DEFAULT_VALUE(nsHTMLTableCellElement, RowSpan, rowspan, 1)\n>     if (aAttribute == nsGkAtoms::colspan) {\n>+      return aResult.ParsePositiveIntValue(aValue);\n>     if (aAttribute == nsGkAtoms::rowspan) {\n>+      return aResult.ParseNonNegativeIntValue(aValue);\n\nLooks correct per spec, but you'll need to add the clamping to nsTableCellFrame::Get{Col,Row}Span."}, {"time": "2011-09-05T14:42:57Z", "creation_time": "2011-09-05T14:42:57Z", "creator": "bugs@pettay.fi", "author": "bugs@pettay.fi", "id": 5700587, "count": 6, "is_private": false, "tags": [], "bug_id": 684221, "text": "Comment on attachment 558193\nPatch v1.1\n\n>     if (aAttribute == nsGkAtoms::colspan) {\n>-      PRBool res = aResult.ParseIntWithBounds(aValue, -1);\n>-      if (res) {\n>-        PRInt32 val = aResult.GetIntegerValue();\n>-        // reset large colspan values as IE and opera do\n>-        // quirks mode does not honor the special html 4 value of 0\n>-        if (val > MAX_COLSPAN || val < 0 ||\n>-            (0 == val && InNavQuirksMode(GetOwnerDoc()))) {\n>-          aResult.SetTo(1);\n>-        }\n>-      }\n>-      return res;\n>+      return aResult.ParsePositiveIntValue(aValue);\nWhy is this ok?\n\n\n>     }\n>     if (aAttribute == nsGkAtoms::rowspan) {\n>-      PRBool res = aResult.ParseIntWithBounds(aValue, -1, MAX_ROWSPAN);\n>-      if (res) {\n>-        PRInt32 val = aResult.GetIntegerValue();\n>-        // quirks mode does not honor the special html 4 value of 0\n>-        if (val < 0 || (0 == val && InNavQuirksMode(GetOwnerDoc()))) {\n>-          aResult.SetTo(1);\n>-        }\n>-      }\n>-      return res;\n>+      return aResult.ParseNonNegativeIntValue(aValue);\nAnd this?\nCan layout really handle huge values?\n\nDoesn't this regress bug 141818, Bug 27993 and Bug 30332?\n\nWhat does other browsers do?", "attachment_id": 558193, "raw_text": ">     if (aAttribute == nsGkAtoms::colspan) {\n>-      PRBool res = aResult.ParseIntWithBounds(aValue, -1);\n>-      if (res) {\n>-        PRInt32 val = aResult.GetIntegerValue();\n>-        // reset large colspan values as IE and opera do\n>-        // quirks mode does not honor the special html 4 value of 0\n>-        if (val > MAX_COLSPAN || val < 0 ||\n>-            (0 == val && InNavQuirksMode(GetOwnerDoc()))) {\n>-          aResult.SetTo(1);\n>-        }\n>-      }\n>-      return res;\n>+      return aResult.ParsePositiveIntValue(aValue);\nWhy is this ok?\n\n\n>     }\n>     if (aAttribute == nsGkAtoms::rowspan) {\n>-      PRBool res = aResult.ParseIntWithBounds(aValue, -1, MAX_ROWSPAN);\n>-      if (res) {\n>-        PRInt32 val = aResult.GetIntegerValue();\n>-        // quirks mode does not honor the special html 4 value of 0\n>-        if (val < 0 || (0 == val && InNavQuirksMode(GetOwnerDoc()))) {\n>-          aResult.SetTo(1);\n>-        }\n>-      }\n>-      return res;\n>+      return aResult.ParseNonNegativeIntValue(aValue);\nAnd this?\nCan layout really handle huge values?\n\nDoesn't this regress bug 141818, Bug 27993 and Bug 30332?\n\nWhat does other browsers do?"}, {"attachment_id": null, "raw_text": "I will unlikely work on this any time soon so I am unassigning myself. Feel free to take it over.", "tags": [], "text": "I will unlikely work on this any time soon so I am unassigning myself. Feel free to take it over.", "bug_id": 684221, "id": 7763073, "count": 7, "is_private": false, "time": "2013-08-19T15:41:38Z", "creation_time": "2013-08-19T15:41:38Z", "creator": "mounir@lamouri.fr", "author": "mounir@lamouri.fr"}, {"tags": [], "text": "https://bugzilla.mozilla.org/show_bug.cgi?id=1472046\n\nMove all DOM bugs that haven\u2019t been updated in more than 3 years and has no one currently assigned to P5.\n\nIf you have questions, please contact :mdaly.", "bug_id": 684221, "attachment_id": null, "raw_text": "https://bugzilla.mozilla.org/show_bug.cgi?id=1472046\n\nMove all DOM bugs that haven\u2019t been updated in more than 3 years and has no one currently assigned to P5.\n\nIf you have questions, please contact :mdaly.", "creation_time": "2018-06-29T04:59:13Z", "time": "2018-06-29T04:59:13Z", "creator": "bug-husbandry-bot@mozilla.bugs", "author": "bug-husbandry-bot@mozilla.bugs", "id": 13436894, "count": 8, "is_private": false}, {"tags": [], "text": "No assignee, updating the status.", "bug_id": 684221, "raw_text": "No assignee, updating the status.", "attachment_id": null, "author": "sledru@mozilla.com", "creator": "sledru@mozilla.com", "creation_time": "2018-10-15T08:36:50Z", "time": "2018-10-15T08:36:50Z", "is_private": false, "id": 13685267, "count": 9}, {"tags": [], "bug_id": 684221, "text": "No assignee, updating the status.", "raw_text": "No assignee, updating the status.", "attachment_id": null, "author": "sledru@mozilla.com", "creator": "sledru@mozilla.com", "creation_time": "2018-10-15T08:44:00Z", "time": "2018-10-15T08:44:00Z", "is_private": false, "count": 10, "id": 13686108}]}}, "comments": {}}