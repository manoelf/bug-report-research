{"bugs": {"673917": {"comments": [{"tags": [], "bug_id": 673917, "text": "The currently fastest way to animate spritesheets (pngs with individual frames on a large sheet) on browsers that hardware accelerate 3D css transformed content is to put the actual spritesheet into a <div> with overflow hidden (set to the target frame size) and \"shift\" the spritesheet programmatically in JS via translate3d(). This is non-trivial, and my guess is that not only would a standardized API add clarity, but also might be further optimized.", "attachment_id": null, "raw_text": "The currently fastest way to animate spritesheets (pngs with individual frames on a large sheet) on browsers that hardware accelerate 3D css transformed content is to put the actual spritesheet into a <div> with overflow hidden (set to the target frame size) and \"shift\" the spritesheet programmatically in JS via translate3d(). This is non-trivial, and my guess is that not only would a standardized API add clarity, but also might be further optimized.", "time": "2011-07-25T14:13:23Z", "creation_time": "2011-07-25T14:13:23Z", "creator": "gal@uci.edu", "author": "gal@uci.edu", "id": 5610933, "count": 0, "is_private": false}, {"bug_id": 673917, "text": "Note http://blog.vlad1.com/2009/06/22/to-sprite-or-not-to-sprite/\n\nDo we really want to _encourage_ spriting?", "tags": [], "attachment_id": null, "raw_text": "Note http://blog.vlad1.com/2009/06/22/to-sprite-or-not-to-sprite/\n\nDo we really want to _encourage_ spriting?", "creator": "bzbarsky@mit.edu", "creation_time": "2011-07-25T14:43:01Z", "time": "2011-07-25T14:43:01Z", "author": "bzbarsky@mit.edu", "is_private": false, "count": 1, "id": 5610996}, {"text": "Hi Boris,\n\nI see two different usecases here, which this proposal only focussed on the latter - CSS sprites and animated spritesheets.  It's true that spritesheets have downsides, but afaik, there's no better way to do 2D bitmap animations.\n\nThe only other solution would be a custom spritesheet format (like a zip file) that includes all individual frames and then have the client load up the individual frames. It's a bit like an animated GIF, but this would be a pretty huge task to solve.", "bug_id": 673917, "tags": [], "raw_text": "Hi Boris,\n\nI see two different usecases here, which this proposal only focussed on the latter - CSS sprites and animated spritesheets.  It's true that spritesheets have downsides, but afaik, there's no better way to do 2D bitmap animations.\n\nThe only other solution would be a custom spritesheet format (like a zip file) that includes all individual frames and then have the client load up the individual frames. It's a bit like an animated GIF, but this would be a pretty huge task to solve.", "attachment_id": null, "author": "pbakaus@zynga.com", "time": "2011-07-25T14:48:36Z", "creation_time": "2011-07-25T14:48:36Z", "creator": "pbakaus@zynga.com", "id": 5611010, "count": 2, "is_private": false}, {"is_private": false, "id": 5624685, "count": 3, "creator": "roc@ocallahan.org", "time": "2011-08-01T04:01:57Z", "creation_time": "2011-08-01T04:01:57Z", "author": "roc@ocallahan.org", "attachment_id": null, "raw_text": "So the basic problem here is to have an element that can be flipped between different images very efficiently?\n\nOne option would be to use a canvas for your element and drawImage images into it. That would work with or without spriting. It would be simpler than the CSS transforms trick. In Gecko that would probably be faster than the transforms trick and use about the same amount of VRAM. In Webkit, it might be a little slower than the transforms trick, but it should use less VRAM.\n\nReally though, you should be able to just do element.style.background = \"url(frame.png)\" and have that be very fast if frame.png has been preloaded. Or possibly element.style.background = \"-moz-image-rect(url('frame.png'), 0, 0, 100, 100)\" if you insist on using spriting. If that's not currently fast enough, we should improve browsers so it is, instead of adding new API.", "tags": [], "text": "So the basic problem here is to have an element that can be flipped between different images very efficiently?\n\nOne option would be to use a canvas for your element and drawImage images into it. That would work with or without spriting. It would be simpler than the CSS transforms trick. In Gecko that would probably be faster than the transforms trick and use about the same amount of VRAM. In Webkit, it might be a little slower than the transforms trick, but it should use less VRAM.\n\nReally though, you should be able to just do element.style.background = \"url(frame.png)\" and have that be very fast if frame.png has been preloaded. Or possibly element.style.background = \"-moz-image-rect(url('frame.png'), 0, 0, 100, 100)\" if you insist on using spriting. If that's not currently fast enough, we should improve browsers so it is, instead of adding new API.", "bug_id": 673917}, {"creation_time": "2011-08-01T08:04:02Z", "time": "2011-08-01T08:04:02Z", "creator": "pbakaus@zynga.com", "author": "pbakaus@zynga.com", "count": 4, "id": 5624808, "is_private": false, "tags": [], "text": "Hi Robert,\n\n(In reply to comment #3)\n> So the basic problem here is to have an element that can be flipped between\n> different images very efficiently?\n\nYes.\n\n> \n> One option would be to use a canvas for your element and drawImage images\n> into it. That would work with or without spriting. It would be simpler than\n> the CSS transforms trick. In Gecko that would probably be faster than the\n> transforms trick and use about the same amount of VRAM. In Webkit, it might\n> be a little slower than the transforms trick, but it should use less VRAM.\n\nNo efficient, performance-wise. You'll need lots and lots of small canvases (in the hundreds) for a scene of ours, or one big canvas, but then we're back at the middle age, having to implement the whole scene graph and dirty rectangles ourselves. I'm still dreaming of a future where Canvas is fast enough to handle complex 2D games and JS fast enough to manage the entire redraw flow.\n\n> \n> Really though, you should be able to just do element.style.background =\n> \"url(frame.png)\" and have that be very fast if frame.png has been preloaded.\n> Or possibly element.style.background = \"-moz-image-rect(url('frame.png'), 0,\n> 0, 100, 100)\" if you insist on using spriting. If that's not currently fast\n> enough, we should improve browsers so it is, instead of adding new API.\n\nYeah, the background-position thing would be the most natural way to do it today. It is, unfortunately, also the slowest way to do it today. If we can heavily speed this up, I'm all for it.", "bug_id": 673917, "attachment_id": null, "raw_text": "Hi Robert,\n\n(In reply to comment #3)\n> So the basic problem here is to have an element that can be flipped between\n> different images very efficiently?\n\nYes.\n\n> \n> One option would be to use a canvas for your element and drawImage images\n> into it. That would work with or without spriting. It would be simpler than\n> the CSS transforms trick. In Gecko that would probably be faster than the\n> transforms trick and use about the same amount of VRAM. In Webkit, it might\n> be a little slower than the transforms trick, but it should use less VRAM.\n\nNo efficient, performance-wise. You'll need lots and lots of small canvases (in the hundreds) for a scene of ours, or one big canvas, but then we're back at the middle age, having to implement the whole scene graph and dirty rectangles ourselves. I'm still dreaming of a future where Canvas is fast enough to handle complex 2D games and JS fast enough to manage the entire redraw flow.\n\n> \n> Really though, you should be able to just do element.style.background =\n> \"url(frame.png)\" and have that be very fast if frame.png has been preloaded.\n> Or possibly element.style.background = \"-moz-image-rect(url('frame.png'), 0,\n> 0, 100, 100)\" if you insist on using spriting. If that's not currently fast\n> enough, we should improve browsers so it is, instead of adding new API.\n\nYeah, the background-position thing would be the most natural way to do it today. It is, unfortunately, also the slowest way to do it today. If we can heavily speed this up, I'm all for it."}, {"attachment_id": null, "raw_text": "(In reply to comment #4)\n> or one big canvas, but then we're\n> back at the middle age, having to implement the whole scene graph and dirty\n> rectangles ourselves.\n\nInteresting. Your games benefit from not repainting the entire scene on every update?", "bug_id": 673917, "text": "(In reply to comment #4)\n> or one big canvas, but then we're\n> back at the middle age, having to implement the whole scene graph and dirty\n> rectangles ourselves.\n\nInteresting. Your games benefit from not repainting the entire scene on every update?", "tags": [], "is_private": false, "id": 5624889, "count": 5, "creator": "roc@ocallahan.org", "time": "2011-08-01T09:27:21Z", "creation_time": "2011-08-01T09:27:21Z", "author": "roc@ocallahan.org"}, {"bug_id": 673917, "text": "(In reply to comment #5)\n> (In reply to comment #4)\n> > or one big canvas, but then we're\n> > back at the middle age, having to implement the whole scene graph and dirty\n> > rectangles ourselves.\n> \n> Interesting. Your games benefit from not repainting the entire scene on\n> every update?\n\nWe are not using canvas at all today because of perf implications, but theoretically yes, we might greatly benefit from not repainting the entire scene. Imagine an isometric map with hundreds of depth sorted elements, and a character walks by on a street. You wouldn't want to draw the whole scene over and over just to animate the character.\n\nWe would use canvas today if we could. We'd need it to redraw hundreds of animated images at > 30 fps at larger-than-1080p resolutions. There is no tech that can handle this cross-browser today, but the closest is still HTML/CSS.", "tags": [], "raw_text": "(In reply to comment #5)\n> (In reply to comment #4)\n> > or one big canvas, but then we're\n> > back at the middle age, having to implement the whole scene graph and dirty\n> > rectangles ourselves.\n> \n> Interesting. Your games benefit from not repainting the entire scene on\n> every update?\n\nWe are not using canvas at all today because of perf implications, but theoretically yes, we might greatly benefit from not repainting the entire scene. Imagine an isometric map with hundreds of depth sorted elements, and a character walks by on a street. You wouldn't want to draw the whole scene over and over just to animate the character.\n\nWe would use canvas today if we could. We'd need it to redraw hundreds of animated images at > 30 fps at larger-than-1080p resolutions. There is no tech that can handle this cross-browser today, but the closest is still HTML/CSS.", "attachment_id": null, "author": "pbakaus@zynga.com", "creator": "pbakaus@zynga.com", "creation_time": "2011-08-01T09:52:33Z", "time": "2011-08-01T09:52:33Z", "is_private": false, "count": 6, "id": 5624908}, {"author": "roc@ocallahan.org", "creator": "roc@ocallahan.org", "creation_time": "2011-08-01T11:24:42Z", "time": "2011-08-01T11:24:42Z", "is_private": false, "id": 5624973, "count": 7, "tags": [], "bug_id": 673917, "text": "(In reply to comment #6)\n> We are not using canvas at all today because of perf implications,\n\nIs that mainly the issue that canvas isn't GPU-accelerated on some important platforms? Or are there other issues?\n\n> but\n> theoretically yes, we might greatly benefit from not repainting the entire\n> scene. Imagine an isometric map with hundreds of depth sorted elements, and\n> a character walks by on a street. You wouldn't want to draw the whole scene\n> over and over just to animate the character.\n\nOne question is whether that is worth optimizing. If your street graphics are animated themselves, it may not be.\n\nMost game platforms redraw the entire scene on every frame, as far as I know.\n\n> We would use canvas today if we could. We'd need it to redraw hundreds of\n> animated images at > 30 fps at larger-than-1080p resolutions. There is no\n> tech that can handle this cross-browser today, but the closest is still\n> HTML/CSS.\n\nHave you got benchmarks that you use to evaluate performance of various approaches? I think some public benchmarks would be really useful here. What do you think of JSGameBench?", "raw_text": "(In reply to comment #6)\n> We are not using canvas at all today because of perf implications,\n\nIs that mainly the issue that canvas isn't GPU-accelerated on some important platforms? Or are there other issues?\n\n> but\n> theoretically yes, we might greatly benefit from not repainting the entire\n> scene. Imagine an isometric map with hundreds of depth sorted elements, and\n> a character walks by on a street. You wouldn't want to draw the whole scene\n> over and over just to animate the character.\n\nOne question is whether that is worth optimizing. If your street graphics are animated themselves, it may not be.\n\nMost game platforms redraw the entire scene on every frame, as far as I know.\n\n> We would use canvas today if we could. We'd need it to redraw hundreds of\n> animated images at > 30 fps at larger-than-1080p resolutions. There is no\n> tech that can handle this cross-browser today, but the closest is still\n> HTML/CSS.\n\nHave you got benchmarks that you use to evaluate performance of various approaches? I think some public benchmarks would be really useful here. What do you think of JSGameBench?", "attachment_id": null}, {"author": "pbakaus@zynga.com", "creator": "pbakaus@zynga.com", "creation_time": "2011-08-02T09:49:11Z", "time": "2011-08-02T09:49:11Z", "is_private": false, "count": 8, "id": 5627277, "tags": [], "text": "(In reply to comment #7)\n> (In reply to comment #6)\n> > We are not using canvas at all today because of perf implications,\n> \n> Is that mainly the issue that canvas isn't GPU-accelerated on some important\n> platforms? Or are there other issues?\n\nI'm honestly not sure. What I am pretty sure of, is that performance-wise, even in browsers were Canvas is GPU accelerated, Canvas performance is not even close to DOM performance. I'm working on a proof-of-concept for a canvas based renderer to have a solid proof.\n\n> \n> > but\n> > theoretically yes, we might greatly benefit from not repainting the entire\n> > scene. Imagine an isometric map with hundreds of depth sorted elements, and\n> > a character walks by on a street. You wouldn't want to draw the whole scene\n> > over and over just to animate the character.\n> \n> One question is whether that is worth optimizing. If your street graphics\n> are animated themselves, it may not be.\n\nNope, streets are not animated. What kind of optimization would you propose?\n\n> \n> Most game platforms redraw the entire scene on every frame, as far as I know.\n\nYeah, if you work with DirectX or OpenGL, you mostly redraw the entire scene. This is not possible with Canvas. We'd probably need a 1000-2000% performance increase to make this happen.\n\n> \n> > We would use canvas today if we could. We'd need it to redraw hundreds of\n> > animated images at > 30 fps at larger-than-1080p resolutions. There is no\n> > tech that can handle this cross-browser today, but the closest is still\n> > HTML/CSS.\n> \n> Have you got benchmarks that you use to evaluate performance of various\n> approaches? I think some public benchmarks would be really useful here. What\n> do you think of JSGameBench?\n\nWe are working on a benchmark right now, but it only focusses on different aspects of DOM performance. We'll try to bake in different tech, SVG, Canvas and WebGL. JsGameBench is great, but not customizable enough for our needs.", "bug_id": 673917, "raw_text": "(In reply to comment #7)\n> (In reply to comment #6)\n> > We are not using canvas at all today because of perf implications,\n> \n> Is that mainly the issue that canvas isn't GPU-accelerated on some important\n> platforms? Or are there other issues?\n\nI'm honestly not sure. What I am pretty sure of, is that performance-wise, even in browsers were Canvas is GPU accelerated, Canvas performance is not even close to DOM performance. I'm working on a proof-of-concept for a canvas based renderer to have a solid proof.\n\n> \n> > but\n> > theoretically yes, we might greatly benefit from not repainting the entire\n> > scene. Imagine an isometric map with hundreds of depth sorted elements, and\n> > a character walks by on a street. You wouldn't want to draw the whole scene\n> > over and over just to animate the character.\n> \n> One question is whether that is worth optimizing. If your street graphics\n> are animated themselves, it may not be.\n\nNope, streets are not animated. What kind of optimization would you propose?\n\n> \n> Most game platforms redraw the entire scene on every frame, as far as I know.\n\nYeah, if you work with DirectX or OpenGL, you mostly redraw the entire scene. This is not possible with Canvas. We'd probably need a 1000-2000% performance increase to make this happen.\n\n> \n> > We would use canvas today if we could. We'd need it to redraw hundreds of\n> > animated images at > 30 fps at larger-than-1080p resolutions. There is no\n> > tech that can handle this cross-browser today, but the closest is still\n> > HTML/CSS.\n> \n> Have you got benchmarks that you use to evaluate performance of various\n> approaches? I think some public benchmarks would be really useful here. What\n> do you think of JSGameBench?\n\nWe are working on a benchmark right now, but it only focusses on different aspects of DOM performance. We'll try to bake in different tech, SVG, Canvas and WebGL. JsGameBench is great, but not customizable enough for our needs.", "attachment_id": null}, {"creation_time": "2011-08-02T10:28:43Z", "time": "2011-08-02T10:28:43Z", "creator": "roc@ocallahan.org", "author": "roc@ocallahan.org", "count": 9, "id": 5627330, "is_private": false, "tags": [], "text": "(In reply to comment #8)\n> (In reply to comment #7)\n> > (In reply to comment #6)\n> > > We are not using canvas at all today because of perf implications,\n> > \n> > Is that mainly the issue that canvas isn't GPU-accelerated on some important\n> > platforms? Or are there other issues?\n> \n> I'm honestly not sure. What I am pretty sure of, is that performance-wise,\n> even in browsers were Canvas is GPU accelerated, Canvas performance is not\n> even close to DOM performance. I'm working on a proof-of-concept for a\n> canvas based renderer to have a solid proof.\n\nOn the FishIETank canvas benchmark I get 40fps with 2000 fish on my Windows 7 (high-end) laptop in Firefox, running maximized on a 1920x1080 screen. (Note that 2000 fish is not offered directly in that page, you have to override it with JS.) Can you really beat that with a non-canvas approach? Or is this benchmark totally unrelated to what you need for games?\nhttp://ie.microsoft.com/testdrive/Performance/FishIETank/Default.html\nUsing WebGL you can get considerably better sprite performance if you optimize carefully.\nhttp://muizelaar.blogspot.com/2011/02/drawing-sprites-canvas-2d-vs-webgl.html\n\n> > > but\n> > > theoretically yes, we might greatly benefit from not repainting the entire\n> > > scene. Imagine an isometric map with hundreds of depth sorted elements, and\n> > > a character walks by on a street. You wouldn't want to draw the whole scene\n> > > over and over just to animate the character.\n> > \n> > One question is whether that is worth optimizing. If your street graphics\n> > are animated themselves, it may not be.\n> \n> Nope, streets are not animated. What kind of optimization would you propose?\n\nI meant the optimization of tracking dirty rects and only repainting part of your canvas. That makes sense if you often only need to repaint a small part of the canvas. If you usually need to repaint most of the canvas, it's not worth it.\n\n> > Most game platforms redraw the entire scene on every frame, as far as I know.\n> \n> Yeah, if you work with DirectX or OpenGL, you mostly redraw the entire\n> scene. This is not possible with Canvas. We'd probably need a 1000-2000%\n> performance increase to make this happen.\n\nI'm surprised, given the kind of numbers we can get on canvas benchmarks these days. I would love to see a benchmark that shows how you're trying to use canvas and how the performance isn't adequate. It may be that there are simple things we and other browsers can do to make it faster --- or it may be that we could tell you how to do things differently to go faster.", "bug_id": 673917, "attachment_id": null, "raw_text": "(In reply to comment #8)\n> (In reply to comment #7)\n> > (In reply to comment #6)\n> > > We are not using canvas at all today because of perf implications,\n> > \n> > Is that mainly the issue that canvas isn't GPU-accelerated on some important\n> > platforms? Or are there other issues?\n> \n> I'm honestly not sure. What I am pretty sure of, is that performance-wise,\n> even in browsers were Canvas is GPU accelerated, Canvas performance is not\n> even close to DOM performance. I'm working on a proof-of-concept for a\n> canvas based renderer to have a solid proof.\n\nOn the FishIETank canvas benchmark I get 40fps with 2000 fish on my Windows 7 (high-end) laptop in Firefox, running maximized on a 1920x1080 screen. (Note that 2000 fish is not offered directly in that page, you have to override it with JS.) Can you really beat that with a non-canvas approach? Or is this benchmark totally unrelated to what you need for games?\nhttp://ie.microsoft.com/testdrive/Performance/FishIETank/Default.html\nUsing WebGL you can get considerably better sprite performance if you optimize carefully.\nhttp://muizelaar.blogspot.com/2011/02/drawing-sprites-canvas-2d-vs-webgl.html\n\n> > > but\n> > > theoretically yes, we might greatly benefit from not repainting the entire\n> > > scene. Imagine an isometric map with hundreds of depth sorted elements, and\n> > > a character walks by on a street. You wouldn't want to draw the whole scene\n> > > over and over just to animate the character.\n> > \n> > One question is whether that is worth optimizing. If your street graphics\n> > are animated themselves, it may not be.\n> \n> Nope, streets are not animated. What kind of optimization would you propose?\n\nI meant the optimization of tracking dirty rects and only repainting part of your canvas. That makes sense if you often only need to repaint a small part of the canvas. If you usually need to repaint most of the canvas, it's not worth it.\n\n> > Most game platforms redraw the entire scene on every frame, as far as I know.\n> \n> Yeah, if you work with DirectX or OpenGL, you mostly redraw the entire\n> scene. This is not possible with Canvas. We'd probably need a 1000-2000%\n> performance increase to make this happen.\n\nI'm surprised, given the kind of numbers we can get on canvas benchmarks these days. I would love to see a benchmark that shows how you're trying to use canvas and how the performance isn't adequate. It may be that there are simple things we and other browsers can do to make it faster --- or it may be that we could tell you how to do things differently to go faster."}, {"id": 5627466, "count": 10, "is_private": false, "creation_time": "2011-08-02T12:41:14Z", "time": "2011-08-02T12:41:14Z", "creator": "pbakaus@zynga.com", "author": "pbakaus@zynga.com", "attachment_id": null, "raw_text": "(In reply to comment #9)\n> (In reply to comment #8)\n> > (In reply to comment #7)\n> > > (In reply to comment #6)\n> > > > We are not using canvas at all today because of perf implications,\n> > > \n> > > Is that mainly the issue that canvas isn't GPU-accelerated on some important\n> > > platforms? Or are there other issues?\n> > \n> > I'm honestly not sure. What I am pretty sure of, is that performance-wise,\n> > even in browsers were Canvas is GPU accelerated, Canvas performance is not\n> > even close to DOM performance. I'm working on a proof-of-concept for a\n> > canvas based renderer to have a solid proof.\n> \n> On the FishIETank canvas benchmark I get 40fps with 2000 fish on my Windows\n> 7 (high-end) laptop in Firefox, running maximized on a 1920x1080 screen.\n> (Note that 2000 fish is not offered directly in that page, you have to\n> override it with JS.) Can you really beat that with a non-canvas approach?\n> Or is this benchmark totally unrelated to what you need for games?\n> http://ie.microsoft.com/testdrive/Performance/FishIETank/Default.html\n> Using WebGL you can get considerably better sprite performance if you\n> optimize carefully.\n> http://muizelaar.blogspot.com/2011/02/drawing-sprites-canvas-2d-vs-webgl.html\n\nVery interesting. It might just be that the gap between Windows and OS X is way huger than I thought. Out of curiosity, I just ran the Fishtank in Chrome 14 on my pretty capable Macbook Pro at 1680x928 and it gave me 14fps with 20(!) Fish.\n\nMaybe my picture of the world is just skewed, and it might just be that DOM performance is more consistent across platforms.\n\n> \n> > > > but\n> > > > theoretically yes, we might greatly benefit from not repainting the entire\n> > > > scene. Imagine an isometric map with hundreds of depth sorted elements, and\n> > > > a character walks by on a street. You wouldn't want to draw the whole scene\n> > > > over and over just to animate the character.\n> > > \n> > > One question is whether that is worth optimizing. If your street graphics\n> > > are animated themselves, it may not be.\n> > \n> > Nope, streets are not animated. What kind of optimization would you propose?\n> \n> I meant the optimization of tracking dirty rects and only repainting part of\n> your canvas. That makes sense if you often only need to repaint a small part\n> of the canvas. If you usually need to repaint most of the canvas, it's not\n> worth it.\n\nYeah, true. Lots of different little regions shift a lot of the processing you need to do to the CPU (JS), which dramatically slows down the entire scene.\n\n> \n> > > Most game platforms redraw the entire scene on every frame, as far as I know.\n> > \n> > Yeah, if you work with DirectX or OpenGL, you mostly redraw the entire\n> > scene. This is not possible with Canvas. We'd probably need a 1000-2000%\n> > performance increase to make this happen.\n> \n> I'm surprised, given the kind of numbers we can get on canvas benchmarks\n> these days. I would love to see a benchmark that shows how you're trying to\n> use canvas and how the performance isn't adequate. It may be that there are\n> simple things we and other browsers can do to make it faster --- or it may\n> be that we could tell you how to do things differently to go faster.\n\nYeah, only way to find out. I will work on an experimental renderer for our game engine and see how it goes, then report back.\n\nThanks!", "tags": [], "bug_id": 673917, "text": "(In reply to comment #9)\n> (In reply to comment #8)\n> > (In reply to comment #7)\n> > > (In reply to comment #6)\n> > > > We are not using canvas at all today because of perf implications,\n> > > \n> > > Is that mainly the issue that canvas isn't GPU-accelerated on some important\n> > > platforms? Or are there other issues?\n> > \n> > I'm honestly not sure. What I am pretty sure of, is that performance-wise,\n> > even in browsers were Canvas is GPU accelerated, Canvas performance is not\n> > even close to DOM performance. I'm working on a proof-of-concept for a\n> > canvas based renderer to have a solid proof.\n> \n> On the FishIETank canvas benchmark I get 40fps with 2000 fish on my Windows\n> 7 (high-end) laptop in Firefox, running maximized on a 1920x1080 screen.\n> (Note that 2000 fish is not offered directly in that page, you have to\n> override it with JS.) Can you really beat that with a non-canvas approach?\n> Or is this benchmark totally unrelated to what you need for games?\n> http://ie.microsoft.com/testdrive/Performance/FishIETank/Default.html\n> Using WebGL you can get considerably better sprite performance if you\n> optimize carefully.\n> http://muizelaar.blogspot.com/2011/02/drawing-sprites-canvas-2d-vs-webgl.html\n\nVery interesting. It might just be that the gap between Windows and OS X is way huger than I thought. Out of curiosity, I just ran the Fishtank in Chrome 14 on my pretty capable Macbook Pro at 1680x928 and it gave me 14fps with 20(!) Fish.\n\nMaybe my picture of the world is just skewed, and it might just be that DOM performance is more consistent across platforms.\n\n> \n> > > > but\n> > > > theoretically yes, we might greatly benefit from not repainting the entire\n> > > > scene. Imagine an isometric map with hundreds of depth sorted elements, and\n> > > > a character walks by on a street. You wouldn't want to draw the whole scene\n> > > > over and over just to animate the character.\n> > > \n> > > One question is whether that is worth optimizing. If your street graphics\n> > > are animated themselves, it may not be.\n> > \n> > Nope, streets are not animated. What kind of optimization would you propose?\n> \n> I meant the optimization of tracking dirty rects and only repainting part of\n> your canvas. That makes sense if you often only need to repaint a small part\n> of the canvas. If you usually need to repaint most of the canvas, it's not\n> worth it.\n\nYeah, true. Lots of different little regions shift a lot of the processing you need to do to the CPU (JS), which dramatically slows down the entire scene.\n\n> \n> > > Most game platforms redraw the entire scene on every frame, as far as I know.\n> > \n> > Yeah, if you work with DirectX or OpenGL, you mostly redraw the entire\n> > scene. This is not possible with Canvas. We'd probably need a 1000-2000%\n> > performance increase to make this happen.\n> \n> I'm surprised, given the kind of numbers we can get on canvas benchmarks\n> these days. I would love to see a benchmark that shows how you're trying to\n> use canvas and how the performance isn't adequate. It may be that there are\n> simple things we and other browsers can do to make it faster --- or it may\n> be that we could tell you how to do things differently to go faster.\n\nYeah, only way to find out. I will work on an experimental renderer for our game engine and see how it goes, then report back.\n\nThanks!"}, {"text": "(In reply to comment #10)\n> (In reply to comment #9)\n> > (In reply to comment #8)\n> > > (In reply to comment #7)\n> > > > (In reply to comment #6)\n> > > > > We are not using canvas at all today because of perf implications,\n> > > > \n> > > > Is that mainly the issue that canvas isn't GPU-accelerated on some important\n> > > > platforms? Or are there other issues?\n> > > \n> > > I'm honestly not sure. What I am pretty sure of, is that performance-wise,\n> > > even in browsers were Canvas is GPU accelerated, Canvas performance is not\n> > > even close to DOM performance. I'm working on a proof-of-concept for a\n> > > canvas based renderer to have a solid proof.\n> > \n> > On the FishIETank canvas benchmark I get 40fps with 2000 fish on my Windows\n> > 7 (high-end) laptop in Firefox, running maximized on a 1920x1080 screen.\n> > (Note that 2000 fish is not offered directly in that page, you have to\n> > override it with JS.) Can you really beat that with a non-canvas approach?\n> > Or is this benchmark totally unrelated to what you need for games?\n> > http://ie.microsoft.com/testdrive/Performance/FishIETank/Default.html\n> > Using WebGL you can get considerably better sprite performance if you\n> > optimize carefully.\n> > http://muizelaar.blogspot.com/2011/02/drawing-sprites-canvas-2d-vs-webgl.html\n> \n> Very interesting. It might just be that the gap between Windows and OS X is\n> way huger than I thought. Out of curiosity, I just ran the Fishtank in\n> Chrome 14 on my pretty capable Macbook Pro at 1680x928 and it gave me 14fps\n> with 20(!) Fish.\n\nI wasn't content yet testing on OS X, so I tested on our Windows 7 machine, fairly recent medium-budget DELL desktop. I tested on Firefox 8 nighly, at 1080x1920, and got 21fps with 1000 fish. That being said, it was pretty clear that the reported fps didn't match the actual draws, which were rather 10-15fps.\n\nYes, this problem would go away with very high end graphic cards and CPUs. But other than the traditional game industry, we just can't force people to update their PCs and smartphones to play our games. The maximum we can do is to tell them to update their browsers.\n\n> \n> Maybe my picture of the world is just skewed, and it might just be that DOM\n> performance is more consistent across platforms.\n> \n> > \n> > > > > but\n> > > > > theoretically yes, we might greatly benefit from not repainting the entire\n> > > > > scene. Imagine an isometric map with hundreds of depth sorted elements, and\n> > > > > a character walks by on a street. You wouldn't want to draw the whole scene\n> > > > > over and over just to animate the character.\n> > > > \n> > > > One question is whether that is worth optimizing. If your street graphics\n> > > > are animated themselves, it may not be.\n> > > \n> > > Nope, streets are not animated. What kind of optimization would you propose?\n> > \n> > I meant the optimization of tracking dirty rects and only repainting part of\n> > your canvas. That makes sense if you often only need to repaint a small part\n> > of the canvas. If you usually need to repaint most of the canvas, it's not\n> > worth it.\n> \n> Yeah, true. Lots of different little regions shift a lot of the processing\n> you need to do to the CPU (JS), which dramatically slows down the entire\n> scene.\n> \n> > \n> > > > Most game platforms redraw the entire scene on every frame, as far as I know.\n> > > \n> > > Yeah, if you work with DirectX or OpenGL, you mostly redraw the entire\n> > > scene. This is not possible with Canvas. We'd probably need a 1000-2000%\n> > > performance increase to make this happen.\n> > \n> > I'm surprised, given the kind of numbers we can get on canvas benchmarks\n> > these days. I would love to see a benchmark that shows how you're trying to\n> > use canvas and how the performance isn't adequate. It may be that there are\n> > simple things we and other browsers can do to make it faster --- or it may\n> > be that we could tell you how to do things differently to go faster.\n> \n> Yeah, only way to find out. I will work on an experimental renderer for our\n> game engine and see how it goes, then report back.\n> \n> Thanks!", "bug_id": 673917, "tags": [], "attachment_id": null, "raw_text": "(In reply to comment #10)\n> (In reply to comment #9)\n> > (In reply to comment #8)\n> > > (In reply to comment #7)\n> > > > (In reply to comment #6)\n> > > > > We are not using canvas at all today because of perf implications,\n> > > > \n> > > > Is that mainly the issue that canvas isn't GPU-accelerated on some important\n> > > > platforms? Or are there other issues?\n> > > \n> > > I'm honestly not sure. What I am pretty sure of, is that performance-wise,\n> > > even in browsers were Canvas is GPU accelerated, Canvas performance is not\n> > > even close to DOM performance. I'm working on a proof-of-concept for a\n> > > canvas based renderer to have a solid proof.\n> > \n> > On the FishIETank canvas benchmark I get 40fps with 2000 fish on my Windows\n> > 7 (high-end) laptop in Firefox, running maximized on a 1920x1080 screen.\n> > (Note that 2000 fish is not offered directly in that page, you have to\n> > override it with JS.) Can you really beat that with a non-canvas approach?\n> > Or is this benchmark totally unrelated to what you need for games?\n> > http://ie.microsoft.com/testdrive/Performance/FishIETank/Default.html\n> > Using WebGL you can get considerably better sprite performance if you\n> > optimize carefully.\n> > http://muizelaar.blogspot.com/2011/02/drawing-sprites-canvas-2d-vs-webgl.html\n> \n> Very interesting. It might just be that the gap between Windows and OS X is\n> way huger than I thought. Out of curiosity, I just ran the Fishtank in\n> Chrome 14 on my pretty capable Macbook Pro at 1680x928 and it gave me 14fps\n> with 20(!) Fish.\n\nI wasn't content yet testing on OS X, so I tested on our Windows 7 machine, fairly recent medium-budget DELL desktop. I tested on Firefox 8 nighly, at 1080x1920, and got 21fps with 1000 fish. That being said, it was pretty clear that the reported fps didn't match the actual draws, which were rather 10-15fps.\n\nYes, this problem would go away with very high end graphic cards and CPUs. But other than the traditional game industry, we just can't force people to update their PCs and smartphones to play our games. The maximum we can do is to tell them to update their browsers.\n\n> \n> Maybe my picture of the world is just skewed, and it might just be that DOM\n> performance is more consistent across platforms.\n> \n> > \n> > > > > but\n> > > > > theoretically yes, we might greatly benefit from not repainting the entire\n> > > > > scene. Imagine an isometric map with hundreds of depth sorted elements, and\n> > > > > a character walks by on a street. You wouldn't want to draw the whole scene\n> > > > > over and over just to animate the character.\n> > > > \n> > > > One question is whether that is worth optimizing. If your street graphics\n> > > > are animated themselves, it may not be.\n> > > \n> > > Nope, streets are not animated. What kind of optimization would you propose?\n> > \n> > I meant the optimization of tracking dirty rects and only repainting part of\n> > your canvas. That makes sense if you often only need to repaint a small part\n> > of the canvas. If you usually need to repaint most of the canvas, it's not\n> > worth it.\n> \n> Yeah, true. Lots of different little regions shift a lot of the processing\n> you need to do to the CPU (JS), which dramatically slows down the entire\n> scene.\n> \n> > \n> > > > Most game platforms redraw the entire scene on every frame, as far as I know.\n> > > \n> > > Yeah, if you work with DirectX or OpenGL, you mostly redraw the entire\n> > > scene. This is not possible with Canvas. We'd probably need a 1000-2000%\n> > > performance increase to make this happen.\n> > \n> > I'm surprised, given the kind of numbers we can get on canvas benchmarks\n> > these days. I would love to see a benchmark that shows how you're trying to\n> > use canvas and how the performance isn't adequate. It may be that there are\n> > simple things we and other browsers can do to make it faster --- or it may\n> > be that we could tell you how to do things differently to go faster.\n> \n> Yeah, only way to find out. I will work on an experimental renderer for our\n> game engine and see how it goes, then report back.\n> \n> Thanks!", "time": "2011-08-02T12:59:36Z", "creation_time": "2011-08-02T12:59:36Z", "creator": "pbakaus@zynga.com", "author": "pbakaus@zynga.com", "id": 5627486, "count": 11, "is_private": false}, {"creation_time": "2011-08-02T13:42:53Z", "time": "2011-08-02T13:42:53Z", "creator": "bzbarsky@mit.edu", "author": "bzbarsky@mit.edu", "id": 5627539, "count": 12, "is_private": false, "bug_id": 673917, "text": "> Very interesting. It might just be that the gap between Windows and OS X is way\n> huger \n\nCanvas is not GPU-accelerated in a meaningful way on OS X in any browser I know of.  So far.", "tags": [], "attachment_id": null, "raw_text": "> Very interesting. It might just be that the gap between Windows and OS X is way\n> huger \n\nCanvas is not GPU-accelerated in a meaningful way on OS X in any browser I know of.  So far."}, {"is_private": false, "id": 5629300, "count": 13, "author": "roc@ocallahan.org", "creator": "roc@ocallahan.org", "time": "2011-08-03T00:20:45Z", "creation_time": "2011-08-03T00:20:45Z", "raw_text": "(In reply to comment #11)\n> I wasn't content yet testing on OS X, so I tested on our Windows 7 machine,\n> fairly recent medium-budget DELL desktop. I tested on Firefox 8 nighly, at\n> 1080x1920, and got 21fps with 1000 fish. That being said, it was pretty\n> clear that the reported fps didn't match the actual draws, which were rather\n> 10-15fps.\n\nMy laptop's a year old now, so I'm surprised that it's so much faster than that sort of desktop machine. You might want to test IE9/10 as well. If they get significantly better performance than us, you could file a bug against us and provide the information in about:support.\n\n> Yes, this problem would go away with very high end graphic cards and CPUs.\n> But other than the traditional game industry, we just can't force people to\n> update their PCs and smartphones to play our games. The maximum we can do is\n> to tell them to update their browsers.\n\nWe're definitely working on getting canvas acceleration enabled for more users on older machines (e.g. Windows XP), and so are other browser vendors. Hopefully soon we'll have canvas acceleration on every device that has a GPU, which is most devices that aren't really old, even most existing smartphones. When we get there, I think you'll find canvas beating DOM manipulation, at least on these sprite-bashing benchmarks. I suspect even on your Dell desktop, canvas would out-perform DOM manipulation in Firefox by some distance.\n\nDevices that don't have GPUs at all are just going to suck and there's not much anyone can do about that.\n\n> Maybe my picture of the world is just skewed, and it might just be that DOM\n> performance is more consistent across platforms.\n\nAlso, the only kind of really well-accelerated graphics shipping on phones right now AFAIK is iPhone Safari's CSS transforms, which are also accelerated on IE, Firefox and Chrome across various platforms, which is probably why people are going for that.", "attachment_id": null, "tags": [], "text": "(In reply to comment #11)\n> I wasn't content yet testing on OS X, so I tested on our Windows 7 machine,\n> fairly recent medium-budget DELL desktop. I tested on Firefox 8 nighly, at\n> 1080x1920, and got 21fps with 1000 fish. That being said, it was pretty\n> clear that the reported fps didn't match the actual draws, which were rather\n> 10-15fps.\n\nMy laptop's a year old now, so I'm surprised that it's so much faster than that sort of desktop machine. You might want to test IE9/10 as well. If they get significantly better performance than us, you could file a bug against us and provide the information in about:support.\n\n> Yes, this problem would go away with very high end graphic cards and CPUs.\n> But other than the traditional game industry, we just can't force people to\n> update their PCs and smartphones to play our games. The maximum we can do is\n> to tell them to update their browsers.\n\nWe're definitely working on getting canvas acceleration enabled for more users on older machines (e.g. Windows XP), and so are other browser vendors. Hopefully soon we'll have canvas acceleration on every device that has a GPU, which is most devices that aren't really old, even most existing smartphones. When we get there, I think you'll find canvas beating DOM manipulation, at least on these sprite-bashing benchmarks. I suspect even on your Dell desktop, canvas would out-perform DOM manipulation in Firefox by some distance.\n\nDevices that don't have GPUs at all are just going to suck and there's not much anyone can do about that.\n\n> Maybe my picture of the world is just skewed, and it might just be that DOM\n> performance is more consistent across platforms.\n\nAlso, the only kind of really well-accelerated graphics shipping on phones right now AFAIK is iPhone Safari's CSS transforms, which are also accelerated on IE, Firefox and Chrome across various platforms, which is probably why people are going for that.", "bug_id": 673917}, {"attachment_id": null, "raw_text": "Hi Robert,\n\nyes, CSS transforms make a real difference. We do sorting of objects not via zIndex but translateZ, giving us a huge performance boost. Tricks like that..\n\nI'm definitely revisiting Canvas. Early tests on Windows with latest browsers seem promising, although it is very early to tell. Unfortunately it's not only Win XP that's missing GPU accel, but also OS X (20x slower), rendering any strategy to jump on Canvas exclusively impossible for now. The only browser on a Mac that AFAIK might give us enough Canvas perf is Safari 5.1 on Lion.\n\nI'm eager to hear more about the progress on GPU rendering for Mac from different vendors.", "tags": [], "bug_id": 673917, "text": "Hi Robert,\n\nyes, CSS transforms make a real difference. We do sorting of objects not via zIndex but translateZ, giving us a huge performance boost. Tricks like that..\n\nI'm definitely revisiting Canvas. Early tests on Windows with latest browsers seem promising, although it is very early to tell. Unfortunately it's not only Win XP that's missing GPU accel, but also OS X (20x slower), rendering any strategy to jump on Canvas exclusively impossible for now. The only browser on a Mac that AFAIK might give us enough Canvas perf is Safari 5.1 on Lion.\n\nI'm eager to hear more about the progress on GPU rendering for Mac from different vendors.", "id": 5635307, "count": 14, "is_private": false, "time": "2011-08-05T08:06:00Z", "creation_time": "2011-08-05T08:06:00Z", "creator": "pbakaus@zynga.com", "author": "pbakaus@zynga.com"}, {"is_private": false, "id": 7734740, "count": 15, "author": "fb+mozdev@quantumedia.de", "creator": "fb+mozdev@quantumedia.de", "time": "2013-08-10T18:16:41Z", "creation_time": "2013-08-10T18:16:41Z", "raw_text": "Using image fragments (bug 790640) is another way to use sprites (at least in the near future). I don't know if this is any faster than transform or canvas.", "attachment_id": null, "tags": [], "bug_id": 673917, "text": "Using image fragments (bug 790640) is another way to use sprites (at least in the near future). I don't know if this is any faster than transform or canvas."}]}}, "comments": {}}