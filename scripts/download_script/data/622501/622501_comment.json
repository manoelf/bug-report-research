{"bugs": {"622501": {"comments": [{"raw_text": "User-Agent:       Mozilla/5.0 (Windows; U; Windows NT 5.1; nl; rv:1.9.2.13) Gecko/20101203\nBuild Identifier: Mozilla/5.0 (Windows; U; Windows NT 5.1; nl; rv:1.9.2.13) Gecko/20101203\n\nIn http://mxr.mozilla.org/mozilla1.9.2/source/parser/htmlparser/src/nsParser.cpp#1096\n\nThere is a block of code that checks the DOCTYPE of a document. Starting on line 1094 we noticed that if we insert a succession of '<' & '!' chars with whitespace but without the DOCTYPE or closing bracket '>', the loop will continue until it finds the DOCTYPE. With this is mind, we can create a denial of service with solely ASCII characters. See attached test case. When you add a closing bracket '>' at the end of the file, the denial of service will not occur. In order to keep the test case in a reasonable size, we added a meta refresh to emulate a larger file (5MB+) the meta tag does affect the vulnerability.\n\n1094   PRInt32 theIndex = 0;\n1095   do {\n1096     theIndex = aBuffer.FindChar('<', theIndex);\n1097     if (theIndex == kNotFound) break;\n1098     PRUnichar nextChar = aBuffer.CharAt(theIndex+1);\n1099     if (nextChar == PRUnichar('!')) {\n1100       PRInt32 tmpIndex = theIndex + 2;\n1101       if (kNotFound !=\n1102           (theIndex=aBuffer.Find(\"DOCTYPE\", PR_TRUE, tmpIndex, 0))) {\n1103         haveDoctype = PR_TRUE;\n1104         theIndex += 7; // skip \"DOCTYPE\"\n1105         break;\n1106       }\n1107       theIndex = ParsePS(aBuffer, tmpIndex);\n1108       theIndex = aBuffer.FindChar('>', theIndex);\n1109     } else if (nextChar == PRUnichar('?')) {\n1110       theIndex = aBuffer.FindChar('>', theIndex);\n1111     } else {\n1112       break;\n1113     }\n1114   } while (theIndex != kNotFound);\n\nReproducible: Always\n\nSteps to Reproduce:\n1. run attached test case\nActual Results:  \nApprox. 98% spike in CPU for minutes. (mileage may vary, due to CPU)\n\nExpected Results:  \nRestrict loop on parsing the doctype.", "bug_id": 622501, "author": "info@alexandra.help", "creator": "info@alexandra.help", "attachment_id": null, "time": "2011-01-03T09:03:38Z", "count": 0, "id": 5170797, "is_private": false, "text": "User-Agent:       Mozilla/5.0 (Windows; U; Windows NT 5.1; nl; rv:1.9.2.13) Gecko/20101203\nBuild Identifier: Mozilla/5.0 (Windows; U; Windows NT 5.1; nl; rv:1.9.2.13) Gecko/20101203\n\nIn http://mxr.mozilla.org/mozilla1.9.2/source/parser/htmlparser/src/nsParser.cpp#1096\n\nThere is a block of code that checks the DOCTYPE of a document. Starting on line 1094 we noticed that if we insert a succession of '<' & '!' chars with whitespace but without the DOCTYPE or closing bracket '>', the loop will continue until it finds the DOCTYPE. With this is mind, we can create a denial of service with solely ASCII characters. See attached test case. When you add a closing bracket '>' at the end of the file, the denial of service will not occur. In order to keep the test case in a reasonable size, we added a meta refresh to emulate a larger file (5MB+) the meta tag does affect the vulnerability.\n\n1094   PRInt32 theIndex = 0;\n1095   do {\n1096     theIndex = aBuffer.FindChar('<', theIndex);\n1097     if (theIndex == kNotFound) break;\n1098     PRUnichar nextChar = aBuffer.CharAt(theIndex+1);\n1099     if (nextChar == PRUnichar('!')) {\n1100       PRInt32 tmpIndex = theIndex + 2;\n1101       if (kNotFound !=\n1102           (theIndex=aBuffer.Find(\"DOCTYPE\", PR_TRUE, tmpIndex, 0))) {\n1103         haveDoctype = PR_TRUE;\n1104         theIndex += 7; // skip \"DOCTYPE\"\n1105         break;\n1106       }\n1107       theIndex = ParsePS(aBuffer, tmpIndex);\n1108       theIndex = aBuffer.FindChar('>', theIndex);\n1109     } else if (nextChar == PRUnichar('?')) {\n1110       theIndex = aBuffer.FindChar('>', theIndex);\n1111     } else {\n1112       break;\n1113     }\n1114   } while (theIndex != kNotFound);\n\nReproducible: Always\n\nSteps to Reproduce:\n1. run attached test case\nActual Results:  \nApprox. 98% spike in CPU for minutes. (mileage may vary, due to CPU)\n\nExpected Results:  \nRestrict loop on parsing the doctype.", "creation_time": "2011-01-03T09:03:38Z", "tags": []}, {"tags": [], "creation_time": "2011-01-03T09:04:35Z", "time": "2011-01-03T09:04:35Z", "creator": "info@alexandra.help", "attachment_id": 500756, "author": "info@alexandra.help", "bug_id": 622501, "text": "Created attachment 500756\nTestcase.", "is_private": false, "id": 5170798, "count": 1, "raw_text": ""}, {"creation_time": "2011-01-03T09:13:38Z", "tags": [], "text": "Created attachment 500757\nSource.", "is_private": false, "id": 5170800, "count": 2, "time": "2011-01-03T09:13:38Z", "author": "info@alexandra.help", "attachment_id": 500757, "creator": "info@alexandra.help", "bug_id": 622501, "raw_text": ""}, {"bug_id": 622501, "raw_text": "Confirmed with 3.6.13, Win7.\n\nDoes not occur with Mozilla/5.0 (Windows NT 6.1; WOW64; rv:2.0b9pre) Gecko/20110103 Firefox/4.0b9pre ID:20110103030359, other than for ~10 seconds after opening view source, but presumably this is expected behaviour since it's trying to do the syntax highlighting.\n\nShouldn't this be marked with the security hidden flag?", "time": "2011-01-03T15:18:01Z", "creator": "emorley@mozilla.com", "author": "emorley@mozilla.com", "attachment_id": null, "text": "Confirmed with 3.6.13, Win7.\n\nDoes not occur with Mozilla/5.0 (Windows NT 6.1; WOW64; rv:2.0b9pre) Gecko/20110103 Firefox/4.0b9pre ID:20110103030359, other than for ~10 seconds after opening view source, but presumably this is expected behaviour since it's trying to do the syntax highlighting.\n\nShouldn't this be marked with the security hidden flag?", "is_private": false, "id": 5171154, "count": 3, "tags": [], "creation_time": "2011-01-03T15:18:01Z"}, {"time": "2011-01-03T18:43:45Z", "creator": "info@alexandra.help", "author": "info@alexandra.help", "attachment_id": null, "bug_id": 622501, "raw_text": "Hi Ed, feel free to mark it. I'm not sure if it's a huge risk so far, or that it could unearth a larger issue. Further down the code more checking is being performed, like the presence of one or more DTD SYSTEMS. \n\nClock cycles affect the duration of the denial of service. I tested on a x86 Intel Pentium(R) 4 CPU 2.80GHz, 2.79 GHz, 3.00GB of RAM. The more chars the longer it takes, as expected with in the loop, therefore it might require a rather large file for fast CPU's.", "creation_time": "2011-01-03T18:43:45Z", "tags": [], "is_private": false, "text": "Hi Ed, feel free to mark it. I'm not sure if it's a huge risk so far, or that it could unearth a larger issue. Further down the code more checking is being performed, like the presence of one or more DTD SYSTEMS. \n\nClock cycles affect the duration of the denial of service. I tested on a x86 Intel Pentium(R) 4 CPU 2.80GHz, 2.79 GHz, 3.00GB of RAM. The more chars the longer it takes, as expected with in the loop, therefore it might require a rather large file for fast CPU's.", "count": 4, "id": 5171640}, {"time": "2011-01-04T08:55:13Z", "author": "hsivonen@mozilla.com", "attachment_id": null, "creator": "hsivonen@mozilla.com", "bug_id": 622501, "raw_text": "(In reply to comment #3)\n> Does not occur with Mozilla/5.0 (Windows NT 6.1; WOW64; rv:2.0b9pre)\n> Gecko/20110103 Firefox/4.0b9pre ID:20110103030359, other than for ~10 seconds\n> after opening view source, but presumably this is expected behaviour since it's\n> trying to do the syntax highlighting.\n\nView Source is still using the old parser in Firefox 4.0. (Replacing View Source with a new implementation is scheduled for post-4.0.)", "tags": [], "creation_time": "2011-01-04T08:55:13Z", "text": "(In reply to comment #3)\n> Does not occur with Mozilla/5.0 (Windows NT 6.1; WOW64; rv:2.0b9pre)\n> Gecko/20110103 Firefox/4.0b9pre ID:20110103030359, other than for ~10 seconds\n> after opening view source, but presumably this is expected behaviour since it's\n> trying to do the syntax highlighting.\n\nView Source is still using the old parser in Firefox 4.0. (Replacing View Source with a new implementation is scheduled for post-4.0.)", "is_private": false, "count": 5, "id": 5173211}, {"creator": "jstutte@mozilla.com", "author": "jstutte@mozilla.com", "attachment_id": null, "time": "2020-12-16T11:13:07Z", "creation_time": "2020-12-16T11:13:07Z", "tags": [], "raw_text": "Bulk-downgrade of unassigned, >=5 years untouched DOM/Storage bugs' priority.\n\nIf you have reason to believe this is wrong (especially for the severity), please write a comment and ni :jstutte.", "count": 6, "id": 15178440, "is_private": false, "text": "Bulk-downgrade of unassigned, >=5 years untouched DOM/Storage bugs' priority.\n\nIf you have reason to believe this is wrong (especially for the severity), please write a comment and ni :jstutte.", "bug_id": 622501}]}}, "comments": {}}