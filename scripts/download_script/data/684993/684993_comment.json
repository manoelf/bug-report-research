{"bugs": {"684993": {"comments": [{"creator": "passfree@gmail.com", "text": "User Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_6_8) AppleWebKit/535.2 (KHTML, like Gecko) Chrome/15.0.865.0 Safari/535.2\n\nSteps to reproduce:\n\nThe following should throw but it doesn't:\n\nioService.newURI('http://./', null, null).QueryInterface(CI.nsIURL)\n\nIf a developer relies on this method to validate a URL, this potentially could lead to other types of bugs.", "count": 0, "author": "passfree@gmail.com", "id": 5703256, "bug_id": 684993, "creation_time": "2011-09-06T21:45:58Z", "is_private": false, "time": "2011-09-06T21:45:58Z", "raw_text": "User Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_6_8) AppleWebKit/535.2 (KHTML, like Gecko) Chrome/15.0.865.0 Safari/535.2\n\nSteps to reproduce:\n\nThe following should throw but it doesn't:\n\nioService.newURI('http://./', null, null).QueryInterface(CI.nsIURL)\n\nIf a developer relies on this method to validate a URL, this potentially could lead to other types of bugs.", "attachment_id": null, "tags": []}, {"tags": [], "attachment_id": null, "creation_time": "2011-09-07T01:33:42Z", "is_private": false, "creator": "bzbarsky@mit.edu", "time": "2011-09-07T01:33:42Z", "raw_text": "newURI does all kinds of invalid-url fixup, so if you're using it to _validate_ URLs, you've already lost.", "bug_id": 684993, "id": 5703744, "text": "newURI does all kinds of invalid-url fixup, so if you're using it to _validate_ URLs, you've already lost.", "count": 1, "author": "bzbarsky@mit.edu"}, {"tags": [], "attachment_id": null, "is_private": false, "creation_time": "2011-09-07T07:34:22Z", "creator": "passfree@gmail.com", "time": "2011-09-07T07:34:22Z", "raw_text": "Then \n\nhttps://developer.mozilla.org/en/nsIURI\nhttps://developer.mozilla.org/en/XPCOM_Interface_Reference/nsIURL\n\nIs totally wrong.\n\nThe documentation reads...\n\n\"\"\"\nSubclasses of nsIURI, such as nsIURL , impose further structure on the URI.\n\"\"\"\n\nThen\n\n\"\"\"\nYou can get a nsIURL from a nsIURI, using the QueryInterface method:\n\"\"\"\n\nAnd there is even an example:\n\n\"\"\"\nvar myURI = Components.classes[\"@mozilla.org/network/io-service;1\"]\n                      .getService(Components.interfaces.nsIIOService)\n                      .newURI(\"http://developer.mozilla.org\", null, null);\ntry {\n  var myURL = myURI.QueryInterface(Components.interfaces.nsIURL);\n}\ncatch(e) {\n  // the URI is not an URL\n}\n\"\"\"\n\nI don't mind if the ioService cannot parse URLs correctly but we need to make sure that this is the same message delivered in the documentation. :)", "id": 5704124, "bug_id": 684993, "author": "passfree@gmail.com", "text": "Then \n\nhttps://developer.mozilla.org/en/nsIURI\nhttps://developer.mozilla.org/en/XPCOM_Interface_Reference/nsIURL\n\nIs totally wrong.\n\nThe documentation reads...\n\n\"\"\"\nSubclasses of nsIURI, such as nsIURL , impose further structure on the URI.\n\"\"\"\n\nThen\n\n\"\"\"\nYou can get a nsIURL from a nsIURI, using the QueryInterface method:\n\"\"\"\n\nAnd there is even an example:\n\n\"\"\"\nvar myURI = Components.classes[\"@mozilla.org/network/io-service;1\"]\n                      .getService(Components.interfaces.nsIIOService)\n                      .newURI(\"http://developer.mozilla.org\", null, null);\ntry {\n  var myURL = myURI.QueryInterface(Components.interfaces.nsIURL);\n}\ncatch(e) {\n  // the URI is not an URL\n}\n\"\"\"\n\nI don't mind if the ioService cannot parse URLs correctly but we need to make sure that this is the same message delivered in the documentation. :)", "count": 2}, {"author": "bzbarsky@mit.edu", "text": "The documentation is completely correct.  It's talking about the objects (e.g. an nsIURL has a filename and a path, whereas a typical nsIURI might well not have those).\n\nIOService parses urls the way they need to be parsed on the web.  If you want non-web URL parsing, you'll probably need to roll your own.", "count": 3, "id": 5704570, "bug_id": 684993, "raw_text": "The documentation is completely correct.  It's talking about the objects (e.g. an nsIURL has a filename and a path, whereas a typical nsIURI might well not have those).\n\nIOService parses urls the way they need to be parsed on the web.  If you want non-web URL parsing, you'll probably need to roll your own.", "time": "2011-09-07T13:19:04Z", "creator": "bzbarsky@mit.edu", "is_private": false, "creation_time": "2011-09-07T13:19:04Z", "attachment_id": null, "tags": []}, {"creation_time": "2011-09-07T13:27:56Z", "is_private": false, "id": 5704584, "bug_id": 684993, "count": 4, "text": "Imho this is a bit misleading. If nsIURL is only used to cast nsIURI to URLs, i.e. add more fields to the object, then the documentation should not recommend this as a method for validating urls. Therefore the example in the MDC should be removed to avoid further confusion.\n\nAs I said I am not trying to solve my own bug :) but I thought to report it since it doesn't make sense to me.", "author": "passfree@gmail.com", "creator": "passfree@gmail.com", "tags": [], "raw_text": "Imho this is a bit misleading. If nsIURL is only used to cast nsIURI to URLs, i.e. add more fields to the object, then the documentation should not recommend this as a method for validating urls. Therefore the example in the MDC should be removed to avoid further confusion.\n\nAs I said I am not trying to solve my own bug :) but I thought to report it since it doesn't make sense to me.", "attachment_id": null, "time": "2011-09-07T13:27:56Z"}, {"bug_id": 684993, "id": 5704609, "creation_time": "2011-09-07T13:35:50Z", "is_private": false, "creator": "bzbarsky@mit.edu", "count": 5, "text": "Where does the documentation mention \"validating\"?\n\nThe example doesn't say anything about validating, either.  You may be misunderstanding what \"not a URL\" means there; it just means \"not an instance of nsIURL\"...  Would that wording change make it clearer?\n\nI'm happy to clarify the documentation, but I really don't see how you got validation out of it to start with....", "author": "bzbarsky@mit.edu", "tags": [], "time": "2011-09-07T13:35:50Z", "raw_text": "Where does the documentation mention \"validating\"?\n\nThe example doesn't say anything about validating, either.  You may be misunderstanding what \"not a URL\" means there; it just means \"not an instance of nsIURL\"...  Would that wording change make it clearer?\n\nI'm happy to clarify the documentation, but I really don't see how you got validation out of it to start with....", "attachment_id": null}, {"bug_id": 684993, "id": 5704623, "creation_time": "2011-09-07T13:41:39Z", "is_private": false, "creator": "passfree@gmail.com", "count": 6, "text": "Well the comment say that \"URI is not a valid URL\". From a person who has no idea what is going on underneath the ioService this is misleading. By reading the documentation my understandings are that the ioService can parse any URI. If I try to Query for the nsURL I will get a URL. If the URL is not valid an exception will be thrown.\n\nBtw, incase you missed the point I am trying to make...\n\nhttp://./\n\n...is not a valid url. This is also not a valid url:\n\nhttp://:/\n\nbut the ioService is happy to accept both. Both may look fine from URI point of view but make no sense as URLs.", "author": "passfree@gmail.com", "tags": [], "time": "2011-09-07T13:41:39Z", "raw_text": "Well the comment say that \"URI is not a valid URL\". From a person who has no idea what is going on underneath the ioService this is misleading. By reading the documentation my understandings are that the ioService can parse any URI. If I try to Query for the nsURL I will get a URL. If the URL is not valid an exception will be thrown.\n\nBtw, incase you missed the point I am trying to make...\n\nhttp://./\n\n...is not a valid url. This is also not a valid url:\n\nhttp://:/\n\nbut the ioService is happy to accept both. Both may look fine from URI point of view but make no sense as URLs.", "attachment_id": null}, {"time": "2011-09-07T13:51:00Z", "raw_text": "> Well the comment say that \"URI is not a valid URL\".\n\nNo, that's in fact _not_ what it says.  What it says is what you said in comment 2 and very much does not use the word \"valid\".\n\n> By reading the documentation my understandings are that the ioService can parse any\n> URI.\n\nNot at all.  It'll try to parse the string you give it as a URI, including some fixup, and then if that fails it will throw.\n\n> If I try to Query for the nsURL I will get a URL.\n\nIf the URI is for a hierarchical scheme.  Otherwise it will throw.\n\nI have no idea how you're defining \"URL\" in comment 6, but those are strings that need to be parsable into http: nsIURI objects for web compat.  And any http: nsIURI implements nsIURL.", "id": 5704648, "bug_id": 684993, "count": 7, "text": "> Well the comment say that \"URI is not a valid URL\".\n\nNo, that's in fact _not_ what it says.  What it says is what you said in comment 2 and very much does not use the word \"valid\".\n\n> By reading the documentation my understandings are that the ioService can parse any\n> URI.\n\nNot at all.  It'll try to parse the string you give it as a URI, including some fixup, and then if that fails it will throw.\n\n> If I try to Query for the nsURL I will get a URL.\n\nIf the URI is for a hierarchical scheme.  Otherwise it will throw.\n\nI have no idea how you're defining \"URL\" in comment 6, but those are strings that need to be parsable into http: nsIURI objects for web compat.  And any http: nsIURI implements nsIURL.", "author": "bzbarsky@mit.edu", "tags": [], "attachment_id": null, "is_private": false, "creation_time": "2011-09-07T13:51:00Z", "creator": "bzbarsky@mit.edu"}]}}, "comments": {}}