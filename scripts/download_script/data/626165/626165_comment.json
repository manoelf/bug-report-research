{"bugs": {"626165": {"comments": [{"creation_time": "2011-01-16T02:56:57Z", "tags": [], "attachment_id": null, "author": "bzbarsky@mit.edu", "creator": "bzbarsky@mit.edu", "time": "2011-01-16T02:56:57Z", "id": 5203128, "raw_text": "In-browser times with that patch for the testcase (linked in the url field):\n\n-j: 515ms\n-j -m: 520ms\n-j -m -p: 640-700ms (very noisy)\n-m: 1116ms\n\nFor comparison, Chrome 10 dev build is 644ms.  So on my machine we're about at parity with that; on the machine of the original reporter of bug 609212 (which is presumably 32-bit builds, since it's Windows; the above numbers for us are all 64-bit on Mac) we're about 16% slower than V8.  I don't know how much it matters that his machine is also slower than mine and may or may not have a bigger cache, etc.", "count": 0, "text": "In-browser times with that patch for the testcase (linked in the url field):\n\n-j: 515ms\n-j -m: 520ms\n-j -m -p: 640-700ms (very noisy)\n-m: 1116ms\n\nFor comparison, Chrome 10 dev build is 644ms.  So on my machine we're about at parity with that; on the machine of the original reporter of bug 609212 (which is presumably 32-bit builds, since it's Windows; the above numbers for us are all 64-bit on Mac) we're about 16% slower than V8.  I don't know how much it matters that his machine is also slower than mine and may or may not have a bigger cache, etc.", "bug_id": 626165, "is_private": false}, {"is_private": false, "text": "On the testcase for build: Mozilla/5.0 (Windows NT 5.1; rv:2.0b10pre) Gecko/20110115 Firefox/4.0b10pre ID:20110115102915 I get FPS: Processing: 1950ms\n\nOn the testcase for Chrome 8.0.552.237 I get FPS: Processing: 1691ms\n\n~B", "count": 1, "id": 5203137, "creation_time": "2011-01-16T03:05:00Z", "tags": [], "bug_id": 626165, "raw_text": "On the testcase for build: Mozilla/5.0 (Windows NT 5.1; rv:2.0b10pre) Gecko/20110115 Firefox/4.0b10pre ID:20110115102915 I get FPS: Processing: 1950ms\n\nOn the testcase for Chrome 8.0.552.237 I get FPS: Processing: 1691ms\n\n~B", "time": "2011-01-16T03:05:00Z", "creator": "BoxerBoi76@gmail.com", "attachment_id": null, "author": "BoxerBoi76@gmail.com"}, {"id": 8086925, "count": 2, "is_private": false, "text": "Nightly 930-1100ms\nChrome 31 320-340ms\nIE 10 850-910ms\n\nMaybe the problem is 609296.", "tags": [], "creation_time": "2013-11-16T02:42:48Z", "raw_text": "Nightly 930-1100ms\nChrome 31 320-340ms\nIE 10 850-910ms\n\nMaybe the problem is 609296.", "bug_id": 626165, "creator": "guijoselito@gmail.com", "author": "guijoselito@gmail.com", "attachment_id": null, "time": "2013-11-16T02:42:48Z"}, {"bug_id": 626165, "is_private": false, "text": "> Maybe the problem is 609296.\n\nIt's possible.\n\nA profile shows that on main thread about 1/3 of the time is under js::CallProperty called from jitcode.  Almost half of this is js::PrimitiveToObject.  Most of the rest is js::baseops::GetProperty, mostly under LookupPropertyWithFlagsInline.  Presumably this is some property being gotten on a primitive string that we don't manage to fast-path.\n\n20% is js::SetObjectElement.  Most of this is JSObject::growElements and its realloc?\n10% is js_num_toString.  \n7% is js::jit::ArrayPushDense.\n7% is str_toLowerCase.\n5% is js::ConcatStrings\n5% is CloneRegExpObject.\n4% is str_replace\n2% is js::jit::CheckOverRecursed\n2% is js::jit::CharCodeAt\n\nSo the CallGetProperty and SetObjectElement are the main obvious issues.", "id": 8128837, "raw_text": "> Maybe the problem is 609296.\n\nIt's possible.\n\nA profile shows that on main thread about 1/3 of the time is under js::CallProperty called from jitcode.  Almost half of this is js::PrimitiveToObject.  Most of the rest is js::baseops::GetProperty, mostly under LookupPropertyWithFlagsInline.  Presumably this is some property being gotten on a primitive string that we don't manage to fast-path.\n\n20% is js::SetObjectElement.  Most of this is JSObject::growElements and its realloc?\n10% is js_num_toString.  \n7% is js::jit::ArrayPushDense.\n7% is str_toLowerCase.\n5% is js::ConcatStrings\n5% is CloneRegExpObject.\n4% is str_replace\n2% is js::jit::CheckOverRecursed\n2% is js::jit::CharCodeAt\n\nSo the CallGetProperty and SetObjectElement are the main obvious issues.", "count": 3, "time": "2013-11-27T01:38:42Z", "creator": "bzbarsky@mit.edu", "attachment_id": null, "author": "bzbarsky@mit.edu", "tags": [], "creation_time": "2013-11-27T01:38:42Z"}, {"tags": [], "creation_time": "2013-11-27T13:10:09Z", "text": "(Note that Peacekeeper no longer seems to have this test. Unfortunate because this test is a lot more reasonable than the other JS tests they have...)\n\nI'll take a look though.", "is_private": false, "count": 4, "id": 8130735, "time": "2013-11-27T13:10:09Z", "attachment_id": null, "author": "jdemooij@mozilla.com", "creator": "jdemooij@mozilla.com", "bug_id": 626165, "raw_text": "(Note that Peacekeeper no longer seems to have this test. Unfortunate because this test is a lot more reasonable than the other JS tests they have...)\n\nI'll take a look though."}, {"text": "The patch in bug 609296 improves this from 636 ms to 427 ms, that should take care of the CallGetProperty I think. Will look into the SetObjectElement calls now...", "is_private": false, "bug_id": 626165, "count": 5, "id": 8131006, "raw_text": "The patch in bug 609296 improves this from 636 ms to 427 ms, that should take care of the CallGetProperty I think. Will look into the SetObjectElement calls now...", "creation_time": "2013-11-27T14:36:11Z", "tags": [], "time": "2013-11-27T14:36:11Z", "attachment_id": null, "author": "jdemooij@mozilla.com", "creator": "jdemooij@mozilla.com"}, {"is_private": false, "text": "The SetObjectElement calls we can fix by eagerly allocating this array: \"new Array(80)\". Bug 799122 did that for the most part, except when Array is inlined in Ion :(\n\nThat should get us to 325 ms or so, with bug 609296 almost 2x faster than trunk but still slower than d8. \n\nThere's a bunch of smaller issues: Ion could inline number.toString(), with GGC MArrayPush can allocate elements directly without calling ArrayPushDense, etc.", "count": 6, "id": 8131103, "tags": [], "creation_time": "2013-11-27T14:58:12Z", "bug_id": 626165, "raw_text": "The SetObjectElement calls we can fix by eagerly allocating this array: \"new Array(80)\". Bug 799122 did that for the most part, except when Array is inlined in Ion :(\n\nThat should get us to 325 ms or so, with bug 609296 almost 2x faster than trunk but still slower than d8. \n\nThere's a bunch of smaller issues: Ion could inline number.toString(), with GGC MArrayPush can allocate elements directly without calling ArrayPushDense, etc.", "time": "2013-11-27T14:58:12Z", "author": "jdemooij@mozilla.com", "creator": "jdemooij@mozilla.com", "attachment_id": null}, {"is_private": false, "text": "Filed bug 959161 for the first part of comment 6.", "id": 8282657, "count": 7, "tags": [], "creation_time": "2014-01-13T14:12:47Z", "bug_id": 626165, "raw_text": "Filed bug 959161 for the first part of comment 6.", "time": "2014-01-13T14:12:47Z", "creator": "jdemooij@mozilla.com", "author": "jdemooij@mozilla.com", "attachment_id": null}, {"creation_time": "2014-01-19T17:24:03Z", "tags": [], "id": 8307923, "count": 8, "text": "Nightly for me now is 480-550ms... a 50% improvement in 2 months!", "is_private": false, "author": "guijoselito@gmail.com", "creator": "guijoselito@gmail.com", "attachment_id": null, "time": "2014-01-19T17:24:03Z", "raw_text": "Nightly for me now is 480-550ms... a 50% improvement in 2 months!", "bug_id": 626165}]}}, "comments": {}}