{"comments": {}, "bugs": {"657864": {"comments": [{"author": "karlt@mozbugz.karlt.net", "creation_time": "2011-05-18T04:53:43Z", "text": "I'll attach a reftest that uses a font with a known line-height to measure the line-height used by layout.  To keep things simple, the ascents and descents in the font are less than the line-height, and both the hhea and OS/2 line-heights are equal.\n\nThe em-size and line-height of the font in the test are both integer multiples of pixel sizes, so results are predictable, but ascents and descents are not integer to try out the computations.\n\nIt passes with gfxFT2FontBase.\nLine height is 1 pixel too large with gfxDWriteFont.\nLine height is 1 pixel too small with gfxGDIFont.\nLine height is 4 pixels too large with gfxMacFont.", "id": 5476460, "raw_text": "I'll attach a reftest that uses a font with a known line-height to measure the line-height used by layout.  To keep things simple, the ascents and descents in the font are less than the line-height, and both the hhea and OS/2 line-heights are equal.\n\nThe em-size and line-height of the font in the test are both integer multiples of pixel sizes, so results are predictable, but ascents and descents are not integer to try out the computations.\n\nIt passes with gfxFT2FontBase.\nLine height is 1 pixel too large with gfxDWriteFont.\nLine height is 1 pixel too small with gfxGDIFont.\nLine height is 4 pixels too large with gfxMacFont.", "creator": "karlt@mozbugz.karlt.net", "tags": [], "count": 0, "bug_id": 657864, "attachment_id": null, "is_private": false, "time": "2011-05-18T04:53:43Z"}, {"bug_id": 657864, "count": 1, "creator": "karlt@mozbugz.karlt.net", "tags": [], "time": "2011-05-18T04:58:14Z", "text": "Created attachment 533179\nreftest", "is_private": false, "creation_time": "2011-05-18T04:58:14Z", "raw_text": "", "id": 5476463, "author": "karlt@mozbugz.karlt.net", "attachment_id": 533179}, {"text": "Created attachment 533180\nDWrite part 1: be more careful about rounding metrics so as to preserve line-heights\n\nBased on FT2 code, the key here is to round the line-height to nearest pixel rather than the leading (which is currently rounded up).", "is_private": false, "creation_time": "2011-05-18T05:11:08Z", "raw_text": "Based on FT2 code, the key here is to round the line-height to nearest pixel rather than the leading (which is currently rounded up).", "id": 5476470, "bug_id": 657864, "time": "2011-05-18T05:11:08Z", "tags": [], "creator": "karlt@mozbugz.karlt.net", "count": 2, "author": "karlt@mozbugz.karlt.net", "attachment_id": 533180}, {"author": "karlt@mozbugz.karlt.net", "bug_id": 657864, "count": 3, "tags": [], "creator": "karlt@mozbugz.karlt.net", "text": "Created attachment 533181\nDWrite part 2: consider precision when rounding metrics up\n\nA change to double precision variables in the previous patch introduced a rounding error caught by the ahem-metrics-1 reftest.\n\nWhen rounding to nearest pixel above, we need to consider the precision of our calculations to avoid rounding up what is already pixel aligned.", "creation_time": "2011-05-18T05:17:36Z", "raw_text": "A change to double precision variables in the previous patch introduced a rounding error caught by the ahem-metrics-1 reftest.\n\nWhen rounding to nearest pixel above, we need to consider the precision of our calculations to avoid rounding up what is already pixel aligned.", "id": 5476475, "attachment_id": 533181, "time": "2011-05-18T05:17:36Z", "is_private": false}, {"author": "karlt@mozbugz.karlt.net", "raw_text": "Try build:\nhttp://ftp.mozilla.org/pub/mozilla.org/firefox/try-builds/ktomlinson@mozilla.com-b16abe234e10/try-win32/", "id": 5476506, "text": "Try build:\nhttp://ftp.mozilla.org/pub/mozilla.org/firefox/try-builds/ktomlinson@mozilla.com-b16abe234e10/try-win32/", "creation_time": "2011-05-18T05:50:17Z", "bug_id": 657864, "count": 4, "creator": "karlt@mozbugz.karlt.net", "tags": [], "attachment_id": null, "is_private": false, "time": "2011-05-18T05:50:17Z"}, {"is_private": false, "time": "2011-05-22T23:22:05Z", "attachment_id": null, "text": "Checked-in the reftest:\nhttp://hg.mozilla.org/mozilla-central/rev/a884b23f7d16", "creation_time": "2011-05-22T23:22:05Z", "raw_text": "Checked-in the reftest:\nhttp://hg.mozilla.org/mozilla-central/rev/a884b23f7d16", "id": 5485583, "bug_id": 657864, "creator": "karlt@mozbugz.karlt.net", "tags": [], "count": 5, "author": "karlt@mozbugz.karlt.net"}, {"time": "2011-08-22T21:18:38Z", "is_private": false, "attachment_id": null, "bug_id": 657864, "creator": "jfkthame@gmail.com", "count": 6, "tags": [], "text": "(In reply to Karl Tomlinson (:karlt) from comment #0)\n\n> It passes with gfxFT2FontBase.\n> Line height is 1 pixel too large with gfxDWriteFont.\n> Line height is 1 pixel too small with gfxGDIFont.\n> Line height is 4 pixels too large with gfxMacFont.\n\nThe 1-pixel discrepancies with DWrite and GDI can plausibly be attributed to rounding issues (and the patches here ought to fix the DW case), but the 4-pixel discrepancy with gfxMacFont is more worrying - it suggests that we are using a completely different basis for line-height metrics in this case.\n\nOne thing I notice in the markA-lineheight1500.ttf font is that the sTypo* metrics in the OS/2 table do not match the other ascent and descent metrics. This doesn't account for the Mac discrepancy, but it does seem like a potential pitfall with the current version of the test font.\n\nI'd really like to do some further investigation of metrics on the various platforms before we make any firm decisions here.", "creation_time": "2011-08-22T21:18:38Z", "raw_text": "(In reply to Karl Tomlinson (:karlt) from comment #0)\n\n> It passes with gfxFT2FontBase.\n> Line height is 1 pixel too large with gfxDWriteFont.\n> Line height is 1 pixel too small with gfxGDIFont.\n> Line height is 4 pixels too large with gfxMacFont.\n\nThe 1-pixel discrepancies with DWrite and GDI can plausibly be attributed to rounding issues (and the patches here ought to fix the DW case), but the 4-pixel discrepancy with gfxMacFont is more worrying - it suggests that we are using a completely different basis for line-height metrics in this case.\n\nOne thing I notice in the markA-lineheight1500.ttf font is that the sTypo* metrics in the OS/2 table do not match the other ascent and descent metrics. This doesn't account for the Mac discrepancy, but it does seem like a potential pitfall with the current version of the test font.\n\nI'd really like to do some further investigation of metrics on the various platforms before we make any firm decisions here.", "id": 5670242, "author": "jfkthame@gmail.com"}, {"author": "karlt@mozbugz.karlt.net", "bug_id": 657864, "tags": [], "creator": "karlt@mozbugz.karlt.net", "count": 7, "text": "I'm not aware of any reason why the sTypo* ascent and ascent should match hhea or win metrics.  I'd expect them to normally be different, but this font is a little different from typical latin-centric fonts in that the glyph-based metrics are smaller than the typo metrics.", "creation_time": "2011-08-23T06:55:09Z", "raw_text": "I'm not aware of any reason why the sTypo* ascent and ascent should match hhea or win metrics.  I'd expect them to normally be different, but this font is a little different from typical latin-centric fonts in that the glyph-based metrics are smaller than the typo metrics.", "id": 5671357, "attachment_id": null, "time": "2011-08-23T06:55:09Z", "is_private": false}, {"attachment_id": null, "time": "2011-08-23T10:07:05Z", "is_private": false, "author": "jfkthame@gmail.com", "bug_id": 657864, "tags": [], "creator": "jfkthame@gmail.com", "count": 8, "raw_text": "(In reply to Karl Tomlinson (:karlt) from comment #7)\n> I'm not aware of any reason why the sTypo* ascent and ascent should match\n> hhea or win metrics.  I'd expect them to normally be different, but this\n> font is a little different from typical latin-centric fonts in that the\n> glyph-based metrics are smaller than the typo metrics.\n\nYes, in \"normal\" fonts the sTypo* metrics will often be different from the others, but I think for this special testing font we should probably ensure they're the same, to eliminate one potential source of discrepancies between backends.", "id": 5671559, "text": "(In reply to Karl Tomlinson (:karlt) from comment #7)\n> I'm not aware of any reason why the sTypo* ascent and ascent should match\n> hhea or win metrics.  I'd expect them to normally be different, but this\n> font is a little different from typical latin-centric fonts in that the\n> glyph-based metrics are smaller than the typo metrics.\n\nYes, in \"normal\" fonts the sTypo* metrics will often be different from the others, but I think for this special testing font we should probably ensure they're the same, to eliminate one potential source of discrepancies between backends.", "creation_time": "2011-08-23T10:07:05Z"}, {"tags": [], "creator": "karlt@mozbugz.karlt.net", "count": 9, "bug_id": 657864, "creation_time": "2011-08-24T00:33:02Z", "text": "Part of the point of the test is to check that line height metrics, not glyph bound metrics are used to determine line height.  If necessary, perhaps we could add further test fonts to check that other variations in non-line-height metrics don't affect the line-height.  For diagnosis of the discrepancies, another font could easily be used, if that helps.", "id": 5673662, "raw_text": "Part of the point of the test is to check that line height metrics, not glyph bound metrics are used to determine line height.  If necessary, perhaps we could add further test fonts to check that other variations in non-line-height metrics don't affect the line-height.  For diagnosis of the discrepancies, another font could easily be used, if that helps.", "author": "karlt@mozbugz.karlt.net", "time": "2011-08-24T00:33:02Z", "is_private": false, "attachment_id": null}, {"is_private": false, "time": "2013-05-07T09:16:11Z", "attachment_id": null, "raw_text": "Review and progress stalled?", "id": 7394734, "text": "Review and progress stalled?", "creation_time": "2013-05-07T09:16:11Z", "bug_id": 657864, "tags": [], "count": 10, "creator": "pppx@i.com.ua", "author": "pppx@i.com.ua"}, {"id": 7394834, "raw_text": "It hasn't been a high priority, that's all. Is this causing significant issues? As per comment 6, we definitely have some discrepancies, but I think it'd be best to address this across all platforms in a uniform way if possible.", "creation_time": "2013-05-07T09:47:33Z", "is_private": false, "text": "It hasn't been a high priority, that's all. Is this causing significant issues? As per comment 6, we definitely have some discrepancies, but I think it'd be best to address this across all platforms in a uniform way if possible.", "creator": "jfkthame@gmail.com", "count": 11, "tags": [], "time": "2013-05-07T09:47:33Z", "bug_id": 657864, "attachment_id": null, "author": "jfkthame@gmail.com"}, {"attachment_id": null, "is_private": false, "time": "2013-05-07T10:12:02Z", "author": "pppx@i.com.ua", "text": "(In reply to Jonathan Kew (:jfkthame) from comment #11)\n> Is this causing significant issues?\nIt looks like that this causing incorrect rendering in SeaMonkey Preferences (see https://bug868495.bugzilla.mozilla.org/attachment.cgi?id=745243), it may be workarounded in SM code but it is always better to remove the source of the problem.", "creation_time": "2013-05-07T10:12:02Z", "raw_text": "(In reply to Jonathan Kew (:jfkthame) from comment #11)\n> Is this causing significant issues?\nIt looks like that this causing incorrect rendering in SeaMonkey Preferences (see https://bug868495.bugzilla.mozilla.org/attachment.cgi?id=745243), it may be workarounded in SM code but it is always better to remove the source of the problem.", "id": 7394890, "bug_id": 657864, "count": 12, "tags": [], "creator": "pppx@i.com.ua"}, {"author": "jfkthame@gmail.com", "attachment_id": null, "raw_text": "I'd like to get this finished up and landed (sorry it's languished for so long!), and have been looking into the issues with GDI and OS X metrics.\n\nKarl's patches for DWrite look fine, but when I tried rebasing them to current trunk and pushing a tryserver job, I'm seeing test failures in mochitest-metro-chrome:\n\nTEST-UNEXPECTED-FAIL | chrome://mochitests/content/metro/browser/metro/base/tests/mochitest/browser_context_menu_tests.js | Top position is 212, expected between 220 and 230\nTEST-UNEXPECTED-FAIL | chrome://mochitests/content/metro/browser/metro/base/tests/mochitest/browser_context_menu_tests.js | Top position is 173, expected between 175 and 190\nTEST-UNEXPECTED-FAIL | chrome://mochitests/content/metro/browser/metro/base/tests/mochitest/browser_context_menu_tests.js | Top position is 94, expected between 95 and 110\nTEST-UNEXPECTED-FAIL | chrome://mochitests/content/metro/browser/metro/base/tests/mochitest/browser_context_menu_tests.js | Top position is 94, expected between 110 and 125\nTEST-UNEXPECTED-FAIL | chrome://mochitests/content/metro/browser/metro/base/tests/mochitest/browser_selection_frame_content.js | selection test - Got waistcoat, expected started\nTEST-UNEXPECTED-FAIL | chrome://mochitests/content/metro/browser/metro/base/tests/mochitest/browser_selection_frame_content.js | runTests: Task failed - Error: Timed out waiting for condition to be true at waitForCondition@chrome://mochitests/content/metro/browser/metro/base/tests/mochitest/head.js:426\nTEST-UNEXPECTED-FAIL | chrome://mochitests/content/metro/browser/metro/base/tests/mochitest/browser_selection_frame_content.js | selection test - Got .\nTEST-UNEXPECTED-FAIL | chrome://mochitests/content/metro/browser/metro/base/tests/mochitest/browser_selection_frame_textarea.js | Y position is 654.2000122070312, expected between 675 and 690\nTEST-UNEXPECTED-FAIL | chrome://mochitests/content/metro/browser/metro/base/tests/mochitest/browser_selection_frame_textarea.js | Y position is 654.2000122070312, expected between 675 and 690\n\n(See https://tbpl.mozilla.org/?tree=Try&rev=86f5c4a0d5b3)\n\nIt looks to me like these tests are making fragile assumptions about default line-height, and where things end up on screen as a result; the patch here will make line-height slightly smaller in some cases, and this is resulting in failures.\n\n:jimm, could you (or someone) take a look at these and see what you think? A possible fix here is for us to simply change the tests to update their \"expected\" results. Is that reasonable, or are the coordinates specified in the tests based on something more than empirical observation of what's currently happening?", "id": 8364807, "text": "I'd like to get this finished up and landed (sorry it's languished for so long!), and have been looking into the issues with GDI and OS X metrics.\n\nKarl's patches for DWrite look fine, but when I tried rebasing them to current trunk and pushing a tryserver job, I'm seeing test failures in mochitest-metro-chrome:\n\nTEST-UNEXPECTED-FAIL | chrome://mochitests/content/metro/browser/metro/base/tests/mochitest/browser_context_menu_tests.js | Top position is 212, expected between 220 and 230\nTEST-UNEXPECTED-FAIL | chrome://mochitests/content/metro/browser/metro/base/tests/mochitest/browser_context_menu_tests.js | Top position is 173, expected between 175 and 190\nTEST-UNEXPECTED-FAIL | chrome://mochitests/content/metro/browser/metro/base/tests/mochitest/browser_context_menu_tests.js | Top position is 94, expected between 95 and 110\nTEST-UNEXPECTED-FAIL | chrome://mochitests/content/metro/browser/metro/base/tests/mochitest/browser_context_menu_tests.js | Top position is 94, expected between 110 and 125\nTEST-UNEXPECTED-FAIL | chrome://mochitests/content/metro/browser/metro/base/tests/mochitest/browser_selection_frame_content.js | selection test - Got waistcoat, expected started\nTEST-UNEXPECTED-FAIL | chrome://mochitests/content/metro/browser/metro/base/tests/mochitest/browser_selection_frame_content.js | runTests: Task failed - Error: Timed out waiting for condition to be true at waitForCondition@chrome://mochitests/content/metro/browser/metro/base/tests/mochitest/head.js:426\nTEST-UNEXPECTED-FAIL | chrome://mochitests/content/metro/browser/metro/base/tests/mochitest/browser_selection_frame_content.js | selection test - Got .\nTEST-UNEXPECTED-FAIL | chrome://mochitests/content/metro/browser/metro/base/tests/mochitest/browser_selection_frame_textarea.js | Y position is 654.2000122070312, expected between 675 and 690\nTEST-UNEXPECTED-FAIL | chrome://mochitests/content/metro/browser/metro/base/tests/mochitest/browser_selection_frame_textarea.js | Y position is 654.2000122070312, expected between 675 and 690\n\n(See https://tbpl.mozilla.org/?tree=Try&rev=86f5c4a0d5b3)\n\nIt looks to me like these tests are making fragile assumptions about default line-height, and where things end up on screen as a result; the patch here will make line-height slightly smaller in some cases, and this is resulting in failures.\n\n:jimm, could you (or someone) take a look at these and see what you think? A possible fix here is for us to simply change the tests to update their \"expected\" results. Is that reasonable, or are the coordinates specified in the tests based on something more than empirical observation of what's currently happening?", "creation_time": "2014-02-03T13:51:48Z", "is_private": false, "bug_id": 657864, "time": "2014-02-03T13:51:48Z", "creator": "jfkthame@gmail.com", "tags": [], "count": 13}, {"author": "jmathies@mozilla.com", "attachment_id": null, "raw_text": "(In reply to Jonathan Kew (:jfkthame) from comment #13)\n> I'd like to get this finished up and landed (sorry it's languished for so\n> long!), and have been looking into the issues with GDI and OS X metrics.\n> \n> Karl's patches for DWrite look fine, but when I tried rebasing them to\n> current trunk and pushing a tryserver job, I'm seeing test failures in\n> mochitest-metro-chrome:\n> \n> TEST-UNEXPECTED-FAIL |\n> chrome://mochitests/content/metro/browser/metro/base/tests/mochitest/\n> browser_context_menu_tests.js | Top position is 212, expected between 220\n> and 230\n> TEST-UNEXPECTED-FAIL |\n> chrome://mochitests/content/metro/browser/metro/base/tests/mochitest/\n> browser_context_menu_tests.js | Top position is 173, expected between 175\n> and 190\n> TEST-UNEXPECTED-FAIL |\n> chrome://mochitests/content/metro/browser/metro/base/tests/mochitest/\n> browser_context_menu_tests.js | Top position is 94, expected between 95 and\n> 110\n> TEST-UNEXPECTED-FAIL |\n> chrome://mochitests/content/metro/browser/metro/base/tests/mochitest/\n> browser_context_menu_tests.js | Top position is 94, expected between 110 and\n> 125\n> TEST-UNEXPECTED-FAIL |\n> chrome://mochitests/content/metro/browser/metro/base/tests/mochitest/\n> browser_selection_frame_content.js | selection test - Got waistcoat,\n> expected started\n> TEST-UNEXPECTED-FAIL |\n> chrome://mochitests/content/metro/browser/metro/base/tests/mochitest/\n> browser_selection_frame_content.js | runTests: Task failed - Error: Timed\n> out waiting for condition to be true at\n> waitForCondition@chrome://mochitests/content/metro/browser/metro/base/tests/\n> mochitest/head.js:426\n> TEST-UNEXPECTED-FAIL |\n> chrome://mochitests/content/metro/browser/metro/base/tests/mochitest/\n> browser_selection_frame_content.js | selection test - Got .\n> TEST-UNEXPECTED-FAIL |\n> chrome://mochitests/content/metro/browser/metro/base/tests/mochitest/\n> browser_selection_frame_textarea.js | Y position is 654.2000122070312,\n> expected between 675 and 690\n> TEST-UNEXPECTED-FAIL |\n> chrome://mochitests/content/metro/browser/metro/base/tests/mochitest/\n> browser_selection_frame_textarea.js | Y position is 654.2000122070312,\n> expected between 675 and 690\n> \n> (See https://tbpl.mozilla.org/?tree=Try&rev=86f5c4a0d5b3)\n> \n> It looks to me like these tests are making fragile assumptions about default\n> line-height, and where things end up on screen as a result; the patch here\n> will make line-height slightly smaller in some cases, and this is resulting\n> in failures.\n> \n> :jimm, could you (or someone) take a look at these and see what you think? A\n> possible fix here is for us to simply change the tests to update their\n> \"expected\" results. Is that reasonable, or are the coordinates specified in\n> the tests based on something more than empirical observation of what's\n> currently happening?\n\nYeah that seems fine. If you want to post a rollup of the patches that caused this I can update the tests.", "id": 8364833, "text": "(In reply to Jonathan Kew (:jfkthame) from comment #13)\n> I'd like to get this finished up and landed (sorry it's languished for so\n> long!), and have been looking into the issues with GDI and OS X metrics.\n> \n> Karl's patches for DWrite look fine, but when I tried rebasing them to\n> current trunk and pushing a tryserver job, I'm seeing test failures in\n> mochitest-metro-chrome:\n> \n> TEST-UNEXPECTED-FAIL |\n> chrome://mochitests/content/metro/browser/metro/base/tests/mochitest/\n> browser_context_menu_tests.js | Top position is 212, expected between 220\n> and 230\n> TEST-UNEXPECTED-FAIL |\n> chrome://mochitests/content/metro/browser/metro/base/tests/mochitest/\n> browser_context_menu_tests.js | Top position is 173, expected between 175\n> and 190\n> TEST-UNEXPECTED-FAIL |\n> chrome://mochitests/content/metro/browser/metro/base/tests/mochitest/\n> browser_context_menu_tests.js | Top position is 94, expected between 95 and\n> 110\n> TEST-UNEXPECTED-FAIL |\n> chrome://mochitests/content/metro/browser/metro/base/tests/mochitest/\n> browser_context_menu_tests.js | Top position is 94, expected between 110 and\n> 125\n> TEST-UNEXPECTED-FAIL |\n> chrome://mochitests/content/metro/browser/metro/base/tests/mochitest/\n> browser_selection_frame_content.js | selection test - Got waistcoat,\n> expected started\n> TEST-UNEXPECTED-FAIL |\n> chrome://mochitests/content/metro/browser/metro/base/tests/mochitest/\n> browser_selection_frame_content.js | runTests: Task failed - Error: Timed\n> out waiting for condition to be true at\n> waitForCondition@chrome://mochitests/content/metro/browser/metro/base/tests/\n> mochitest/head.js:426\n> TEST-UNEXPECTED-FAIL |\n> chrome://mochitests/content/metro/browser/metro/base/tests/mochitest/\n> browser_selection_frame_content.js | selection test - Got .\n> TEST-UNEXPECTED-FAIL |\n> chrome://mochitests/content/metro/browser/metro/base/tests/mochitest/\n> browser_selection_frame_textarea.js | Y position is 654.2000122070312,\n> expected between 675 and 690\n> TEST-UNEXPECTED-FAIL |\n> chrome://mochitests/content/metro/browser/metro/base/tests/mochitest/\n> browser_selection_frame_textarea.js | Y position is 654.2000122070312,\n> expected between 675 and 690\n> \n> (See https://tbpl.mozilla.org/?tree=Try&rev=86f5c4a0d5b3)\n> \n> It looks to me like these tests are making fragile assumptions about default\n> line-height, and where things end up on screen as a result; the patch here\n> will make line-height slightly smaller in some cases, and this is resulting\n> in failures.\n> \n> :jimm, could you (or someone) take a look at these and see what you think? A\n> possible fix here is for us to simply change the tests to update their\n> \"expected\" results. Is that reasonable, or are the coordinates specified in\n> the tests based on something more than empirical observation of what's\n> currently happening?\n\nYeah that seems fine. If you want to post a rollup of the patches that caused this I can update the tests.", "creation_time": "2014-02-03T13:58:07Z", "is_private": false, "bug_id": 657864, "count": 14, "creator": "jmathies@mozilla.com", "tags": [], "time": "2014-02-03T13:58:07Z"}, {"bug_id": 657864, "count": 15, "tags": [], "creator": "jfkthame@gmail.com", "time": "2014-02-03T14:05:58Z", "text": "Created attachment 8369399\nuse more consistent and properly-rounded line-height metrics for GDI and Mac font backends.\n\nThis is based on the WIP patch from bug 598900. It switches us to using the same 'sfnt' metrics (where available) on GDI and Mac, and incorporates similar rounding to the DWrite patch. With this, the line-height test works consistently across platforms, and the Cambria Math problem from bug 598900 is also resolved.", "is_private": false, "creation_time": "2014-02-03T14:05:58Z", "raw_text": "This is based on the WIP patch from bug 598900. It switches us to using the same 'sfnt' metrics (where available) on GDI and Mac, and incorporates similar rounding to the DWrite patch. With this, the line-height test works consistently across platforms, and the Cambria Math problem from bug 598900 is also resolved.", "id": 8364869, "author": "jfkthame@gmail.com", "attachment_id": 8369399}, {"author": "jfkthame@gmail.com", "attachment_id": 8369405, "raw_text": "This updates a few reftests that are affected by the line-height changes, according to tryserver results.", "id": 8364898, "text": "Created attachment 8369405\nreftest updates to take account of line-height rounding fixes.\n\nThis updates a few reftests that are affected by the line-height changes, according to tryserver results.", "is_private": false, "creation_time": "2014-02-03T14:12:00Z", "bug_id": 657864, "creator": "jfkthame@gmail.com", "time": "2014-02-03T14:12:00Z", "tags": [], "count": 16}, {"author": "jfkthame@gmail.com", "attachment_id": 8369407, "bug_id": 657864, "tags": [], "time": "2014-02-03T14:16:27Z", "count": 17, "creator": "jfkthame@gmail.com", "text": "Created attachment 8369407\n[DWrite pt1+pt2] be more careful about rounding metrics so as to preserve line-heights\n\nHere's the DWrite patch, rebased to trunk; this is the only piece relevant to Win8/Metro.", "creation_time": "2014-02-03T14:16:27Z", "is_private": false, "raw_text": "Here's the DWrite patch, rebased to trunk; this is the only piece relevant to Win8/Metro.", "id": 8364915}, {"author": "jfkthame@gmail.com", "bug_id": 657864, "tags": [], "creator": "jfkthame@gmail.com", "count": 18, "raw_text": "Marking this r+, it's really Karl's original two patches to round the DWrite metrics carefully; I just rebased and folded them together.", "id": 8364940, "text": "Comment on attachment 8369407\n[DWrite pt1+pt2] be more careful about rounding metrics so as to preserve line-heights\n\nMarking this r+, it's really Karl's original two patches to round the DWrite metrics carefully; I just rebased and folded them together.", "creation_time": "2014-02-03T14:21:42Z", "attachment_id": 8369407, "time": "2014-02-03T14:21:42Z", "is_private": false}, {"tags": [], "creator": "jfkthame@gmail.com", "time": "2014-02-03T21:19:26Z", "count": 19, "bug_id": 657864, "creation_time": "2014-02-03T21:19:26Z", "is_private": false, "text": "Created attachment 8369639\nuse more consistent and properly-rounded line-height metrics for GDI and Mac font backends.\n\nTidied up the GDI & Mac patch slightly; no functional change. Note that bug 947650 will extend this with a special-case for math fonts.", "id": 8367026, "raw_text": "Tidied up the GDI & Mac patch slightly; no functional change. Note that bug 947650 will extend this with a special-case for math fonts.", "attachment_id": 8369639, "author": "jfkthame@gmail.com"}, {"creator": "jfkthame@gmail.com", "count": 20, "tags": [], "bug_id": 657864, "id": 8382492, "raw_text": "Here are some tweaks for the metro tests that seem to make everything pass on tryserver: https://tbpl.mozilla.org/?tree=Try&rev=e74c1b4c262b. The changes are totally ad-hoc: just figured out by experiment what works. I fear these tests will remain pretty fragile, liable to break in the event of any changes to the system's default fonts, etc.", "creation_time": "2014-02-06T14:14:45Z", "text": "Created attachment 8371448\nupdate Windows Metro tests affected by changes to line spacing.\n\nHere are some tweaks for the metro tests that seem to make everything pass on tryserver: https://tbpl.mozilla.org/?tree=Try&rev=e74c1b4c262b. The changes are totally ad-hoc: just figured out by experiment what works. I fear these tests will remain pretty fragile, liable to break in the event of any changes to the system's default fonts, etc.", "author": "jfkthame@gmail.com", "time": "2014-02-06T14:14:45Z", "is_private": false, "attachment_id": 8371448}, {"id": 8382748, "raw_text": "retriggers look good.", "creation_time": "2014-02-06T15:06:08Z", "is_private": false, "text": "Comment on attachment 8371448\nupdate Windows Metro tests affected by changes to line spacing.\n\nretriggers look good.", "creator": "jmathies@mozilla.com", "time": "2014-02-06T15:06:08Z", "tags": [], "count": 21, "bug_id": 657864, "attachment_id": 8371448, "author": "jmathies@mozilla.com"}, {"text": "Comment on attachment 8369405\nreftest updates to take account of line-height rounding fixes.\n\n>+fuzzy-if(winWidget,255,50) == multiscripts-1.html multiscripts-1-ref.html\n\n255 is a lot of fuzz.  Can you link to a failing try run, or explain what is\nhappening here, please?\nWould adding an explicit, larger line-height to the <body>s of these tests\nmake them pass?\n\n>+             font-family: arial, sans-serif;\n>+          }\n>+          div {\n>+              position: fixed;\n>+              top: 9.8px;\n\n>-  <div style=\"position:fixed; left:100px; top:9.6px; font-family: serif\">\n\n>+              position: fixed;\n>+              top: 10.2px;\n\n>-  <div style=\"position:fixed; left:100px; top:10.4px; font-family: serif\">\n\nWhy require Arial, remove the serif test, and make the positions closer to\ninteger?\n\nHopefully the serif test is no longer necessary with all the tests at\ndifferent sizes, but the positions change suggests a bug, and what was the\nissue with the font that was not arial?\n\nI didn't know that css3-fonts is proposing a change to case-insensitive family\nmatching.  I don't see gfxUserFontSet, at least, doing case-insensitive\nmatching, unless the style system is case-folding somewhere.", "creation_time": "2014-02-10T03:26:12Z", "is_private": false, "raw_text": ">+fuzzy-if(winWidget,255,50) == multiscripts-1.html multiscripts-1-ref.html\n\n255 is a lot of fuzz.  Can you link to a failing try run, or explain what is\nhappening here, please?\nWould adding an explicit, larger line-height to the <body>s of these tests\nmake them pass?\n\n>+             font-family: arial, sans-serif;\n>+          }\n>+          div {\n>+              position: fixed;\n>+              top: 9.8px;\n\n>-  <div style=\"position:fixed; left:100px; top:9.6px; font-family: serif\">\n\n>+              position: fixed;\n>+              top: 10.2px;\n\n>-  <div style=\"position:fixed; left:100px; top:10.4px; font-family: serif\">\n\nWhy require Arial, remove the serif test, and make the positions closer to\ninteger?\n\nHopefully the serif test is no longer necessary with all the tests at\ndifferent sizes, but the positions change suggests a bug, and what was the\nissue with the font that was not arial?\n\nI didn't know that css3-fonts is proposing a change to case-insensitive family\nmatching.  I don't see gfxUserFontSet, at least, doing case-insensitive\nmatching, unless the style system is case-folding somewhere.", "id": 8395723, "bug_id": 657864, "time": "2014-02-10T03:26:12Z", "tags": [], "count": 22, "creator": "karlt@mozbugz.karlt.net", "author": "karlt@mozbugz.karlt.net", "attachment_id": 8369405}, {"author": "jfkthame@gmail.com", "attachment_id": null, "bug_id": 657864, "time": "2014-02-10T10:19:49Z", "count": 23, "creator": "jfkthame@gmail.com", "tags": [], "text": "(In reply to Karl Tomlinson (:karlt) from comment #22)\n> Comment on attachment 8369405\n> reftest updates to take account of line-height rounding fixes.\n> \n> >+fuzzy-if(winWidget,255,50) == multiscripts-1.html multiscripts-1-ref.html\n> \n> 255 is a lot of fuzz.  Can you link to a failing try run, or explain what is\n> happening here, please?\n\nSee the WinXP reftest runs in https://tbpl.mozilla.org/?tree=Try&rev=c78f8e24815d. (There are some other failures in that job as well, but this shows the multiscripts-1 issue.) The first testcase on the third line ends up with one pixel less of descent, for a total of 50 pixels that differ.\n\nIt fails only on WinXP, so I guess we could make the annotation more narrowly targeted; but it's not simply DWrite vs GDI, as Win7 unaccelerated doesn't fail. Presumably there's a difference between the font versions on XP vs Win7, but it didn't seem important enough to spend more time on.\n\n> Would adding an explicit, larger line-height to the <body>s of these tests\n> make them pass?\n\nPerhaps; I could experiment a bit...\n\n> \n> >+             font-family: arial, sans-serif;\n> >+          }\n> >+          div {\n> >+              position: fixed;\n> >+              top: 9.8px;\n> \n> >-  <div style=\"position:fixed; left:100px; top:9.6px; font-family: serif\">\n> \n> >+              position: fixed;\n> >+              top: 10.2px;\n> \n> >-  <div style=\"position:fixed; left:100px; top:10.4px; font-family: serif\">\n> \n> Why require Arial,\n\nThis is for the sake of OS X, where the default sans font is Helvetica, and the Mac's Helvetica ends up running afoul of bug 832313. By preferring Arial, we avoid that and allow this test to behave as intended.\n\n> remove the serif test,\n\nLikewise, Times on OS X runs into bug 832313. I expect we could work around that similarly if desired.\n\n> and make the positions closer to\n> integer?\n\nSo that the rounding to device pixels still behaves in the intended way on a Retina screen.\n\n> \n> Hopefully the serif test is no longer necessary with all the tests at\n> different sizes, but the positions change suggests a bug, and what was the\n> issue with the font that was not arial?\n> \n> I didn't know that css3-fonts is proposing a change to case-insensitive\n> family\n> matching.  I don't see gfxUserFontSet, at least, doing case-insensitive\n> matching, unless the style system is case-folding somewhere.\n\nHasn't it always been case-insensitive? I thought we applied lowercasing to family names everywhere before using them as lookup keys.", "is_private": false, "creation_time": "2014-02-10T10:19:49Z", "raw_text": "(In reply to Karl Tomlinson (:karlt) from comment #22)\n> Comment on attachment 8369405\n> reftest updates to take account of line-height rounding fixes.\n> \n> >+fuzzy-if(winWidget,255,50) == multiscripts-1.html multiscripts-1-ref.html\n> \n> 255 is a lot of fuzz.  Can you link to a failing try run, or explain what is\n> happening here, please?\n\nSee the WinXP reftest runs in https://tbpl.mozilla.org/?tree=Try&rev=c78f8e24815d. (There are some other failures in that job as well, but this shows the multiscripts-1 issue.) The first testcase on the third line ends up with one pixel less of descent, for a total of 50 pixels that differ.\n\nIt fails only on WinXP, so I guess we could make the annotation more narrowly targeted; but it's not simply DWrite vs GDI, as Win7 unaccelerated doesn't fail. Presumably there's a difference between the font versions on XP vs Win7, but it didn't seem important enough to spend more time on.\n\n> Would adding an explicit, larger line-height to the <body>s of these tests\n> make them pass?\n\nPerhaps; I could experiment a bit...\n\n> \n> >+             font-family: arial, sans-serif;\n> >+          }\n> >+          div {\n> >+              position: fixed;\n> >+              top: 9.8px;\n> \n> >-  <div style=\"position:fixed; left:100px; top:9.6px; font-family: serif\">\n> \n> >+              position: fixed;\n> >+              top: 10.2px;\n> \n> >-  <div style=\"position:fixed; left:100px; top:10.4px; font-family: serif\">\n> \n> Why require Arial,\n\nThis is for the sake of OS X, where the default sans font is Helvetica, and the Mac's Helvetica ends up running afoul of bug 832313. By preferring Arial, we avoid that and allow this test to behave as intended.\n\n> remove the serif test,\n\nLikewise, Times on OS X runs into bug 832313. I expect we could work around that similarly if desired.\n\n> and make the positions closer to\n> integer?\n\nSo that the rounding to device pixels still behaves in the intended way on a Retina screen.\n\n> \n> Hopefully the serif test is no longer necessary with all the tests at\n> different sizes, but the positions change suggests a bug, and what was the\n> issue with the font that was not arial?\n> \n> I didn't know that css3-fonts is proposing a change to case-insensitive\n> family\n> matching.  I don't see gfxUserFontSet, at least, doing case-insensitive\n> matching, unless the style system is case-folding somewhere.\n\nHasn't it always been case-insensitive? I thought we applied lowercasing to family names everywhere before using them as lookup keys.", "id": 8396664}, {"author": "karlt@mozbugz.karlt.net", "attachment_id": null, "bug_id": 657864, "count": 24, "time": "2014-02-10T23:29:23Z", "creator": "karlt@mozbugz.karlt.net", "tags": [], "text": "(In reply to Jonathan Kew (:jfkthame) from comment #23)\n> See the WinXP reftest runs in\n> https://tbpl.mozilla.org/?tree=Try&rev=c78f8e24815d. (There are some other\n> failures in that job as well, but this shows the multiscripts-1 issue.) The\n> first testcase on the third line ends up with one pixel less of descent, for\n> a total of 50 pixels that differ.\n\nOK, thanks.  I filed bug 970622 on that.\n\nThe proposed fuzz is fine.  Can you reference 970622, please?\n\n> This is for the sake of OS X, where the default sans font is Helvetica, and\n> the Mac's Helvetica ends up running afoul of bug 832313. By preferring\n> Arial, we avoid that and allow this test to behave as intended.\n\nCan you note that in the test, please?\n\n> > remove the serif test,\n> \n> Likewise, Times on OS X runs into bug 832313. I expect we could work around\n> that similarly if desired.\n\nI don't mind.\n\n> \n> > and make the positions closer to\n> > integer?\n> \n> So that the rounding to device pixels still behaves in the intended way on a\n> Retina screen.\n\nI didn't know we ran tests on Retina, but I'd like to keep the test tighter on\n1dppx platforms.  Can you use @media (min-resolution: 1dppx) and @media\n(min-resolution: 2dppx) to set the value appropriately for the platform,\nplease?", "is_private": false, "creation_time": "2014-02-10T23:29:23Z", "raw_text": "(In reply to Jonathan Kew (:jfkthame) from comment #23)\n> See the WinXP reftest runs in\n> https://tbpl.mozilla.org/?tree=Try&rev=c78f8e24815d. (There are some other\n> failures in that job as well, but this shows the multiscripts-1 issue.) The\n> first testcase on the third line ends up with one pixel less of descent, for\n> a total of 50 pixels that differ.\n\nOK, thanks.  I filed bug 970622 on that.\n\nThe proposed fuzz is fine.  Can you reference 970622, please?\n\n> This is for the sake of OS X, where the default sans font is Helvetica, and\n> the Mac's Helvetica ends up running afoul of bug 832313. By preferring\n> Arial, we avoid that and allow this test to behave as intended.\n\nCan you note that in the test, please?\n\n> > remove the serif test,\n> \n> Likewise, Times on OS X runs into bug 832313. I expect we could work around\n> that similarly if desired.\n\nI don't mind.\n\n> \n> > and make the positions closer to\n> > integer?\n> \n> So that the rounding to device pixels still behaves in the intended way on a\n> Retina screen.\n\nI didn't know we ran tests on Retina, but I'd like to keep the test tighter on\n1dppx platforms.  Can you use @media (min-resolution: 1dppx) and @media\n(min-resolution: 2dppx) to set the value appropriately for the platform,\nplease?", "id": 8400660}, {"tags": [], "creator": "jfkthame@gmail.com", "count": 25, "time": "2014-02-11T09:31:37Z", "bug_id": 657864, "creation_time": "2014-02-11T09:31:37Z", "is_private": false, "text": "(In reply to Karl Tomlinson (:karlt) from comment #24)\n\n> I didn't know we ran tests on Retina, but I'd like to keep the test tighter\n> on\n> 1dppx platforms.  Can you use @media (min-resolution: 1dppx) and @media\n> (min-resolution: 2dppx) to set the value appropriately for the platform,\n> please?\n\nWe don't (yet) run them on Retina as part of automation, but we'd like to be able to in due course - and many of us do run them locally, so tests that assume 1dppx and fail at higher resolution can be an annoyance. But yes, we can make this resolution-aware; I'll update it accordingly.", "id": 8402377, "raw_text": "(In reply to Karl Tomlinson (:karlt) from comment #24)\n\n> I didn't know we ran tests on Retina, but I'd like to keep the test tighter\n> on\n> 1dppx platforms.  Can you use @media (min-resolution: 1dppx) and @media\n> (min-resolution: 2dppx) to set the value appropriately for the platform,\n> please?\n\nWe don't (yet) run them on Retina as part of automation, but we'd like to be able to in due course - and many of us do run them locally, so tests that assume 1dppx and fail at higher resolution can be an annoyance. But yes, we can make this resolution-aware; I'll update it accordingly.", "attachment_id": null, "author": "jfkthame@gmail.com"}, {"time": "2014-02-11T11:02:14Z", "is_private": false, "attachment_id": 8373954, "tags": [], "count": 26, "creator": "jfkthame@gmail.com", "bug_id": 657864, "id": 8402638, "raw_text": "", "creation_time": "2014-02-11T11:02:14Z", "text": "Created attachment 8373954\nreftest updates to take account of line-height rounding fixes.", "author": "jfkthame@gmail.com"}, {"attachment_id": 8369639, "author": "karlt@mozbugz.karlt.net", "tags": [], "time": "2014-02-20T09:37:31Z", "creator": "karlt@mozbugz.karlt.net", "count": 27, "bug_id": 657864, "is_private": false, "creation_time": "2014-02-20T09:37:31Z", "text": "Comment on attachment 8369639\nuse more consistent and properly-rounded line-height metrics for GDI and Mac font backends.\n\nSorry, I marked the wrong patch here.\n\nI haven't looked through all the details here yet.\nOne thing I want to avoid is introducing bug 643781 by using ceil on other platforms, too.", "id": 8441944, "raw_text": "Sorry, I marked the wrong patch here.\n\nI haven't looked through all the details here yet.\nOne thing I want to avoid is introducing bug 643781 by using ceil on other platforms, too."}, {"attachment_id": 8369639, "is_private": false, "time": "2014-03-21T05:04:51Z", "author": "karlt@mozbugz.karlt.net", "creation_time": "2014-03-21T05:04:51Z", "text": "Comment on attachment 8369639\nuse more consistent and properly-rounded line-height metrics for GDI and Mac font backends.\n\nThere seem to be a few changes here that are not directly related to line\nheight rounding.  These would be easier to review in separate patches, but even\nwith several changes in one patch, the changeset comment still needs to list\nexactly what is changing.\n\nCan you make separate patches for the x glyph measurement and size adjust\nrefactoring in gfxGDIFont font, please, and explain the motivation for the\nsize adjust changes?\n\nAttachment 520939 observes that IE is using the equivalent of GDI metrics when\nusing DWrite with old fonts.  We should not be changing our GDI code to start\nusing ascent/descent metrics rounded in a way that we know do not match.  It\nis our DWrite code that is inconsistent (bug 657864).  In order to replace the\nGDI code with code that gets metrics directly from the SFNT tables, we need to\ninvestigate how GDI does rounding to apply that to the SFNT table values.\n\nAlso, changing from os/2 win metrics to hhea metrics on GDI is going to make\nGDI more different from DWrite and other browsers on Windows, for the sake of\nmaking it more similar to Mac.  Consider Tahoma, for example, with\nsTypoAscender = 1566 and sTypoLineGap = 59, but ascent = 2049 and lineGap = 0.\n\nWindows systems will usually have fonts intended for Windows, and so the win\nmetrics are more likely to be correct (if the typo metrics are not requested\nat least).  Font authors knew that win metrics were used on Windows and hhea\non Mac, so, if they have set different values, then they wanted different\nbehavior.\n\nThe remaining comments here are mostly about the Mac changes, because I didn't\nanalyse all the changes to the GDI code.\n\n>+    // Round up maxAscent/Descent to whole pixels; take account of precision\n>+    // of mFUnitsConvFactor to avoid rounding up by a full pixel.\n>+    // (See karlt's patch for DWrite backend in bug 657864.)\n>+    const gfxFloat precision = 1.0 / (1 << 23);\n>+    aMetrics.maxAscent = ceil(ascent * (1.0 - precision));\n>+    aMetrics.maxDescent = ceil(descent * (1.0 - precision));\n\n>-static double\n>-RoundToNearestMultiple(double aValue, double aFraction)\n>-{\n>-    return floor(aValue/aFraction + 0.5) * aFraction;\n>-}\n>-\n> void gfxFont::CalculateDerivedMetrics(Metrics& aMetrics)\n> {\n>-    aMetrics.maxAscent =\n>-        ceil(RoundToNearestMultiple(aMetrics.maxAscent, 1/1024.0));\n>-    aMetrics.maxDescent =\n>-        ceil(RoundToNearestMultiple(aMetrics.maxDescent, 1/1024.0));\n\nThe (1 << 23) maths I used in the DWrite patch was making a conservative\nchange to the code, but is not something that other platforms should be moving\ntowards, if we want consistent behaviour with other browsers.\n(Probably rounding maxHeight to nearest and then selecting integer maxAscent\nand maxDescent to sum to that would be good approach, but it depends what GDI\nis doing.)  I don't know where 1024 came from, but changing from the old code\nwith 1024 to 1<<23 (even though the numbers are not directly comparable) would\nbe a step in wrong direction, so please leave something equivalent to the old\ncode until we know what to do for GDI.\n\n>+    aMetrics.emHeight = floor(GetAdjustedSize() + 0.5);\n\nhttp://www.w3.org/TR/css3-fonts/#font-style-matching says \"Further\ncomputations, e.g., by \u2018em\u2019 values in other properties, are based on the\n\u2018font-size\u2019 value that is used, not the one that is specified.\"\nThere is no change to the behaviour on Mac here, but there would be a change\nif other platforms start using this code, so can you identify this in a\ncomment at least, please?\n\nThe GDI code was inconsistent about whether it used metrics.tmHeight -\nmetrics.tmInternalLeading or mAdjustedSize, but it looked like emHeight was\ncorrect before.  InitMetricsFromSfntTables() will need to get this right\nbefore GDI can use this code.\n\n>+    aMetrics.internalLeading =\n>+        std::max(aMetrics.maxHeight - aMetrics.emHeight, 0.0);\n>+\n>+    lineHeight = std::max(floor(lineHeight + 0.5), aMetrics.maxHeight);\n>+    aMetrics.externalLeading =\n>+        lineHeight - aMetrics.internalLeading - aMetrics.emHeight;\n\nIf maxHeight < emHeight and lineHeight < emHeight, then internalLeading is 0\nand externalLeading is -ve.  \n\nhttp://www.microsoft.com/typography/otspec/recom.htm gives formulae for\ninternalLeading and externalLeading on Windows, which I assume is where these\nconcepts come from and what GDI does, that would make internalLeading -ve and\nexternalLeading 0.\nLimiting internalLeading to >= 0 may be sensible, but I suspect layout\nwill not handle -ve externalLeading well.\n\nThis code was probably fine before because few fonts would have had a -ve\nhhea->lineGap, but the introduction of typo metrics makes such scenarios more\nlikely.  It's probably easiest to leave the typo metrics changes for a\nseparate patch.\n\n>-    aMetrics.maxHeight = aMetrics.maxAscent + aMetrics.maxDescent;\n>-\n>-    if (aMetrics.maxHeight - aMetrics.emHeight > 0.0) {\n>-        aMetrics.internalLeading = aMetrics.maxHeight - aMetrics.emHeight;\n>-    } else {\n>-        aMetrics.internalLeading = 0.0;\n>-    }\n>-\n>-    aMetrics.emAscent = aMetrics.maxAscent * aMetrics.emHeight\n>-                            / aMetrics.maxHeight;\n>-    aMetrics.emDescent = aMetrics.emHeight - aMetrics.emAscent;\n\nMetrics from InitMetricsFromPlatform still need maxHeight, internalLeading,\nemAscent, and emDescent, or did I miss where they are calculated?\n\nIn gfxMacFont::InitMetricsFromPlatform()\n\n>-    mMetrics.maxAscent = ::CTFontGetAscent(ctFont);\n>-    mMetrics.maxDescent = ::CTFontGetDescent(ctFont);\n>+    mMetrics.maxAscent = ceil(::CTFontGetAscent(ctFont));\n>+    mMetrics.maxDescent = ceil(::CTFontGetDescent(ctFont));\n\nAgain, bug 643781 indicates that this is not the appropriate rounding strategy\nif we want consistency.", "id": 8561537, "raw_text": "There seem to be a few changes here that are not directly related to line\nheight rounding.  These would be easier to review in separate patches, but even\nwith several changes in one patch, the changeset comment still needs to list\nexactly what is changing.\n\nCan you make separate patches for the x glyph measurement and size adjust\nrefactoring in gfxGDIFont font, please, and explain the motivation for the\nsize adjust changes?\n\nAttachment 520939 observes that IE is using the equivalent of GDI metrics when\nusing DWrite with old fonts.  We should not be changing our GDI code to start\nusing ascent/descent metrics rounded in a way that we know do not match.  It\nis our DWrite code that is inconsistent (bug 657864).  In order to replace the\nGDI code with code that gets metrics directly from the SFNT tables, we need to\ninvestigate how GDI does rounding to apply that to the SFNT table values.\n\nAlso, changing from os/2 win metrics to hhea metrics on GDI is going to make\nGDI more different from DWrite and other browsers on Windows, for the sake of\nmaking it more similar to Mac.  Consider Tahoma, for example, with\nsTypoAscender = 1566 and sTypoLineGap = 59, but ascent = 2049 and lineGap = 0.\n\nWindows systems will usually have fonts intended for Windows, and so the win\nmetrics are more likely to be correct (if the typo metrics are not requested\nat least).  Font authors knew that win metrics were used on Windows and hhea\non Mac, so, if they have set different values, then they wanted different\nbehavior.\n\nThe remaining comments here are mostly about the Mac changes, because I didn't\nanalyse all the changes to the GDI code.\n\n>+    // Round up maxAscent/Descent to whole pixels; take account of precision\n>+    // of mFUnitsConvFactor to avoid rounding up by a full pixel.\n>+    // (See karlt's patch for DWrite backend in bug 657864.)\n>+    const gfxFloat precision = 1.0 / (1 << 23);\n>+    aMetrics.maxAscent = ceil(ascent * (1.0 - precision));\n>+    aMetrics.maxDescent = ceil(descent * (1.0 - precision));\n\n>-static double\n>-RoundToNearestMultiple(double aValue, double aFraction)\n>-{\n>-    return floor(aValue/aFraction + 0.5) * aFraction;\n>-}\n>-\n> void gfxFont::CalculateDerivedMetrics(Metrics& aMetrics)\n> {\n>-    aMetrics.maxAscent =\n>-        ceil(RoundToNearestMultiple(aMetrics.maxAscent, 1/1024.0));\n>-    aMetrics.maxDescent =\n>-        ceil(RoundToNearestMultiple(aMetrics.maxDescent, 1/1024.0));\n\nThe (1 << 23) maths I used in the DWrite patch was making a conservative\nchange to the code, but is not something that other platforms should be moving\ntowards, if we want consistent behaviour with other browsers.\n(Probably rounding maxHeight to nearest and then selecting integer maxAscent\nand maxDescent to sum to that would be good approach, but it depends what GDI\nis doing.)  I don't know where 1024 came from, but changing from the old code\nwith 1024 to 1<<23 (even though the numbers are not directly comparable) would\nbe a step in wrong direction, so please leave something equivalent to the old\ncode until we know what to do for GDI.\n\n>+    aMetrics.emHeight = floor(GetAdjustedSize() + 0.5);\n\nhttp://www.w3.org/TR/css3-fonts/#font-style-matching says \"Further\ncomputations, e.g., by \u2018em\u2019 values in other properties, are based on the\n\u2018font-size\u2019 value that is used, not the one that is specified.\"\nThere is no change to the behaviour on Mac here, but there would be a change\nif other platforms start using this code, so can you identify this in a\ncomment at least, please?\n\nThe GDI code was inconsistent about whether it used metrics.tmHeight -\nmetrics.tmInternalLeading or mAdjustedSize, but it looked like emHeight was\ncorrect before.  InitMetricsFromSfntTables() will need to get this right\nbefore GDI can use this code.\n\n>+    aMetrics.internalLeading =\n>+        std::max(aMetrics.maxHeight - aMetrics.emHeight, 0.0);\n>+\n>+    lineHeight = std::max(floor(lineHeight + 0.5), aMetrics.maxHeight);\n>+    aMetrics.externalLeading =\n>+        lineHeight - aMetrics.internalLeading - aMetrics.emHeight;\n\nIf maxHeight < emHeight and lineHeight < emHeight, then internalLeading is 0\nand externalLeading is -ve.  \n\nhttp://www.microsoft.com/typography/otspec/recom.htm gives formulae for\ninternalLeading and externalLeading on Windows, which I assume is where these\nconcepts come from and what GDI does, that would make internalLeading -ve and\nexternalLeading 0.\nLimiting internalLeading to >= 0 may be sensible, but I suspect layout\nwill not handle -ve externalLeading well.\n\nThis code was probably fine before because few fonts would have had a -ve\nhhea->lineGap, but the introduction of typo metrics makes such scenarios more\nlikely.  It's probably easiest to leave the typo metrics changes for a\nseparate patch.\n\n>-    aMetrics.maxHeight = aMetrics.maxAscent + aMetrics.maxDescent;\n>-\n>-    if (aMetrics.maxHeight - aMetrics.emHeight > 0.0) {\n>-        aMetrics.internalLeading = aMetrics.maxHeight - aMetrics.emHeight;\n>-    } else {\n>-        aMetrics.internalLeading = 0.0;\n>-    }\n>-\n>-    aMetrics.emAscent = aMetrics.maxAscent * aMetrics.emHeight\n>-                            / aMetrics.maxHeight;\n>-    aMetrics.emDescent = aMetrics.emHeight - aMetrics.emAscent;\n\nMetrics from InitMetricsFromPlatform still need maxHeight, internalLeading,\nemAscent, and emDescent, or did I miss where they are calculated?\n\nIn gfxMacFont::InitMetricsFromPlatform()\n\n>-    mMetrics.maxAscent = ::CTFontGetAscent(ctFont);\n>-    mMetrics.maxDescent = ::CTFontGetDescent(ctFont);\n>+    mMetrics.maxAscent = ceil(::CTFontGetAscent(ctFont));\n>+    mMetrics.maxDescent = ceil(::CTFontGetDescent(ctFont));\n\nAgain, bug 643781 indicates that this is not the appropriate rounding strategy\nif we want consistency.", "creator": "karlt@mozbugz.karlt.net", "tags": [], "count": 28, "bug_id": 657864}, {"creator": "dr.khaled.hosny@gmail.com", "tags": [], "count": 29, "bug_id": 657864, "id": 8562579, "raw_text": "(In reply to Karl Tomlinson (:karlt) from comment #28)\n> Windows systems will usually have fonts intended for Windows, and so the win\n> metrics are more likely to be correct (if the typo metrics are not requested\n> at least).  Font authors knew that win metrics were used on Windows and hhea\n> on Mac, so, if they have set different values, then they wanted different\n> behavior.\n\nIs this true in with the widespread use of webfonts? I tend to think that for a web browser having a consistent cross-platform behavior is more important than respecting the incorrect behavior of some platform(s).", "creation_time": "2014-03-21T12:54:51Z", "text": "(In reply to Karl Tomlinson (:karlt) from comment #28)\n> Windows systems will usually have fonts intended for Windows, and so the win\n> metrics are more likely to be correct (if the typo metrics are not requested\n> at least).  Font authors knew that win metrics were used on Windows and hhea\n> on Mac, so, if they have set different values, then they wanted different\n> behavior.\n\nIs this true in with the widespread use of webfonts? I tend to think that for a web browser having a consistent cross-platform behavior is more important than respecting the incorrect behavior of some platform(s).", "author": "dr.khaled.hosny@gmail.com", "time": "2014-03-21T12:54:51Z", "is_private": false, "attachment_id": null}, {"creation_time": "2014-03-23T22:46:57Z", "text": "(In reply to Khaled Hosny from comment #29)\n> (In reply to Karl Tomlinson (:karlt) from comment #28)\n> > Windows systems will usually have fonts intended for Windows, and so the win\n> > metrics are more likely to be correct (if the typo metrics are not requested\n> > at least).  Font authors knew that win metrics were used on Windows and hhea\n> > on Mac, so, if they have set different values, then they wanted different\n> > behavior.\n> \n> Is this true in with the widespread use of webfonts?\n\nI don't know.  Many web fonts are of poor quality, as seen by the hinting instructions used with GDI, for example.  There is a limit to what we can do with bad fonts.  There may be an argument for having different behaviour for web and system fonts, but then there is an inconsistency between those situations.\nThe best thing we can do IMO is follow the spec, so that font authors who read the spec get what they expect.\n\n> I tend to think that\n> for a web browser having a consistent cross-platform behavior is more\n> important than respecting the incorrect behavior of some platform(s).\n\nWhich behavior is \"incorrect\"?\nIs using win metrics for line height really more incorrect than using hhea metrics for line height?  Each has a line gap value, and each are described as \"platform-specific metrics\" \"constrained by backward compatibility requirements\".\nAre you advocating using only the typo metrics, even when USE_TYPO_METRICS is not set?\n\nIf fonts start setting USE_TYPO_METRICS, then we won't have this inconsistency, but we have this backward compat issue unfortunately, as well as compat with other browsers.", "id": 8568269, "raw_text": "(In reply to Khaled Hosny from comment #29)\n> (In reply to Karl Tomlinson (:karlt) from comment #28)\n> > Windows systems will usually have fonts intended for Windows, and so the win\n> > metrics are more likely to be correct (if the typo metrics are not requested\n> > at least).  Font authors knew that win metrics were used on Windows and hhea\n> > on Mac, so, if they have set different values, then they wanted different\n> > behavior.\n> \n> Is this true in with the widespread use of webfonts?\n\nI don't know.  Many web fonts are of poor quality, as seen by the hinting instructions used with GDI, for example.  There is a limit to what we can do with bad fonts.  There may be an argument for having different behaviour for web and system fonts, but then there is an inconsistency between those situations.\nThe best thing we can do IMO is follow the spec, so that font authors who read the spec get what they expect.\n\n> I tend to think that\n> for a web browser having a consistent cross-platform behavior is more\n> important than respecting the incorrect behavior of some platform(s).\n\nWhich behavior is \"incorrect\"?\nIs using win metrics for line height really more incorrect than using hhea metrics for line height?  Each has a line gap value, and each are described as \"platform-specific metrics\" \"constrained by backward compatibility requirements\".\nAre you advocating using only the typo metrics, even when USE_TYPO_METRICS is not set?\n\nIf fonts start setting USE_TYPO_METRICS, then we won't have this inconsistency, but we have this backward compat issue unfortunately, as well as compat with other browsers.", "count": 30, "tags": [], "creator": "karlt@mozbugz.karlt.net", "bug_id": 657864, "author": "karlt@mozbugz.karlt.net", "is_private": false, "time": "2014-03-23T22:46:57Z", "attachment_id": null}, {"id": 8568763, "raw_text": "(In reply to Karl Tomlinson (:karlt) from comment #30)\n> Each has a line gap value\n\nSorry, I was wrong here.\n\nWin metrics don't specify a line gap, but there is a recommended formula for BTBD including win metrics for windows.\n\n(In reply to Karl Tomlinson (:karlt) from comment #28)\n> Consider Tahoma, for example, with\n> sTypoAscender = 1566 and sTypoLineGap = 59, but ascent = 2049 and lineGap =\n> 0.\n\nAnd I was confused here too, so please ignore this.\nTahoma has matching hhea and win metrics.\n\nPerhaps there is an argument for ignoring win metrics and using only hhea.\n\nHas there been some analysis of Windows core web fonts to see what difference there would be if switching from win to hhea?\n\nWould it be possible to switch DWrite over at the same time as GDI?\n(This need not be in the same patch many of the changes here.)", "creation_time": "2014-03-24T05:06:25Z", "text": "(In reply to Karl Tomlinson (:karlt) from comment #30)\n> Each has a line gap value\n\nSorry, I was wrong here.\n\nWin metrics don't specify a line gap, but there is a recommended formula for BTBD including win metrics for windows.\n\n(In reply to Karl Tomlinson (:karlt) from comment #28)\n> Consider Tahoma, for example, with\n> sTypoAscender = 1566 and sTypoLineGap = 59, but ascent = 2049 and lineGap =\n> 0.\n\nAnd I was confused here too, so please ignore this.\nTahoma has matching hhea and win metrics.\n\nPerhaps there is an argument for ignoring win metrics and using only hhea.\n\nHas there been some analysis of Windows core web fonts to see what difference there would be if switching from win to hhea?\n\nWould it be possible to switch DWrite over at the same time as GDI?\n(This need not be in the same patch many of the changes here.)", "count": 31, "tags": [], "creator": "karlt@mozbugz.karlt.net", "bug_id": 657864, "author": "karlt@mozbugz.karlt.net", "is_private": false, "time": "2014-03-24T05:06:25Z", "attachment_id": null}, {"id": 8568764, "raw_text": "(In reply to Karl Tomlinson (:karlt) from comment #30)\n> (In reply to Khaled Hosny from comment #29)\n> > (In reply to Karl Tomlinson (:karlt) from comment #28)\n> > > Windows systems will usually have fonts intended for Windows, and so the win\n> > > metrics are more likely to be correct (if the typo metrics are not requested\n> > > at least).  Font authors knew that win metrics were used on Windows and hhea\n> > > on Mac, so, if they have set different values, then they wanted different\n> > > behavior.\n> > \n> > Is this true in with the widespread use of webfonts?\n> \n> I don't know.  Many web fonts are of poor quality, as seen by the hinting\n> instructions used with GDI, for example.  There is a limit to what we can do\n> with bad fonts.  There may be an argument for having different behaviour for\n> web and system fonts, but then there is an inconsistency between those\n> situations.\n> The best thing we can do IMO is follow the spec, so that font authors who\n> read the spec get what they expect.\n> \n> > I tend to think that\n> > for a web browser having a consistent cross-platform behavior is more\n> > important than respecting the incorrect behavior of some platform(s).\n> \n> Which behavior is \"incorrect\"?\n\nUsing usWinAscent and usWinDescent to compute line height.\n\n> Is using win metrics for line height really more incorrect than using hhea\n> metrics for line height?  Each has a line gap value, and each are described\n> as \"platform-specific metrics\" \"constrained by backward compatibility\n> requirements\".\n> Are you advocating using only the typo metrics, even when USE_TYPO_METRICS\n> is not set?\n\nYes, because this what the spec says:\nhttp://www.microsoft.com/typography/otspec/os2.htm#wa\n\n\u201c\u2026 Some applications use this value to determine default line spacing. This is strongly discouraged. The typographic ascender, descender and line gap fields in conjunction with unitsPerEm should be used for this purpose.\u201d", "is_private": false, "creation_time": "2014-03-24T05:07:13Z", "text": "(In reply to Karl Tomlinson (:karlt) from comment #30)\n> (In reply to Khaled Hosny from comment #29)\n> > (In reply to Karl Tomlinson (:karlt) from comment #28)\n> > > Windows systems will usually have fonts intended for Windows, and so the win\n> > > metrics are more likely to be correct (if the typo metrics are not requested\n> > > at least).  Font authors knew that win metrics were used on Windows and hhea\n> > > on Mac, so, if they have set different values, then they wanted different\n> > > behavior.\n> > \n> > Is this true in with the widespread use of webfonts?\n> \n> I don't know.  Many web fonts are of poor quality, as seen by the hinting\n> instructions used with GDI, for example.  There is a limit to what we can do\n> with bad fonts.  There may be an argument for having different behaviour for\n> web and system fonts, but then there is an inconsistency between those\n> situations.\n> The best thing we can do IMO is follow the spec, so that font authors who\n> read the spec get what they expect.\n> \n> > I tend to think that\n> > for a web browser having a consistent cross-platform behavior is more\n> > important than respecting the incorrect behavior of some platform(s).\n> \n> Which behavior is \"incorrect\"?\n\nUsing usWinAscent and usWinDescent to compute line height.\n\n> Is using win metrics for line height really more incorrect than using hhea\n> metrics for line height?  Each has a line gap value, and each are described\n> as \"platform-specific metrics\" \"constrained by backward compatibility\n> requirements\".\n> Are you advocating using only the typo metrics, even when USE_TYPO_METRICS\n> is not set?\n\nYes, because this what the spec says:\nhttp://www.microsoft.com/typography/otspec/os2.htm#wa\n\n\u201c\u2026 Some applications use this value to determine default line spacing. This is strongly discouraged. The typographic ascender, descender and line gap fields in conjunction with unitsPerEm should be used for this purpose.\u201d", "count": 32, "creator": "dr.khaled.hosny@gmail.com", "tags": [], "time": "2014-03-24T05:07:13Z", "bug_id": 657864, "attachment_id": null, "author": "dr.khaled.hosny@gmail.com"}, {"raw_text": "(In reply to Khaled Hosny from comment #32)\n> (In reply to Karl Tomlinson (:karlt) from comment #30)\n> > Are you advocating using only the typo metrics, even when USE_TYPO_METRICS\n> > is not set?\n> \n> Yes, because this what the spec says:\n> http://www.microsoft.com/typography/otspec/os2.htm#wa\n> \n> \u201c\u2026 Some applications use this value to determine default line spacing. This\n> is strongly discouraged. The typographic ascender, descender and line gap\n> fields in conjunction with unitsPerEm should be used for this purpose.\u201d\n\nThat is what I wanted to do also when I filed bug 402473.\nI fear there may be a number of changes required to layout if we change maxAscent/Descent values to what are really emAscent/Descent, but now that we already do that for some fonts with DWrite, perhaps some of those issues have been resolved.  I'm not sure because layout positioning choices change slowly due to compat issues.\n\nStarting with typo metrics when USE_TYPO_METRICS is set sounds like a good step in the right direction.", "id": 8568785, "text": "(In reply to Khaled Hosny from comment #32)\n> (In reply to Karl Tomlinson (:karlt) from comment #30)\n> > Are you advocating using only the typo metrics, even when USE_TYPO_METRICS\n> > is not set?\n> \n> Yes, because this what the spec says:\n> http://www.microsoft.com/typography/otspec/os2.htm#wa\n> \n> \u201c\u2026 Some applications use this value to determine default line spacing. This\n> is strongly discouraged. The typographic ascender, descender and line gap\n> fields in conjunction with unitsPerEm should be used for this purpose.\u201d\n\nThat is what I wanted to do also when I filed bug 402473.\nI fear there may be a number of changes required to layout if we change maxAscent/Descent values to what are really emAscent/Descent, but now that we already do that for some fonts with DWrite, perhaps some of those issues have been resolved.  I'm not sure because layout positioning choices change slowly due to compat issues.\n\nStarting with typo metrics when USE_TYPO_METRICS is set sounds like a good step in the right direction.", "creation_time": "2014-03-24T05:21:43Z", "bug_id": 657864, "creator": "karlt@mozbugz.karlt.net", "count": 33, "tags": [], "author": "karlt@mozbugz.karlt.net", "is_private": false, "time": "2014-03-24T05:21:43Z", "attachment_id": null}, {"author": "elbart@gmx.de", "raw_text": "Chrome 37 is set to come with DirectWrite enabled, and it doesn't show the line-height problems of Firefox, as far as I noticed.", "id": 8994401, "text": "Chrome 37 is set to come with DirectWrite enabled, and it doesn't show the line-height problems of Firefox, as far as I noticed.", "creation_time": "2014-06-30T15:53:11Z", "bug_id": 657864, "creator": "elbart@gmx.de", "tags": [], "count": 34, "attachment_id": null, "is_private": false, "time": "2014-06-30T15:53:11Z"}]}}}