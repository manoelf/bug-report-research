{"bugs": {"651019": {"comments": [{"attachment_id": null, "tags": [], "creation_time": "2011-04-19T03:05:27Z", "bug_id": 651019, "is_private": false, "author": "zackw@panix.com", "id": 5417667, "creator": "zackw@panix.com", "raw_text": "The very few users of the nsIDeviceContext screen size and depth methods should be able to get an nsIScreen object directly and use that instead.", "text": "The very few users of the nsIDeviceContext screen size and depth methods should be able to get an nsIScreen object directly and use that instead.", "count": 0, "time": "2011-04-19T03:05:27Z"}, {"author": "zackw@panix.com", "is_private": false, "id": 6051495, "creation_time": "2012-02-10T20:27:29Z", "tags": [], "attachment_id": 596145, "bug_id": 651019, "time": "2012-02-10T20:27:29Z", "count": 1, "raw_text": "Here is a work-in-progress patch.  Although the nsDeviceContext methods in question are gone, the replacement code for the various places that used them may not be right, and it might be appropriate to add helpers that retrieve an appropriate nsIScreen given various things (especially an nsPresContext).", "creator": "zackw@panix.com", "text": "Created attachment 596145\npreliminary patch\n\nHere is a work-in-progress patch.  Although the nsDeviceContext methods in question are gone, the replacement code for the various places that used them may not be right, and it might be appropriate to add helpers that retrieve an appropriate nsIScreen given various things (especially an nsPresContext)."}, {"time": "2012-02-10T20:34:40Z", "count": 2, "raw_text": "I don't actually know much about this stuff, sorry...", "creator": "bzbarsky@mit.edu", "text": "Comment on attachment 596145\npreliminary patch\n\nI don't actually know much about this stuff, sorry...", "author": "bzbarsky@mit.edu", "is_private": false, "id": 6051512, "tags": [], "creation_time": "2012-02-10T20:34:40Z", "attachment_id": 596145, "bug_id": 651019}, {"attachment_id": null, "tags": [], "creation_time": "2012-02-10T21:54:53Z", "bug_id": 651019, "is_private": false, "author": "zackw@panix.com", "id": 6051757, "creator": "zackw@panix.com", "raw_text": "(In reply to Boris Zbarsky (:bz) from comment #2)\n> I don't actually know much about this stuff, sorry...\n\nDo you know who would?", "text": "(In reply to Boris Zbarsky (:bz) from comment #2)\n> I don't actually know much about this stuff, sorry...\n\nDo you know who would?", "count": 3, "time": "2012-02-10T21:54:53Z"}, {"raw_text": "roc is probably a reasonably choice.  Maybe some of the graphics folks?", "creator": "bzbarsky@mit.edu", "tags": [], "creation_time": "2012-02-10T22:07:59Z", "attachment_id": null, "text": "roc is probably a reasonably choice.  Maybe some of the graphics folks?", "bug_id": 651019, "time": "2012-02-10T22:07:59Z", "author": "bzbarsky@mit.edu", "count": 4, "is_private": false, "id": 6051816}, {"creator": "release@mozilla.com", "raw_text": "Try run for b8ac7217b53a is complete.\nDetailed breakdown of the results available here:\n    https://tbpl.mozilla.org/?tree=Try&rev=b8ac7217b53a\nResults (out of 210 total builds):\n    exception: 2\n    success: 91\n    warnings: 103\n    failure: 14\nBuilds (or logs if builds failed) available at:\nhttp://ftp.mozilla.org/pub/mozilla.org/firefox/try-builds/zackw@panix.com-b8ac7217b53a", "text": "Try run for b8ac7217b53a is complete.\nDetailed breakdown of the results available here:\n    https://tbpl.mozilla.org/?tree=Try&rev=b8ac7217b53a\nResults (out of 210 total builds):\n    exception: 2\n    success: 91\n    warnings: 103\n    failure: 14\nBuilds (or logs if builds failed) available at:\nhttp://ftp.mozilla.org/pub/mozilla.org/firefox/try-builds/zackw@panix.com-b8ac7217b53a", "count": 5, "time": "2012-02-11T04:06:01Z", "attachment_id": null, "tags": [], "creation_time": "2012-02-11T04:06:01Z", "bug_id": 651019, "is_private": false, "author": "release@mozilla.com", "id": 6052653}, {"time": "2012-02-12T22:02:02Z", "count": 6, "text": "Comment on attachment 596145\npreliminary patch\n\nReview of attachment 596145:\n-----------------------------------------------------------------\n\nIt would be helpful to break this patch down into a bunch of small patches that remove independent usages of the nsIDeviceContext methods, plus another patch that removes unused code.\n\n::: layout/base/nsLayoutUtils.cpp\n@@ +4633,5 @@\n> +    vArea.height = aPresContext->AppUnitsToDevPixels(vArea.height);\n> +    nsCOMPtr<nsIScreen> screen;\n> +    nsCOMPtr<nsIScreenManager> screenmgr = services::GetScreenManager();\n> +    screenmgr->ScreenForRect(vArea.x, vArea.y, vArea.width, vArea.height,\n> +                             getter_AddRefs(screen));\n\nI don't understand this. There's no reference to the window associated with the prescontext, or the position of the prescontext within its window, so this can't possibly be right? I mean, vArea is relative to the prescontext itself, but ScreenForRect requires screen coordinates, so there's a mismatch.", "raw_text": "Review of attachment 596145:\n-----------------------------------------------------------------\n\nIt would be helpful to break this patch down into a bunch of small patches that remove independent usages of the nsIDeviceContext methods, plus another patch that removes unused code.\n\n::: layout/base/nsLayoutUtils.cpp\n@@ +4633,5 @@\n> +    vArea.height = aPresContext->AppUnitsToDevPixels(vArea.height);\n> +    nsCOMPtr<nsIScreen> screen;\n> +    nsCOMPtr<nsIScreenManager> screenmgr = services::GetScreenManager();\n> +    screenmgr->ScreenForRect(vArea.x, vArea.y, vArea.width, vArea.height,\n> +                             getter_AddRefs(screen));\n\nI don't understand this. There's no reference to the window associated with the prescontext, or the position of the prescontext within its window, so this can't possibly be right? I mean, vArea is relative to the prescontext itself, but ScreenForRect requires screen coordinates, so there's a mismatch.", "creator": "roc@ocallahan.org", "id": 6054715, "author": "roc@ocallahan.org", "is_private": false, "bug_id": 651019, "creation_time": "2012-02-12T22:02:02Z", "tags": [], "attachment_id": 596145}, {"id": 6054747, "is_private": false, "author": "zackw@panix.com", "bug_id": 651019, "creation_time": "2012-02-12T22:31:45Z", "tags": [], "attachment_id": null, "time": "2012-02-12T22:31:45Z", "count": 7, "text": "(In reply to Robert O'Callahan (:roc) (Mozilla Corporation) from comment #6)\n\n> It would be helpful to break this patch down into a bunch of small patches\n> that remove independent usages of the nsIDeviceContext methods, plus another\n> patch that removes unused code.\n\nCan do.  That'll also make it easier to debug.\n\n> ::: layout/base/nsLayoutUtils.cpp\n> @@ +4633,5 @@\n> > +    vArea.height = aPresContext->AppUnitsToDevPixels(vArea.height);\n> > +    nsCOMPtr<nsIScreen> screen;\n> > +    nsCOMPtr<nsIScreenManager> screenmgr = services::GetScreenManager();\n> > +    screenmgr->ScreenForRect(vArea.x, vArea.y, vArea.width, vArea.height,\n> > +                             getter_AddRefs(screen));\n> \n> I don't understand this. There's no reference to the window associated with\n> the prescontext, or the position of the prescontext within its window, so\n> this can't possibly be right? I mean, vArea is relative to the prescontext\n> itself, but ScreenForRect requires screen coordinates, so there's a mismatch.\n\nIn fact, it doesn't work.  I was pretty much stabbing in the dark, here.  Do you have any suggestions for how to go about this properly?  The technique formerly used by the device context is to walk up the docshell tree looking for the nearest widget with a native window, but it seems like there has to be a better way.", "raw_text": "(In reply to Robert O'Callahan (:roc) (Mozilla Corporation) from comment #6)\n\n> It would be helpful to break this patch down into a bunch of small patches\n> that remove independent usages of the nsIDeviceContext methods, plus another\n> patch that removes unused code.\n\nCan do.  That'll also make it easier to debug.\n\n> ::: layout/base/nsLayoutUtils.cpp\n> @@ +4633,5 @@\n> > +    vArea.height = aPresContext->AppUnitsToDevPixels(vArea.height);\n> > +    nsCOMPtr<nsIScreen> screen;\n> > +    nsCOMPtr<nsIScreenManager> screenmgr = services::GetScreenManager();\n> > +    screenmgr->ScreenForRect(vArea.x, vArea.y, vArea.width, vArea.height,\n> > +                             getter_AddRefs(screen));\n> \n> I don't understand this. There's no reference to the window associated with\n> the prescontext, or the position of the prescontext within its window, so\n> this can't possibly be right? I mean, vArea is relative to the prescontext\n> itself, but ScreenForRect requires screen coordinates, so there's a mismatch.\n\nIn fact, it doesn't work.  I was pretty much stabbing in the dark, here.  Do you have any suggestions for how to go about this properly?  The technique formerly used by the device context is to walk up the docshell tree looking for the nearest widget with a native window, but it seems like there has to be a better way.", "creator": "zackw@panix.com"}, {"is_private": false, "author": "roc@ocallahan.org", "id": 6055554, "attachment_id": null, "tags": [], "creation_time": "2012-02-13T10:53:50Z", "bug_id": 651019, "count": 8, "time": "2012-02-13T10:53:50Z", "creator": "roc@ocallahan.org", "raw_text": "I think we should add an API to get an nsIScreen from an nsIWidget, to get the \"dominant screen\" for the widget (this could just get the widget's client rect and ask for the dominant screen for that rect, but it might make sense to allow the API to be platform-specific). Then you can use nsIFrame::GetNearestWidget with that API.", "text": "I think we should add an API to get an nsIScreen from an nsIWidget, to get the \"dominant screen\" for the widget (this could just get the widget's client rect and ask for the dominant screen for that rect, but it might make sense to allow the API to be platform-specific). Then you can use nsIFrame::GetNearestWidget with that API."}, {"text": "That sounds doable in principle.  I don't know how to get a frame given a prescontext, but probably there's a frame nearby in all these places.", "bug_id": 651019, "creator": "zackw@panix.com", "raw_text": "That sounds doable in principle.  I don't know how to get a frame given a prescontext, but probably there's a frame nearby in all these places.", "attachment_id": null, "tags": [], "creation_time": "2012-02-13T16:04:49Z", "id": 6056095, "count": 9, "author": "zackw@panix.com", "time": "2012-02-13T16:04:49Z", "is_private": false}, {"id": 6057228, "author": "roc@ocallahan.org", "is_private": false, "bug_id": 651019, "tags": [], "creation_time": "2012-02-13T20:57:50Z", "attachment_id": null, "time": "2012-02-13T20:57:50Z", "count": 10, "text": "We could add an API to get the enclosing widget for a Prescontext too. Get the RootPresContext, look for its view manager's root view's widget.", "raw_text": "We could add an API to get the enclosing widget for a Prescontext too. Get the RootPresContext, look for its view manager's root view's widget.", "creator": "roc@ocallahan.org"}, {"author": "benjamin@smedbergs.us", "time": "2016-06-27T20:14:26Z", "count": 11, "is_private": false, "id": 11505677, "raw_text": "Resetting owner to default per Zack's request.", "creator": "benjamin@smedbergs.us", "tags": [], "creation_time": "2016-06-27T20:14:26Z", "attachment_id": null, "text": "Resetting owner to default per Zack's request.", "bug_id": 651019}]}}, "comments": {}}