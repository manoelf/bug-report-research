{"bugs": {"672129": {"comments": [{"attachment_id": null, "raw_text": "As part of a larger push to better password storage across all Mozilla sites, we should convert Bugzilla to use bcrypt + hmac for password storage.\n\nFor more details, see:\nhttps://wiki.mozilla.org/WebAppSec/Secure_Coding_Guidelines#Password_Storage\nhttp://blog.mozilla.com/webappsec/2011/05/10/sha-512-w-per-user-salts-is-not-enough/\nhttp://blog.mozilla.com/webappsec/2011/06/01/sha-512-follow-up-and-thank-you/", "id": 5595659, "creator": "reed@reedloden.com", "is_private": false, "author": "reed@reedloden.com", "creation_time": "2011-07-17T20:10:14Z", "tags": [], "time": "2011-07-17T20:10:14Z", "text": "As part of a larger push to better password storage across all Mozilla sites, we should convert Bugzilla to use bcrypt + hmac for password storage.\n\nFor more details, see:\nhttps://wiki.mozilla.org/WebAppSec/Secure_Coding_Guidelines#Password_Storage\nhttp://blog.mozilla.com/webappsec/2011/05/10/sha-512-w-per-user-salts-is-not-enough/\nhttp://blog.mozilla.com/webappsec/2011/06/01/sha-512-follow-up-and-thank-you/", "count": 0, "bug_id": 672129}, {"creation_time": "2011-07-19T23:03:48Z", "author": "mkanat@bugzilla.org", "text": "  Interesting. Note that a key part of the blog is \"All the attacker needs to do now is figure out the password entered into the hash formula and the order in which it was used.\" He does still point out that given a dictionary, it's rather fast to crack salted hashes if the passwords match that dictionary, but then again, would that really even be significantly better with hmac + bcrypt? 24 hours to get a password vs. 4 seconds to get a password would certainly be different, but not ultimately all *that* different for many security situations. \n\n  I would only consider a solution really good if it meant that the time to crack the password would be longer than the password could reasonably possibly be in use--for example, 100 years.\n\n  In any case, FWIW, Bugzilla currently allows pluggable password-crypting systems, you just have to change one constant in Bugzilla::Constants, if you want to do this for higher-security installations.", "time": "2011-07-19T23:03:48Z", "bug_id": 672129, "tags": [], "is_private": false, "creator": "mkanat@bugzilla.org", "count": 1, "id": 5600460, "attachment_id": null, "raw_text": "  Interesting. Note that a key part of the blog is \"All the attacker needs to do now is figure out the password entered into the hash formula and the order in which it was used.\" He does still point out that given a dictionary, it's rather fast to crack salted hashes if the passwords match that dictionary, but then again, would that really even be significantly better with hmac + bcrypt? 24 hours to get a password vs. 4 seconds to get a password would certainly be different, but not ultimately all *that* different for many security situations. \n\n  I would only consider a solution really good if it meant that the time to crack the password would be longer than the password could reasonably possibly be in use--for example, 100 years.\n\n  In any case, FWIW, Bugzilla currently allows pluggable password-crypting systems, you just have to change one constant in Bugzilla::Constants, if you want to do this for higher-security installations."}, {"attachment_id": null, "raw_text": "DKL\n\nShould we open a second bug to get this into our BMO instance via the pluggable password-crypting system?  \n\nDoes that support a conversion system where passwords are rehashed into the new format after a successful login of an existing user? In other words, we would want to upgrade users hashing at their next login instead of erasing hashes and forcing a password reset.", "id": 5600538, "creator": "mcoates@mozilla.com", "is_private": false, "count": 2, "author": "mcoates@mozilla.com", "creation_time": "2011-07-19T23:33:59Z", "bug_id": 672129, "time": "2011-07-19T23:33:59Z", "tags": [], "text": "DKL\n\nShould we open a second bug to get this into our BMO instance via the pluggable password-crypting system?  \n\nDoes that support a conversion system where passwords are rehashed into the new format after a successful login of an existing user? In other words, we would want to upgrade users hashing at their next login instead of erasing hashes and forcing a password reset."}, {"id": 5600679, "attachment_id": null, "raw_text": "(In reply to comment #2)\n> Does that support a conversion system where passwords are rehashed into the\n> new format after a successful login of an existing user?\n\n  Yep. Bugzilla automatically does that for you.", "creation_time": "2011-07-20T00:41:41Z", "author": "mkanat@bugzilla.org", "text": "(In reply to comment #2)\n> Does that support a conversion system where passwords are rehashed into the\n> new format after a successful login of an existing user?\n\n  Yep. Bugzilla automatically does that for you.", "bug_id": 672129, "tags": [], "time": "2011-07-20T00:41:41Z", "is_private": false, "creator": "mkanat@bugzilla.org", "count": 3}, {"creation_time": "2011-07-20T16:25:05Z", "author": "mcoates@mozilla.com", "text": "Great. Filed a separate bug (672827) to make this transition for bugzilla.mozilla.org per the pluggable password-crypting systems mentioned in comment 1", "tags": [], "bug_id": 672129, "time": "2011-07-20T16:25:05Z", "is_private": false, "creator": "mcoates@mozilla.com", "count": 4, "id": 5601944, "attachment_id": null, "raw_text": "Great. Filed a separate bug (672827) to make this transition for bugzilla.mozilla.org per the pluggable password-crypting systems mentioned in comment 1"}, {"creation_time": "2011-07-20T19:18:37Z", "author": "dkl@mozilla.com", "text": "Moving back to this bug and changing product as this will not be going upstream most likely.", "time": "2011-07-20T19:18:37Z", "bug_id": 672129, "tags": [], "is_private": false, "creator": "dkl@mozilla.com", "count": 5, "id": 5602467, "attachment_id": null, "raw_text": "Moving back to this bug and changing product as this will not be going upstream most likely."}, {"text": "*** Bug 672827 has been marked as a duplicate of this bug. ***", "tags": [], "time": "2011-07-20T19:18:51Z", "creation_time": "2011-07-20T19:18:51Z", "author": "dkl@mozilla.com", "is_private": false, "creator": "dkl@mozilla.com", "id": 5602470, "raw_text": "", "attachment_id": null, "bug_id": 672129, "count": 6}, {"attachment_id": null, "raw_text": "(In reply to comment #5)\n> Moving back to this bug and changing product as this will not be going\n> upstream most likely.\n\nWhy is that exactly? I have yet to see any viable reason why this shouldn't go upstream.", "id": 5602549, "is_private": false, "creator": "reed@reedloden.com", "count": 7, "creation_time": "2011-07-20T19:45:18Z", "author": "reed@reedloden.com", "text": "(In reply to comment #5)\n> Moving back to this bug and changing product as this will not be going\n> upstream most likely.\n\nWhy is that exactly? I have yet to see any viable reason why this shouldn't go upstream.", "tags": [], "time": "2011-07-20T19:45:18Z", "bug_id": 672129}, {"bug_id": 672129, "count": 8, "id": 5603034, "raw_text": "I filed this separate bug so the upstream communication could happen in that bug while we just implement away for BMO here.", "attachment_id": null, "text": "I filed this separate bug so the upstream communication could happen in that bug while we just implement away for BMO here.", "tags": [], "time": "2011-07-20T22:19:23Z", "creation_time": "2011-07-20T22:19:23Z", "author": "mcoates@mozilla.com", "is_private": false, "creator": "mcoates@mozilla.com"}, {"id": 5603563, "raw_text": "I am fine with backing up and keeping this as two separate bugs. I merely used my judgement from previous comments that due to the fact that current versions of Bugzilla allow for pluggable password-crypting systems, and that installations would need to make a simple change to Bugzilla::Constants, that upstream would not need to accept this as a built in crypting method. Therefore we would just keep this as a BMO specific change. But if I am premature and upstream would in fact include a working alternative crypting method in future versions of Bugzilla, then we can use this bug to track that part.\n\ndkl", "attachment_id": null, "bug_id": 672129, "time": "2011-07-21T04:32:38Z", "tags": [], "text": "I am fine with backing up and keeping this as two separate bugs. I merely used my judgement from previous comments that due to the fact that current versions of Bugzilla allow for pluggable password-crypting systems, and that installations would need to make a simple change to Bugzilla::Constants, that upstream would not need to accept this as a built in crypting method. Therefore we would just keep this as a BMO specific change. But if I am premature and upstream would in fact include a working alternative crypting method in future versions of Bugzilla, then we can use this bug to track that part.\n\ndkl", "author": "dkl@mozilla.com", "creation_time": "2011-07-21T04:32:38Z", "count": 9, "creator": "dkl@mozilla.com", "is_private": false}, {"count": 10, "bug_id": 672129, "is_private": false, "creator": "mkanat@bugzilla.org", "text": "(In reply to comment #7)\n> Why is that exactly? I have yet to see any viable reason why this shouldn't\n> go upstream.\n\n  Yeah, to be clear, I did not reject this bug with my comment. I just mentioned that I'd like to see some data that proves that this is a truly significant security improvement for our userbase that's worth the dependencies, effort, maintenance, and complexity.", "time": "2011-07-21T21:20:55Z", "tags": [], "creation_time": "2011-07-21T21:20:55Z", "author": "mkanat@bugzilla.org", "raw_text": "(In reply to comment #7)\n> Why is that exactly? I have yet to see any viable reason why this shouldn't\n> go upstream.\n\n  Yeah, to be clear, I did not reject this bug with my comment. I just mentioned that I'd like to see some data that proves that this is a truly significant security improvement for our userbase that's worth the dependencies, effort, maintenance, and complexity.", "attachment_id": null, "id": 5605475}, {"raw_text": "This patch was originally developed for bug 672827 by dkl and modified a bunch by me. It has been successfully tested in a variety of methods, but I do welcome more testing.\n\nBMO will need some slight modifications to this to support hardened hashes, but I don't think Bugzilla proper needs to support those, as it's pretty hackish.", "attachment_id": 655398, "id": 6584199, "count": 11, "is_private": false, "creator": "reed@reedloden.com", "text": "Created attachment 655398\npatch - v1\n\nThis patch was originally developed for bug 672827 by dkl and modified a bunch by me. It has been successfully tested in a variety of methods, but I do welcome more testing.\n\nBMO will need some slight modifications to this to support hardened hashes, but I don't think Bugzilla proper needs to support those, as it's pretty hackish.", "tags": [], "time": "2012-08-26T04:15:42Z", "bug_id": 672129, "creation_time": "2012-08-26T04:15:42Z", "author": "reed@reedloden.com"}, {"creator": "reed@reedloden.com", "is_private": false, "count": 12, "author": "reed@reedloden.com", "creation_time": "2012-08-26T05:09:17Z", "tags": [], "bug_id": 672129, "time": "2012-08-26T05:09:17Z", "text": "Created attachment 655400\npatch - v1.1\n\nOops, I forgot to ./runtests.pl... Tests completely pass with this version.", "attachment_id": 655400, "raw_text": "Oops, I forgot to ./runtests.pl... Tests completely pass with this version.", "id": 6584227}, {"attachment_id": null, "raw_text": "I said yesterday it was time to stabilize the code for 4.4, so this is a bit too invasive for 4.4.", "id": 6584345, "creator": "LpSolit@gmail.com", "is_private": false, "author": "LpSolit@gmail.com", "creation_time": "2012-08-26T11:45:01Z", "time": "2012-08-26T11:45:01Z", "tags": [], "text": "I said yesterday it was time to stabilize the code for 4.4, so this is a bit too invasive for 4.4.", "count": 13, "bug_id": 672129}, {"bug_id": 672129, "count": 14, "id": 6584364, "raw_text": "At first glance, the code looks pretty complex. I'm not a fan of this. Also, what's the point to have several keys? Will a new one be created everytime you run checksetup.pl?? That's definitely something I would object.\n\nAlso, I see you write |use DateTime| inside a subroutine; this doesn't make sense. localtime() is much cheaper. And we already talked about hmac_sha512_base64 which requires 64bit operations. I see no reason to use it instead of e.g. hmac_sha256_base64, which we already use in Token.pm. I prefer consistency than using different methods here and there.", "attachment_id": 655400, "text": "Comment on attachment 655400\npatch - v1.1\n\nAt first glance, the code looks pretty complex. I'm not a fan of this. Also, what's the point to have several keys? Will a new one be created everytime you run checksetup.pl?? That's definitely something I would object.\n\nAlso, I see you write |use DateTime| inside a subroutine; this doesn't make sense. localtime() is much cheaper. And we already talked about hmac_sha512_base64 which requires 64bit operations. I see no reason to use it instead of e.g. hmac_sha256_base64, which we already use in Token.pm. I prefer consistency than using different methods here and there.", "tags": [], "time": "2012-08-26T12:16:59Z", "creation_time": "2012-08-26T12:16:59Z", "author": "LpSolit@gmail.com", "is_private": false, "creator": "LpSolit@gmail.com"}, {"id": 6584589, "attachment_id": null, "raw_text": "(In reply to Fr\u00e9d\u00e9ric Buclin from comment #14)\n> At first glance, the code looks pretty complex. I'm not a fan of this.\n\nI don't see how it's that complex... If we supported actual split-out password hash modules, I agree it would be nicer, but with what Bugzilla supports, it's really not super-crazy. The code is pretty fairly contained to just a few places.\n\n> Also, what's the point to have several keys? Will a new one be created everytime\n> you run checksetup.pl?? That's definitely something I would object.\n\nNope. It's meant to be regularly changed (at some period of time... probably at least once a year, maybe more) or when you feel that something has been compromised. Maybe it would be nice to eventually add a option to ./checksetup.pl to add a new key to make it easier for admins, but it's fine for now (I'll follow-up with that in another bug, as I think there should be a ./checksetup.pl option to regenerate the site_wide_secret easily without removing it, too).\n\nTo give a better understanding about how Bcrypt and HMAC work together, check out this blog post by one of Mozilla's web developers:\nhttp://fredericiana.com/2012/06/08/lets-talk-about-password-storage/\n\n> Also, I see you write |use DateTime| inside a subroutine; this doesn't make\n> sense. localtime() is much cheaper.\n\nIt's a one-time operation on initial parameter adding. \"cheaper\" is not really a factor here. However, I'm happy to change to use localtime() if it lets me get the same thing out of it. Seems I can just use Time::localtime and localtime->year + 1900, localtime->mon + 1, and localtime->mday, so that seems easy enough.\n\n> And we already talked about\n> hmac_sha512_base64 which requires 64bit operations. I see no reason to use\n> it instead of e.g. hmac_sha256_base64, which we already use in Token.pm. I\n> prefer consistency than using different methods here and there.\n\nI don't really think the slowness of SHA-512 on a 32-bit system is really much of a factor, especially when dealing with passwords, as you *want* password hashing to be slow (that's kinda the whole point of bcrypt). However, there's not that big enough of a difference between the two hash functions to warrant arguing over it, so I'll change it. We may change it for BMO, though, depending on what the Security Assurance team wants.", "author": "reed@reedloden.com", "creation_time": "2012-08-26T17:44:59Z", "bug_id": 672129, "tags": [], "time": "2012-08-26T17:44:59Z", "text": "(In reply to Fr\u00e9d\u00e9ric Buclin from comment #14)\n> At first glance, the code looks pretty complex. I'm not a fan of this.\n\nI don't see how it's that complex... If we supported actual split-out password hash modules, I agree it would be nicer, but with what Bugzilla supports, it's really not super-crazy. The code is pretty fairly contained to just a few places.\n\n> Also, what's the point to have several keys? Will a new one be created everytime\n> you run checksetup.pl?? That's definitely something I would object.\n\nNope. It's meant to be regularly changed (at some period of time... probably at least once a year, maybe more) or when you feel that something has been compromised. Maybe it would be nice to eventually add a option to ./checksetup.pl to add a new key to make it easier for admins, but it's fine for now (I'll follow-up with that in another bug, as I think there should be a ./checksetup.pl option to regenerate the site_wide_secret easily without removing it, too).\n\nTo give a better understanding about how Bcrypt and HMAC work together, check out this blog post by one of Mozilla's web developers:\nhttp://fredericiana.com/2012/06/08/lets-talk-about-password-storage/\n\n> Also, I see you write |use DateTime| inside a subroutine; this doesn't make\n> sense. localtime() is much cheaper.\n\nIt's a one-time operation on initial parameter adding. \"cheaper\" is not really a factor here. However, I'm happy to change to use localtime() if it lets me get the same thing out of it. Seems I can just use Time::localtime and localtime->year + 1900, localtime->mon + 1, and localtime->mday, so that seems easy enough.\n\n> And we already talked about\n> hmac_sha512_base64 which requires 64bit operations. I see no reason to use\n> it instead of e.g. hmac_sha256_base64, which we already use in Token.pm. I\n> prefer consistency than using different methods here and there.\n\nI don't really think the slowness of SHA-512 on a 32-bit system is really much of a factor, especially when dealing with passwords, as you *want* password hashing to be slow (that's kinda the whole point of bcrypt). However, there's not that big enough of a difference between the two hash functions to warrant arguing over it, so I'll change it. We may change it for BMO, though, depending on what the Security Assurance team wants.", "creator": "reed@reedloden.com", "is_private": false, "count": 15}, {"author": "reed@reedloden.com", "creation_time": "2012-08-26T17:55:13Z", "bug_id": 672129, "tags": [], "time": "2012-08-26T17:55:13Z", "text": "(In reply to Fr\u00e9d\u00e9ric Buclin from comment #13)\n> I said yesterday it was time to stabilize the code for 4.4, so this is a bit\n> too invasive for 4.4.\n\nIt's not worth waiting another year for this, especially with all the password database dumps lately. With today's password crackers, just using a SHA-2-based digest + salt is not good enough. The time is now, especially since this has already waited a year. Moore's Law is at play here, and time is not on our side. Mozilla's Security Assurance team has been requesting this for over a year, and I'm sure both dkl and glob are happy to do whatever QA necessary to ensure this doesn't break things.\n\nhttp://codahale.com/how-to-safely-store-a-password/\nhttp://yorickpeterse.com/articles/use-bcrypt-fool\nhttp://phpmaster.com/why-you-should-use-bcrypt-to-hash-stored-passwords/\n\nAlso, to be fair, there are plenty of people that recommend doing even more (such as PBKDF2 or scrypt -- http://www.unlimitednovelty.com/2012/03/dont-use-bcrypt.html), but since we're not using bcrypt alone (this is bcrypt + HMAC), it's more than enough for the immediate future, and it's consistent with the rest of Mozilla's websites.", "creator": "reed@reedloden.com", "is_private": false, "count": 16, "id": 6584597, "attachment_id": null, "raw_text": "(In reply to Fr\u00e9d\u00e9ric Buclin from comment #13)\n> I said yesterday it was time to stabilize the code for 4.4, so this is a bit\n> too invasive for 4.4.\n\nIt's not worth waiting another year for this, especially with all the password database dumps lately. With today's password crackers, just using a SHA-2-based digest + salt is not good enough. The time is now, especially since this has already waited a year. Moore's Law is at play here, and time is not on our side. Mozilla's Security Assurance team has been requesting this for over a year, and I'm sure both dkl and glob are happy to do whatever QA necessary to ensure this doesn't break things.\n\nhttp://codahale.com/how-to-safely-store-a-password/\nhttp://yorickpeterse.com/articles/use-bcrypt-fool\nhttp://phpmaster.com/why-you-should-use-bcrypt-to-hash-stored-passwords/\n\nAlso, to be fair, there are plenty of people that recommend doing even more (such as PBKDF2 or scrypt -- http://www.unlimitednovelty.com/2012/03/dont-use-bcrypt.html), but since we're not using bcrypt alone (this is bcrypt + HMAC), it's more than enough for the immediate future, and it's consistent with the rest of Mozilla's websites."}, {"count": 17, "bug_id": 672129, "raw_text": "* Swaps from DateTime to Time::localtime\n* Uses HMAC-SHA-256 instead of HMAC-SHA-512\n\nAll tests pass.", "attachment_id": 655438, "id": 6584610, "creator": "reed@reedloden.com", "is_private": false, "time": "2012-08-26T18:11:00Z", "tags": [], "text": "Created attachment 655438\npatch - v2\n\n* Swaps from DateTime to Time::localtime\n* Uses HMAC-SHA-256 instead of HMAC-SHA-512\n\nAll tests pass.", "author": "reed@reedloden.com", "creation_time": "2012-08-26T18:11:00Z"}, {"is_private": false, "creator": "reed@reedloden.com", "count": 18, "creation_time": "2012-08-26T18:31:59Z", "author": "reed@reedloden.com", "text": "Comment on attachment 655438\npatch - v2\n\nReview of attachment 655438:\n-----------------------------------------------------------------\n\n::: Bugzilla/Constants.pm\n@@ +567,5 @@\n> +# Perl's \"Digest\" module. One exception is BCRYPT_HMAC which is implemented\n> +# differently since it uses a combination of HMAC-SHA-256 and Bcrypt.\n> +# Note that if you change this, it won't take effect until a user changes\n> +# his password.\n> +use constant PASSWORD_DIGEST_ALGORITHM => 'BCRYPT_HMAC';\n\nSo, I see one issue I missed. For this constant, I really should be doing something like:\n\nuse constant PASSWORD_DIGEST_ALGORITHM => Bugzilla->feature('bcrypt_hmac') ? 'BCRYPT_HMAC' : 'SHA-256';\n\nHowever, I can't access Bugzilla->feature() from Bugzilla::Constants. Thoughts on how best to handle this? I could made a specific exception in bz_crypt() that will use SHA-256 if PASSWORD_DIGEST_ALGORITHM eq 'BCRYPT_HMAC', yet it is not available or something, but that seems hackish.", "time": "2012-08-26T18:31:59Z", "bug_id": 672129, "tags": [], "attachment_id": 655438, "raw_text": "Review of attachment 655438:\n-----------------------------------------------------------------\n\n::: Bugzilla/Constants.pm\n@@ +567,5 @@\n> +# Perl's \"Digest\" module. One exception is BCRYPT_HMAC which is implemented\n> +# differently since it uses a combination of HMAC-SHA-256 and Bcrypt.\n> +# Note that if you change this, it won't take effect until a user changes\n> +# his password.\n> +use constant PASSWORD_DIGEST_ALGORITHM => 'BCRYPT_HMAC';\n\nSo, I see one issue I missed. For this constant, I really should be doing something like:\n\nuse constant PASSWORD_DIGEST_ALGORITHM => Bugzilla->feature('bcrypt_hmac') ? 'BCRYPT_HMAC' : 'SHA-256';\n\nHowever, I can't access Bugzilla->feature() from Bugzilla::Constants. Thoughts on how best to handle this? I could made a specific exception in bz_crypt() that will use SHA-256 if PASSWORD_DIGEST_ALGORITHM eq 'BCRYPT_HMAC', yet it is not available or something, but that seems hackish.", "id": 6584630}, {"id": 6584653, "attachment_id": null, "raw_text": "Oh, you can test this code at https://landfill.bugzilla.org/bz672827/.", "author": "reed@reedloden.com", "creation_time": "2012-08-26T18:58:45Z", "tags": [], "bug_id": 672129, "time": "2012-08-26T18:58:45Z", "text": "Oh, you can test this code at https://landfill.bugzilla.org/bz672827/.", "creator": "reed@reedloden.com", "is_private": false, "count": 19}, {"id": 6584667, "attachment_id": null, "raw_text": "(In reply to Reed Loden [:reed] from comment #17)\n> * Swaps from DateTime to Time::localtime\n\nlocaltime() is a built-in function, no need to load any external module. In array context, it returns all the data you need.", "creation_time": "2012-08-26T19:12:15Z", "author": "LpSolit@gmail.com", "text": "(In reply to Reed Loden [:reed] from comment #17)\n> * Swaps from DateTime to Time::localtime\n\nlocaltime() is a built-in function, no need to load any external module. In array context, it returns all the data you need.", "bug_id": 672129, "time": "2012-08-26T19:12:15Z", "tags": [], "is_private": false, "creator": "LpSolit@gmail.com", "count": 20}, {"is_private": false, "creator": "LpSolit@gmail.com", "text": "(In reply to Reed Loden [:reed] from comment #16)\n> It's not worth waiting another year for this\n\nYou had a whole development cycle to upload a patch and have it reviewed carefully. You jump in a few days *after* I announced that we were going to branch and stabilize the branch. You know the rules well enough to not make me change my mind on this. It's targetted 5.0.", "time": "2012-08-26T19:21:46Z", "tags": [], "creation_time": "2012-08-26T19:21:46Z", "author": "LpSolit@gmail.com", "raw_text": "(In reply to Reed Loden [:reed] from comment #16)\n> It's not worth waiting another year for this\n\nYou had a whole development cycle to upload a patch and have it reviewed carefully. You jump in a few days *after* I announced that we were going to branch and stabilize the branch. You know the rules well enough to not make me change my mind on this. It's targetted 5.0.", "attachment_id": null, "id": 6584677, "count": 21, "bug_id": 672129}, {"attachment_id": null, "raw_text": "4.4 isn't RC yet, and the weakness of SHA-256 is well-documented at this point.  If we can still get this into 4.4 before it goes RC I don't see a reason not to commit this on the branch.", "id": 6584877, "creator": "justdave@bugzilla.org", "is_private": false, "author": "justdave@bugzilla.org", "creation_time": "2012-08-26T23:21:09Z", "time": "2012-08-26T23:21:09Z", "tags": [], "text": "4.4 isn't RC yet, and the weakness of SHA-256 is well-documented at this point.  If we can still get this into 4.4 before it goes RC I don't see a reason not to commit this on the branch.", "count": 22, "bug_id": 672129}, {"is_private": false, "creator": "reed@reedloden.com", "count": 23, "creation_time": "2012-08-27T04:16:24Z", "author": "reed@reedloden.com", "text": "Created attachment 655501\npatch - v2.1\n\nThanks to glob, changed PASSWORD_DIGEST_ALGORITHM to a sub, which takes care of my Bugzilla->feature() problem.\n\nUpdate localtime code, as per LpSolit's comment.", "tags": [], "time": "2012-08-27T04:16:24Z", "bug_id": 672129, "attachment_id": 655501, "raw_text": "Thanks to glob, changed PASSWORD_DIGEST_ALGORITHM to a sub, which takes care of my Bugzilla->feature() problem.\n\nUpdate localtime code, as per LpSolit's comment.", "id": 6585137}, {"text": "FWIW, I intentionally hadn't retargeted yet (oh, to be able to lock target milestone down to approvers ;) ), intending to state my opinion and spur more discussion on the topic in here before doing so.  There's apparently some compelling reasons not to take this on the 4.4 branch, so I'm trying to figure out what all the effects of this are still.", "time": "2012-09-01T09:40:05Z", "bug_id": 672129, "tags": [], "creation_time": "2012-09-01T09:40:05Z", "author": "justdave@bugzilla.org", "count": 24, "is_private": false, "creator": "justdave@bugzilla.org", "id": 6602960, "raw_text": "FWIW, I intentionally hadn't retargeted yet (oh, to be able to lock target milestone down to approvers ;) ), intending to state my opinion and spur more discussion on the topic in here before doing so.  There's apparently some compelling reasons not to take this on the 4.4 branch, so I'm trying to figure out what all the effects of this are still.", "attachment_id": null}, {"creation_time": "2012-11-14T23:35:27Z", "author": "LpSolit@gmail.com", "text": "Comment on attachment 655501\npatch - v2.1\n\n>=== modified file 'Bugzilla/Auth/Verify/DB.pm'\n\n>+    my $current_algorithm = PASSWORD_DIGEST_ALGORITHM;\n>+    my ($algorithm) = $real_password_crypted =~ /{([^}]+)}$/;\n>+    my $update_password = 0;\n>+\n>     # If their old password was using crypt() or some different hash\n>     # than we're using now, convert the stored password to using\n>     # whatever hashing system we're using now.\n>-    my $current_algorithm = PASSWORD_DIGEST_ALGORITHM;\n>-    if ($real_password_crypted !~ /{\\Q$current_algorithm\\E}$/) {\n>+    if ($algorithm ne $current_algorithm) {\n>+        $update_password = 1;\n>+    }\n\nThese changes are already in bug 785283. So your patch will conflict. (first part of my r-)\n\n\n>+            if ($hmac_key_id != get_latest_hmac_key_id()) {\n\nI don't see the point to have several hmac keys. There should be only one. If the older ones are compromised, then they should be invalidated (replaced by a new one). If they are fine, then I don't see the point to generate a new key. (2nd part of my r-)", "tags": [], "time": "2012-11-14T23:35:27Z", "bug_id": 672129, "is_private": false, "creator": "LpSolit@gmail.com", "count": 25, "id": 6823224, "attachment_id": 655501, "raw_text": ">=== modified file 'Bugzilla/Auth/Verify/DB.pm'\n\n>+    my $current_algorithm = PASSWORD_DIGEST_ALGORITHM;\n>+    my ($algorithm) = $real_password_crypted =~ /{([^}]+)}$/;\n>+    my $update_password = 0;\n>+\n>     # If their old password was using crypt() or some different hash\n>     # than we're using now, convert the stored password to using\n>     # whatever hashing system we're using now.\n>-    my $current_algorithm = PASSWORD_DIGEST_ALGORITHM;\n>-    if ($real_password_crypted !~ /{\\Q$current_algorithm\\E}$/) {\n>+    if ($algorithm ne $current_algorithm) {\n>+        $update_password = 1;\n>+    }\n\nThese changes are already in bug 785283. So your patch will conflict. (first part of my r-)\n\n\n>+            if ($hmac_key_id != get_latest_hmac_key_id()) {\n\nI don't see the point to have several hmac keys. There should be only one. If the older ones are compromised, then they should be invalidated (replaced by a new one). If they are fine, then I don't see the point to generate a new key. (2nd part of my r-)"}, {"author": "reed@reedloden.com", "creation_time": "2012-11-15T11:15:37Z", "bug_id": 672129, "time": "2012-11-15T11:15:37Z", "tags": [], "text": "(In reply to Fr\u00e9d\u00e9ric Buclin from comment #25)\n> These changes are already in bug 785283. So your patch will conflict. (first\n> part of my r-)\n\nI wrote this patch long before the one for bug 785283. Once bug 785283 lands, I can update this patch to support the code it added/changed.\n\n> >+            if ($hmac_key_id != get_latest_hmac_key_id()) {\n> \n> I don't see the point to have several hmac keys. There should be only one.\n> If the older ones are compromised, then they should be invalidated (replaced\n> by a new one). If they are fine, then I don't see the point to generate a\n> new key. (2nd part of my r-)\n\nOnly one HMAC key is used at a time, but old ones still have to be kept forever in the config. Otherwise, people's password hashes that were created using older HMAC keys (and who haven't logged back in since such change) wouldn't work, and they would have to manually reset their password. As users authenticate to Bugzilla, if they aren't using the latest HMAC key, their hash will be regenerated.", "creator": "reed@reedloden.com", "is_private": false, "count": 26, "id": 6824635, "attachment_id": null, "raw_text": "(In reply to Fr\u00e9d\u00e9ric Buclin from comment #25)\n> These changes are already in bug 785283. So your patch will conflict. (first\n> part of my r-)\n\nI wrote this patch long before the one for bug 785283. Once bug 785283 lands, I can update this patch to support the code it added/changed.\n\n> >+            if ($hmac_key_id != get_latest_hmac_key_id()) {\n> \n> I don't see the point to have several hmac keys. There should be only one.\n> If the older ones are compromised, then they should be invalidated (replaced\n> by a new one). If they are fine, then I don't see the point to generate a\n> new key. (2nd part of my r-)\n\nOnly one HMAC key is used at a time, but old ones still have to be kept forever in the config. Otherwise, people's password hashes that were created using older HMAC keys (and who haven't logged back in since such change) wouldn't work, and they would have to manually reset their password. As users authenticate to Bugzilla, if they aren't using the latest HMAC key, their hash will be regenerated."}, {"bug_id": 672129, "count": 27, "creation_time": "2012-11-15T15:51:49Z", "author": "LpSolit@gmail.com", "text": "(In reply to Reed Loden [:reed] from comment #26)\n> Only one HMAC key is used at a time, but old ones still have to be kept\n> forever in the config. Otherwise, people's password hashes that were created\n> using older HMAC keys (and who haven't logged back in since such change)\n> wouldn't work, and they would have to manually reset their password.\n\nI think that's what we want. There is no reason to create another HMAC key unless it has been compromised, in which case we don't want old password hashes to still work.", "time": "2012-11-15T15:51:49Z", "tags": [], "is_private": false, "creator": "LpSolit@gmail.com", "id": 6825261, "attachment_id": null, "raw_text": "(In reply to Reed Loden [:reed] from comment #26)\n> Only one HMAC key is used at a time, but old ones still have to be kept\n> forever in the config. Otherwise, people's password hashes that were created\n> using older HMAC keys (and who haven't logged back in since such change)\n> wouldn't work, and they would have to manually reset their password.\n\nI think that's what we want. There is no reason to create another HMAC key unless it has been compromised, in which case we don't want old password hashes to still work."}, {"id": 6825596, "attachment_id": null, "raw_text": "(In reply to Fr\u00e9d\u00e9ric Buclin from comment #27)\n> (In reply to Reed Loden [:reed] from comment #26)\n> > Only one HMAC key is used at a time, but old ones still have to be kept\n> > forever in the config. Otherwise, people's password hashes that were created\n> > using older HMAC keys (and who haven't logged back in since such change)\n> > wouldn't work, and they would have to manually reset their password.\n> \n> I think that's what we want. There is no reason to create another HMAC key\n> unless it has been compromised, in which case we don't want old password\n> hashes to still work.\n\nNo, it's not what we want. For one, you don't *only* change HMAC keys for compromise. You also change it when a sysadmin moves on (as in to another job) but you still trust him/her, so you wouldn't inconvenience every user you have just to make any possible database dump invalid. Also, changing it regularly is good security posture as well, as sometimes you just don't know if you've been compromised. This ability to have multiple keys with only one in use at a time and have users who log in with older keys get upgraded to the newest key is a core part to how this algorithm is used, so it's not going to change.", "creation_time": "2012-11-15T17:12:32Z", "author": "reed@reedloden.com", "text": "(In reply to Fr\u00e9d\u00e9ric Buclin from comment #27)\n> (In reply to Reed Loden [:reed] from comment #26)\n> > Only one HMAC key is used at a time, but old ones still have to be kept\n> > forever in the config. Otherwise, people's password hashes that were created\n> > using older HMAC keys (and who haven't logged back in since such change)\n> > wouldn't work, and they would have to manually reset their password.\n> \n> I think that's what we want. There is no reason to create another HMAC key\n> unless it has been compromised, in which case we don't want old password\n> hashes to still work.\n\nNo, it's not what we want. For one, you don't *only* change HMAC keys for compromise. You also change it when a sysadmin moves on (as in to another job) but you still trust him/her, so you wouldn't inconvenience every user you have just to make any possible database dump invalid. Also, changing it regularly is good security posture as well, as sometimes you just don't know if you've been compromised. This ability to have multiple keys with only one in use at a time and have users who log in with older keys get upgraded to the newest key is a core part to how this algorithm is used, so it's not going to change.", "time": "2012-11-15T17:12:32Z", "bug_id": 672129, "tags": [], "is_private": false, "creator": "reed@reedloden.com", "count": 28}, {"bug_id": 672129, "count": 29, "text": "It's also how we've done hash changes in the past (changing from unix crypt to md5, for example).  After some period of time, the crypt password stops working and everyone has to reset their password to get in.  If that's a suitable time period then that'd be a good thing anyway.  I'd even suggest letting the old keys age out after a configurable amount of time instead of keeping them forever (default to a year or 2 years or something)", "tags": [], "time": "2012-11-15T21:35:24Z", "creation_time": "2012-11-15T21:35:24Z", "author": "justdave@bugzilla.org", "is_private": false, "creator": "justdave@bugzilla.org", "id": 6826851, "raw_text": "It's also how we've done hash changes in the past (changing from unix crypt to md5, for example).  After some period of time, the crypt password stops working and everyone has to reset their password to get in.  If that's a suitable time period then that'd be a good thing anyway.  I'd even suggest letting the old keys age out after a configurable amount of time instead of keeping them forever (default to a year or 2 years or something)", "attachment_id": null}, {"count": 30, "creator": "reed@reedloden.com", "is_private": false, "bug_id": 672129, "tags": [], "time": "2012-11-15T21:54:07Z", "text": "(In reply to Dave Miller [:justdave] from comment #29)\n> It's also how we've done hash changes in the past (changing from unix crypt\n> to md5, for example).  After some period of time, the crypt password stops\n> working and everyone has to reset their password to get in.  If that's a\n> suitable time period then that'd be a good thing anyway.  I'd even suggest\n> letting the old keys age out after a configurable amount of time instead of\n> keeping them forever (default to a year or 2 years or something)\n\nThat's up to the Bugzilla administrator as to if he/she wants to edit localconfig and remove older keys after some point in time, but I don't think it's something we should add directly in to auto-remove keys.", "author": "reed@reedloden.com", "creation_time": "2012-11-15T21:54:07Z", "raw_text": "(In reply to Dave Miller [:justdave] from comment #29)\n> It's also how we've done hash changes in the past (changing from unix crypt\n> to md5, for example).  After some period of time, the crypt password stops\n> working and everyone has to reset their password to get in.  If that's a\n> suitable time period then that'd be a good thing anyway.  I'd even suggest\n> letting the old keys age out after a configurable amount of time instead of\n> keeping them forever (default to a year or 2 years or something)\n\nThat's up to the Bugzilla administrator as to if he/she wants to edit localconfig and remove older keys after some point in time, but I don't think it's something we should add directly in to auto-remove keys.", "attachment_id": null, "id": 6826910}, {"id": 6964290, "raw_text": "still wip... not ready for review", "attachment_id": 697995, "time": "2013-01-04T18:58:49Z", "bug_id": 672129, "tags": [], "text": "Created attachment 697995\npatch - v2.2 (wip)\n\nstill wip... not ready for review", "author": "reed@reedloden.com", "creation_time": "2013-01-04T18:58:49Z", "count": 31, "creator": "reed@reedloden.com", "is_private": false}, {"bug_id": 672129, "count": 32, "id": 6964377, "attachment_id": 697995, "raw_text": ">=== modified file 'Bugzilla/Util.pm'\n\n>+        if (Bugzilla->feature('bcrypt_hmac') && $algorithm eq 'BCRYPT_HMAC') {\n\nIt would be cleaner to have all the code in this IF block in a separate private subroutine, instead of this large IF block.", "author": "LpSolit@gmail.com", "creation_time": "2013-01-04T19:17:33Z", "time": "2013-01-04T19:17:33Z", "tags": [], "text": "Comment on attachment 697995\npatch - v2.2 (wip)\n\n>=== modified file 'Bugzilla/Util.pm'\n\n>+        if (Bugzilla->feature('bcrypt_hmac') && $algorithm eq 'BCRYPT_HMAC') {\n\nIt would be cleaner to have all the code in this IF block in a separate private subroutine, instead of this large IF block.", "creator": "LpSolit@gmail.com", "is_private": false}, {"is_private": false, "creator": "glob@mozilla.com", "count": 33, "creation_time": "2014-03-25T13:45:55Z", "author": "glob@mozilla.com", "text": "*** Bug 987611 has been marked as a duplicate of this bug. ***", "tags": [], "time": "2014-03-25T13:45:55Z", "bug_id": 672129, "attachment_id": null, "raw_text": "", "id": 8575178}, {"is_private": false, "creator": "gerv@mozilla.org", "count": 34, "creation_time": "2014-03-25T14:53:59Z", "author": "gerv@mozilla.org", "text": "Would a patch using Digest::Bcrypt <https://github.com/LoonyPandora/Digest-Bcrypt> be any simpler? It seems to use the Digest interface which we already support, with the addition of the restriction on salt length and the need to provide a cost.\n\nGerv", "bug_id": 672129, "time": "2014-03-25T14:53:59Z", "tags": [], "attachment_id": null, "raw_text": "Would a patch using Digest::Bcrypt <https://github.com/LoonyPandora/Digest-Bcrypt> be any simpler? It seems to use the Digest interface which we already support, with the addition of the restriction on salt length and the need to provide a cost.\n\nGerv", "id": 8575514}, {"id": 9251180, "raw_text": "reed: any progress? You already missed 4.4 (comment 13). Do not wait for 5.0 to enter its RC stage to submit a new patch.", "attachment_id": null, "text": "reed: any progress? You already missed 4.4 (comment 13). Do not wait for 5.0 to enter its RC stage to submit a new patch.", "bug_id": 672129, "time": "2014-08-30T14:53:26Z", "tags": [], "creation_time": "2014-08-30T14:53:26Z", "author": "LpSolit@gmail.com", "count": 35, "is_private": false, "creator": "LpSolit@gmail.com"}]}}, "comments": {}}