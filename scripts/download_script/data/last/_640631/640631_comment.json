{"comments": {}, "bugs": {"640631": {"comments": [{"creation_time": "2011-03-10T16:37:39Z", "tags": [], "attachment_id": null, "bug_id": 640631, "author": "michael@ratcliffefamily.org", "is_private": false, "id": 5336359, "raw_text": "User-Agent:       Mozilla/5.0 (Windows; U; Windows NT 6.1; en-GB; rv:1.9.2.15) Gecko/20110303 Firefox/3.6.15\nBuild Identifier: Mozilla/5.0 (Windows; U; Windows NT 6.1; en-GB; rv:1.9.2.15) Gecko/20110303 Firefox/3.6.15\n\nI am adding a feature to Firebug which prettifies scripts (it is a very commonly requested feature). This is simple but now the prettified source in Firebug is different from the non-prettified source in Firefox so debugging does not work.\n\nI need to find a way to intercept a script as Firefox loads it and then prettify the script before Firefox processes it. The prettify method would need to be a JavaScript method on the Chrome side. If we can prettify the scripts then Firefox will be working with the prettified code so the error lines, stepping and source will all match what we have in Firebug.\n\nCould we add a hook to all source files after they load but before Firefox has parsed them so that extension developers can manipulate the text? This could be used to prettify JavaScript or HTML and return the source to Firefox. We could use the mime type to identify the content if this is passed with the script.\n\nReproducible: Always", "creator": "michael@ratcliffefamily.org", "text": "User-Agent:       Mozilla/5.0 (Windows; U; Windows NT 6.1; en-GB; rv:1.9.2.15) Gecko/20110303 Firefox/3.6.15\nBuild Identifier: Mozilla/5.0 (Windows; U; Windows NT 6.1; en-GB; rv:1.9.2.15) Gecko/20110303 Firefox/3.6.15\n\nI am adding a feature to Firebug which prettifies scripts (it is a very commonly requested feature). This is simple but now the prettified source in Firebug is different from the non-prettified source in Firefox so debugging does not work.\n\nI need to find a way to intercept a script as Firefox loads it and then prettify the script before Firefox processes it. The prettify method would need to be a JavaScript method on the Chrome side. If we can prettify the scripts then Firefox will be working with the prettified code so the error lines, stepping and source will all match what we have in Firebug.\n\nCould we add a hook to all source files after they load but before Firefox has parsed them so that extension developers can manipulate the text? This could be used to prettify JavaScript or HTML and return the source to Firefox. We could use the mime type to identify the content if this is passed with the script.\n\nReproducible: Always", "time": "2011-03-10T16:37:39Z", "count": 0}, {"text": "Jonas, thoughts?", "creator": "bzbarsky@mit.edu", "raw_text": "Jonas, thoughts?", "count": 1, "time": "2011-03-10T19:58:48Z", "bug_id": 640631, "attachment_id": null, "tags": [], "creation_time": "2011-03-10T19:58:48Z", "id": 5337001, "author": "bzbarsky@mit.edu", "is_private": false}, {"author": "james@jmarshall.com", "is_private": false, "id": 5337068, "creation_time": "2011-03-10T20:20:38Z", "tags": [], "attachment_id": null, "bug_id": 640631, "time": "2011-03-10T20:20:38Z", "count": 2, "raw_text": "If I may--\n\nThis is to fight online censorship.  I'm working on the anti-censorship software called CGIProxy, and with the compressed JavaScript code in sites like Gmail and Facebook, we're hitting the limits of what Firebug can do.  If the JS could be reformatted to one statement per line, we could debug these sites, and get them into censored countries.  If it helps, I can pay for these changes.\n\nIf we don't want to put the needed changes into the distributed code, I'd still be willing to pay for a custom version (preferably 4.x) that does what is needed.\n\nI'd be very grateful if this problem was solved somehow.  Given everything happening in the Middle East and Africa right now, I think it's very important.  Plus, I know that a number of developers are looking for a solution for the same issue in Firebug.", "creator": "james@jmarshall.com", "text": "If I may--\n\nThis is to fight online censorship.  I'm working on the anti-censorship software called CGIProxy, and with the compressed JavaScript code in sites like Gmail and Facebook, we're hitting the limits of what Firebug can do.  If the JS could be reformatted to one statement per line, we could debug these sites, and get them into censored countries.  If it helps, I can pay for these changes.\n\nIf we don't want to put the needed changes into the distributed code, I'd still be willing to pay for a custom version (preferably 4.x) that does what is needed.\n\nI'd be very grateful if this problem was solved somehow.  Given everything happening in the Middle East and Africa right now, I think it's very important.  Plus, I know that a number of developers are looking for a solution for the same issue in Firebug."}, {"attachment_id": null, "creation_time": "2011-03-11T01:43:19Z", "tags": [], "bug_id": 640631, "is_private": false, "author": "james@jmarshall.com", "id": 5338058, "creator": "james@jmarshall.com", "raw_text": "One more thing--\n\nIt would be great if any solution here can prettify any block of JS that gets processed, including eval and things like eval.  For example, Facebook passes a huge one-line string of code into an eval-like operation.  I can't load it at the moment, but as I recall it \"eval's\" by setting the contents of a new script block, like \"new_script_element.text= long_code_string\", and then inserting it into the <head> block.", "text": "One more thing--\n\nIt would be great if any solution here can prettify any block of JS that gets processed, including eval and things like eval.  For example, Facebook passes a huge one-line string of code into an eval-like operation.  I can't load it at the moment, but as I recall it \"eval's\" by setting the contents of a new script block, like \"new_script_element.text= long_code_string\", and then inserting it into the <head> block.", "count": 3, "time": "2011-03-11T01:43:19Z"}, {"bug_id": 640631, "text": "that's a completely separate beast from <script> elements.", "attachment_id": null, "tags": [], "creation_time": "2011-03-11T01:45:16Z", "creator": "bzbarsky@mit.edu", "raw_text": "that's a completely separate beast from <script> elements.", "id": 5338059, "is_private": false, "count": 4, "time": "2011-03-11T01:45:16Z", "author": "bzbarsky@mit.edu"}, {"id": 5338105, "author": "michael@ratcliffefamily.org", "time": "2011-03-11T02:01:19Z", "count": 5, "is_private": false, "text": "James makes a good point. Scripts added through evals and other methods would also need to be tidyable because they are also visible in Firebug's script panel.", "bug_id": 640631, "raw_text": "James makes a good point. Scripts added through evals and other methods would also need to be tidyable because they are also visible in Firebug's script panel.", "creator": "michael@ratcliffefamily.org", "creation_time": "2011-03-11T02:01:19Z", "tags": [], "attachment_id": null}, {"attachment_id": null, "creation_time": "2011-03-22T09:38:47Z", "tags": [], "bug_id": 640631, "is_private": false, "author": "michael@ratcliffefamily.org", "id": 5359415, "creator": "michael@ratcliffefamily.org", "raw_text": "How about if we simplify this request? We understand that evals are technically and politically difficult so we could deal with them in a separate bug report.\n\nWhy don't we say that we want to be able to manipulate all source files after they have loaded but before Firefox has processed them. We could use the mime type to identify the file so I guess that this would be all that we would need.\n\nJames, as a first step would this work for you?", "text": "How about if we simplify this request? We understand that evals are technically and politically difficult so we could deal with them in a separate bug report.\n\nWhy don't we say that we want to be able to manipulate all source files after they have loaded but before Firefox has processed them. We could use the mime type to identify the file so I guess that this would be all that we would need.\n\nJames, as a first step would this work for you?", "count": 6, "time": "2011-03-22T09:38:47Z"}, {"creation_time": "2011-03-22T15:07:06Z", "tags": [], "attachment_id": null, "bug_id": 640631, "is_private": false, "author": "bzbarsky@mit.edu", "id": 5359819, "raw_text": "You can't use the MIME type to identify <script>-loaded scripts.  They're very commonly loaded with all sorts of bogus MIME types.\n\nYou just need a hook in the scriptloader.", "creator": "bzbarsky@mit.edu", "text": "You can't use the MIME type to identify <script>-loaded scripts.  They're very commonly loaded with all sorts of bogus MIME types.\n\nYou just need a hook in the scriptloader.", "time": "2011-03-22T15:07:06Z", "count": 7}, {"text": "Other than the MIME type problem Boris describes, it would definitely be a good first step for me to handle compressed JS in HTML and JS files.  I think that would let me support all Google sites.  It's Facebook that does the weird eval-like thing.", "creator": "james@jmarshall.com", "raw_text": "Other than the MIME type problem Boris describes, it would definitely be a good first step for me to handle compressed JS in HTML and JS files.  I think that would let me support all Google sites.  It's Facebook that does the weird eval-like thing.", "count": 8, "time": "2011-03-22T20:42:31Z", "bug_id": 640631, "attachment_id": null, "creation_time": "2011-03-22T20:42:31Z", "tags": [], "id": 5360766, "author": "james@jmarshall.com", "is_private": false}, {"is_private": false, "count": 9, "author": "james@jmarshall.com", "time": "2011-03-22T20:52:46Z", "id": 5360814, "attachment_id": null, "tags": [], "creation_time": "2011-03-22T20:52:46Z", "creator": "james@jmarshall.com", "raw_text": "Hmm, I just checked again and it looks like Facebook isn't doing the weird eval-like thing anymore.  Which is great news for me and anyone else who wants to debug it.", "bug_id": 640631, "text": "Hmm, I just checked again and it looks like Facebook isn't doing the weird eval-like thing anymore.  Which is great news for me and anyone else who wants to debug it."}, {"text": "I don't necessarily see a problem with providing a \"prettify\" hook in the JS engine; that would catch calls to eval, the Function constructor, and anything in JSAPI. Sure, it would affect performance when prettifying was turned on, but as long as the non-prettified case was unaffected, that should be fine. The new Debug API (bug 636907) could make this available to JS.\n\nThe opportunity to do general munging could certainly be abused, but this seems like a legitimate and necessary use case.", "bug_id": 640631, "raw_text": "I don't necessarily see a problem with providing a \"prettify\" hook in the JS engine; that would catch calls to eval, the Function constructor, and anything in JSAPI. Sure, it would affect performance when prettifying was turned on, but as long as the non-prettified case was unaffected, that should be fine. The new Debug API (bug 636907) could make this available to JS.\n\nThe opportunity to do general munging could certainly be abused, but this seems like a legitimate and necessary use case.", "creator": "jimb@mozilla.com", "creation_time": "2011-03-30T20:05:21Z", "tags": [], "attachment_id": null, "id": 5381221, "author": "jimb@mozilla.com", "time": "2011-03-30T20:05:21Z", "count": 10, "is_private": false}, {"raw_text": "Jim: Would be great to hear where you think such a hook should be added, and if you know of anyone that could do it.", "creator": "jonas@sicking.cc", "tags": [], "creation_time": "2011-03-30T21:53:33Z", "attachment_id": null, "text": "Jim: Would be great to hear where you think such a hook should be added, and if you know of anyone that could do it.", "bug_id": 640631, "time": "2011-03-30T21:53:33Z", "author": "jonas@sicking.cc", "count": 11, "is_private": false, "id": 5381543}, {"id": 5381605, "is_private": false, "author": "michael@ratcliffefamily.org", "bug_id": 640631, "attachment_id": null, "tags": [], "creation_time": "2011-03-30T22:12:48Z", "count": 12, "time": "2011-03-30T22:12:48Z", "text": ">The opportunity to do general munging could certainly be abused, but this seems\n>like a legitimate and necessary use case.\n\nYup, sadly it seems like our only choice, particularly because the JS to be tidied can be unfinished and buggy. Besides, using a hook will allow us to control exactly how the code is to be formatted, unpack packed code etc.\n\nI hadn't heard about the Debug API until you mentioned it here ... it does seem like the perfect place for the hook to be made available. Thanks for working on the API, it will really make life easier for us on the Firebug side of things.", "creator": "michael@ratcliffefamily.org", "raw_text": ">The opportunity to do general munging could certainly be abused, but this seems\n>like a legitimate and necessary use case.\n\nYup, sadly it seems like our only choice, particularly because the JS to be tidied can be unfinished and buggy. Besides, using a hook will allow us to control exactly how the code is to be formatted, unpack packed code etc.\n\nI hadn't heard about the Debug API until you mentioned it here ... it does seem like the perfect place for the hook to be made available. Thanks for working on the API, it will really make life easier for us on the Firebug side of things."}, {"id": 5382095, "count": 13, "time": "2011-03-31T01:21:02Z", "author": "bzbarsky@mit.edu", "is_private": false, "text": "If we're ok having a JS hook for this, then we can just do it the way we JSContext::localeCallbacks, basically.  So the embedding (nsJSEnvironment) would set up a function that would get called; it could call prettifiers as needed.", "bug_id": 640631, "creator": "bzbarsky@mit.edu", "raw_text": "If we're ok having a JS hook for this, then we can just do it the way we JSContext::localeCallbacks, basically.  So the embedding (nsJSEnvironment) would set up a function that would get called; it could call prettifiers as needed.", "attachment_id": null, "creation_time": "2011-03-31T01:21:02Z", "tags": []}, {"text": "Now that 4.0 is out, would any developers here be willing to add that JS hook for this bug?  Or at least a solution for normal (non-eval) compressed JS?\n\nThanks again for any help!", "creator": "james@jmarshall.com", "raw_text": "Now that 4.0 is out, would any developers here be willing to add that JS hook for this bug?  Or at least a solution for normal (non-eval) compressed JS?\n\nThanks again for any help!", "count": 14, "time": "2011-04-21T22:49:23Z", "bug_id": 640631, "attachment_id": null, "tags": [], "creation_time": "2011-04-21T22:49:23Z", "id": 5425232, "is_private": false, "author": "james@jmarshall.com"}, {"id": 5425489, "is_private": false, "count": 15, "author": "bzbarsky@mit.edu", "time": "2011-04-22T00:25:19Z", "bug_id": 640631, "text": "Confirming in the hope that Jim will see commment 11.", "attachment_id": null, "tags": [], "creation_time": "2011-04-22T00:25:19Z", "creator": "bzbarsky@mit.edu", "raw_text": "Confirming in the hope that Jim will see commment 11."}, {"bug_id": 640631, "text": "(In reply to comment #15)\n> Confirming in the hope that Jim will see commment 11.\n\nI would assume it would be a debugger hook invoked from jsfun.cpp:Function (the Function constructor), and either js::Compiler::compileScript or its callers.\n\nThe reason one might need to pull it out to compileScript's callers is that eval caches the compiled form of some scripts, and that cache's accuracy shouldn't depend on the prettification script being well-behaved. I think this means we need to cache post-prettified scripts, so that if the prettifier returns different results at different times for the same input, the cache still won't affect the system's behavior.", "attachment_id": null, "creation_time": "2011-04-22T01:01:44Z", "tags": [], "creator": "jimb@mozilla.com", "raw_text": "(In reply to comment #15)\n> Confirming in the hope that Jim will see commment 11.\n\nI would assume it would be a debugger hook invoked from jsfun.cpp:Function (the Function constructor), and either js::Compiler::compileScript or its callers.\n\nThe reason one might need to pull it out to compileScript's callers is that eval caches the compiled form of some scripts, and that cache's accuracy shouldn't depend on the prettification script being well-behaved. I think this means we need to cache post-prettified scripts, so that if the prettifier returns different results at different times for the same input, the cache still won't affect the system's behavior.", "id": 5425546, "is_private": false, "count": 16, "author": "jimb@mozilla.com", "time": "2011-04-22T01:01:44Z"}, {"text": "Is any developer willing to take this on?  Or is someone working on it already and I just need to be patient?  I don't mean to be pushy, but my use for it-- anti-censorship-- is timely (plus my grant income relies on it, alas).  I can't really make the change myself without a lot of time; is there any other way I can help?\n\nMany thanks again for any help, I'm very grateful for your time.", "raw_text": "Is any developer willing to take this on?  Or is someone working on it already and I just need to be patient?  I don't mean to be pushy, but my use for it-- anti-censorship-- is timely (plus my grant income relies on it, alas).  I can't really make the change myself without a lot of time; is there any other way I can help?\n\nMany thanks again for any help, I'm very grateful for your time.", "creator": "james@jmarshall.com", "time": "2011-05-31T17:37:38Z", "count": 17, "bug_id": 640631, "tags": [], "creation_time": "2011-05-31T17:37:38Z", "attachment_id": null, "id": 5503767, "is_private": false, "author": "james@jmarshall.com"}, {"id": 5682863, "is_private": false, "count": 18, "author": "james@jmarshall.com", "time": "2011-08-27T20:56:51Z", "bug_id": 640631, "text": "Checking back in--\n\nHas the new debugging subsystem been completed yet?  If so, this bug can probably be closed, right?  And we can get to work on the Firebug extension to prettify the JS.", "attachment_id": null, "tags": [], "creation_time": "2011-08-27T20:56:51Z", "creator": "james@jmarshall.com", "raw_text": "Checking back in--\n\nHas the new debugging subsystem been completed yet?  If so, this bug can probably be closed, right?  And we can get to work on the Firebug extension to prettify the JS."}, {"time": "2018-06-29T04:58:20Z", "author": "bug-husbandry-bot@mozilla.bugs", "count": 19, "is_private": false, "id": 13436528, "raw_text": "https://bugzilla.mozilla.org/show_bug.cgi?id=1472046\n\nMove all DOM bugs that haven\u2019t been updated in more than 3 years and has no one currently assigned to P5.\n\nIf you have questions, please contact :mdaly.", "creator": "bug-husbandry-bot@mozilla.bugs", "tags": [], "creation_time": "2018-06-29T04:58:20Z", "attachment_id": null, "text": "https://bugzilla.mozilla.org/show_bug.cgi?id=1472046\n\nMove all DOM bugs that haven\u2019t been updated in more than 3 years and has no one currently assigned to P5.\n\nIf you have questions, please contact :mdaly.", "bug_id": 640631}]}}}