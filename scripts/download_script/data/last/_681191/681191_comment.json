{"comments": {}, "bugs": {"681191": {"comments": [{"count": 0, "bug_id": 681191, "creator": "glob@mozilla.com", "is_private": false, "time": "2011-08-23T05:38:49Z", "tags": [], "text": "when you create a version on a product, the product's cached list of versions is not invalidated.\n\n  $product->versions;  # prime cache\n  Bugzilla::Version->create({ product => $product, value => $name });\n  $count = scalar grep { $_->name eq $name } @{$self->_target->versions};\n\n$count is 0, when it should be 1.\n\nVersion->create should delete $product->{versions}.", "author": "glob@mozilla.com", "creation_time": "2011-08-23T05:38:49Z", "raw_text": "when you create a version on a product, the product's cached list of versions is not invalidated.\n\n  $product->versions;  # prime cache\n  Bugzilla::Version->create({ product => $product, value => $name });\n  $count = scalar grep { $_->name eq $name } @{$self->_target->versions};\n\n$count is 0, when it should be 1.\n\nVersion->create should delete $product->{versions}.", "attachment_id": null, "id": 5671276}, {"creator": "LpSolit@gmail.com", "is_private": false, "author": "LpSolit@gmail.com", "creation_time": "2011-08-23T11:18:48Z", "tags": [], "time": "2011-08-23T11:18:48Z", "text": "I don't think it should invalidate it. It should rather add the new version to the cache, if there is no sorting issue.", "attachment_id": null, "raw_text": "I don't think it should invalidate it. It should rather add the new version to the cache, if there is no sorting issue.", "id": 5671619, "count": 1, "bug_id": 681191}, {"attachment_id": null, "raw_text": "Ah, could you specify exactly what bug this is causing? Cache invalidation is something I try to never, ever have Bugzilla do. (Instead I just encourage people to re-create new objects.)", "id": 5679154, "creator": "mkanat@bugzilla.org", "is_private": false, "author": "mkanat@bugzilla.org", "creation_time": "2011-08-25T22:31:02Z", "tags": [], "time": "2011-08-25T22:31:02Z", "text": "Ah, could you specify exactly what bug this is causing? Cache invalidation is something I try to never, ever have Bugzilla do. (Instead I just encourage people to re-create new objects.)", "count": 2, "bug_id": 681191}, {"bug_id": 681191, "count": 3, "id": 5679166, "attachment_id": null, "raw_text": "(In reply to Max Kanat-Alexander from comment #2)\n> Ah, could you specify exactly what bug this is causing? Cache invalidation\n> is something I try to never, ever have Bugzilla do. (Instead I just\n> encourage people to re-create new objects.)\n\nWe do cache invalidation in many places, e.g. every time we touch groups. This is a good thing.", "creation_time": "2011-08-25T22:37:01Z", "author": "LpSolit@gmail.com", "text": "(In reply to Max Kanat-Alexander from comment #2)\n> Ah, could you specify exactly what bug this is causing? Cache invalidation\n> is something I try to never, ever have Bugzilla do. (Instead I just\n> encourage people to re-create new objects.)\n\nWe do cache invalidation in many places, e.g. every time we touch groups. This is a good thing.", "tags": [], "time": "2011-08-25T22:37:01Z", "is_private": false, "creator": "LpSolit@gmail.com"}, {"raw_text": "(In reply to Fr\u00e9d\u00e9ric Buclin from comment #3)\n> We do cache invalidation in many places, e.g. every time we touch groups.\n> This is a good thing.\n\n  We do very specific cache invalidation in very specific areas, and only when it actually has a specific purpose (that is, Bugzilla will break without it) and I try as hard as possible for this invalidation to not cross object boundaries. Once we start doing more invalidation, developers would depend on it, and it would become a hornet's nest of interdependencies without any significant advantage (in most places) over just creating a new object.\n\n  If we redesigned Bugzilla to have a totally new architecture that made this cache invalidation easy, then I would support it. :-)", "attachment_id": null, "id": 5679259, "count": 4, "creator": "mkanat@bugzilla.org", "is_private": false, "bug_id": 681191, "time": "2011-08-25T23:11:37Z", "tags": [], "text": "(In reply to Fr\u00e9d\u00e9ric Buclin from comment #3)\n> We do cache invalidation in many places, e.g. every time we touch groups.\n> This is a good thing.\n\n  We do very specific cache invalidation in very specific areas, and only when it actually has a specific purpose (that is, Bugzilla will break without it) and I try as hard as possible for this invalidation to not cross object boundaries. Once we start doing more invalidation, developers would depend on it, and it would become a hornet's nest of interdependencies without any significant advantage (in most places) over just creating a new object.\n\n  If we redesigned Bugzilla to have a totally new architecture that made this cache invalidation easy, then I would support it. :-)", "author": "mkanat@bugzilla.org", "creation_time": "2011-08-25T23:11:37Z"}, {"text": "(In reply to Max Kanat-Alexander from comment #2)\n> Ah, could you specify exactly what bug this is causing? Cache invalidation\n> is something I try to never, ever have Bugzilla do.\n\nfrom an extension... i'm mirroring versions between products and encountered a situation where a product object was telling me a version didn't exist, however the database threw an error because it did.\n\n> (Instead I just encourage people to re-create new objects.)\n\nthe problem with that approach is you have to know everywhere where an object may be cached internally by other objects... that's bugzilla's job, not the extension writers.", "tags": [], "time": "2011-08-26T04:36:53Z", "creation_time": "2011-08-26T04:36:53Z", "author": "glob@mozilla.com", "is_private": false, "creator": "glob@mozilla.com", "id": 5679839, "raw_text": "(In reply to Max Kanat-Alexander from comment #2)\n> Ah, could you specify exactly what bug this is causing? Cache invalidation\n> is something I try to never, ever have Bugzilla do.\n\nfrom an extension... i'm mirroring versions between products and encountered a situation where a product object was telling me a version didn't exist, however the database threw an error because it did.\n\n> (Instead I just encourage people to re-create new objects.)\n\nthe problem with that approach is you have to know everywhere where an object may be cached internally by other objects... that's bugzilla's job, not the extension writers.", "attachment_id": null, "bug_id": 681191, "count": 5}, {"count": 6, "bug_id": 681191, "attachment_id": null, "raw_text": "Okay. I'd accept a standard method called clear_caches that you can call on an object to have it clear all of its stored data that isn't directly loaded from its table.\n\nIdeally the object would update its internal state (that is, I agree with LpSolit) but I think that's beyond the level of complexity we want to support for now.", "id": 5686065, "creator": "mkanat@bugzilla.org", "is_private": false, "author": "mkanat@bugzilla.org", "creation_time": "2011-08-29T21:16:24Z", "time": "2011-08-29T21:16:24Z", "tags": [], "text": "Okay. I'd accept a standard method called clear_caches that you can call on an object to have it clear all of its stored data that isn't directly loaded from its table.\n\nIdeally the object would update its internal state (that is, I agree with LpSolit) but I think that's beyond the level of complexity we want to support for now."}, {"text": "Also, something needs to use that method inside of Bugzilla itself, or there needs to be some unit test, so that we know when it breaks.", "time": "2011-08-29T21:16:50Z", "bug_id": 681191, "tags": [], "creation_time": "2011-08-29T21:16:50Z", "author": "mkanat@bugzilla.org", "count": 7, "is_private": false, "creator": "mkanat@bugzilla.org", "id": 5686066, "raw_text": "Also, something needs to use that method inside of Bugzilla itself, or there needs to be some unit test, so that we know when it breaks.", "attachment_id": null}]}}}