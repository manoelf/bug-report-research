{"bugs": {"641398": {"comments": [{"time": "2011-03-13T23:24:38Z", "bug_id": 641398, "count": 0, "creator": "jingl1345@gmail.com", "author": "jingl1345@gmail.com", "is_private": false, "tags": [], "raw_text": "User-Agent:       Mozilla/5.0 (Windows NT 6.1; WOW64; rv:2.0) Gecko/20100101 Firefox/4.0\nBuild Identifier: firefox-4.0b12.source\n\nI found around 25 cases in firefox-4.0b12.source which append characters one by one inside a loop. Here I pick five of them and propose patches for them to group them into one append statement. With those patches, the performance should be improved because the number of append function call is significantly reduced.\n\naround ./firefox-4.0b12.source/layout/mathml/nsMathMLmpaddedFrame.cpp:199\n  // get the number\n  PRBool gotDot = PR_FALSE, gotPercent = PR_FALSE;\n+  PRUint32 appendOffset = i;\n  for (; i < stringLength; i++) {\n    PRUnichar c = aString[i];\n    if (gotDot && c == '.') {\n      // error - two dots encountered\n      aSign = NS_MATHML_SIGN_INVALID;\n      return PR_FALSE;\n    }\n\n    if (c == '.')\n      gotDot = PR_TRUE;\n    else if (!nsCRT::IsAsciiDigit(c)) {\n      break;\n    }\n-    number.Append(c);\n  }\n+  number.Append(&aString[appendOffset], i - appendOffset);\n\naround ./firefox-4.0b12.source/embedding/components/webbrowserpersist/src/nsWebBrowserPersist.cpp:2157\n        if (!nameFromURL.IsEmpty())\n        {\n            // Unescape the file name (GetFileName escapes it)\n            NS_UnescapeURL(nameFromURL);\n            PRUint32 nameLength = 0;\n            const char *p = nameFromURL.get();\n+            PRUint32 appendLength = 0;\n            for (;*p && *p != ';' && *p != '?' && *p != '#' && *p != '.'\n                 ;p++)\n            {\n                if (nsCRT::IsAsciiAlpha(*p) || nsCRT::IsAsciiDigit(*p)\n                    || *p == '.' || *p == '-' ||  *p == '_' || (*p == ' '))\n                {\n-                    fileName.Append(PRUnichar(*p));\n+                    appendLength++;\n                    if (++nameLength == kDefaultMaxFilenameLength)\n                    {\n                        // Note:\n                        // There is no point going any further since it will be\n                        // truncated in CalculateUniqueFilename anyway.\n                        // More importantly, certain implementations of\n                        // nsILocalFile (e.g. the Mac impl) might truncate\n                        // names in undesirable ways, such as truncating from\n                        // the middle, inserting ellipsis and so on.\n                        break;\n                    }\n                }\n            }\n+            fileName.Append((PRUnichar*)p, appendLength);\n        }\n\naround ./firefox-4.0b12.source/content/mathml/contentsrc/nsMathMLElement.cpp:278\n  // Gather up characters that make up the number\n  PRBool gotDot = PR_FALSE;\n+  PRUint32 appendOffset = i;\n  for ( ; i < stringLength; i++) {\n    c = str[i];\n    if (gotDot && c == '.')\n      return PR_FALSE;  // two dots encountered\n    else if (c == '.')\n      gotDot = PR_TRUE;\n    else if (!nsCRT::IsAsciiDigit(c)) {\n      str.Right(unit, stringLength - i);\n      // some authors leave blanks before the unit, but that shouldn't\n      // be allowed, so don't CompressWhitespace on 'unit'.\n      break;\n    }\n-    number.Append(c);\n  }\n+  number.Append(&aString[appendOffset], i - appendOffset);\n\naround ./firefox-4.0b12.source/content/base/src/nsGenericDOMDataNode.cpp:446\n    while (cp < end) {\n      PRUnichar ch = *cp++;\n+      PRUint32 appendLength = 0;\n+      const PRUnichar* cpStart = cp;\n+      while (ch != '&' && ch != '<' && ch != '>' && ch >= ' ' && ch < 127\n+          && cp < end) {\n+        ch = *cp++;\n+        appendLength++;\n+      }\n+      aBuf.Append(cpStart, appendLength);\n      if (ch == '&') {\n        aBuf.AppendLiteral(\"&amp;\");\n      } else if (ch == '<') {\n        aBuf.AppendLiteral(\"&lt;\");\n      } else if (ch == '>') {\n        aBuf.AppendLiteral(\"&gt;\");\n      } else if ((ch < ' ') || (ch >= 127)) {\n        char buf[10];\n        PR_snprintf(buf, sizeof(buf), \"\\\\u%04x\", ch);\n        AppendASCIItoUTF16(buf, aBuf);\n      } else {\n        aBuf.Append(ch);\n      }\n    }\n\naround ./firefox-4.0b12.source/content/base/src/nsGenericDOMDataNode.cpp:466\n    while (cp < end) {\n      PRUnichar ch = *cp++;;\n+      const PRUnichar* cpStart = cp;\n+      while (ch != '&' && ch != '<' && ch != '>' && ch >= ' ' && ch < 127\n+          && cp < end) {\n+        ch = *cp++;\n+        appendLength++;\n+      }\n+      aBuf.Append(cpStart, appendLength);\n      if (ch == '&') {\n        aBuf.AppendLiteral(\"&amp;\");\n      } else if (ch == '<') {\n        aBuf.AppendLiteral(\"&lt;\");\n      } else if (ch == '>') {\n        aBuf.AppendLiteral(\"&gt;\");\n      } else if ((ch < ' ') || (ch >= 127)) {\n        char buf[10];\n        PR_snprintf(buf, sizeof(buf), \"\\\\u%04x\", ch);\n        AppendASCIItoUTF16(buf, aBuf);\n      } else {\n        aBuf.Append(ch);\n      }\n    }\n\nThese patches are inspired by the patch for bug 311566, which also groups character append inside a loop.\n\nReproducible: Didn't try", "attachment_id": null, "id": 5342287, "text": "User-Agent:       Mozilla/5.0 (Windows NT 6.1; WOW64; rv:2.0) Gecko/20100101 Firefox/4.0\nBuild Identifier: firefox-4.0b12.source\n\nI found around 25 cases in firefox-4.0b12.source which append characters one by one inside a loop. Here I pick five of them and propose patches for them to group them into one append statement. With those patches, the performance should be improved because the number of append function call is significantly reduced.\n\naround ./firefox-4.0b12.source/layout/mathml/nsMathMLmpaddedFrame.cpp:199\n  // get the number\n  PRBool gotDot = PR_FALSE, gotPercent = PR_FALSE;\n+  PRUint32 appendOffset = i;\n  for (; i < stringLength; i++) {\n    PRUnichar c = aString[i];\n    if (gotDot && c == '.') {\n      // error - two dots encountered\n      aSign = NS_MATHML_SIGN_INVALID;\n      return PR_FALSE;\n    }\n\n    if (c == '.')\n      gotDot = PR_TRUE;\n    else if (!nsCRT::IsAsciiDigit(c)) {\n      break;\n    }\n-    number.Append(c);\n  }\n+  number.Append(&aString[appendOffset], i - appendOffset);\n\naround ./firefox-4.0b12.source/embedding/components/webbrowserpersist/src/nsWebBrowserPersist.cpp:2157\n        if (!nameFromURL.IsEmpty())\n        {\n            // Unescape the file name (GetFileName escapes it)\n            NS_UnescapeURL(nameFromURL);\n            PRUint32 nameLength = 0;\n            const char *p = nameFromURL.get();\n+            PRUint32 appendLength = 0;\n            for (;*p && *p != ';' && *p != '?' && *p != '#' && *p != '.'\n                 ;p++)\n            {\n                if (nsCRT::IsAsciiAlpha(*p) || nsCRT::IsAsciiDigit(*p)\n                    || *p == '.' || *p == '-' ||  *p == '_' || (*p == ' '))\n                {\n-                    fileName.Append(PRUnichar(*p));\n+                    appendLength++;\n                    if (++nameLength == kDefaultMaxFilenameLength)\n                    {\n                        // Note:\n                        // There is no point going any further since it will be\n                        // truncated in CalculateUniqueFilename anyway.\n                        // More importantly, certain implementations of\n                        // nsILocalFile (e.g. the Mac impl) might truncate\n                        // names in undesirable ways, such as truncating from\n                        // the middle, inserting ellipsis and so on.\n                        break;\n                    }\n                }\n            }\n+            fileName.Append((PRUnichar*)p, appendLength);\n        }\n\naround ./firefox-4.0b12.source/content/mathml/contentsrc/nsMathMLElement.cpp:278\n  // Gather up characters that make up the number\n  PRBool gotDot = PR_FALSE;\n+  PRUint32 appendOffset = i;\n  for ( ; i < stringLength; i++) {\n    c = str[i];\n    if (gotDot && c == '.')\n      return PR_FALSE;  // two dots encountered\n    else if (c == '.')\n      gotDot = PR_TRUE;\n    else if (!nsCRT::IsAsciiDigit(c)) {\n      str.Right(unit, stringLength - i);\n      // some authors leave blanks before the unit, but that shouldn't\n      // be allowed, so don't CompressWhitespace on 'unit'.\n      break;\n    }\n-    number.Append(c);\n  }\n+  number.Append(&aString[appendOffset], i - appendOffset);\n\naround ./firefox-4.0b12.source/content/base/src/nsGenericDOMDataNode.cpp:446\n    while (cp < end) {\n      PRUnichar ch = *cp++;\n+      PRUint32 appendLength = 0;\n+      const PRUnichar* cpStart = cp;\n+      while (ch != '&' && ch != '<' && ch != '>' && ch >= ' ' && ch < 127\n+          && cp < end) {\n+        ch = *cp++;\n+        appendLength++;\n+      }\n+      aBuf.Append(cpStart, appendLength);\n      if (ch == '&') {\n        aBuf.AppendLiteral(\"&amp;\");\n      } else if (ch == '<') {\n        aBuf.AppendLiteral(\"&lt;\");\n      } else if (ch == '>') {\n        aBuf.AppendLiteral(\"&gt;\");\n      } else if ((ch < ' ') || (ch >= 127)) {\n        char buf[10];\n        PR_snprintf(buf, sizeof(buf), \"\\\\u%04x\", ch);\n        AppendASCIItoUTF16(buf, aBuf);\n      } else {\n        aBuf.Append(ch);\n      }\n    }\n\naround ./firefox-4.0b12.source/content/base/src/nsGenericDOMDataNode.cpp:466\n    while (cp < end) {\n      PRUnichar ch = *cp++;;\n+      const PRUnichar* cpStart = cp;\n+      while (ch != '&' && ch != '<' && ch != '>' && ch >= ' ' && ch < 127\n+          && cp < end) {\n+        ch = *cp++;\n+        appendLength++;\n+      }\n+      aBuf.Append(cpStart, appendLength);\n      if (ch == '&') {\n        aBuf.AppendLiteral(\"&amp;\");\n      } else if (ch == '<') {\n        aBuf.AppendLiteral(\"&lt;\");\n      } else if (ch == '>') {\n        aBuf.AppendLiteral(\"&gt;\");\n      } else if ((ch < ' ') || (ch >= 127)) {\n        char buf[10];\n        PR_snprintf(buf, sizeof(buf), \"\\\\u%04x\", ch);\n        AppendASCIItoUTF16(buf, aBuf);\n      } else {\n        aBuf.Append(ch);\n      }\n    }\n\nThese patches are inspired by the patch for bug 311566, which also groups character append inside a loop.\n\nReproducible: Didn't try", "creation_time": "2011-03-13T23:24:38Z"}, {"creation_time": "2011-03-14T01:22:08Z", "id": 5342403, "attachment_id": null, "creator": "jdinbox@gmail.com", "text": "(Bah, khuey beat me to the move :)\n\nThanks for looking into this.\n\nYou may want to read through https://developer.mozilla.org/En/Developer_Guide/How_to_Submit_a_Patch, it's generally preferred to use bugzilla attachments in that format, and it also explains a bit of the process if this is your first time through it. :)", "author": "jdinbox@gmail.com", "raw_text": "(Bah, khuey beat me to the move :)\n\nThanks for looking into this.\n\nYou may want to read through https://developer.mozilla.org/En/Developer_Guide/How_to_Submit_a_Patch, it's generally preferred to use bugzilla attachments in that format, and it also explains a bit of the process if this is your first time through it. :)", "bug_id": 641398, "count": 1, "time": "2011-03-14T01:22:08Z", "is_private": false, "tags": []}, {"raw_text": "So should I attach some diff files?", "tags": [], "is_private": false, "creation_time": "2011-03-14T02:27:29Z", "text": "So should I attach some diff files?", "id": 5342449, "attachment_id": null, "bug_id": 641398, "count": 2, "time": "2011-03-14T02:27:29Z", "creator": "jingl1345@gmail.com", "author": "jingl1345@gmail.com"}, {"bug_id": 641398, "count": 3, "time": "2011-03-14T12:20:32Z", "creator": "bzbarsky@mit.edu", "author": "bzbarsky@mit.edu", "raw_text": "Fwiw, other than the nsGenericDOMDataNode code thise is not perf-sensitive, so not worth the extra compexity.\n\nFor nsGenericDOMDataNode, I'd like to see some before/after numbers.", "is_private": false, "tags": [], "creation_time": "2011-03-14T12:20:32Z", "id": 5342923, "attachment_id": null, "text": "Fwiw, other than the nsGenericDOMDataNode code thise is not perf-sensitive, so not worth the extra compexity.\n\nFor nsGenericDOMDataNode, I'd like to see some before/after numbers."}]}}, "comments": {}}