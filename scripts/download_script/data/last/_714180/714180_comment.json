{"comments": {}, "bugs": {"714180": {"comments": [{"author": "clochix@clochix.net", "creation_time": "2011-12-29T22:21:30Z", "time": "2011-12-29T22:21:30Z", "tags": [], "text": "Firebug has some nice shortcuts in Style Editor when editing stylesheets. You can easily increment and decrement values with the arrow keys, with misc steps (.1, 1 or 10). See http://getfirebug.com/wiki/index.php/Keyboard_and_Mouse_Shortcuts#CSS_Editing\n\nWould be great to have similar shortcuts in Style Editor.", "creator": "clochix@clochix.net", "is_private": false, "id": 5945844, "attachment_id": null, "raw_text": "Firebug has some nice shortcuts in Style Editor when editing stylesheets. You can easily increment and decrement values with the arrow keys, with misc steps (.1, 1 or 10). See http://getfirebug.com/wiki/index.php/Keyboard_and_Mouse_Shortcuts#CSS_Editing\n\nWould be great to have similar shortcuts in Style Editor.", "bug_id": 714180, "count": 0}, {"raw_text": "Isn't this already implemented in the add-on version of the Style Editor? See for instance this commit:\n\nhttps://github.com/neonux/StyleEditor/commit/5fa4ff93a1cdf131ab3e849847ca80b2fb8127fd", "attachment_id": null, "id": 5953807, "count": 1, "is_private": false, "creator": "pastith@gmail.com", "text": "Isn't this already implemented in the add-on version of the Style Editor? See for instance this commit:\n\nhttps://github.com/neonux/StyleEditor/commit/5fa4ff93a1cdf131ab3e849847ca80b2fb8127fd", "tags": [], "bug_id": 714180, "time": "2012-01-04T13:51:52Z", "creation_time": "2012-01-04T13:51:52Z", "author": "pastith@gmail.com"}, {"bug_id": 714180, "count": 2, "id": 5960362, "attachment_id": null, "raw_text": "This should work for the style Rule View as well.", "author": "paul@mozilla.com", "creation_time": "2012-01-06T14:46:02Z", "time": "2012-01-06T14:46:02Z", "tags": [], "text": "This should work for the style Rule View as well.", "creator": "paul@mozilla.com", "is_private": false}, {"bug_id": 714180, "count": 3, "id": 5975459, "attachment_id": null, "raw_text": "", "author": "cedricv@neonux.com", "creation_time": "2012-01-12T16:31:04Z", "time": "2012-01-12T16:31:04Z", "tags": [], "text": "*** Bug 687708 has been marked as a duplicate of this bug. ***", "creator": "cedricv@neonux.com", "is_private": false}, {"text": "Created attachment 588049\nKey bindings for CSS value adjustment and conversion\n\nAlt-Up|Down to increment/decrement the CSS value at the cursor position.\nWhen the caret is on a color value, the increment/decrement is done in the HSL colorspace for lighter/darker.\n\nAlt-PageUp|PageDown doubles or halves a CSS value.\n\nAlt-Left|Right to convert the CSS value at the cursor position in a compatible unit (eg. px <=> cm - or - white <=> #fff <=> rgb(255,255,255) <=> ...)\n\nAlt-Shift-Left|Right on a CSS color adjust its hue.", "time": "2012-01-12T16:47:40Z", "tags": [], "bug_id": 714180, "creation_time": "2012-01-12T16:47:40Z", "author": "cedricv@neonux.com", "count": 4, "is_private": false, "creator": "cedricv@neonux.com", "id": 5975543, "raw_text": "Alt-Up|Down to increment/decrement the CSS value at the cursor position.\nWhen the caret is on a color value, the increment/decrement is done in the HSL colorspace for lighter/darker.\n\nAlt-PageUp|PageDown doubles or halves a CSS value.\n\nAlt-Left|Right to convert the CSS value at the cursor position in a compatible unit (eg. px <=> cm - or - white <=> #fff <=> rgb(255,255,255) <=> ...)\n\nAlt-Shift-Left|Right on a CSS color adjust its hue.", "attachment_id": 588049}, {"id": 5975712, "raw_text": "(In reply to Cedric Vivier [cedricv] from comment #4)\n> Alt-Left|Right to convert the CSS value at the cursor position in a\n> compatible unit (eg. px <=> cm - or - white <=> #fff <=> rgb(255,255,255)\n> <=> ...)\n\nAlt-Left|Right on an enumeration, cycles between available values, eg. on a border-style, it cycles between 'solid', 'dotted', 'dashed' and so on...", "attachment_id": null, "time": "2012-01-12T17:41:56Z", "tags": [], "bug_id": 714180, "text": "(In reply to Cedric Vivier [cedricv] from comment #4)\n> Alt-Left|Right to convert the CSS value at the cursor position in a\n> compatible unit (eg. px <=> cm - or - white <=> #fff <=> rgb(255,255,255)\n> <=> ...)\n\nAlt-Left|Right on an enumeration, cycles between available values, eg. on a border-style, it cycles between 'solid', 'dotted', 'dashed' and so on...", "author": "cedricv@neonux.com", "creation_time": "2012-01-12T17:41:56Z", "count": 5, "creator": "cedricv@neonux.com", "is_private": false}, {"creator": "rcampbell@mozilla.com", "is_private": false, "count": 6, "author": "rcampbell@mozilla.com", "creation_time": "2012-01-16T21:46:00Z", "time": "2012-01-16T21:46:00Z", "bug_id": 714180, "tags": [], "text": "I will get to this review tomorrow. Double-plus-promise!", "attachment_id": null, "raw_text": "I will get to this review tomorrow. Double-plus-promise!", "id": 5983654}, {"count": 7, "creator": "rcampbell@mozilla.com", "is_private": false, "bug_id": 714180, "tags": [], "time": "2012-01-17T22:07:08Z", "text": "Comment on attachment 588049\nKey bindings for CSS value adjustment and conversion\n\n@@ -1110,16 +1111,101 @@ StyleEditor.prototype = {\n     bindings.push({\n       action: \"StyleEditor.openInfoForToken\",\n       code: Ci.nsIDOMKeyEvent.DOM_VK_F1,\n       callback: function getTokenInfo() {\n         this.openInfoForTokenAtCursor();\n       }.bind(this)\n     });\n \n+    bindings.push({\n+      action: \"StyleEditor.incrementValue\",\n+      code: Ci.nsIDOMKeyEvent.DOM_VK_UP,\n+      alt: true,\n+      callback: function incrementValue() {\n+        this.incrementValueAtCursorBy(1);\n+      }.bind(this)\n+    });\n\nThis won't apply cleanly. Looks like it's based on top of your help key patch. Please update the bug dependencies to reflect that.\n\n...\nthis.getTokenAtCursor(); not defined in this patch. Implemented in another bug (maybe same as above, I guess you'll need it for looking up help)?\n\nin StyleValue.jsm:\n\n+const CONVERSION_TABLE = {\n+  \"length\": {  // canonical unit is 'in'\n+    \"in\": 1,\n+    \"px\": 96,\n+    \"pt\": 72,\n+    \"pc\": 6,\n+    \"cm\": 2.54,\n+    \"mm\": 254\n+  },\n\nDo we really not have a platformy way to convert CSS units? I found https://developer.mozilla.org/en/CSS/length which appears to be pretty canonical reference and the units check out.\n\nMaybe include a link to your reference in a comment here? If the platform ever changes to device independence or adds more unit types, we'll have to update and add.\n\nAlso found nsColorNameList.h used in nsColors.cpp. It has some conversion functions but may not be strictly applicable. (Thanks to JohanC for mxr-ing that!)\n\n+  \"angle\": {   // canonical unit is 'turn'\n+    \"turn\": 1,\n+    \"deg\": 360,\n+    \"grad\": 400\n+  },\n\nno rads?\n\n+const COLOR_TABLE = {\n+  \"transparent\": [0, 0, 0, 0.0],\n+  \"black\": [0, 0, 0, 1.0],\n+  \"silver\": [192, 192, 192, 1.0],\n...\n\nthese'll need a reference comment as well (for the others too). Where'd you get your list?\n\nYou should probably provide references for all of these tables in comments.\n\nI'm a little concerned about how we're planning to keep all of these up-to-date.\n\n+const ENUMERATION_TABLE = {\n+  \"border-style\": [\"dashed\", \"dotted\", \"double\", \"groove\", \"inset\", \"outset\",\n+                   \"ridge\", \"solid\"],\n\nand sources for these as well. Looks like border-style doesn't include \"hidden\" and \"none\".\n\nWill these enumerations work for border-x-style where x is a position? I haven't gotten to the chunk that may or may not do translations for different types of property.\n\n+  \"font-weight\": [\"bold\", \"bolder\", \"lighter\"],\n\nwhat about numerical font-weights? How will they be converted?\n\n+  \"text-decoration\": [\"underline\", \"overline\", \"line-through\"],\n\nwhat? no \"blink\"? :)\n\nin StyleValue():\n\n+  if (text[0] == \"#\") {\n+    let h = text.match(/^#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])$/) ||\n+            text.match(/^#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})$/);\n\nmaybe rename that variable to \"hex\" to make it a little clearer that you're matching hex values.\n\n+    let rgba = text.match(/^rgb\\(([0-9]+),([0-9]+),([0-9]+)\\)$/) ||\n+               text.match(/^rgba\\(([0-9]+),([0-9]+),([0-9]+),([0-9.]+)\\)$/);\n\nI'm pretty sure you could minimize this into a one-liner, but it's probably not worth it.\n\nwill this handle whitespace after the ',' or between values? Doesn't look like it here, but you may be sanitizing the token on entry. The trim() at the beginning of the function only handles leading and trailing whitespace, not internal.\n\nalso, looking at the second line, it looks like you could match a value like, ..001.22.....2... which, obviously shouldn't be in there, but I'd be curious to see what would happen.\n\nsame for hsla's regex.\n\nI'm not sure any of that matters in the context of this review, but it might be worth checking for odd values in aToken. Or weird values in the CSS Editor itself to see how this all copes with them.\n\nr- because we're not being polite anymore. ;)\n\nMake sure to update the dependencies.", "author": "rcampbell@mozilla.com", "creation_time": "2012-01-17T22:07:08Z", "raw_text": "@@ -1110,16 +1111,101 @@ StyleEditor.prototype = {\n     bindings.push({\n       action: \"StyleEditor.openInfoForToken\",\n       code: Ci.nsIDOMKeyEvent.DOM_VK_F1,\n       callback: function getTokenInfo() {\n         this.openInfoForTokenAtCursor();\n       }.bind(this)\n     });\n \n+    bindings.push({\n+      action: \"StyleEditor.incrementValue\",\n+      code: Ci.nsIDOMKeyEvent.DOM_VK_UP,\n+      alt: true,\n+      callback: function incrementValue() {\n+        this.incrementValueAtCursorBy(1);\n+      }.bind(this)\n+    });\n\nThis won't apply cleanly. Looks like it's based on top of your help key patch. Please update the bug dependencies to reflect that.\n\n...\nthis.getTokenAtCursor(); not defined in this patch. Implemented in another bug (maybe same as above, I guess you'll need it for looking up help)?\n\nin StyleValue.jsm:\n\n+const CONVERSION_TABLE = {\n+  \"length\": {  // canonical unit is 'in'\n+    \"in\": 1,\n+    \"px\": 96,\n+    \"pt\": 72,\n+    \"pc\": 6,\n+    \"cm\": 2.54,\n+    \"mm\": 254\n+  },\n\nDo we really not have a platformy way to convert CSS units? I found https://developer.mozilla.org/en/CSS/length which appears to be pretty canonical reference and the units check out.\n\nMaybe include a link to your reference in a comment here? If the platform ever changes to device independence or adds more unit types, we'll have to update and add.\n\nAlso found nsColorNameList.h used in nsColors.cpp. It has some conversion functions but may not be strictly applicable. (Thanks to JohanC for mxr-ing that!)\n\n+  \"angle\": {   // canonical unit is 'turn'\n+    \"turn\": 1,\n+    \"deg\": 360,\n+    \"grad\": 400\n+  },\n\nno rads?\n\n+const COLOR_TABLE = {\n+  \"transparent\": [0, 0, 0, 0.0],\n+  \"black\": [0, 0, 0, 1.0],\n+  \"silver\": [192, 192, 192, 1.0],\n...\n\nthese'll need a reference comment as well (for the others too). Where'd you get your list?\n\nYou should probably provide references for all of these tables in comments.\n\nI'm a little concerned about how we're planning to keep all of these up-to-date.\n\n+const ENUMERATION_TABLE = {\n+  \"border-style\": [\"dashed\", \"dotted\", \"double\", \"groove\", \"inset\", \"outset\",\n+                   \"ridge\", \"solid\"],\n\nand sources for these as well. Looks like border-style doesn't include \"hidden\" and \"none\".\n\nWill these enumerations work for border-x-style where x is a position? I haven't gotten to the chunk that may or may not do translations for different types of property.\n\n+  \"font-weight\": [\"bold\", \"bolder\", \"lighter\"],\n\nwhat about numerical font-weights? How will they be converted?\n\n+  \"text-decoration\": [\"underline\", \"overline\", \"line-through\"],\n\nwhat? no \"blink\"? :)\n\nin StyleValue():\n\n+  if (text[0] == \"#\") {\n+    let h = text.match(/^#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])$/) ||\n+            text.match(/^#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})$/);\n\nmaybe rename that variable to \"hex\" to make it a little clearer that you're matching hex values.\n\n+    let rgba = text.match(/^rgb\\(([0-9]+),([0-9]+),([0-9]+)\\)$/) ||\n+               text.match(/^rgba\\(([0-9]+),([0-9]+),([0-9]+),([0-9.]+)\\)$/);\n\nI'm pretty sure you could minimize this into a one-liner, but it's probably not worth it.\n\nwill this handle whitespace after the ',' or between values? Doesn't look like it here, but you may be sanitizing the token on entry. The trim() at the beginning of the function only handles leading and trailing whitespace, not internal.\n\nalso, looking at the second line, it looks like you could match a value like, ..001.22.....2... which, obviously shouldn't be in there, but I'd be curious to see what would happen.\n\nsame for hsla's regex.\n\nI'm not sure any of that matters in the context of this review, but it might be worth checking for odd values in aToken. Or weird values in the CSS Editor itself to see how this all copes with them.\n\nr- because we're not being polite anymore. ;)\n\nMake sure to update the dependencies.", "attachment_id": 588049, "id": 5986831}, {"creation_time": "2017-01-31T10:58:02Z", "author": "sebastianzartner@gmail.com", "text": "Cedric wasn't active on BMO for the last few years, so I assume it's save to remove him as assignee.\n\nSebastian", "tags": [], "time": "2017-01-31T10:58:02Z", "is_private": false, "creator": "sebastianzartner@gmail.com", "id": 12024025, "attachment_id": null, "raw_text": "Cedric wasn't active on BMO for the last few years, so I assume it's save to remove him as assignee.\n\nSebastian", "bug_id": 714180, "count": 8}]}}}