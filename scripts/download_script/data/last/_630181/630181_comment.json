{"bugs": {"630181": {"comments": [{"is_private": false, "time": "2011-01-31T14:26:26Z", "id": 5239693, "text": "In order to have a cleaner text rendering it could be a nice idea to implement the Knuth and Plass line breaking algorithm.\n\nBram Stein has made a first attempt with Javascript : http://www.bramstein.com/projects/typeset/\n\nIt's amazing to see how it's code is clean and simple.\n\nUnfortunately, I do not have the skills to port it to Gecko but it does not seem impossible to do it.", "creator": "jeremie.patonnier@gmail.com", "creation_time": "2011-01-31T14:26:26Z", "raw_text": "In order to have a cleaner text rendering it could be a nice idea to implement the Knuth and Plass line breaking algorithm.\n\nBram Stein has made a first attempt with Javascript : http://www.bramstein.com/projects/typeset/\n\nIt's amazing to see how it's code is clean and simple.\n\nUnfortunately, I do not have the skills to port it to Gecko but it does not seem impossible to do it.", "count": 0, "author": "jeremie.patonnier@gmail.com", "tags": [], "bug_id": 630181, "attachment_id": null}, {"bug_id": 630181, "attachment_id": null, "author": "bzbarsky@mit.edu", "tags": [], "count": 1, "raw_text": "Quoting from my comments at http://news.ycombinator.com/item?id=1974963 :\n\n  This algorithm, unless I'm missing something, doesn't handle situations in\n  which the available widths are different for different lines in the\n  paragraph, and in particular in which the available width for a line depends\n  on the precise break positions and vertical alignment results of all the\n  earlier lines in the paragraph. Handling this is required to correctly\n  handle CSS floats.\n\nNot to mention that this algorithm is quadratic in paragraph length, which is a huge issue for web browsers, which sometimes have to deal with giant (think tens of megabytes) paragraphs.\n\nOf course if you control the content and know that it has no floats and is reasonable length you can use this algorithm (which is why the JS implementation actually makes some sense).  But we don't control the content.\n\nI'm also pretty sure this has been extensively discussed before, since all the people working on the layout engine for the last 10 years are familiar with TeX, and the limitations of this algorithm in the context of the web.  I'm not sure whether there's a bug that discussion is hanging off of.", "creation_time": "2011-01-31T14:47:32Z", "creator": "bzbarsky@mit.edu", "time": "2011-01-31T14:47:32Z", "text": "Quoting from my comments at http://news.ycombinator.com/item?id=1974963 :\n\n  This algorithm, unless I'm missing something, doesn't handle situations in\n  which the available widths are different for different lines in the\n  paragraph, and in particular in which the available width for a line depends\n  on the precise break positions and vertical alignment results of all the\n  earlier lines in the paragraph. Handling this is required to correctly\n  handle CSS floats.\n\nNot to mention that this algorithm is quadratic in paragraph length, which is a huge issue for web browsers, which sometimes have to deal with giant (think tens of megabytes) paragraphs.\n\nOf course if you control the content and know that it has no floats and is reasonable length you can use this algorithm (which is why the JS implementation actually makes some sense).  But we don't control the content.\n\nI'm also pretty sure this has been extensively discussed before, since all the people working on the layout engine for the last 10 years are familiar with TeX, and the limitations of this algorithm in the context of the web.  I'm not sure whether there's a bug that discussion is hanging off of.", "id": 5239732, "is_private": false}, {"id": 5240219, "text": "(In reply to comment #1)\n> Quoting from my comments at http://news.ycombinator.com/item?id=1974963 :\n> \n>   This algorithm, unless I'm missing something, doesn't handle situations in\n>   which the available widths are different for different lines in the\n>   paragraph, and in particular in which the available width for a line depends\n>   on the precise break positions and vertical alignment results of all the\n>   earlier lines in the paragraph. Handling this is required to correctly\n>   handle CSS floats.\n\nI'm not sure to fully understand what does that mean. In its implementation attempt, Bram show off some cases where lines' width are different. But I'm not sure if it's related to the algorithm or to it's own implementation.\n\n> Not to mention that this algorithm is quadratic in paragraph length, which is a\n> huge issue for web browsers, which sometimes have to deal with giant (think\n> tens of megabytes) paragraphs.\n\nOk, I'm not good with algorithm (I have a design background rather than a computer one) but I can understand that. What if the algorithm is applied on text chunks rather than on the whole text? Does it make easier the control of performance and memory usage? Well maybe this implies a brand new algorithm :-/\n\n>  Of course if you control the content and know that it has no floats and is\n> reasonable length you can use this algorithm (which is why the JS\n> implementation actually makes some sense).  But we don't control the content.\n\nIndeed and authors don't control it as well as they should.\n\n> I'm also pretty sure this has been extensively discussed before, since all the\n> people working on the layout engine for the last 10 years are familiar with\n> TeX, and the limitations of this algorithm in the context of the web.  I'm not\n> sure whether there's a bug that discussion is hanging off of.\n\nI've performed a search before posting that bug and I was not able to find anything on bugzilla. Now it's done ;) However, I will be interested if someone as further information.", "time": "2011-01-31T18:03:48Z", "is_private": false, "creation_time": "2011-01-31T18:03:48Z", "creator": "jeremie.patonnier@gmail.com", "count": 2, "raw_text": "(In reply to comment #1)\n> Quoting from my comments at http://news.ycombinator.com/item?id=1974963 :\n> \n>   This algorithm, unless I'm missing something, doesn't handle situations in\n>   which the available widths are different for different lines in the\n>   paragraph, and in particular in which the available width for a line depends\n>   on the precise break positions and vertical alignment results of all the\n>   earlier lines in the paragraph. Handling this is required to correctly\n>   handle CSS floats.\n\nI'm not sure to fully understand what does that mean. In its implementation attempt, Bram show off some cases where lines' width are different. But I'm not sure if it's related to the algorithm or to it's own implementation.\n\n> Not to mention that this algorithm is quadratic in paragraph length, which is a\n> huge issue for web browsers, which sometimes have to deal with giant (think\n> tens of megabytes) paragraphs.\n\nOk, I'm not good with algorithm (I have a design background rather than a computer one) but I can understand that. What if the algorithm is applied on text chunks rather than on the whole text? Does it make easier the control of performance and memory usage? Well maybe this implies a brand new algorithm :-/\n\n>  Of course if you control the content and know that it has no floats and is\n> reasonable length you can use this algorithm (which is why the JS\n> implementation actually makes some sense).  But we don't control the content.\n\nIndeed and authors don't control it as well as they should.\n\n> I'm also pretty sure this has been extensively discussed before, since all the\n> people working on the layout engine for the last 10 years are familiar with\n> TeX, and the limitations of this algorithm in the context of the web.  I'm not\n> sure whether there's a bug that discussion is hanging off of.\n\nI've performed a search before posting that bug and I was not able to find anything on bugzilla. Now it's done ;) However, I will be interested if someone as further information.", "attachment_id": null, "bug_id": 630181, "tags": [], "author": "jeremie.patonnier@gmail.com"}, {"count": 3, "raw_text": "> Bram show off some cases where lines' width are different.\n\nAh, indeed.   So I must have been missing something.  Good.\n\n> What if the algorithm is applied on text chunks rather than on the whole text?\n\nThen you get weirdness at chunk boundaries.  But yes, that would prevent it from getting to out of hand, at least.\n\nAnother interesting question is how or whether this algorithm would handle things like CSS3 Text (which has things like \"don't allow breaks here unless there are no breaks elsewhere, in which case you can break here\" currently proposed).", "attachment_id": null, "bug_id": 630181, "tags": [], "author": "bzbarsky@mit.edu", "id": 5240274, "text": "> Bram show off some cases where lines' width are different.\n\nAh, indeed.   So I must have been missing something.  Good.\n\n> What if the algorithm is applied on text chunks rather than on the whole text?\n\nThen you get weirdness at chunk boundaries.  But yes, that would prevent it from getting to out of hand, at least.\n\nAnother interesting question is how or whether this algorithm would handle things like CSS3 Text (which has things like \"don't allow breaks here unless there are no breaks elsewhere, in which case you can break here\" currently proposed).", "time": "2011-01-31T18:23:19Z", "is_private": false, "creation_time": "2011-01-31T18:23:19Z", "creator": "bzbarsky@mit.edu"}, {"author": "jfkthame@gmail.com", "tags": [], "bug_id": 630181, "attachment_id": null, "raw_text": "(In reply to comment #3)\n> > Bram show off some cases where lines' width are different.\n> \n> Ah, indeed.   So I must have been missing something.  Good.\n\nLines of different widths are not a problem in themselves. They become a problem when those widths are not known in advance, as when (for example) a float takes a \"chunk\" out of the side of the paragraph for text to wrap around it. The length required for any given line may depend on its exact vertical position; but that in turn might depend on which breaks end up getting chosen on earlier lines - and that choice may not be determined until _later_ in the paragraph, if there are several \"active\" possibilities under consideration.\n\nThis can be difficult even with a fixed-position float, if line heights vary (due to font changes, inline images, or all sorts of other factors); it gets worse if the float itself is anchored to a position within the text of the paragraph, and so the position of the float is not known in advance of line-breaking the text that contains it.\n\n(This is really just expanding on your original comment about:\n> and in particular in which the available width for a line depends\n>  on the precise break positions and vertical alignment results of all the\n>  earlier lines in the paragraph.)\n\nI do think there might be potential to make use of a Knuth/Plass-style line-breaking algorithm, but the complexities of CSS and HTML layout make it very hard to do in a completely general way. A possibility might be to use an algorithm like this for \"plain\" areas of text, falling back to a simpler line-by-line approach when factors such as encroaching floats come into play.", "count": 4, "creator": "jfkthame@gmail.com", "creation_time": "2011-01-31T18:45:29Z", "is_private": false, "time": "2011-01-31T18:45:29Z", "text": "(In reply to comment #3)\n> > Bram show off some cases where lines' width are different.\n> \n> Ah, indeed.   So I must have been missing something.  Good.\n\nLines of different widths are not a problem in themselves. They become a problem when those widths are not known in advance, as when (for example) a float takes a \"chunk\" out of the side of the paragraph for text to wrap around it. The length required for any given line may depend on its exact vertical position; but that in turn might depend on which breaks end up getting chosen on earlier lines - and that choice may not be determined until _later_ in the paragraph, if there are several \"active\" possibilities under consideration.\n\nThis can be difficult even with a fixed-position float, if line heights vary (due to font changes, inline images, or all sorts of other factors); it gets worse if the float itself is anchored to a position within the text of the paragraph, and so the position of the float is not known in advance of line-breaking the text that contains it.\n\n(This is really just expanding on your original comment about:\n> and in particular in which the available width for a line depends\n>  on the precise break positions and vertical alignment results of all the\n>  earlier lines in the paragraph.)\n\nI do think there might be potential to make use of a Knuth/Plass-style line-breaking algorithm, but the complexities of CSS and HTML layout make it very hard to do in a completely general way. A possibility might be to use an algorithm like this for \"plain\" areas of text, falling back to a simpler line-by-line approach when factors such as encroaching floats come into play.", "id": 5240357}, {"count": 5, "raw_text": "(In reply to comment #3) \n> > What if the algorithm is applied on text chunks rather than on the whole text?\n> \n> Then you get weirdness at chunk boundaries.  But yes, that would prevent it\n> from getting to out of hand, at least.\n\nThat what I was expected but such a weirdness is not necessarily a problem. In a lot of case, a single paragraph does not contain many text and for all those cases, this algorithm could improve the quality of the rendering. But I agree that some edge cases with a bunch of text can hit the browser or the system capacity. IMO if the size limit for the chunk is wisely chosen then it's possible to cover almost 99% of the common use cases without side effect on performance. But once again, I'm not very good at low level computer stuffs and it's maybe a to much naive approach.\n\n> Another interesting question is how or whether this algorithm would handle\n> things like CSS3 Text (which has things like \"don't allow breaks here unless\n> there are no breaks elsewhere, in which case you can break here\" currently\n> proposed).\n\nThis is definitely an issue but at that time I haven't dig inside the CSS3 Text module yet.\nBut with such requirement in the spec, it might be wise that the CSS WG decide to provide a full algorithm to deal with the text line breaking\n\n(In reply to comment #4)\n> (In reply to comment #3)\n> > > Bram show off some cases where lines' width are different.\n> > \n> > Ah, indeed.   So I must have been missing something.  Good.\n> \n> Lines of different widths are not a problem in themselves. They become a\n> problem when those widths are not known in advance, as when (for example) a\n> float takes a \"chunk\" out of the side of the paragraph for text to wrap around\n> it. The length required for any given line may depend on its exact vertical\n> position; but that in turn might depend on which breaks end up getting chosen\n> on earlier lines - and that choice may not be determined until _later_ in the\n> paragraph, if there are several \"active\" possibilities under consideration.\n> \n> This can be difficult even with a fixed-position float, if line heights vary\n> (due to font changes, inline images, or all sorts of other factors); it gets\n> worse if the float itself is anchored to a position within the text of the\n> paragraph, and so the position of the float is not known in advance of\n> line-breaking the text that contains it.\n\nOk, if I understand well, the problem is that even if it's possible to know early what is the size of a floating element, it's almost impossible to predict it's final position and therefor impossible to anticipate the size of each line.\n\n> I do think there might be potential to make use of a Knuth/Plass-style\n> line-breaking algorithm, but the complexities of CSS and HTML layout make it\n> very hard to do in a completely general way. A possibility might be to use an\n> algorithm like this for \"plain\" areas of text, falling back to a simpler\n> line-by-line approach when factors such as encroaching floats come into play.\n\nIf I understand you, using the Knuth/Plass algorithm as is, is not possible for complex HTML layout. This make sens because at some point, HTML layout are \"alive\" and can change a lot due to user, script or whatever interaction. And of course the original Knuth/Plass algorithm is made for some static text which is render once in a while with some minimal precaution to take about the necessary resources needed to perform the rendering. To many people (and I'm part of them) do not really understand such requirement and do not understand that a browser can not be compare to software such as InDesign or simply MSWord or OpenOffice... but frankly that what they expect. \n\nA that point I have to said that the original purpose of this feature request is less implementing this specific algorithm than improving the text rendering. I regularly see a lot of complain by author about the way line breaking is done by the browsers (as an example, see : http://astheria.com/design/choosing-type-alignments-fortheweb). The Knuth/Plass algorithm is one opportunity to improve that but not the only one. This is especially true when authors wish to use the CSS property text-align:justify which need a lot of carefulness.\n\nYour idea to use that algorithm when its possible is really appealing but I'm not sure it's reasonable to have some kind of dual algorithm for such a few things (once again I'm not necessarily aware of what's really happen under the hood). Maybe there is some other quick wins to imagine (such as dealing with kerning in addition to word spacing... even with text-align:left or right).\n\nThanks anyway for those enlightening answers :)", "bug_id": 630181, "attachment_id": null, "author": "jeremie.patonnier@gmail.com", "tags": [], "time": "2011-01-31T22:11:49Z", "text": "(In reply to comment #3) \n> > What if the algorithm is applied on text chunks rather than on the whole text?\n> \n> Then you get weirdness at chunk boundaries.  But yes, that would prevent it\n> from getting to out of hand, at least.\n\nThat what I was expected but such a weirdness is not necessarily a problem. In a lot of case, a single paragraph does not contain many text and for all those cases, this algorithm could improve the quality of the rendering. But I agree that some edge cases with a bunch of text can hit the browser or the system capacity. IMO if the size limit for the chunk is wisely chosen then it's possible to cover almost 99% of the common use cases without side effect on performance. But once again, I'm not very good at low level computer stuffs and it's maybe a to much naive approach.\n\n> Another interesting question is how or whether this algorithm would handle\n> things like CSS3 Text (which has things like \"don't allow breaks here unless\n> there are no breaks elsewhere, in which case you can break here\" currently\n> proposed).\n\nThis is definitely an issue but at that time I haven't dig inside the CSS3 Text module yet.\nBut with such requirement in the spec, it might be wise that the CSS WG decide to provide a full algorithm to deal with the text line breaking\n\n(In reply to comment #4)\n> (In reply to comment #3)\n> > > Bram show off some cases where lines' width are different.\n> > \n> > Ah, indeed.   So I must have been missing something.  Good.\n> \n> Lines of different widths are not a problem in themselves. They become a\n> problem when those widths are not known in advance, as when (for example) a\n> float takes a \"chunk\" out of the side of the paragraph for text to wrap around\n> it. The length required for any given line may depend on its exact vertical\n> position; but that in turn might depend on which breaks end up getting chosen\n> on earlier lines - and that choice may not be determined until _later_ in the\n> paragraph, if there are several \"active\" possibilities under consideration.\n> \n> This can be difficult even with a fixed-position float, if line heights vary\n> (due to font changes, inline images, or all sorts of other factors); it gets\n> worse if the float itself is anchored to a position within the text of the\n> paragraph, and so the position of the float is not known in advance of\n> line-breaking the text that contains it.\n\nOk, if I understand well, the problem is that even if it's possible to know early what is the size of a floating element, it's almost impossible to predict it's final position and therefor impossible to anticipate the size of each line.\n\n> I do think there might be potential to make use of a Knuth/Plass-style\n> line-breaking algorithm, but the complexities of CSS and HTML layout make it\n> very hard to do in a completely general way. A possibility might be to use an\n> algorithm like this for \"plain\" areas of text, falling back to a simpler\n> line-by-line approach when factors such as encroaching floats come into play.\n\nIf I understand you, using the Knuth/Plass algorithm as is, is not possible for complex HTML layout. This make sens because at some point, HTML layout are \"alive\" and can change a lot due to user, script or whatever interaction. And of course the original Knuth/Plass algorithm is made for some static text which is render once in a while with some minimal precaution to take about the necessary resources needed to perform the rendering. To many people (and I'm part of them) do not really understand such requirement and do not understand that a browser can not be compare to software such as InDesign or simply MSWord or OpenOffice... but frankly that what they expect. \n\nA that point I have to said that the original purpose of this feature request is less implementing this specific algorithm than improving the text rendering. I regularly see a lot of complain by author about the way line breaking is done by the browsers (as an example, see : http://astheria.com/design/choosing-type-alignments-fortheweb). The Knuth/Plass algorithm is one opportunity to improve that but not the only one. This is especially true when authors wish to use the CSS property text-align:justify which need a lot of carefulness.\n\nYour idea to use that algorithm when its possible is really appealing but I'm not sure it's reasonable to have some kind of dual algorithm for such a few things (once again I'm not necessarily aware of what's really happen under the hood). Maybe there is some other quick wins to imagine (such as dealing with kerning in addition to word spacing... even with text-align:left or right).\n\nThanks anyway for those enlightening answers :)", "id": 5241063, "is_private": false, "creation_time": "2011-01-31T22:11:49Z", "creator": "jeremie.patonnier@gmail.com"}, {"count": 6, "raw_text": "There appears to be a relevant patent from Adobe: http://www.freepatentsonline.com/6510441.html\nTo quote from the mailing list discussion where I found it: \"Adobe's algorithm differs from the Knuth-Plass algorithm in that the\nformer looks at the whole paragraph while the latter merely looks at\nportions of the paragraph (these \"portions\" being defined in the patent\ntext). Adobe's argument in their patent is that an algorithm that looks\nat the whole paragraph requires much more memory space and processing\ntime.\"", "attachment_id": null, "bug_id": 630181, "tags": [], "author": "mathnerd314...gph+mozilla@gmail.com", "id": 5714997, "text": "There appears to be a relevant patent from Adobe: http://www.freepatentsonline.com/6510441.html\nTo quote from the mailing list discussion where I found it: \"Adobe's algorithm differs from the Knuth-Plass algorithm in that the\nformer looks at the whole paragraph while the latter merely looks at\nportions of the paragraph (these \"portions\" being defined in the patent\ntext). Adobe's argument in their patent is that an algorithm that looks\nat the whole paragraph requires much more memory space and processing\ntime.\"", "time": "2011-09-13T04:03:44Z", "is_private": false, "creation_time": "2011-09-13T04:03:44Z", "creator": "mathnerd314...gph+mozilla@gmail.com"}, {"is_private": false, "time": "2011-09-13T07:13:25Z", "text": "(In reply to Mathnerd314 from comment #6)\n> There appears to be a relevant patent from Adobe:\n> http://www.freepatentsonline.com/6510441.html\n> To quote from the mailing list discussion where I found it: \"Adobe's\n> algorithm differs from the Knuth-Plass algorithm in that the\n> former looks at the whole paragraph while the latter merely looks at\n> portions of the paragraph\n\nI suspect the author has mixed up \"former\" and \"latter\" here, otherwise this seems to make no sense.\n\n> (these \"portions\" being defined in the patent\n> text). Adobe's argument in their patent is that an algorithm that looks\n> at the whole paragraph requires much more memory space and processing\n> time.\"\n\nWhile I haven't examined the claims in Adobe's patent (and in any case wouldn't be qualified to comment on their merits), I doubt it'd be an obstacle to anything we might try to implement in this area, short of an attempt, perhaps, to directly \"clone\" their behavior by treating the details of their patent as a design spec. I don't see how they could claim any rights over what's in TeX, or the ideas and algorithms described in the classic Knuth & Plass paper (1981) - which, btw, even refers to a suggestion in a paper by Cooper (1967) that long paragraphs could be handled in overlapping portions to avoid excessive memory requirements.\n\nPrior art, I believe it's called. (But I am not a patent lawyer, so you should probably assume I have no idea what I'm talking about.)", "id": 5715112, "creation_time": "2011-09-13T07:13:25Z", "creator": "jfkthame@gmail.com", "count": 7, "raw_text": "(In reply to Mathnerd314 from comment #6)\n> There appears to be a relevant patent from Adobe:\n> http://www.freepatentsonline.com/6510441.html\n> To quote from the mailing list discussion where I found it: \"Adobe's\n> algorithm differs from the Knuth-Plass algorithm in that the\n> former looks at the whole paragraph while the latter merely looks at\n> portions of the paragraph\n\nI suspect the author has mixed up \"former\" and \"latter\" here, otherwise this seems to make no sense.\n\n> (these \"portions\" being defined in the patent\n> text). Adobe's argument in their patent is that an algorithm that looks\n> at the whole paragraph requires much more memory space and processing\n> time.\"\n\nWhile I haven't examined the claims in Adobe's patent (and in any case wouldn't be qualified to comment on their merits), I doubt it'd be an obstacle to anything we might try to implement in this area, short of an attempt, perhaps, to directly \"clone\" their behavior by treating the details of their patent as a design spec. I don't see how they could claim any rights over what's in TeX, or the ideas and algorithms described in the classic Knuth & Plass paper (1981) - which, btw, even refers to a suggestion in a paper by Cooper (1967) that long paragraphs could be handled in overlapping portions to avoid excessive memory requirements.\n\nPrior art, I believe it's called. (But I am not a patent lawyer, so you should probably assume I have no idea what I'm talking about.)", "bug_id": 630181, "attachment_id": null, "author": "jfkthame@gmail.com", "tags": []}, {"text": "The algorithm can be implemented to run in O(n) time[2,3]. In fact, even the dynamic programming solution will run in O(min(w * n, n^2)) time[5], where w is the maximum number of words on a line. Since w is fixed, the algorithm is linear for large n.\n\nFor a true linear time algorithm you have to make some assumptions on the cost function (namely, concavity). This is usually not a problem, but I think that it may be incompatible with varying line widths. There is yet another way to implement the algorithm which runs in O(n log n) time[1], but apparently with smaller constants than the O(n) algorithm[2].\n\nNow, while I don't know the complexities of the CSS float model, I would really appreciate to have some way to render aesthetically pleasing text in a browser. It does not have to support all the bells and whistles of normal HTML text - even a simple text field would be nice.\n\nParagraph formatting is pretty much a solved problem in academia and I'm posting this to point you or potential implementors at the relevant literature. However, in my opinion, implementing the dynamic programming algorithm with max line cutoff is both easy and fast enough.\n\nReferences:\n\nThe first line of research is into the \"least weight subsequence problem\", of which Knuth-Plass paragraph formation is a special case. All papers assume that the cost function is concave.\n\n[1] D.S. Hirschberg and L.L. Larmore, The Least Weight Subsequence Problem\n(This contains both an O(n log n) time algorithm and an O(n) algorithm with additional assumptions.)\n\n[2] Robert Wilber. 1988. The concave least-weight subsequence problem revisited\n(The first O(n) algorithm which works with any concave cost function.)\n\n[3] Z. Galil and K. Park. 1990. A linear-time algorithm for concave one-dimensional dynamic programming\n(A simplified O(n) algorithm.)\n\nBoth [2] and [3] depend on an algorithm for \"monotone matrix search\", which is described in:\n\n[4] A Aggarwal, M Klawe, S Moran, P Shor, and R Wilber. 1986. Geometric applications of a matrix searching algorithm\n\nFinally, for the cost function used by TeX you will have to consult the relevant chapter in Knuth's \"Digital Typography\" book. Additionally, there is a paper/literate program which implements an O(n) time algorithm:\n\n[5] Oege de Moor and Jeremy Gibbons. 1997. Bridging the Algorithm Gap: a Linear-Time Functional Program for Paragraph Formatting", "id": 6052895, "raw_text": "The algorithm can be implemented to run in O(n) time[2,3]. In fact, even the dynamic programming solution will run in O(min(w * n, n^2)) time[5], where w is the maximum number of words on a line. Since w is fixed, the algorithm is linear for large n.\n\nFor a true linear time algorithm you have to make some assumptions on the cost function (namely, concavity). This is usually not a problem, but I think that it may be incompatible with varying line widths. There is yet another way to implement the algorithm which runs in O(n log n) time[1], but apparently with smaller constants than the O(n) algorithm[2].\n\nNow, while I don't know the complexities of the CSS float model, I would really appreciate to have some way to render aesthetically pleasing text in a browser. It does not have to support all the bells and whistles of normal HTML text - even a simple text field would be nice.\n\nParagraph formatting is pretty much a solved problem in academia and I'm posting this to point you or potential implementors at the relevant literature. However, in my opinion, implementing the dynamic programming algorithm with max line cutoff is both easy and fast enough.\n\nReferences:\n\nThe first line of research is into the \"least weight subsequence problem\", of which Knuth-Plass paragraph formation is a special case. All papers assume that the cost function is concave.\n\n[1] D.S. Hirschberg and L.L. Larmore, The Least Weight Subsequence Problem\n(This contains both an O(n log n) time algorithm and an O(n) algorithm with additional assumptions.)\n\n[2] Robert Wilber. 1988. The concave least-weight subsequence problem revisited\n(The first O(n) algorithm which works with any concave cost function.)\n\n[3] Z. Galil and K. Park. 1990. A linear-time algorithm for concave one-dimensional dynamic programming\n(A simplified O(n) algorithm.)\n\nBoth [2] and [3] depend on an algorithm for \"monotone matrix search\", which is described in:\n\n[4] A Aggarwal, M Klawe, S Moran, P Shor, and R Wilber. 1986. Geometric applications of a matrix searching algorithm\n\nFinally, for the cost function used by TeX you will have to consult the relevant chapter in Knuth's \"Digital Typography\" book. Additionally, there is a paper/literate program which implements an O(n) time algorithm:\n\n[5] Oege de Moor and Jeremy Gibbons. 1997. Bridging the Algorithm Gap: a Linear-Time Functional Program for Paragraph Formatting", "time": "2012-02-11T11:10:59Z", "is_private": false, "count": 8, "tags": [], "creator": "callcc@zoho.com", "author": "callcc@zoho.com", "attachment_id": null, "bug_id": 630181, "creation_time": "2012-02-11T11:10:59Z"}, {"is_private": false, "text": "> Now, while I don't know the complexities of the CSS float model\n\nI'll summarize the complexity bit.  In CSS layout, the available width for a line depends on the exact line break positions of all previous lines.  It also depends on the height of the line, which depends on the exact items that end on the line and their vertical alignment.\n\nI'm almost certain (though I haven't proved it) that any reasonable cost function here is not concave....", "id": 6092146, "time": "2012-02-25T01:59:38Z", "creator": "bzbarsky@mit.edu", "creation_time": "2012-02-25T01:59:38Z", "raw_text": "> Now, while I don't know the complexities of the CSS float model\n\nI'll summarize the complexity bit.  In CSS layout, the available width for a line depends on the exact line break positions of all previous lines.  It also depends on the height of the line, which depends on the exact items that end on the line and their vertical alignment.\n\nI'm almost certain (though I haven't proved it) that any reasonable cost function here is not concave....", "count": 9, "tags": [], "author": "bzbarsky@mit.edu", "attachment_id": null, "bug_id": 630181}, {"creation_time": "2012-03-31T18:51:57Z", "creator": "bugzilla.x.0x@xoxy.net", "is_private": false, "id": 6187690, "text": "Shouldn't this block the meta bug 206152?", "time": "2012-03-31T18:51:57Z", "attachment_id": null, "bug_id": 630181, "tags": [], "author": "bugzilla.x.0x@xoxy.net", "count": 10, "raw_text": "Shouldn't this block the meta bug 206152?"}, {"time": "2014-02-06T01:52:53Z", "text": "(In reply to Boris Zbarsky [:bz] from comment #9)\nI think TeX also has to deal with these issues. Is there any possibility of using the TeX code as a guideline for an implementation in Firefox?\n\nThe original TeX code is available here written in WEB. It looks to be very cleanly written and well documented (following literate programming). Search for: [38] Breaking paragraphs into lines.\n\nhttps://www.tug.org/texlive/devsrc/Build/source/texk/web2c/tex.web\n\nSorry, I don't know Javascript or WEB, so I can't help directly.\n\n\n> > Now, while I don't know the complexities of the CSS float model\n> \n> I'll summarize the complexity bit.  In CSS layout, the available width for a\n> line depends on the exact line break positions of all previous lines.  It\n> also depends on the height of the line, which depends on the exact items\n> that end on the line and their vertical alignment.\n> \n> I'm almost certain (though I haven't proved it) that any reasonable cost\n> function here is not concave....", "id": 8380253, "is_private": false, "creator": "ssameer@gmail.com", "creation_time": "2014-02-06T01:52:53Z", "raw_text": "(In reply to Boris Zbarsky [:bz] from comment #9)\nI think TeX also has to deal with these issues. Is there any possibility of using the TeX code as a guideline for an implementation in Firefox?\n\nThe original TeX code is available here written in WEB. It looks to be very cleanly written and well documented (following literate programming). Search for: [38] Breaking paragraphs into lines.\n\nhttps://www.tug.org/texlive/devsrc/Build/source/texk/web2c/tex.web\n\nSorry, I don't know Javascript or WEB, so I can't help directly.\n\n\n> > Now, while I don't know the complexities of the CSS float model\n> \n> I'll summarize the complexity bit.  In CSS layout, the available width for a\n> line depends on the exact line break positions of all previous lines.  It\n> also depends on the height of the line, which depends on the exact items\n> that end on the line and their vertical alignment.\n> \n> I'm almost certain (though I haven't proved it) that any reasonable cost\n> function here is not concave....", "count": 11, "author": "ssameer@gmail.com", "tags": [], "bug_id": 630181, "attachment_id": null}, {"text": "> I think TeX also has to deal with these issues.\n\nPlease do read the whole bug?  That exact issue was discussed at the very beginning.  The summary is that as far as I can tell you think incorrectly...", "id": 8380356, "time": "2014-02-06T02:19:25Z", "is_private": false, "creator": "bzbarsky@mit.edu", "creation_time": "2014-02-06T02:19:25Z", "raw_text": "> I think TeX also has to deal with these issues.\n\nPlease do read the whole bug?  That exact issue was discussed at the very beginning.  The summary is that as far as I can tell you think incorrectly...", "count": 12, "tags": [], "author": "bzbarsky@mit.edu", "attachment_id": null, "bug_id": 630181}, {"creation_time": "2014-02-06T06:47:21Z", "creator": "ssameer@gmail.com", "id": 8381090, "text": "(In reply to Boris Zbarsky [:bz] from comment #12)\nLet me clarify my statement - I believe TeX also has to deal with the same issues: Lines formed from symbols with different heights are common in TeX documents; Filling paragraphs with line widths that are not known before previous lines are rendered: the LaTeX wrapfig package allows you to have floats on the side and to wrap text around it. Since the JS implementation on Bram Stein's website is based on the Knuth and Plass paper, it will not account for these complexities, but the actual TeX/LaTeX source code should account for them and may be a good start for an implementation. [Disclaimer - I am a TeX user, not a TeX programmer.]\n\nAnother issue (discussed earlier in these comments) is speed. In my experience, the TeX algorithm is fast enough to justify a 20 page report in a fraction of a second (with normal sized paragraphs). For abnormally long paragraphs, we can either revert to the current fast method, or implement a faster method (from callcc's excellent survey).\n\n> > I think TeX also has to deal with these issues.\n> \n> Please do read the whole bug?  That exact issue was discussed at the very\n> beginning.  The summary is that as far as I can tell you think incorrectly...", "time": "2014-02-06T06:47:21Z", "is_private": false, "attachment_id": null, "bug_id": 630181, "tags": [], "author": "ssameer@gmail.com", "count": 13, "raw_text": "(In reply to Boris Zbarsky [:bz] from comment #12)\nLet me clarify my statement - I believe TeX also has to deal with the same issues: Lines formed from symbols with different heights are common in TeX documents; Filling paragraphs with line widths that are not known before previous lines are rendered: the LaTeX wrapfig package allows you to have floats on the side and to wrap text around it. Since the JS implementation on Bram Stein's website is based on the Knuth and Plass paper, it will not account for these complexities, but the actual TeX/LaTeX source code should account for them and may be a good start for an implementation. [Disclaimer - I am a TeX user, not a TeX programmer.]\n\nAnother issue (discussed earlier in these comments) is speed. In my experience, the TeX algorithm is fast enough to justify a 20 page report in a fraction of a second (with normal sized paragraphs). For abnormally long paragraphs, we can either revert to the current fast method, or implement a faster method (from callcc's excellent survey).\n\n> > I think TeX also has to deal with these issues.\n> \n> Please do read the whole bug?  That exact issue was discussed at the very\n> beginning.  The summary is that as far as I can tell you think incorrectly..."}, {"tags": [], "creator": "dbaron@dbaron.org", "author": "dbaron@dbaron.org", "creation_time": "2020-07-29T03:14:35Z", "attachment_id": null, "bug_id": 630181, "is_private": false, "text": "It's possible that, if implemented, this could be activated by [`text-wrap: balance`](https://drafts.csswg.org/css-text-4/#text-wrap).", "raw_text": "It's possible that, if implemented, this could be activated by [`text-wrap: balance`](https://drafts.csswg.org/css-text-4/#text-wrap).", "id": 14961616, "time": "2020-07-29T03:14:35Z", "count": 14}, {"creator": "dbaron@dbaron.org", "creation_time": "2020-07-29T07:47:10Z", "is_private": false, "time": "2020-07-29T07:47:10Z", "text": "... actually, no, I was misreading the spec.  `balance` is an entirely different feature that includes balancing the last line.", "id": 14961751, "author": "dbaron@dbaron.org", "tags": [], "bug_id": 630181, "attachment_id": null, "raw_text": "... actually, no, I was misreading the spec.  `balance` is an entirely different feature that includes balancing the last line.", "count": 15}, {"raw_text": "There\u2019s a lot of conceptual overlap with `balance`, but it is indeed definitely a different type of wrapping. But the `text-wrap` property *is* relevant here.\n\nIt\u2019d be `text-wrap: pretty` that you\u2019d use to definitely opt into Knuth-Plass.\n\nAnd `text-wrap: stable` would definitely opt out of it, retaining the current greedy wrapping algorithm.\n\nThe key would be what `text-wrap: wrap` (the default value) means. I suspect some experimentation would be warranted. The safe thing to do would be for it to be equivalent to `stable`; anything beyond that and you\u2019re just about certain to make *some* things behave strangely, however rare. I suspect a decent initial heuristic would be: `stable` if within a textarea or contenteditable, otherwise `pretty`.", "count": 16, "author": "me@chrismorgan.info", "tags": [], "bug_id": 630181, "attachment_id": null, "is_private": false, "time": "2020-07-29T07:59:44Z", "text": "There\u2019s a lot of conceptual overlap with `balance`, but it is indeed definitely a different type of wrapping. But the `text-wrap` property *is* relevant here.\n\nIt\u2019d be `text-wrap: pretty` that you\u2019d use to definitely opt into Knuth-Plass.\n\nAnd `text-wrap: stable` would definitely opt out of it, retaining the current greedy wrapping algorithm.\n\nThe key would be what `text-wrap: wrap` (the default value) means. I suspect some experimentation would be warranted. The safe thing to do would be for it to be equivalent to `stable`; anything beyond that and you\u2019re just about certain to make *some* things behave strangely, however rare. I suspect a decent initial heuristic would be: `stable` if within a textarea or contenteditable, otherwise `pretty`.", "id": 14961763, "creator": "me@chrismorgan.info", "creation_time": "2020-07-29T07:59:44Z"}, {"count": 17, "is_private": false, "time": "2020-10-22T11:17:04Z", "raw_text": "I plan to attempt to partially implement this over the next few weeks. I'll try to document what I learn in the process, even if I can't get anything to work", "text": "I plan to attempt to partially implement this over the next few weeks. I'll try to document what I learn in the process, even if I can't get anything to work", "id": 15094854, "creation_time": "2020-10-22T11:17:04Z", "bug_id": 630181, "attachment_id": null, "author": "aaron@ajanse.me", "tags": [], "creator": "aaron@ajanse.me"}]}}, "comments": {}}