{"bugs": {"638522": {"comments": [{"tags": [], "creation_time": "2011-03-03T19:56:33Z", "bug_id": 638522, "raw_text": "I want to know when a message has related messages in other folders. The use case is message management where not all messages are in the current folder (they might have been filtered or manually moved off), and not using a conversation view add-on (don't want the UI busyness nor the overhead).\n\nSo, add an indicator/icon in header pane when message has related messages in other folders (and only then), as indicated by gloda.  Preferably the indicator is also clickable to invoke open in conversation", "is_private": false, "id": 5319501, "time": "2011-03-03T19:56:33Z", "creator": "vseerror@lehigh.edu", "attachment_id": null, "text": "I want to know when a message has related messages in other folders. The use case is message management where not all messages are in the current folder (they might have been filtered or manually moved off), and not using a conversation view add-on (don't want the UI busyness nor the overhead).\n\nSo, add an indicator/icon in header pane when message has related messages in other folders (and only then), as indicated by gloda.  Preferably the indicator is also clickable to invoke open in conversation", "count": 0, "author": "vseerror@lehigh.edu"}, {"creator": "jonathan.protzenko@gmail.com", "attachment_id": null, "count": 1, "text": "While this sounds nice in practice, the overhead is likely to be substantial. This implies running a gloda query for each message you display, which as you know if you've tried Thunderbird Conversations, is horribly costly.\n\nAn alternative solution might be:\n- gloda indexes a new message,\n- gloda finds all messages in the conversation, there are N messages,\n- for each msgHdr in the conversation, gloda updates its special property called \"conversationCount\", sets it to N.\n\nA similar procedure could be carried out when a message is deleted, for the other remaining messages in the conversation.\n\nThis shifts the work load from displaying a message to indexing messages, which remains costly as well. I see no easy solution for this, CCing :asuth who might have some thoughts.", "author": "jonathan.protzenko@gmail.com", "tags": [], "creation_time": "2011-03-04T16:35:11Z", "bug_id": 638522, "raw_text": "While this sounds nice in practice, the overhead is likely to be substantial. This implies running a gloda query for each message you display, which as you know if you've tried Thunderbird Conversations, is horribly costly.\n\nAn alternative solution might be:\n- gloda indexes a new message,\n- gloda finds all messages in the conversation, there are N messages,\n- for each msgHdr in the conversation, gloda updates its special property called \"conversationCount\", sets it to N.\n\nA similar procedure could be carried out when a message is deleted, for the other remaining messages in the conversation.\n\nThis shifts the work load from displaying a message to indexing messages, which remains costly as well. I see no easy solution for this, CCing :asuth who might have some thoughts.", "is_private": false, "id": 5321816, "time": "2011-03-04T16:35:11Z"}, {"author": "vseerror@lehigh.edu", "time": "2011-03-04T18:55:45Z", "id": 5322302, "count": 2, "text": "Appreciate the insight. Let me add these thoughts to the mix...\n\nThe example case here is a folder of primarily new bugmail (but it could be any \"Inbox\" type folder), and the messages related to them are likely in other folders - which might include an archive folder, and other \"special category\" folders. So it is almost sufficient for the UI to only indicate there are >1 related messages. conversation.\n\nAnd because I am mostly interested in the productivity gain, I can stomach some modest performance hit. (it would be super cool if functions like this could be done on a background thread to reduce the impact)  I'm more about avoiding the \"conversation UI\" in my default view than avoiding the overhead.\n\nAn alternative that might work for me is a lightweight mode of conversations UI - show me a single message by default and make me click to show the conversation.", "attachment_id": null, "is_private": false, "raw_text": "Appreciate the insight. Let me add these thoughts to the mix...\n\nThe example case here is a folder of primarily new bugmail (but it could be any \"Inbox\" type folder), and the messages related to them are likely in other folders - which might include an archive folder, and other \"special category\" folders. So it is almost sufficient for the UI to only indicate there are >1 related messages. conversation.\n\nAnd because I am mostly interested in the productivity gain, I can stomach some modest performance hit. (it would be super cool if functions like this could be done on a background thread to reduce the impact)  I'm more about avoiding the \"conversation UI\" in my default view than avoiding the overhead.\n\nAn alternative that might work for me is a lightweight mode of conversations UI - show me a single message by default and make me click to show the conversation.", "creation_time": "2011-03-04T18:55:45Z", "bug_id": 638522, "creator": "vseerror@lehigh.edu", "tags": []}, {"tags": [], "creation_time": "2011-03-04T20:29:14Z", "bug_id": 638522, "raw_text": "> An alternative that might work for me is a lightweight mode of conversations UI\n> - show me a single message by default and make me click to show the\n> conversation.\n\nan alternative, from the above line of thought ... scrap all the ideas above, no \"conversation indicator\" but \na) Open in Conversation on the toolbar, one click\nb) don't open a conversation tab unless there is >1 message (why bother?)", "is_private": false, "id": 5322589, "time": "2011-03-04T20:29:14Z", "creator": "vseerror@lehigh.edu", "attachment_id": null, "text": "> An alternative that might work for me is a lightweight mode of conversations UI\n> - show me a single message by default and make me click to show the\n> conversation.\n\nan alternative, from the above line of thought ... scrap all the ideas above, no \"conversation indicator\" but \na) Open in Conversation on the toolbar, one click\nb) don't open a conversation tab unless there is >1 message (why bother?)", "count": 3, "author": "vseerror@lehigh.edu"}, {"is_private": false, "attachment_id": null, "raw_text": "(In reply to comment #1)\n> - for each msgHdr in the conversation, gloda updates its special property\n> called \"conversationCount\", sets it to N.\n\nI'm generally on board with this idea, but instead of modifying every message, the right thing to do would be to keep the conversation object up-to-date with information about the conversation.  That was the original plan, but it fell by the wayside.  (You can tell it was in the original plan because the conversation objects pretend to have useful information that they don't actually have :)\n\nWe could even go a little further than just storing a count of the messages in the conversation... for example, the threading and chronological structure of the conversation could be stored, and then we could know that someone replied to your message, or there were other messages after your message chronologically.  The other information considered was inlining message snippets in the conversation object, at least of the unread messages, for Bryan's various conversation-centric displays.\n\nI have great faith in protz's ability to implement something like this :)", "bug_id": 638522, "creation_time": "2011-03-05T02:56:35Z", "creator": "bugmail@asutherland.org", "tags": [], "author": "bugmail@asutherland.org", "time": "2011-03-05T02:56:35Z", "id": 5323475, "count": 4, "text": "(In reply to comment #1)\n> - for each msgHdr in the conversation, gloda updates its special property\n> called \"conversationCount\", sets it to N.\n\nI'm generally on board with this idea, but instead of modifying every message, the right thing to do would be to keep the conversation object up-to-date with information about the conversation.  That was the original plan, but it fell by the wayside.  (You can tell it was in the original plan because the conversation objects pretend to have useful information that they don't actually have :)\n\nWe could even go a little further than just storing a count of the messages in the conversation... for example, the threading and chronological structure of the conversation could be stored, and then we could know that someone replied to your message, or there were other messages after your message chronologically.  The other information considered was inlining message snippets in the conversation object, at least of the unread messages, for Bryan's various conversation-centric displays.\n\nI have great faith in protz's ability to implement something like this :)"}, {"attachment_id": null, "creator": "jonathan.protzenko@gmail.com", "author": "jonathan.protzenko@gmail.com", "text": "(In reply to comment #4)\n> I'm generally on board with this idea, but instead of modifying every message,\n> the right thing to do would be to keep the conversation object up-to-date with\n> information about the conversation.  That was the original plan, but it fell by\n> the wayside.\nIf I understand you correctly, you're thinking about:\n1) enhancing the GlodaConversation objects with extra information and,\n2) running a background gloda query when a message is displayed, that updates the UI when it finds out about related messages in the same conversation (and does nothing if we moved to something else and the query didn't have time to complete in time).\n> \n> We could even go a little further than just storing a count of the messages in\n> the conversation... for example, the threading and chronological structure of\n> the conversation could be stored, and then we could know that someone replied\n> to your message, or there were other messages after your message\n> chronologically.  The other information considered was inlining message\n> snippets in the conversation object, at least of the unread messages, for\n> Bryan's various conversation-centric displays.\nThat sounds pretty cool. That would enable us to do things like:\n\n------------------------------------------\nMessage 1           |  From:\n|- Message 2        |  To:\n\\- Message 3        |  Subject:\n   |- *Message 4*   |\n   \\- ... etc.      |  Message body....\n\nWith the bolded message in the left half telling you how the message you're reading relates to other messages in the conversation.\n\n> \n> I have great faith in protz's ability to implement something like this :)\n\nSure. I'm taking this bug. Do you believe Gloda's current performance will be able to cope with repeated queries for each message displayed? Of course, it won't block the UI, since it's asynchronous gloda queries, but it might take a lot of time to complete!", "count": 5, "is_private": false, "raw_text": "(In reply to comment #4)\n> I'm generally on board with this idea, but instead of modifying every message,\n> the right thing to do would be to keep the conversation object up-to-date with\n> information about the conversation.  That was the original plan, but it fell by\n> the wayside.\nIf I understand you correctly, you're thinking about:\n1) enhancing the GlodaConversation objects with extra information and,\n2) running a background gloda query when a message is displayed, that updates the UI when it finds out about related messages in the same conversation (and does nothing if we moved to something else and the query didn't have time to complete in time).\n> \n> We could even go a little further than just storing a count of the messages in\n> the conversation... for example, the threading and chronological structure of\n> the conversation could be stored, and then we could know that someone replied\n> to your message, or there were other messages after your message\n> chronologically.  The other information considered was inlining message\n> snippets in the conversation object, at least of the unread messages, for\n> Bryan's various conversation-centric displays.\nThat sounds pretty cool. That would enable us to do things like:\n\n------------------------------------------\nMessage 1           |  From:\n|- Message 2        |  To:\n\\- Message 3        |  Subject:\n   |- *Message 4*   |\n   \\- ... etc.      |  Message body....\n\nWith the bolded message in the left half telling you how the message you're reading relates to other messages in the conversation.\n\n> \n> I have great faith in protz's ability to implement something like this :)\n\nSure. I'm taking this bug. Do you believe Gloda's current performance will be able to cope with repeated queries for each message displayed? Of course, it won't block the UI, since it's asynchronous gloda queries, but it might take a lot of time to complete!", "bug_id": 638522, "creation_time": "2011-03-05T17:24:19Z", "tags": [], "time": "2011-03-05T17:24:19Z", "id": 5324152}, {"id": 5324230, "time": "2011-03-05T18:55:05Z", "tags": [], "bug_id": 638522, "creation_time": "2011-03-05T18:55:05Z", "raw_text": "(In reply to comment #5)\n> If I understand you correctly, you're thinking about:\n> 1) enhancing the GlodaConversation objects with extra information and,\n> 2) running a background gloda query when a message is displayed, that updates\n> the UI when it finds out about related messages in the same conversation (and\n> does nothing if we moved to something else and the query didn't have time to\n> complete in time).\n\nYes to 1, kinda to 2.  It should be a background query, but just for the currently displayed message, which will also net us the conversation meta-info.  We would not query for the other messages.\n\n> > I have great faith in protz's ability to implement something like this :)\n> \n> Sure. I'm taking this bug. Do you believe Gloda's current performance will be\n> able to cope with repeated queries for each message displayed? Of course, it\n> won't block the UI, since it's asynchronous gloda queries, but it might take a\n> lot of time to complete!\n\nThe query I'm proposing is not all that expensive.  It could be optimized fire if desired so we only retrieve the conversation object and don't return the message object to gloda.  (The lookup by message-id which would result in a message would still happen for join purposes, but gloda would not hear about it so it would not need to join on the message text or perform the contact/identity lookups.)", "is_private": false, "count": 6, "text": "(In reply to comment #5)\n> If I understand you correctly, you're thinking about:\n> 1) enhancing the GlodaConversation objects with extra information and,\n> 2) running a background gloda query when a message is displayed, that updates\n> the UI when it finds out about related messages in the same conversation (and\n> does nothing if we moved to something else and the query didn't have time to\n> complete in time).\n\nYes to 1, kinda to 2.  It should be a background query, but just for the currently displayed message, which will also net us the conversation meta-info.  We would not query for the other messages.\n\n> > I have great faith in protz's ability to implement something like this :)\n> \n> Sure. I'm taking this bug. Do you believe Gloda's current performance will be\n> able to cope with repeated queries for each message displayed? Of course, it\n> won't block the UI, since it's asynchronous gloda queries, but it might take a\n> lot of time to complete!\n\nThe query I'm proposing is not all that expensive.  It could be optimized fire if desired so we only retrieve the conversation object and don't return the message object to gloda.  (The lookup by message-id which would result in a message would still happen for join purposes, but gloda would not hear about it so it would not need to join on the message text or perform the contact/identity lookups.)", "author": "bugmail@asutherland.org", "creator": "bugmail@asutherland.org", "attachment_id": null}, {"count": 7, "text": "(In reply to comment #6)\n> The query I'm proposing is not all that expensive.  It could be optimized fire\n> if desired so we only retrieve the conversation object and don't return the\n\ns/fire/further/.  Need to stop cooking smores and responding to bugs at the same time.", "author": "bugmail@asutherland.org", "creator": "bugmail@asutherland.org", "attachment_id": null, "id": 5324233, "time": "2011-03-05T18:57:52Z", "tags": [], "creation_time": "2011-03-05T18:57:52Z", "bug_id": 638522, "raw_text": "(In reply to comment #6)\n> The query I'm proposing is not all that expensive.  It could be optimized fire\n> if desired so we only retrieve the conversation object and don't return the\n\ns/fire/further/.  Need to stop cooking smores and responding to bugs at the same time.", "is_private": false}, {"is_private": false, "attachment_id": null, "tags": [], "creator": "vseerror@lehigh.edu", "creation_time": "2011-03-05T19:36:30Z", "bug_id": 638522, "raw_text": "I think I like how this is evolving. \n\nTo add to comment 5, it would be neat to know whether the message i am viewing was preceded somewhere in the same subthread by a message *I* wrote. (Bonus points for indicating proximity) The reason for wanting this information is to help gauge whether how strongly a response is warranted from me. The immediate context is pretty much as I laid out it in comment 0. \n\nPlus, let me throw out this thought from the (shudder) newsgroup world, where I have often thought about this type of issue more than in the mail world. For sanity sake one often operates in view unread messages, with often long threads, many participants, and many subthreads.  The question often arises - is this person's article I am reading in a subthread where I previously commented?", "id": 5324269, "time": "2011-03-05T19:36:30Z", "author": "vseerror@lehigh.edu", "count": 8, "text": "I think I like how this is evolving. \n\nTo add to comment 5, it would be neat to know whether the message i am viewing was preceded somewhere in the same subthread by a message *I* wrote. (Bonus points for indicating proximity) The reason for wanting this information is to help gauge whether how strongly a response is warranted from me. The immediate context is pretty much as I laid out it in comment 0. \n\nPlus, let me throw out this thought from the (shudder) newsgroup world, where I have often thought about this type of issue more than in the mail world. For sanity sake one often operates in view unread messages, with often long threads, many participants, and many subthreads.  The question often arises - is this person's article I am reading in a subthread where I previously commented?"}, {"text": "(In reply to comment #8)\n> I think I like how this is evolving. \n\nJust so we're clear, this would all be somewhat speculative and any UI would need to start out life as an extension, and there is no guarantee of ux-review approval for such a change to the message reader header...\n\nThe gloda changes can be more directly greenlit since it's a direct win, although since we would need to bump the schema version, we might want to stack up a few disk space/performance wins before landing it.  (Search table column re-ordering and page size are the super easy disk space win and performance win, respectively.  Page size may be a minor kick in the pants in terms of disk space usage though, so it would be nice if we could have even super-naive stop-word support in the tokenizer at the same time too...)", "count": 9, "author": "bugmail@asutherland.org", "creator": "bugmail@asutherland.org", "attachment_id": null, "time": "2011-03-05T20:00:53Z", "id": 5324281, "bug_id": 638522, "creation_time": "2011-03-05T20:00:53Z", "raw_text": "(In reply to comment #8)\n> I think I like how this is evolving. \n\nJust so we're clear, this would all be somewhat speculative and any UI would need to start out life as an extension, and there is no guarantee of ux-review approval for such a change to the message reader header...\n\nThe gloda changes can be more directly greenlit since it's a direct win, although since we would need to bump the schema version, we might want to stack up a few disk space/performance wins before landing it.  (Search table column re-ordering and page size are the super easy disk space win and performance win, respectively.  Page size may be a minor kick in the pants in terms of disk space usage though, so it would be nice if we could have even super-naive stop-word support in the tokenizer at the same time too...)", "tags": [], "is_private": false}, {"attachment_id": null, "creator": "jonathan.protzenko@gmail.com", "author": "jonathan.protzenko@gmail.com", "text": "Bryan, any thoughts about this?", "count": 10, "is_private": false, "tags": [], "bug_id": 638522, "creation_time": "2011-03-05T20:34:56Z", "raw_text": "Bryan, any thoughts about this?", "id": 5324310, "time": "2011-03-05T20:34:56Z"}, {"creator": "clarkbw@mozilla.com", "tags": [], "raw_text": "To give the kind of information display you're looking for I think you'd need something like the Thread Arc [1] to accurately convey to people that this message is part of a conversation.  We could try icons and text but a small visualization would really be the right way to go.\n\nJust thinking out loud here.  If you had Gloda grab the conversation data about a message after it was displayed you could fade in a visualization about the conversation once gloda returned with the information.  Even something simple, as the Thread Arc is sweet but likely more than is required for this goal. \n\nSee Thread Arcs first, then look at these examples:\n\nSingle Message\n(o) \n\nChild Message\no-(o)\n\nParent Message\n(o)-o\n\nGrand Child Message\no-o--(o)\n\nGrand Parent Message\n(o)--o-o\n\nMiddle Child\no-o--(o)--o-o\n\nThese 6 types could probably give you just enough information about the conversation to know if you want to open it up in the viewer; I might be missing a few others that would be important.  The left and right most dots would be related to the earliest and latest messages in the conversation.\n\nClicking on any of these visualizations (except maybe the single message) would take you to the conversation list view.  It's possible that you could implement tooltips for each message dot such that you give the sender and date/time of the message for a quick glance at the whole conversation.\n\nA small visualization like this could possibly just fit in a single line in the header space, though I haven't really looked for space like that so don't hold me to it.\n\n[1] http://domino.watson.ibm.com/library/cyberdig.nsf/1e4115aea78b6e7c85256b360066f0d4/7a30ed0aac59bf5d85256d79006f272f?OpenDocument", "creation_time": "2011-03-07T19:00:36Z", "bug_id": 638522, "is_private": false, "attachment_id": null, "count": 11, "text": "To give the kind of information display you're looking for I think you'd need something like the Thread Arc [1] to accurately convey to people that this message is part of a conversation.  We could try icons and text but a small visualization would really be the right way to go.\n\nJust thinking out loud here.  If you had Gloda grab the conversation data about a message after it was displayed you could fade in a visualization about the conversation once gloda returned with the information.  Even something simple, as the Thread Arc is sweet but likely more than is required for this goal. \n\nSee Thread Arcs first, then look at these examples:\n\nSingle Message\n(o) \n\nChild Message\no-(o)\n\nParent Message\n(o)-o\n\nGrand Child Message\no-o--(o)\n\nGrand Parent Message\n(o)--o-o\n\nMiddle Child\no-o--(o)--o-o\n\nThese 6 types could probably give you just enough information about the conversation to know if you want to open it up in the viewer; I might be missing a few others that would be important.  The left and right most dots would be related to the earliest and latest messages in the conversation.\n\nClicking on any of these visualizations (except maybe the single message) would take you to the conversation list view.  It's possible that you could implement tooltips for each message dot such that you give the sender and date/time of the message for a quick glance at the whole conversation.\n\nA small visualization like this could possibly just fit in a single line in the header space, though I haven't really looked for space like that so don't hold me to it.\n\n[1] http://domino.watson.ibm.com/library/cyberdig.nsf/1e4115aea78b6e7c85256b360066f0d4/7a30ed0aac59bf5d85256d79006f272f?OpenDocument", "id": 5327723, "author": "clarkbw@mozilla.com", "time": "2011-03-07T19:00:36Z"}, {"author": "Ulf.Zibis@gmx.de", "text": "(In reply to Bryan Clark (Firefox Search PM) [:clarkbw] from comment #11)\n> To give the kind of information display you're looking for I think you'd\n> need something like the Thread Arc [1] to accurately convey to people that\n> this message is part of a conversation.  We could try icons and text but a\n> small visualization would really be the right way to go.\n\n+1", "count": 12, "attachment_id": null, "creator": "Ulf.Zibis@gmx.de", "id": 8334829, "time": "2014-01-26T13:00:13Z", "is_private": false, "tags": [], "creation_time": "2014-01-26T13:00:13Z", "bug_id": 638522, "raw_text": "(In reply to Bryan Clark (Firefox Search PM) [:clarkbw] from comment #11)\n> To give the kind of information display you're looking for I think you'd\n> need something like the Thread Arc [1] to accurately convey to people that\n> this message is part of a conversation.  We could try icons and text but a\n> small visualization would really be the right way to go.\n\n+1"}]}}, "comments": {}}