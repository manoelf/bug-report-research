{"comments": {}, "bugs": {"671218": {"comments": [{"text": "User Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.814.0 Safari/535.1\n\nSteps to reproduce:\n\nOur company is creating a PKCS#11 module with a specific focus on Mozilla use cases.  One such use case is to be able to encrypt the Thunderbird master password using the encryption key stored on and protected by our hardware token.\n\n\nActual results:\n\nThrough investigation it seems that the master password list can ONLY be encrypted (and decrypted) using the default softtoken, and Thunderbird will not consider using any other configured module.\n\n\nExpected results:\n\nAs an RFE ideally Thunderbird would search for PKCS11 modules that can support encryption/decryption for the purpose of encrypting and decrypting the Master Password list content.", "attachment_id": null, "time": "2011-07-13T09:43:54Z", "raw_text": "User Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.814.0 Safari/535.1\n\nSteps to reproduce:\n\nOur company is creating a PKCS#11 module with a specific focus on Mozilla use cases.  One such use case is to be able to encrypt the Thunderbird master password using the encryption key stored on and protected by our hardware token.\n\n\nActual results:\n\nThrough investigation it seems that the master password list can ONLY be encrypted (and decrypted) using the default softtoken, and Thunderbird will not consider using any other configured module.\n\n\nExpected results:\n\nAs an RFE ideally Thunderbird would search for PKCS11 modules that can support encryption/decryption for the purpose of encrypting and decrypting the Master Password list content.", "creation_time": "2011-07-13T09:43:54Z", "bug_id": 671218, "tags": [], "is_private": false, "count": 0, "id": 5588611, "creator": "simon.jefferies@entrust.com", "author": "simon.jefferies@entrust.com"}, {"text": "Presumably the code that would need enhancing is found in http://mxr.mozilla.org/mozilla-central/source/security/nss/lib/pk11wrap/pk11sdr.c functions PK11SDR_Encrypt and PK11SDR_Decrypt.", "time": "2011-07-13T09:55:40Z", "attachment_id": null, "raw_text": "Presumably the code that would need enhancing is found in http://mxr.mozilla.org/mozilla-central/source/security/nss/lib/pk11wrap/pk11sdr.c functions PK11SDR_Encrypt and PK11SDR_Decrypt.", "creation_time": "2011-07-13T09:55:40Z", "bug_id": 671218, "tags": [], "is_private": false, "count": 1, "id": 5588622, "creator": "simon.jefferies@entrust.com", "author": "simon.jefferies@entrust.com"}, {"is_private": false, "count": 2, "tags": [], "id": 5588704, "bug_id": 671218, "creation_time": "2011-07-13T11:32:46Z", "raw_text": "It looks more attractive to keep in PKCS#11 module the password list by itself - one password list item per CKO_DATA object.\n\nKeeping password list in a token has advantages:\n\n  -- single sign on - in a token (no password list password)\n\n  -- password list gets portable (you can use it at any box where you attach the token)", "text": "It looks more attractive to keep in PKCS#11 module the password list by itself - one password list item per CKO_DATA object.\n\nKeeping password list in a token has advantages:\n\n  -- single sign on - in a token (no password list password)\n\n  -- password list gets portable (you can use it at any box where you attach the token)", "time": "2011-07-13T11:32:46Z", "attachment_id": null, "creator": "pka@datatech.ru", "author": "pka@datatech.ru"}, {"bug_id": 671218, "id": 5588707, "tags": [], "is_private": false, "count": 3, "attachment_id": null, "time": "2011-07-13T11:38:11Z", "text": "Not a bad idea Konstantin, however the actual PKCS11 device may be memory constrained or even read-only after it has been initialised.", "creation_time": "2011-07-13T11:38:11Z", "raw_text": "Not a bad idea Konstantin, however the actual PKCS11 device may be memory constrained or even read-only after it has been initialised.", "author": "simon.jefferies@entrust.com", "creator": "simon.jefferies@entrust.com"}, {"author": "pka@datatech.ru", "creator": "pka@datatech.ru", "bug_id": 671218, "id": 5588735, "count": 4, "is_private": false, "tags": [], "attachment_id": null, "time": "2011-07-13T12:16:36Z", "text": "You are right. I would say that such tokens do not support keeping password list.\n\nReverting to your proposal...\n\nI am not aware, how exactly Mozilla handles password list encryption now. Something like En/Decrypt( passwd_list, PBE(master_passwd)) ?\n\nHaving in mind that a particular PKCS#11 token may be read-only, do you mean that token should keep long-term symmetric encryption key ?", "raw_text": "You are right. I would say that such tokens do not support keeping password list.\n\nReverting to your proposal...\n\nI am not aware, how exactly Mozilla handles password list encryption now. Something like En/Decrypt( passwd_list, PBE(master_passwd)) ?\n\nHaving in mind that a particular PKCS#11 token may be read-only, do you mean that token should keep long-term symmetric encryption key ?", "creation_time": "2011-07-13T12:16:36Z"}, {"author": "brian@briansmith.org", "creator": "brian@briansmith.org", "bug_id": 671218, "id": 5588920, "count": 5, "is_private": false, "tags": [], "attachment_id": null, "time": "2011-07-13T14:38:17Z", "text": "(In reply to comment #0)\n> Steps to reproduce:\n> Our company is creating a PKCS#11 module with a specific focus on Mozilla\n> use cases.  One such use case is to be able to encrypt the Thunderbird\n> master password using the encryption key stored on and protected by our\n> hardware token.\n\nOn which platforms? Does your product protect the Windows DPAPI and similar APIs on other platforms too? If so, there might be an alternative solution of protecting the master password using those APIs, and having your hardware token automatically implement the encryption/authentication.", "creation_time": "2011-07-13T14:38:17Z", "raw_text": "(In reply to comment #0)\n> Steps to reproduce:\n> Our company is creating a PKCS#11 module with a specific focus on Mozilla\n> use cases.  One such use case is to be able to encrypt the Thunderbird\n> master password using the encryption key stored on and protected by our\n> hardware token.\n\nOn which platforms? Does your product protect the Windows DPAPI and similar APIs on other platforms too? If so, there might be an alternative solution of protecting the master password using those APIs, and having your hardware token automatically implement the encryption/authentication."}, {"creation_time": "2011-07-13T14:43:10Z", "raw_text": "I see what you mean, although ideally this would not require extensive external configuration and be quite platform independent.  The platform is initially Ubuntu, moving on to RedHat.", "creator": "simon.jefferies@entrust.com", "text": "I see what you mean, although ideally this would not require extensive external configuration and be quite platform independent.  The platform is initially Ubuntu, moving on to RedHat.", "attachment_id": null, "time": "2011-07-13T14:43:10Z", "author": "simon.jefferies@entrust.com", "count": 6, "is_private": false, "tags": [], "id": 5588925, "bug_id": 671218}, {"author": "simon.jefferies@entrust.com", "creator": "simon.jefferies@entrust.com", "creation_time": "2011-08-04T08:30:55Z", "raw_text": "Simply instead of using pure PBE to protect the symmetric encryption key database file, we could use the users encryption public key to encrypt the symmetric key and store it in the database file.\n\nIf this was implemented, to access the master password list a user would need to have their physical (or virtual) PKCS11 token and a means to authenticate to that token.  This would offer much stronger security to that offered by pure PBE.  \n\nWithout this, currently I believe that if I obtained a copy of the key database and master password list file I could brute force attack the database file in my own time.\n\nConsideration would have to be made for those that do not have public encryption keys configured, presumably the existing PBE mechanism should remain in place as a fall-back.", "attachment_id": null, "time": "2011-08-04T08:30:55Z", "text": "Simply instead of using pure PBE to protect the symmetric encryption key database file, we could use the users encryption public key to encrypt the symmetric key and store it in the database file.\n\nIf this was implemented, to access the master password list a user would need to have their physical (or virtual) PKCS11 token and a means to authenticate to that token.  This would offer much stronger security to that offered by pure PBE.  \n\nWithout this, currently I believe that if I obtained a copy of the key database and master password list file I could brute force attack the database file in my own time.\n\nConsideration would have to be made for those that do not have public encryption keys configured, presumably the existing PBE mechanism should remain in place as a fall-back.", "id": 5632622, "tags": [], "count": 7, "is_private": false, "bug_id": 671218}]}}}