{"bugs": {"640892": {"comments": [{"creation_time": "2011-03-11T08:11:00Z", "bug_id": 640892, "raw_text": "When using CERT_PKIXVerifyCert with a |paramsOut| parameter that contains a cert_po_errorLog (which points to a CERTVerifyLog), the number of errors logged for a given certificate are significantly less than those logged by CERT_VerifyCertificate.\n\nCERT_VerifyCertificate ( http://mxr.mozilla.org/security/source/security/nss/lib/certhigh/certvfy.c#1104 ) performs multiple checks against the certificate. When a CERTVerifyLog is passed in, the failure of any given check does not immediately terminate execution - instead, the error is logged and validation continues.\n\nThese checks include:\n * Time Validity\n * Usage validity (KU and EKU)\n * Trust\n * Revocation\n * Plus all of the chain-related issues detected in cert_VerifyCertChainOld ( http://mxr.mozilla.org/security/source/security/nss/lib/certhigh/certvfy.c#488 ), which has a similar behaviour of continuing checks when a log object is provided.\n\nWhen using LibPKIX by calling CERT_PKIXVerifyCert, only a single error is logged. The underlying reason is due to pkix_CertSelector_DefaultMatch, which is called by pkix_Build_InitiateBuildChain ( http://mxr.mozilla.org/security/source/security/nss/lib/libpkix/pkix/top/pkix_build.c?mark=3350,3363#3350 )\n\nThe implementation of pkix_CertSelector_DefaultMatch ( http://mxr.mozilla.org/security/source/security/nss/lib/libpkix/pkix/certsel/pkix_certselector.c#1165 ) is quite similar to that of CERT_VerifyCertificate, checking things like basic constraints, policies, validity, naming, usage, and signature.\n\nHowever, the implementation of pkix_CertSelector_DefaultMatch is that it uses the LibPKIX macro of PKIX_CHECK. PKIX_CHECK will terminate the execution of pkix_CertSelector_DefaultMatch the moment one of the checks fails. The check that failed will be added to the CERTVerifyLog (by means of pkix_VerifyNode_* functions), but no additional checks will be executed.\n\nBecause of this, only a single error will appear in a CERTVerifyLog when a certificate contains multiple errors, such as an expired certificate whose key usage is unacceptable. Applications that allow a user to override certain errors, such as expiration, may have been coded such that they make sure that the ONLY error(s) in the verify log were those that they wish to suppress. If LibPKIX is turned on for these applications, they may fail to catch the key usage error, and may thus allow the user to override additional errors that should not have been.\n\nNote that this is a special case that happens when calling CERT_PKIXVerifyCert directly. When using CERT_VerifyCertificate after setting CERT_SetUsePKIXForValidation(PR_TRUE), the initial certificate under inspection WILL have multiple errors set for it in the error log. This is because CERT_VerifyCertificate doesn't hand off to LibPKIX until after it has added all relevant errors to the log for the initial certificate.", "tags": [], "creator": "ryan.sleevi@gmail.com", "is_private": false, "attachment_id": null, "count": 0, "text": "When using CERT_PKIXVerifyCert with a |paramsOut| parameter that contains a cert_po_errorLog (which points to a CERTVerifyLog), the number of errors logged for a given certificate are significantly less than those logged by CERT_VerifyCertificate.\n\nCERT_VerifyCertificate ( http://mxr.mozilla.org/security/source/security/nss/lib/certhigh/certvfy.c#1104 ) performs multiple checks against the certificate. When a CERTVerifyLog is passed in, the failure of any given check does not immediately terminate execution - instead, the error is logged and validation continues.\n\nThese checks include:\n * Time Validity\n * Usage validity (KU and EKU)\n * Trust\n * Revocation\n * Plus all of the chain-related issues detected in cert_VerifyCertChainOld ( http://mxr.mozilla.org/security/source/security/nss/lib/certhigh/certvfy.c#488 ), which has a similar behaviour of continuing checks when a log object is provided.\n\nWhen using LibPKIX by calling CERT_PKIXVerifyCert, only a single error is logged. The underlying reason is due to pkix_CertSelector_DefaultMatch, which is called by pkix_Build_InitiateBuildChain ( http://mxr.mozilla.org/security/source/security/nss/lib/libpkix/pkix/top/pkix_build.c?mark=3350,3363#3350 )\n\nThe implementation of pkix_CertSelector_DefaultMatch ( http://mxr.mozilla.org/security/source/security/nss/lib/libpkix/pkix/certsel/pkix_certselector.c#1165 ) is quite similar to that of CERT_VerifyCertificate, checking things like basic constraints, policies, validity, naming, usage, and signature.\n\nHowever, the implementation of pkix_CertSelector_DefaultMatch is that it uses the LibPKIX macro of PKIX_CHECK. PKIX_CHECK will terminate the execution of pkix_CertSelector_DefaultMatch the moment one of the checks fails. The check that failed will be added to the CERTVerifyLog (by means of pkix_VerifyNode_* functions), but no additional checks will be executed.\n\nBecause of this, only a single error will appear in a CERTVerifyLog when a certificate contains multiple errors, such as an expired certificate whose key usage is unacceptable. Applications that allow a user to override certain errors, such as expiration, may have been coded such that they make sure that the ONLY error(s) in the verify log were those that they wish to suppress. If LibPKIX is turned on for these applications, they may fail to catch the key usage error, and may thus allow the user to override additional errors that should not have been.\n\nNote that this is a special case that happens when calling CERT_PKIXVerifyCert directly. When using CERT_VerifyCertificate after setting CERT_SetUsePKIXForValidation(PR_TRUE), the initial certificate under inspection WILL have multiple errors set for it in the error log. This is because CERT_VerifyCertificate doesn't hand off to LibPKIX until after it has added all relevant errors to the log for the initial certificate.", "time": "2011-03-11T08:11:00Z", "author": "ryan.sleevi@gmail.com", "id": 5338522}, {"id": 5340332, "time": "2011-03-11T23:19:24Z", "is_private": false, "tags": [], "bug_id": 640892, "creation_time": "2011-03-11T23:19:24Z", "raw_text": "Ryan: thank you for reporting and tracking down this bug.\n\nThis problem of aborting a loop after one thing fails is\nsimilar to problem 2 of bug 528743 comment 0.  We probably\ncan use PKIX_CHECK_ONLY_FATAL or a variant of it for\npkix_CertSelector_DefaultMatch.  It seems that we also need\nto pass pVerifyNode to pkix_CertSelector_DefaultMatch so\nthat pkix_CertSelector_DefaultMatch can call pkix_VerifyNode_Create\nfor each error it encounters.\n\nWould you like to give it a try?", "author": "wtc@google.com", "count": 1, "text": "Ryan: thank you for reporting and tracking down this bug.\n\nThis problem of aborting a loop after one thing fails is\nsimilar to problem 2 of bug 528743 comment 0.  We probably\ncan use PKIX_CHECK_ONLY_FATAL or a variant of it for\npkix_CertSelector_DefaultMatch.  It seems that we also need\nto pass pVerifyNode to pkix_CertSelector_DefaultMatch so\nthat pkix_CertSelector_DefaultMatch can call pkix_VerifyNode_Create\nfor each error it encounters.\n\nWould you like to give it a try?", "attachment_id": null, "creator": "wtc@google.com"}, {"count": 2, "text": "FYI: the cert_po_errorLog support for CERT_PKIXVerifyCert was\nadded in two patches in bug 294531: attachment 282175 and\nattachment 307775.", "author": "wtc@google.com", "creator": "wtc@google.com", "attachment_id": null, "time": "2011-03-11T23:27:27Z", "id": 5340360, "bug_id": 640892, "creation_time": "2011-03-11T23:27:27Z", "raw_text": "FYI: the cert_po_errorLog support for CERT_PKIXVerifyCert was\nadded in two patches in bug 294531: attachment 282175 and\nattachment 307775.", "tags": [], "is_private": false}, {"author": "ryan.sleevi@gmail.com", "text": "Wan-Teh: Thanks for the references. Yes, I do plan to work on a patch for this specific issue against NSS trunk.", "count": 3, "attachment_id": null, "creator": "ryan.sleevi@gmail.com", "id": 5340508, "time": "2011-03-12T00:15:14Z", "is_private": false, "tags": [], "creation_time": "2011-03-12T00:15:14Z", "bug_id": 640892, "raw_text": "Wan-Teh: Thanks for the references. Yes, I do plan to work on a patch for this specific issue against NSS trunk."}, {"creator": "wtc@google.com", "tags": [], "raw_text": "", "creation_time": "2011-08-13T01:35:12Z", "bug_id": 640892, "attachment_id": null, "is_private": false, "text": "*** Bug 678675 has been marked as a duplicate of this bug. ***", "count": 4, "id": 5651348, "author": "wtc@google.com", "time": "2011-08-13T01:35:12Z"}, {"time": "2011-08-13T10:09:50Z", "author": "kaie@kuix.de", "id": 5651604, "text": "With this bug, PSM's error page and override mechanism will regress when using libPKIX.\n\nIn order to override a site's cert, PSM must be able to retrieve the full set of errors in one step.\n\nBecause of this bug, when visiting an SSL site with a certificate that is both expired and untrusted, PSM will only see one error at any time, and the override that PSM creates will never be sufficient (PSM will alternatingly report one or the other error).\n\nWe must fix this bug, before we can make libpkix the default in Mozilla.\n\n\nAlso, fixing this bug is necessary for reporting more details about the real cause of OCSP failures.", "count": 5, "is_private": false, "attachment_id": null, "creation_time": "2011-08-13T10:09:50Z", "bug_id": 640892, "raw_text": "With this bug, PSM's error page and override mechanism will regress when using libPKIX.\n\nIn order to override a site's cert, PSM must be able to retrieve the full set of errors in one step.\n\nBecause of this bug, when visiting an SSL site with a certificate that is both expired and untrusted, PSM will only see one error at any time, and the override that PSM creates will never be sufficient (PSM will alternatingly report one or the other error).\n\nWe must fix this bug, before we can make libpkix the default in Mozilla.\n\n\nAlso, fixing this bug is necessary for reporting more details about the real cause of OCSP failures.", "tags": [], "creator": "kaie@kuix.de"}, {"text": "Created attachment 644107\nTrack multiple errors in the VerifyNode\n\nChange the VerifyNode API to track a PKIX_List of error objects, rather than a single error.\n\nFor any step during the path construction or verification, there may be multiple errors associated. While the PKIX_Error interface provides a way to describe both an underlying cause as well as associate supplemental info, these interfaces are not well-suited towards reporting multiple distinct errors, and would require tight coupling between error codes and their supplemental storage mechanism.\n\nInstead, let the VerifyNode be able to track the multiple verification failures. This is in anticipation of changing the CertChecker callbacks to receive the VerifyNode, so that they can add as many errors as appropriate.", "count": 6, "time": "2012-07-20T01:01:04Z", "author": "ryan.sleevi@gmail.com", "id": 6489818, "bug_id": 640892, "creation_time": "2012-07-20T01:01:04Z", "raw_text": "Change the VerifyNode API to track a PKIX_List of error objects, rather than a single error.\n\nFor any step during the path construction or verification, there may be multiple errors associated. While the PKIX_Error interface provides a way to describe both an underlying cause as well as associate supplemental info, these interfaces are not well-suited towards reporting multiple distinct errors, and would require tight coupling between error codes and their supplemental storage mechanism.\n\nInstead, let the VerifyNode be able to track the multiple verification failures. This is in anticipation of changing the CertChecker callbacks to receive the VerifyNode, so that they can add as many errors as appropriate.", "tags": [], "creator": "ryan.sleevi@gmail.com", "is_private": false, "attachment_id": 644107}, {"is_private": false, "tags": [], "creation_time": "2012-07-21T01:37:32Z", "bug_id": 640892, "raw_text": "Please note well the changes to pkix_build.c\n\nThe code \"should\" have used pkix_VerifyNode_SetError, which replaces any existing error with a new error code. However, SetError's existing expectations are that verifyNode->error is always NULL, and it's clear that this code in pkix_build.c is not operating on that same assumption.\n\nBecause of this, AddError seems the correct API call for these - it will create an error list if errorList is NULL, or append the error if it wasn't. Regardless, tests will fail, as expected.", "id": 6493394, "time": "2012-07-21T01:37:32Z", "attachment_id": 644550, "creator": "ryan.sleevi@gmail.com", "author": "ryan.sleevi@gmail.com", "count": 7, "text": "Created attachment 644550\nA patch that actually compiles\n\nPlease note well the changes to pkix_build.c\n\nThe code \"should\" have used pkix_VerifyNode_SetError, which replaces any existing error with a new error code. However, SetError's existing expectations are that verifyNode->error is always NULL, and it's clear that this code in pkix_build.c is not operating on that same assumption.\n\nBecause of this, AddError seems the correct API call for these - it will create an error list if errorList is NULL, or append the error if it wasn't. Regardless, tests will fail, as expected."}, {"text": "Comment on attachment 644550\nA patch that actually compiles\n\nReview of attachment 644550:\n-----------------------------------------------------------------\n\nr=wtc.  I think this patch is correct.  I ask some questions and\nsuggest some changes below.  Please attach a new version of this\npatch.  Thanks.\n\n::: mozilla/security/nss/lib/certhigh/certvfypkix.c\n@@ +905,3 @@\n>      children = node->children;\n>  \n> +    if (errorList) {\n\nPlease confirm that you want to add the errors of the current node\nto the log first, before adding the errors of the child nodes.\n\n@@ -896,3 @@\n>      children = node->children;\n>  \n> -    if (children == NULL) {\n\nThe original code seems to imply that for each 'node', at least\none of node->children and node->error is NULL.  Is that true?\n\n@@ +923,1 @@\n>  #endif\n\nJust delete the DEBUG_volkov code.  No need to update it.\n\n::: mozilla/security/nss/lib/libpkix/include/pkix_errorstrings.h\n@@ +1078,4 @@\n>  PKIX_ERRORENTRY(VERIFYNODEFINDERRORFAILED,pkix_VerifyNode_FindError failed,0),\n>  PKIX_ERRORENTRY(VERIFYNODESETDEPTHFAILED,pkix_VerifyNode_SetDepth failed,0),\n>  PKIX_ERRORENTRY(VERIFYNODESETERRORFAILED,pkix_VerifyNode_SetError failed,0),\n> +PKIX_ERRORENTRY(VERIFYNODEADDERRORFAILED,pkix_VerifyNode_AddError failed,0),\n\nAdd this line in sorted order of VERIFYNODEADDERRORFAILED.\n\nThe PKIX error code names are all caps without underscores, which makes them\nhard to read.  So it would be nice to sort the error code names in this file.\n\n::: mozilla/security/nss/lib/libpkix/pkix/results/pkix_verifynode.c\n@@ +63,5 @@\n> +                PKIX_List_Create(&errorList, plContext),\n> +                PKIX_LISTCREATEFAILED);\n> +            PKIX_CHECK(\n> +                PKIX_List_AppendItem(errorList, (PKIX_PL_Object*)error,\n> +                                     plContext),\n\nIf 'error' is NULL, should we still create an empty 'errorList'?\n\n@@ -685,5 @@\n>                  plContext,\n>                  PKIX_FAILUREHASHINGCERT);\n>  \n> -        PKIX_CHECK(PKIX_PL_Object_Hashcode\n> -                ((PKIX_PL_Object *)node->error,\n\nSince PKIX_PL_Object_Hashcode throws an error if the first argument\nis NULL, this seems to imply that node->error cannot be NULL, or that\nthis function has never been called.\n\n(This is related to my question above in pkix_VerifyNode_Create.)\n\n@@ +964,4 @@\n>          PKIX_CHECK(pkix_VerifyNode_Create\n>                  (original->verifyCert,\n>                  original->depth,\n> +                NULL,\n\npkix_VerifyNode_Create should be updated to take an 'errorList' argument\ninstead.  You can add a pkix_VerifyNode_Create2 variant to do this in\nstages, if you don't want to make this patch too big.\n\n@@ +1136,5 @@\n> +        PKIX_RETURN(VERIFYNODE);\n> +}\n> +\n> +/*\n> + * FUNCTION: PKIX_VerifyNode_SetError\n\nTypo: SetError => AddError\n\n@@ +1146,5 @@\n> + * PARAMETERS:\n> + *  \"node\"\n> + *      The address of the VerifyNode to be modified. Must be non-NULL.\n> + *  \"error\"\n> + *      The address of the Error to be stored.\n\nNit: stored => appended\n           or  added\n\n@@ +1171,5 @@\n> +            pkixErrorResult = pkix_VerifyNode_SetError(node, error,\n> +                                                       plContext);\n> +            if (pkixErrorResult) {\n> +                pkixErrorClass = pkixErrorResult->errClass;\n> +                pkixErrorCode = pkixErrorResult->errCode;\n\nWhy don't you use PKIX_CHECK to call pkix_VerifyNode_SetError?\nThe only difference is the value assigned to pkixErrorCode here.\nIs it important for pkixErrorCode to be pkixErrorResult->errCode\nhere?  I think pkixErrorResult->errCode will still be available\nbecause the pkix errors seem to be linked by the \"cause\" pointers.\n\n@@ +1251,5 @@\n>              }\n>          }\n>      }\n> +\n> +    /* If that fails, try to find an error in the error list. */\n\nNit: add \"of the current level\" or \"of the current node\" at the\nend of this comment?\n\n::: mozilla/security/nss/lib/libpkix/pkix/top/pkix_build.c\n@@ +766,5 @@\n> +            pkixTempResult = pkix_VerifyNode_AddError(\\\n> +                verifyNode, pkixErrorResult, plContext); \\\n> +            if (pkixTempResult) { \\\n> +                PKIX_DECREF(pkixErrorResult); \\\n> +                pkixErrorResult = pkixTempResult; \\\n\nI can't find existing code that uses pkixTempResult this way.\nCould you add a comment to explain this (why do we replace\nthe original error in pkixErrorResult with pkixTempResult)?\n\nIt seems that we should also update pkixErrorClass since\npkixErrorResult->errClass has changed?\n    ...\n    pkixErrorResult = pkixTempResult; \\\n    pkixErrorClass = pkixErrorResult->errClass; \\\n    if (pkixErrorClass == PKIX_FATAL_ERROR) { \\\n        goto cleanup; \\\n    } \\\n\nShould we set pkixTempResult to NULL after saving its value\nin pkixErrorResult?", "count": 8, "id": 6498725, "author": "wtc@google.com", "time": "2012-07-23T23:52:16Z", "creator": "wtc@google.com", "tags": [], "raw_text": "Review of attachment 644550:\n-----------------------------------------------------------------\n\nr=wtc.  I think this patch is correct.  I ask some questions and\nsuggest some changes below.  Please attach a new version of this\npatch.  Thanks.\n\n::: mozilla/security/nss/lib/certhigh/certvfypkix.c\n@@ +905,3 @@\n>      children = node->children;\n>  \n> +    if (errorList) {\n\nPlease confirm that you want to add the errors of the current node\nto the log first, before adding the errors of the child nodes.\n\n@@ -896,3 @@\n>      children = node->children;\n>  \n> -    if (children == NULL) {\n\nThe original code seems to imply that for each 'node', at least\none of node->children and node->error is NULL.  Is that true?\n\n@@ +923,1 @@\n>  #endif\n\nJust delete the DEBUG_volkov code.  No need to update it.\n\n::: mozilla/security/nss/lib/libpkix/include/pkix_errorstrings.h\n@@ +1078,4 @@\n>  PKIX_ERRORENTRY(VERIFYNODEFINDERRORFAILED,pkix_VerifyNode_FindError failed,0),\n>  PKIX_ERRORENTRY(VERIFYNODESETDEPTHFAILED,pkix_VerifyNode_SetDepth failed,0),\n>  PKIX_ERRORENTRY(VERIFYNODESETERRORFAILED,pkix_VerifyNode_SetError failed,0),\n> +PKIX_ERRORENTRY(VERIFYNODEADDERRORFAILED,pkix_VerifyNode_AddError failed,0),\n\nAdd this line in sorted order of VERIFYNODEADDERRORFAILED.\n\nThe PKIX error code names are all caps without underscores, which makes them\nhard to read.  So it would be nice to sort the error code names in this file.\n\n::: mozilla/security/nss/lib/libpkix/pkix/results/pkix_verifynode.c\n@@ +63,5 @@\n> +                PKIX_List_Create(&errorList, plContext),\n> +                PKIX_LISTCREATEFAILED);\n> +            PKIX_CHECK(\n> +                PKIX_List_AppendItem(errorList, (PKIX_PL_Object*)error,\n> +                                     plContext),\n\nIf 'error' is NULL, should we still create an empty 'errorList'?\n\n@@ -685,5 @@\n>                  plContext,\n>                  PKIX_FAILUREHASHINGCERT);\n>  \n> -        PKIX_CHECK(PKIX_PL_Object_Hashcode\n> -                ((PKIX_PL_Object *)node->error,\n\nSince PKIX_PL_Object_Hashcode throws an error if the first argument\nis NULL, this seems to imply that node->error cannot be NULL, or that\nthis function has never been called.\n\n(This is related to my question above in pkix_VerifyNode_Create.)\n\n@@ +964,4 @@\n>          PKIX_CHECK(pkix_VerifyNode_Create\n>                  (original->verifyCert,\n>                  original->depth,\n> +                NULL,\n\npkix_VerifyNode_Create should be updated to take an 'errorList' argument\ninstead.  You can add a pkix_VerifyNode_Create2 variant to do this in\nstages, if you don't want to make this patch too big.\n\n@@ +1136,5 @@\n> +        PKIX_RETURN(VERIFYNODE);\n> +}\n> +\n> +/*\n> + * FUNCTION: PKIX_VerifyNode_SetError\n\nTypo: SetError => AddError\n\n@@ +1146,5 @@\n> + * PARAMETERS:\n> + *  \"node\"\n> + *      The address of the VerifyNode to be modified. Must be non-NULL.\n> + *  \"error\"\n> + *      The address of the Error to be stored.\n\nNit: stored => appended\n           or  added\n\n@@ +1171,5 @@\n> +            pkixErrorResult = pkix_VerifyNode_SetError(node, error,\n> +                                                       plContext);\n> +            if (pkixErrorResult) {\n> +                pkixErrorClass = pkixErrorResult->errClass;\n> +                pkixErrorCode = pkixErrorResult->errCode;\n\nWhy don't you use PKIX_CHECK to call pkix_VerifyNode_SetError?\nThe only difference is the value assigned to pkixErrorCode here.\nIs it important for pkixErrorCode to be pkixErrorResult->errCode\nhere?  I think pkixErrorResult->errCode will still be available\nbecause the pkix errors seem to be linked by the \"cause\" pointers.\n\n@@ +1251,5 @@\n>              }\n>          }\n>      }\n> +\n> +    /* If that fails, try to find an error in the error list. */\n\nNit: add \"of the current level\" or \"of the current node\" at the\nend of this comment?\n\n::: mozilla/security/nss/lib/libpkix/pkix/top/pkix_build.c\n@@ +766,5 @@\n> +            pkixTempResult = pkix_VerifyNode_AddError(\\\n> +                verifyNode, pkixErrorResult, plContext); \\\n> +            if (pkixTempResult) { \\\n> +                PKIX_DECREF(pkixErrorResult); \\\n> +                pkixErrorResult = pkixTempResult; \\\n\nI can't find existing code that uses pkixTempResult this way.\nCould you add a comment to explain this (why do we replace\nthe original error in pkixErrorResult with pkixTempResult)?\n\nIt seems that we should also update pkixErrorClass since\npkixErrorResult->errClass has changed?\n    ...\n    pkixErrorResult = pkixTempResult; \\\n    pkixErrorClass = pkixErrorResult->errClass; \\\n    if (pkixErrorClass == PKIX_FATAL_ERROR) { \\\n        goto cleanup; \\\n    } \\\n\nShould we set pkixTempResult to NULL after saving its value\nin pkixErrorResult?", "creation_time": "2012-07-23T23:52:16Z", "bug_id": 640892, "is_private": false, "attachment_id": 644550}, {"creator": "wtc@google.com", "tags": [], "raw_text": "Review of attachment 644550:\n-----------------------------------------------------------------\n\n::: mozilla/security/nss/lib/libpkix/pkix/results/pkix_verifynode.c\n@@ +1264,5 @@\n> +                PKIX_LISTGETITEMFAILED);\n> +            if (verifyError->plErr) {\n> +                PKIX_INCREF(verifyError);\n> +                *error = verifyError;\n> +            }\n\nTo preserve the current behavior, perhaps we should use the last\nerror rather than the first error of the error list?\n\npkix_VerifyNode_FindError seems to do exactly that here, because\nit stays in the for loop after storing verifyError in *error.\n\nSpeaking of which, I think we need to PKIX_DECREF what was in *error\nbefore assigning a new value to *error, right?", "bug_id": 640892, "creation_time": "2012-07-24T00:10:45Z", "attachment_id": 644550, "is_private": false, "text": "Comment on attachment 644550\nA patch that actually compiles\n\nReview of attachment 644550:\n-----------------------------------------------------------------\n\n::: mozilla/security/nss/lib/libpkix/pkix/results/pkix_verifynode.c\n@@ +1264,5 @@\n> +                PKIX_LISTGETITEMFAILED);\n> +            if (verifyError->plErr) {\n> +                PKIX_INCREF(verifyError);\n> +                *error = verifyError;\n> +            }\n\nTo preserve the current behavior, perhaps we should use the last\nerror rather than the first error of the error list?\n\npkix_VerifyNode_FindError seems to do exactly that here, because\nit stays in the for loop after storing verifyError in *error.\n\nSpeaking of which, I think we need to PKIX_DECREF what was in *error\nbefore assigning a new value to *error, right?", "count": 9, "id": 6498789, "author": "wtc@google.com", "time": "2012-07-24T00:10:45Z"}]}}, "comments": {}}