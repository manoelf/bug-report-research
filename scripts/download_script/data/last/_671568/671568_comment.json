{"bugs": {"671568": {"comments": [{"creator": "honzab.moz@firemni.cz", "author": "honzab.moz@firemni.cz", "text": "I noticed we open a significant number of connections that are never used.  Also this could be a basic measure for how many (real) transactions a connection handles.\n\nTo sum, with T+S patch in mind, I want to measure:\n- How often we create a backup connection (results caused by happy eyeballs should be ignored)\n- How often the backup connection was never used\n- nsHttpTransaction per nsHttpConnection cumulative utilization (through pipeline objects)\n- nsHttpTransaction per nsHttpConnection per class utilization\n- transaction dispatch result rates: create a connection / reuse an idle connection / dispatch to a pipeline / queue\n\nThe first 3 might be implemented right now.  The rest after the T+S patch lands.\n\nI will start writing a patch based on m-c.  I know if we land this we'll need to merge Larch against it but on the other hand we might have a useful numbers to compare to after pipelining stuff gets in.\n\nComments, suggestions welcome!", "time": "2011-07-14T15:51:12Z", "attachment_id": null, "raw_text": "I noticed we open a significant number of connections that are never used.  Also this could be a basic measure for how many (real) transactions a connection handles.\n\nTo sum, with T+S patch in mind, I want to measure:\n- How often we create a backup connection (results caused by happy eyeballs should be ignored)\n- How often the backup connection was never used\n- nsHttpTransaction per nsHttpConnection cumulative utilization (through pipeline objects)\n- nsHttpTransaction per nsHttpConnection per class utilization\n- transaction dispatch result rates: create a connection / reuse an idle connection / dispatch to a pipeline / queue\n\nThe first 3 might be implemented right now.  The rest after the T+S patch lands.\n\nI will start writing a patch based on m-c.  I know if we land this we'll need to merge Larch against it but on the other hand we might have a useful numbers to compare to after pipelining stuff gets in.\n\nComments, suggestions welcome!", "creation_time": "2011-07-14T15:51:12Z", "bug_id": 671568, "is_private": false, "count": 0, "tags": [], "id": 5591377}, {"attachment_id": null, "time": "2013-04-04T12:31:34Z", "text": "Hey, is this bug still open? I want to work on it.", "creation_time": "2013-04-04T12:31:34Z", "raw_text": "Hey, is this bug still open? I want to work on it.", "bug_id": 671568, "id": 7276282, "is_private": false, "count": 1, "tags": [], "author": "georgiana.chelu93@gmail.com", "creator": "georgiana.chelu93@gmail.com"}, {"text": "still open", "time": "2013-04-04T12:36:24Z", "attachment_id": null, "raw_text": "still open", "creation_time": "2013-04-04T12:36:24Z", "bug_id": 671568, "is_private": false, "count": 2, "tags": [], "id": 7276300, "creator": "mcmanus@ducksong.com", "author": "mcmanus@ducksong.com"}, {"attachment_id": null, "time": "2013-07-30T16:56:58Z", "author": "robertbindar@gmail.com", "creator": "robertbindar@gmail.com", "text": "Hi guys, first telemetry should accumulate in nsHttpConnectionMgr::nsHalfOpenSocket::SetupBackupStreams() ?", "creation_time": "2013-07-30T16:56:58Z", "raw_text": "Hi guys, first telemetry should accumulate in nsHttpConnectionMgr::nsHalfOpenSocket::SetupBackupStreams() ?", "bug_id": 671568, "id": 7692943, "is_private": false, "count": 3, "tags": []}, {"tags": [], "is_private": false, "count": 4, "id": 7692966, "bug_id": 671568, "raw_text": "or maybe when the timer fires in Notify() ?", "creation_time": "2013-07-30T17:01:07Z", "creator": "robertbindar@gmail.com", "text": "or maybe when the timer fires in Notify() ?", "author": "robertbindar@gmail.com", "attachment_id": null, "time": "2013-07-30T17:01:07Z"}, {"creator": "robertbindar@gmail.com", "author": "robertbindar@gmail.com", "text": "Created attachment 785226\nnumber of backup connections vs never used ones", "attachment_id": 785226, "time": "2013-08-02T21:56:27Z", "raw_text": "", "creation_time": "2013-08-02T21:56:27Z", "bug_id": 671568, "tags": [], "is_private": false, "count": 5, "id": 7708184}, {"creation_time": "2013-08-02T22:11:09Z", "raw_text": "", "time": "2013-08-02T22:11:09Z", "attachment_id": 785232, "text": "Created attachment 785232\nnumber of backup connections vs never used ones", "id": 7708243, "is_private": false, "count": 6, "tags": [], "bug_id": 671568, "author": "robertbindar@gmail.com", "creator": "robertbindar@gmail.com"}, {"author": "honzab.moz@firemni.cz", "creator": "honzab.moz@firemni.cz", "attachment_id": 785232, "time": "2013-08-09T15:57:50Z", "text": "Comment on attachment 785232\nnumber of backup connections vs never used ones\n\nReview of attachment 785232:\n-----------------------------------------------------------------\n\nThanks for the effort!\n\nThis needs a little tune up.  I'd rather have a telemetry like this:\n\nHave an enum of 4 values where:\n 0 = a utilized primary connection\n 1 = a never used primary connection\n 2 = a utilized backup connection\n 3 = a never used backup connection\n\nReport this in the connection's destructor only.  \n\nHave an actual enum { UTILIZED_PRIMARY_CONNECTION = 1, NEVER_USED_PRIMARY_CONNECTION = 2, ... } to make clear what you are reporting.\n\n::: netwerk/protocol/http/nsHttpConnection.cpp\n@@ +107,5 @@\n>                                Telemetry::HTTP_KBREAD_PER_CONN,\n>                                totalKBRead);\n>      }\n> +\n> +    if (this->IsBackupConnection() && !this->GetConnectionEverUsed())\n\nuse the member flags directly. also no need for this->.\n\n::: netwerk/protocol/http/nsHttpConnection.h\n@@ +112,5 @@\n>                             nsIAsyncOutputStream **);\n>      void     GetSecurityInfo(nsISupports **);\n>      bool     IsPersistent() { return IsKeepAlive(); }\n>      bool     IsReused();\n> +    bool     GetConnectionEverUsed() { return mConnectionEverUsed; }\n\nYou don't need this getter.\n\n@@ +113,5 @@\n>      void     GetSecurityInfo(nsISupports **);\n>      bool     IsPersistent() { return IsKeepAlive(); }\n>      bool     IsReused();\n> +    bool     GetConnectionEverUsed() { return mConnectionEverUsed; }\n> +    bool     IsBackupConnection() { return mIsBackupConnection; }\n\nThis one as well.\n\n::: toolkit/components/telemetry/Histograms.json\n@@ +650,5 @@\n>      \"description\": \"HTTP: requests per connection\"\n>    },\n> +  \"HTTP_BACKUP_CONN\": {\n> +    \"kind\": \"enumerated\",\n> +    \"n_values\": 3,\n\nI see you only report 0 and 1.", "raw_text": "Review of attachment 785232:\n-----------------------------------------------------------------\n\nThanks for the effort!\n\nThis needs a little tune up.  I'd rather have a telemetry like this:\n\nHave an enum of 4 values where:\n 0 = a utilized primary connection\n 1 = a never used primary connection\n 2 = a utilized backup connection\n 3 = a never used backup connection\n\nReport this in the connection's destructor only.  \n\nHave an actual enum { UTILIZED_PRIMARY_CONNECTION = 1, NEVER_USED_PRIMARY_CONNECTION = 2, ... } to make clear what you are reporting.\n\n::: netwerk/protocol/http/nsHttpConnection.cpp\n@@ +107,5 @@\n>                                Telemetry::HTTP_KBREAD_PER_CONN,\n>                                totalKBRead);\n>      }\n> +\n> +    if (this->IsBackupConnection() && !this->GetConnectionEverUsed())\n\nuse the member flags directly. also no need for this->.\n\n::: netwerk/protocol/http/nsHttpConnection.h\n@@ +112,5 @@\n>                             nsIAsyncOutputStream **);\n>      void     GetSecurityInfo(nsISupports **);\n>      bool     IsPersistent() { return IsKeepAlive(); }\n>      bool     IsReused();\n> +    bool     GetConnectionEverUsed() { return mConnectionEverUsed; }\n\nYou don't need this getter.\n\n@@ +113,5 @@\n>      void     GetSecurityInfo(nsISupports **);\n>      bool     IsPersistent() { return IsKeepAlive(); }\n>      bool     IsReused();\n> +    bool     GetConnectionEverUsed() { return mConnectionEverUsed; }\n> +    bool     IsBackupConnection() { return mIsBackupConnection; }\n\nThis one as well.\n\n::: toolkit/components/telemetry/Histograms.json\n@@ +650,5 @@\n>      \"description\": \"HTTP: requests per connection\"\n>    },\n> +  \"HTTP_BACKUP_CONN\": {\n> +    \"kind\": \"enumerated\",\n> +    \"n_values\": 3,\n\nI see you only report 0 and 1.", "creation_time": "2013-08-09T15:57:50Z", "bug_id": 671568, "id": 7731567, "count": 7, "is_private": false, "tags": []}, {"count": 8, "is_private": false, "tags": [], "id": 7737713, "bug_id": 671568, "creation_time": "2013-08-12T15:44:26Z", "raw_text": "", "text": "Created attachment 788973\nbackup vs primary connections usage v2", "time": "2013-08-12T15:44:26Z", "attachment_id": 788973, "creator": "robertbindar@gmail.com", "author": "robertbindar@gmail.com"}, {"attachment_id": 788973, "time": "2013-08-13T12:50:06Z", "text": "Comment on attachment 788973\nbackup vs primary connections usage v2\n\nReview of attachment 788973:\n-----------------------------------------------------------------\n\nr=honzab\n\n::: netwerk/protocol/http/nsHttpConnection.h\n@@ +282,1 @@\n>  };\n\nJust put this enum into the nsHttpConnection class declaration and give it a name (like EUtilizationTelemetry).\n\n::: toolkit/components/telemetry/Histograms.json\n@@ +651,5 @@\n>    },\n> +  \"HTTP_CONNECTIONS_USAGE\": {\n> +    \"kind\": \"enumerated\",\n> +    \"n_values\": 4,\n> +    \"description\": \"utilized primary connection. never used primary connection, utilized backup connection, never used backup connection\"\n\nI think you may add '\"extended_statistics_ok\": true,'", "raw_text": "Review of attachment 788973:\n-----------------------------------------------------------------\n\nr=honzab\n\n::: netwerk/protocol/http/nsHttpConnection.h\n@@ +282,1 @@\n>  };\n\nJust put this enum into the nsHttpConnection class declaration and give it a name (like EUtilizationTelemetry).\n\n::: toolkit/components/telemetry/Histograms.json\n@@ +651,5 @@\n>    },\n> +  \"HTTP_CONNECTIONS_USAGE\": {\n> +    \"kind\": \"enumerated\",\n> +    \"n_values\": 4,\n> +    \"description\": \"utilized primary connection. never used primary connection, utilized backup connection, never used backup connection\"\n\nI think you may add '\"extended_statistics_ok\": true,'", "creation_time": "2013-08-13T12:50:06Z", "bug_id": 671568, "id": 7741984, "tags": [], "is_private": false, "count": 9, "author": "honzab.moz@firemni.cz", "creator": "honzab.moz@firemni.cz"}, {"bug_id": 671568, "id": 7742088, "count": 10, "is_private": false, "tags": [], "attachment_id": null, "time": "2013-08-13T13:16:42Z", "text": "Thanks, I will resend soon. Until then, could you explain me please what \"extended_statistics_ok\" does? (the name is suggestive of more detailed data, not enough for me)", "creation_time": "2013-08-13T13:16:42Z", "raw_text": "Thanks, I will resend soon. Until then, could you explain me please what \"extended_statistics_ok\" does? (the name is suggestive of more detailed data, not enough for me)", "author": "robertbindar@gmail.com", "creator": "robertbindar@gmail.com"}, {"raw_text": "All the histograms in Histograms.json with this \"extended_statistics_ok\" option are exponential, I also get an error adding this (\"KeyError: u'extended_statistics_ok not permitted for HTTP_CONNECTIONS_USAGE'\"), are you sure it's suitable for this kind of histogram?", "creation_time": "2013-08-13T13:39:58Z", "time": "2013-08-13T13:39:58Z", "attachment_id": null, "text": "All the histograms in Histograms.json with this \"extended_statistics_ok\" option are exponential, I also get an error adding this (\"KeyError: u'extended_statistics_ok not permitted for HTTP_CONNECTIONS_USAGE'\"), are you sure it's suitable for this kind of histogram?", "id": 7742172, "is_private": false, "count": 11, "tags": [], "bug_id": 671568, "author": "robertbindar@gmail.com", "creator": "robertbindar@gmail.com"}, {"author": "honzab.moz@firemni.cz", "creator": "honzab.moz@firemni.cz", "raw_text": "Yep, then just leave the probe as is.  Thanks.", "creation_time": "2013-08-13T13:41:54Z", "attachment_id": null, "time": "2013-08-13T13:41:54Z", "text": "Yep, then just leave the probe as is.  Thanks.", "id": 7742175, "tags": [], "count": 12, "is_private": false, "bug_id": 671568}, {"text": "Created attachment 789591\nbackup vs primary connections usage\n\nr=honzab", "attachment_id": 789591, "time": "2013-08-13T14:48:18Z", "creation_time": "2013-08-13T14:48:18Z", "raw_text": "r=honzab", "bug_id": 671568, "tags": [], "is_private": false, "count": 13, "id": 7742461, "creator": "robertbindar@gmail.com", "author": "robertbindar@gmail.com"}, {"creation_time": "2013-08-13T14:55:04Z", "raw_text": "I want to implement the others too, could you be a little more specific please? Necko is still huge for me, I will do my best to understand as much as I could, therefore some starting points would be great.", "author": "robertbindar@gmail.com", "time": "2013-08-13T14:55:04Z", "attachment_id": null, "creator": "robertbindar@gmail.com", "text": "I want to implement the others too, could you be a little more specific please? Necko is still huge for me, I will do my best to understand as much as I could, therefore some starting points would be great.", "id": 7742492, "tags": [], "count": 14, "is_private": false, "bug_id": 671568}, {"is_private": false, "count": 15, "tags": [], "id": 7742680, "bug_id": 671568, "raw_text": "(In reply to Robert Bindar from comment #14)\n> I want to implement the others too, \n\nWhat do you mean exactly?\n\n> could you be a little more specific\n> please? \n\nOn what?\n\n> Necko is still huge for me, I will do my best to understand as much\n> as I could, therefore some starting points would be great.\n\nI'll gladly help, just be more specific please :)", "creation_time": "2013-08-13T15:28:17Z", "text": "(In reply to Robert Bindar from comment #14)\n> I want to implement the others too, \n\nWhat do you mean exactly?\n\n> could you be a little more specific\n> please? \n\nOn what?\n\n> Necko is still huge for me, I will do my best to understand as much\n> as I could, therefore some starting points would be great.\n\nI'll gladly help, just be more specific please :)", "attachment_id": null, "time": "2013-08-13T15:28:17Z", "creator": "honzab.moz@firemni.cz", "author": "honzab.moz@firemni.cz"}, {"bug_id": 671568, "id": 7742793, "count": 16, "is_private": false, "tags": [], "time": "2013-08-13T15:47:14Z", "attachment_id": null, "text": "There are 3 more subtasks to do as I can see.\n\n> - nsHttpTransaction per nsHttpConnection cumulative utilization (through\n> pipeline objects)\n\nI don't understand the \"through pipeline objects\" part.\n\n> - nsHttpTransaction per nsHttpConnection per class utilization\n\nPer class utilization? What does this mean, how many nsHttpTransactions were attached to a nsHttpConnection?\n\n> - transaction dispatch result rates: create a connection / reuse an idle\n> connection / dispatch to a pipeline / queue\n \nI didn't get that at all. Can you give me a use-case or something to clarify the task please?", "creation_time": "2013-08-13T15:47:14Z", "raw_text": "There are 3 more subtasks to do as I can see.\n\n> - nsHttpTransaction per nsHttpConnection cumulative utilization (through\n> pipeline objects)\n\nI don't understand the \"through pipeline objects\" part.\n\n> - nsHttpTransaction per nsHttpConnection per class utilization\n\nPer class utilization? What does this mean, how many nsHttpTransactions were attached to a nsHttpConnection?\n\n> - transaction dispatch result rates: create a connection / reuse an idle\n> connection / dispatch to a pipeline / queue\n \nI didn't get that at all. Can you give me a use-case or something to clarify the task please?", "author": "robertbindar@gmail.com", "creator": "robertbindar@gmail.com"}, {"text": "(In reply to Robert Bindar from comment #16)\n> There are 3 more subtasks to do as I can see.\n> \n> > - nsHttpTransaction per nsHttpConnection cumulative utilization (through\n> > pipeline objects)\n> \n> I don't understand the \"through pipeline objects\" part.\n\nDon't bother right now.  This was for case we allow pipelining by default.  I don't recall now what that means anyway ;)\n\n> \n> > - nsHttpTransaction per nsHttpConnection per class utilization\n> \n> Per class utilization? What does this mean, how many nsHttpTransactions were\n> attached to a nsHttpConnection?\n\nNo. We have so called \"class\" that classifies a transaction by its type (image/html/css or js/etc).\n\n> \n> > - transaction dispatch result rates: create a connection / reuse an idle\n> > connection / dispatch to a pipeline / queue\n>  \n> I didn't get that at all. Can you give me a use-case or something to clarify\n> the task please?\n\nAn http transaction is created by an http channel and is then responsible to do the http request and parse the http response.  It goes to the http transaction scheduler where we:\n- attempt to request important stuff sooner then less important\n- obey per host and global connection limits\n\nSo, a transaction on it's first attempt to do the request to the server may end up in one of the following states:\n- be dispatched on an idle connection (or added to a pipeline)\n- creates a new connection and is dispatched on that new connection\n- queued for later since we are on the limits (no idle connection and cannot create new since we would go over the limit)", "time": "2013-08-20T12:04:43Z", "attachment_id": null, "raw_text": "(In reply to Robert Bindar from comment #16)\n> There are 3 more subtasks to do as I can see.\n> \n> > - nsHttpTransaction per nsHttpConnection cumulative utilization (through\n> > pipeline objects)\n> \n> I don't understand the \"through pipeline objects\" part.\n\nDon't bother right now.  This was for case we allow pipelining by default.  I don't recall now what that means anyway ;)\n\n> \n> > - nsHttpTransaction per nsHttpConnection per class utilization\n> \n> Per class utilization? What does this mean, how many nsHttpTransactions were\n> attached to a nsHttpConnection?\n\nNo. We have so called \"class\" that classifies a transaction by its type (image/html/css or js/etc).\n\n> \n> > - transaction dispatch result rates: create a connection / reuse an idle\n> > connection / dispatch to a pipeline / queue\n>  \n> I didn't get that at all. Can you give me a use-case or something to clarify\n> the task please?\n\nAn http transaction is created by an http channel and is then responsible to do the http request and parse the http response.  It goes to the http transaction scheduler where we:\n- attempt to request important stuff sooner then less important\n- obey per host and global connection limits\n\nSo, a transaction on it's first attempt to do the request to the server may end up in one of the following states:\n- be dispatched on an idle connection (or added to a pipeline)\n- creates a new connection and is dispatched on that new connection\n- queued for later since we are on the limits (no idle connection and cannot create new since we would go over the limit)", "creation_time": "2013-08-20T12:04:43Z", "bug_id": 671568, "count": 17, "is_private": false, "tags": [], "id": 7767324, "creator": "honzab.moz@firemni.cz", "author": "honzab.moz@firemni.cz"}, {"tags": [], "count": 18, "is_private": false, "id": 12659138, "bug_id": 671568, "raw_text": "Bulk change to priority: https://bugzilla.mozilla.org/show_bug.cgi?id=1399258", "creation_time": "2017-09-13T18:41:41Z", "creator": "bug-husbandry-bot@mozilla.bugs", "text": "Bulk change to priority: https://bugzilla.mozilla.org/show_bug.cgi?id=1399258", "author": "bug-husbandry-bot@mozilla.bugs", "attachment_id": null, "time": "2017-09-13T18:41:41Z"}]}}, "comments": {}}