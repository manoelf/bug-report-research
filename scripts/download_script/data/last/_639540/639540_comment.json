{"comments": {}, "bugs": {"639540": {"comments": [{"author": "khuey@kylehuey.com", "count": 0, "creator": "khuey@kylehuey.com", "tags": [], "bug_id": 639540, "id": 5327578, "raw_text": "I can't think of any use case for continuing to use a moz-filedata URL after it's been revoked.  Instead of throwing entries out of the hashtable when RevokeObjectURL is called we could instead null mFile and then if that entry is requested later print a warning to the console.\n\nAt the moment there's essentially no way to tell that the load failed because you revoked the URL without a debug build.", "creation_time": "2011-03-07T18:17:16Z", "text": "I can't think of any use case for continuing to use a moz-filedata URL after it's been revoked.  Instead of throwing entries out of the hashtable when RevokeObjectURL is called we could instead null mFile and then if that entry is requested later print a warning to the console.\n\nAt the moment there's essentially no way to tell that the load failed because you revoked the URL without a debug build.", "attachment_id": null, "time": "2011-03-07T18:17:16Z", "is_private": false}, {"time": "2011-03-08T01:11:48Z", "is_private": false, "attachment_id": 517590, "tags": [], "creator": "khuey@kylehuey.com", "count": 1, "bug_id": 639540, "id": 5328962, "raw_text": "", "creation_time": "2011-03-08T01:11:48Z", "text": "Created attachment 517590\nAdd a generic tagged pointer implementation", "author": "khuey@kylehuey.com"}, {"id": 5328964, "raw_text": "", "creation_time": "2011-03-08T01:12:48Z", "text": "Created attachment 517591\nReport a warning when using a revoked moz-filedata URI", "tags": [], "count": 2, "creator": "khuey@kylehuey.com", "bug_id": 639540, "author": "khuey@kylehuey.com", "is_private": false, "time": "2011-03-08T01:12:48Z", "attachment_id": 517591}, {"time": "2011-03-08T01:19:07Z", "is_private": false, "attachment_id": null, "bug_id": 639540, "tags": [], "count": 3, "creator": "khuey@kylehuey.com", "text": "These patches don't quite pass tests, but they're close.", "creation_time": "2011-03-08T01:19:07Z", "raw_text": "These patches don't quite pass tests, but they're close.", "id": 5328977, "author": "khuey@kylehuey.com"}, {"author": "khuey@kylehuey.com", "attachment_id": 517599, "text": "Created attachment 517599\nReport a warning when using a revoked moz-filedata URI", "creation_time": "2011-03-08T01:36:28Z", "is_private": false, "raw_text": "", "id": 5329023, "bug_id": 639540, "count": 4, "tags": [], "creator": "khuey@kylehuey.com", "time": "2011-03-08T01:36:28Z"}, {"bug_id": 639540, "count": 5, "tags": [], "creator": "khuey@kylehuey.com", "text": "Comment on attachment 517590\nAdd a generic tagged pointer implementation\n\nNot sure who should actually review this, bsmedberg maybe?\n\nParts of this are a little ugly; in particular the assign method is necessary because nsAutoPtr won't work with operator=.", "creation_time": "2011-03-08T01:38:22Z", "raw_text": "Not sure who should actually review this, bsmedberg maybe?\n\nParts of this are a little ugly; in particular the assign method is necessary because nsAutoPtr won't work with operator=.", "id": 5329031, "author": "khuey@kylehuey.com", "time": "2011-03-08T01:38:22Z", "is_private": false, "attachment_id": 517590}, {"tags": [], "count": 6, "creator": "khuey@kylehuey.com", "bug_id": 639540, "creation_time": "2011-03-08T01:40:52Z", "text": "Comment on attachment 517599\nReport a warning when using a revoked moz-filedata URI\n\nHere we use the tagged ptr template from the previous patch to store either the nsIDOMBlob* or a ptr to the WindowID.  We hold onto the WindowID so that we have a window to report errors to even if there's no JS on the stack (e.g. we're processing a load off of an event).", "id": 5329037, "raw_text": "Here we use the tagged ptr template from the previous patch to store either the nsIDOMBlob* or a ptr to the WindowID.  We hold onto the WindowID so that we have a window to report errors to even if there's no JS on the stack (e.g. we're processing a load off of an event).", "author": "khuey@kylehuey.com", "time": "2011-03-08T01:40:52Z", "is_private": false, "attachment_id": 517599}, {"time": "2011-03-08T16:22:56Z", "is_private": false, "attachment_id": 517590, "bug_id": 639540, "tags": [], "creator": "khuey@kylehuey.com", "count": 7, "raw_text": "Doesn't quite work, this dies on opt.", "id": 5330256, "text": "Comment on attachment 517590\nAdd a generic tagged pointer implementation\n\nDoesn't quite work, this dies on opt.", "creation_time": "2011-03-08T16:22:56Z", "author": "khuey@kylehuey.com"}, {"attachment_id": 517867, "is_private": false, "time": "2011-03-08T22:08:35Z", "author": "khuey@kylehuey.com", "text": "Created attachment 517867\nAdd a generic tagged pointer implementation", "creation_time": "2011-03-08T22:08:35Z", "raw_text": "", "id": 5331480, "bug_id": 639540, "creator": "khuey@kylehuey.com", "count": 8, "tags": []}, {"attachment_id": 517867, "time": "2011-03-08T22:09:35Z", "is_private": false, "author": "khuey@kylehuey.com", "bug_id": 639540, "count": 9, "tags": [], "creator": "khuey@kylehuey.com", "text": "Comment on attachment 517867\nAdd a generic tagged pointer implementation\n\nThis one is better.  Turns out that NS_PTR_TO_INT32 isn't the best thing to use on a 64 bit system.  PRUword to the rescue!", "creation_time": "2011-03-08T22:09:35Z", "raw_text": "This one is better.  Turns out that NS_PTR_TO_INT32 isn't the best thing to use on a 64 bit system.  PRUword to the rescue!", "id": 5331483}, {"attachment_id": 517867, "is_private": false, "time": "2011-03-11T19:40:50Z", "author": "bzbarsky@mit.edu", "text": "Comment on attachment 517867\nAdd a generic tagged pointer implementation\n\nYou're being a bit inconsistent with PRUptrdiff vs PRUword.\n\nYou should probably PR_STATIC_ASSERT(sizeof(T1) == sizeof(void*)) and likewise for T2 an PRUword.\n\nSeems ok other than that.. could use a comment about how to use it.\n\nThis also assumes that tagging T1 and T2 is always safe, of course.  I wish we could statically assert that somehow.  :(  That could badly bite someone (e.g. if one of T1 or T2 is a TaggedPtr!).", "creation_time": "2011-03-11T19:40:50Z", "raw_text": "You're being a bit inconsistent with PRUptrdiff vs PRUword.\n\nYou should probably PR_STATIC_ASSERT(sizeof(T1) == sizeof(void*)) and likewise for T2 an PRUword.\n\nSeems ok other than that.. could use a comment about how to use it.\n\nThis also assumes that tagging T1 and T2 is always safe, of course.  I wish we could statically assert that somehow.  :(  That could badly bite someone (e.g. if one of T1 or T2 is a TaggedPtr!).", "id": 5339670, "bug_id": 639540, "count": 10, "creator": "bzbarsky@mit.edu", "tags": []}, {"creation_time": "2011-03-11T19:43:34Z", "text": "Comment on attachment 517599\nReport a warning when using a revoked moz-filedata URI\n\nWe could just avoid the heap allocations is we assumed window IDs are only 63 bits and left-shifted it then tagged with a one low bit.\n\nBut really, is the size of this struct that important?  Can't we just use a basic discriminated union with a boolean discriminator?  Or even better use mPrincipal as the discriminator?  Or can that be null sometimes even before the entry is revoked?", "id": 5339682, "raw_text": "We could just avoid the heap allocations is we assumed window IDs are only 63 bits and left-shifted it then tagged with a one low bit.\n\nBut really, is the size of this struct that important?  Can't we just use a basic discriminated union with a boolean discriminator?  Or even better use mPrincipal as the discriminator?  Or can that be null sometimes even before the entry is revoked?", "count": 11, "tags": [], "creator": "bzbarsky@mit.edu", "bug_id": 639540, "author": "bzbarsky@mit.edu", "is_private": false, "time": "2011-03-11T19:43:34Z", "attachment_id": 517599}, {"author": "khuey@kylehuey.com", "attachment_id": null, "bug_id": 639540, "creator": "khuey@kylehuey.com", "count": 12, "time": "2011-03-11T20:37:05Z", "tags": [], "raw_text": "(In reply to comment #10)\n> Comment on attachment 517867 [details]\n> Add a generic tagged pointer implementation\n> \n> You're being a bit inconsistent with PRUptrdiff vs PRUword.\n\nYeah, that's artifacts mostly.\n\n> You should probably PR_STATIC_ASSERT(sizeof(T1) == sizeof(void*)) and likewise\n> for T2 an PRUword.\n\nIndeed.\n\n> Seems ok other than that.. could use a comment about how to use it.\n> \n> This also assumes that tagging T1 and T2 is always safe, of course.  I wish we\n> could statically assert that somehow.  :(  That could badly bite someone (e.g.\n> if one of T1 or T2 is a TaggedPtr!).\n\nYeah.  We could definitely check at runtime though ...\n\n\n(In reply to comment #11)\n> Comment on attachment 517599 [details]\n> Report a warning when using a revoked moz-filedata URI\n> \n> We could just avoid the heap allocations is we assumed window IDs are only 63\n> bits and left-shifted it then tagged with a one low bit.\n> \n> But really, is the size of this struct that important?  Can't we just use a\n> basic discriminated union with a boolean discriminator?  Or even better use\n> mPrincipal as the discriminator?  Or can that be null sometimes even before the\n> entry is revoked?\n\nWell, we could avoid heap allocations on 64 bit systems ...  Window IDs are sequential, right?\n\nIdk that size is that important, our chat on IRC about this made me think that minimizing size was good.  I think we could use mPrincipal as the discriminator, need to read some code though.", "id": 5339847, "text": "(In reply to comment #10)\n> Comment on attachment 517867 [details]\n> Add a generic tagged pointer implementation\n> \n> You're being a bit inconsistent with PRUptrdiff vs PRUword.\n\nYeah, that's artifacts mostly.\n\n> You should probably PR_STATIC_ASSERT(sizeof(T1) == sizeof(void*)) and likewise\n> for T2 an PRUword.\n\nIndeed.\n\n> Seems ok other than that.. could use a comment about how to use it.\n> \n> This also assumes that tagging T1 and T2 is always safe, of course.  I wish we\n> could statically assert that somehow.  :(  That could badly bite someone (e.g.\n> if one of T1 or T2 is a TaggedPtr!).\n\nYeah.  We could definitely check at runtime though ...\n\n\n(In reply to comment #11)\n> Comment on attachment 517599 [details]\n> Report a warning when using a revoked moz-filedata URI\n> \n> We could just avoid the heap allocations is we assumed window IDs are only 63\n> bits and left-shifted it then tagged with a one low bit.\n> \n> But really, is the size of this struct that important?  Can't we just use a\n> basic discriminated union with a boolean discriminator?  Or even better use\n> mPrincipal as the discriminator?  Or can that be null sometimes even before the\n> entry is revoked?\n\nWell, we could avoid heap allocations on 64 bit systems ...  Window IDs are sequential, right?\n\nIdk that size is that important, our chat on IRC about this made me think that minimizing size was good.  I think we could use mPrincipal as the discriminator, need to read some code though.", "is_private": false, "creation_time": "2011-03-11T20:37:05Z"}, {"attachment_id": null, "time": "2011-03-11T20:41:19Z", "is_private": false, "author": "bzbarsky@mit.edu", "count": 13, "tags": [], "creator": "bzbarsky@mit.edu", "bug_id": 639540, "id": 5339855, "raw_text": "> Well, we could avoid heap allocations on 64 bit systems ...  Window IDs are\n> sequential, right?\n\nYes, but there's no particular reason I see to not have 32 bytes of wasted space for non-revoked filedatas on 32-bit systems.", "creation_time": "2011-03-11T20:41:19Z", "text": "> Well, we could avoid heap allocations on 64 bit systems ...  Window IDs are\n> sequential, right?\n\nYes, but there's no particular reason I see to not have 32 bytes of wasted space for non-revoked filedatas on 32-bit systems."}, {"count": 14, "creator": "bug-husbandry-bot@mozilla.bugs", "tags": [], "bug_id": 639540, "creation_time": "2018-06-29T04:59:03Z", "text": "https://bugzilla.mozilla.org/show_bug.cgi?id=1472046\n\nMove all DOM bugs that haven\u2019t been updated in more than 3 years and has no one currently assigned to P5.\n\nIf you have questions, please contact :mdaly.", "id": 13436827, "raw_text": "https://bugzilla.mozilla.org/show_bug.cgi?id=1472046\n\nMove all DOM bugs that haven\u2019t been updated in more than 3 years and has no one currently assigned to P5.\n\nIf you have questions, please contact :mdaly.", "author": "bug-husbandry-bot@mozilla.bugs", "time": "2018-06-29T04:59:03Z", "is_private": false, "attachment_id": null}]}}}