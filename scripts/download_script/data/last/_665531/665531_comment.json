{"bugs": {"665531": {"comments": [{"author": "ben.bucksch@beonex.com", "creation_time": "2011-06-20T13:50:31Z", "time": "2011-06-20T13:50:31Z", "creator": "ben.bucksch@beonex.com", "count": 0, "id": 5542424, "is_private": false, "tags": [], "bug_id": 665531, "text": "On Windows, we let the OS know that this file is downloaded from the Internet. This causes Windows Explorer warn users when they start a downloaded executable.\n\nOn Linux, we have Extended Attributes in the filesystem. If available, we can set the attribute \"user.xdg.origin.url\", which is defined by FreeDesktop as\n\"Set on a file downloaded from a url. Its value should equal the url it was downloaded from.\" <http://www.freedesktop.org/wiki/CommonExtendedAttributes>\n\nThis may or may not cause the file manager (whatever the user uses, e.g. GNOME Nautilus, KDE Dolphin etc.) to issue a warning, that's up to the file manager. It can also offer other things, e.g. \"redownload\" or whatever.\n\nI personally would file it useful, because I often save files for personal archive and usage, but then later want to share it with friends via IRC or Web. This is true for particularly interesting articles, comics, and maybe programs. Instead of uploading my copy of the file, and potentially violating copyright with that, I'd prefer to give my friends the original URL. But to find it later, I need to both save the file and bookmark it, and then later reassociate them (given that they are in different stores: filesystem and browser bookmarks). The \"user.xdg.origin.url\" attribute, automatically saved by Firefox, would solve this problem for me. I could just check where I got the file from, and share that URL.\n\n(In fact, if some software implements a \"Share\" function, it could recognize this and share the URL instead. \"Share\" options seem to pop up everywhere nowadays.)\n\nBen", "raw_text": "On Windows, we let the OS know that this file is downloaded from the Internet. This causes Windows Explorer warn users when they start a downloaded executable.\n\nOn Linux, we have Extended Attributes in the filesystem. If available, we can set the attribute \"user.xdg.origin.url\", which is defined by FreeDesktop as\n\"Set on a file downloaded from a url. Its value should equal the url it was downloaded from.\" <http://www.freedesktop.org/wiki/CommonExtendedAttributes>\n\nThis may or may not cause the file manager (whatever the user uses, e.g. GNOME Nautilus, KDE Dolphin etc.) to issue a warning, that's up to the file manager. It can also offer other things, e.g. \"redownload\" or whatever.\n\nI personally would file it useful, because I often save files for personal archive and usage, but then later want to share it with friends via IRC or Web. This is true for particularly interesting articles, comics, and maybe programs. Instead of uploading my copy of the file, and potentially violating copyright with that, I'd prefer to give my friends the original URL. But to find it later, I need to both save the file and bookmark it, and then later reassociate them (given that they are in different stores: filesystem and browser bookmarks). The \"user.xdg.origin.url\" attribute, automatically saved by Firefox, would solve this problem for me. I could just check where I got the file from, and share that URL.\n\n(In fact, if some software implements a \"Share\" function, it could recognize this and share the URL instead. \"Share\" options seem to pop up everywhere nowadays.)\n\nBen", "attachment_id": null}, {"is_private": false, "count": 1, "id": 8017380, "author": "dan+moz-bugs@fuhry.com", "creator": "dan+moz-bugs@fuhry.com", "time": "2013-10-29T17:50:53Z", "creation_time": "2013-10-29T17:50:53Z", "raw_text": "I'm poking around the source to see where this can be added, but not going to assign myself this bug as I'm unfamiliar with the Firefox source and may or may not actually get around to implementing it. Therefore, if someone else wants to take this, go right ahead.", "attachment_id": null, "text": "I'm poking around the source to see where this can be added, but not going to assign myself this bug as I'm unfamiliar with the Firefox source and may or may not actually get around to implementing it. Therefore, if someone else wants to take this, go right ahead.", "bug_id": 665531, "tags": []}, {"bug_id": 665531, "text": "Any progress on this? I can see that curl, wget and chromium are all supporting this", "tags": [], "attachment_id": null, "raw_text": "Any progress on this? I can see that curl, wget and chromium are all supporting this", "time": "2017-04-11T10:15:28Z", "creation_time": "2017-04-11T10:15:28Z", "creator": "bigon@bigon.be", "author": "bigon@bigon.be", "id": 12224728, "count": 2, "is_private": false}, {"attachment_id": null, "raw_text": "This issue has been raised on Debian mailing lists, and I consider it a security+privacy vulnerability in Chromium.  Thus, it should NOT be included in Firefox.\n\nThe main requested functionality (warning about files that come from the Internet) could be handled by a boolean; that has no issues I can think of.", "text": "This issue has been raised on Debian mailing lists, and I consider it a security+privacy vulnerability in Chromium.  Thus, it should NOT be included in Firefox.\n\nThe main requested functionality (warning about files that come from the Internet) could be handled by a boolean; that has no issues I can think of.", "bug_id": 665531, "tags": [], "is_private": false, "id": 12904257, "count": 3, "creator": "kilobyte@angband.pl", "creation_time": "2017-12-07T06:45:44Z", "time": "2017-12-07T06:45:44Z", "author": "kilobyte@angband.pl"}, {"count": 4, "id": 12904573, "is_private": false, "time": "2017-12-07T09:45:57Z", "creation_time": "2017-12-07T09:45:57Z", "creator": "mcepl@cepl.eu", "author": "mcepl@cepl.eu", "attachment_id": null, "raw_text": "(In reply to Adam Borowski from comment #3)\n> I consider it a security+privacy vulnerability in Chromium.\n\nCould you elaborate, please? I would love to have this functionality myself when I download a file I often forget where I get it from. What\u2019s so wrong with having this record? Also, it very well can be optional/turned-off-per-default, but I really don\u2019t see the need.", "bug_id": 665531, "text": "(In reply to Adam Borowski from comment #3)\n> I consider it a security+privacy vulnerability in Chromium.\n\nCould you elaborate, please? I would love to have this functionality myself when I download a file I often forget where I get it from. What\u2019s so wrong with having this record? Also, it very well can be optional/turned-off-per-default, but I really don\u2019t see the need.", "tags": []}, {"count": 5, "id": 12904580, "attachment_id": null, "is_private": false, "raw_text": "Adam, a boolean would fail the goals stats in the initial description.\n\nPlease note that the attribute is not part of the file itself, but stored in the filesystem. If you pass on the file to somebody else, the attribute would not be there. So, I cannot see the privacy issue, given that the information stays on your local computer.", "time": "2017-12-07T09:50:43Z", "creation_time": "2017-12-07T09:50:43Z", "creator": "ben.bucksch@beonex.com", "text": "Adam, a boolean would fail the goals stats in the initial description.\n\nPlease note that the attribute is not part of the file itself, but stored in the filesystem. If you pass on the file to somebody else, the attribute would not be there. So, I cannot see the privacy issue, given that the information stays on your local computer.", "bug_id": 665531, "tags": [], "author": "ben.bucksch@beonex.com"}, {"tags": [], "bug_id": 665531, "text": "Chromium on Windows doesn't suffer from this problem:\n\n\ua730\u026a\u029f\u1d07: user.Zone.Identifier: [ZoneTransfer]\nZoneId=3\n\nIe, it saves only whether the file came from your computer, local network, or the Interwebs at large.\n\n> If you pass on the file to somebody else, the attribute would not be there.\n\nDepends on the way you use to copy: cp and rsync need an option (but they don't copy any other metadata without being told to do so), mv always preserves xattrs even when moving between filesystems.\n\nAnd if you save directly to an USB stick or a remote filesystem, the xattr will be there.\n\n(Note: tmpfs supports xattrs but specifically denies the user. namespace to avoid this hole as /tmp is world-readable.)\n\n> So, I cannot see the privacy issue, given that the information stays on your local computer.\n\nLaptops and phones get seized/imaged/stolen quite a lot.  And this type of metadata is really well hidden from the user (even a bunch of operating system developers, some of which do security and/or filesystems, were surprised by this, which means an ordinary user has no way whatsoever to find out this is going on).\n\nEven worse, Chromium does so even in that fake \"incognito mode\", and this metadata is not cleared when you clear history.\n\ncurl does this right (as an opt-in option), chromium and wget have a privacy hole.", "attachment_id": null, "raw_text": "Chromium on Windows doesn't suffer from this problem:\n\n\ua730\u026a\u029f\u1d07: user.Zone.Identifier: [ZoneTransfer]\nZoneId=3\n\nIe, it saves only whether the file came from your computer, local network, or the Interwebs at large.\n\n> If you pass on the file to somebody else, the attribute would not be there.\n\nDepends on the way you use to copy: cp and rsync need an option (but they don't copy any other metadata without being told to do so), mv always preserves xattrs even when moving between filesystems.\n\nAnd if you save directly to an USB stick or a remote filesystem, the xattr will be there.\n\n(Note: tmpfs supports xattrs but specifically denies the user. namespace to avoid this hole as /tmp is world-readable.)\n\n> So, I cannot see the privacy issue, given that the information stays on your local computer.\n\nLaptops and phones get seized/imaged/stolen quite a lot.  And this type of metadata is really well hidden from the user (even a bunch of operating system developers, some of which do security and/or filesystems, were surprised by this, which means an ordinary user has no way whatsoever to find out this is going on).\n\nEven worse, Chromium does so even in that fake \"incognito mode\", and this metadata is not cleared when you clear history.\n\ncurl does this right (as an opt-in option), chromium and wget have a privacy hole.", "creator": "kilobyte@angband.pl", "time": "2017-12-09T02:25:19Z", "creation_time": "2017-12-09T02:25:19Z", "author": "kilobyte@angband.pl", "is_private": false, "count": 6, "id": 12910469}, {"id": 12910744, "count": 7, "is_private": false, "author": "mcepl@cepl.eu", "creation_time": "2017-12-09T10:56:52Z", "time": "2017-12-09T10:56:52Z", "creator": "mcepl@cepl.eu", "raw_text": "(In reply to Adam Borowski from comment #6)\n> > So, I cannot see the privacy issue, given that the information stays on your local computer.\n> \n> Laptops and phones get seized/imaged/stolen quite a lot.  And this type of\n> metadata is really well hidden from the user (even a bunch of operating\n> system developers, some of which do security and/or filesystems, were\n> surprised by this, which means an ordinary user has no way whatsoever to\n> find out this is going on).\n\nIf you are this paranoid (or even if you actually really do need this level of privacy), then I guess you don\u2019t rely on defaults, do you?\n\n> curl does this right (as an opt-in option), chromium and wget have a privacy\n> hole.\n\nAs I said, I have no problem with opt-in option.", "attachment_id": null, "bug_id": 665531, "text": "(In reply to Adam Borowski from comment #6)\n> > So, I cannot see the privacy issue, given that the information stays on your local computer.\n> \n> Laptops and phones get seized/imaged/stolen quite a lot.  And this type of\n> metadata is really well hidden from the user (even a bunch of operating\n> system developers, some of which do security and/or filesystems, were\n> surprised by this, which means an ordinary user has no way whatsoever to\n> find out this is going on).\n\nIf you are this paranoid (or even if you actually really do need this level of privacy), then I guess you don\u2019t rely on defaults, do you?\n\n> curl does this right (as an opt-in option), chromium and wget have a privacy\n> hole.\n\nAs I said, I have no problem with opt-in option.", "tags": []}, {"is_private": false, "count": 8, "id": 12911243, "creator": "kilobyte@angband.pl", "time": "2017-12-09T22:34:03Z", "creation_time": "2017-12-09T22:34:03Z", "author": "kilobyte@angband.pl", "attachment_id": null, "raw_text": "> If you are this paranoid (or even if you actually really do need this level of privacy)\n\nI'd put it more on the same boat as folks using the incognito mode, or using \"Clear recent history\".  In which case, indeed, file URLs are less important, but can be sensitive even for the same file content.\n\nBut, that's not the point: this metadata is exceptionally well hidden.  A regular person knows about browser history, might or might not know about EXIF, but has no way to even suspect there's an obscure filesystem feature that can be used to smuggle information as an unprivileged user.\n\nPrinciple of least surprise.  Because when history _does_ turn out to be sensitive, you have no way to tell the user you saved it in a hidden place.\n\n> As I said, I have no problem with opt-in option.\n\nSo, what about this: by default, save only that \"ZoneId\", for consistency with Chrome/Windows and MSIE, but no full URL without a default-off option.", "bug_id": 665531, "text": "> If you are this paranoid (or even if you actually really do need this level of privacy)\n\nI'd put it more on the same boat as folks using the incognito mode, or using \"Clear recent history\".  In which case, indeed, file URLs are less important, but can be sensitive even for the same file content.\n\nBut, that's not the point: this metadata is exceptionally well hidden.  A regular person knows about browser history, might or might not know about EXIF, but has no way to even suspect there's an obscure filesystem feature that can be used to smuggle information as an unprivileged user.\n\nPrinciple of least surprise.  Because when history _does_ turn out to be sensitive, you have no way to tell the user you saved it in a hidden place.\n\n> As I said, I have no problem with opt-in option.\n\nSo, what about this: by default, save only that \"ZoneId\", for consistency with Chrome/Windows and MSIE, but no full URL without a default-off option.", "tags": []}, {"raw_text": "If your own computer is no longer secure, you have bigger problems than this attribute. Your browser logs all web requests in the history file, and that is saved to disk. Even if you clean the history or delete the file, the remnants of the blocks of that file may well be still on your physical disk somewhere. If you use an encrypted file system, then you don't need to worry about this bug, either. Firefox presumes your own computer is safe - because all odds are off, if it isn't.\n\nSo, any argument about your own filesystem is moot.\n\nAs mentioned, sending a file by Internet, e.g. by email, xchat or HTTP upload, won't copy the attributes.\n\nI don't see a case where you'd trust the recipient with the content of a file, but not where you got the file from. If you're this worried about privacy, then you better know your commandline tools and its flags and know how to see attributes and avoid copying them.\n\nAs mentioned above, this feature is useful for normal users, and can even increase security, because downstream applications can consider where the file comes from.\n\nAnd I don't need to store all downloads twice, once as file and once as bookmark.", "attachment_id": null, "tags": [], "text": "If your own computer is no longer secure, you have bigger problems than this attribute. Your browser logs all web requests in the history file, and that is saved to disk. Even if you clean the history or delete the file, the remnants of the blocks of that file may well be still on your physical disk somewhere. If you use an encrypted file system, then you don't need to worry about this bug, either. Firefox presumes your own computer is safe - because all odds are off, if it isn't.\n\nSo, any argument about your own filesystem is moot.\n\nAs mentioned, sending a file by Internet, e.g. by email, xchat or HTTP upload, won't copy the attributes.\n\nI don't see a case where you'd trust the recipient with the content of a file, but not where you got the file from. If you're this worried about privacy, then you better know your commandline tools and its flags and know how to see attributes and avoid copying them.\n\nAs mentioned above, this feature is useful for normal users, and can even increase security, because downstream applications can consider where the file comes from.\n\nAnd I don't need to store all downloads twice, once as file and once as bookmark.", "bug_id": 665531, "id": 12911689, "count": 9, "is_private": false, "author": "ben.bucksch@beonex.com", "creation_time": "2017-12-10T16:58:24Z", "time": "2017-12-10T16:58:24Z", "creator": "ben.bucksch@beonex.com"}, {"author": "ben.bucksch@beonex.com", "time": "2017-12-10T16:59:47Z", "creation_time": "2017-12-10T16:59:47Z", "creator": "ben.bucksch@beonex.com", "count": 10, "id": 12911690, "is_private": false, "tags": [], "bug_id": 665531, "text": "We should probably have a pref to turn this behavior off. Default should be on.", "raw_text": "We should probably have a pref to turn this behavior off. Default should be on.", "attachment_id": null}, {"author": "kilobyte@angband.pl", "creation_time": "2017-12-17T12:22:53Z", "time": "2017-12-17T12:22:53Z", "creator": "kilobyte@angband.pl", "count": 11, "id": 12922101, "is_private": false, "tags": [], "bug_id": 665531, "text": "> Your browser logs all web requests in the history file, and that is saved to disk.\n\nThat's why there's \"clear history\", Incognito Mode, and so on.\n\n> Even if you clean the history or delete the file, the remnants of the blocks of that file may well be still on your physical disk somewhere.\n\nOn a modern SSD, while it's near impossible to ensure a given block is indeed physically gone, even in normal usage with no extra steps, the chances for the old block being erased away are so high that even forensic people for high-value targets usually don't bother trying.  And even if they do, it involves asking the manufacturer for special firmware and tools to access raw flash chips, with a very miniscule chance of success.  Some extra churn (which happens naturally if you use the disk) makes that chance zero.\n\nCertain filesystems might preserve tails of a block when a file shrinks (truncate), but that's not a real concern with the way Firefox accesses the database.\n\n> As mentioned, sending a file by Internet, e.g. by email, xchat or HTTP upload, won't copy the attributes.\n\nBut saving to an USB stick, a phone or a laptop do preserve xattrs (depending on used filesystem and, if moved after the download, program used to copy -- mv vs cp sans options, etc).\n\n> If you're this worried about privacy, then you better know your commandline tools and its flags\n\nI'm a fricking Debian Developer who's a regular on filesystem related mailing lists and dabbles with filesystem-related kernel patches from time to time, and I didn't know about this user.-namespace smuggling.  This is not anything like common knowledge -- EXIF is bad enough, despite coming within the file.\n\n> As mentioned above, this feature is useful for normal users\n\nNone of them have a chance of knowing this.\n\n> downstream applications can consider where the file comes from.\n\nThat's ZoneId which has no privacy hole.", "raw_text": "> Your browser logs all web requests in the history file, and that is saved to disk.\n\nThat's why there's \"clear history\", Incognito Mode, and so on.\n\n> Even if you clean the history or delete the file, the remnants of the blocks of that file may well be still on your physical disk somewhere.\n\nOn a modern SSD, while it's near impossible to ensure a given block is indeed physically gone, even in normal usage with no extra steps, the chances for the old block being erased away are so high that even forensic people for high-value targets usually don't bother trying.  And even if they do, it involves asking the manufacturer for special firmware and tools to access raw flash chips, with a very miniscule chance of success.  Some extra churn (which happens naturally if you use the disk) makes that chance zero.\n\nCertain filesystems might preserve tails of a block when a file shrinks (truncate), but that's not a real concern with the way Firefox accesses the database.\n\n> As mentioned, sending a file by Internet, e.g. by email, xchat or HTTP upload, won't copy the attributes.\n\nBut saving to an USB stick, a phone or a laptop do preserve xattrs (depending on used filesystem and, if moved after the download, program used to copy -- mv vs cp sans options, etc).\n\n> If you're this worried about privacy, then you better know your commandline tools and its flags\n\nI'm a fricking Debian Developer who's a regular on filesystem related mailing lists and dabbles with filesystem-related kernel patches from time to time, and I didn't know about this user.-namespace smuggling.  This is not anything like common knowledge -- EXIF is bad enough, despite coming within the file.\n\n> As mentioned above, this feature is useful for normal users\n\nNone of them have a chance of knowing this.\n\n> downstream applications can consider where the file comes from.\n\nThat's ZoneId which has no privacy hole.", "attachment_id": null}, {"author": "francois@fmarier.org", "creation_time": "2019-03-22T01:47:31Z", "time": "2019-03-22T01:47:31Z", "creator": "francois@fmarier.org", "id": 14003815, "count": 12, "is_private": false, "tags": [], "text": "(In reply to Adam Borowski from comment #6)\n> Chromium on Windows doesn't suffer from this problem:\n> \n> \ua730\u026a\u029f\u1d07: user.Zone.Identifier: [ZoneTransfer]\n> ZoneId=3\n\nThat's not the behaviour in the current stable version of Chrome for Windows (73.0.3683.86).\n\nIf you download the following file in normal mode:\n\n  https://pypi.org/project/canadian-ham-exam/#files\n\nthe contents of the NTFS alternate data stream will be:\n\n  [ZoneTransfer]\n  ZoneId=3\n  ReferrerUrl=https://files.pythonhosted.org/\n  HostUrl=https://files.pythonhosted.org/packages/d9/0a/d3d1290794660b7e49efe1339a3dc57e3c9b82ac7641595a485691f51ee2/canadian-ham-exam-0.2.0.tar.gz\n\nas opposed to Incognito mode where it will be:\n\n  [ZoneTransfer]\n  ZoneId=3\n  HostUrl=about:internet", "bug_id": 665531, "raw_text": "(In reply to Adam Borowski from comment #6)\n> Chromium on Windows doesn't suffer from this problem:\n> \n> \ua730\u026a\u029f\u1d07: user.Zone.Identifier: [ZoneTransfer]\n> ZoneId=3\n\nThat's not the behaviour in the current stable version of Chrome for Windows (73.0.3683.86).\n\nIf you download the following file in normal mode:\n\n  https://pypi.org/project/canadian-ham-exam/#files\n\nthe contents of the NTFS alternate data stream will be:\n\n  [ZoneTransfer]\n  ZoneId=3\n  ReferrerUrl=https://files.pythonhosted.org/\n  HostUrl=https://files.pythonhosted.org/packages/d9/0a/d3d1290794660b7e49efe1339a3dc57e3c9b82ac7641595a485691f51ee2/canadian-ham-exam-0.2.0.tar.gz\n\nas opposed to Incognito mode where it will be:\n\n  [ZoneTransfer]\n  ZoneId=3\n  HostUrl=about:internet", "attachment_id": null}, {"attachment_id": null, "raw_text": "Also, note that Chromium has now removed this metadata from Linux builds: https://chromium.googlesource.com/chromium/src/+/a9b4fb70b4318b220deee0da7b1693d16b8ed071", "tags": [], "bug_id": 665531, "text": "Also, note that Chromium has now removed this metadata from Linux builds: https://chromium.googlesource.com/chromium/src/+/a9b4fb70b4318b220deee0da7b1693d16b8ed071", "count": 13, "id": 14003861, "is_private": false, "time": "2019-03-22T02:28:21Z", "creation_time": "2019-03-22T02:28:21Z", "creator": "francois@fmarier.org", "author": "francois@fmarier.org"}, {"time": "2019-03-22T02:40:53Z", "creation_time": "2019-03-22T02:40:53Z", "creator": "kilobyte@angband.pl", "tags": [], "bug_id": 665531, "text": "Fixed in wget 1.20.1: it no longer saves this data by default, and even upon explicit request it stores only scheme/host/port for Referer, and cut down URL.  No CVE was issued but it probably should have been.\n\nGood to hear it got fixed in Chromium as well.", "author": "kilobyte@angband.pl", "count": 14, "id": 14003869, "is_private": false, "attachment_id": null, "raw_text": "Fixed in wget 1.20.1: it no longer saves this data by default, and even upon explicit request it stores only scheme/host/port for Referer, and cut down URL.  No CVE was issued but it probably should have been.\n\nGood to hear it got fixed in Chromium as well."}, {"text": "To explain my comment about CVE, so it doesn't sound like chicken little: wget _knew_ that a part of the URL was username and password because it added it itself -- thus the severity is obvious.  This differs from wget or Chromium saving an URL entirely providen by the user as the software has no way of knowing if there's indeed auth data inside (there still often is).", "bug_id": 665531, "tags": [], "attachment_id": null, "raw_text": "To explain my comment about CVE, so it doesn't sound like chicken little: wget _knew_ that a part of the URL was username and password because it added it itself -- thus the severity is obvious.  This differs from wget or Chromium saving an URL entirely providen by the user as the software has no way of knowing if there's indeed auth data inside (there still often is).", "creator": "kilobyte@angband.pl", "time": "2019-03-22T09:02:28Z", "creation_time": "2019-03-22T09:02:28Z", "author": "kilobyte@angband.pl", "is_private": false, "count": 15, "id": 14004150}]}}, "comments": {}}