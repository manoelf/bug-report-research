{"bugs": {"658883": {"comments": [{"creation_time": "2011-05-22T16:46:06Z", "creator": "majuki@yahoo.com", "text": "User-Agent:       Mozilla/5.0 (Windows; U; Windows NT 6.1; en-GB; rv:1.9.2.17) Gecko/20110420 Firefox/3.6.17 (.NET CLR 3.5.30729)\nBuild Identifier: Mozilla/5.0 (Windows; U; Windows NT 6.1; en-GB; rv:1.9.2.17) Gecko/20110420 Firefox/3.6.17 (.NET CLR 3.5.30729)\n\nWhen using the word-wrap: break-word the browser attempts to move text down a line prior to applying word-break.  I believe this to be inconsistent with the intent of word-wrap: break-word.\n\nReproducible: Always\n\nSteps to Reproduce:\n1. Enter text in a div of fixed size\n2. apply word-wrap: break-word to div\n3.\n\nActual Results:  \nText appears as, example:\n\nThe \nantidisestablishmen\ntarianism movement\n\nExpected Results:  \nText should appear as, example:\n\nThe antidisestablis\nhmentarianism \nmovement\n\nThe reason for this is that\n\nthe line appears as, example:\n\nThe|antidisestablishmentarianism|movement\n\n(| denoting acceptable break points)\nbreak-word applies when there no acceptable break points, in this case in the word antidisestablishmentarianism\n\nThis should create a new line containing\nhmentarianism|movement where either movement should be broken or put on a new line.\n\nI believe this is actually a flaw in the standard to some extent as there is no defined threshold for an acceptable break point.  Ideally a user set percentage of the line to be used should be in place.  Example:\n\nword-wrap: break-word 50%;\nWould require that 50% of the available space be used before looking for an acceptable break point.\n\nand/or\n\nword-wrap: break-word 7ch;\nWould require that break-word only be applied to words 7 characters or longer.\n\nI'm not suggesting Mozilla go outside the standard but I don't think the current implementation is correct either.", "attachment_id": null, "id": 5485382, "author": "majuki@yahoo.com", "bug_id": 658883, "raw_text": "User-Agent:       Mozilla/5.0 (Windows; U; Windows NT 6.1; en-GB; rv:1.9.2.17) Gecko/20110420 Firefox/3.6.17 (.NET CLR 3.5.30729)\nBuild Identifier: Mozilla/5.0 (Windows; U; Windows NT 6.1; en-GB; rv:1.9.2.17) Gecko/20110420 Firefox/3.6.17 (.NET CLR 3.5.30729)\n\nWhen using the word-wrap: break-word the browser attempts to move text down a line prior to applying word-break.  I believe this to be inconsistent with the intent of word-wrap: break-word.\n\nReproducible: Always\n\nSteps to Reproduce:\n1. Enter text in a div of fixed size\n2. apply word-wrap: break-word to div\n3.\n\nActual Results:  \nText appears as, example:\n\nThe \nantidisestablishmen\ntarianism movement\n\nExpected Results:  \nText should appear as, example:\n\nThe antidisestablis\nhmentarianism \nmovement\n\nThe reason for this is that\n\nthe line appears as, example:\n\nThe|antidisestablishmentarianism|movement\n\n(| denoting acceptable break points)\nbreak-word applies when there no acceptable break points, in this case in the word antidisestablishmentarianism\n\nThis should create a new line containing\nhmentarianism|movement where either movement should be broken or put on a new line.\n\nI believe this is actually a flaw in the standard to some extent as there is no defined threshold for an acceptable break point.  Ideally a user set percentage of the line to be used should be in place.  Example:\n\nword-wrap: break-word 50%;\nWould require that 50% of the available space be used before looking for an acceptable break point.\n\nand/or\n\nword-wrap: break-word 7ch;\nWould require that break-word only be applied to words 7 characters or longer.\n\nI'm not suggesting Mozilla go outside the standard but I don't think the current implementation is correct either.", "count": 0, "time": "2011-05-22T16:46:06Z", "tags": [], "is_private": false}, {"creation_time": "2011-05-22T18:58:26Z", "id": 5485442, "attachment_id": null, "text": "I think that would be an excellent addition to the standard. Manual typewriters in the last century had a similar feature: a bell would ring at a user-configurable number of characters before the end margin, so typically if a typist had begun a too-long word before the bell rang there would be a forced mid-word line break, but if the bell had already rung the typist would break before the word.\n\nEarlier versions of CSS3 text had a value \"text-wrap: unrestricted\" which would have prevented breaking at an acceptable break point before a long word, but it seems to have been omitted from the latest version.", "creator": "smontagu@smontagu.org", "author": "smontagu@smontagu.org", "raw_text": "I think that would be an excellent addition to the standard. Manual typewriters in the last century had a similar feature: a bell would ring at a user-configurable number of characters before the end margin, so typically if a typist had begun a too-long word before the bell rang there would be a forced mid-word line break, but if the bell had already rung the typist would break before the word.\n\nEarlier versions of CSS3 text had a value \"text-wrap: unrestricted\" which would have prevented breaking at an acceptable break point before a long word, but it seems to have been omitted from the latest version.", "bug_id": 658883, "count": 1, "time": "2011-05-22T18:58:26Z", "is_private": false, "tags": []}, {"creation_time": "2011-05-23T05:48:41Z", "text": "'text-wrap: unrestricted' was removed because nobody had a use case for it.\n\nI think your example is interesting, Mark, but would it not be better-served by hyphenation?", "creator": "fantasai.bugs@inkedblade.net", "attachment_id": null, "id": 5485865, "author": "fantasai.bugs@inkedblade.net", "bug_id": 658883, "raw_text": "'text-wrap: unrestricted' was removed because nobody had a use case for it.\n\nI think your example is interesting, Mark, but would it not be better-served by hyphenation?", "count": 2, "time": "2011-05-23T05:48:41Z", "tags": [], "is_private": false}, {"creation_time": "2011-05-23T07:52:27Z", "author": "majuki@yahoo.com", "creator": "majuki@yahoo.com", "text": "For that particular example perhaps, though hyphenation has it's drawbacks when changing font styles, especially dynamically.\n\nAnother example which might flush it out a bit would be:\n\ndiv {\nwidth: 95px;\ntext-align: justify;\nword-wrap: break-word;\n}\n\n<div>It's a beautiful day in the neighbourhood.</div>\n\nThis creates large gaps in the text while only wrapping the last 2 characters where one might reasonably expect it to wrap first then justify.\n\nA use case similar to this on trueachievements.com's latest blog post list is what got me interested in this issue.  Specifically where titles of a maximum length but unknown content needed to fit in a fixed width but flexible height box.  The results are wildly unpredictable currently as the title content does not necessarily contain real words (personal blog entries).  \n\nAn example, while very fringe case, the title contained:\n\n.. .- -- .- .-.. .. ...- .\n\nThis is actually the name of an achievement in Assassin's Creed Brotherhood.  Adding a hyphen into this changes it's meaning entirely (I believe it's intended to be morse code or something similar).  While fringe case it illustrates the issue for languages, codes, alternate form (symbol/l33t speak), or non-language text which may require functionality akin to hyphenate-limit-zone but without an actual hyphen.  \n\nIf I may be so bold, the two could have so much overlap that it might also make sense to combine them and hyphenate only if a hyphenate-character is set.  At this late stage I doubt it is feasible.", "id": 5485929, "attachment_id": null, "count": 3, "bug_id": 658883, "raw_text": "For that particular example perhaps, though hyphenation has it's drawbacks when changing font styles, especially dynamically.\n\nAnother example which might flush it out a bit would be:\n\ndiv {\nwidth: 95px;\ntext-align: justify;\nword-wrap: break-word;\n}\n\n<div>It's a beautiful day in the neighbourhood.</div>\n\nThis creates large gaps in the text while only wrapping the last 2 characters where one might reasonably expect it to wrap first then justify.\n\nA use case similar to this on trueachievements.com's latest blog post list is what got me interested in this issue.  Specifically where titles of a maximum length but unknown content needed to fit in a fixed width but flexible height box.  The results are wildly unpredictable currently as the title content does not necessarily contain real words (personal blog entries).  \n\nAn example, while very fringe case, the title contained:\n\n.. .- -- .- .-.. .. ...- .\n\nThis is actually the name of an achievement in Assassin's Creed Brotherhood.  Adding a hyphen into this changes it's meaning entirely (I believe it's intended to be morse code or something similar).  While fringe case it illustrates the issue for languages, codes, alternate form (symbol/l33t speak), or non-language text which may require functionality akin to hyphenate-limit-zone but without an actual hyphen.  \n\nIf I may be so bold, the two could have so much overlap that it might also make sense to combine them and hyphenate only if a hyphenate-character is set.  At this late stage I doubt it is feasible.", "tags": [], "is_private": false, "time": "2011-05-23T07:52:27Z"}, {"creator": "majuki@yahoo.com", "author": "majuki@yahoo.com", "time": "2011-05-23T08:13:55Z", "bug_id": 658883, "count": 4, "id": 5485946, "attachment_id": null, "text": "An additional thought that I've not investigated but it would make sense that mathematical formulas would also be negatively affected by hyphens (excuse the play on words) unless this is being detected in the hyphens implementation?", "creation_time": "2011-05-23T08:13:55Z", "is_private": false, "tags": [], "raw_text": "An additional thought that I've not investigated but it would make sense that mathematical formulas would also be negatively affected by hyphens (excuse the play on words) unless this is being detected in the hyphens implementation?"}, {"creation_time": "2011-05-23T10:40:44Z", "author": "jfkthame@gmail.com", "id": 5486080, "attachment_id": null, "creator": "jfkthame@gmail.com", "text": "(In reply to comment #3)\n\n> Another example which might flush it out a bit would be:\n> \n> div {\n> width: 95px;\n> text-align: justify;\n> word-wrap: break-word;\n> }\n> \n> <div>It's a beautiful day in the neighbourhood.</div>\n> \n> This creates large gaps in the text while only wrapping the last 2\n> characters where one might reasonably expect it to wrap first then justify.\n\nSimilar behavior occurs in most text-layout applications, I think. The normal approach is to create successive lines by breaking at \"legitimate\" break positions whenever possible, which leads to a break immediately before \"neighbourhood\", and only break a word (in the absence of hyphenation) as a last resort when there is *no* acceptable break earlier in the line.\n\nIt's true that this occasionally gives visually poor results in extreme cases, but doing something \"better\" starts to move us into the realm of whole-paragraph optimization along the lines of TeX or InDesign's \"paragraph composer\". In general, CSS layout will become significantly more challenging to implement if we go beyond the line-by-line approach to paragraph construction, and allow the break positions found (or not) at line N to affect break decisions not just for line N and its successors, but also for line N-1, and perhaps even N-2, etc.", "count": 5, "raw_text": "(In reply to comment #3)\n\n> Another example which might flush it out a bit would be:\n> \n> div {\n> width: 95px;\n> text-align: justify;\n> word-wrap: break-word;\n> }\n> \n> <div>It's a beautiful day in the neighbourhood.</div>\n> \n> This creates large gaps in the text while only wrapping the last 2\n> characters where one might reasonably expect it to wrap first then justify.\n\nSimilar behavior occurs in most text-layout applications, I think. The normal approach is to create successive lines by breaking at \"legitimate\" break positions whenever possible, which leads to a break immediately before \"neighbourhood\", and only break a word (in the absence of hyphenation) as a last resort when there is *no* acceptable break earlier in the line.\n\nIt's true that this occasionally gives visually poor results in extreme cases, but doing something \"better\" starts to move us into the realm of whole-paragraph optimization along the lines of TeX or InDesign's \"paragraph composer\". In general, CSS layout will become significantly more challenging to implement if we go beyond the line-by-line approach to paragraph construction, and allow the break positions found (or not) at line N to affect break decisions not just for line N and its successors, but also for line N-1, and perhaps even N-2, etc.", "bug_id": 658883, "is_private": false, "tags": [], "time": "2011-05-23T10:40:44Z"}, {"author": "jfkthame@gmail.com", "attachment_id": 534389, "id": 5486082, "creator": "jfkthame@gmail.com", "text": "Created attachment 534389\nexamples of similar line-breaking behavior in other apps\n\nScreenshot showing equivalent behavior in MS Word (left) and Apple TextEdit (right) on OS X.", "creation_time": "2011-05-23T10:42:25Z", "is_private": false, "tags": [], "time": "2011-05-23T10:42:25Z", "count": 6, "raw_text": "Screenshot showing equivalent behavior in MS Word (left) and Apple TextEdit (right) on OS X.", "bug_id": 658883}, {"creation_time": "2011-05-23T16:33:19Z", "author": "majuki@yahoo.com", "attachment_id": null, "id": 5486722, "text": "(In reply to comment #5)\n\n> It's true that this occasionally gives visually poor results in extreme\n> cases, but doing something \"better\" starts to move us into the realm of\n> whole-paragraph optimization along the lines of TeX or InDesign's \"paragraph\n> composer\".\n\nWithout moving into the realm of TeX this type of functionality is being implemented in hyphenate-limit-zone, hyphenate-limit-chars, hyphenate-limit-word is it not?  Or is Mozilla not implementing this optional part of the standard?", "creator": "majuki@yahoo.com", "count": 7, "raw_text": "(In reply to comment #5)\n\n> It's true that this occasionally gives visually poor results in extreme\n> cases, but doing something \"better\" starts to move us into the realm of\n> whole-paragraph optimization along the lines of TeX or InDesign's \"paragraph\n> composer\".\n\nWithout moving into the realm of TeX this type of functionality is being implemented in hyphenate-limit-zone, hyphenate-limit-chars, hyphenate-limit-word is it not?  Or is Mozilla not implementing this optional part of the standard?", "bug_id": 658883, "is_private": false, "tags": [], "time": "2011-05-23T16:33:19Z"}, {"creator": "jfkthame@gmail.com", "text": "(In reply to comment #7)\n> (In reply to comment #5)\n> \n> > It's true that this occasionally gives visually poor results in extreme\n> > cases, but doing something \"better\" starts to move us into the realm of\n> > whole-paragraph optimization along the lines of TeX or InDesign's \"paragraph\n> > composer\".\n> \n> Without moving into the realm of TeX this type of functionality is being\n> implemented in hyphenate-limit-zone, hyphenate-limit-chars,\n> hyphenate-limit-word is it not?  \n\nSomewhat, though in general that doesn't provides nearly as good a solution as the TeX approach can offer. (And the difference becomes increasingly important in the extreme cases with narrow measures and long words.)\n\n> Or is Mozilla not implementing this\n> optional part of the standard?\n\nThere's been no work on it yet (AFAIK), though I'd certainly be interested in future enhancements in this area. (Though I'm not sure how close those properties are to being stable, either.)", "attachment_id": null, "id": 5487043, "author": "jfkthame@gmail.com", "creation_time": "2011-05-23T18:11:19Z", "time": "2011-05-23T18:11:19Z", "tags": [], "is_private": false, "bug_id": 658883, "raw_text": "(In reply to comment #7)\n> (In reply to comment #5)\n> \n> > It's true that this occasionally gives visually poor results in extreme\n> > cases, but doing something \"better\" starts to move us into the realm of\n> > whole-paragraph optimization along the lines of TeX or InDesign's \"paragraph\n> > composer\".\n> \n> Without moving into the realm of TeX this type of functionality is being\n> implemented in hyphenate-limit-zone, hyphenate-limit-chars,\n> hyphenate-limit-word is it not?  \n\nSomewhat, though in general that doesn't provides nearly as good a solution as the TeX approach can offer. (And the difference becomes increasingly important in the extreme cases with narrow measures and long words.)\n\n> Or is Mozilla not implementing this\n> optional part of the standard?\n\nThere's been no work on it yet (AFAIK), though I'd certainly be interested in future enhancements in this area. (Though I'm not sure how close those properties are to being stable, either.)", "count": 8}, {"bug_id": 658883, "count": 9, "time": "2018-08-17T04:40:58Z", "creator": "kdubost@mozilla.com", "author": "kdubost@mozilla.com", "raw_text": "This is the current rendering in Firefox Nightly, Chrome Canary, Safari Tech Preview.\n\nExactly the same. I understand the desire, but this should be probably be discussed in the CSS WG, given that for now there is interop here. \n\nI wonder what Edge is doing for this.", "tags": [], "is_private": false, "creation_time": "2018-08-17T04:40:58Z", "text": "Created attachment 9001843\nfirefox, safari, chrome\n\nThis is the current rendering in Firefox Nightly, Chrome Canary, Safari Tech Preview.\n\nExactly the same. I understand the desire, but this should be probably be discussed in the CSS WG, given that for now there is interop here. \n\nI wonder what Edge is doing for this.", "attachment_id": 9001843, "id": 13552059}, {"creation_time": "2018-08-17T04:42:34Z", "author": "kdubost@mozilla.com", "text": "I used for the test case with a 384px wide window.\ndata:text/html,<p style=\"word-wrap:break-word\">The supersupersupersupersupersupersupersupersupersupersupersuperlongstring movement</p>", "creator": "kdubost@mozilla.com", "id": 13552062, "attachment_id": null, "count": 10, "bug_id": 658883, "raw_text": "I used for the test case with a 384px wide window.\ndata:text/html,<p style=\"word-wrap:break-word\">The supersupersupersupersupersupersupersupersupersupersupersuperlongstring movement</p>", "tags": [], "is_private": false, "time": "2018-08-17T04:42:34Z"}, {"raw_text": "Should this block Bug 99457 the same way that Bug 389710 does?", "bug_id": 658883, "count": 11, "time": "2018-08-17T04:56:04Z", "is_private": false, "tags": [], "creation_time": "2018-08-17T04:56:04Z", "id": 13552070, "attachment_id": null, "text": "Should this block Bug 99457 the same way that Bug 389710 does?", "creator": "kdubost@mozilla.com", "author": "kdubost@mozilla.com"}, {"raw_text": "(In reply to Karl Dubost :karlcow from comment #11)\n> Should this block Bug 99457 the same way that Bug 389710 does?\n\nI don't think so; AFAICS, the word-wrap (overflow-wrap) property (bug 99457) is implemented correctly. The reporter here is looking for slightly different behavior, but that's something that would first need to be worked out in the spec.\n\nIf anything, this could block bug 1451459, as the additional hyphenation controls mentioned in comment 7 are now being defined in CSS Text 4. (I'm not aware of any actual browser implementation at this point, though would be interested to know if there is one.) Any additions/modifications to how overflow-wrap behaves would also need to be spec'd.", "is_private": false, "tags": [], "creation_time": "2018-08-17T08:23:06Z", "id": 13552329, "attachment_id": null, "text": "(In reply to Karl Dubost :karlcow from comment #11)\n> Should this block Bug 99457 the same way that Bug 389710 does?\n\nI don't think so; AFAICS, the word-wrap (overflow-wrap) property (bug 99457) is implemented correctly. The reporter here is looking for slightly different behavior, but that's something that would first need to be worked out in the spec.\n\nIf anything, this could block bug 1451459, as the additional hyphenation controls mentioned in comment 7 are now being defined in CSS Text 4. (I'm not aware of any actual browser implementation at this point, though would be interested to know if there is one.) Any additions/modifications to how overflow-wrap behaves would also need to be spec'd.", "bug_id": 658883, "count": 12, "time": "2018-08-17T08:23:06Z", "creator": "jfkthame@gmail.com", "author": "jfkthame@gmail.com"}, {"tags": [], "is_private": false, "time": "2019-05-12T00:53:38Z", "count": 13, "bug_id": 658883, "raw_text": "Nightly(v68) now supports this property.\n\nhttps://developer.mozilla.org/en-US/docs/Web/CSS/word-break", "author": "709922234@qq.com", "creator": "709922234@qq.com", "text": "Nightly(v68) now supports this property.\n\nhttps://developer.mozilla.org/en-US/docs/Web/CSS/word-break", "attachment_id": null, "id": 14112095, "creation_time": "2019-05-12T00:53:38Z"}, {"author": "bzbarsky@mit.edu", "creator": "bzbarsky@mit.edu", "text": "Emilio, is this bug fixed by bug 1296042?  Or should it be marked invalid?  Or is there still an issue here?", "attachment_id": null, "id": 14115302, "creation_time": "2019-05-13T18:23:37Z", "tags": [], "is_private": false, "time": "2019-05-13T18:23:37Z", "count": 14, "bug_id": 658883, "raw_text": "Emilio, is this bug fixed by bug 1296042?  Or should it be marked invalid?  Or is there still an issue here?"}, {"creation_time": "2019-05-13T18:42:50Z", "text": "word-wrap: break-word has been implemented since forever (bug 99457), and works the same everywhere.\n\nThis bug is more of a change / feature request, if I understand correctly, to change the implementation minimize the amount of whitespace in a single paragraph.\n\nI assume comment 13 meant word-break: break-word, which is bug 1296042, but that's not relevant here.\n\nAny sort of automatic breaking like that would need to be at least two-pass, IIUC, so I suspect it's a no-go, but there's other proposal about setting the minimum width of the word to break or such that conceptually could be implemented.\n\nJonathan may be a better candidate to decide what to do with this bug.", "creator": "emilio@crisal.io", "attachment_id": null, "id": 14115337, "author": "emilio@crisal.io", "bug_id": 658883, "raw_text": "word-wrap: break-word has been implemented since forever (bug 99457), and works the same everywhere.\n\nThis bug is more of a change / feature request, if I understand correctly, to change the implementation minimize the amount of whitespace in a single paragraph.\n\nI assume comment 13 meant word-break: break-word, which is bug 1296042, but that's not relevant here.\n\nAny sort of automatic breaking like that would need to be at least two-pass, IIUC, so I suspect it's a no-go, but there's other proposal about setting the minimum width of the word to break or such that conceptually could be implemented.\n\nJonathan may be a better candidate to decide what to do with this bug.", "count": 15, "time": "2019-05-13T18:42:50Z", "tags": [], "is_private": false}, {"is_private": false, "tags": [], "raw_text": "Looking all the way back to the original report in comment 0, I think the request is a reasonable one, but it's unclear to me exactly how this should be controlled in CSS, let alone implemented in the browser.\n\nGiven that the current behavior appears to be interoperable across all the major browsers, we should not simply change the existing behavior of overflow-wrap:break-word, even though the behavior suggested here looks like it would often be preferable.\n\nSo while there are some interesting ideas in the comments above, it's unclear how best to move forward. What I think needs to happen is for someone to design a specific proposal for a new/better behavior, and how to express it in CSS, and get CSS working group buy-in.", "id": 14115459, "attachment_id": null, "text": "Looking all the way back to the original report in comment 0, I think the request is a reasonable one, but it's unclear to me exactly how this should be controlled in CSS, let alone implemented in the browser.\n\nGiven that the current behavior appears to be interoperable across all the major browsers, we should not simply change the existing behavior of overflow-wrap:break-word, even though the behavior suggested here looks like it would often be preferable.\n\nSo while there are some interesting ideas in the comments above, it's unclear how best to move forward. What I think needs to happen is for someone to design a specific proposal for a new/better behavior, and how to express it in CSS, and get CSS working group buy-in.", "creation_time": "2019-05-13T19:39:26Z", "time": "2019-05-13T19:39:26Z", "count": 16, "bug_id": 658883, "author": "jfkthame@gmail.com", "creator": "jfkthame@gmail.com"}, {"time": "2019-05-13T20:20:15Z", "tags": [], "is_private": false, "bug_id": 658883, "raw_text": "fantasai may have thoughts on whether/how to include it in CSS", "count": 17, "creator": "dbaron@dbaron.org", "text": "fantasai may have thoughts on whether/how to include it in CSS", "id": 14115550, "attachment_id": null, "author": "dbaron@dbaron.org", "creation_time": "2019-05-13T20:20:15Z"}, {"time": "2019-05-13T22:06:54Z", "bug_id": 658883, "count": 18, "creator": "fantasai.bugs@inkedblade.net", "author": "fantasai.bugs@inkedblade.net", "is_private": false, "tags": [], "raw_text": "UAs are allowed to use whatever algorithm they want for deciding which break point to take: CSS only defines where breaks are allowed, not which ones are taken. It would be perfectly spec-conformant to improve the results here, and this is indeed one of the reasons why we're not prescriptive about the line-breaking algorithm. We want UAs to do better than they have historically.\n\nThat said, there is some concern about what the Web-compat impact would be. I do suspect most of the time when pages are sensitive to which break is taken (rather than just whether or not the text breaks), it's when laying out atomic inlines--but that's not really an issue here because we're breaking text specifically. So it might be worth experimenting with better line-breaking in these cases without introducing new syntax, to see if we can just do it.\n\nIf a switch is necessary due to Web-compat, `text-wrap` in Text Level 4 is introducing a keyword to opt into \"prettier, but potentially slower and different\" line-breaking, and that can be used as an opt-in.", "attachment_id": null, "id": 14115837, "text": "UAs are allowed to use whatever algorithm they want for deciding which break point to take: CSS only defines where breaks are allowed, not which ones are taken. It would be perfectly spec-conformant to improve the results here, and this is indeed one of the reasons why we're not prescriptive about the line-breaking algorithm. We want UAs to do better than they have historically.\n\nThat said, there is some concern about what the Web-compat impact would be. I do suspect most of the time when pages are sensitive to which break is taken (rather than just whether or not the text breaks), it's when laying out atomic inlines--but that's not really an issue here because we're breaking text specifically. So it might be worth experimenting with better line-breaking in these cases without introducing new syntax, to see if we can just do it.\n\nIf a switch is necessary due to Web-compat, `text-wrap` in Text Level 4 is introducing a keyword to opt into \"prettier, but potentially slower and different\" line-breaking, and that can be used as an opt-in.", "creation_time": "2019-05-13T22:06:54Z"}]}}, "comments": {}}