{"comments": {}, "bugs": {"712608": {"comments": [{"raw_text": "I previously used JS_GetClassObject() then FUN_CLASP(GET_FUNCTION_PRIVATE(cx, ctor) but since these macros has been removed and js::Class *getConstructorClass() is not public, I cannot replace my code.", "attachment_id": null, "id": 5932337, "count": 0, "creator": "soubok@gmail.com", "is_private": false, "time": "2011-12-21T13:03:23Z", "tags": [], "bug_id": 712608, "text": "I previously used JS_GetClassObject() then FUN_CLASP(GET_FUNCTION_PRIVATE(cx, ctor) but since these macros has been removed and js::Class *getConstructorClass() is not public, I cannot replace my code.", "author": "soubok@gmail.com", "creation_time": "2011-12-21T13:03:23Z"}, {"creation_time": "2011-12-21T13:07:19Z", "author": "soubok@gmail.com", "text": "My function looked like this:\n\nJSClass* GetStandardClassByProtoKey(JSContext *cx, JSProtoKey protoKey) {\n\n  return JS_GetClassObject(cx, JS_GetGlobalObject(cx), protoKey, &ctor) && ctor ? js::Jsvalify(FUN_CLASP(GET_FUNCTION_PRIVATE(cx, ctor))) : NULL;\n}", "bug_id": 712608, "tags": [], "time": "2011-12-21T13:07:19Z", "is_private": false, "creator": "soubok@gmail.com", "count": 1, "id": 5932344, "attachment_id": null, "raw_text": "My function looked like this:\n\nJSClass* GetStandardClassByProtoKey(JSContext *cx, JSProtoKey protoKey) {\n\n  return JS_GetClassObject(cx, JS_GetGlobalObject(cx), protoKey, &ctor) && ctor ? js::Jsvalify(FUN_CLASP(GET_FUNCTION_PRIVATE(cx, ctor))) : NULL;\n}"}, {"author": "mail@lukewagner.name", "creation_time": "2011-12-21T16:57:07Z", "time": "2011-12-21T16:57:07Z", "bug_id": 712608, "tags": [], "text": "I believe the JSClass* of engine-created objects is an implementation detail and should not be relied upon.  Off the top of my head, there are two ways this breaks at the moment (dense/sparse arrays have different classes, transparent compartment wrappers inject a Proxy) and I would not be surprised if there are more or will be more in the future.\n\nWould it work instead to have a predicate:\n\n  JSBool JS_ObjectClassIs(JSContext *cx, JSObject *obj, JSProtoKey protoKey);\n\n?", "creator": "mail@lukewagner.name", "is_private": false, "count": 2, "id": 5932805, "attachment_id": null, "raw_text": "I believe the JSClass* of engine-created objects is an implementation detail and should not be relied upon.  Off the top of my head, there are two ways this breaks at the moment (dense/sparse arrays have different classes, transparent compartment wrappers inject a Proxy) and I would not be surprised if there are more or will be more in the future.\n\nWould it work instead to have a predicate:\n\n  JSBool JS_ObjectClassIs(JSContext *cx, JSObject *obj, JSProtoKey protoKey);\n\n?"}, {"count": 3, "bug_id": 712608, "attachment_id": null, "raw_text": "Yes, it will work in almost all my cases. I mainly used GetStandardClassByProtoKey to check if an object is a Number, a Date, a Boolean, ...\n\nHowever I have one case where GetStandardClassByProtoKey helps me to create an error of a given type:\n  CreateErrorException( JSContext *cx, JSExnType exn, JSObject **obj )\nBut it is maybe the topic for another bug.", "id": 5932948, "is_private": false, "creator": "soubok@gmail.com", "creation_time": "2011-12-21T17:49:48Z", "author": "soubok@gmail.com", "text": "Yes, it will work in almost all my cases. I mainly used GetStandardClassByProtoKey to check if an object is a Number, a Date, a Boolean, ...\n\nHowever I have one case where GetStandardClassByProtoKey helps me to create an error of a given type:\n  CreateErrorException( JSContext *cx, JSExnType exn, JSObject **obj )\nBut it is maybe the topic for another bug.", "tags": [], "time": "2011-12-21T17:49:48Z"}, {"text": "Probably we should add JS_IsNumberObject APIs and similar, then, the way we've done so for Array and RegExp.\n\nWe should have a JS_CreateErrorObject(..., JSExnType, ...) method.  It shouldn't be necessary to use hackarounds to do that.", "tags": [], "bug_id": 712608, "time": "2011-12-21T19:56:09Z", "creation_time": "2011-12-21T19:56:09Z", "author": "jwalden@mit.edu", "count": 4, "is_private": false, "creator": "jwalden@mit.edu", "id": 5933278, "raw_text": "Probably we should add JS_IsNumberObject APIs and similar, then, the way we've done so for Array and RegExp.\n\nWe should have a JS_CreateErrorObject(..., JSExnType, ...) method.  It shouldn't be necessary to use hackarounds to do that.", "attachment_id": null}]}}}