{"bugs": {"672827": {"comments": [{"creation_time": "2011-07-20T16:24:10Z", "raw_text": "This is a request to implement hmac + bcrypt password storage for bugzilla.mozilla.org using the existing bugzilla pluggable password-crypting systems.\n\nMore details can be found in bug 672129 comment 1 and bug 672129 comment 3\n\n\nBackground from bug 672129\nAs part of a larger push to better password storage across all Mozilla sites, we should convert Bugzilla to use bcrypt + hmac for password storage.\n\nFor more details, see:\nhttps://wiki.mozilla.org/WebAppSec/Secure_Coding_Guidelines#Password_Storage\nhttp://blog.mozilla.com/webappsec/2011/05/10/sha-512-w-per-user-salts-is-not-enough/\nhttp://blog.mozilla.com/webappsec/2011/06/01/sha-512-follow-up-and-thank-you/", "time": "2011-07-20T16:24:10Z", "attachment_id": null, "author": "mcoates@mozilla.com", "creator": "mcoates@mozilla.com", "text": "This is a request to implement hmac + bcrypt password storage for bugzilla.mozilla.org using the existing bugzilla pluggable password-crypting systems.\n\nMore details can be found in bug 672129 comment 1 and bug 672129 comment 3\n\n\nBackground from bug 672129\nAs part of a larger push to better password storage across all Mozilla sites, we should convert Bugzilla to use bcrypt + hmac for password storage.\n\nFor more details, see:\nhttps://wiki.mozilla.org/WebAppSec/Secure_Coding_Guidelines#Password_Storage\nhttp://blog.mozilla.com/webappsec/2011/05/10/sha-512-w-per-user-salts-is-not-enough/\nhttp://blog.mozilla.com/webappsec/2011/06/01/sha-512-follow-up-and-thank-you/", "id": 5601942, "is_private": false, "count": 0, "tags": [], "bug_id": 672827}, {"bug_id": 672827, "id": 5602469, "tags": [], "is_private": false, "count": 1, "author": "dkl@mozilla.com", "attachment_id": null, "time": "2011-07-20T19:18:51Z", "creator": "dkl@mozilla.com", "text": "\n\n*** This bug has been marked as a duplicate of bug 672129 ***", "raw_text": "", "creation_time": "2011-07-20T19:18:51Z"}, {"bug_id": 672827, "tags": [], "is_private": false, "count": 2, "id": 5634497, "text": "Created attachment 550848\nPatch to add support for Bcrypt+HMAC to BMO (v1)\n\nWorking patch that adds in Bcrypt+HMAC support. Of course it wasnt as simple as changing a constant in Bugzilla/Constants.pm but it doesn't need to add a whole lot of code either. I made it where there the HMAC secret is stored in data/params for now but we can decide if it will need to be in a more secure place. Basically it will work with any password hash with {BCRYPT_HMAC} in the profiles table. Otherwise it uses to standard method. Also we would need to somehow initiate a full password reset for everyone otherwise the new format does not take affect until the either 1) reset their password in userprefs.cgi or 2) file for a forgotten password. Please take a look.\n\ndkl", "attachment_id": 550848, "time": "2011-08-04T22:14:17Z", "raw_text": "Working patch that adds in Bcrypt+HMAC support. Of course it wasnt as simple as changing a constant in Bugzilla/Constants.pm but it doesn't need to add a whole lot of code either. I made it where there the HMAC secret is stored in data/params for now but we can decide if it will need to be in a more secure place. Basically it will work with any password hash with {BCRYPT_HMAC} in the profiles table. Otherwise it uses to standard method. Also we would need to somehow initiate a full password reset for everyone otherwise the new format does not take affect until the either 1) reset their password in userprefs.cgi or 2) file for a forgotten password. Please take a look.\n\ndkl", "creation_time": "2011-08-04T22:14:17Z", "creator": "dkl@mozilla.com", "author": "dkl@mozilla.com"}, {"author": "reed@reedloden.com", "creator": "reed@reedloden.com", "creation_time": "2011-08-04T22:35:34Z", "raw_text": "Review of attachment 550848:\n-----------------------------------------------------------------\n\nHere are my initial comments. I'll have more stuff to say soon.\n\n::: Bugzilla/Config/Auth.pm\n@@ +139,1 @@\n>    } );\n\nCan we store the HMAC secret in localconfig? I don't think it makes sense to store it in params when we store the $site_wide_secret in localconfig. They are similar in nature, so should be stored together.\n\nAlso, need to support multiple HMAC keys. See https://github.com/fwenzel/django-sha2/blob/master/README.md for how AMO and other Django-based apps are handling it.\n\nFor people to do this correctly, we should have checkconfig support generating the HMAC key(s).\n\n::: Bugzilla/Util.pm\n@@ +550,5 @@\n> +                }\n> +                # Use bcrypt and append with a NULL ($2a)\n> +                my $method = '$2a';\n> +                # Work factor has to be 2 digits exactly\n> +                my $work_factor = sprintf(\"%02d\", 4);\n\nFor work_factor, we should be using at least 12, and this number should be a constant.\n\n@@ +560,5 @@\n> +                    $new_salt .= $salt;\n> +                }\n> +                $new_salt = substr($new_salt, 0, 16);\n> +                $new_salt = en_base64($new_salt);\n> +                return bcrypt($password, join('$', $method, $work_factor, $new_salt));\n\nInstead of bcrypt(), how about using bcrypt_hash()? Seems like it would let you handle this without all the hackory that you're having to do.\n\n@@ +563,5 @@\n> +                $new_salt = en_base64($new_salt);\n> +                return bcrypt($password, join('$', $method, $work_factor, $new_salt));\n> +            };\n> +            $crypted_password = hmac($password, Bugzilla->params->{'hmac_secret'}, $bcrypt_func) . \n> +                                \"{$algorithm}\";\n\nWe need to be generating the HMAC using SHA-512.\n\n@@ +566,5 @@\n> +            $crypted_password = hmac($password, Bugzilla->params->{'hmac_secret'}, $bcrypt_func) . \n> +                                \"{$algorithm}\";\n> +        }\n> +        else {\n> +            my $hasher= Digest->new($algorithm);\n\nNeed space after $hasher.", "time": "2011-08-04T22:35:34Z", "attachment_id": 550848, "text": "Comment on attachment 550848\nPatch to add support for Bcrypt+HMAC to BMO (v1)\n\nReview of attachment 550848:\n-----------------------------------------------------------------\n\nHere are my initial comments. I'll have more stuff to say soon.\n\n::: Bugzilla/Config/Auth.pm\n@@ +139,1 @@\n>    } );\n\nCan we store the HMAC secret in localconfig? I don't think it makes sense to store it in params when we store the $site_wide_secret in localconfig. They are similar in nature, so should be stored together.\n\nAlso, need to support multiple HMAC keys. See https://github.com/fwenzel/django-sha2/blob/master/README.md for how AMO and other Django-based apps are handling it.\n\nFor people to do this correctly, we should have checkconfig support generating the HMAC key(s).\n\n::: Bugzilla/Util.pm\n@@ +550,5 @@\n> +                }\n> +                # Use bcrypt and append with a NULL ($2a)\n> +                my $method = '$2a';\n> +                # Work factor has to be 2 digits exactly\n> +                my $work_factor = sprintf(\"%02d\", 4);\n\nFor work_factor, we should be using at least 12, and this number should be a constant.\n\n@@ +560,5 @@\n> +                    $new_salt .= $salt;\n> +                }\n> +                $new_salt = substr($new_salt, 0, 16);\n> +                $new_salt = en_base64($new_salt);\n> +                return bcrypt($password, join('$', $method, $work_factor, $new_salt));\n\nInstead of bcrypt(), how about using bcrypt_hash()? Seems like it would let you handle this without all the hackory that you're having to do.\n\n@@ +563,5 @@\n> +                $new_salt = en_base64($new_salt);\n> +                return bcrypt($password, join('$', $method, $work_factor, $new_salt));\n> +            };\n> +            $crypted_password = hmac($password, Bugzilla->params->{'hmac_secret'}, $bcrypt_func) . \n> +                                \"{$algorithm}\";\n\nWe need to be generating the HMAC using SHA-512.\n\n@@ +566,5 @@\n> +            $crypted_password = hmac($password, Bugzilla->params->{'hmac_secret'}, $bcrypt_func) . \n> +                                \"{$algorithm}\";\n> +        }\n> +        else {\n> +            my $hasher= Digest->new($algorithm);\n\nNeed space after $hasher.", "id": 5634574, "tags": [], "is_private": false, "count": 3, "bug_id": 672827}, {"bug_id": 672827, "id": 5634579, "tags": [], "count": 4, "is_private": false, "attachment_id": null, "time": "2011-08-04T22:37:18Z", "text": "(In reply to comment #2)\n> Also we would need\n> to somehow initiate a full password reset for everyone otherwise the new\n> format does not take affect until the either 1) reset their password in\n> userprefs.cgi or 2) file for a forgotten password. Please take a look.\n\nNo, the right way to do this is to transparently change people's passwords to the new format as they login. Obviously, you'll also do this if the user changes his/her password or does forgotten password, but in order to get the most use, you should just intercept the actual password provided, convert it to the new format, and save that.", "creation_time": "2011-08-04T22:37:18Z", "raw_text": "(In reply to comment #2)\n> Also we would need\n> to somehow initiate a full password reset for everyone otherwise the new\n> format does not take affect until the either 1) reset their password in\n> userprefs.cgi or 2) file for a forgotten password. Please take a look.\n\nNo, the right way to do this is to transparently change people's passwords to the new format as they login. Obviously, you'll also do this if the user changes his/her password or does forgotten password, but in order to get the most use, you should just intercept the actual password provided, convert it to the new format, and save that.", "author": "reed@reedloden.com", "creator": "reed@reedloden.com"}, {"raw_text": "Thanks for the comments Reed. Here is a revised patch that addresses your points.\n\n1. I am using hmac_sha512_base64 now to hash the password + hmac_secret then I bcrypt the returned value.\n2. I am using dated keys now stored in the localconfig file. checksetup.pl will create a default key if hmac_keys doesn't yet exist.\n3. PASSWORD_BCRYPT_COST is now a constant.\n4. Password conversion does in fact happen automatically when a user logs in next.\n\nOne thing I didn't do is store the hmac_key date in the password hash stored in the database. This would allow for allowing older passwords to still authenticate since it can pull out the date portion and compare it to the hmac_keys table. Right now it just always uses the most recent and if a new one is added then it invalidates the others. Is this sufficient or do we want to allow old hashes uses previous keys to authenticate in case one of the keys were compromised? Thoughts?\n\ndkl", "creation_time": "2011-08-06T21:23:34Z", "creator": "dkl@mozilla.com", "text": "Created attachment 551280\nPatch to add support for Bcrypt+HMAC to BMO (v2)\n\nThanks for the comments Reed. Here is a revised patch that addresses your points.\n\n1. I am using hmac_sha512_base64 now to hash the password + hmac_secret then I bcrypt the returned value.\n2. I am using dated keys now stored in the localconfig file. checksetup.pl will create a default key if hmac_keys doesn't yet exist.\n3. PASSWORD_BCRYPT_COST is now a constant.\n4. Password conversion does in fact happen automatically when a user logs in next.\n\nOne thing I didn't do is store the hmac_key date in the password hash stored in the database. This would allow for allowing older passwords to still authenticate since it can pull out the date portion and compare it to the hmac_keys table. Right now it just always uses the most recent and if a new one is added then it invalidates the others. Is this sufficient or do we want to allow old hashes uses previous keys to authenticate in case one of the keys were compromised? Thoughts?\n\ndkl", "author": "dkl@mozilla.com", "time": "2011-08-06T21:23:34Z", "attachment_id": 551280, "tags": [], "is_private": false, "count": 5, "id": 5637803, "bug_id": 672827}, {"id": 5639865, "is_private": false, "count": 6, "tags": [], "bug_id": 672827, "raw_text": "(In reply to Reed Loden [:reed] (very busy) from comment #3)\n> For work_factor, we should be using at least 12, and this number should be a\n> constant.\n> \n\nOne of the benefits of bcrypt is that the work factor can be easily adjusted as computing power increases. Would it make more sense to use a config setting for work factor and default to 12? This would allow for companies to easily increase computing power required to attack the hashes per their specific risk posture.", "creation_time": "2011-08-08T17:11:58Z", "attachment_id": null, "time": "2011-08-08T17:11:58Z", "text": "(In reply to Reed Loden [:reed] (very busy) from comment #3)\n> For work_factor, we should be using at least 12, and this number should be a\n> constant.\n> \n\nOne of the benefits of bcrypt is that the work factor can be easily adjusted as computing power increases. Would it make more sense to use a config setting for work factor and default to 12? This would allow for companies to easily increase computing power required to attack the hashes per their specific risk posture.", "author": "mcoates@mozilla.com", "creator": "mcoates@mozilla.com"}, {"time": "2011-08-08T17:17:24Z", "attachment_id": null, "text": "(In reply to Michael Coates [:mcoates] from comment #6)\n> One of the benefits of bcrypt is that the work factor can be easily adjusted\n> as computing power increases. Would it make more sense to use a config\n> setting for work factor and default to 12? This would allow for companies to\n> easily increase computing power required to attack the hashes per their\n> specific risk posture.\n\nIn the current patch it is a constant that can be adjusted by an admin per instance if they desire. \n\n+# Non-negative integer controlling the cost of the hash function. \n+# The number of operations is proportional to 2^cost.\n+use constant PASSWORD_BCRYPT_COST => 12;\n\nI am not sure it would be necessary to make it a data/params config item than can be updated remotely as I would expect an admin to know what to set it to based on hardware and then set it and leave it alone.\n\ndkl", "creation_time": "2011-08-08T17:17:24Z", "raw_text": "(In reply to Michael Coates [:mcoates] from comment #6)\n> One of the benefits of bcrypt is that the work factor can be easily adjusted\n> as computing power increases. Would it make more sense to use a config\n> setting for work factor and default to 12? This would allow for companies to\n> easily increase computing power required to attack the hashes per their\n> specific risk posture.\n\nIn the current patch it is a constant that can be adjusted by an admin per instance if they desire. \n\n+# Non-negative integer controlling the cost of the hash function. \n+# The number of operations is proportional to 2^cost.\n+use constant PASSWORD_BCRYPT_COST => 12;\n\nI am not sure it would be necessary to make it a data/params config item than can be updated remotely as I would expect an admin to know what to set it to based on hardware and then set it and leave it alone.\n\ndkl", "bug_id": 672827, "id": 5639876, "tags": [], "is_private": false, "count": 7, "author": "dkl@mozilla.com", "creator": "dkl@mozilla.com"}, {"id": 5643648, "tags": [], "count": 8, "is_private": false, "bug_id": 672827, "raw_text": "Reworked the patch some more. Now uses dated keys and appends the date to the hash stored in the database. So an older key can still be used when it matches the date from the hash to the hmac keys table. Otherwise any newly created hashes use the most recent key. Also fixed the 'use' statements to be 'require'.\n\nPlease review.\n\ndkl", "creation_time": "2011-08-09T22:19:34Z", "time": "2011-08-09T22:19:34Z", "attachment_id": 551906, "text": "Created attachment 551906\nPatch to add support for Bcrypt+HMAC to BMO (v3)\n\nReworked the patch some more. Now uses dated keys and appends the date to the hash stored in the database. So an older key can still be used when it matches the date from the hash to the hmac keys table. Otherwise any newly created hashes use the most recent key. Also fixed the 'use' statements to be 'require'.\n\nPlease review.\n\ndkl", "author": "dkl@mozilla.com", "creator": "dkl@mozilla.com"}, {"time": "2011-08-22T19:47:40Z", "attachment_id": 551906, "text": "Comment on attachment 551906\nPatch to add support for Bcrypt+HMAC to BMO (v3)\n\nAdding reed as a reviewer as well since he would also be well suited for reviewing this patch. Reed can you take a look when time allows?\n\ndkl", "raw_text": "Adding reed as a reviewer as well since he would also be well suited for reviewing this patch. Reed can you take a look when time allows?\n\ndkl", "creation_time": "2011-08-22T19:47:40Z", "bug_id": 672827, "id": 5669962, "count": 9, "is_private": false, "tags": [], "author": "dkl@mozilla.com", "creator": "dkl@mozilla.com"}, {"bug_id": 672827, "id": 6000397, "tags": [], "count": 10, "is_private": false, "attachment_id": 551906, "time": "2012-01-23T13:50:02Z", "text": "Comment on attachment 551906\nPatch to add support for Bcrypt+HMAC to BMO (v3)\n\ni'm going to leave reed to review this one.", "creation_time": "2012-01-23T13:50:02Z", "raw_text": "i'm going to leave reed to review this one.", "author": "glob@mozilla.com", "creator": "glob@mozilla.com"}, {"author": "reed@reedloden.com", "creator": "reed@reedloden.com", "creation_time": "2012-08-25T23:26:20Z", "raw_text": "Updated version of dkl's patch that fixes a number of issues, as well as adds support for regenerating hashes when the HMAC key changes.\n\nStill left to do:\n* Test end-to-end\n* Add support for hardened hashes\n* Write script to convert all current hashes to hardened hashes\n* Optionally add support for rehashing when PASSWORD_BCRYPT_COST changes", "attachment_id": 655375, "time": "2012-08-25T23:26:20Z", "text": "Created attachment 655375\npatch - v4 (untested)\n\nUpdated version of dkl's patch that fixes a number of issues, as well as adds support for regenerating hashes when the HMAC key changes.\n\nStill left to do:\n* Test end-to-end\n* Add support for hardened hashes\n* Write script to convert all current hashes to hardened hashes\n* Optionally add support for rehashing when PASSWORD_BCRYPT_COST changes", "id": 6583934, "is_private": false, "count": 11, "tags": [], "bug_id": 672827}, {"bug_id": 672827, "tags": [], "count": 12, "is_private": false, "id": 6584204, "text": "Comment on attachment 655375\npatch - v4 (untested)\n\nI've moved v5 of this patch to bug 672129 to get into Bugzilla 4.4 proper. We should backport the final version to bmo 4.2 and add the hardened hash support.", "time": "2012-08-26T04:18:25Z", "attachment_id": 655375, "creation_time": "2012-08-26T04:18:25Z", "raw_text": "I've moved v5 of this patch to bug 672129 to get into Bugzilla 4.4 proper. We should backport the final version to bmo 4.2 and add the hardened hash support.", "creator": "reed@reedloden.com", "author": "reed@reedloden.com"}, {"creator": "dylan@hardison.net", "author": "dylan@hardison.net", "is_private": false, "count": 13, "tags": [], "id": 12932734, "bug_id": 672827, "raw_text": "Would it be best to just use bcrypt on all future passwords?\nDoes using bcrypt require storing an additional secret?", "creation_time": "2017-12-21T20:57:58Z", "text": "Would it be best to just use bcrypt on all future passwords?\nDoes using bcrypt require storing an additional secret?", "time": "2017-12-21T20:57:58Z", "attachment_id": null}, {"author": "jonathan.claudius@gmail.com", "creator": "jonathan.claudius@gmail.com", "bug_id": 672827, "id": 12940286, "is_private": false, "count": 14, "tags": [], "time": "2018-01-02T14:20:44Z", "attachment_id": null, "text": ":dylan - I'm not sure, I've not implemented bcrypt before, so I don't know what's involved.", "raw_text": ":dylan - I'm not sure, I've not implemented bcrypt before, so I don't know what's involved.", "creation_time": "2018-01-02T14:20:44Z"}]}}, "comments": {}}