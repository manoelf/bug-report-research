{"bugs": {"625383": {"comments": [{"raw_text": "in nsHttpChunkedDecoder.cpp when we need to identify a new chunk we parse the byte stream into a chunk len and then remove those bytes from the stream with memmove by moving the rest of the buffer up by a few bytes.\n\nhttp://mxr.mozilla.org/mozilla-central/source/netwerk/protocol/http/nsHttpChunkedDecoder.cpp#99\n\nThat can be a large copy of data. And if it might contain more than just the next chunk's data - it could contain chunk headers after that. Which means we will have to copy some of it yet again.\n\nExactly how much pain this is depends on the chunk sizes, how full our buffers are and probably how much damage it does it l2/l3 cache. Ironically, underbuffering probably helps us here.\n\nNonetheless - it can add up to something significant. On https://developer.mozila.org/en-US/mobile I see almost 100KB of these copies to just load that page.\n\nIt will take more than just changes to nsHttpChunkedDecoder, but we can reorient things to not assume they have to read from the beginning of the buffer and avoid the copies all together.", "count": 0, "author": "mcmanus@ducksong.com", "tags": [], "bug_id": 625383, "attachment_id": null, "is_private": false, "time": "2011-01-13T16:26:57Z", "text": "in nsHttpChunkedDecoder.cpp when we need to identify a new chunk we parse the byte stream into a chunk len and then remove those bytes from the stream with memmove by moving the rest of the buffer up by a few bytes.\n\nhttp://mxr.mozilla.org/mozilla-central/source/netwerk/protocol/http/nsHttpChunkedDecoder.cpp#99\n\nThat can be a large copy of data. And if it might contain more than just the next chunk's data - it could contain chunk headers after that. Which means we will have to copy some of it yet again.\n\nExactly how much pain this is depends on the chunk sizes, how full our buffers are and probably how much damage it does it l2/l3 cache. Ironically, underbuffering probably helps us here.\n\nNonetheless - it can add up to something significant. On https://developer.mozila.org/en-US/mobile I see almost 100KB of these copies to just load that page.\n\nIt will take more than just changes to nsHttpChunkedDecoder, but we can reorient things to not assume they have to read from the beginning of the buffer and avoid the copies all together.", "id": 5196784, "creator": "mcmanus@ducksong.com", "creation_time": "2011-01-13T16:26:57Z"}, {"creator": "mcmanus@ducksong.com", "creation_time": "2014-02-04T14:53:34Z", "id": 8370136, "text": "The fundamental blocker here is that our apis tend to be of the form \"here is my buffer of size N, fill it please\"... so the network layer in this case has done a large read into the user buffer and then needs to excise the chunk markers from it. (which requires memmoving all the subsequent bytes up to cover the gaps). The result is pretty much all chunked data gets memcopied.\n\nour http/2 code faces a similar problem.. frame headers (and control frames) constantly are mixed in the data stream. It addresses this by limiting reads to frame header size to figure out the size of the data chunk, and then reading the chunk size. No moves required.\n\nhttp/1 chunked is a bit messier because it is not a binary frame format; but I've done something very similar with this patch. When looking for a chunk size read either 1KB (when getting all the headers) or 6 bytes (when aligned at an unparsed chunksize marker).. when we have a parsed chunk size then just read up to the remaining chunk size. This minimizes the amount of memmove\n\nhttps://tbpl.mozilla.org/?tree=Try&rev=0a69e8d07c31\n\nThe first page I ran this on reduced memmoves from 1,865KB to 12KB while adding about 500 syscalls. I think that's a win - trivial syscalls are trivial, but memory bandwidth is always a bottleneck.", "time": "2014-02-04T14:53:34Z", "is_private": false, "tags": [], "author": "mcmanus@ducksong.com", "attachment_id": null, "bug_id": 625383, "raw_text": "The fundamental blocker here is that our apis tend to be of the form \"here is my buffer of size N, fill it please\"... so the network layer in this case has done a large read into the user buffer and then needs to excise the chunk markers from it. (which requires memmoving all the subsequent bytes up to cover the gaps). The result is pretty much all chunked data gets memcopied.\n\nour http/2 code faces a similar problem.. frame headers (and control frames) constantly are mixed in the data stream. It addresses this by limiting reads to frame header size to figure out the size of the data chunk, and then reading the chunk size. No moves required.\n\nhttp/1 chunked is a bit messier because it is not a binary frame format; but I've done something very similar with this patch. When looking for a chunk size read either 1KB (when getting all the headers) or 6 bytes (when aligned at an unparsed chunksize marker).. when we have a parsed chunk size then just read up to the remaining chunk size. This minimizes the amount of memmove\n\nhttps://tbpl.mozilla.org/?tree=Try&rev=0a69e8d07c31\n\nThe first page I ran this on reduced memmoves from 1,865KB to 12KB while adding about 500 syscalls. I think that's a win - trivial syscalls are trivial, but memory bandwidth is always a bottleneck.", "count": 1}, {"attachment_id": 8370062, "bug_id": 625383, "tags": [], "author": "mcmanus@ducksong.com", "count": 2, "raw_text": "", "creation_time": "2014-02-04T15:02:40Z", "creator": "mcmanus@ducksong.com", "text": "Created attachment 8370062\noptimize http chunked decoder memmoves", "id": 8370192, "time": "2014-02-04T15:02:40Z", "is_private": false}, {"is_private": false, "text": "remote:   https://hg.mozilla.org/integration/mozilla-inbound/rev/73caaea5844f", "id": 8372206, "time": "2014-02-04T20:07:20Z", "creation_time": "2014-02-04T20:07:20Z", "creator": "mcmanus@ducksong.com", "count": 3, "raw_text": "remote:   https://hg.mozilla.org/integration/mozilla-inbound/rev/73caaea5844f", "attachment_id": null, "bug_id": 625383, "tags": [], "author": "mcmanus@ducksong.com"}, {"creator": "cbook@mozilla.com", "creation_time": "2014-02-05T12:42:05Z", "id": 8375847, "text": "https://hg.mozilla.org/mozilla-central/rev/73caaea5844f", "time": "2014-02-05T12:42:05Z", "is_private": false, "tags": [], "author": "cbook@mozilla.com", "attachment_id": null, "bug_id": 625383, "raw_text": "https://hg.mozilla.org/mozilla-central/rev/73caaea5844f", "count": 4}, {"is_private": false, "raw_text": "Note that this change was backed out because of bug 971001.\n\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/a9f3f9263459", "text": "Note that this change was backed out because of bug 971001.\n\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/a9f3f9263459", "id": 8406257, "time": "2014-02-11T22:09:04Z", "count": 5, "tags": [], "creator": "kats@bugmash.staktrace.com", "author": "kats@bugmash.staktrace.com", "creation_time": "2014-02-11T22:09:04Z", "attachment_id": null, "bug_id": 625383}, {"creator": "ryanvm@gmail.com", "creation_time": "2014-02-12T13:45:17Z", "is_private": false, "text": "Merge of backout:\nhttps://hg.mozilla.org/mozilla-central/rev/a9f3f9263459", "id": 8409309, "time": "2014-02-12T13:45:17Z", "tags": [], "author": "ryanvm@gmail.com", "attachment_id": null, "bug_id": 625383, "raw_text": "Merge of backout:\nhttps://hg.mozilla.org/mozilla-central/rev/a9f3f9263459", "count": 6}, {"creation_time": "2017-09-13T18:34:54Z", "creator": "bug-husbandry-bot@mozilla.bugs", "text": "Bulk change to priority: https://bugzilla.mozilla.org/show_bug.cgi?id=1399258", "id": 12657841, "time": "2017-09-13T18:34:54Z", "is_private": false, "attachment_id": null, "bug_id": 625383, "tags": [], "author": "bug-husbandry-bot@mozilla.bugs", "count": 7, "raw_text": "Bulk change to priority: https://bugzilla.mozilla.org/show_bug.cgi?id=1399258"}, {"count": 8, "raw_text": "Bulk change to priority: https://bugzilla.mozilla.org/show_bug.cgi?id=1399258", "bug_id": 625383, "attachment_id": null, "author": "bug-husbandry-bot@mozilla.bugs", "tags": [], "is_private": false, "time": "2017-09-13T18:47:09Z", "text": "Bulk change to priority: https://bugzilla.mozilla.org/show_bug.cgi?id=1399258", "id": 12659399, "creation_time": "2017-09-13T18:47:09Z", "creator": "bug-husbandry-bot@mozilla.bugs"}]}}, "comments": {}}