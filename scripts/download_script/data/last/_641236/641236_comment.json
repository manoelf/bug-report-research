{"comments": {}, "bugs": {"641236": {"comments": [{"creation_time": "2011-03-12T18:33:25Z", "bug_id": 641236, "raw_text": "For querypoint debugging we would like a generalization of the 'watch' watchpoint operation.\n\nThe basic idea is that a developer wants to know about an object's past history. They know this object by a name, either a property name or variable name. The debugger wants to know when this property is created and when it is changed. A new hook would report on creation and change of any property or variable with the given name. The JS side of the debugger will operate the program and record information based on the events from this new hook to provide dataflow and reference binding debugging techniques.\n\nFrom the lastChange paper attached to bug \nhttps://bugzilla.mozilla.org/attachment.cgi?id=518957\nBug 641234\n\nsetPropertyChangeHook(): given\na function and a string, the function is called whenever a\nproperty changes and its name matches the string. For ex-\nample, if the string is foo, changes to bar.foo or baz.foo\nwould call the function. The callback function receives a\nreference to the owner of foo.", "tags": [], "is_private": false, "time": "2011-03-12T18:33:25Z", "id": 5341278, "creator": "johnjbarton@johnjbarton.com", "attachment_id": null, "text": "For querypoint debugging we would like a generalization of the 'watch' watchpoint operation.\n\nThe basic idea is that a developer wants to know about an object's past history. They know this object by a name, either a property name or variable name. The debugger wants to know when this property is created and when it is changed. A new hook would report on creation and change of any property or variable with the given name. The JS side of the debugger will operate the program and record information based on the events from this new hook to provide dataflow and reference binding debugging techniques.\n\nFrom the lastChange paper attached to bug \nhttps://bugzilla.mozilla.org/attachment.cgi?id=518957\nBug 641234\n\nsetPropertyChangeHook(): given\na function and a string, the function is called whenever a\nproperty changes and its name matches the string. For ex-\nample, if the string is foo, changes to bar.foo or baz.foo\nwould call the function. The callback function receives a\nreference to the owner of foo.", "count": 0, "author": "johnjbarton@johnjbarton.com"}, {"author": "johnjbarton@johnjbarton.com", "time": "2011-03-12T18:45:15Z", "id": 5341290, "text": "I believe this is close to the watchpoint features in\nhttps://wiki.mozilla.org/Debug_Object#Properties_of_the_Debug_Prototype_Object\n\nI also believe this is a dupe of \nBug 579342 - Conditional watchpoints for property accesses \n\nHowever, the purpose of this particular bug is to make sure we can support lastChange querypoint debugging and thus to discuss how/if the other bugs are related.", "count": 1, "attachment_id": null, "is_private": false, "raw_text": "I believe this is close to the watchpoint features in\nhttps://wiki.mozilla.org/Debug_Object#Properties_of_the_Debug_Prototype_Object\n\nI also believe this is a dupe of \nBug 579342 - Conditional watchpoints for property accesses \n\nHowever, the purpose of this particular bug is to make sure we can support lastChange querypoint debugging and thus to discuss how/if the other bugs are related.", "bug_id": 641236, "creation_time": "2011-03-12T18:45:15Z", "creator": "johnjbarton@johnjbarton.com", "tags": []}, {"raw_text": "We also need to discuss the ways we can filter objects. In the prototype we\nused \"object create location\" (e.g., file.js, line 20) for this purpose.\nHowever, we used a feature of JSD (Object tracking flag) which is not available\nanymore in Firefox 4.0.", "creation_time": "2011-03-14T14:08:37Z", "bug_id": 641236, "tags": [], "is_private": false, "time": "2011-03-14T14:08:37Z", "id": 5343062, "creator": "salman.mirghasemi@gmail.com", "attachment_id": null, "text": "We also need to discuss the ways we can filter objects. In the prototype we\nused \"object create location\" (e.g., file.js, line 20) for this purpose.\nHowever, we used a feature of JSD (Object tracking flag) which is not available\nanymore in Firefox 4.0.", "count": 2, "author": "salman.mirghasemi@gmail.com"}, {"time": "2011-03-16T14:34:47Z", "id": 5348168, "is_private": false, "raw_text": "(In reply to comment #2)\n> We also need to discuss the ways we can filter objects. In the prototype we\n> used \"object create location\" (e.g., file.js, line 20) for this purpose.\n> However, we used a feature of JSD (Object tracking flag) which is not available\n> anymore in Firefox 4.0.\n\nI don't understand the connection between \"filter\" and \"object create location\".", "bug_id": 641236, "creation_time": "2011-03-16T14:34:47Z", "tags": [], "author": "johnjbarton@johnjbarton.com", "count": 3, "text": "(In reply to comment #2)\n> We also need to discuss the ways we can filter objects. In the prototype we\n> used \"object create location\" (e.g., file.js, line 20) for this purpose.\n> However, we used a feature of JSD (Object tracking flag) which is not available\n> anymore in Firefox 4.0.\n\nI don't understand the connection between \"filter\" and \"object create location\".", "attachment_id": null, "creator": "johnjbarton@johnjbarton.com"}, {"time": "2011-03-16T14:51:39Z", "author": "salman.mirghasemi@gmail.com", "id": 5348213, "count": 4, "text": "I should have written \"object creation location\".\nTo reduce the runtime overhead, we should only set hook on those objects which have a chance to be the lastChange result. If we assume that the object is created in the same location in the re-execution, \"Object creation location\" can be used to filter out irrelevant objects: if an object is created in a location different than the location(s) that we are interested in, we do not set changeHook on its \"foo\" property.", "attachment_id": null, "is_private": false, "bug_id": 641236, "creation_time": "2011-03-16T14:51:39Z", "raw_text": "I should have written \"object creation location\".\nTo reduce the runtime overhead, we should only set hook on those objects which have a chance to be the lastChange result. If we assume that the object is created in the same location in the re-execution, \"Object creation location\" can be used to filter out irrelevant objects: if an object is created in a location different than the location(s) that we are interested in, we do not set changeHook on its \"foo\" property.", "tags": [], "creator": "salman.mirghasemi@gmail.com"}]}}}