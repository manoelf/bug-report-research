{"comments": {}, "bugs": {"670928": {"comments": [{"id": 5586629, "raw_text": "User Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:2.0.1) Gecko/20100101 Firefox/4.0.1\nBuild ID: 20110413222027\n\nSteps to reproduce:\n\nWe added WAI-ARIA landmarks to different sites. Screen readers get them without any problems from the accessibility API. But there is no way to access them in Firefox via a shortcut or in the toolbar. Providing accesskey attributes on skiplinks pointing to the landmarks is the only way to access the landmarks to users with limited motor skills.\n\n\nActual results:\n\nNo way to access a landmark overview in Firefox.\n\n\nExpected results:\n\nAdd a shortcut which opens a window displaying all the landmark regions and makes them accessible for limited motor skills users.", "attachment_id": null, "text": "User Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:2.0.1) Gecko/20100101 Firefox/4.0.1\nBuild ID: 20110413222027\n\nSteps to reproduce:\n\nWe added WAI-ARIA landmarks to different sites. Screen readers get them without any problems from the accessibility API. But there is no way to access them in Firefox via a shortcut or in the toolbar. Providing accesskey attributes on skiplinks pointing to the landmarks is the only way to access the landmarks to users with limited motor skills.\n\n\nActual results:\n\nNo way to access a landmark overview in Firefox.\n\n\nExpected results:\n\nAdd a shortcut which opens a window displaying all the landmark regions and makes them accessible for limited motor skills users.", "tags": [], "time": "2011-07-12T14:42:55Z", "bug_id": 670928, "creation_time": "2011-07-12T14:42:55Z", "author": "philipp.naderer@gmail.com", "count": 0, "is_private": false, "creator": "philipp.naderer@gmail.com"}, {"count": 1, "bug_id": 670928, "raw_text": "It makes sense to prototype this as extension and get feedback from community. Additionally it could expose hot keys to navigate by landmarks as screen readers do.\n\nGuys, what do you think?", "attachment_id": null, "id": 5588444, "creator": "surkov.alexander@gmail.com", "is_private": false, "time": "2011-07-13T07:14:45Z", "tags": [], "text": "It makes sense to prototype this as extension and get feedback from community. Additionally it could expose hot keys to navigate by landmarks as screen readers do.\n\nGuys, what do you think?", "author": "surkov.alexander@gmail.com", "creation_time": "2011-07-13T07:14:45Z"}, {"attachment_id": null, "raw_text": "I agree, this is something that can be started as an extension and then maybe folded into the Firefox main distribution later.", "id": 5588563, "is_private": false, "creator": "marco.zehe@gmail.com", "count": 2, "creation_time": "2011-07-13T09:03:10Z", "author": "marco.zehe@gmail.com", "text": "I agree, this is something that can be started as an extension and then maybe folded into the Firefox main distribution later.", "tags": [], "bug_id": 670928, "time": "2011-07-13T09:03:10Z"}, {"count": 3, "bug_id": 670928, "raw_text": "Marco, could think of UI (in terms of features) based on your experience with screen readers?", "attachment_id": null, "id": 5588570, "creator": "surkov.alexander@gmail.com", "is_private": false, "tags": [], "time": "2011-07-13T09:07:42Z", "text": "Marco, could think of UI (in terms of features) based on your experience with screen readers?", "author": "surkov.alexander@gmail.com", "creation_time": "2011-07-13T09:07:42Z"}, {"raw_text": "Screen readers offer two ways to navigate:\n1. They have a specific shortcut (d with NVDA, for example), to navigate from landmark to landmark in their virtual buffers. Shift+D in NVDA takes you backwards through the landmarks.\nSecond, they offer a list of landmarks. If you press NVDA+F7 (that's the NumPad 0 held down, and then F7 in NVDA), you get alist of items. Links is selected by default, but NVDA offers two other choices: Headings and Landmarks. When landmarks is chosen, you get a tree of landmarks, so you can even see if landmarks are in nested elements. You can choose one with the arrow keys and press Enter, and virtual cursor is taken to that position in the virtual document.\nApple with VoiceOver offer similar things: One of the rotor settings is navigation by landmarks, and the list of items (VO+U) also offers landmarks as one of the choices.\n\nSo the least this extension should do is offer these two means: 1. a keyboard shortcut that would take the keyboard focus and move it to the element or closest to the element that the landmark is on (these aren't necessarily tabbable), and second a list of landmarks to give an overview what's available.", "attachment_id": null, "id": 5588597, "count": 4, "is_private": false, "creator": "marco.zehe@gmail.com", "text": "Screen readers offer two ways to navigate:\n1. They have a specific shortcut (d with NVDA, for example), to navigate from landmark to landmark in their virtual buffers. Shift+D in NVDA takes you backwards through the landmarks.\nSecond, they offer a list of landmarks. If you press NVDA+F7 (that's the NumPad 0 held down, and then F7 in NVDA), you get alist of items. Links is selected by default, but NVDA offers two other choices: Headings and Landmarks. When landmarks is chosen, you get a tree of landmarks, so you can even see if landmarks are in nested elements. You can choose one with the arrow keys and press Enter, and virtual cursor is taken to that position in the virtual document.\nApple with VoiceOver offer similar things: One of the rotor settings is navigation by landmarks, and the list of items (VO+U) also offers landmarks as one of the choices.\n\nSo the least this extension should do is offer these two means: 1. a keyboard shortcut that would take the keyboard focus and move it to the element or closest to the element that the landmark is on (these aren't necessarily tabbable), and second a list of landmarks to give an overview what's available.", "tags": [], "bug_id": 670928, "time": "2011-07-13T09:31:52Z", "creation_time": "2011-07-13T09:31:52Z", "author": "marco.zehe@gmail.com"}, {"bug_id": 670928, "count": 5, "time": "2011-07-13T10:00:26Z", "tags": [], "text": "Thank you, Marco.\n\nDavid, do you keep in mind anybody who could prototype? This could be a nice project.", "author": "surkov.alexander@gmail.com", "creation_time": "2011-07-13T10:00:26Z", "creator": "surkov.alexander@gmail.com", "is_private": false, "id": 5588624, "raw_text": "Thank you, Marco.\n\nDavid, do you keep in mind anybody who could prototype? This could be a nice project.", "attachment_id": null}, {"is_private": false, "creator": "dbolter@mozilla.com", "count": 6, "creation_time": "2011-07-14T13:15:52Z", "author": "dbolter@mozilla.com", "text": "I agree on the approach. I don't have anyone in mind so I posted:\nhttp://groups.google.com/group/mozilla.dev.accessibility/browse_thread/thread/d4254c5c05f4bc24#", "tags": [], "bug_id": 670928, "time": "2011-07-14T13:15:52Z", "attachment_id": null, "raw_text": "I agree on the approach. I don't have anyone in mind so I posted:\nhttp://groups.google.com/group/mozilla.dev.accessibility/browse_thread/thread/d4254c5c05f4bc24#", "id": 5591149}, {"creator": "surkov.alexander@gmail.com", "is_private": false, "count": 7, "author": "surkov.alexander@gmail.com", "creation_time": "2011-11-02T17:43:38Z", "tags": [], "time": "2011-11-02T17:43:38Z", "bug_id": 670928, "text": "It seems this needs to be fixed for UUAG. David, what's the status?", "attachment_id": null, "raw_text": "It seems this needs to be fixed for UUAG. David, what's the status?", "id": 5821265}, {"id": 5836954, "attachment_id": null, "raw_text": "", "creation_time": "2011-11-09T15:02:16Z", "author": "dbolter@mozilla.com", "text": "*** Bug 676549 has been marked as a duplicate of this bug. ***", "time": "2011-11-09T15:02:16Z", "bug_id": 670928, "tags": [], "is_private": false, "creator": "dbolter@mozilla.com", "count": 8}, {"count": 9, "creator": "dbolter@mozilla.com", "is_private": false, "time": "2012-01-05T15:13:30Z", "bug_id": 670928, "tags": [], "text": "Maybe we should add UI to the Quick Find bar?!  (The one brought up by hitting '/')", "author": "dbolter@mozilla.com", "creation_time": "2012-01-05T15:13:30Z", "raw_text": "Maybe we should add UI to the Quick Find bar?!  (The one brought up by hitting '/')", "attachment_id": null, "id": 5957049}, {"creator": "dbolter@mozilla.com", "is_private": false, "author": "dbolter@mozilla.com", "creation_time": "2012-01-05T15:14:22Z", "time": "2012-01-05T15:14:22Z", "tags": [], "text": "Adding ui-wanted keyword for input on comment 9.", "attachment_id": null, "raw_text": "Adding ui-wanted keyword for input on comment 9.", "id": 5957051, "count": 10, "bug_id": 670928}, {"is_private": false, "creator": "dbolter@mozilla.com", "count": 11, "creation_time": "2012-01-05T15:23:18Z", "author": "dbolter@mozilla.com", "text": "I also want to understand the intended difference between Quick Find and Find bars. This probably belongs on the Find bar, or maybe we want a proper nav bar?", "bug_id": 670928, "time": "2012-01-05T15:23:18Z", "tags": [], "attachment_id": null, "raw_text": "I also want to understand the intended difference between Quick Find and Find bars. This probably belongs on the Find bar, or maybe we want a proper nav bar?", "id": 5957072}, {"id": 5997429, "raw_text": "Adding the ability to find landmarks in Firefox sounds like a great idea, but I think it's really best as an extension.  There isn't going to be a lot of demand for outside of users with screenreaders.\n\n(In reply to David Bolter [:davidb] from comment #11)\n> I also want to understand the intended difference between Quick Find and\n> Find bars. This probably belongs on the Find bar, or maybe we want a proper\n> nav bar?\n\nAs I understand it, the only difference is that quick find disappears when you target away from it, and regular find in page stays.  If there's actual, legitimate reason to have both of these, I'll eat my hat and post the video to YouTube.", "attachment_id": null, "text": "Adding the ability to find landmarks in Firefox sounds like a great idea, but I think it's really best as an extension.  There isn't going to be a lot of demand for outside of users with screenreaders.\n\n(In reply to David Bolter [:davidb] from comment #11)\n> I also want to understand the intended difference between Quick Find and\n> Find bars. This probably belongs on the Find bar, or maybe we want a proper\n> nav bar?\n\nAs I understand it, the only difference is that quick find disappears when you target away from it, and regular find in page stays.  If there's actual, legitimate reason to have both of these, I'll eat my hat and post the video to YouTube.", "time": "2012-01-21T01:47:34Z", "tags": [], "bug_id": 670928, "creation_time": "2012-01-21T01:47:34Z", "author": "jboriss@mozilla.com", "count": 12, "is_private": false, "creator": "jboriss@mozilla.com"}, {"id": 5997544, "attachment_id": null, "raw_text": "(In reply to Jennifer Morrow [:Boriss] (Firefox UX) from comment #12)\n> Adding the ability to find landmarks in Firefox sounds like a great idea,\n> but I think it's really best as an extension.  There isn't going to be a lot\n> of demand for outside of users with screenreaders.\n\nI do wonder about small devices where cycling through <article> elements might be handy, but I imagine we're running out of gestures.\n\nThanks for the feedback.", "author": "dbolter@mozilla.com", "creation_time": "2012-01-21T02:39:40Z", "bug_id": 670928, "tags": [], "time": "2012-01-21T02:39:40Z", "text": "(In reply to Jennifer Morrow [:Boriss] (Firefox UX) from comment #12)\n> Adding the ability to find landmarks in Firefox sounds like a great idea,\n> but I think it's really best as an extension.  There isn't going to be a lot\n> of demand for outside of users with screenreaders.\n\nI do wonder about small devices where cycling through <article> elements might be handy, but I imagine we're running out of gestures.\n\nThanks for the feedback.", "creator": "dbolter@mozilla.com", "is_private": false, "count": 13}, {"raw_text": "(In reply to Jennifer Morrow [:Boriss] (Firefox UX) from comment #12)\n> Adding the ability to find landmarks in Firefox sounds like a great idea,\n> but I think it's really best as an extension.  There isn't going to be a lot\n> of demand for outside of users with screenreaders.\n\nThe problem does not apply for users with screenreaders. They get the landmarks via the accessibilty APIs from their software.\n\nBut I met a guy who uses a small stick in his mouth to press buttons on the keyboard - his only \"assistive technology\". If there are accesskey-attributes he is pretty fast with this method. But more web sites drop accesskeys and replace them with ARIA landmark roles. This works fine for screenreader users, but this guy now has to a) install a screenreader he doesn't need or b) tab through the whole page.\n\nI agree that an extension for that special needs would be okay and easier to implement than a build-in solution.", "attachment_id": null, "id": 5998031, "count": 14, "is_private": false, "creator": "philipp.naderer@gmail.com", "text": "(In reply to Jennifer Morrow [:Boriss] (Firefox UX) from comment #12)\n> Adding the ability to find landmarks in Firefox sounds like a great idea,\n> but I think it's really best as an extension.  There isn't going to be a lot\n> of demand for outside of users with screenreaders.\n\nThe problem does not apply for users with screenreaders. They get the landmarks via the accessibilty APIs from their software.\n\nBut I met a guy who uses a small stick in his mouth to press buttons on the keyboard - his only \"assistive technology\". If there are accesskey-attributes he is pretty fast with this method. But more web sites drop accesskeys and replace them with ARIA landmark roles. This works fine for screenreader users, but this guy now has to a) install a screenreader he doesn't need or b) tab through the whole page.\n\nI agree that an extension for that special needs would be okay and easier to implement than a build-in solution.", "time": "2012-01-21T13:50:43Z", "bug_id": 670928, "tags": [], "creation_time": "2012-01-21T13:50:43Z", "author": "philipp.naderer@gmail.com"}, {"bug_id": 670928, "count": 15, "time": "2012-01-21T18:56:48Z", "tags": [], "text": "This is related to bug 698823, where we introduce an in-browser virtual cursor that uses a11y rules to navigate a document.", "author": "eitan@monotonous.org", "creation_time": "2012-01-21T18:56:48Z", "creator": "eitan@monotonous.org", "is_private": false, "id": 5998357, "raw_text": "This is related to bug 698823, where we introduce an in-browser virtual cursor that uses a11y rules to navigate a document.", "attachment_id": null}, {"count": 16, "is_private": false, "creator": "dbolter@mozilla.com", "text": "Boriss, after consideration we'd like to keep this on the radar, so I am reopening and assigning to Eitan. We have a nice idea that will use Eitan's traversal work. We may end up with an extension or something default preffed off in product. We'll be sure to loop back.\n\n(If the bug is causing clutter - you can reassign to core/Disability Access APIs)", "bug_id": 670928, "tags": [], "time": "2012-01-24T20:08:22Z", "creation_time": "2012-01-24T20:08:22Z", "author": "dbolter@mozilla.com", "raw_text": "Boriss, after consideration we'd like to keep this on the radar, so I am reopening and assigning to Eitan. We have a nice idea that will use Eitan's traversal work. We may end up with an extension or something default preffed off in product. We'll be sure to loop back.\n\n(If the bug is causing clutter - you can reassign to core/Disability Access APIs)", "attachment_id": null, "id": 6005113}, {"id": 6029705, "raw_text": "Now that we have an in-browser virtual cursor writing some javascript that would introduce this functionality would be trivial. It should first be demonstrated as an extension, and maybe later added as a feature in the core product.\n\nThe one non-trivial bit is introducing virtual cursor to the platform APIs so that screen readers could pick up changes and locations. In AT-SPI, I could see this being active descendants.", "attachment_id": null, "text": "Now that we have an in-browser virtual cursor writing some javascript that would introduce this functionality would be trivial. It should first be demonstrated as an extension, and maybe later added as a feature in the core product.\n\nThe one non-trivial bit is introducing virtual cursor to the platform APIs so that screen readers could pick up changes and locations. In AT-SPI, I could see this being active descendants.", "time": "2012-02-02T18:52:48Z", "bug_id": 670928, "tags": [], "creation_time": "2012-02-02T18:52:48Z", "author": "eitan@monotonous.org", "count": 17, "is_private": false, "creator": "eitan@monotonous.org"}, {"time": "2012-02-02T20:20:32Z", "tags": [], "text": "(In reply to Eitan Isaacson [:eeejay] from comment #17)\n> Now that we have an in-browser virtual cursor writing some javascript that\n> would introduce this functionality would be trivial. It should first be\n> demonstrated as an extension, and maybe later added as a feature in the core\n> product.\n\nI'm concerned that will cause us to activate accessibility in a lot of cases where we don't now.  I also don't see why the dom tree walker wouldn't be enough here.\n\n> The one non-trivial bit is introducing virtual cursor to the platform APIs\n> so that screen readers could pick up changes and locations. In AT-SPI, I\n> could see this being active descendants.\n\nwhy? my understanding of the bug would involve the navigated to landmark being focused which we of course already expose.", "author": "tbsaunde+mozbugs@tbsaunde.org", "creation_time": "2012-02-02T20:20:32Z", "creator": "tbsaunde+mozbugs@tbsaunde.org", "is_private": false, "id": 6030063, "raw_text": "(In reply to Eitan Isaacson [:eeejay] from comment #17)\n> Now that we have an in-browser virtual cursor writing some javascript that\n> would introduce this functionality would be trivial. It should first be\n> demonstrated as an extension, and maybe later added as a feature in the core\n> product.\n\nI'm concerned that will cause us to activate accessibility in a lot of cases where we don't now.  I also don't see why the dom tree walker wouldn't be enough here.\n\n> The one non-trivial bit is introducing virtual cursor to the platform APIs\n> so that screen readers could pick up changes and locations. In AT-SPI, I\n> could see this being active descendants.\n\nwhy? my understanding of the bug would involve the navigated to landmark being focused which we of course already expose.", "attachment_id": null, "bug_id": 670928, "count": 18}, {"bug_id": 670928, "count": 19, "id": 6030359, "raw_text": "(In reply to Trevor Saunders (:tbsaunde) from comment #18)\n> (In reply to Eitan Isaacson [:eeejay] from comment #17)\n> > Now that we have an in-browser virtual cursor writing some javascript that\n> > would introduce this functionality would be trivial. It should first be\n> > demonstrated as an extension, and maybe later added as a feature in the core\n> > product.\n> \n> I'm concerned that will cause us to activate accessibility in a lot of cases\n> where we don't now.  I also don't see why the dom tree walker wouldn't be\n> enough here.\n> \n\nThis would consists of two bits:\n1. A keyboard event listener that would consume a predefined key combo and would retrieve the virtual cursor from the tab document and move it. Accessibility does not need to be activated before that.\n2. An event listener for visual indication, it won't activate accessibility.\n\n> > The one non-trivial bit is introducing virtual cursor to the platform APIs\n> > so that screen readers could pick up changes and locations. In AT-SPI, I\n> > could see this being active descendants.\n> \n> why? my understanding of the bug would involve the navigated to landmark\n> being focused which we of course already expose.\n\nArbitrary elements like landmark containers are not focusable.\n\nLet's say we do it with your approach, just walk the DOM - once you land on a landmark element what do you do? How do you get a desktop screen reader to read that section? You need to fire an event that screen readers could consume that is outside of the usual focusable/focused and selectable/selected paradigm. That is what the virtual cursor API could provide.", "attachment_id": null, "text": "(In reply to Trevor Saunders (:tbsaunde) from comment #18)\n> (In reply to Eitan Isaacson [:eeejay] from comment #17)\n> > Now that we have an in-browser virtual cursor writing some javascript that\n> > would introduce this functionality would be trivial. It should first be\n> > demonstrated as an extension, and maybe later added as a feature in the core\n> > product.\n> \n> I'm concerned that will cause us to activate accessibility in a lot of cases\n> where we don't now.  I also don't see why the dom tree walker wouldn't be\n> enough here.\n> \n\nThis would consists of two bits:\n1. A keyboard event listener that would consume a predefined key combo and would retrieve the virtual cursor from the tab document and move it. Accessibility does not need to be activated before that.\n2. An event listener for visual indication, it won't activate accessibility.\n\n> > The one non-trivial bit is introducing virtual cursor to the platform APIs\n> > so that screen readers could pick up changes and locations. In AT-SPI, I\n> > could see this being active descendants.\n> \n> why? my understanding of the bug would involve the navigated to landmark\n> being focused which we of course already expose.\n\nArbitrary elements like landmark containers are not focusable.\n\nLet's say we do it with your approach, just walk the DOM - once you land on a landmark element what do you do? How do you get a desktop screen reader to read that section? You need to fire an event that screen readers could consume that is outside of the usual focusable/focused and selectable/selected paradigm. That is what the virtual cursor API could provide.", "tags": [], "time": "2012-02-02T21:36:39Z", "creation_time": "2012-02-02T21:36:39Z", "author": "eitan@monotonous.org", "is_private": false, "creator": "eitan@monotonous.org"}, {"author": "tbsaunde+mozbugs@tbsaunde.org", "creation_time": "2012-02-02T22:03:49Z", "bug_id": 670928, "tags": [], "time": "2012-02-02T22:03:49Z", "text": "(In reply to Eitan Isaacson [:eeejay] from comment #19)\n> (In reply to Trevor Saunders (:tbsaunde) from comment #18)\n> > (In reply to Eitan Isaacson [:eeejay] from comment #17)\n> > > Now that we have an in-browser virtual cursor writing some javascript that\n> > > would introduce this functionality would be trivial. It should first be\n> > > demonstrated as an extension, and maybe later added as a feature in the core\n> > > product.\n> > \n> > I'm concerned that will cause us to activate accessibility in a lot of cases\n> > where we don't now.  I also don't see why the dom tree walker wouldn't be\n> > enough here.\n> > \n> \n> This would consists of two bits:\n> 1. A keyboard event listener that would consume a predefined key combo and\n> would retrieve the virtual cursor from the tab document and move it.\n> Accessibility does not need to be activated before that.\n\nI was assuming it would only force a11y on lazily, but it will still mean anyone who uses the feature will have a11y on when they don't really need it.\n\n> 2. An event listener for visual indication, it won't activate accessibility.\n\nwhat event are you talking about here that doesn't assume a11y is on?\n\n> > > The one non-trivial bit is introducing virtual cursor to the platform APIs\n> > > so that screen readers could pick up changes and locations. In AT-SPI, I\n> > > could see this being active descendants.\n> > \n> > why? my understanding of the bug would involve the navigated to landmark\n> > being focused which we of course already expose.\n> \n> Arbitrary elements like landmark containers are not focusable.\n\nwell, not necessarily focusable, but that's a problem that you don't really solve either since its not really clear what it means to navigate to something that isn't focusable.\n\n> Let's say we do it with your approach, just walk the DOM - once you land on\n> a landmark element what do you do? How do you get a desktop screen reader to\n> read that section? You need to fire an event that screen readers could\n> consume that is outside of the usual focusable/focused and\n> selectable/selected paradigm. That is what the virtual cursor API could\n> provide.\n\nAs I understand the bug the main case of interest is the case without a screen reader.  However once we have some way of doing the navigation we do need to think about this problem if  the solution to the navigation problem isn't solved in such a way that it already works.\n\nbtw I'm not totally convinced that we can't use focused since focused is defined to be the thing with  keyboard focus and if it doesn't have keyboard focus for some value of focus I'm not sure what it means that you 'navigated\" to it.", "creator": "tbsaunde+mozbugs@tbsaunde.org", "is_private": false, "count": 20, "id": 6030454, "attachment_id": null, "raw_text": "(In reply to Eitan Isaacson [:eeejay] from comment #19)\n> (In reply to Trevor Saunders (:tbsaunde) from comment #18)\n> > (In reply to Eitan Isaacson [:eeejay] from comment #17)\n> > > Now that we have an in-browser virtual cursor writing some javascript that\n> > > would introduce this functionality would be trivial. It should first be\n> > > demonstrated as an extension, and maybe later added as a feature in the core\n> > > product.\n> > \n> > I'm concerned that will cause us to activate accessibility in a lot of cases\n> > where we don't now.  I also don't see why the dom tree walker wouldn't be\n> > enough here.\n> > \n> \n> This would consists of two bits:\n> 1. A keyboard event listener that would consume a predefined key combo and\n> would retrieve the virtual cursor from the tab document and move it.\n> Accessibility does not need to be activated before that.\n\nI was assuming it would only force a11y on lazily, but it will still mean anyone who uses the feature will have a11y on when they don't really need it.\n\n> 2. An event listener for visual indication, it won't activate accessibility.\n\nwhat event are you talking about here that doesn't assume a11y is on?\n\n> > > The one non-trivial bit is introducing virtual cursor to the platform APIs\n> > > so that screen readers could pick up changes and locations. In AT-SPI, I\n> > > could see this being active descendants.\n> > \n> > why? my understanding of the bug would involve the navigated to landmark\n> > being focused which we of course already expose.\n> \n> Arbitrary elements like landmark containers are not focusable.\n\nwell, not necessarily focusable, but that's a problem that you don't really solve either since its not really clear what it means to navigate to something that isn't focusable.\n\n> Let's say we do it with your approach, just walk the DOM - once you land on\n> a landmark element what do you do? How do you get a desktop screen reader to\n> read that section? You need to fire an event that screen readers could\n> consume that is outside of the usual focusable/focused and\n> selectable/selected paradigm. That is what the virtual cursor API could\n> provide.\n\nAs I understand the bug the main case of interest is the case without a screen reader.  However once we have some way of doing the navigation we do need to think about this problem if  the solution to the navigation problem isn't solved in such a way that it already works.\n\nbtw I'm not totally convinced that we can't use focused since focused is defined to be the thing with  keyboard focus and if it doesn't have keyboard focus for some value of focus I'm not sure what it means that you 'navigated\" to it."}, {"raw_text": "CC+ Neil Deakin.\n\nWe don't want to instantiate the a11y engine, but we want a way to 'move' keyboard context (in the keyboard nav sense) to the landmark. I'm not sure of what we call this. It is like what happens when you 'click' or 'select' some text and hit tab... I think the tab nav picks up from that point. In this case we want to move that point to the landmark.\n\nNeil can you describe how we can do this under the hood?", "attachment_id": null, "id": 6286973, "count": 21, "creator": "dbolter@mozilla.com", "is_private": false, "bug_id": 670928, "tags": [], "time": "2012-05-07T20:33:54Z", "text": "CC+ Neil Deakin.\n\nWe don't want to instantiate the a11y engine, but we want a way to 'move' keyboard context (in the keyboard nav sense) to the landmark. I'm not sure of what we call this. It is like what happens when you 'click' or 'select' some text and hit tab... I think the tab nav picks up from that point. In this case we want to move that point to the landmark.\n\nNeil can you describe how we can do this under the hood?", "author": "dbolter@mozilla.com", "creation_time": "2012-05-07T20:33:54Z"}, {"creation_time": "2012-05-07T20:35:22Z", "author": "dbolter@mozilla.com", "text": "One target audience for this is people with mobility impairment or limited gestures.", "bug_id": 670928, "tags": [], "time": "2012-05-07T20:35:22Z", "is_private": false, "creator": "dbolter@mozilla.com", "count": 22, "id": 6286982, "attachment_id": null, "raw_text": "One target audience for this is people with mobility impairment or limited gestures."}, {"attachment_id": null, "raw_text": "(In reply to David Bolter [:davidb] from comment #21)\n> CC+ Neil Deakin.\n> \n> We don't want to instantiate the a11y engine, but we want a way to 'move'\n> keyboard context (in the keyboard nav sense) to the landmark. I'm not sure\n> of what we call this. It is like what happens when you 'click' or 'select'\n> some text and hit tab... I think the tab nav picks up from that point. In\n> this case we want to move that point to the landmark.\n\n\nI'm not sure what you're referring to, but it sounds like you just want to move the caret.", "id": 6287000, "is_private": false, "creator": "enndeakin@gmail.com", "count": 23, "creation_time": "2012-05-07T20:38:57Z", "author": "enndeakin@gmail.com", "text": "(In reply to David Bolter [:davidb] from comment #21)\n> CC+ Neil Deakin.\n> \n> We don't want to instantiate the a11y engine, but we want a way to 'move'\n> keyboard context (in the keyboard nav sense) to the landmark. I'm not sure\n> of what we call this. It is like what happens when you 'click' or 'select'\n> some text and hit tab... I think the tab nav picks up from that point. In\n> this case we want to move that point to the landmark.\n\n\nI'm not sure what you're referring to, but it sounds like you just want to move the caret.", "bug_id": 670928, "tags": [], "time": "2012-05-07T20:38:57Z"}, {"count": 24, "bug_id": 670928, "creator": "mattking@us.ibm.com", "is_private": false, "author": "mattking@us.ibm.com", "creation_time": "2012-05-07T23:12:13Z", "tags": [], "time": "2012-05-07T23:12:13Z", "text": "(In reply to Neil Deakin from comment #23)\n> (In reply to David Bolter [:davidb] from comment #21)\n> > CC+ Neil Deakin.\n> > \n> > We don't want to instantiate the a11y engine, but we want a way to 'move'\n> > keyboard context (in the keyboard nav sense) to the landmark. I'm not sure\n> > of what we call this. It is like what happens when you 'click' or 'select'\n> > some text and hit tab... I think the tab nav picks up from that point. In\n> > this case we want to move that point to the landmark.\n> \n> \n> I'm not sure what you're referring to, but it sounds like you just want to\n> move the caret.\n\nI don't really understand the browser internals here, but from the perspective of end users, both screen reader users and other non-mousing populations, it would be very desirable if choosing a landmark region from the tree of landmarks would focus on the element with the landmark role in the same way that it would as if the page author would have put tabindex on that element.\n\nAs a blind user, I am not completely familiar with visual focus indicator behavior in Firefox, but it is my understanding that putting tabindex>=0 on an element, e.g., a div, will cause a focus rectangle to be drawn around the div. Is that right?\n\nWhen a sighted user chooses to navigate to a landmark region from the tree of landmarks, I think it would be extremely useful for the user to see the region depicted on the screen with a focus rectangle. Would this be possible even if the region does not have a tabindex and is not in the tab order?\n\nThere are some cases where page authors are putting landmark divs in the tab order to offer additional function such as expanding/collapsing.\n\nIf this is possible, I would expect that:\n\n1. The user could invoke a context menu for the focused region.\n\n2. If the user presses tab, the focus would move to the next focusable element in the DOM, which may or may not be in the focused region.\n\nMaybe it is a bit radical to ask that keyboard focus be given to an element that is not necessarily focusable. But, it solves some other problems, including how to tell any assistive technologies what has happened -- generate focus change event. This is sort of like giving all keyboard users the capability that only screen reader users have today with their virtual cursor functions.\n\nAnother huge benefit to manipulating the actual keyboard focus is that it aids interaction between blind and sighted users. Right now it takes special tools for sighted users to see region boundaries.\n\nIt might also be really cool if sighted users could dynamically see the region boundaries as they navigate through the tree of regions. Then pressing enter would close the dialog and align the keyboard focus with the visual indicator.", "attachment_id": null, "raw_text": "(In reply to Neil Deakin from comment #23)\n> (In reply to David Bolter [:davidb] from comment #21)\n> > CC+ Neil Deakin.\n> > \n> > We don't want to instantiate the a11y engine, but we want a way to 'move'\n> > keyboard context (in the keyboard nav sense) to the landmark. I'm not sure\n> > of what we call this. It is like what happens when you 'click' or 'select'\n> > some text and hit tab... I think the tab nav picks up from that point. In\n> > this case we want to move that point to the landmark.\n> \n> \n> I'm not sure what you're referring to, but it sounds like you just want to\n> move the caret.\n\nI don't really understand the browser internals here, but from the perspective of end users, both screen reader users and other non-mousing populations, it would be very desirable if choosing a landmark region from the tree of landmarks would focus on the element with the landmark role in the same way that it would as if the page author would have put tabindex on that element.\n\nAs a blind user, I am not completely familiar with visual focus indicator behavior in Firefox, but it is my understanding that putting tabindex>=0 on an element, e.g., a div, will cause a focus rectangle to be drawn around the div. Is that right?\n\nWhen a sighted user chooses to navigate to a landmark region from the tree of landmarks, I think it would be extremely useful for the user to see the region depicted on the screen with a focus rectangle. Would this be possible even if the region does not have a tabindex and is not in the tab order?\n\nThere are some cases where page authors are putting landmark divs in the tab order to offer additional function such as expanding/collapsing.\n\nIf this is possible, I would expect that:\n\n1. The user could invoke a context menu for the focused region.\n\n2. If the user presses tab, the focus would move to the next focusable element in the DOM, which may or may not be in the focused region.\n\nMaybe it is a bit radical to ask that keyboard focus be given to an element that is not necessarily focusable. But, it solves some other problems, including how to tell any assistive technologies what has happened -- generate focus change event. This is sort of like giving all keyboard users the capability that only screen reader users have today with their virtual cursor functions.\n\nAnother huge benefit to manipulating the actual keyboard focus is that it aids interaction between blind and sighted users. Right now it takes special tools for sighted users to see region boundaries.\n\nIt might also be really cool if sighted users could dynamically see the region boundaries as they navigate through the tree of regions. Then pressing enter would close the dialog and align the keyboard focus with the visual indicator.", "id": 6287605}, {"id": 6290693, "attachment_id": null, "raw_text": "(In reply to Neil Deakin from comment #23)\n> (In reply to David Bolter [:davidb] from comment #21)\n> > CC+ Neil Deakin.\n> > \n> > We don't want to instantiate the a11y engine, but we want a way to 'move'\n> > keyboard context (in the keyboard nav sense) to the landmark. I'm not sure\n> > of what we call this. It is like what happens when you 'click' or 'select'\n> > some text and hit tab... I think the tab nav picks up from that point. In\n> > this case we want to move that point to the landmark.\n> \n> \n> I'm not sure what you're referring to, but it sounds like you just want to\n> move the caret.\n\nYes! Caret! Thanks :)", "author": "dbolter@mozilla.com", "creation_time": "2012-05-08T20:25:27Z", "time": "2012-05-08T20:25:27Z", "tags": [], "text": "(In reply to Neil Deakin from comment #23)\n> (In reply to David Bolter [:davidb] from comment #21)\n> > CC+ Neil Deakin.\n> > \n> > We don't want to instantiate the a11y engine, but we want a way to 'move'\n> > keyboard context (in the keyboard nav sense) to the landmark. I'm not sure\n> > of what we call this. It is like what happens when you 'click' or 'select'\n> > some text and hit tab... I think the tab nav picks up from that point. In\n> > this case we want to move that point to the landmark.\n> \n> \n> I'm not sure what you're referring to, but it sounds like you just want to\n> move the caret.\n\nYes! Caret! Thanks :)", "creator": "dbolter@mozilla.com", "is_private": false, "bug_id": 670928, "count": 25}, {"bug_id": 670928, "count": 26, "text": "there is a addon for firefox hat has been around for a year https://github.com/davidtodd/landmarks", "time": "2013-01-29T14:13:44Z", "tags": [], "creation_time": "2013-01-29T14:13:44Z", "author": "faulkner.steve@gmail.com", "is_private": false, "creator": "faulkner.steve@gmail.com", "id": 7048699, "raw_text": "there is a addon for firefox hat has been around for a year https://github.com/davidtodd/landmarks", "attachment_id": null}, {"count": 27, "creator": "makoto.ueki@gmail.com", "is_private": false, "tags": [], "bug_id": 670928, "time": "2013-02-01T04:28:59Z", "text": "Will Firefox support keyboard navigation using <main> element?\n\nIn HTML 5.1 spec [1], there is a note which reads:\n\"User agents that support keyboard navigation of content are strongly encouraged to provide a method to navigate to the main element and once navigated to, ensure the next element in the focus order is the first focusable element within the main element. This will provide a simple method for keyboard users to bypass blocks of content such as navigation links. \"\n\nThe keyboard navigation using <main> element allows sighted keyboard users to more easily navigate through web pages. For example, users press \"M\" key to move the focus to the <main> element, and then press \"Tab\" key to move the focus to the first focusable element within the <main> element. They won't need to press \"Tab\" key over again and again any more.\n\nW3C User Agent Accessibility Guidelines (UAAG) 1.0 [2] recommends user agents to support the keyboard navigation.\n\"9.9 Allow structured navigation (P2) \n- Allow the user to navigate efficiently to and among important structural elements in rendered content.\n- As part of satisfying provision one of this checkpoint, allow forward and backward sequential navigation.\"\n\nThe working draft of UAAG 2.0 [3] also encourages user agents to do this at Level A.\n\"2.3.1 Direct Navigation to Important Elements (former 2.7.4):\nThe user can navigate directly to any important (e.g. structural or operable) element in rendered content. (Level A)\"\n\n\nIt could also make it easier for web developers to provide the mechanism to bypass blocks of content that are repeated on multiple web pages. It is required in WCAG 2.0 at Level A.\n\nI'm looking forward to Firefox's support for the keyboard navigation.\n\n[1] http://www.w3.org/html/wg/drafts/html/master/grouping-content.html#the-main-element\n[2] http://www.w3.org/TR/UAAG10/guidelines.html#tech-nav-structure\n[3] http://www.w3.org/TR/2012/WD-UAAG20-20121004/#sc-231\n[4] http://www.w3.org/TR/2008/REC-WCAG20-20081211/#navigation-mechanisms-skip", "author": "makoto.ueki@gmail.com", "creation_time": "2013-02-01T04:28:59Z", "raw_text": "Will Firefox support keyboard navigation using <main> element?\n\nIn HTML 5.1 spec [1], there is a note which reads:\n\"User agents that support keyboard navigation of content are strongly encouraged to provide a method to navigate to the main element and once navigated to, ensure the next element in the focus order is the first focusable element within the main element. This will provide a simple method for keyboard users to bypass blocks of content such as navigation links. \"\n\nThe keyboard navigation using <main> element allows sighted keyboard users to more easily navigate through web pages. For example, users press \"M\" key to move the focus to the <main> element, and then press \"Tab\" key to move the focus to the first focusable element within the <main> element. They won't need to press \"Tab\" key over again and again any more.\n\nW3C User Agent Accessibility Guidelines (UAAG) 1.0 [2] recommends user agents to support the keyboard navigation.\n\"9.9 Allow structured navigation (P2) \n- Allow the user to navigate efficiently to and among important structural elements in rendered content.\n- As part of satisfying provision one of this checkpoint, allow forward and backward sequential navigation.\"\n\nThe working draft of UAAG 2.0 [3] also encourages user agents to do this at Level A.\n\"2.3.1 Direct Navigation to Important Elements (former 2.7.4):\nThe user can navigate directly to any important (e.g. structural or operable) element in rendered content. (Level A)\"\n\n\nIt could also make it easier for web developers to provide the mechanism to bypass blocks of content that are repeated on multiple web pages. It is required in WCAG 2.0 at Level A.\n\nI'm looking forward to Firefox's support for the keyboard navigation.\n\n[1] http://www.w3.org/html/wg/drafts/html/master/grouping-content.html#the-main-element\n[2] http://www.w3.org/TR/UAAG10/guidelines.html#tech-nav-structure\n[3] http://www.w3.org/TR/2012/WD-UAAG20-20121004/#sc-231\n[4] http://www.w3.org/TR/2008/REC-WCAG20-20081211/#navigation-mechanisms-skip", "attachment_id": null, "id": 7060590}, {"attachment_id": null, "raw_text": "In addition to what Makoto Ueki wrote in comment #27 I could like to have a visual indicator that can tell a user if the main element is used on a page. \n\nUsing that it should be possible for a user to discover if they can use the keyboard shortcut for the main element or not.", "id": 7079863, "is_private": false, "creator": "peter.winnberg@gmail.com", "creation_time": "2013-02-07T10:27:05Z", "author": "peter.winnberg@gmail.com", "text": "In addition to what Makoto Ueki wrote in comment #27 I could like to have a visual indicator that can tell a user if the main element is used on a page. \n\nUsing that it should be possible for a user to discover if they can use the keyboard shortcut for the main element or not.", "tags": [], "time": "2013-02-07T10:27:05Z", "count": 28, "bug_id": 670928}, {"id": 7378685, "raw_text": "I agree with Matt in comment 24 who said that sighted users could benefit from this feature too. We are building a web app that has several large named sections, and I have often thought how nice it would be to be able to jump from one section to another without moving my hands from the keyboard. This is what makes using a desktop app so much easier than using a web app - the desktop app has the ability to add \"navigation shortcut keys\" so that power users can navigate efficiently. Unfortunately, web apps can't easily add shortcut keys because they are already spoken for by the platforms, the browsers, the browser dev tools, and the screen readers and magnifiers that web apps must run in concert with. Because of this, web apps will always feel \"more clunky\" to me than their equivalent desktop apps.\n\nI also agree with Makoto in comment 27 that if there is a <main> element (or an element with role=\"main\") then it should be included in the list of keyboard-navigable landmarks. (To address comment 28, inclusion in the list is what makes it discoverable).\n\nI disagree with Jennifer in comment 12 that\n> Adding the ability to find landmarks in Firefox sounds like a great idea,\n> but I think it's really best as an extension.  There isn't going to be a lot\n> of demand for outside of users with screenreaders.\n\nI think this is actually a pretty important feature to have. As more web applications come online we will need ways to empower users so that they will be more comfortable on the web. Having a navigation mechanism built in to the browser will make it just a little bit easier, because the feature would gradually become familiar to everyone as they adopt it moving forward.\n\nThe opening comment of this bug says it best, although I would change the last few words as follows:\n\"Expected results: Add a shortcut which opens a window displaying all the landmark regions and makes them accessible for all.\"", "attachment_id": null, "text": "I agree with Matt in comment 24 who said that sighted users could benefit from this feature too. We are building a web app that has several large named sections, and I have often thought how nice it would be to be able to jump from one section to another without moving my hands from the keyboard. This is what makes using a desktop app so much easier than using a web app - the desktop app has the ability to add \"navigation shortcut keys\" so that power users can navigate efficiently. Unfortunately, web apps can't easily add shortcut keys because they are already spoken for by the platforms, the browsers, the browser dev tools, and the screen readers and magnifiers that web apps must run in concert with. Because of this, web apps will always feel \"more clunky\" to me than their equivalent desktop apps.\n\nI also agree with Makoto in comment 27 that if there is a <main> element (or an element with role=\"main\") then it should be included in the list of keyboard-navigable landmarks. (To address comment 28, inclusion in the list is what makes it discoverable).\n\nI disagree with Jennifer in comment 12 that\n> Adding the ability to find landmarks in Firefox sounds like a great idea,\n> but I think it's really best as an extension.  There isn't going to be a lot\n> of demand for outside of users with screenreaders.\n\nI think this is actually a pretty important feature to have. As more web applications come online we will need ways to empower users so that they will be more comfortable on the web. Having a navigation mechanism built in to the browser will make it just a little bit easier, because the feature would gradually become familiar to everyone as they adopt it moving forward.\n\nThe opening comment of this bug says it best, although I would change the last few words as follows:\n\"Expected results: Add a shortcut which opens a window displaying all the landmark regions and makes them accessible for all.\"", "time": "2013-05-02T06:12:17Z", "bug_id": 670928, "tags": [], "creation_time": "2013-05-02T06:12:17Z", "author": "carolynmacleod4@gmail.com", "count": 29, "is_private": false, "creator": "carolynmacleod4@gmail.com"}, {"bug_id": 670928, "count": 30, "time": "2013-05-02T06:29:00Z", "tags": [], "text": "(In reply to Jennifer Morrow [:Boriss] (Firefox UX) from comment #12)\n> Adding the ability to find landmarks in Firefox sounds like a great idea,\n> but I think it's really best as an extension.  There isn't going to be a lot\n> of demand for outside of users with screenreaders.\n\nHow did you arrive at this conclusion? do you have data to back it up? I would suggest its the exact opposite, screen reader users can already navigate landmarks, support is already built in to most screen readers[1], its users with physical disabilities that make it difficult to use the mouse that will benefit'\n\nIt is noted that Firefox has lots of built in developer tools[2] that have lots of additional UI (for a relatively small group of users - developers), so it is difficult to understand why a bit of extra UI that would help users with disabilities to navigate and make sense of page content would be rejected. \n\n\n[1] http://blog.paciellogroup.com/2011/07/html5-accessibility-chops-aria-landmark-support/\n[2]http://www.howtogeek.com/105320/how-to-use-firefoxs-web-developer-tools/", "author": "faulkner.steve@gmail.com", "creation_time": "2013-05-02T06:29:00Z", "creator": "faulkner.steve@gmail.com", "is_private": false, "id": 7378695, "raw_text": "(In reply to Jennifer Morrow [:Boriss] (Firefox UX) from comment #12)\n> Adding the ability to find landmarks in Firefox sounds like a great idea,\n> but I think it's really best as an extension.  There isn't going to be a lot\n> of demand for outside of users with screenreaders.\n\nHow did you arrive at this conclusion? do you have data to back it up? I would suggest its the exact opposite, screen reader users can already navigate landmarks, support is already built in to most screen readers[1], its users with physical disabilities that make it difficult to use the mouse that will benefit'\n\nIt is noted that Firefox has lots of built in developer tools[2] that have lots of additional UI (for a relatively small group of users - developers), so it is difficult to understand why a bit of extra UI that would help users with disabilities to navigate and make sense of page content would be rejected. \n\n\n[1] http://blog.paciellogroup.com/2011/07/html5-accessibility-chops-aria-landmark-support/\n[2]http://www.howtogeek.com/105320/how-to-use-firefoxs-web-developer-tools/", "attachment_id": null}, {"author": "carolynmacleod4@gmail.com", "creation_time": "2013-05-02T07:01:53Z", "time": "2013-05-02T07:01:53Z", "tags": [], "bug_id": 670928, "text": "I'd like to address the focus issues beginning in comment 19:\n>> Arbitrary elements like landmark containers are not focusable.\n\nand continuing in comment 20:\n> well, not necessarily focusable, ...\n> its not really clear what it means to navigate to something that isn't focusable.\n> ... As I understand the bug the main case of interest is the case without a screen reader.\n\nAgreed. It's not clear what navigating to a non-focusable element without a screen reader means. So let's work on clarifying. One possibility is to only include landmark elements that are focusable or have focusable children in the list. When the user selects an element from the list, focus can go to its first focusable child element (or if there's any way to know the child element that had focus the last time the landmark was \"navigated to\", then that might be an interesting possibility).\n\nAnother possibility is to consider what Matt suggested in comment 24, kind of a pseudo-focus indicator if the landmark element doesn't take focus, and then the next tab key takes you to the first focusable child. This might not be what sighted users want however - I suspect they would prefer to be brought directly to the focusable child. I do, however, love this idea from comment 24:\n> It might also be really cool if sighted users could dynamically see the region\n> boundaries as they navigate through the tree of regions. Then pressing enter\n> would close the dialog and align the keyboard focus with the visual indicator.\nalthough, again, I think it might be more efficient to give focus to a focusable child when enter is pressed.", "creator": "carolynmacleod4@gmail.com", "is_private": false, "count": 31, "id": 7378747, "attachment_id": null, "raw_text": "I'd like to address the focus issues beginning in comment 19:\n>> Arbitrary elements like landmark containers are not focusable.\n\nand continuing in comment 20:\n> well, not necessarily focusable, ...\n> its not really clear what it means to navigate to something that isn't focusable.\n> ... As I understand the bug the main case of interest is the case without a screen reader.\n\nAgreed. It's not clear what navigating to a non-focusable element without a screen reader means. So let's work on clarifying. One possibility is to only include landmark elements that are focusable or have focusable children in the list. When the user selects an element from the list, focus can go to its first focusable child element (or if there's any way to know the child element that had focus the last time the landmark was \"navigated to\", then that might be an interesting possibility).\n\nAnother possibility is to consider what Matt suggested in comment 24, kind of a pseudo-focus indicator if the landmark element doesn't take focus, and then the next tab key takes you to the first focusable child. This might not be what sighted users want however - I suspect they would prefer to be brought directly to the focusable child. I do, however, love this idea from comment 24:\n> It might also be really cool if sighted users could dynamically see the region\n> boundaries as they navigate through the tree of regions. Then pressing enter\n> would close the dialog and align the keyboard focus with the visual indicator.\nalthough, again, I think it might be more efficient to give focus to a focusable child when enter is pressed."}, {"attachment_id": null, "raw_text": "(In reply to Carolyn MacLeod from comment #31)\n> I'd like to address the focus issues beginning in comment 19:\n> >> Arbitrary elements like landmark containers are not focusable.\n> \n> and continuing in comment 20:\n> > well, not necessarily focusable, ...\n> > its not really clear what it means to navigate to something that isn't focusable.\n> > ... As I understand the bug the main case of interest is the case without a screen reader.\n> \n> Agreed. It's not clear what navigating to a non-focusable element without a\n> screen reader means. So let's work on clarifying. One possibility is to only\n> include landmark elements that are focusable or have focusable children in\n> the list. When the user selects an element from the list, focus can go to\n> its first focusable child element (or if there's any way to know the child\n> element that had focus the last time the landmark was \"navigated to\", then\n> that might be an interesting possibility).\n> \n> Another possibility is to consider what Matt suggested in comment 24, kind\n> of a pseudo-focus indicator if the landmark element doesn't take focus, and\n> then the next tab key takes you to the first focusable child. This might not\n> be what sighted users want however - I suspect they would prefer to be\n> brought directly to the focusable child. I do, however, love this idea from\n> comment 24:\n> > It might also be really cool if sighted users could dynamically see the region\n> > boundaries as they navigate through the tree of regions. Then pressing enter\n> > would close the dialog and align the keyboard focus with the visual indicator.\n> although, again, I think it might be more efficient to give focus to a\n> focusable child when enter is pressed.\n\nHi Carolyn, \n\nI suggest you try the firefox landmarks addon https://github.com/davidtodd/landmarks which provides user configurable pseudo focus on selection from a dropdown and also via keystroke.\n\ni think it is an important aspect of understanding and discoverability for sighted keyboard users to have a indication of selected region.", "id": 7378906, "creator": "faulkner.steve@gmail.com", "is_private": false, "count": 32, "author": "faulkner.steve@gmail.com", "creation_time": "2013-05-02T08:18:20Z", "bug_id": 670928, "tags": [], "time": "2013-05-02T08:18:20Z", "text": "(In reply to Carolyn MacLeod from comment #31)\n> I'd like to address the focus issues beginning in comment 19:\n> >> Arbitrary elements like landmark containers are not focusable.\n> \n> and continuing in comment 20:\n> > well, not necessarily focusable, ...\n> > its not really clear what it means to navigate to something that isn't focusable.\n> > ... As I understand the bug the main case of interest is the case without a screen reader.\n> \n> Agreed. It's not clear what navigating to a non-focusable element without a\n> screen reader means. So let's work on clarifying. One possibility is to only\n> include landmark elements that are focusable or have focusable children in\n> the list. When the user selects an element from the list, focus can go to\n> its first focusable child element (or if there's any way to know the child\n> element that had focus the last time the landmark was \"navigated to\", then\n> that might be an interesting possibility).\n> \n> Another possibility is to consider what Matt suggested in comment 24, kind\n> of a pseudo-focus indicator if the landmark element doesn't take focus, and\n> then the next tab key takes you to the first focusable child. This might not\n> be what sighted users want however - I suspect they would prefer to be\n> brought directly to the focusable child. I do, however, love this idea from\n> comment 24:\n> > It might also be really cool if sighted users could dynamically see the region\n> > boundaries as they navigate through the tree of regions. Then pressing enter\n> > would close the dialog and align the keyboard focus with the visual indicator.\n> although, again, I think it might be more efficient to give focus to a\n> focusable child when enter is pressed.\n\nHi Carolyn, \n\nI suggest you try the firefox landmarks addon https://github.com/davidtodd/landmarks which provides user configurable pseudo focus on selection from a dropdown and also via keystroke.\n\ni think it is an important aspect of understanding and discoverability for sighted keyboard users to have a indication of selected region."}, {"id": 7449466, "raw_text": "(In reply to Jennifer Morrow [:Boriss] (Firefox UX) from comment #12)\n> Adding the ability to find landmarks in Firefox sounds like a great idea,\n> but I think it's really best as an extension.  There isn't going to be a lot\n> of demand for outside of users with screenreaders.\n> \n> (In reply to David Bolter [:davidb] from comment #11)\n> > I also want to understand the intended difference between Quick Find and\n> > Find bars. This probably belongs on the Find bar, or maybe we want a proper\n> > nav bar?\n> \n> As I understand it, the only difference is that quick find disappears when\n> you target away from it, and regular find in page stays.  If there's actual,\n> legitimate reason to have both of these, I'll eat my hat and post the video\n> to YouTube.\n\nHi again, I am still interested in seeing your response to Comment 30\n\nFYI\nThere is now an updated Firefox extension available that provides keyboard navigation for ARIA landmarks and native HTML elements that map onto ARIA landmarks\nhttps://github.com/matatk/landmarks/blob/master/README.md\n\nI suggest that this functionality would make a useful addition to Native Firefox accessibility UI for users with disabilities.\n\nIt is noted that Firefox continues to cater for developers needs with additional UI and features(font inspector for example: http://thenextweb.com/dd/2013/03/13/type-lovers-rejoice-mozilla-is-adding-a-font-inspector-to-firefoxs-devtools-available-in-the-latest-nightly/)", "attachment_id": null, "time": "2013-05-22T08:56:42Z", "bug_id": 670928, "tags": [], "text": "(In reply to Jennifer Morrow [:Boriss] (Firefox UX) from comment #12)\n> Adding the ability to find landmarks in Firefox sounds like a great idea,\n> but I think it's really best as an extension.  There isn't going to be a lot\n> of demand for outside of users with screenreaders.\n> \n> (In reply to David Bolter [:davidb] from comment #11)\n> > I also want to understand the intended difference between Quick Find and\n> > Find bars. This probably belongs on the Find bar, or maybe we want a proper\n> > nav bar?\n> \n> As I understand it, the only difference is that quick find disappears when\n> you target away from it, and regular find in page stays.  If there's actual,\n> legitimate reason to have both of these, I'll eat my hat and post the video\n> to YouTube.\n\nHi again, I am still interested in seeing your response to Comment 30\n\nFYI\nThere is now an updated Firefox extension available that provides keyboard navigation for ARIA landmarks and native HTML elements that map onto ARIA landmarks\nhttps://github.com/matatk/landmarks/blob/master/README.md\n\nI suggest that this functionality would make a useful addition to Native Firefox accessibility UI for users with disabilities.\n\nIt is noted that Firefox continues to cater for developers needs with additional UI and features(font inspector for example: http://thenextweb.com/dd/2013/03/13/type-lovers-rejoice-mozilla-is-adding-a-font-inspector-to-firefoxs-devtools-available-in-the-latest-nightly/)", "author": "faulkner.steve@gmail.com", "creation_time": "2013-05-22T08:56:42Z", "count": 33, "creator": "faulkner.steve@gmail.com", "is_private": false}, {"id": 7449494, "raw_text": "\"It's not clear what navigating to a non-focusable element without a screen reader means.\"\n\nIt means moving the caret, as would happen if a user followed a link to a fragment identifier (e.g. in-page link), no?", "attachment_id": null, "tags": [], "bug_id": 670928, "time": "2013-05-22T09:06:26Z", "text": "\"It's not clear what navigating to a non-focusable element without a screen reader means.\"\n\nIt means moving the caret, as would happen if a user followed a link to a fragment identifier (e.g. in-page link), no?", "author": "redux@splintered.co.uk", "creation_time": "2013-05-22T09:06:26Z", "count": 34, "creator": "redux@splintered.co.uk", "is_private": false}, {"id": 7450162, "raw_text": "had a brief discussion with MarcoZehe on IRC (http://krijnhoetmer.nl/irc-logs/accessibility/20130522#l-118) about relative sizes of developer vs keyboard/alternative input device users the stats here are interesting  Dexterity and Mobility Impairment Fact Sheet http://accessibility.gtri.gatech.edu/assistant/acc_info/factsheet_dexterity_mobility.php\n\nquestion of how UI/functionality decisions are made for developer tool additions to Firefox any metrics available?", "attachment_id": null, "bug_id": 670928, "tags": [], "time": "2013-05-22T13:18:30Z", "text": "had a brief discussion with MarcoZehe on IRC (http://krijnhoetmer.nl/irc-logs/accessibility/20130522#l-118) about relative sizes of developer vs keyboard/alternative input device users the stats here are interesting  Dexterity and Mobility Impairment Fact Sheet http://accessibility.gtri.gatech.edu/assistant/acc_info/factsheet_dexterity_mobility.php\n\nquestion of how UI/functionality decisions are made for developer tool additions to Firefox any metrics available?", "author": "faulkner.steve@gmail.com", "creation_time": "2013-05-22T13:18:30Z", "count": 35, "creator": "faulkner.steve@gmail.com", "is_private": false}, {"creation_time": "2013-05-31T16:54:09Z", "author": "faulkner.steve@gmail.com", "text": "WEBAIM Survey of Users with Motor Disabilities Results http://webaim.org/projects/motordisabilitysurvey/\n\n\"Of note is a very low response to ARIA landmarks, something that would likely provide great benefit to this audience if navigation to them was supported in mainstream browsers.\"\nsource: http://webaim.org/projects/motordisabilitysurvey/#techniques", "time": "2013-05-31T16:54:09Z", "tags": [], "bug_id": 670928, "is_private": false, "creator": "faulkner.steve@gmail.com", "count": 36, "id": 7484509, "attachment_id": null, "raw_text": "WEBAIM Survey of Users with Motor Disabilities Results http://webaim.org/projects/motordisabilitysurvey/\n\n\"Of note is a very low response to ARIA landmarks, something that would likely provide great benefit to this audience if navigation to them was supported in mainstream browsers.\"\nsource: http://webaim.org/projects/motordisabilitysurvey/#techniques"}, {"id": 7972581, "attachment_id": null, "raw_text": "(In reply to steve faulkner from comment #33)\n> (In reply to Jennifer Morrow [:Boriss] (Firefox UX) from comment #12)\n> > Adding the ability to find landmarks in Firefox sounds like a great idea,\n> > but I think it's really best as an extension.  There isn't going to be a lot\n> > of demand for outside of users with screenreaders.\n> > \n> > (In reply to David Bolter [:davidb] from comment #11)\n> > > I also want to understand the intended difference between Quick Find and\n> > > Find bars. This probably belongs on the Find bar, or maybe we want a proper\n> > > nav bar?\n> > \n> > As I understand it, the only difference is that quick find disappears when\n> > you target away from it, and regular find in page stays.  If there's actual,\n> > legitimate reason to have both of these, I'll eat my hat and post the video\n> > to YouTube.\n> \n> Hi again, I am still interested in seeing your response to Comment 30\n> \n> FYI\n> There is now an updated Firefox extension available that provides keyboard\n> navigation for ARIA landmarks and native HTML elements that map onto ARIA\n> landmarks\n> https://github.com/matatk/landmarks/blob/master/README.md\n\nGreat. Is this on AMO? (addons.mozilla.org)", "creation_time": "2013-10-17T14:08:36Z", "author": "dbolter@mozilla.com", "text": "(In reply to steve faulkner from comment #33)\n> (In reply to Jennifer Morrow [:Boriss] (Firefox UX) from comment #12)\n> > Adding the ability to find landmarks in Firefox sounds like a great idea,\n> > but I think it's really best as an extension.  There isn't going to be a lot\n> > of demand for outside of users with screenreaders.\n> > \n> > (In reply to David Bolter [:davidb] from comment #11)\n> > > I also want to understand the intended difference between Quick Find and\n> > > Find bars. This probably belongs on the Find bar, or maybe we want a proper\n> > > nav bar?\n> > \n> > As I understand it, the only difference is that quick find disappears when\n> > you target away from it, and regular find in page stays.  If there's actual,\n> > legitimate reason to have both of these, I'll eat my hat and post the video\n> > to YouTube.\n> \n> Hi again, I am still interested in seeing your response to Comment 30\n> \n> FYI\n> There is now an updated Firefox extension available that provides keyboard\n> navigation for ARIA landmarks and native HTML elements that map onto ARIA\n> landmarks\n> https://github.com/matatk/landmarks/blob/master/README.md\n\nGreat. Is this on AMO? (addons.mozilla.org)", "tags": [], "time": "2013-10-17T14:08:36Z", "is_private": false, "creator": "dbolter@mozilla.com", "bug_id": 670928, "count": 37}, {"author": "faulkner.steve@gmail.com", "creation_time": "2013-10-21T13:58:05Z", "time": "2013-10-21T13:58:05Z", "bug_id": 670928, "tags": [], "text": "(In reply to David Bolter [:davidb] from comment #37)\n> (In reply to steve faulkner from comment #33)\n> > (In reply to Jennifer Morrow [:Boriss] (Firefox UX) from comment #12)\n> > > Adding the ability to find landmarks in Firefox sounds like a great idea,\n> > > but I think it's really best as an extension.  There isn't going to be a lot\n> > > of demand for outside of users with screenreaders.\n> > > \n> > > (In reply to David Bolter [:davidb] from comment #11)\n> > > > I also want to understand the intended difference between Quick Find and\n> > > > Find bars. This probably belongs on the Find bar, or maybe we want a proper\n> > > > nav bar?\n> > > \n> > > As I understand it, the only difference is that quick find disappears when\n> > > you target away from it, and regular find in page stays.  If there's actual,\n> > > legitimate reason to have both of these, I'll eat my hat and post the video\n> > > to YouTube.\n> > \n> > Hi again, I am still interested in seeing your response to Comment 30\n> > \n> > FYI\n> > There is now an updated Firefox extension available that provides keyboard\n> > navigation for ARIA landmarks and native HTML elements that map onto ARIA\n> > landmarks\n> > https://github.com/matatk/landmarks/blob/master/README.md\n> \n> Great. Is this on AMO? (addons.mozilla.org)\n\nUnclear what the push back here is? by providing a simple addition to the firefox UI for keyboard users we can drastically reduce the number of repetitive movements (pushing tab key) required to navigate page content. I would appreciate some feedback on why this is not something that firefox should take a punt with, as there is ample precedence for new UI features being added to Firefox with less robust use cases.", "creator": "faulkner.steve@gmail.com", "is_private": false, "count": 38, "id": 7983938, "attachment_id": null, "raw_text": "(In reply to David Bolter [:davidb] from comment #37)\n> (In reply to steve faulkner from comment #33)\n> > (In reply to Jennifer Morrow [:Boriss] (Firefox UX) from comment #12)\n> > > Adding the ability to find landmarks in Firefox sounds like a great idea,\n> > > but I think it's really best as an extension.  There isn't going to be a lot\n> > > of demand for outside of users with screenreaders.\n> > > \n> > > (In reply to David Bolter [:davidb] from comment #11)\n> > > > I also want to understand the intended difference between Quick Find and\n> > > > Find bars. This probably belongs on the Find bar, or maybe we want a proper\n> > > > nav bar?\n> > > \n> > > As I understand it, the only difference is that quick find disappears when\n> > > you target away from it, and regular find in page stays.  If there's actual,\n> > > legitimate reason to have both of these, I'll eat my hat and post the video\n> > > to YouTube.\n> > \n> > Hi again, I am still interested in seeing your response to Comment 30\n> > \n> > FYI\n> > There is now an updated Firefox extension available that provides keyboard\n> > navigation for ARIA landmarks and native HTML elements that map onto ARIA\n> > landmarks\n> > https://github.com/matatk/landmarks/blob/master/README.md\n> \n> Great. Is this on AMO? (addons.mozilla.org)\n\nUnclear what the push back here is? by providing a simple addition to the firefox UI for keyboard users we can drastically reduce the number of repetitive movements (pushing tab key) required to navigate page content. I would appreciate some feedback on why this is not something that firefox should take a punt with, as there is ample precedence for new UI features being added to Firefox with less robust use cases."}, {"raw_text": "(In reply to steve faulkner from comment #38)\n> Unclear what the push back here is? by providing a simple addition to the\n> firefox UI for keyboard users we can drastically reduce the number of\n> repetitive movements (pushing tab key) required to navigate page content. I\n> would appreciate some feedback on why this is not something that firefox\n> should take a punt with, as there is ample precedence for new UI features\n> being added to Firefox with less robust use cases.\n\nAgree. The plugin is nice, but we really need this delivered as part of browser function in order to make the huge advantages of WAI-ARIA regions available to everyone.\n\nIf integrated with browser, I think it would be advantageous to consider using F6 and shift+F6 instead of letters. F6 is already performing a similar function and it would be logical to extend the F6 focus circle. This may also make the behavior more discoverable. Perhaps Alt+f6 could open the dialog with the treeview of regions that would also be available from the view menu.\n\nIn addition to being more consistent with similar browser function, Using the function key would eliminate the conflicts that arise when focus is in an input field where the letter keys perform functions such as typing input or navigating lists. You wouldn't want to have to move focus out of an input before being able to move focus to the next region.\n\nBTW, the plugin does not use a tree; it indents. a tree that supports expand/collapse and letter key nav would be far superior.\n\nAlso, I think all users could benefit from pseudo focus drawn around the entire region when navigating to the region. First, this would be a great way to scroll a region into focus. This would also be really useful for screen reader users who often have difficulty scrolling the browser window to accommodate sightees looking on. Second, other useful context function, such as copy, could be provided even on regions with no focusable elements. Finally, this would be a phenominal simplification of landmark test procedures.\n\nMy final comment is on nested regions. It would be really useful to be able to navigate to only the level 1 (outer most) regions. Perhaps adding ctrl to the key command could perform this function, e.g., ctrl+F6 moves to next level 1 region and shift+ctrl+F6 moves to prior level 1 region. Moving backward should move to the beginning (entirity) of the current region if the focus is contained inside the region. This would give a quick way of returning to the beginning of a region (think of prior track in your music player).", "attachment_id": null, "id": 7992723, "count": 39, "is_private": false, "creator": "mattking@us.ibm.com", "text": "(In reply to steve faulkner from comment #38)\n> Unclear what the push back here is? by providing a simple addition to the\n> firefox UI for keyboard users we can drastically reduce the number of\n> repetitive movements (pushing tab key) required to navigate page content. I\n> would appreciate some feedback on why this is not something that firefox\n> should take a punt with, as there is ample precedence for new UI features\n> being added to Firefox with less robust use cases.\n\nAgree. The plugin is nice, but we really need this delivered as part of browser function in order to make the huge advantages of WAI-ARIA regions available to everyone.\n\nIf integrated with browser, I think it would be advantageous to consider using F6 and shift+F6 instead of letters. F6 is already performing a similar function and it would be logical to extend the F6 focus circle. This may also make the behavior more discoverable. Perhaps Alt+f6 could open the dialog with the treeview of regions that would also be available from the view menu.\n\nIn addition to being more consistent with similar browser function, Using the function key would eliminate the conflicts that arise when focus is in an input field where the letter keys perform functions such as typing input or navigating lists. You wouldn't want to have to move focus out of an input before being able to move focus to the next region.\n\nBTW, the plugin does not use a tree; it indents. a tree that supports expand/collapse and letter key nav would be far superior.\n\nAlso, I think all users could benefit from pseudo focus drawn around the entire region when navigating to the region. First, this would be a great way to scroll a region into focus. This would also be really useful for screen reader users who often have difficulty scrolling the browser window to accommodate sightees looking on. Second, other useful context function, such as copy, could be provided even on regions with no focusable elements. Finally, this would be a phenominal simplification of landmark test procedures.\n\nMy final comment is on nested regions. It would be really useful to be able to navigate to only the level 1 (outer most) regions. Perhaps adding ctrl to the key command could perform this function, e.g., ctrl+F6 moves to next level 1 region and shift+ctrl+F6 moves to prior level 1 region. Moving backward should move to the beginning (entirity) of the current region if the focus is contained inside the region. This would give a quick way of returning to the beginning of a region (think of prior track in your music player).", "bug_id": 670928, "tags": [], "time": "2013-10-23T08:22:49Z", "creation_time": "2013-10-23T08:22:49Z", "author": "mattking@us.ibm.com"}, {"id": 8022837, "attachment_id": null, "raw_text": "(In reply to steve faulkner from comment #30)\n> (In reply to Jennifer Morrow [:Boriss] (Firefox UX) from comment #12)\n> > Adding the ability to find landmarks in Firefox sounds like a great idea,\n> > but I think it's really best as an extension.  There isn't going to be a lot\n> > of demand for outside of users with screenreaders.\n> \n> How did you arrive at this conclusion? do you have data to back it up? I\n> would suggest its the exact opposite, screen reader users can already\n> navigate landmarks, support is already built in to most screen readers[1],\n> its users with physical disabilities that make it difficult to use the mouse\n> that will benefit'\n> \n> It is noted that Firefox has lots of built in developer tools[2] that have\n> lots of additional UI (for a relatively small group of users - developers),\n> so it is difficult to understand why a bit of extra UI that would help users\n> with disabilities to navigate and make sense of page content would be\n> rejected. \n> \n> \n> [1]\n> http://blog.paciellogroup.com/2011/07/html5-accessibility-chops-aria-\n> landmark-support/\n> [2]http://www.howtogeek.com/105320/how-to-use-firefoxs-web-developer-tools/\n\nI'd like to add a voice of support for this functionality. We are putting significant effort into enriching the default Drupal markup in the soon-to-be-released 8 version with ARIA landmarks and meaningful labels. \n\nLandmarks navigation benefits blind users, mobility-impaired users and keyboard power-users. We're taking an approach of building the front-end UI from ARIA out in what we're calling the semantic application layer. I would love to see more access to this layer of the DOM through APIs and keyboard-optimized interaction.\n\nThe adoption of Drupal 8 in 2014 and the following years will lead to a wealth of sites on the internet that are highly qualified with ARIA attribution. We're getting the content ready for you :)", "creation_time": "2013-10-30T21:00:18Z", "author": "splendidnoise@gmail.com", "text": "(In reply to steve faulkner from comment #30)\n> (In reply to Jennifer Morrow [:Boriss] (Firefox UX) from comment #12)\n> > Adding the ability to find landmarks in Firefox sounds like a great idea,\n> > but I think it's really best as an extension.  There isn't going to be a lot\n> > of demand for outside of users with screenreaders.\n> \n> How did you arrive at this conclusion? do you have data to back it up? I\n> would suggest its the exact opposite, screen reader users can already\n> navigate landmarks, support is already built in to most screen readers[1],\n> its users with physical disabilities that make it difficult to use the mouse\n> that will benefit'\n> \n> It is noted that Firefox has lots of built in developer tools[2] that have\n> lots of additional UI (for a relatively small group of users - developers),\n> so it is difficult to understand why a bit of extra UI that would help users\n> with disabilities to navigate and make sense of page content would be\n> rejected. \n> \n> \n> [1]\n> http://blog.paciellogroup.com/2011/07/html5-accessibility-chops-aria-\n> landmark-support/\n> [2]http://www.howtogeek.com/105320/how-to-use-firefoxs-web-developer-tools/\n\nI'd like to add a voice of support for this functionality. We are putting significant effort into enriching the default Drupal markup in the soon-to-be-released 8 version with ARIA landmarks and meaningful labels. \n\nLandmarks navigation benefits blind users, mobility-impaired users and keyboard power-users. We're taking an approach of building the front-end UI from ARIA out in what we're calling the semantic application layer. I would love to see more access to this layer of the DOM through APIs and keyboard-optimized interaction.\n\nThe adoption of Drupal 8 in 2014 and the following years will lead to a wealth of sites on the internet that are highly qualified with ARIA attribution. We're getting the content ready for you :)", "tags": [], "time": "2013-10-30T21:00:18Z", "bug_id": 670928, "is_private": false, "creator": "splendidnoise@gmail.com", "count": 40}, {"id": 8207192, "attachment_id": null, "raw_text": "I have put together a Concept for integrating keyboard navigation of HTML5 structural elements/ ARIA landmarks into Firefox https://docs.google.com/document/d/11yzSsHorM3mkG8fLk_etdY-jcpYjZIHAKT3qDzkuyMI/edit?usp=sharing", "creation_time": "2013-12-17T20:13:45Z", "author": "faulkner.steve@gmail.com", "text": "I have put together a Concept for integrating keyboard navigation of HTML5 structural elements/ ARIA landmarks into Firefox https://docs.google.com/document/d/11yzSsHorM3mkG8fLk_etdY-jcpYjZIHAKT3qDzkuyMI/edit?usp=sharing", "time": "2013-12-17T20:13:45Z", "tags": [], "bug_id": 670928, "is_private": false, "creator": "faulkner.steve@gmail.com", "count": 41}, {"attachment_id": null, "raw_text": "(In reply to steve faulkner from comment #41)\n> I have put together a Concept for integrating keyboard navigation of HTML5\n> structural elements/ ARIA landmarks into Firefox\n> https://docs.google.com/document/d/11yzSsHorM3mkG8fLk_etdY-\n> jcpYjZIHAKT3qDzkuyMI/edit?usp=sharing\n\nnice, for the method #1 probably it makes sense to use side bar instead however addressbar navigation looks fascinating\n\nAlso I like hotkey method #2, probably it makes sense to keep both", "id": 8211234, "creator": "surkov.alexander@gmail.com", "is_private": false, "author": "surkov.alexander@gmail.com", "creation_time": "2013-12-18T16:00:48Z", "tags": [], "time": "2013-12-18T16:00:48Z", "text": "(In reply to steve faulkner from comment #41)\n> I have put together a Concept for integrating keyboard navigation of HTML5\n> structural elements/ ARIA landmarks into Firefox\n> https://docs.google.com/document/d/11yzSsHorM3mkG8fLk_etdY-\n> jcpYjZIHAKT3qDzkuyMI/edit?usp=sharing\n\nnice, for the method #1 probably it makes sense to use side bar instead however addressbar navigation looks fascinating\n\nAlso I like hotkey method #2, probably it makes sense to keep both", "count": 42, "bug_id": 670928}, {"attachment_id": null, "raw_text": "(In reply to alexander :surkov from comment #42)\n> (In reply to steve faulkner from comment #41)\n> > I have put together a Concept for integrating keyboard navigation of HTML5\n> > structural elements/ ARIA landmarks into Firefox\n> > https://docs.google.com/document/d/11yzSsHorM3mkG8fLk_etdY-\n> > jcpYjZIHAKT3qDzkuyMI/edit?usp=sharing\n> \n> nice, for the method #1 probably it makes sense to use side bar instead\n> however addressbar navigation looks fascinating\n> \n> Also I like hotkey method #2, probably it makes sense to keep both\n\nIt is intended that both methods be implemented, address bar is suggested to provide alternative navigation without having to add UI. the address bar method is to allow initial quick nav to any part of the page.", "id": 8211261, "is_private": false, "creator": "faulkner.steve@gmail.com", "count": 43, "creation_time": "2013-12-18T16:06:19Z", "author": "faulkner.steve@gmail.com", "text": "(In reply to alexander :surkov from comment #42)\n> (In reply to steve faulkner from comment #41)\n> > I have put together a Concept for integrating keyboard navigation of HTML5\n> > structural elements/ ARIA landmarks into Firefox\n> > https://docs.google.com/document/d/11yzSsHorM3mkG8fLk_etdY-\n> > jcpYjZIHAKT3qDzkuyMI/edit?usp=sharing\n> \n> nice, for the method #1 probably it makes sense to use side bar instead\n> however addressbar navigation looks fascinating\n> \n> Also I like hotkey method #2, probably it makes sense to keep both\n\nIt is intended that both methods be implemented, address bar is suggested to provide alternative navigation without having to add UI. the address bar method is to allow initial quick nav to any part of the page.", "tags": [], "time": "2013-12-18T16:06:19Z", "bug_id": 670928}, {"tags": [], "time": "2014-10-01T17:43:41Z", "text": "cc'ing Gijs since he wears an a11y hat on front-end and can make sure this is the priority work backlog as appropriate.", "author": "dbolter@mozilla.com", "creation_time": "2014-10-01T17:43:41Z", "creator": "dbolter@mozilla.com", "is_private": false, "id": 9388196, "raw_text": "cc'ing Gijs since he wears an a11y hat on front-end and can make sure this is the priority work backlog as appropriate.", "attachment_id": null, "bug_id": 670928, "count": 44}, {"creator": "gijskruitbosch+bugs@gmail.com", "is_private": false, "count": 45, "author": "gijskruitbosch+bugs@gmail.com", "creation_time": "2014-10-01T22:01:59Z", "bug_id": 670928, "time": "2014-10-01T22:01:59Z", "tags": [], "text": "(In reply to David Bolter [:davidb] from comment #44)\n> cc'ing Gijs since he wears an a11y hat on front-end and can make sure this\n> is the priority work backlog as appropriate.\n\nThis seems to be assigned to Eitan? Confused about whether work is ongoing or not (don't have time to read the entire bug right now; will self-needinfo).\n\nWhat do other browsers do here?", "attachment_id": null, "raw_text": "(In reply to David Bolter [:davidb] from comment #44)\n> cc'ing Gijs since he wears an a11y hat on front-end and can make sure this\n> is the priority work backlog as appropriate.\n\nThis seems to be assigned to Eitan? Confused about whether work is ongoing or not (don't have time to read the entire bug right now; will self-needinfo).\n\nWhat do other browsers do here?", "id": 9390221}, {"author": "redux@splintered.co.uk", "creation_time": "2014-10-01T22:21:55Z", "time": "2014-10-01T22:21:55Z", "bug_id": 670928, "tags": [], "text": "(In reply to :Gijs Kruitbosch from comment #45)\n> What do other browsers do here?\n\nNothing. No browser currently does anything beyond, at best, exposing info via the accessibility API and leaving it up to additional assistive technology to do something sensible with it. So, for instance, running JAWS on top of Firefox will give the user access to further keyboard shortcuts (through JAWS) to navigate to landmarks. This is fine for keyboard users that also run AT, but misses out keyboard-only users that do not.\n\n(Opera used to provide keyboard shortcuts for jumping to different headings etc, but that's all been removed as far as I know)", "creator": "redux@splintered.co.uk", "is_private": false, "count": 46, "id": 9390345, "attachment_id": null, "raw_text": "(In reply to :Gijs Kruitbosch from comment #45)\n> What do other browsers do here?\n\nNothing. No browser currently does anything beyond, at best, exposing info via the accessibility API and leaving it up to additional assistive technology to do something sensible with it. So, for instance, running JAWS on top of Firefox will give the user access to further keyboard shortcuts (through JAWS) to navigate to landmarks. This is fine for keyboard users that also run AT, but misses out keyboard-only users that do not.\n\n(Opera used to provide keyboard shortcuts for jumping to different headings etc, but that's all been removed as far as I know)"}, {"count": 47, "bug_id": 670928, "is_private": false, "creator": "faulkner.steve@gmail.com", "text": "(In reply to :Gijs Kruitbosch from comment #45)\n> (In reply to David Bolter [:davidb] from comment #44)\n> > cc'ing Gijs since he wears an a11y hat on front-end and can make sure this\n> > is the priority work backlog as appropriate.\n> \n> This seems to be assigned to Eitan? Confused about whether work is ongoing\n> or not (don't have time to read the entire bug right now; will\n> self-needinfo).\n> \n> What do other browsers do here?\n\nif you wanna talk about it ping me on #accessibility IRC", "tags": [], "time": "2014-10-02T09:45:35Z", "creation_time": "2014-10-02T09:45:35Z", "author": "faulkner.steve@gmail.com", "raw_text": "(In reply to :Gijs Kruitbosch from comment #45)\n> (In reply to David Bolter [:davidb] from comment #44)\n> > cc'ing Gijs since he wears an a11y hat on front-end and can make sure this\n> > is the priority work backlog as appropriate.\n> \n> This seems to be assigned to Eitan? Confused about whether work is ongoing\n> or not (don't have time to read the entire bug right now; will\n> self-needinfo).\n> \n> What do other browsers do here?\n\nif you wanna talk about it ping me on #accessibility IRC", "attachment_id": null, "id": 9392903}, {"raw_text": "So, having read the bug and played around with the add-on for a bit, this still pretty desperately needs (a) a compelling UI proposal and (b) a compelling usecase that (a) would serve well.\n\nFor (a), or why the current add-on-proposed UI isn't good enough:\n\n1) We can't really add single-key navigation keys by default. To my knowledge, besides the arrow key, spacebar, escape and enter, none of the alphanumeric keys are taken by the browser - by any browser, in fact. So just making 'n' and 'p' (or any other letter/shift-letter combo) do magical things is unlikely to be good for web compat. For a high profile example, try using https://www.google.co.uk/?gfe_rd=cr#q=foo - Google automatically appends any alphanumeric input to the search box, even if it wasn't focused. We'd want landmark navigation to work there, too, but clearly breaking websites who handle keybindings is a tricky and controversial subject ( bug 380637, bug 1053430, bug 1052569, https://code.google.com/p/chromium/issues/detail?id=33056 ). Taking single-key shortcuts by default would be wrong; not always taking them will make this unpredictable and therefore much less useful.\n\n2) The submenu solution really doesn't scale, and is unusable on high profile websites. On http://www.bbc.co.uk/news/ I just get \"navigation\", \"-search\" (what's with all the initial dashes - is this meant to make it look like a tree?) and \"contentinfo\", none of which have meaning for the user. On http://www.nytimes.com/ the situation is significantly worse, with some 30-odd \"-contentinfo\" items in the menu. The documentation says we use aria-label and aria-labelledby (I guess otherwise we're using the node name?) - we should use the first bit of text or something similar, at a minimum, and that probably requires more space than just a submenu (nevermind wanting to actually have a proper tree).\n\n\n\nAs for the usecase, even as a heavily-keyboard-oriented user, I'm not sure I see the value proposition here. For sighted/non-screenreader users (as screenreader users get this functionality from their screenreader, AIUI), what do landmarks do that find in page and skip-link/space/tab doesn't already do (and faster/better) ?\n\nIf the landmarks aren't adequately labelled (which seems like it is the case, from my limited testing), the functionality is essentially useless for finding something you're looking for (because which of the umptillion \"contentinfo\" things is what you want?) - find in page is much more efficient.\n\nFor browsing, the examples I tried either didn't use them as much more than skip links (bbc) or had so many of them that it was essentially no more efficient than a skip link + tab (ny times).\n\nIt almost seems to me that if we were going to do something like this, offering navigation by headers would be more sensible as a first step.\n\n\nIf you are still convinced that this should be implemented in the core product, I think the first step would be sitting down (and I mean actually sitting down/vidyo/skype/whatever, not bug comments and needinfo) with one of the UX designers and explaining:\n- what these roles are;\n- for what usecases they're useful to the general public and/or why implementing this in an add-on for the specific user groups that want it isn't good enough;\n- what information we have and don't have about the landmarks, generally speaking (e.g., most seem to be unlabelled right now, though I readily admit that my study is wholly unscientific)\n\nand to ask them to figure out how to incorporate functionality here. I'd nominate :phlsa as the first person to talk to.  I'm happy to facilitate a meeting if that helps, but I'm not the right person to do the UX stuff here myself. Leaving dbolter's needinfo to see how to best move this further.", "attachment_id": null, "id": 9393137, "count": 48, "is_private": false, "creator": "gijskruitbosch+bugs@gmail.com", "text": "So, having read the bug and played around with the add-on for a bit, this still pretty desperately needs (a) a compelling UI proposal and (b) a compelling usecase that (a) would serve well.\n\nFor (a), or why the current add-on-proposed UI isn't good enough:\n\n1) We can't really add single-key navigation keys by default. To my knowledge, besides the arrow key, spacebar, escape and enter, none of the alphanumeric keys are taken by the browser - by any browser, in fact. So just making 'n' and 'p' (or any other letter/shift-letter combo) do magical things is unlikely to be good for web compat. For a high profile example, try using https://www.google.co.uk/?gfe_rd=cr#q=foo - Google automatically appends any alphanumeric input to the search box, even if it wasn't focused. We'd want landmark navigation to work there, too, but clearly breaking websites who handle keybindings is a tricky and controversial subject ( bug 380637, bug 1053430, bug 1052569, https://code.google.com/p/chromium/issues/detail?id=33056 ). Taking single-key shortcuts by default would be wrong; not always taking them will make this unpredictable and therefore much less useful.\n\n2) The submenu solution really doesn't scale, and is unusable on high profile websites. On http://www.bbc.co.uk/news/ I just get \"navigation\", \"-search\" (what's with all the initial dashes - is this meant to make it look like a tree?) and \"contentinfo\", none of which have meaning for the user. On http://www.nytimes.com/ the situation is significantly worse, with some 30-odd \"-contentinfo\" items in the menu. The documentation says we use aria-label and aria-labelledby (I guess otherwise we're using the node name?) - we should use the first bit of text or something similar, at a minimum, and that probably requires more space than just a submenu (nevermind wanting to actually have a proper tree).\n\n\n\nAs for the usecase, even as a heavily-keyboard-oriented user, I'm not sure I see the value proposition here. For sighted/non-screenreader users (as screenreader users get this functionality from their screenreader, AIUI), what do landmarks do that find in page and skip-link/space/tab doesn't already do (and faster/better) ?\n\nIf the landmarks aren't adequately labelled (which seems like it is the case, from my limited testing), the functionality is essentially useless for finding something you're looking for (because which of the umptillion \"contentinfo\" things is what you want?) - find in page is much more efficient.\n\nFor browsing, the examples I tried either didn't use them as much more than skip links (bbc) or had so many of them that it was essentially no more efficient than a skip link + tab (ny times).\n\nIt almost seems to me that if we were going to do something like this, offering navigation by headers would be more sensible as a first step.\n\n\nIf you are still convinced that this should be implemented in the core product, I think the first step would be sitting down (and I mean actually sitting down/vidyo/skype/whatever, not bug comments and needinfo) with one of the UX designers and explaining:\n- what these roles are;\n- for what usecases they're useful to the general public and/or why implementing this in an add-on for the specific user groups that want it isn't good enough;\n- what information we have and don't have about the landmarks, generally speaking (e.g., most seem to be unlabelled right now, though I readily admit that my study is wholly unscientific)\n\nand to ask them to figure out how to incorporate functionality here. I'd nominate :phlsa as the first person to talk to.  I'm happy to facilitate a meeting if that helps, but I'm not the right person to do the UX stuff here myself. Leaving dbolter's needinfo to see how to best move this further.", "time": "2014-10-02T10:39:04Z", "bug_id": 670928, "tags": [], "creation_time": "2014-10-02T10:39:04Z", "author": "gijskruitbosch+bugs@gmail.com"}, {"bug_id": 670928, "count": 49, "tags": [], "time": "2014-10-02T10:43:43Z", "text": "(In reply to :Gijs Kruitbosch from comment #48)\n\n> As for the usecase, even as a heavily-keyboard-oriented user, I'm not sure I\n> see the value proposition here. For sighted/non-screenreader users (as\n> screenreader users get this functionality from their screenreader, AIUI),\n> what do landmarks do that find in page and skip-link/space/tab doesn't\n> already do (and faster/better) ?\n\nThe fact that a solution built directly into the browser, taking advantage of explicit semantics defined in the document, is arguably better than one that relies on devs having to manually add skip links into their documents? One that works even when developers did NOT add skip links?", "author": "redux@splintered.co.uk", "creation_time": "2014-10-02T10:43:43Z", "creator": "redux@splintered.co.uk", "is_private": false, "id": 9393148, "raw_text": "(In reply to :Gijs Kruitbosch from comment #48)\n\n> As for the usecase, even as a heavily-keyboard-oriented user, I'm not sure I\n> see the value proposition here. For sighted/non-screenreader users (as\n> screenreader users get this functionality from their screenreader, AIUI),\n> what do landmarks do that find in page and skip-link/space/tab doesn't\n> already do (and faster/better) ?\n\nThe fact that a solution built directly into the browser, taking advantage of explicit semantics defined in the document, is arguably better than one that relies on devs having to manually add skip links into their documents? One that works even when developers did NOT add skip links?", "attachment_id": null}, {"is_private": false, "creator": "dbolter@mozilla.com", "creation_time": "2014-10-03T14:07:31Z", "author": "dbolter@mozilla.com", "text": "I think others answered the question asked of me. Maybe we should just implement skip to main content first. Not sure what the key-combo would be... note I think FF for android probably has good heuristics we could co-opt.", "time": "2014-10-03T14:07:31Z", "tags": [], "attachment_id": null, "raw_text": "I think others answered the question asked of me. Maybe we should just implement skip to main content first. Not sure what the key-combo would be... note I think FF for android probably has good heuristics we could co-opt.", "id": 9399390, "count": 50, "bug_id": 670928}, {"attachment_id": null, "raw_text": "(In reply to David Bolter [:davidb] from comment #50)\n> I think others answered the question asked of me. Maybe we should just\n> implement skip to main content first. Not sure what the key-combo would\n> be... note I think FF for android probably has good heuristics we could\n> co-opt.\n\nthe other feature I find quite useful is to have shortcut get into search section\n\nconcerning to shortcuts we could use doubled combos like\nCMD+G(go to)+S(search) or CMD+G+M(main)\n\nnot sure if doubled combos are a11y problem by itself since are timing dependent.", "id": 9399995, "creator": "surkov.alexander@gmail.com", "is_private": false, "count": 51, "author": "surkov.alexander@gmail.com", "creation_time": "2014-10-03T15:45:31Z", "bug_id": 670928, "time": "2014-10-03T15:45:31Z", "tags": [], "text": "(In reply to David Bolter [:davidb] from comment #50)\n> I think others answered the question asked of me. Maybe we should just\n> implement skip to main content first. Not sure what the key-combo would\n> be... note I think FF for android probably has good heuristics we could\n> co-opt.\n\nthe other feature I find quite useful is to have shortcut get into search section\n\nconcerning to shortcuts we could use doubled combos like\nCMD+G(go to)+S(search) or CMD+G+M(main)\n\nnot sure if doubled combos are a11y problem by itself since are timing dependent."}, {"attachment_id": null, "raw_text": "> > As for the usecase, even as a heavily-keyboard-oriented user, I'm not sure I\n> > see the value proposition here. For sighted/non-screenreader users (as\n> > screenreader users get this functionality from their screenreader, AIUI),\n> > what do landmarks do that find in page and skip-link/space/tab doesn't\n> > already do (and faster/better) ?\n\nIf this is done well, the value proposition is enormous for both users and page authors. But, that is a big IF. BTW, I do not think the current plugins do a good job of modeling an ideal solution.\n\nSkip links require finding and focusing on the skip link. What if you had to put focus on a certain link to move to the browser menubar? Right, silly. Skip links are silly, buggy, a web 1.0 1990's hack. Now, we have to think like the web is the desktop.\n\nVery nice aspects of pressing and releasing alt in Windows applications to focus in the menubar is that 1) it works from any spot in the app where it makes sense and 2) it is always the same key.\n\nFind is only good if you know what you are looking for. It is not a general navigation and exploration method. It is a lousy approach for people who must use the keyboard but have major dexterity challenges. For those people, we need a very small set of single key presses (not the entire alphabet), e.g., tab, space, arrows, enter, F6, F10, etc. With a very small handful of keys, one should be able to get anywhere on a page with a very small number of key presses. This would be good for ALL users.\n\n> The fact that a solution built directly into the browser, taking advantage\n> of explicit semantics defined in the document, is arguably better than one\n> that relies on devs having to manually add skip links into their documents?\n> One that works even when developers did NOT add skip links?\n\nPrecisely, if page authors say \"here is the IA of my page\" using WAI-ARIA regions, then the browser could make that IA easily navigable without the author providing any silly skip links, extra JS that will vary from site to site in its UI, or access keys that are impossible to remember.\n\nAnd, while we do have a bit of a chicken and egg problem as only a small portion of page authors understand WAI-ARIA regions, there are nonetheless millions of pages that do have really good use of WAI-ARIA regions. The IBM internet and intranet sites have millions anyway. And, they are starting to show up across the web. If Firefox provided really excellent support, then page authors would see the advantage. BTW, I do mean literally \"see\".\n\nI 100% agree with Gijs's comment that UE work is needed; it is needed badly, and I would personally love to help with the interaction model piece.\n\nI think we need to think from the ground up about the problem being solved. I have some simple ideas that may be a bit radical but could increase the value of semantic structural markup with WAI-ARIA regions by 1000 fold and simplify the web for all. Browsers that do this right will have an indisputable a11y advantage.\n\nWhere/how is the best way to discuss this? At some point some real conversation is needed.\n\nShould I add more to this bug? BTW, these bugzilla pages are perfect example of pages that desparately need both a good IA and navigation solution. As a JAWS user, the experience is a giant time suck. But, if this is the people's choice for the place to discuss further, I will do whatever it takes to contribute to a high-value and game-changing solution to this problem.", "id": 9400100, "creator": "mattking@us.ibm.com", "is_private": false, "count": 52, "author": "mattking@us.ibm.com", "creation_time": "2014-10-03T16:04:52Z", "tags": [], "time": "2014-10-03T16:04:52Z", "bug_id": 670928, "text": "> > As for the usecase, even as a heavily-keyboard-oriented user, I'm not sure I\n> > see the value proposition here. For sighted/non-screenreader users (as\n> > screenreader users get this functionality from their screenreader, AIUI),\n> > what do landmarks do that find in page and skip-link/space/tab doesn't\n> > already do (and faster/better) ?\n\nIf this is done well, the value proposition is enormous for both users and page authors. But, that is a big IF. BTW, I do not think the current plugins do a good job of modeling an ideal solution.\n\nSkip links require finding and focusing on the skip link. What if you had to put focus on a certain link to move to the browser menubar? Right, silly. Skip links are silly, buggy, a web 1.0 1990's hack. Now, we have to think like the web is the desktop.\n\nVery nice aspects of pressing and releasing alt in Windows applications to focus in the menubar is that 1) it works from any spot in the app where it makes sense and 2) it is always the same key.\n\nFind is only good if you know what you are looking for. It is not a general navigation and exploration method. It is a lousy approach for people who must use the keyboard but have major dexterity challenges. For those people, we need a very small set of single key presses (not the entire alphabet), e.g., tab, space, arrows, enter, F6, F10, etc. With a very small handful of keys, one should be able to get anywhere on a page with a very small number of key presses. This would be good for ALL users.\n\n> The fact that a solution built directly into the browser, taking advantage\n> of explicit semantics defined in the document, is arguably better than one\n> that relies on devs having to manually add skip links into their documents?\n> One that works even when developers did NOT add skip links?\n\nPrecisely, if page authors say \"here is the IA of my page\" using WAI-ARIA regions, then the browser could make that IA easily navigable without the author providing any silly skip links, extra JS that will vary from site to site in its UI, or access keys that are impossible to remember.\n\nAnd, while we do have a bit of a chicken and egg problem as only a small portion of page authors understand WAI-ARIA regions, there are nonetheless millions of pages that do have really good use of WAI-ARIA regions. The IBM internet and intranet sites have millions anyway. And, they are starting to show up across the web. If Firefox provided really excellent support, then page authors would see the advantage. BTW, I do mean literally \"see\".\n\nI 100% agree with Gijs's comment that UE work is needed; it is needed badly, and I would personally love to help with the interaction model piece.\n\nI think we need to think from the ground up about the problem being solved. I have some simple ideas that may be a bit radical but could increase the value of semantic structural markup with WAI-ARIA regions by 1000 fold and simplify the web for all. Browsers that do this right will have an indisputable a11y advantage.\n\nWhere/how is the best way to discuss this? At some point some real conversation is needed.\n\nShould I add more to this bug? BTW, these bugzilla pages are perfect example of pages that desparately need both a good IA and navigation solution. As a JAWS user, the experience is a giant time suck. But, if this is the people's choice for the place to discuss further, I will do whatever it takes to contribute to a high-value and game-changing solution to this problem."}, {"count": 53, "bug_id": 670928, "raw_text": "If ARIA was exposed to all users, it would be better implemented. Simply making it easily available will make it a higher priority for people to implement.", "attachment_id": null, "id": 10003475, "creator": "mike@openconcept.ca", "is_private": false, "time": "2015-03-09T13:16:03Z", "tags": [], "text": "If ARIA was exposed to all users, it would be better implemented. Simply making it easily available will make it a higher priority for people to implement.", "author": "mike@openconcept.ca", "creation_time": "2015-03-09T13:16:03Z"}, {"is_private": false, "creator": "mike@openconcept.ca", "count": 54, "creation_time": "2015-03-09T13:16:52Z", "author": "mike@openconcept.ca", "text": "Related issue on Headings here https://bugzilla.mozilla.org/show_bug.cgi?id=1140572", "tags": [], "bug_id": 670928, "time": "2015-03-09T13:16:52Z", "attachment_id": null, "raw_text": "Related issue on Headings here https://bugzilla.mozilla.org/show_bug.cgi?id=1140572", "id": 10003479}, {"creation_time": "2015-05-31T05:20:19Z", "author": "paulbohman@gmail.com", "text": "I would like to add my name to the list of people who would like to have this feature implemented natively in the browser. Marco Zehe and I went back and forth a bit by email recently, and he seemed skeptical that this should be a native feature of the browser, but I'm strongly in favor of it. In fact, I'd like to be able to navigate by keyboard through headings as well as landmarks. We can save quite a few keystrokes that way, which is an enormous benefit to people using switch access devices, or who otherwise can't use a mouse. \n\nIdeally there would be some fast and easy keystroke, like the add-on that uses Control + N or P. Let users decide which modifier key(s) to use. You could also steal a concept from VoiceOver and have a key combination bring up a rotor, which users could then toggle through. If you did that, you could let users navigate to headings, landmarks, images, forms, frames, and a number of other things. \n\nLet's finally get rid of \"Skip navigation\" links by implementing this!\n\nThe lack of keyboard features for sighted keyboard users is the only reason we still have to put those links in. I'd like to see them die, and be replaced by native browser support for that simple functionality.", "time": "2015-05-31T05:20:19Z", "tags": [], "bug_id": 670928, "is_private": false, "creator": "paulbohman@gmail.com", "count": 55, "id": 10329662, "attachment_id": null, "raw_text": "I would like to add my name to the list of people who would like to have this feature implemented natively in the browser. Marco Zehe and I went back and forth a bit by email recently, and he seemed skeptical that this should be a native feature of the browser, but I'm strongly in favor of it. In fact, I'd like to be able to navigate by keyboard through headings as well as landmarks. We can save quite a few keystrokes that way, which is an enormous benefit to people using switch access devices, or who otherwise can't use a mouse. \n\nIdeally there would be some fast and easy keystroke, like the add-on that uses Control + N or P. Let users decide which modifier key(s) to use. You could also steal a concept from VoiceOver and have a key combination bring up a rotor, which users could then toggle through. If you did that, you could let users navigate to headings, landmarks, images, forms, frames, and a number of other things. \n\nLet's finally get rid of \"Skip navigation\" links by implementing this!\n\nThe lack of keyboard features for sighted keyboard users is the only reason we still have to put those links in. I'd like to see them die, and be replaced by native browser support for that simple functionality."}, {"bug_id": 670928, "count": 56, "id": 10540259, "attachment_id": null, "raw_text": "(In reply to :Gijs Kruitbosch (away until Aug 3) from comment #48)\n> So, having read the bug and played around with the add-on for a bit, this\n> still pretty desperately needs (a) a compelling UI proposal and (b) a\n> compelling usecase that (a) would serve well.\n\nThe compelling usecase is that navigation of web content for keyboard users sucks.\n\n> \n> For (a), or why the current add-on-proposed UI isn't good enough:\n\nbecause navigation of web content for keyboard only users should be a built in UA feature.\n> \n> 1) We can't really add single-key navigation keys by default. To my\n> knowledge, besides the arrow key, spacebar, escape and enter, none of the\n> alphanumeric keys are taken by the browser - by any browser, in fact. So\n> just making 'n' and 'p' (or any other letter/shift-letter combo) do magical\n> things is unlikely to be good for web compat. For a high profile example,\n> try using https://www.google.co.uk/?gfe_rd=cr#q=foo - Google automatically\n> appends any alphanumeric input to the search box, even if it wasn't focused.\n> We'd want landmark navigation to work there, too, but clearly breaking\n> websites who handle keybindings is a tricky and controversial subject ( bug\n> 380637, bug 1053430, bug 1052569,\n> https://code.google.com/p/chromium/issues/detail?id=33056 ). Taking\n> single-key shortcuts by default would be wrong; not always taking them will\n> make this unpredictable and therefore much less useful.\n\nso key combinations would be OK?\n> \n> 2) The submenu solution really doesn't scale, and is unusable on high\n> profile websites. On http://www.bbc.co.uk/news/ I just get \"navigation\",\n> \"-search\" (what's with all the initial dashes - is this meant to make it\n> look like a tree?) and \"contentinfo\", none of which have meaning for the\n> user. On http://www.nytimes.com/ the situation is significantly worse, with\n> some 30-odd \"-contentinfo\" items in the menu. The documentation says we use\n> aria-label and aria-labelledby (I guess otherwise we're using the node\n> name?) - we should use the first bit of text or something similar, at a\n> minimum, and that probably requires more space than just a submenu\n> (nevermind wanting to actually have a proper tree)\n\nThis is an example only, it is not meant to be the blessed functionality.\n\n\n> \n> As for the usecase, even as a heavily-keyboard-oriented user, I'm not sure I\n> see the value proposition here. For sighted/non-screenreader users (as\n> screenreader users get this functionality from their screenreader, AIUI),\n> what do landmarks do that find in page and skip-link/space/tab doesn't\n> already do (and faster/better) ?\n\n>find in page\ndoes not modify focus order As far as I can tell. The usability win for keyboard users is that navigation via landmarks moves focus so that next stab stop becomes the first focusable element in the landmark navigated to.\n\nExample improvement:\nhttps://gear.mozilla.org/collections/apparel\n\nto get to the serach box\nvia tab = 10 key strokes\nvia landmark = 5 key strokes\n\n= 50% less key strokes\n\nto get to the first item of apparel (in main content)\nvia tab = 12 keystrokes\nvia landmark = 5 keystrokes\n\n= 60% less key strokes\n\nto get to the first link on the footer\nvia tab = 37 keystrokes\nvia landmark = 5\n\n= 32 less keystrokes.\n\n> \n> If the landmarks aren't adequately labelled (which seems like it is the\n> case, from my limited testing), the functionality is essentially useless for\n> finding something you're looking for (because which of the umptillion\n> \"contentinfo\" things is what you want?) - find in page is much more\n> efficient.\n\nthere should only be 1 or 2 footers/content infos that are navigable in each page not umptillion.\n\n\n\n> \n> For browsing, the examples I tried either didn't use them as much more than\n> skip links (bbc) or had so many of them that it was essentially no more\n> efficient than a skip link + tab (ny times).\n\nwhat needs to happen is data review on usage and fashioning of navigation rules based on what and how they are used in real world\n\n> \n> It almost seems to me that if we were going to do something like this,\n> offering navigation by headers would be more sensible as a first step.\n\nI think that offering hotkeys for \n<header> role = banner\n<main> role=main\n<footer> role=contentinfo\nand <hx>\n\nwould be a good initial implementation\n\n> \n> If you are still convinced that this should be implemented in the core\n> product, I think the first step would be sitting down (and I mean actually\n> sitting down/vidyo/skype/whatever, not bug comments and needinfo) with one\n> of the UX designers and explaining:\n\n> - what these roles are;\n> - for what usecases they're useful to the general public and/or why\n> implementing this in an add-on for the specific user groups that want it\n> isn't good enough;\n> - what information we have and don't have about the landmarks, generally\n> speaking (e.g., most seem to be unlabelled right now, though I readily admit\n> that my study is wholly unscientific)\n> \n> and to ask them to figure out how to incorporate functionality here. I'd\n> nominate :phlsa as the first person to talk to.  I'm happy to facilitate a\n> meeting if that helps, but I'm not the right person to do the UX stuff here\n> myself. Leaving dbolter's needinfo to see how to best move this further.\n\nOK please do set up a meet.", "creation_time": "2015-07-27T13:53:38Z", "author": "faulkner.steve@gmail.com", "text": "(In reply to :Gijs Kruitbosch (away until Aug 3) from comment #48)\n> So, having read the bug and played around with the add-on for a bit, this\n> still pretty desperately needs (a) a compelling UI proposal and (b) a\n> compelling usecase that (a) would serve well.\n\nThe compelling usecase is that navigation of web content for keyboard users sucks.\n\n> \n> For (a), or why the current add-on-proposed UI isn't good enough:\n\nbecause navigation of web content for keyboard only users should be a built in UA feature.\n> \n> 1) We can't really add single-key navigation keys by default. To my\n> knowledge, besides the arrow key, spacebar, escape and enter, none of the\n> alphanumeric keys are taken by the browser - by any browser, in fact. So\n> just making 'n' and 'p' (or any other letter/shift-letter combo) do magical\n> things is unlikely to be good for web compat. For a high profile example,\n> try using https://www.google.co.uk/?gfe_rd=cr#q=foo - Google automatically\n> appends any alphanumeric input to the search box, even if it wasn't focused.\n> We'd want landmark navigation to work there, too, but clearly breaking\n> websites who handle keybindings is a tricky and controversial subject ( bug\n> 380637, bug 1053430, bug 1052569,\n> https://code.google.com/p/chromium/issues/detail?id=33056 ). Taking\n> single-key shortcuts by default would be wrong; not always taking them will\n> make this unpredictable and therefore much less useful.\n\nso key combinations would be OK?\n> \n> 2) The submenu solution really doesn't scale, and is unusable on high\n> profile websites. On http://www.bbc.co.uk/news/ I just get \"navigation\",\n> \"-search\" (what's with all the initial dashes - is this meant to make it\n> look like a tree?) and \"contentinfo\", none of which have meaning for the\n> user. On http://www.nytimes.com/ the situation is significantly worse, with\n> some 30-odd \"-contentinfo\" items in the menu. The documentation says we use\n> aria-label and aria-labelledby (I guess otherwise we're using the node\n> name?) - we should use the first bit of text or something similar, at a\n> minimum, and that probably requires more space than just a submenu\n> (nevermind wanting to actually have a proper tree)\n\nThis is an example only, it is not meant to be the blessed functionality.\n\n\n> \n> As for the usecase, even as a heavily-keyboard-oriented user, I'm not sure I\n> see the value proposition here. For sighted/non-screenreader users (as\n> screenreader users get this functionality from their screenreader, AIUI),\n> what do landmarks do that find in page and skip-link/space/tab doesn't\n> already do (and faster/better) ?\n\n>find in page\ndoes not modify focus order As far as I can tell. The usability win for keyboard users is that navigation via landmarks moves focus so that next stab stop becomes the first focusable element in the landmark navigated to.\n\nExample improvement:\nhttps://gear.mozilla.org/collections/apparel\n\nto get to the serach box\nvia tab = 10 key strokes\nvia landmark = 5 key strokes\n\n= 50% less key strokes\n\nto get to the first item of apparel (in main content)\nvia tab = 12 keystrokes\nvia landmark = 5 keystrokes\n\n= 60% less key strokes\n\nto get to the first link on the footer\nvia tab = 37 keystrokes\nvia landmark = 5\n\n= 32 less keystrokes.\n\n> \n> If the landmarks aren't adequately labelled (which seems like it is the\n> case, from my limited testing), the functionality is essentially useless for\n> finding something you're looking for (because which of the umptillion\n> \"contentinfo\" things is what you want?) - find in page is much more\n> efficient.\n\nthere should only be 1 or 2 footers/content infos that are navigable in each page not umptillion.\n\n\n\n> \n> For browsing, the examples I tried either didn't use them as much more than\n> skip links (bbc) or had so many of them that it was essentially no more\n> efficient than a skip link + tab (ny times).\n\nwhat needs to happen is data review on usage and fashioning of navigation rules based on what and how they are used in real world\n\n> \n> It almost seems to me that if we were going to do something like this,\n> offering navigation by headers would be more sensible as a first step.\n\nI think that offering hotkeys for \n<header> role = banner\n<main> role=main\n<footer> role=contentinfo\nand <hx>\n\nwould be a good initial implementation\n\n> \n> If you are still convinced that this should be implemented in the core\n> product, I think the first step would be sitting down (and I mean actually\n> sitting down/vidyo/skype/whatever, not bug comments and needinfo) with one\n> of the UX designers and explaining:\n\n> - what these roles are;\n> - for what usecases they're useful to the general public and/or why\n> implementing this in an add-on for the specific user groups that want it\n> isn't good enough;\n> - what information we have and don't have about the landmarks, generally\n> speaking (e.g., most seem to be unlabelled right now, though I readily admit\n> that my study is wholly unscientific)\n> \n> and to ask them to figure out how to incorporate functionality here. I'd\n> nominate :phlsa as the first person to talk to.  I'm happy to facilitate a\n> meeting if that helps, but I'm not the right person to do the UX stuff here\n> myself. Leaving dbolter's needinfo to see how to best move this further.\n\nOK please do set up a meet.", "tags": [], "time": "2015-07-27T13:53:38Z", "is_private": false, "creator": "faulkner.steve@gmail.com"}, {"text": "(In reply to steve faulkner from comment #56)\n> (In reply to :Gijs Kruitbosch (away until Aug 3) from comment #48)\n> > So, having read the bug and played around with the add-on for a bit, this\n> > still pretty desperately needs (a) a compelling UI proposal and (b) a\n> > compelling usecase that (a) would serve well.\n> \n> The compelling usecase is that navigation of web content for keyboard users\n> sucks.\n> \n> > \n> > For (a), or why the current add-on-proposed UI isn't good enough:\n> \n> because navigation of web content for keyboard only users should be a built\n> in UA feature.\n\nSure, but my point was that we need a viable UI/UX proposal and this wasn't one.\n\n> so key combinations would be OK?\n\nSome key combinations (but not all because accesskeys) would be less likely to conflict, yes. Unfortunately, the available keyspace, to borrow a crypto term, is very small. Finding a shortcut that both makes sense and is available x-platform will be hard.\n\n \n> > As for the usecase, even as a heavily-keyboard-oriented user, I'm not sure I\n> > see the value proposition here. For sighted/non-screenreader users (as\n> > screenreader users get this functionality from their screenreader, AIUI),\n> > what do landmarks do that find in page and skip-link/space/tab doesn't\n> > already do (and faster/better) ?\n> \n> >find in page\n> does not modify focus order As far as I can tell.\n\nFind in page (links only) does modify focus. You can activate it with the ' key.\n\nFor page headers, normal find should work (as you can't and don't need to focus the actual header). I think it would be helpful if we changed find in page (links only) to be extended to label text for form controls if it doesn't already (but that is a separate bug). That might actually be more useful for keyboard navigation than trying to iterate over landmarks with previous/next.\n\n> there should only be 1 or 2 footers/content infos that are navigable in each\n> page not umptillion.\n\nAnd images on the web should have proper alt texts. The difference between what we are saying is \"should\" and \"are\". \n\n> > For browsing, the examples I tried either didn't use them as much more than\n> > skip links (bbc) or had so many of them that it was essentially no more\n> > efficient than a skip link + tab (ny times).\n> \n> what needs to happen is data review on usage and fashioning of navigation\n> rules based on what and how they are used in real world\n\nHave any other browser or AT vendors, or a11y specialists done such data review? Certainly the front-end folks who have been pinged about this, myself and :phlsa included, likely do not have the time to do such a review.\n \n> > It almost seems to me that if we were going to do something like this,\n> > offering navigation by headers would be more sensible as a first step.\n> \n> I think that offering hotkeys for \n> <header> role = banner\n> <main> role=main\n> <footer> role=contentinfo\n> and <hx>\n> \n> would be a good initial implementation\n\nThis would not actually benefit the mozilla gear store example in the way you proposed apart from role=main, right?\n\nYou might still be right (that this would be a good start), but I'm concerned that this is strawman #2 which seems to fall apart quite quickly. Real data as you suggested above would be very helpful. I'd also be interested in hearing what is/isn't wrong with the find in page (links only) that I mentioned.\n\n> > If you are still convinced that this should be implemented in the core\n> > product, I think the first step would be sitting down (and I mean actually\n> > sitting down/vidyo/skype/whatever, not bug comments and needinfo) with one\n> > of the UX designers and explaining:\n> \n> > - what these roles are;\n> > - for what usecases they're useful to the general public and/or why\n> > implementing this in an add-on for the specific user groups that want it\n> > isn't good enough;\n> > - what information we have and don't have about the landmarks, generally\n> > speaking (e.g., most seem to be unlabelled right now, though I readily admit\n> > that my study is wholly unscientific)\n> > \n> > and to ask them to figure out how to incorporate functionality here. I'd\n> > nominate :phlsa as the first person to talk to.  I'm happy to facilitate a\n> > meeting if that helps, but I'm not the right person to do the UX stuff here\n> > myself. Leaving dbolter's needinfo to see how to best move this further.\n> \n> OK please do set up a meet.\n\n-> davidb to assess how to proceed here.", "tags": [], "time": "2015-08-03T11:31:21Z", "bug_id": 670928, "creation_time": "2015-08-03T11:31:21Z", "author": "gijskruitbosch+bugs@gmail.com", "count": 57, "is_private": false, "creator": "gijskruitbosch+bugs@gmail.com", "id": 10567003, "raw_text": "(In reply to steve faulkner from comment #56)\n> (In reply to :Gijs Kruitbosch (away until Aug 3) from comment #48)\n> > So, having read the bug and played around with the add-on for a bit, this\n> > still pretty desperately needs (a) a compelling UI proposal and (b) a\n> > compelling usecase that (a) would serve well.\n> \n> The compelling usecase is that navigation of web content for keyboard users\n> sucks.\n> \n> > \n> > For (a), or why the current add-on-proposed UI isn't good enough:\n> \n> because navigation of web content for keyboard only users should be a built\n> in UA feature.\n\nSure, but my point was that we need a viable UI/UX proposal and this wasn't one.\n\n> so key combinations would be OK?\n\nSome key combinations (but not all because accesskeys) would be less likely to conflict, yes. Unfortunately, the available keyspace, to borrow a crypto term, is very small. Finding a shortcut that both makes sense and is available x-platform will be hard.\n\n \n> > As for the usecase, even as a heavily-keyboard-oriented user, I'm not sure I\n> > see the value proposition here. For sighted/non-screenreader users (as\n> > screenreader users get this functionality from their screenreader, AIUI),\n> > what do landmarks do that find in page and skip-link/space/tab doesn't\n> > already do (and faster/better) ?\n> \n> >find in page\n> does not modify focus order As far as I can tell.\n\nFind in page (links only) does modify focus. You can activate it with the ' key.\n\nFor page headers, normal find should work (as you can't and don't need to focus the actual header). I think it would be helpful if we changed find in page (links only) to be extended to label text for form controls if it doesn't already (but that is a separate bug). That might actually be more useful for keyboard navigation than trying to iterate over landmarks with previous/next.\n\n> there should only be 1 or 2 footers/content infos that are navigable in each\n> page not umptillion.\n\nAnd images on the web should have proper alt texts. The difference between what we are saying is \"should\" and \"are\". \n\n> > For browsing, the examples I tried either didn't use them as much more than\n> > skip links (bbc) or had so many of them that it was essentially no more\n> > efficient than a skip link + tab (ny times).\n> \n> what needs to happen is data review on usage and fashioning of navigation\n> rules based on what and how they are used in real world\n\nHave any other browser or AT vendors, or a11y specialists done such data review? Certainly the front-end folks who have been pinged about this, myself and :phlsa included, likely do not have the time to do such a review.\n \n> > It almost seems to me that if we were going to do something like this,\n> > offering navigation by headers would be more sensible as a first step.\n> \n> I think that offering hotkeys for \n> <header> role = banner\n> <main> role=main\n> <footer> role=contentinfo\n> and <hx>\n> \n> would be a good initial implementation\n\nThis would not actually benefit the mozilla gear store example in the way you proposed apart from role=main, right?\n\nYou might still be right (that this would be a good start), but I'm concerned that this is strawman #2 which seems to fall apart quite quickly. Real data as you suggested above would be very helpful. I'd also be interested in hearing what is/isn't wrong with the find in page (links only) that I mentioned.\n\n> > If you are still convinced that this should be implemented in the core\n> > product, I think the first step would be sitting down (and I mean actually\n> > sitting down/vidyo/skype/whatever, not bug comments and needinfo) with one\n> > of the UX designers and explaining:\n> \n> > - what these roles are;\n> > - for what usecases they're useful to the general public and/or why\n> > implementing this in an add-on for the specific user groups that want it\n> > isn't good enough;\n> > - what information we have and don't have about the landmarks, generally\n> > speaking (e.g., most seem to be unlabelled right now, though I readily admit\n> > that my study is wholly unscientific)\n> > \n> > and to ask them to figure out how to incorporate functionality here. I'd\n> > nominate :phlsa as the first person to talk to.  I'm happy to facilitate a\n> > meeting if that helps, but I'm not the right person to do the UX stuff here\n> > myself. Leaving dbolter's needinfo to see how to best move this further.\n> \n> OK please do set up a meet.\n\n-> davidb to assess how to proceed here.", "attachment_id": null}, {"raw_text": "I think Steve is going to bring a simplified proposal.", "attachment_id": null, "id": 10581857, "count": 58, "creator": "dbolter@mozilla.com", "is_private": false, "bug_id": 670928, "tags": [], "time": "2015-08-05T18:59:21Z", "text": "I think Steve is going to bring a simplified proposal.", "author": "dbolter@mozilla.com", "creation_time": "2015-08-05T18:59:21Z"}, {"raw_text": "Here is an alternate proposal for the UI. Most of this has been touched on already (by Marco, Matt, and others), but I'd like to flesh it out a bit more.\n\nThis proposal has 2 parts:\n1) Quick traversal of \"top-level\" sections/landmarks/panes with F6 and Shift+F6.\n2) Open Outline sidebar with Ctrl+F6 on Win or Command-Shift-F6 on Mac (*very* similar to History sidebar that opens with Ctrl+H on Windows or Command-Shift-H on Mac).\n\nBefore I describe these 2 parts in more depth, I want to establish 2 things:\nA) Why F6?\n- Firefox currently defines F6 and Shift+F6 as traversing frames [1] but <frame> is now obsolete [2], so I think we can repurpose (i.e. mostly augment) F6 and Shift+F6 now.\n- F6 and Shift+F6 have been used to traverse \"panes\" for a very long time (including Windows Explorer in Windows XP [3], or Word in Windows 95 [4], as well as browsers on multiple platforms [5]), so the idea of using F6 to traverse larger chunks of content is \"written in the ancient runes\". This makes it very discoverable by keyboard users.\n\nB) This feature is about both HTML5 sectioning content [6] and WAI-ARIA landmark roles [7].\n- Although it is implied in the title of this bug, and \"section elements\" have been mentioned, I just want to make it explicitly clear that we are talking about HTML5 sectioning content (including h1-h6 when they implicitly define sections) as well as ARIA landmark roles; in short, anything that the page author expects to contribute to an \"outline\".\n- Unfortunately, the HTML5 outline algorithm [8] is incomplete, because it does not take ARIA roles into account. For example, a <div> with role=\"region\" and a label would be expected to be part of an outline, but the algorithm wouldn't find it. However, the algorithm is probably a good place to start, as long as ARIA roles are considered along with sectioning content.\n- In that light, default ARIA roles [9] must also be taken into account. For example, a <header> that is not a descendant of an article or section has a default role of \"banner\", and a <footer> that is not a descendant of an article or section has a default role of \"contentinfo\", which classifies these elements as landmarks. Also, <main> is not sectioning content, but because it has a default role of main, it is a landmark.\n- In order to simplify this discussion, and keep both HTML5 and ARIA in mind, I am going to call any element that goes in the outline a \"section/landmark\" element.\n- For reference:\n  - sectioning content [6]: article, aside, nav, section\n  - landmark roles [7]: application, banner, complementary, contentinfo, form, main, navigation, region, search\n  - heading content that may define an implied section [10]: h1, h2, h3, h4, h5, h6\n\nNow for the details (with apologies to @SteveFaulkner, but I agree with others that single-letter keys don't allow traversal through editable elements, and a menu/#nav doesn't scale for presenting all section/landmark elements neatly. Steve, I am very interested in your feedback on this proposal).\n1) Quick traversal - details\n- F6 traverses (scrolls and gives focus) to the next \"top level\" section/landmark\n- Shift+F6 traverses to the previous \"top level\" section/landmark\n- \"top level\" means only section/landmark elements that are not descendants of sectioning content elements (i.e. their ancestor sectioning root is <body>)\n  - consider expanding the definition of \"top level\" to include direct section/landmark descendants of <main> as well\n  - the 2014 WebAIM Screen Reader User Survey [11] noted that somewhere around 6 or so landmarks were reported as being optimal. Of course, some documents are large, with many top-level sections, like a book with chapters. I think that for such documents, users would still find F6 useful to jump to the next or previous \"chapter\", even though they would not likely use it to go through all chapters.\n- only section/landmarks with at least one focusable child will be traversed\n  - consider allowing section/landmarks with no focusable children to participate by moving the caret to the first caret-browseable child (this would have to be thoroughly tested to see if it makes sense to \"navigate\" between focusable elements and non-focusable caret-browseable elements; i.e. should you change the user's caret browsing (F7) mode, or just move the caret? It may even make sense to select the non-focusable element or the first word of the non-focusable element so that the user believes that the element has been \"navigated\" to).\n- if the section/landmark has more than one focusable child, focus goes to the first focusable child\n  - consider navigating to the \"current\" focusable child (i.e. the aria-activedescendant) instead of the first\n- F6 and Shift+F6 still continue to traverse to the address bar and history sidebar (and the new outline sidebar described below)\n- F6 and Shift+F6 will no longer traverse <frame> elements (this could be phased out, if necessary, and eliminated when frame use drops below a certain level)\n\n2) Outline sidebar - details\n- Ctrl+F6 (Win) or Command-Shift-F6 (Mac) opens an Outline sidebar which looks/feels almost identical to the History sidebar, including search field and filter combo on top, and tree below (please type Ctrl+H (Win) or Command-Shift-H (Mac) in a Firefox browser so that you can follow along as I describe details)\n- Differences are:\n  - the tree contains all of the section/landmark elements discovered by our \"role-augmented\" outline algorithm (mentioned in B, above)\n  - the name/label of each section/landmark element (used for the tree item's label) comes from the accessible name [12] of the heading for the section element (for example, <h1>name</h1> or aria-labelledby=\"nameID\" or aria-label=\"name\"), or the accessible name of the landmark element.\n    - in the complete absence of a name, consider using the role or tag as the name, i.e. \"main\", \"footer\", \"banner\", \"search\"\n  - typing a name/label in the search field of the new Outline sidebar filters the tree to show only section/landmarks with the typed text in their name/label\n  - selecting a section/landmark type in the filter combo filters the tree to show only section/landmarks of that type (default is \"all\"; and \"sectioning content\" and \"landmarks\" could be in the combo as well)\n    - consider allowing multi-select on the filter combo, so that users can choose to show, for example, section+main+region+article, or form+search+nav+navigation\n  - tree items can have icons based on type (go wild <g>), or simply based on whether the element is \"sectioning content\" or a \"landmark\" (or both)\n  - selecting a tree item, by either single-clicking it with the mouse or using arrow keys in the tree, scrolls the page so that the selected section/landmark is in view\n    - consider drawing a [temporary] border around the section/landmark to show exactly where it is\n  - activating a tree item, by either double-clicking it with the mouse or using arrow keys in the tree followed by enter; scrolls, optionally draws a temporary border, and then gives focus to the first focusable child of the section/element (if it has a focusable child; if not, then focus just stays in the tree)\n    - consider navigating to the \"current\" focusable child (i.e. the aria-activedescendant) instead of the first\n    - consider moving the caret, as with Quick traversal, if there are no focusable children\n  - F6 and Shift+F6 traverse out of the Outline sidebar in a similar manner to the way F6/Shift+F6 currently traverse out of the History sidebar.\n\nPoints to consider:\n- Perhaps this bug should be filed under \"General\"? Or maybe \"Keyboard Navigation\"?\n- Should sectioning content elements with role=\"presentation\" be included in the outline? Probably not?\n- Should sectioning content elements with non-landmark roles, such as a <section role=\"marquee\"> or <section role=\"dialog\"> or <aside role=\"note\"> be included? Probably?\n- Mac OS X apparently has Control-F6 and Shift-Control-F6 to Move the focus to the next/previous panel [13], however I don't think (?) this will be a problem, because Firefox on Mac OS X is already using F6 and Shift-F6, and our Outline sidebar would use Command-Shift-F6.\n- I chose Ctrl+F6 (Win) and Command-Shift-F6 (Mac) for the Outline sidebar shortcut to align with the History sidebar shortcut of Ctrl+H (Win) and Command-Shift-H (Mac). If preferred, consider using combinations of Alt with F6 (FYI, apparently some apps use, or used to use, Ctrl+F6 and/or Alt+F6 to cycle through their open windows).\n- For mobile devices, Outline could be provided at the top of the Awesome Screen with History, Top Sites, and Bookmarks [14], with tap and hold for more options. [15]\n\nA couple of final thoughts:\nAs Matt and others have said, this could be a very powerful feature - differentiating even - if it is done right.\nThose who use a keyboard or alternative input device would benefit immediately, and keyboard power-users would enjoy traversing larger areas of content without reaching for the mouse.\nIt is the kind of feature that could become indispensable to many users.\n\nWhile this feature may not immediately impact screen reader users (because screen readers already have this capability), I believe that by making semantic structure visible to sighted developers and designers, screen reader users would benefit in the long run because web pages would be more likely to be created with semantic structure in mind.\n\n[1] https://support.mozilla.org/en-US/kb/keyboard-shortcuts-perform-firefox-tasks-quickly\n[2] http://www.w3.org/TR/html5-diff/#obsolete-elements\n[3] https://support.microsoft.com/en-us/kb/126449\n[4] https://support.microsoft.com/en-us/kb/135000\n[5] https://en.wikipedia.org/wiki/Table_of_keyboard_shortcuts\n[6] http://www.w3.org/html/wg/drafts/html/master/dom.html#sectioning-content\n[7] http://www.w3.org/TR/wai-aria-1.1/#landmark\n[8] http://www.w3.org/html/wg/drafts/html/master/semantics.html#outline\n[9] http://www.w3.org/TR/html-aria/#docconformance\n[10] http://www.w3.org/html/wg/drafts/html/master/semantics.html#headings-and-sections\n[11] http://webaim.org/projects/screenreadersurvey5/#numlandmarks\n[12] http://www.w3.org/TR/accname-aam-1.1/#mapping_additional_nd_te\n[13] https://support.apple.com/en-ca/HT204434\n[14] https://support.mozilla.org/en-US/kb/use-awesome-screen-search-web-bookmarks-and-more\n[15] https://support.mozilla.org/en-US/kb/use-gestures-in-firefox-android", "attachment_id": null, "id": 10794673, "count": 59, "is_private": false, "creator": "carolynmacleod4@gmail.com", "text": "Here is an alternate proposal for the UI. Most of this has been touched on already (by Marco, Matt, and others), but I'd like to flesh it out a bit more.\n\nThis proposal has 2 parts:\n1) Quick traversal of \"top-level\" sections/landmarks/panes with F6 and Shift+F6.\n2) Open Outline sidebar with Ctrl+F6 on Win or Command-Shift-F6 on Mac (*very* similar to History sidebar that opens with Ctrl+H on Windows or Command-Shift-H on Mac).\n\nBefore I describe these 2 parts in more depth, I want to establish 2 things:\nA) Why F6?\n- Firefox currently defines F6 and Shift+F6 as traversing frames [1] but <frame> is now obsolete [2], so I think we can repurpose (i.e. mostly augment) F6 and Shift+F6 now.\n- F6 and Shift+F6 have been used to traverse \"panes\" for a very long time (including Windows Explorer in Windows XP [3], or Word in Windows 95 [4], as well as browsers on multiple platforms [5]), so the idea of using F6 to traverse larger chunks of content is \"written in the ancient runes\". This makes it very discoverable by keyboard users.\n\nB) This feature is about both HTML5 sectioning content [6] and WAI-ARIA landmark roles [7].\n- Although it is implied in the title of this bug, and \"section elements\" have been mentioned, I just want to make it explicitly clear that we are talking about HTML5 sectioning content (including h1-h6 when they implicitly define sections) as well as ARIA landmark roles; in short, anything that the page author expects to contribute to an \"outline\".\n- Unfortunately, the HTML5 outline algorithm [8] is incomplete, because it does not take ARIA roles into account. For example, a <div> with role=\"region\" and a label would be expected to be part of an outline, but the algorithm wouldn't find it. However, the algorithm is probably a good place to start, as long as ARIA roles are considered along with sectioning content.\n- In that light, default ARIA roles [9] must also be taken into account. For example, a <header> that is not a descendant of an article or section has a default role of \"banner\", and a <footer> that is not a descendant of an article or section has a default role of \"contentinfo\", which classifies these elements as landmarks. Also, <main> is not sectioning content, but because it has a default role of main, it is a landmark.\n- In order to simplify this discussion, and keep both HTML5 and ARIA in mind, I am going to call any element that goes in the outline a \"section/landmark\" element.\n- For reference:\n  - sectioning content [6]: article, aside, nav, section\n  - landmark roles [7]: application, banner, complementary, contentinfo, form, main, navigation, region, search\n  - heading content that may define an implied section [10]: h1, h2, h3, h4, h5, h6\n\nNow for the details (with apologies to @SteveFaulkner, but I agree with others that single-letter keys don't allow traversal through editable elements, and a menu/#nav doesn't scale for presenting all section/landmark elements neatly. Steve, I am very interested in your feedback on this proposal).\n1) Quick traversal - details\n- F6 traverses (scrolls and gives focus) to the next \"top level\" section/landmark\n- Shift+F6 traverses to the previous \"top level\" section/landmark\n- \"top level\" means only section/landmark elements that are not descendants of sectioning content elements (i.e. their ancestor sectioning root is <body>)\n  - consider expanding the definition of \"top level\" to include direct section/landmark descendants of <main> as well\n  - the 2014 WebAIM Screen Reader User Survey [11] noted that somewhere around 6 or so landmarks were reported as being optimal. Of course, some documents are large, with many top-level sections, like a book with chapters. I think that for such documents, users would still find F6 useful to jump to the next or previous \"chapter\", even though they would not likely use it to go through all chapters.\n- only section/landmarks with at least one focusable child will be traversed\n  - consider allowing section/landmarks with no focusable children to participate by moving the caret to the first caret-browseable child (this would have to be thoroughly tested to see if it makes sense to \"navigate\" between focusable elements and non-focusable caret-browseable elements; i.e. should you change the user's caret browsing (F7) mode, or just move the caret? It may even make sense to select the non-focusable element or the first word of the non-focusable element so that the user believes that the element has been \"navigated\" to).\n- if the section/landmark has more than one focusable child, focus goes to the first focusable child\n  - consider navigating to the \"current\" focusable child (i.e. the aria-activedescendant) instead of the first\n- F6 and Shift+F6 still continue to traverse to the address bar and history sidebar (and the new outline sidebar described below)\n- F6 and Shift+F6 will no longer traverse <frame> elements (this could be phased out, if necessary, and eliminated when frame use drops below a certain level)\n\n2) Outline sidebar - details\n- Ctrl+F6 (Win) or Command-Shift-F6 (Mac) opens an Outline sidebar which looks/feels almost identical to the History sidebar, including search field and filter combo on top, and tree below (please type Ctrl+H (Win) or Command-Shift-H (Mac) in a Firefox browser so that you can follow along as I describe details)\n- Differences are:\n  - the tree contains all of the section/landmark elements discovered by our \"role-augmented\" outline algorithm (mentioned in B, above)\n  - the name/label of each section/landmark element (used for the tree item's label) comes from the accessible name [12] of the heading for the section element (for example, <h1>name</h1> or aria-labelledby=\"nameID\" or aria-label=\"name\"), or the accessible name of the landmark element.\n    - in the complete absence of a name, consider using the role or tag as the name, i.e. \"main\", \"footer\", \"banner\", \"search\"\n  - typing a name/label in the search field of the new Outline sidebar filters the tree to show only section/landmarks with the typed text in their name/label\n  - selecting a section/landmark type in the filter combo filters the tree to show only section/landmarks of that type (default is \"all\"; and \"sectioning content\" and \"landmarks\" could be in the combo as well)\n    - consider allowing multi-select on the filter combo, so that users can choose to show, for example, section+main+region+article, or form+search+nav+navigation\n  - tree items can have icons based on type (go wild <g>), or simply based on whether the element is \"sectioning content\" or a \"landmark\" (or both)\n  - selecting a tree item, by either single-clicking it with the mouse or using arrow keys in the tree, scrolls the page so that the selected section/landmark is in view\n    - consider drawing a [temporary] border around the section/landmark to show exactly where it is\n  - activating a tree item, by either double-clicking it with the mouse or using arrow keys in the tree followed by enter; scrolls, optionally draws a temporary border, and then gives focus to the first focusable child of the section/element (if it has a focusable child; if not, then focus just stays in the tree)\n    - consider navigating to the \"current\" focusable child (i.e. the aria-activedescendant) instead of the first\n    - consider moving the caret, as with Quick traversal, if there are no focusable children\n  - F6 and Shift+F6 traverse out of the Outline sidebar in a similar manner to the way F6/Shift+F6 currently traverse out of the History sidebar.\n\nPoints to consider:\n- Perhaps this bug should be filed under \"General\"? Or maybe \"Keyboard Navigation\"?\n- Should sectioning content elements with role=\"presentation\" be included in the outline? Probably not?\n- Should sectioning content elements with non-landmark roles, such as a <section role=\"marquee\"> or <section role=\"dialog\"> or <aside role=\"note\"> be included? Probably?\n- Mac OS X apparently has Control-F6 and Shift-Control-F6 to Move the focus to the next/previous panel [13], however I don't think (?) this will be a problem, because Firefox on Mac OS X is already using F6 and Shift-F6, and our Outline sidebar would use Command-Shift-F6.\n- I chose Ctrl+F6 (Win) and Command-Shift-F6 (Mac) for the Outline sidebar shortcut to align with the History sidebar shortcut of Ctrl+H (Win) and Command-Shift-H (Mac). If preferred, consider using combinations of Alt with F6 (FYI, apparently some apps use, or used to use, Ctrl+F6 and/or Alt+F6 to cycle through their open windows).\n- For mobile devices, Outline could be provided at the top of the Awesome Screen with History, Top Sites, and Bookmarks [14], with tap and hold for more options. [15]\n\nA couple of final thoughts:\nAs Matt and others have said, this could be a very powerful feature - differentiating even - if it is done right.\nThose who use a keyboard or alternative input device would benefit immediately, and keyboard power-users would enjoy traversing larger areas of content without reaching for the mouse.\nIt is the kind of feature that could become indispensable to many users.\n\nWhile this feature may not immediately impact screen reader users (because screen readers already have this capability), I believe that by making semantic structure visible to sighted developers and designers, screen reader users would benefit in the long run because web pages would be more likely to be created with semantic structure in mind.\n\n[1] https://support.mozilla.org/en-US/kb/keyboard-shortcuts-perform-firefox-tasks-quickly\n[2] http://www.w3.org/TR/html5-diff/#obsolete-elements\n[3] https://support.microsoft.com/en-us/kb/126449\n[4] https://support.microsoft.com/en-us/kb/135000\n[5] https://en.wikipedia.org/wiki/Table_of_keyboard_shortcuts\n[6] http://www.w3.org/html/wg/drafts/html/master/dom.html#sectioning-content\n[7] http://www.w3.org/TR/wai-aria-1.1/#landmark\n[8] http://www.w3.org/html/wg/drafts/html/master/semantics.html#outline\n[9] http://www.w3.org/TR/html-aria/#docconformance\n[10] http://www.w3.org/html/wg/drafts/html/master/semantics.html#headings-and-sections\n[11] http://webaim.org/projects/screenreadersurvey5/#numlandmarks\n[12] http://www.w3.org/TR/accname-aam-1.1/#mapping_additional_nd_te\n[13] https://support.apple.com/en-ca/HT204434\n[14] https://support.mozilla.org/en-US/kb/use-awesome-screen-search-web-bookmarks-and-more\n[15] https://support.mozilla.org/en-US/kb/use-gestures-in-firefox-android", "time": "2015-09-30T15:06:41Z", "bug_id": 670928, "tags": [], "creation_time": "2015-09-30T15:06:41Z", "author": "carolynmacleod4@gmail.com"}, {"id": 11542180, "attachment_id": null, "raw_text": "", "creation_time": "2016-07-12T15:32:49Z", "author": "gijskruitbosch+bugs@gmail.com", "text": "*** Bug 1140572 has been marked as a duplicate of this bug. ***", "time": "2016-07-12T15:32:49Z", "tags": [], "bug_id": 670928, "is_private": false, "creator": "gijskruitbosch+bugs@gmail.com", "count": 60}, {"id": 11656534, "attachment_id": 8785000, "raw_text": "Perhaps the proposal in comment 59 can be simplified:\na) Just implement the Outline sidebar (part 2) for now. (We can decide later if we still want to have Quick traversal (part 1)).\n\nb) Ignore the broken HTML5 outline algorithm (I had naively hoped it would get fixed). If we treat headings and section/landmarks separately, we don't need it.\n\nc) Never mind the \"filter combo\" - it just complicates things.\n\nd) Ignore 'application' because it is no longer a landmark role in ARIA 1.1. [1]\n\ne) Only list regions (including <section> elements with default role=\"region\") if they have a label (specified by aria-label, aria-labelledby, title, or first heading child).\n\nf) We probably should only list HTML5 sectioning content elements whose implicit or explicit role is a landmark role. That would mean <article> is not in the list by default because its implicit role is 'article', which is not a landmark role. It also rules out things like <section role=\"marquee\"> and <section role=\"dialog\"> and any sectioning element with role=\"presentation\". We can revisit this point in more detail later, if, for example, user feedback indicates that they expect articles to be listed.\n\nI've attached a mockup of one possible implementation of this simplified Outline sidebar. It's just like the Ctrl+H History sidebar, except it's called \"Outline\", the View menu contains \"Landmarks\" and \"Headings\" radio items, and the tree contains a hierarchical list of either the section/landmarks or the headings on the current web page. The mockup shows section/landmarks on a fictional web site after the user typed Ctrl+F6 to open the Outline sidebar (which placed focus in the search field), then tab twice to move to the tree, and then down arrow until the Main landmark was selected (alternatively, they could have typed Main in the search field). At this point, we need to decide what will happen if the user activates the Main tree item (by typing Enter or Space, or double-clicking). My personal preference is for the web page to scroll if necessary to ensure that Main is in view, and then give focus to the first (or current) focusable child in the Main element. If there is no focusable child, then set the caret (aka selection [2]) at the beginning of the Main element.\n\nIt might even make sense to also scroll the web page as the user selects the tree items (with arrow keys or single-click of mouse).\n\nNote that since the section/landmark names in the Outline are user-facing (and not just for developers), I chose which names to display. For example, I chose Banner instead of header because header is too easy to mix up with heading. I chose Navigation instead of nav because it's a full word. I went with Complimentary and Region instead of aside and section because they were the landmark names, but those could go either way. And I chose Footer instead of contentinfo, because, well, what's a contentinfo? :)\n\nIf the section/landmark has a label (required for role=\"region\" in order to be included in the Outline tree, but optional on other section/landmarks) then I displayed the section/landmark name, followed by colon, followed by the label. Alternatively, the label could go first; so in the mockup, \"Navigation: Site\" would be listed as \"Site Navigation\", \"Region: Messages\" would be \"Messages Region\", and \"Complimentary: Carousel\" would be \"Carousel Complimentary\" or perhaps \"Carousel Aside\".\n\nPlease work with me to get this thing specified, so that someone can implement it. With the 508 Refresh due this fall, having heading and section/landmark navigation implemented natively in the browser would go a long way towards encouraging web designers and developers to semantically organize their pages.\n\n[1] https://rawgit.com/w3c/aria/master/aria/aria.html#landmark_roles\n[2] https://www.w3.org/TR/UAAG20-Reference/#def-selection", "author": "carolynmacleod4@gmail.com", "creation_time": "2016-08-25T21:59:10Z", "tags": [], "time": "2016-08-25T21:59:10Z", "bug_id": 670928, "text": "Created attachment 8785000\nff-outline-view.png\n\nPerhaps the proposal in comment 59 can be simplified:\na) Just implement the Outline sidebar (part 2) for now. (We can decide later if we still want to have Quick traversal (part 1)).\n\nb) Ignore the broken HTML5 outline algorithm (I had naively hoped it would get fixed). If we treat headings and section/landmarks separately, we don't need it.\n\nc) Never mind the \"filter combo\" - it just complicates things.\n\nd) Ignore 'application' because it is no longer a landmark role in ARIA 1.1. [1]\n\ne) Only list regions (including <section> elements with default role=\"region\") if they have a label (specified by aria-label, aria-labelledby, title, or first heading child).\n\nf) We probably should only list HTML5 sectioning content elements whose implicit or explicit role is a landmark role. That would mean <article> is not in the list by default because its implicit role is 'article', which is not a landmark role. It also rules out things like <section role=\"marquee\"> and <section role=\"dialog\"> and any sectioning element with role=\"presentation\". We can revisit this point in more detail later, if, for example, user feedback indicates that they expect articles to be listed.\n\nI've attached a mockup of one possible implementation of this simplified Outline sidebar. It's just like the Ctrl+H History sidebar, except it's called \"Outline\", the View menu contains \"Landmarks\" and \"Headings\" radio items, and the tree contains a hierarchical list of either the section/landmarks or the headings on the current web page. The mockup shows section/landmarks on a fictional web site after the user typed Ctrl+F6 to open the Outline sidebar (which placed focus in the search field), then tab twice to move to the tree, and then down arrow until the Main landmark was selected (alternatively, they could have typed Main in the search field). At this point, we need to decide what will happen if the user activates the Main tree item (by typing Enter or Space, or double-clicking). My personal preference is for the web page to scroll if necessary to ensure that Main is in view, and then give focus to the first (or current) focusable child in the Main element. If there is no focusable child, then set the caret (aka selection [2]) at the beginning of the Main element.\n\nIt might even make sense to also scroll the web page as the user selects the tree items (with arrow keys or single-click of mouse).\n\nNote that since the section/landmark names in the Outline are user-facing (and not just for developers), I chose which names to display. For example, I chose Banner instead of header because header is too easy to mix up with heading. I chose Navigation instead of nav because it's a full word. I went with Complimentary and Region instead of aside and section because they were the landmark names, but those could go either way. And I chose Footer instead of contentinfo, because, well, what's a contentinfo? :)\n\nIf the section/landmark has a label (required for role=\"region\" in order to be included in the Outline tree, but optional on other section/landmarks) then I displayed the section/landmark name, followed by colon, followed by the label. Alternatively, the label could go first; so in the mockup, \"Navigation: Site\" would be listed as \"Site Navigation\", \"Region: Messages\" would be \"Messages Region\", and \"Complimentary: Carousel\" would be \"Carousel Complimentary\" or perhaps \"Carousel Aside\".\n\nPlease work with me to get this thing specified, so that someone can implement it. With the 508 Refresh due this fall, having heading and section/landmark navigation implemented natively in the browser would go a long way towards encouraging web designers and developers to semantically organize their pages.\n\n[1] https://rawgit.com/w3c/aria/master/aria/aria.html#landmark_roles\n[2] https://www.w3.org/TR/UAAG20-Reference/#def-selection", "creator": "carolynmacleod4@gmail.com", "is_private": false, "count": 61}, {"count": 62, "is_private": false, "creator": "gijskruitbosch+bugs@gmail.com", "text": "*** Bug 1350537 has been marked as a duplicate of this bug. ***", "tags": [], "time": "2017-03-30T17:02:08Z", "bug_id": 670928, "creation_time": "2017-03-30T17:02:08Z", "author": "gijskruitbosch+bugs@gmail.com", "raw_text": "", "attachment_id": null, "id": 12192158}, {"raw_text": "Here's the same feature request on other platforms:\nSafari: https://bugs.webkit.org/show_bug.cgi?id=172817\nEdge: https://wpdev.uservoice.com/forums/257854-microsoft-edge-developer/suggestions/19436788-landmark-navigation\nChrome: https://bugs.chromium.org/p/chromium/issues/detail?id=704698", "attachment_id": null, "id": 12365315, "is_private": false, "creator": "carolynmacleod4@gmail.com", "text": "Here's the same feature request on other platforms:\nSafari: https://bugs.webkit.org/show_bug.cgi?id=172817\nEdge: https://wpdev.uservoice.com/forums/257854-microsoft-edge-developer/suggestions/19436788-landmark-navigation\nChrome: https://bugs.chromium.org/p/chromium/issues/detail?id=704698", "tags": [], "time": "2017-06-01T17:01:30Z", "creation_time": "2017-06-01T17:01:30Z", "author": "carolynmacleod4@gmail.com", "count": 63, "bug_id": 670928}, {"attachment_id": null, "raw_text": "Slack has implemented landmark navigation using F6 (SHIFT+F6) in their desktop (Electron) app; or CTRL+F6 (CTRL+SHIFT+F6) in browsers. It's quite nice. Please give it a try to get an idea of what landmark navigation could feel like if implemented natively in browsers.\nhttps://get.slack.help/hc/en-us/articles/115003340723-Keyboard-accessibility-in-Slack-", "id": 13747209, "creator": "carolynmacleod4@gmail.com", "is_private": false, "count": 64, "author": "carolynmacleod4@gmail.com", "creation_time": "2018-11-09T15:39:58Z", "bug_id": 670928, "time": "2018-11-09T15:39:58Z", "tags": [], "text": "Slack has implemented landmark navigation using F6 (SHIFT+F6) in their desktop (Electron) app; or CTRL+F6 (CTRL+SHIFT+F6) in browsers. It's quite nice. Please give it a try to get an idea of what landmark navigation could feel like if implemented natively in browsers.\nhttps://get.slack.help/hc/en-us/articles/115003340723-Keyboard-accessibility-in-Slack-"}, {"bug_id": 670928, "count": 65, "tags": [], "time": "2018-11-12T06:09:32Z", "text": "I am aware of F6, however I am not the deciding factor here. If you read through the history on this bug, there seem to still be a lot of unanswered questions.", "author": "marco.zehe@gmail.com", "creation_time": "2018-11-12T06:09:32Z", "creator": "marco.zehe@gmail.com", "is_private": false, "id": 13750036, "raw_text": "I am aware of F6, however I am not the deciding factor here. If you read through the history on this bug, there seem to still be a lot of unanswered questions.", "attachment_id": null}, {"text": "> I am not the deciding factor here.\n\nBugzilla tells me that you are the triage owner. Is this bug filed under the wrong component?\n\n> If you read through the history on this bug, there seem to still be a lot of unanswered questions.\n\nSome of the questions have been answered through new insights over time.\nOther questions are design decisions and opportunities for the team.\n\nWhich questions do you feel are blocking this?", "bug_id": 670928, "time": "2018-11-12T13:00:50Z", "tags": [], "creation_time": "2018-11-12T13:00:50Z", "author": "carolynmacleod4@gmail.com", "count": 66, "is_private": false, "creator": "carolynmacleod4@gmail.com", "id": 13751715, "raw_text": "> I am not the deciding factor here.\n\nBugzilla tells me that you are the triage owner. Is this bug filed under the wrong component?\n\n> If you read through the history on this bug, there seem to still be a lot of unanswered questions.\n\nSome of the questions have been answered through new insights over time.\nOther questions are design decisions and opportunities for the team.\n\nWhich questions do you feel are blocking this?", "attachment_id": null}, {"attachment_id": null, "raw_text": "(In reply to Carolyn MacLeod from comment #66)\n> > I am not the deciding factor here.\n> \n> Bugzilla tells me that you are the triage owner. Is this bug filed under the\n> wrong component?\n\nUltimately, since this is front-end, yes.\n\nThe unanswered questions are, for one thing, which keyboard shortcuts to use, and other things surrounding the expected UX. F6, to stick with your example, already is being used in Firefox to switch between several major browser components, so cannot be used to also switch between landmarks on a page, or this will become very confusing.\n\nSo implementing this requires a defined UX, which is one part this has so far been blocked on, and an implementation following that by the front-end team. So while this is the correct entry point for this kind of bug, ultimately others will implement it, namely either someone from the Firefox front-end team, or someone submitting a patch as a volunteer, which is always possible.", "id": 13751926, "is_private": false, "creator": "marco.zehe@gmail.com", "count": 67, "creation_time": "2018-11-12T15:07:58Z", "author": "marco.zehe@gmail.com", "text": "(In reply to Carolyn MacLeod from comment #66)\n> > I am not the deciding factor here.\n> \n> Bugzilla tells me that you are the triage owner. Is this bug filed under the\n> wrong component?\n\nUltimately, since this is front-end, yes.\n\nThe unanswered questions are, for one thing, which keyboard shortcuts to use, and other things surrounding the expected UX. F6, to stick with your example, already is being used in Firefox to switch between several major browser components, so cannot be used to also switch between landmarks on a page, or this will become very confusing.\n\nSo implementing this requires a defined UX, which is one part this has so far been blocked on, and an implementation following that by the front-end team. So while this is the correct entry point for this kind of bug, ultimately others will implement it, namely either someone from the Firefox front-end team, or someone submitting a patch as a volunteer, which is always possible.", "time": "2018-11-12T15:07:58Z", "bug_id": 670928, "tags": []}, {"count": 68, "bug_id": 670928, "attachment_id": null, "raw_text": "> which keyboard shortcuts to use ... F6 already is being used in Firefox to switch between several major browser components, so cannot be used to also switch between landmarks on a page, or this will become very confusing.\n\nF6 (and Shift+F6) might be confusing, or they might be seen as a nice way to teleport around the browser. I think F6 merits user testing, or at least discussion. However, that said, Slack's decision to use Ctrl+F6 (and Ctrl+Shift+F6) within the browsers works very well.\n\n> this is front-end\n\nHow can we get the attention of the front-end team?", "id": 13752686, "is_private": false, "creator": "carolynmacleod4@gmail.com", "creation_time": "2018-11-12T20:32:21Z", "author": "carolynmacleod4@gmail.com", "text": "> which keyboard shortcuts to use ... F6 already is being used in Firefox to switch between several major browser components, so cannot be used to also switch between landmarks on a page, or this will become very confusing.\n\nF6 (and Shift+F6) might be confusing, or they might be seen as a nice way to teleport around the browser. I think F6 merits user testing, or at least discussion. However, that said, Slack's decision to use Ctrl+F6 (and Ctrl+Shift+F6) within the browsers works very well.\n\n> this is front-end\n\nHow can we get the attention of the front-end team?", "time": "2018-11-12T20:32:21Z", "tags": []}, {"text": "They do have their attention on this bug. But as I wrote to you in the web-a11y Slack, this is about more than just throwing keyboard focus somewhere, because those elements aren't focusable by spec by default currently, and in order for a proper implementation that does not mess too much with website's JS logic, would require adjustments on the spec level first. That's why we advocate for using/creating add-ons for this kind of task currently, since if they mess with the website, it's a more controlled environment and the source can be spotted more easily if there are problems.", "bug_id": 670928, "tags": [], "time": "2018-11-21T07:58:55Z", "creation_time": "2018-11-21T07:58:55Z", "author": "marco.zehe@gmail.com", "count": 69, "is_private": false, "creator": "marco.zehe@gmail.com", "id": 13770479, "raw_text": "They do have their attention on this bug. But as I wrote to you in the web-a11y Slack, this is about more than just throwing keyboard focus somewhere, because those elements aren't focusable by spec by default currently, and in order for a proper implementation that does not mess too much with website's JS logic, would require adjustments on the spec level first. That's why we advocate for using/creating add-ons for this kind of task currently, since if they mess with the website, it's a more controlled environment and the source can be spotted more easily if there are problems.", "attachment_id": null}, {"creator": "carolynmacleod4@gmail.com", "is_private": false, "time": "2020-07-29T21:53:32Z", "tags": [], "text": "The following will work (and if preferred, can be implemented just for HTML elements that have an implicit landmark role [1]):\n- User types next-landmark shortcut key\n- Browser scrolls to start of next landmark (similar to scrolling to a fragment [2])\n- Browser moves Sequential Focus Navigation Starting Point (SFNSP) [2] to start of next landmark\n- Browser moves focus to body if landmark is not focusable (same as for in-page links with non-focusable target element)\n- User can type tab (or shift+tab) to move focus to next (previous) focusable element after (before) SFNSP\n\nSimilar behavior for previous-landmark.\nIf there's no next (previous) landmark then wrap to first (last) landmark.\n\nJust need to decide what shortcut key(s) to use.\nCtrl+F6 and Shift+Ctrl+F6 (Cmd+F6 and Shift+Cmd+F6 on Mac) may be the best choice, but that's up to you to decide. Would be nice if it was the same in all browsers.\nMatt Atkinson's excellent [Landmarks extension](http://matatk.agrip.org.uk/landmarks/) uses Alt+Shift+N and Alt+Shift+P which works nicely in most places, but not in text fields on a Mac (Alt inserts special characters).\n\n[1] HTML elements that have an implicit landmark role:\n- HTML header (in body scope), footer (in body scope), main, nav, aside\n- HTML form and section if aria-label[ledby] [3]\n- The only ARIA landmark not covered by the above HTML elements is search (input type=search defaults to searchbox role, not search). Willing to live with that 1 omission.\n\n[2] Sequential Focus Navigation Starting Point (SFNSP):\n- HTML spec [Scrolling to fragment](https://html.spec.whatwg.org/multipage/browsing-the-web.html#scroll-to-fragid:the-indicated-part-of-the-document-5)\n- HTML spec [Sequential focus navigation starting point](https://html.spec.whatwg.org/multipage/interaction.html#sequential-focus-navigation-starting-point)\n- [Removing Headaches from Focus Management](https://developers.google.com/web/updates/2016/03/focus-start-point)\n- [Focus management still matters](https://sarahmhigley.com/writing/focus-navigation-start-point/)\n- [Where focus goes when following in page links](https://hiddedevries.nl/en/blog/2017-04-24-where-focus-goes-when-following-in-page-links)\n- [In-Page Links and Input Focus Tests](http://accessibleculture.org/research-files/in-page-links/testPage.php#a-name-id)\n\n[3] From the [User Agent Support](https://w3c.github.io/aria/#ua-support) section of the ARIA spec:\n> The WAI-ARIA specification neither requires nor forbids user agents from enhancing native presentation and interaction behaviors on the basis of WAI-ARIA markup. Mainstream user agents might expose WAI-ARIA navigational landmarks (for example, as a dialog box or through a keyboard command) with the intention to facilitate navigation for all users. User agents are encouraged to maximize their usefulness to users, including users without disabilities.", "author": "carolynmacleod4@gmail.com", "creation_time": "2020-07-29T21:53:32Z", "raw_text": "The following will work (and if preferred, can be implemented just for HTML elements that have an implicit landmark role [1]):\n- User types next-landmark shortcut key\n- Browser scrolls to start of next landmark (similar to scrolling to a fragment [2])\n- Browser moves Sequential Focus Navigation Starting Point (SFNSP) [2] to start of next landmark\n- Browser moves focus to body if landmark is not focusable (same as for in-page links with non-focusable target element)\n- User can type tab (or shift+tab) to move focus to next (previous) focusable element after (before) SFNSP\n\nSimilar behavior for previous-landmark.\nIf there's no next (previous) landmark then wrap to first (last) landmark.\n\nJust need to decide what shortcut key(s) to use.\nCtrl+F6 and Shift+Ctrl+F6 (Cmd+F6 and Shift+Cmd+F6 on Mac) may be the best choice, but that's up to you to decide. Would be nice if it was the same in all browsers.\nMatt Atkinson's excellent [Landmarks extension](http://matatk.agrip.org.uk/landmarks/) uses Alt+Shift+N and Alt+Shift+P which works nicely in most places, but not in text fields on a Mac (Alt inserts special characters).\n\n[1] HTML elements that have an implicit landmark role:\n- HTML header (in body scope), footer (in body scope), main, nav, aside\n- HTML form and section if aria-label[ledby] [3]\n- The only ARIA landmark not covered by the above HTML elements is search (input type=search defaults to searchbox role, not search). Willing to live with that 1 omission.\n\n[2] Sequential Focus Navigation Starting Point (SFNSP):\n- HTML spec [Scrolling to fragment](https://html.spec.whatwg.org/multipage/browsing-the-web.html#scroll-to-fragid:the-indicated-part-of-the-document-5)\n- HTML spec [Sequential focus navigation starting point](https://html.spec.whatwg.org/multipage/interaction.html#sequential-focus-navigation-starting-point)\n- [Removing Headaches from Focus Management](https://developers.google.com/web/updates/2016/03/focus-start-point)\n- [Focus management still matters](https://sarahmhigley.com/writing/focus-navigation-start-point/)\n- [Where focus goes when following in page links](https://hiddedevries.nl/en/blog/2017-04-24-where-focus-goes-when-following-in-page-links)\n- [In-Page Links and Input Focus Tests](http://accessibleculture.org/research-files/in-page-links/testPage.php#a-name-id)\n\n[3] From the [User Agent Support](https://w3c.github.io/aria/#ua-support) section of the ARIA spec:\n> The WAI-ARIA specification neither requires nor forbids user agents from enhancing native presentation and interaction behaviors on the basis of WAI-ARIA markup. Mainstream user agents might expose WAI-ARIA navigational landmarks (for example, as a dialog box or through a keyboard command) with the intention to facilitate navigation for all users. User agents are encouraged to maximize their usefulness to users, including users without disabilities.", "attachment_id": null, "id": 14962994, "count": 70, "bug_id": 670928}]}}}