{"bugs": {"654072": {"comments": [{"author": "aardmaat@hotmail.com", "attachment_id": null, "raw_text": "User-Agent:       Mozilla/5.0 (Windows NT 6.1; WOW64; rv:5.0a2) Gecko/20110501 Firefox/5.0a2\nBuild Identifier: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:5.0a2) Gecko/20110501 Firefox/5.0a2\n\non a forum I helped with a script\nwhen doing that it appeared that firefox was the only browser that didn't behave as expected with this script:\n\n<html>\n<head>\n<script>\nfor(var i=0;i<20;i++)\nsetTimeout(\"foo('\"+i+\"')\",(20-i)*2000);\nfunction foo(n)\n{\n\tdocument.getElementById('btn').value=n;\n\tif(n==0)\n  {\n\tdocument.getElementById('btn').value='Download';\n\tdocument.getElementById('btn').disabled=false;\n  }\n}\n</script>\n</head>\n<body bgcolor=\"#00CCCC\">\n<input style='width:150px' id='btn' type='button' value='20' disabled='disabled' onclick='window.location=\"mijndownloadbestand.rar\"'>\n</body>\n</html>\n\n(you might want to change the timer for testing, 20 seconds is long!)\n\nafter 20 seconds the button for downloading is enabled, that's just fine,\nwhen you refresh though, the button starts counting again but isn't disabled at the beginning. all other tested browsers (opera, chrome, ie9) do disable the button after refreshing the page.\nthis flaw would cause developers to make patches for firefox.\n\nReproducible: Always\n\nSteps to Reproduce:\n1.make a html file with the script\n2.open it in firefox and an other browser\n3.waith till the timer enables the button\n4.refresh the page\n5.firefox doesn't disable the button, other browser does\n\nActual Results:  \nfirefox's behaviour was out of sync with the other browsers\n\nExpected Results:  \nit should have disabled the button again for 20 seconds\n\nthis also happened with the firefox browser used by the person who needed help (because of this bug) with the script. I don't know what version he/she uses but it probably isn't aurora (so the bug is probably in more different versions of firefox)", "id": 5442551, "text": "User-Agent:       Mozilla/5.0 (Windows NT 6.1; WOW64; rv:5.0a2) Gecko/20110501 Firefox/5.0a2\nBuild Identifier: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:5.0a2) Gecko/20110501 Firefox/5.0a2\n\non a forum I helped with a script\nwhen doing that it appeared that firefox was the only browser that didn't behave as expected with this script:\n\n<html>\n<head>\n<script>\nfor(var i=0;i<20;i++)\nsetTimeout(\"foo('\"+i+\"')\",(20-i)*2000);\nfunction foo(n)\n{\n\tdocument.getElementById('btn').value=n;\n\tif(n==0)\n  {\n\tdocument.getElementById('btn').value='Download';\n\tdocument.getElementById('btn').disabled=false;\n  }\n}\n</script>\n</head>\n<body bgcolor=\"#00CCCC\">\n<input style='width:150px' id='btn' type='button' value='20' disabled='disabled' onclick='window.location=\"mijndownloadbestand.rar\"'>\n</body>\n</html>\n\n(you might want to change the timer for testing, 20 seconds is long!)\n\nafter 20 seconds the button for downloading is enabled, that's just fine,\nwhen you refresh though, the button starts counting again but isn't disabled at the beginning. all other tested browsers (opera, chrome, ie9) do disable the button after refreshing the page.\nthis flaw would cause developers to make patches for firefox.\n\nReproducible: Always\n\nSteps to Reproduce:\n1.make a html file with the script\n2.open it in firefox and an other browser\n3.waith till the timer enables the button\n4.refresh the page\n5.firefox doesn't disable the button, other browser does\n\nActual Results:  \nfirefox's behaviour was out of sync with the other browsers\n\nExpected Results:  \nit should have disabled the button again for 20 seconds\n\nthis also happened with the firefox browser used by the person who needed help (because of this bug) with the script. I don't know what version he/she uses but it probably isn't aurora (so the bug is probably in more different versions of firefox)", "creation_time": "2011-05-02T10:30:26Z", "is_private": false, "bug_id": 654072, "tags": [], "creator": "aardmaat@hotmail.com", "time": "2011-05-02T10:30:26Z", "count": 0}, {"attachment_id": 529443, "is_private": false, "time": "2011-05-02T10:32:26Z", "author": "aardmaat@hotmail.com", "raw_text": "an example of the script", "id": 5442554, "text": "Created attachment 529443\nexample of the code\n\nan example of the script", "creation_time": "2011-05-02T10:32:26Z", "bug_id": 654072, "tags": [], "creator": "aardmaat@hotmail.com", "count": 1}, {"id": 5442598, "raw_text": "I confirm the issue on Gecko 1.9.1, 1.9.2 and trunk.\nI believe there is a dup somewhere.", "creation_time": "2011-05-02T11:25:35Z", "is_private": false, "text": "I confirm the issue on Gecko 1.9.1, 1.9.2 and trunk.\nI believe there is a dup somewhere.", "count": 2, "creator": "mounir@lamouri.fr", "tags": [], "time": "2011-05-02T11:25:35Z", "bug_id": 654072, "attachment_id": null, "author": "mounir@lamouri.fr"}, {"is_private": false, "time": "2011-05-02T11:49:18Z", "attachment_id": null, "text": "just realized it isn't css what I'm talking about, it's just html attribute,\nsorry for my bad description", "creation_time": "2011-05-02T11:49:18Z", "raw_text": "just realized it isn't css what I'm talking about, it's just html attribute,\nsorry for my bad description", "id": 5442626, "bug_id": 654072, "count": 3, "tags": [], "creator": "aardmaat@hotmail.com", "author": "aardmaat@hotmail.com"}, {"author": "bzbarsky@mit.edu", "attachment_id": null, "text": "Modified disabled state is one of the form states that we preserve across history navigations and reloads, yes.  That's done quite explicitly.", "creation_time": "2011-05-02T11:58:11Z", "is_private": false, "raw_text": "Modified disabled state is one of the form states that we preserve across history navigations and reloads, yes.  That's done quite explicitly.", "id": 5442631, "bug_id": 654072, "tags": [], "count": 4, "time": "2011-05-02T11:58:11Z", "creator": "bzbarsky@mit.edu"}, {"id": 5442663, "raw_text": "what's the reason for that?\nshouldn't things like that be the same across al browsers?", "creation_time": "2011-05-02T12:22:11Z", "text": "what's the reason for that?\nshouldn't things like that be the same across al browsers?", "creator": "aardmaat@hotmail.com", "count": 5, "tags": [], "bug_id": 654072, "author": "aardmaat@hotmail.com", "is_private": false, "time": "2011-05-02T12:22:11Z", "attachment_id": null}, {"author": "bzbarsky@mit.edu", "creation_time": "2011-05-02T13:04:37Z", "text": "> what's the reason for that?\n\nI believe the idea was that a non-forced reload should be preserving all user-visible form state as much as possible (since it's a request to show again exactly what you're seeing, not to rerequest it all from the server).\n\n> shouldn't things like that be the same across al browsers?\n\nHistory operations are decidedly not the same across all browsers, and likely never will be....", "id": 5442779, "raw_text": "> what's the reason for that?\n\nI believe the idea was that a non-forced reload should be preserving all user-visible form state as much as possible (since it's a request to show again exactly what you're seeing, not to rerequest it all from the server).\n\n> shouldn't things like that be the same across al browsers?\n\nHistory operations are decidedly not the same across all browsers, and likely never will be....", "tags": [], "count": 6, "creator": "bzbarsky@mit.edu", "bug_id": 654072, "attachment_id": null, "is_private": false, "time": "2011-05-02T13:04:37Z"}, {"tags": [], "count": 7, "creator": "mrzephy@gmail.com", "bug_id": 654072, "id": 5714449, "raw_text": "I think this is a bug and needs to be fixed. It's not consistent with other browsers. And if you ask me, the developers should take care of these things, not the browser itself. E.g. run validations on DOM load. There is just too many cases where this is not the desired behavior. Filling in values into input fields is ok, but not this. And it works \"properly\" in other major browsers.", "creation_time": "2011-09-12T19:16:26Z", "text": "I think this is a bug and needs to be fixed. It's not consistent with other browsers. And if you ask me, the developers should take care of these things, not the browser itself. E.g. run validations on DOM load. There is just too many cases where this is not the desired behavior. Filling in values into input fields is ok, but not this. And it works \"properly\" in other major browsers.", "author": "mrzephy@gmail.com", "time": "2011-09-12T19:16:26Z", "is_private": false, "attachment_id": null}, {"tags": [], "count": 8, "creator": "bzbarsky@mit.edu", "time": "2011-09-12T23:35:34Z", "bug_id": 654072, "id": 5714808, "raw_text": "", "creation_time": "2011-09-12T23:35:34Z", "is_private": false, "text": "*** Bug 685657 has been marked as a duplicate of this bug. ***", "attachment_id": null, "author": "bzbarsky@mit.edu"}, {"author": "asqueella@gmail.com", "text": "*** Bug 638609 has been marked as a duplicate of this bug. ***", "creation_time": "2011-11-29T21:05:12Z", "raw_text": "", "id": 5879865, "bug_id": 654072, "count": 9, "tags": [], "creator": "asqueella@gmail.com", "attachment_id": null, "is_private": false, "time": "2011-11-29T21:05:12Z"}, {"attachment_id": null, "is_private": false, "time": "2011-11-29T21:08:19Z", "author": "asqueella@gmail.com", "creation_time": "2011-11-29T21:08:19Z", "text": "*** Bug 587527 has been marked as a duplicate of this bug. ***", "id": 5879881, "raw_text": "", "tags": [], "creator": "asqueella@gmail.com", "count": 10, "bug_id": 654072}, {"attachment_id": null, "time": "2011-11-29T21:28:34Z", "is_private": false, "author": "asqueella@gmail.com", "count": 11, "creator": "asqueella@gmail.com", "tags": [], "bug_id": 654072, "id": 5879980, "raw_text": "Here's an old (resolved/invalid) bug about this: bug 293733.\n\nfrom bz's comment 7 there:\n> > why is disabled state of form elements persisted? \n> \n> I (or someone else) would have to go back and read the original bugs on\n> that...  You're welcome to if you want to, of course.  It's about rock\n> bottom low priority for me.\n> \n> I wouldn't be opposed to changing the behavior if someone comes up with a\n> consistent description of what form state restoration _should_ act like. \n> I'm opposed to random back-and-forth tweaking, though.\n\nand for those interested in digging up the previous changes made in this area, the code is here: http://mxr.mozilla.org/mozilla-central/search?string=::SaveState", "creation_time": "2011-11-29T21:28:34Z", "text": "Here's an old (resolved/invalid) bug about this: bug 293733.\n\nfrom bz's comment 7 there:\n> > why is disabled state of form elements persisted? \n> \n> I (or someone else) would have to go back and read the original bugs on\n> that...  You're welcome to if you want to, of course.  It's about rock\n> bottom low priority for me.\n> \n> I wouldn't be opposed to changing the behavior if someone comes up with a\n> consistent description of what form state restoration _should_ act like. \n> I'm opposed to random back-and-forth tweaking, though.\n\nand for those interested in digging up the previous changes made in this area, the code is here: http://mxr.mozilla.org/mozilla-central/search?string=::SaveState"}, {"time": "2012-01-06T16:39:58Z", "is_private": false, "attachment_id": null, "bug_id": 654072, "count": 12, "tags": [], "creator": "wowmotty@gmail.com", "raw_text": "I'm throwing in my vote to fix this... I made a demo with a disabled button being added after the page loads: http://fiddle.jshell.net/Mottie/Adz9L/1/show/\n\nKeep hitting the reload button without holding down the shift key and watch what happens.", "id": 5960651, "text": "I'm throwing in my vote to fix this... I made a demo with a disabled button being added after the page loads: http://fiddle.jshell.net/Mottie/Adz9L/1/show/\n\nKeep hitting the reload button without holding down the shift key and watch what happens.", "creation_time": "2012-01-06T16:39:58Z", "author": "wowmotty@gmail.com"}, {"attachment_id": null, "is_private": false, "time": "2012-01-09T00:50:12Z", "author": "glenn@zewt.org", "creation_time": "2012-01-09T00:50:12Z", "text": "(In reply to Boris Zbarsky (:bz) from comment #6)\n> I believe the idea was that a non-forced reload should be preserving all\n> user-visible form state as much as possible (since it's a request to show\n> again exactly what you're seeing, not to rerequest it all from the server).\n\nI agree that this is bad.  Form state should attempt to preserve *user-entered* information.  The disabled state of form elements isn't stuff the user typed in, it's stuff the page and scripts have set.  Preserving that does nothing but break pages; the disabled state is no more \"form data\" than class names and other arbitrary bits of DOM state.\n\nI've hit this problem myself on EasyNews's search (a subscription service; can't usefully give a link), which disables the submit button when the form is submitted.  If I then reload the page before the submit completes, the form comes back unsubmittable.", "id": 5964457, "raw_text": "(In reply to Boris Zbarsky (:bz) from comment #6)\n> I believe the idea was that a non-forced reload should be preserving all\n> user-visible form state as much as possible (since it's a request to show\n> again exactly what you're seeing, not to rerequest it all from the server).\n\nI agree that this is bad.  Form state should attempt to preserve *user-entered* information.  The disabled state of form elements isn't stuff the user typed in, it's stuff the page and scripts have set.  Preserving that does nothing but break pages; the disabled state is no more \"form data\" than class names and other arbitrary bits of DOM state.\n\nI've hit this problem myself on EasyNews's search (a subscription service; can't usefully give a link), which disables the submit button when the form is submitted.  If I then reload the page before the submit completes, the form comes back unsubmittable.", "tags": [], "creator": "glenn@zewt.org", "count": 13, "bug_id": 654072}, {"bug_id": 654072, "time": "2012-01-09T00:54:48Z", "tags": [], "creator": "bzbarsky@mit.edu", "count": 14, "raw_text": "You can't win there: disabled state is often set based on information the user entered (e.g. selecting one of a set of radios can enable/disable other controls), so restoring values but not disabled state will fix some pages but break others....\n\nWhat we really need is some better way of restoring form data that informs the page about what exactly was restored or something.  Maybe we can make our restoration look like a user interacting with the page?", "id": 5964461, "text": "You can't win there: disabled state is often set based on information the user entered (e.g. selecting one of a set of radios can enable/disable other controls), so restoring values but not disabled state will fix some pages but break others....\n\nWhat we really need is some better way of restoring form data that informs the page about what exactly was restored or something.  Maybe we can make our restoration look like a user interacting with the page?", "creation_time": "2012-01-09T00:54:48Z", "is_private": false, "author": "bzbarsky@mit.edu", "attachment_id": null}, {"author": "glenn@zewt.org", "bug_id": 654072, "count": 15, "tags": [], "creator": "glenn@zewt.org", "raw_text": "(In reply to Boris Zbarsky (:bz) from comment #14)\n> You can't win there: disabled state is often set based on information the\n> user entered (e.g. selecting one of a set of radios can enable/disable other\n> controls), so restoring values but not disabled state will fix some pages\n> but break others....\n\nI think not restoring one select bit of DOM state as if it's form state is a step up, though.  Selecting that same set of radios might do any number of things, like hiding/showing arbitrary elements (\"your password is weak\"), or creating entirely new ones (Google Instant).\n\n> What we really need is some better way of restoring form data that informs\n> the page about what exactly was restored or something.  Maybe we can make\n> our restoration look like a user interacting with the page?\n\nThat might be risky, since the page may react to the \"user interactions\" unexpectedly.  For example, if a user's authentication has expired, trying to enter data into a form might pop up an authentication overlay, when the page only meant  to do upon a real user interaction.", "id": 5964486, "text": "(In reply to Boris Zbarsky (:bz) from comment #14)\n> You can't win there: disabled state is often set based on information the\n> user entered (e.g. selecting one of a set of radios can enable/disable other\n> controls), so restoring values but not disabled state will fix some pages\n> but break others....\n\nI think not restoring one select bit of DOM state as if it's form state is a step up, though.  Selecting that same set of radios might do any number of things, like hiding/showing arbitrary elements (\"your password is weak\"), or creating entirely new ones (Google Instant).\n\n> What we really need is some better way of restoring form data that informs\n> the page about what exactly was restored or something.  Maybe we can make\n> our restoration look like a user interacting with the page?\n\nThat might be risky, since the page may react to the \"user interactions\" unexpectedly.  For example, if a user's authentication has expired, trying to enter data into a form might pop up an authentication overlay, when the page only meant  to do upon a real user interaction.", "creation_time": "2012-01-09T01:10:32Z", "attachment_id": null, "time": "2012-01-09T01:10:32Z", "is_private": false}, {"author": "Chris_Beall@prodigy.net", "attachment_id": null, "raw_text": "(In reply to Boris Zbarsky (:bz) from comment #6)\n> > what's the reason for that?\n> \n> I believe the idea was that a non-forced reload should be preserving all\n> user-visible form state as much as possible (since it's a request to show\n> again exactly what you're seeing, not to rerequest it all from the server).\n\nA non-forced reload could be:\n 1. A request to see again what you see now (as described above).\n 2. A request to see what you saw when you first visited the page.\n 3. A request to see what is on the server right now.\n\nI would suggest that #1 is the least likely of these in the mind of the typical user and that #3 is beyond the technical understanding of the typical user (and already has its own, separate, invocation method), leaving #2 as the most useful implementation.\n\nBut the current implementation creates a 4th option:\n 4. A request to see what you saw when you first visited the page, except for certain things, where 'some things' is defined in terms the typical user does not understand.  Moreover, if the 'some things' are logically related to other things, the user may see two kinds of data, that which is the same as when the page was first viewed and that which is not, in a relationship that no longer is consistent.\n\nExample: http://stl.beallsprings.org/conservation%20easement.html\n\nThe checkbox toggles the display between two versions by modifying CSS.  The box is checked upon initial loading, which corresponds to what is displayed elsewhere on the page.  If you UNcheck the box, CSS is modified and the user sees a different view of the data (in this case a filtered view and a different background color).  The view of the data and the checkbox setting are in sync, as expected.  This synchronization remains as you check and uncheck the checkbox.\n\nNow uncheck the checkbox, then reload the page.  The data has been restored to its original view, i.e. with annotations, but the checkbox remains unchecked, i.e. the two are now out of sync and the user is confused.\n\nIn this case, the problem results because the initial state of the checkbox, which is created by JavaScript with a specification of 'checked', is not restored when the page is reloaded.  This is apparently a direct result of the philosophy described above.\n\nMy symptoms are a possible dup of 693927, which also seems to be related to this philosophy.\n\nA workaround, which I have implemented on page http://stl.beallsprings.org/Timeline.html, is to explicitly restore the initial state of the checkboxes using additional JavaScript driven by body onload=.  This is not necessary on any other browser that I have tested.\n\nI continue to believe that interpretation #2 more closely matches the typical user expectation and thus is the best choice.", "id": 5986185, "text": "(In reply to Boris Zbarsky (:bz) from comment #6)\n> > what's the reason for that?\n> \n> I believe the idea was that a non-forced reload should be preserving all\n> user-visible form state as much as possible (since it's a request to show\n> again exactly what you're seeing, not to rerequest it all from the server).\n\nA non-forced reload could be:\n 1. A request to see again what you see now (as described above).\n 2. A request to see what you saw when you first visited the page.\n 3. A request to see what is on the server right now.\n\nI would suggest that #1 is the least likely of these in the mind of the typical user and that #3 is beyond the technical understanding of the typical user (and already has its own, separate, invocation method), leaving #2 as the most useful implementation.\n\nBut the current implementation creates a 4th option:\n 4. A request to see what you saw when you first visited the page, except for certain things, where 'some things' is defined in terms the typical user does not understand.  Moreover, if the 'some things' are logically related to other things, the user may see two kinds of data, that which is the same as when the page was first viewed and that which is not, in a relationship that no longer is consistent.\n\nExample: http://stl.beallsprings.org/conservation%20easement.html\n\nThe checkbox toggles the display between two versions by modifying CSS.  The box is checked upon initial loading, which corresponds to what is displayed elsewhere on the page.  If you UNcheck the box, CSS is modified and the user sees a different view of the data (in this case a filtered view and a different background color).  The view of the data and the checkbox setting are in sync, as expected.  This synchronization remains as you check and uncheck the checkbox.\n\nNow uncheck the checkbox, then reload the page.  The data has been restored to its original view, i.e. with annotations, but the checkbox remains unchecked, i.e. the two are now out of sync and the user is confused.\n\nIn this case, the problem results because the initial state of the checkbox, which is created by JavaScript with a specification of 'checked', is not restored when the page is reloaded.  This is apparently a direct result of the philosophy described above.\n\nMy symptoms are a possible dup of 693927, which also seems to be related to this philosophy.\n\nA workaround, which I have implemented on page http://stl.beallsprings.org/Timeline.html, is to explicitly restore the initial state of the checkboxes using additional JavaScript driven by body onload=.  This is not necessary on any other browser that I have tested.\n\nI continue to believe that interpretation #2 more closely matches the typical user expectation and thus is the best choice.", "creation_time": "2012-01-17T19:20:37Z", "is_private": false, "bug_id": 654072, "tags": [], "time": "2012-01-17T19:20:37Z", "count": 16, "creator": "Chris_Beall@prodigy.net"}, {"text": "Chris, the most common reason for non-forced reloads are scripts running location.reload() and such, not users using the reload button.... and pages do it in all sorts of situations when they really mean #1.\n\nI agree that the current situation is suboptimal; I'm just not sure how to actually make it better as opposed to trading off one set of problems (primarily biting website authors) for another (primarily biting users).", "creation_time": "2012-01-17T19:29:28Z", "raw_text": "Chris, the most common reason for non-forced reloads are scripts running location.reload() and such, not users using the reload button.... and pages do it in all sorts of situations when they really mean #1.\n\nI agree that the current situation is suboptimal; I'm just not sure how to actually make it better as opposed to trading off one set of problems (primarily biting website authors) for another (primarily biting users).", "id": 5986214, "bug_id": 654072, "count": 17, "creator": "bzbarsky@mit.edu", "tags": [], "author": "bzbarsky@mit.edu", "is_private": false, "time": "2012-01-17T19:29:28Z", "attachment_id": null}, {"author": "wowmotty@gmail.com", "bug_id": 654072, "tags": [], "count": 18, "creator": "wowmotty@gmail.com", "text": "I'm disappointed that this hasn't been changed to match the behavior of every other browser.\n\nMaybe I'm not seeing the big picture here, but how is this issue biting the users? The button itself says \"reload the current page\" not \"refresh the current page\". When would the user want to refresh a page? Why not make the form reset button do this? I guess we have to assume there are users with many different levels of experience, but I think they would be even more confused when the experience isn't consistent across different browsers.\n\nPlease don't make Firefox into the IE6 of browsers.", "creation_time": "2012-01-17T19:46:29Z", "raw_text": "I'm disappointed that this hasn't been changed to match the behavior of every other browser.\n\nMaybe I'm not seeing the big picture here, but how is this issue biting the users? The button itself says \"reload the current page\" not \"refresh the current page\". When would the user want to refresh a page? Why not make the form reset button do this? I guess we have to assume there are users with many different levels of experience, but I think they would be even more confused when the experience isn't consistent across different browsers.\n\nPlease don't make Firefox into the IE6 of browsers.", "id": 5986284, "attachment_id": null, "time": "2012-01-17T19:46:29Z", "is_private": false}, {"attachment_id": null, "time": "2012-01-17T19:52:55Z", "is_private": false, "author": "bzbarsky@mit.edu", "count": 19, "creator": "bzbarsky@mit.edu", "tags": [], "bug_id": 654072, "creation_time": "2012-01-17T19:52:55Z", "text": "Comment 16 suggests not restoring form state at all.  How would that bite users?  Take a guess....", "id": 5986313, "raw_text": "Comment 16 suggests not restoring form state at all.  How would that bite users?  Take a guess...."}, {"attachment_id": null, "author": "bzbarsky@mit.edu", "id": 5986322, "raw_text": "And for the rest, see comment 14.  Maybe pages are now expecting the other behavior and coding to it explicitly, in which case I agree that we should just stop saving/restoring disabled state.\n\nJonas, thoughts?", "is_private": false, "creation_time": "2012-01-17T19:55:10Z", "text": "And for the rest, see comment 14.  Maybe pages are now expecting the other behavior and coding to it explicitly, in which case I agree that we should just stop saving/restoring disabled state.\n\nJonas, thoughts?", "count": 20, "time": "2012-01-17T19:55:10Z", "creator": "bzbarsky@mit.edu", "tags": [], "bug_id": 654072}, {"is_private": false, "creation_time": "2012-01-18T22:37:37Z", "text": "(In reply to Boris Zbarsky (:bz) from comment #19)\n> Comment 16 suggests not restoring form state at all.  How would that bite\n> users?  Take a guess....\n\nBoris,\n\nMy guesser must not be working well.  How WOULD it impact users?  More specifically, how would it impact them if non-forced reload worked as it does on other browsers, but Back (i.e. the history) worked as it does today.  I see no logical reason for these things to be functionally linked, as they apparently are today.\n\nI noticed something else.  I have browser.formfill.enable set to false.  It's one of the first things I do when setting up any browser.  I know many people like that capability, but I'm not one of them.  So why is MY checkbox state being 'preserved' when I reload a page?  (Note that this is a logical trap; if we were to agree that formfill.enable should alter the behavior of a non-forced reload, we'd have added even more complexity for the developer (or more confusion on the part of a user who encounters a page that didn't account for the added complexity...))\n\nWhich raises an OT question: Can a JavaScript developer dynamically determine the state of FIrefox options such as browser.formfill.enable?", "id": 5990328, "raw_text": "(In reply to Boris Zbarsky (:bz) from comment #19)\n> Comment 16 suggests not restoring form state at all.  How would that bite\n> users?  Take a guess....\n\nBoris,\n\nMy guesser must not be working well.  How WOULD it impact users?  More specifically, how would it impact them if non-forced reload worked as it does on other browsers, but Back (i.e. the history) worked as it does today.  I see no logical reason for these things to be functionally linked, as they apparently are today.\n\nI noticed something else.  I have browser.formfill.enable set to false.  It's one of the first things I do when setting up any browser.  I know many people like that capability, but I'm not one of them.  So why is MY checkbox state being 'preserved' when I reload a page?  (Note that this is a logical trap; if we were to agree that formfill.enable should alter the behavior of a non-forced reload, we'd have added even more complexity for the developer (or more confusion on the part of a user who encounters a page that didn't account for the added complexity...))\n\nWhich raises an OT question: Can a JavaScript developer dynamically determine the state of FIrefox options such as browser.formfill.enable?", "count": 21, "tags": [], "creator": "Chris_Beall@prodigy.net", "time": "2012-01-18T22:37:37Z", "bug_id": 654072, "attachment_id": null, "author": "Chris_Beall@prodigy.net"}, {"bug_id": 654072, "tags": [], "creator": "bzbarsky@mit.edu", "count": 22, "text": "> More specifically, how would it impact them if non-forced reload worked as it does on\n> other browsers,\n\nOther browsers preserve various bits of form control state on reload in various cases, last I tested (as well as scroll position and such).  They're not consistent with each other or with us, of course.  Also, web pages make reload() calls based on browser sniffing....\n\n> So why is MY checkbox state being 'preserved' when I reload a page? \n\nBecause that's not autofill.  Autofill is filling in controls when the page first loads based on previous values you put into them some other time when you visited the page.", "creation_time": "2012-01-19T01:35:08Z", "raw_text": "> More specifically, how would it impact them if non-forced reload worked as it does on\n> other browsers,\n\nOther browsers preserve various bits of form control state on reload in various cases, last I tested (as well as scroll position and such).  They're not consistent with each other or with us, of course.  Also, web pages make reload() calls based on browser sniffing....\n\n> So why is MY checkbox state being 'preserved' when I reload a page? \n\nBecause that's not autofill.  Autofill is filling in controls when the page first loads based on previous values you put into them some other time when you visited the page.", "id": 5990921, "author": "bzbarsky@mit.edu", "time": "2012-01-19T01:35:08Z", "is_private": false, "attachment_id": null}, {"time": "2012-08-05T21:35:14Z", "is_private": false, "attachment_id": null, "bug_id": 654072, "count": 23, "tags": [], "creator": "david@blue-labs.org", "raw_text": "firefox is \"preserving\" disabled=\"disabled\" on inputs that _were not disabled_ prior to reload\n\n<input id=\"foo1\">\n<input id=\"foo2\" disabled=\"disabled\">\n<input id=\"foo3\">\n\nnote, i have not determined the order of how this happens, so don't infer.  the order probably has a derterministic affect, but i haven't figured it out yet.\n\non reload, this happens:\n\n<input id=\"foo1\">\n<input id=\"foo2\" disabled=\"disabled\">\n<input id=\"foo3\" disabled=\"disabled\">\n\nwhy is firefox applying attributes to elements that didn't previously have them?\n\nreference page:  https://dragonstone-mill.com/pcf.html", "id": 6533044, "text": "firefox is \"preserving\" disabled=\"disabled\" on inputs that _were not disabled_ prior to reload\n\n<input id=\"foo1\">\n<input id=\"foo2\" disabled=\"disabled\">\n<input id=\"foo3\">\n\nnote, i have not determined the order of how this happens, so don't infer.  the order probably has a derterministic affect, but i haven't figured it out yet.\n\non reload, this happens:\n\n<input id=\"foo1\">\n<input id=\"foo2\" disabled=\"disabled\">\n<input id=\"foo3\" disabled=\"disabled\">\n\nwhy is firefox applying attributes to elements that didn't previously have them?\n\nreference page:  https://dragonstone-mill.com/pcf.html", "creation_time": "2012-08-05T21:35:14Z", "author": "david@blue-labs.org"}, {"attachment_id": null, "author": "david@blue-labs.org", "is_private": false, "creation_time": "2012-08-05T21:36:33Z", "text": "(use firebug on my page and you'll see plenty of debug about wrongly applied disabled attribute)", "id": 6533045, "raw_text": "(use firebug on my page and you'll see plenty of debug about wrongly applied disabled attribute)", "time": "2012-08-05T21:36:33Z", "creator": "david@blue-labs.org", "tags": [], "count": 24, "bug_id": 654072}, {"is_private": false, "time": "2012-08-05T21:53:34Z", "attachment_id": null, "text": "That sounds like a different issue.  You may want to create a minimal test case and open a new ticket.", "creation_time": "2012-08-05T21:53:34Z", "raw_text": "That sounds like a different issue.  You may want to create a minimal test case and open a new ticket.", "id": 6533062, "bug_id": 654072, "tags": [], "creator": "glenn@zewt.org", "count": 25, "author": "glenn@zewt.org"}, {"attachment_id": null, "author": "glenn@zewt.org", "is_private": false, "creation_time": "2012-08-05T22:11:38Z", "text": "(In reply to Chris Beall from comment #21)\n> My guesser must not be working well.  How WOULD it impact users?  More\n> specifically, how would it impact them if non-forced reload worked as it\n> does on other browsers, but Back (i.e. the history) worked as it does today.\n\nBelatedly, I find it annoying in other browsers when I reload a form with data in it, and all of the fields get cleared on me.\n\nOf course, if I have significant data then I always make a copy before refreshing even in Firefox, since it doesn't actually always work.  Since it's a dangerous, brittle feature--it's easy to get used to it, and then lose data when it doesn't happen--I think it should never have been introduced in the first place, but removing it now would probably cause riots.\n\n(In reply to Boris Zbarsky (:bz) [In and out Aug 1 - 10, out Aug 11-20] from comment #14)\n> You can't win there: disabled state is often set based on information the\n> user entered (e.g. selecting one of a set of radios can enable/disable other\n> controls), so restoring values but not disabled state will fix some pages\n> but break others....\n\nThat's true, but this is a game of whack-a-mole that you can't win: sites often do many other things on user entry that can't possibly be restored, such as hiding and displaying elements and all kinds of style/class changes.  (Of course, this stuff is far more common today then it was when this feature was first introduced.)\n\nIt might simply break too many sites to be doable, but I really think this should only preserve direct user input, and leave it to sites to apply other changes during onload.", "id": 6533074, "raw_text": "(In reply to Chris Beall from comment #21)\n> My guesser must not be working well.  How WOULD it impact users?  More\n> specifically, how would it impact them if non-forced reload worked as it\n> does on other browsers, but Back (i.e. the history) worked as it does today.\n\nBelatedly, I find it annoying in other browsers when I reload a form with data in it, and all of the fields get cleared on me.\n\nOf course, if I have significant data then I always make a copy before refreshing even in Firefox, since it doesn't actually always work.  Since it's a dangerous, brittle feature--it's easy to get used to it, and then lose data when it doesn't happen--I think it should never have been introduced in the first place, but removing it now would probably cause riots.\n\n(In reply to Boris Zbarsky (:bz) [In and out Aug 1 - 10, out Aug 11-20] from comment #14)\n> You can't win there: disabled state is often set based on information the\n> user entered (e.g. selecting one of a set of radios can enable/disable other\n> controls), so restoring values but not disabled state will fix some pages\n> but break others....\n\nThat's true, but this is a game of whack-a-mole that you can't win: sites often do many other things on user entry that can't possibly be restored, such as hiding and displaying elements and all kinds of style/class changes.  (Of course, this stuff is far more common today then it was when this feature was first introduced.)\n\nIt might simply break too many sites to be doable, but I really think this should only preserve direct user input, and leave it to sites to apply other changes during onload.", "tags": [], "count": 26, "creator": "glenn@zewt.org", "time": "2012-08-05T22:11:38Z", "bug_id": 654072}, {"time": "2012-11-22T14:07:52Z", "is_private": false, "attachment_id": null, "creator": "bugzilla@mversen.de", "count": 27, "tags": [], "bug_id": 654072, "creation_time": "2012-11-22T14:07:52Z", "text": "*** Bug 681318 has been marked as a duplicate of this bug. ***", "id": 6845413, "raw_text": "", "author": "bugzilla@mversen.de"}, {"attachment_id": null, "time": "2013-11-08T13:41:51Z", "is_private": false, "author": "pavel.horal@orchitech.cz", "tags": [], "count": 28, "creator": "pavel.horal@orchitech.cz", "bug_id": 654072, "id": 8058053, "raw_text": "If you persist anything which is not directly changeable by the user, it will probably break the page:\n\n * If you refresh a page and a text field value is prefilled, user can change the value and carry on.\n * If you refresh a page and a text field is disabled, user can not do anything about it...\n\n> It might simply break too many sites to be doable...\n\nDuring my web developer and web user lifetime I did not come across any site which might rely on this feature (but I understand this is kind of subjective view).", "creation_time": "2013-11-08T13:41:51Z", "text": "If you persist anything which is not directly changeable by the user, it will probably break the page:\n\n * If you refresh a page and a text field value is prefilled, user can change the value and carry on.\n * If you refresh a page and a text field is disabled, user can not do anything about it...\n\n> It might simply break too many sites to be doable...\n\nDuring my web developer and web user lifetime I did not come across any site which might rely on this feature (but I understand this is kind of subjective view)."}, {"is_private": false, "time": "2013-11-08T20:23:05Z", "attachment_id": null, "id": 8060095, "raw_text": "I think what Pavel Horal said makes a lot of sense. One thing is filling text boxes, a whole other thing is disabling fields. The other problem is that no other browser exhibits this behavior, only Firefox.", "creation_time": "2013-11-08T20:23:05Z", "text": "I think what Pavel Horal said makes a lot of sense. One thing is filling text boxes, a whole other thing is disabling fields. The other problem is that no other browser exhibits this behavior, only Firefox.", "count": 29, "tags": [], "creator": "mrzephy@gmail.com", "bug_id": 654072, "author": "mrzephy@gmail.com"}, {"is_private": false, "time": "2014-09-04T00:10:33Z", "attachment_id": null, "raw_text": "We've encountered this misfeature over at Bootstrap (see https://github.com/twbs/bootstrap/issues/793 ) and ended up having to add a warning box to our docs specifically covering this ( http://getbootstrap.com/javascript/#buttons-usage ).\nI am disappointed that Firefox required us to do that.", "id": 9267709, "text": "We've encountered this misfeature over at Bootstrap (see https://github.com/twbs/bootstrap/issues/793 ) and ended up having to add a warning box to our docs specifically covering this ( http://getbootstrap.com/javascript/#buttons-usage ).\nI am disappointed that Firefox required us to do that.", "creation_time": "2014-09-04T00:10:33Z", "bug_id": 654072, "count": 30, "creator": "mozilla@chrisrebert.com", "tags": [], "author": "mozilla@chrisrebert.com"}, {"time": "2014-09-05T08:32:02Z", "is_private": false, "attachment_id": null, "bug_id": 654072, "tags": [], "count": 31, "creator": "mozilla@chrisrebert.com", "raw_text": "This weirdness is now documented on MDN:\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input$compare?to=661055&from=641697\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/button$compare?to=661057&from=660021", "id": 9274548, "text": "This weirdness is now documented on MDN:\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input$compare?to=661055&from=641697\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/button$compare?to=661057&from=660021", "creation_time": "2014-09-05T08:32:02Z", "author": "mozilla@chrisrebert.com"}, {"creation_time": "2015-11-16T10:21:01Z", "text": "I'll add my 2 cents:  This is a BUG, not a feature.  It should be fixed.", "id": 10935020, "raw_text": "I'll add my 2 cents:  This is a BUG, not a feature.  It should be fixed.", "creator": "f2424880@rmqkr.net", "tags": [], "count": 32, "bug_id": 654072, "author": "f2424880@rmqkr.net", "is_private": false, "time": "2015-11-16T10:21:01Z", "attachment_id": null}, {"count": 33, "creator": "ctwildgoose@gmail.com", "tags": [], "bug_id": 654072, "creation_time": "2016-04-27T01:47:10Z", "text": "There are lots of good points for either side of this debate but as it requires a work-around by the developer to fix it and not wanting the button to re-enable would seem to be an edge case I would label this as undesired behaviour and would also say it should be fixed.\n\nAlso, Bootstrap's suggestion of using autocomplete=\"off\" as a work-around does not appear to work for me.", "id": 11359552, "raw_text": "There are lots of good points for either side of this debate but as it requires a work-around by the developer to fix it and not wanting the button to re-enable would seem to be an edge case I would label this as undesired behaviour and would also say it should be fixed.\n\nAlso, Bootstrap's suggestion of using autocomplete=\"off\" as a work-around does not appear to work for me.", "author": "ctwildgoose@gmail.com", "time": "2016-04-27T01:47:10Z", "is_private": false, "attachment_id": null}, {"raw_text": "This is my preferred solution:\n\n1. Don't restore states of form fields that can't be changed by user directly (e.g. disabled).\n\n2. Restore later (e.g. after DOMContentLoaded), and fire \"change\" events on restored fields to simulate user inputs, so that the page can responed to the restoration and maintain the consistancy of the page. This should address https://bugzilla.mozilla.org/show_bug.cgi?id=654072#c14 . The tricky thing is that some pages may expect users to fill form fields in perticular order, e.g. reveal more fields according to previous inputs. Restoring in document order is probably OK for most cases.\n\n3. Provide a way to opt-out form fields restoration. May be something like history.scrollRestoration=\"manual\" ( https://developer.mozilla.org/zh-CN/docs/Web/API/History ). This needs a spec update.", "id": 11537383, "text": "This is my preferred solution:\n\n1. Don't restore states of form fields that can't be changed by user directly (e.g. disabled).\n\n2. Restore later (e.g. after DOMContentLoaded), and fire \"change\" events on restored fields to simulate user inputs, so that the page can responed to the restoration and maintain the consistancy of the page. This should address https://bugzilla.mozilla.org/show_bug.cgi?id=654072#c14 . The tricky thing is that some pages may expect users to fill form fields in perticular order, e.g. reveal more fields according to previous inputs. Restoring in document order is probably OK for most cases.\n\n3. Provide a way to opt-out form fields restoration. May be something like history.scrollRestoration=\"manual\" ( https://developer.mozilla.org/zh-CN/docs/Web/API/History ). This needs a spec update.", "creation_time": "2016-07-11T03:10:36Z", "bug_id": 654072, "tags": [], "count": 34, "creator": "duanyao.ustc@gmail.com", "author": "duanyao.ustc@gmail.com", "is_private": false, "time": "2016-07-11T03:10:36Z", "attachment_id": null}, {"author": "rjesup@jesup.org", "attachment_id": null, "raw_text": "", "id": 11876946, "text": "*** Bug 1299809 has been marked as a duplicate of this bug. ***", "creation_time": "2016-11-21T20:37:38Z", "is_private": false, "bug_id": 654072, "creator": "rjesup@jesup.org", "time": "2016-11-21T20:37:38Z", "count": 35, "tags": []}, {"tags": [], "count": 36, "creator": "rjesup@jesup.org", "bug_id": 654072, "id": 11892054, "raw_text": "", "creation_time": "2016-11-28T18:50:47Z", "text": "*** Bug 1320419 has been marked as a duplicate of this bug. ***", "author": "rjesup@jesup.org", "time": "2016-11-28T18:50:47Z", "is_private": false, "attachment_id": null}, {"bug_id": 654072, "creator": "david.mark@cinsoft.biz", "time": "2017-01-14T10:33:27Z", "count": 37, "tags": [], "text": "(In reply to Duan Yao from comment #34)\n> This is my preferred solution:\n> \n> 1. Don't restore states of form fields that can't be changed by user\n> directly (e.g. disabled).\n\nExactly. It was always a bad idea to restore disabled states on reload (or return visits). Restore user input only. Any states that change in response to user input are to be restored by the script, which will have every chance to do that as on load. Meddling by the browser in this area is just plain misguided.\n\n> \n> 2. Restore later (e.g. after DOMContentLoaded), and fire \"change\" events on\n> restored fields to simulate user inputs, so that the page can responed to\n> the restoration and maintain the consistancy of the page.\n\nNo. This is just more \"magical\" meddling by the browser. Any script that responds to \"change\" events by changing disabled states should always do the same on load (or DOMContentLoaded) as there's always a chance that user data is persisted. This is not a new concept for browsers and they should not try to force the issue by firing bogus change events, which are strictly for indicating *user* changes as they occur (not when they are persisted between page loads).\n\n> This should\n> address https://bugzilla.mozilla.org/show_bug.cgi?id=654072#c14 . The tricky\n> thing is that some pages may expect users to fill form fields in perticular\n> order, e.g. reveal more fields according to previous inputs. Restoring in\n> document order is probably OK for most cases.\n\nThere's nothing tricky about it and never has been. Scripts that hide or show elements in response to user input are responsible for synchronizing these states on load, just as when they disable elements in response to same. There's simply nothing for the browser to solve here, certainly not after two decades.\n\n> \n> 3. Provide a way to opt-out form fields restoration. May be something like\n> history.scrollRestoration=\"manual\" (\n> https://developer.mozilla.org/zh-CN/docs/Web/API/History ). This needs a\n> spec update.\n\nAs far as persisting user *input* on revisiting a page? Fine, but realize that most users will never turn that off. Imagine the majority will never even find such a setting.\n\nIn any event, a properly designed script should never run into these issues as it would simply override all such meddling on load (or DOMContentLoaded). Of course, that depends on when such meddling occurs. Please do everyone a favor and make that a moot point.\n\nRealize that no other browsers have such issues and properly designed scripts have managed for two decades without help in this area. Trying to prop up improperly designed scripts is just going to create more confusion and possibly trip up scripts that are trying to do their job properly.\n\nHTH", "creation_time": "2017-01-14T10:33:27Z", "is_private": false, "raw_text": "(In reply to Duan Yao from comment #34)\n> This is my preferred solution:\n> \n> 1. Don't restore states of form fields that can't be changed by user\n> directly (e.g. disabled).\n\nExactly. It was always a bad idea to restore disabled states on reload (or return visits). Restore user input only. Any states that change in response to user input are to be restored by the script, which will have every chance to do that as on load. Meddling by the browser in this area is just plain misguided.\n\n> \n> 2. Restore later (e.g. after DOMContentLoaded), and fire \"change\" events on\n> restored fields to simulate user inputs, so that the page can responed to\n> the restoration and maintain the consistancy of the page.\n\nNo. This is just more \"magical\" meddling by the browser. Any script that responds to \"change\" events by changing disabled states should always do the same on load (or DOMContentLoaded) as there's always a chance that user data is persisted. This is not a new concept for browsers and they should not try to force the issue by firing bogus change events, which are strictly for indicating *user* changes as they occur (not when they are persisted between page loads).\n\n> This should\n> address https://bugzilla.mozilla.org/show_bug.cgi?id=654072#c14 . The tricky\n> thing is that some pages may expect users to fill form fields in perticular\n> order, e.g. reveal more fields according to previous inputs. Restoring in\n> document order is probably OK for most cases.\n\nThere's nothing tricky about it and never has been. Scripts that hide or show elements in response to user input are responsible for synchronizing these states on load, just as when they disable elements in response to same. There's simply nothing for the browser to solve here, certainly not after two decades.\n\n> \n> 3. Provide a way to opt-out form fields restoration. May be something like\n> history.scrollRestoration=\"manual\" (\n> https://developer.mozilla.org/zh-CN/docs/Web/API/History ). This needs a\n> spec update.\n\nAs far as persisting user *input* on revisiting a page? Fine, but realize that most users will never turn that off. Imagine the majority will never even find such a setting.\n\nIn any event, a properly designed script should never run into these issues as it would simply override all such meddling on load (or DOMContentLoaded). Of course, that depends on when such meddling occurs. Please do everyone a favor and make that a moot point.\n\nRealize that no other browsers have such issues and properly designed scripts have managed for two decades without help in this area. Trying to prop up improperly designed scripts is just going to create more confusion and possibly trip up scripts that are trying to do their job properly.\n\nHTH", "id": 11982561, "author": "david.mark@cinsoft.biz", "attachment_id": null}, {"text": "This bug is the root cause of an issue I was having using Redmine. This bug caused the local form to be populated with out-of-date data from the cache, which upon submission would overwrite the correct data on the server! This caused several data quality issues for our Redmine site.\n\nThis was difficult to identify as the root cause. If this bug was fixed that would be really great.", "creation_time": "2017-06-13T20:30:47Z", "raw_text": "This bug is the root cause of an issue I was having using Redmine. This bug caused the local form to be populated with out-of-date data from the cache, which upon submission would overwrite the correct data on the server! This caused several data quality issues for our Redmine site.\n\nThis was difficult to identify as the root cause. If this bug was fixed that would be really great.", "id": 12395347, "bug_id": 654072, "tags": [], "count": 38, "creator": "bmbouter@gmail.com", "author": "bmbouter@gmail.com", "is_private": false, "time": "2017-06-13T20:30:47Z", "attachment_id": null}, {"bug_id": 654072, "count": 39, "tags": [], "creator": "dalley@redhat.com", "text": "I would also like to chime in - I work with bmbouter and have also been bitten by this issue on multiple occasions.  Essentially, if we have an issue open in a tab and it gets edited by someone else, and then we try to edit it ourselves (even after refreshing the page with F5), Firefox will attempt to use the local form state instead of the server-provided form state, thus unintentionally overwriting all the other person's changes when we save the issue.  This has caused us to accidentally put issues in the wrong state on multiple occasions.  \n\ne.g. someone changes the priority from Normal to Urgent, I edit the issue, it gets accidentally reverted back to Normal priority because Firefox is trying to use its own copy of the form state.  \n\nAs you can imagine, that is very problematic behavior.\n\n(In reply to Boris Zbarsky from comment #17)\n\n> I agree that the current situation is suboptimal; I'm just not sure how to\n> actually make it better as opposed to trading off one set of problems\n> (primarily biting website authors) for another (primarily biting users).\n\nAt least in our case, the problem is biting both users and website authors.  We reported the issue initially to our Redmine hosting company, who is now needing to write a Firefox-specific patch for the issue.\n\n(In reply to Glenn Maynard from comment #26)\n\n>  I really think this should only preserve direct user input, and leave it to sites to apply other changes during onload.\n\n+1", "creation_time": "2017-06-13T20:54:18Z", "raw_text": "I would also like to chime in - I work with bmbouter and have also been bitten by this issue on multiple occasions.  Essentially, if we have an issue open in a tab and it gets edited by someone else, and then we try to edit it ourselves (even after refreshing the page with F5), Firefox will attempt to use the local form state instead of the server-provided form state, thus unintentionally overwriting all the other person's changes when we save the issue.  This has caused us to accidentally put issues in the wrong state on multiple occasions.  \n\ne.g. someone changes the priority from Normal to Urgent, I edit the issue, it gets accidentally reverted back to Normal priority because Firefox is trying to use its own copy of the form state.  \n\nAs you can imagine, that is very problematic behavior.\n\n(In reply to Boris Zbarsky from comment #17)\n\n> I agree that the current situation is suboptimal; I'm just not sure how to\n> actually make it better as opposed to trading off one set of problems\n> (primarily biting website authors) for another (primarily biting users).\n\nAt least in our case, the problem is biting both users and website authors.  We reported the issue initially to our Redmine hosting company, who is now needing to write a Firefox-specific patch for the issue.\n\n(In reply to Glenn Maynard from comment #26)\n\n>  I really think this should only preserve direct user input, and leave it to sites to apply other changes during onload.\n\n+1", "id": 12395423, "author": "dalley@redhat.com", "time": "2017-06-13T20:54:18Z", "is_private": false, "attachment_id": null}, {"creation_time": "2017-06-14T03:54:13Z", "text": "(In reply to dalley from comment #39)\n> e.g. someone changes the priority from Normal to Urgent, I edit the issue,\n> it gets accidentally reverted back to Normal priority because Firefox is\n> trying to use its own copy of the form state.\n\nI think this issue with Redmine is more likely caused by https://bugzilla.mozilla.org/show_bug.cgi?id=1279253 where an unchanged select box not refreshed when F5 is pressed.", "id": 12396236, "raw_text": "(In reply to dalley from comment #39)\n> e.g. someone changes the priority from Normal to Urgent, I edit the issue,\n> it gets accidentally reverted back to Normal priority because Firefox is\n> trying to use its own copy of the form state.\n\nI think this issue with Redmine is more likely caused by https://bugzilla.mozilla.org/show_bug.cgi?id=1279253 where an unchanged select box not refreshed when F5 is pressed.", "creator": "jk@jkraemer.net", "count": 40, "tags": [], "bug_id": 654072, "author": "jk@jkraemer.net", "is_private": false, "time": "2017-06-14T03:54:13Z", "attachment_id": null}, {"author": "bzbarsky@mit.edu", "bug_id": 654072, "creator": "bzbarsky@mit.edu", "count": 41, "tags": [], "raw_text": "Yes, comment 38 and 39 are not related to this bug at all, because they're not dealing with restoration of disbled state.", "id": 12396237, "text": "Yes, comment 38 and 39 are not related to this bug at all, because they're not dealing with restoration of disbled state.", "creation_time": "2017-06-14T03:55:13Z", "attachment_id": null, "time": "2017-06-14T03:55:13Z", "is_private": false}, {"attachment_id": null, "time": "2017-06-14T14:49:27Z", "is_private": false, "author": "dalley@redhat.com", "tags": [], "count": 42, "creator": "dalley@redhat.com", "bug_id": 654072, "id": 12397692, "raw_text": "My apologies, that does seem likely.", "creation_time": "2017-06-14T14:49:27Z", "text": "My apologies, that does seem likely."}, {"bug_id": 654072, "creator": "samo.golez@outlook.com", "tags": [], "count": 43, "text": "Is this bug stil actual. After 7 years?", "creation_time": "2018-01-25T17:49:32Z", "raw_text": "Is this bug stil actual. After 7 years?", "id": 12995140, "author": "samo.golez@outlook.com", "time": "2018-01-25T17:49:32Z", "is_private": false, "attachment_id": null}, {"text": "aartmaat's test case confirmed in 58.0.1.", "is_private": false, "creation_time": "2018-02-06T09:22:35Z", "raw_text": "aartmaat's test case confirmed in 58.0.1.", "id": 13021049, "bug_id": 654072, "creator": "public@telcontar.net", "time": "2018-02-06T09:22:35Z", "count": 44, "tags": [], "author": "public@telcontar.net", "attachment_id": null}, {"time": "2018-05-08T12:56:48Z", "is_private": false, "attachment_id": null, "count": 45, "tags": [], "creator": "cyberjacob@gmail.com", "bug_id": 654072, "id": 13262235, "raw_text": "", "creation_time": "2018-05-08T12:56:48Z", "text": "*** Bug 1459865 has been marked as a duplicate of this bug. ***", "author": "cyberjacob@gmail.com"}, {"bug_id": 654072, "tags": [], "time": "2018-08-01T22:26:59Z", "count": 46, "creator": "iankurtsteiger@icloud.com", "text": "This problem is gone if you reload the page in 61.0.1 but if you click download then go back it's active.", "is_private": false, "creation_time": "2018-08-01T22:26:59Z", "raw_text": "This problem is gone if you reload the page in 61.0.1 but if you click download then go back it's active.", "id": 13517119, "author": "iankurtsteiger@icloud.com", "attachment_id": null}, {"author": "sergen-vas@yandex.ru", "creator": "sergen-vas@yandex.ru", "tags": [], "count": 47, "bug_id": 654072, "id": 14030716, "raw_text": "I notice strange behavior of `disabled` in FF 66.0.2.\nIf the button becomes enabled, its state is saved after refresh.\nDisabled state of button resets.", "creation_time": "2019-04-03T15:37:55Z", "text": "Created attachment 9055494\nbutton-disable-test.html\n\nI notice strange behavior of `disabled` in FF 66.0.2.\nIf the button becomes enabled, its state is saved after refresh.\nDisabled state of button resets.", "attachment_id": 9055494, "time": "2019-04-03T15:37:55Z", "is_private": false}, {"raw_text": "See bug 1547409. Moving webcompat whiteboard tags to project flags.", "id": 14086078, "text": "See bug 1547409. Moving webcompat whiteboard tags to project flags.", "creation_time": "2019-04-30T05:09:22Z", "bug_id": 654072, "creator": "bug-husbandry-bot@mozilla.bugs", "tags": [], "count": 48, "author": "bug-husbandry-bot@mozilla.bugs", "is_private": false, "time": "2019-04-30T05:09:22Z", "attachment_id": null}, {"text": "Created attachment 9220923\nEncoded meassages\n\n[Approval Request Comment]\nIf this is not a sec:{high,crit} bug, please state case for ESR consideration:\nUser impact if declined: \nFix Landed on Version:\nRisk to taking this patch (and alternatives if risky): \n\nSee https://wiki.mozilla.org/Release_Management/ESR_Landing_Process for more info.", "creation_time": "2021-05-08T01:27:18Z", "raw_text": "[Approval Request Comment]\nIf this is not a sec:{high,crit} bug, please state case for ESR consideration:\nUser impact if declined: \nFix Landed on Version:\nRisk to taking this patch (and alternatives if risky): \n\nSee https://wiki.mozilla.org/Release_Management/ESR_Landing_Process for more info.", "id": 15399491, "bug_id": 654072, "tags": ["spam"], "count": 49, "creator": "Midmas98@gmail.com", "author": "Midmas98@gmail.com", "is_private": false, "time": "2021-05-08T01:27:18Z", "attachment_id": 9220923}, {"attachment_id": null, "time": "2021-10-21T11:55:46Z", "is_private": false, "author": "seosnelnl@gmail.com", "bug_id": 654072, "tags": ["spam"], "creator": "seosnelnl@gmail.com", "count": 50, "raw_text": "Answer: This problem is gone if you reload the page in 61.0.1 but if you click download then go back it's active. [url=https://www.seo-snel.nl/javascript/]JavaScript[/url] I Reaction: I tried this but it would not help?", "id": 15623161, "text": "Answer: This problem is gone if you reload the page in 61.0.1 but if you click download then go back it's active. [url=https://www.seo-snel.nl/javascript/]JavaScript[/url] I Reaction: I tried this but it would not help?", "creation_time": "2021-10-21T11:55:46Z"}, {"attachment_id": null, "author": "seosnelnl@gmail.com", "is_private": false, "creation_time": "2021-10-21T11:57:21Z", "text": "Answer: This problem is gone if you reload the page in 61.0.1 but if you click download then go back it's active. https://www.seo-snel.nl/javascript/ Reaction: I tried this but it would not help?", "id": 15623163, "raw_text": "Answer: This problem is gone if you reload the page in 61.0.1 but if you click download then go back it's active. https://www.seo-snel.nl/javascript/ Reaction: I tried this but it would not help?", "creator": "seosnelnl@gmail.com", "time": "2021-10-21T11:57:21Z", "count": 51, "tags": ["spam"], "bug_id": 654072}, {"time": "2021-10-25T13:15:18Z", "is_private": false, "attachment_id": null, "bug_id": 654072, "count": 52, "tags": [], "creator": "holegary@gmail.com", "raw_text": "Wow, 11 years old. Just been bitten by this from a bug report from our users.\n\nThe auto-restoration of form fields basically BREAKS AJAX form submission flow - on reload the old form values will be restored. This can cause duplicate page submissions from users.\n\nGenerally any time you prevent the form from being submitted, Firefox will keep the old form values and restore on reload. There's nothing you can do about that, except add `autocomplete=off` to your form fields which sucks because it fixes this problem and breaks another useful feature.\n\nFirefox is the odd one out here. Chrome doesn't auto restore, nor does Safari. Why is Firefox having such an opinionated way of handling this that isn't even mentioned anywhere in the spec?\n\nWould be great to have more eyes on this.\n\n===\n\nExample code:\n```html\n<form method=\"POST\">\n\t<textarea name=\"test\"></textarea>\n\t<button name=\"submit\" value=\"submit\" type=\"submit\">\n\t\tSubmit\n\t</button>\n</form>\n\n<script>\n  document.querySelector('form').addEventListener('submit', function(e) {\n     e.preventDefault(); // Firefox doesn't care. It will still persist the form values.\n\n     // Handling the form by ajax. Firefox doesn't see this and will still keep old form data on reload.\n     fetch(e.target.action, { method: e.target.method, body: new FormData(e.target) });\n  });\n</script>\n```", "id": 15628272, "text": "Wow, 11 years old. Just been bitten by this from a bug report from our users.\n\nThe auto-restoration of form fields basically BREAKS AJAX form submission flow - on reload the old form values will be restored. This can cause duplicate page submissions from users.\n\nGenerally any time you prevent the form from being submitted, Firefox will keep the old form values and restore on reload. There's nothing you can do about that, except add `autocomplete=off` to your form fields which sucks because it fixes this problem and breaks another useful feature.\n\nFirefox is the odd one out here. Chrome doesn't auto restore, nor does Safari. Why is Firefox having such an opinionated way of handling this that isn't even mentioned anywhere in the spec?\n\nWould be great to have more eyes on this.\n\n===\n\nExample code:\n```html\n<form method=\"POST\">\n\t<textarea name=\"test\"></textarea>\n\t<button name=\"submit\" value=\"submit\" type=\"submit\">\n\t\tSubmit\n\t</button>\n</form>\n\n<script>\n  document.querySelector('form').addEventListener('submit', function(e) {\n     e.preventDefault(); // Firefox doesn't care. It will still persist the form values.\n\n     // Handling the form by ajax. Firefox doesn't see this and will still keep old form data on reload.\n     fetch(e.target.action, { method: e.target.method, body: new FormData(e.target) });\n  });\n</script>\n```", "creation_time": "2021-10-25T13:15:18Z", "author": "holegary@gmail.com"}, {"bug_id": 654072, "time": "2021-10-25T13:38:07Z", "tags": [], "count": 53, "creator": "gijskruitbosch+bugs@gmail.com", "raw_text": "", "id": 15628314, "text": "*** Bug 1688183 has been marked as a duplicate of this bug. ***", "creation_time": "2021-10-25T13:38:07Z", "is_private": false, "author": "gijskruitbosch+bugs@gmail.com", "attachment_id": null}, {"creation_time": "2021-10-25T13:41:14Z", "text": "Anne, is any of this specced these days? Clearly, 10 years ago it wasn't... (cf comment 6)\n\nAny alignment with other browsers probably needs some kind of spec. Also, my understanding is that chromium recently started adding a feature similar to bfcache, which I imagine will be related (but I'm not sure how they treat form fields in those circumstances).", "id": 15628318, "raw_text": "Anne, is any of this specced these days? Clearly, 10 years ago it wasn't... (cf comment 6)\n\nAny alignment with other browsers probably needs some kind of spec. Also, my understanding is that chromium recently started adding a feature similar to bfcache, which I imagine will be related (but I'm not sure how they treat form fields in those circumstances).", "tags": [], "count": 54, "creator": "gijskruitbosch+bugs@gmail.com", "bug_id": 654072, "author": "gijskruitbosch+bugs@gmail.com", "is_private": false, "time": "2021-10-25T13:41:14Z", "attachment_id": null}, {"attachment_id": null, "author": "annevk@annevk.nl", "is_private": false, "creation_time": "2021-10-25T14:58:10Z", "text": "There is nothing concrete, but your ping (and that of holegary) was rather timely. https://github.com/whatwg/html/issues/6853 has discussion about this behavior and Chrome is also making changes in this area. I asked Chrome if they looked at disabled state and whether there should be an event for web developers.\n\nEdit: discussion moved to https://github.com/whatwg/html/issues/7292.", "id": 15628460, "raw_text": "There is nothing concrete, but your ping (and that of holegary) was rather timely. https://github.com/whatwg/html/issues/6853 has discussion about this behavior and Chrome is also making changes in this area. I asked Chrome if they looked at disabled state and whether there should be an event for web developers.\n\nEdit: discussion moved to https://github.com/whatwg/html/issues/7292.", "count": 55, "tags": [], "time": "2021-10-25T14:58:10Z", "creator": "annevk@annevk.nl", "bug_id": 654072}, {"attachment_id": null, "time": "2021-11-08T20:01:25Z", "is_private": false, "author": "gijskruitbosch+bugs@gmail.com", "tags": [], "count": 56, "creator": "gijskruitbosch+bugs@gmail.com", "bug_id": 654072, "id": 15648411, "raw_text": "", "creation_time": "2021-11-08T20:01:25Z", "text": "*** Bug 1739978 has been marked as a duplicate of this bug. ***"}]}}, "comments": {}}