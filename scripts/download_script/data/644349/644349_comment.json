{"bugs": {"644349": {"comments": [{"id": 5363894, "author": "bill.mccloskey@gmail.com", "is_private": false, "bug_id": 644349, "tags": [], "creation_time": "2011-03-23T21:37:47Z", "attachment_id": null, "time": "2011-03-23T21:37:47Z", "count": 0, "text": "I ran into a problem with JS_DeepFreezeObject in bug 569422. The problem is that the testDeepFreeze_deep jsapi-test overflows the stack limit. The problem was triggered by my patch because it adds a GC point inside JS_DeepFreezeObject, and the GC asserts that we haven't overflowed the stack limit. As a quick fix, I changed the test to freeze a smaller tree.\n\nI talked this over with Jeff and we're a bit unsure how to address it. I would like to add an assertion to JS_DeepFreezeObject to ensure that you don't pass it anything too big. But I don't know what this function is used for and whether this is really safe.\n\nIgor, do you have any advice?", "raw_text": "I ran into a problem with JS_DeepFreezeObject in bug 569422. The problem is that the testDeepFreeze_deep jsapi-test overflows the stack limit. The problem was triggered by my patch because it adds a GC point inside JS_DeepFreezeObject, and the GC asserts that we haven't overflowed the stack limit. As a quick fix, I changed the test to freeze a smaller tree.\n\nI talked this over with Jeff and we're a bit unsure how to address it. I would like to add an assertion to JS_DeepFreezeObject to ensure that you don't pass it anything too big. But I don't know what this function is used for and whether this is really safe.\n\nIgor, do you have any advice?", "creator": "bill.mccloskey@gmail.com"}, {"count": 1, "time": "2011-03-23T22:16:26Z", "author": "jwalden@mit.edu", "is_private": false, "id": 5364073, "creator": "jwalden@mit.edu", "raw_text": "I'm inclined to say we should remove JS_DeepFreezeObject, or make it use a work list, or something.  Freezing object graphs has bad corner cases like over-deep recursion (how deep is too deep? stack limit? &c.), cycles in the graph, and more.  The policies for how these should be handled seem like things the JSAPI client should decide for himself.  So I think the best choice is to remove JS_DeepFreezeObject and instead have the user write the loop-over-properties-and-recur code.", "attachment_id": null, "creation_time": "2011-03-23T22:16:26Z", "tags": [], "text": "I'm inclined to say we should remove JS_DeepFreezeObject, or make it use a work list, or something.  Freezing object graphs has bad corner cases like over-deep recursion (how deep is too deep? stack limit? &c.), cycles in the graph, and more.  The policies for how these should be handled seem like things the JSAPI client should decide for himself.  So I think the best choice is to remove JS_DeepFreezeObject and instead have the user write the loop-over-properties-and-recur code.", "bug_id": 644349}, {"creator": "igor@mir2.org", "raw_text": "As a rule any function that can trigger recursion must check for the stack size using JS_CHECK_RECURSION macro. So we should either add JS_CHECK_RECURSION checks or implement a version of JS_DeepFreezeObject that avoids recursion.", "text": "As a rule any function that can trigger recursion must check for the stack size using JS_CHECK_RECURSION macro. So we should either add JS_CHECK_RECURSION checks or implement a version of JS_DeepFreezeObject that avoids recursion.", "count": 2, "time": "2011-03-27T07:55:56Z", "attachment_id": null, "tags": [], "creation_time": "2011-03-27T07:55:56Z", "bug_id": 644349, "author": "igor@mir2.org", "is_private": false, "id": 5372565}, {"is_private": false, "time": "2012-10-18T16:58:20Z", "author": "brendan@mozilla.org", "count": 3, "id": 6742508, "tags": [], "creation_time": "2012-10-18T16:58:20Z", "attachment_id": null, "raw_text": "Easy to fix per comment 2.\n\n/be", "creator": "brendan@mozilla.org", "bug_id": 644349, "text": "Easy to fix per comment 2.\n\n/be"}]}}, "comments": {}}