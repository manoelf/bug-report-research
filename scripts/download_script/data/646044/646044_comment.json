{"bugs": {"646044": {"comments": [{"attachment_id": null, "creator": "igor@mir2.org", "author": "igor@mir2.org", "text": "Currently ContextAllocPolicy uses JSContext::(malloc|realloc|free) to implement the memory allocation functions. Many if not all of the users of the policy allocate temporary memory that is released when the corresponding native method returns. As such there is no GC pressure that can increase or the memory cannot be released by the GC on the background thread. For such classes we should provide ReportedAllocPolicy that uses js_(malloc|realloc|free) and explicitly reports the OOM. For the rest of the cases if any we should provide GCPressureAllocPolicy.", "count": 0, "is_private": false, "tags": [], "raw_text": "Currently ContextAllocPolicy uses JSContext::(malloc|realloc|free) to implement the memory allocation functions. Many if not all of the users of the policy allocate temporary memory that is released when the corresponding native method returns. As such there is no GC pressure that can increase or the memory cannot be released by the GC on the background thread. For such classes we should provide ReportedAllocPolicy that uses js_(malloc|realloc|free) and explicitly reports the OOM. For the rest of the cases if any we should provide GCPressureAllocPolicy.", "creation_time": "2011-03-29T13:57:37Z", "bug_id": 646044, "id": 5377317, "time": "2011-03-29T13:57:37Z"}, {"text": "Makes sense", "count": 1, "author": "mail@lukewagner.name", "creator": "mail@lukewagner.name", "attachment_id": null, "time": "2011-03-29T17:12:07Z", "id": 5377892, "bug_id": 646044, "creation_time": "2011-03-29T17:12:07Z", "raw_text": "Makes sense", "tags": [], "is_private": false}, {"time": "2011-03-29T20:55:15Z", "id": 5378551, "raw_text": "After checking all our code I have not found any needs for GCPressureAllocPolycy. That is, all users of ContextAllocPolicy are of temporary nature. Thus for the fix it is sufficient to implement ContextAllocPolicy in terms of js_(malloc|realloc|free).\n\nThis also suggest to rename JSContext::(malloc|realloc|free) into JSContext::(malloc|realloc|free)ForGC and add allocations functions like js_malloc(JSContext *cx) that would do the error reporting. But this is for another bug.", "creation_time": "2011-03-29T20:55:15Z", "bug_id": 646044, "tags": [], "is_private": false, "text": "After checking all our code I have not found any needs for GCPressureAllocPolycy. That is, all users of ContextAllocPolicy are of temporary nature. Thus for the fix it is sufficient to implement ContextAllocPolicy in terms of js_(malloc|realloc|free).\n\nThis also suggest to rename JSContext::(malloc|realloc|free) into JSContext::(malloc|realloc|free)ForGC and add allocations functions like js_malloc(JSContext *cx) that would do the error reporting. But this is for another bug.", "count": 2, "author": "igor@mir2.org", "creator": "igor@mir2.org", "attachment_id": null}, {"creator": "igor@mir2.org", "attachment_id": 522881, "text": "Created attachment 522881\nv1\n\nThe patch removes GC pressure accounting from ContextAllocPolicy.", "count": 3, "author": "igor@mir2.org", "raw_text": "The patch removes GC pressure accounting from ContextAllocPolicy.", "creation_time": "2011-03-30T00:14:06Z", "bug_id": 646044, "tags": [], "is_private": false, "time": "2011-03-30T00:14:06Z", "id": 5379177}, {"time": "2011-03-31T22:52:51Z", "id": 5384897, "is_private": false, "creation_time": "2011-03-31T22:52:51Z", "bug_id": 646044, "raw_text": "So, as you might've seen on the mailing list, Paul just landed a bunch of allocation interface changes.  Your changes here seem to defy the current three-level classification scheme (http://hg.mozilla.org/tracemonkey/file/bd821ea0ad41/js/src/jsutil.h#l262): what we have here is an allocation policy where we want reporting but not bookkeeping.  Given that JSContext::malloc_ does reporting *and* bookkeeping, it seems that, at least, your patch should rename ContextAllocPolicy (to TempAllocPolicy, or something) since the name implies we're just calling cx->malloc_.\n\nGoing further, and this might be too weird, we could introduce a 4th set of malloc_/free_/etc functions that capture this \"temporary\" allocation strategy (reported, no bookkeeping).  One wacky idea is to add:\n\n  JSRuntime::malloc_(JSContext *cx, size_t bytes);\n  ... etc\n\nwhich does no bookkeeping (like the current JSRuntime::malloc_) but does report errors (following the convention that functions that take a JSContext* as the first arg report errors).  What say you?", "tags": [], "author": "mail@lukewagner.name", "text": "So, as you might've seen on the mailing list, Paul just landed a bunch of allocation interface changes.  Your changes here seem to defy the current three-level classification scheme (http://hg.mozilla.org/tracemonkey/file/bd821ea0ad41/js/src/jsutil.h#l262): what we have here is an allocation policy where we want reporting but not bookkeeping.  Given that JSContext::malloc_ does reporting *and* bookkeeping, it seems that, at least, your patch should rename ContextAllocPolicy (to TempAllocPolicy, or something) since the name implies we're just calling cx->malloc_.\n\nGoing further, and this might be too weird, we could introduce a 4th set of malloc_/free_/etc functions that capture this \"temporary\" allocation strategy (reported, no bookkeeping).  One wacky idea is to add:\n\n  JSRuntime::malloc_(JSContext *cx, size_t bytes);\n  ... etc\n\nwhich does no bookkeeping (like the current JSRuntime::malloc_) but does report errors (following the convention that functions that take a JSContext* as the first arg report errors).  What say you?", "count": 4, "attachment_id": null, "creator": "mail@lukewagner.name"}, {"attachment_id": 524254, "is_private": false, "creator": "igor@mir2.org", "tags": [], "raw_text": "The new version is updated for the recent allocation changes. Compared with the previous version the patch waits for background free to finish and retry the allocation before reporting OOM. I will use this for the bug 647103 to provide a temporary allocator.", "bug_id": 646044, "creation_time": "2011-04-06T20:50:30Z", "id": 5393124, "author": "igor@mir2.org", "time": "2011-04-06T20:50:30Z", "count": 5, "text": "Created attachment 524254\nv2\n\nThe new version is updated for the recent allocation changes. Compared with the previous version the patch waits for background free to finish and retry the allocation before reporting OOM. I will use this for the bug 647103 to provide a temporary allocator."}, {"author": "mail@lukewagner.name", "count": 6, "text": "Why make a new jsalloc.h/.cpp instead of just using jsutil.h/.cpp where all the existing malloc_ and friends live?\n\nAlso, the name \"ContextAllocPolicy\" and \"SystemAllocPolicy\" seem more and more out of date with all the fresh new names that have clear semantics attached.  Are you planning to rename ContextAllocPolicy/SystemAllocPolicy with bug 647103?", "attachment_id": null, "creator": "mail@lukewagner.name", "id": 5393303, "time": "2011-04-06T21:55:16Z", "is_private": false, "tags": [], "raw_text": "Why make a new jsalloc.h/.cpp instead of just using jsutil.h/.cpp where all the existing malloc_ and friends live?\n\nAlso, the name \"ContextAllocPolicy\" and \"SystemAllocPolicy\" seem more and more out of date with all the fresh new names that have clear semantics attached.  Are you planning to rename ContextAllocPolicy/SystemAllocPolicy with bug 647103?", "creation_time": "2011-04-06T21:55:16Z", "bug_id": 646044}, {"text": "(In reply to comment #6)\n> Why make a new jsalloc.h/.cpp instead of just using jsutil.h/.cpp where all the\n> existing malloc_ and friends live?\n\nI do not want to add more stuff to a public header for now.\n\n> Also, the name \"ContextAllocPolicy\" and \"SystemAllocPolicy\" seem more and more\n> out of date with all the fresh new names that have clear semantics attached\n> Are you planning to rename ContextAllocPolicy/SystemAllocPolicy with bug\n> 647103?\n\nYes, I want to rename it in the bug 647103.", "count": 7, "author": "igor@mir2.org", "creator": "igor@mir2.org", "attachment_id": null, "time": "2011-04-13T10:48:15Z", "id": 5406132, "bug_id": 646044, "creation_time": "2011-04-13T10:48:15Z", "raw_text": "(In reply to comment #6)\n> Why make a new jsalloc.h/.cpp instead of just using jsutil.h/.cpp where all the\n> existing malloc_ and friends live?\n\nI do not want to add more stuff to a public header for now.\n\n> Also, the name \"ContextAllocPolicy\" and \"SystemAllocPolicy\" seem more and more\n> out of date with all the fresh new names that have clear semantics attached\n> Are you planning to rename ContextAllocPolicy/SystemAllocPolicy with bug\n> 647103?\n\nYes, I want to rename it in the bug 647103.", "tags": [], "is_private": false}, {"text": "Created attachment 525661\nv3\n\nHere is an updated patch", "count": 8, "author": "igor@mir2.org", "time": "2011-04-13T12:03:16Z", "id": 5406193, "raw_text": "Here is an updated patch", "creation_time": "2011-04-13T12:03:16Z", "bug_id": 646044, "creator": "igor@mir2.org", "tags": [], "is_private": false, "attachment_id": 525661}]}}, "comments": {}}