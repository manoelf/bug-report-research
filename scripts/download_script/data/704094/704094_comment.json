{"bugs": {"704094": {"comments": [{"attachment_id": null, "raw_text": "Allow an easy way to view the DOM for a node with a DOM button. The new sidebar would display the same information currently shown by: <highlight><control-shift-K>inspect($0)", "time": "2011-11-21T12:04:30Z", "tags": [], "author": "bj@herbison.com", "count": 0, "text": "Allow an easy way to view the DOM for a node with a DOM button. The new sidebar would display the same information currently shown by: <highlight><control-shift-K>inspect($0)", "creator": "bj@herbison.com", "is_private": false, "creation_time": "2011-11-21T12:04:30Z", "bug_id": 704094, "id": 5862087}, {"tags": [], "attachment_id": null, "raw_text": "You mean a JavaScript object view? Doesn't have to be a only-DOM view.\nAnd how is that related to bug 63830?", "time": "2011-11-21T15:24:02Z", "is_private": false, "creation_time": "2011-11-21T15:24:02Z", "bug_id": 704094, "id": 5862392, "author": "paul@mozilla.com", "count": 1, "text": "You mean a JavaScript object view? Doesn't have to be a only-DOM view.\nAnd how is that related to bug 63830?", "creator": "paul@mozilla.com"}, {"creation_time": "2011-11-21T15:51:44Z", "is_private": false, "creator": "bj@herbison.com", "tags": [], "attachment_id": null, "bug_id": 704094, "id": 5862474, "author": "bj@herbison.com", "count": 2, "text": "Yes, I think it would be useful to show any properties of the object the highlighter points to.\n\n(Sorry about the block -- select error trying to copy the bug number of the Highlighter meta bug.)", "raw_text": "Yes, I think it would be useful to show any properties of the object the highlighter points to.\n\n(Sorry about the block -- select error trying to copy the bug number of the Highlighter meta bug.)", "time": "2011-11-21T15:51:44Z"}, {"tags": [], "attachment_id": null, "is_private": false, "creation_time": "2011-11-21T17:23:36Z", "creator": "paul@mozilla.com", "time": "2011-11-21T17:23:36Z", "raw_text": "So the plan is to move the JS Object inspector from its own window into the Web Console (bug 704180).", "id": 5862756, "bug_id": 704094, "author": "paul@mozilla.com", "count": 3, "text": "So the plan is to move the JS Object inspector from its own window into the Web Console (bug 704180)."}, {"time": "2011-11-21T17:43:27Z", "raw_text": "(In reply to Paul Rouget [:paul] from comment #3)\n> So the plan is to move the JS Object inspector from its own window into the\n> Web Console (bug 704180).\n\nfor web console inspected objects. I don't think that applies to this bug.\n\nMaybe this should be next to the HTML view?", "attachment_id": null, "tags": [], "creator": "rcampbell@mozilla.com", "count": 4, "text": "(In reply to Paul Rouget [:paul] from comment #3)\n> So the plan is to move the JS Object inspector from its own window into the\n> Web Console (bug 704180).\n\nfor web console inspected objects. I don't think that applies to this bug.\n\nMaybe this should be next to the HTML view?", "author": "rcampbell@mozilla.com", "id": 5862809, "bug_id": 704094, "is_private": false, "creation_time": "2011-11-21T17:43:27Z"}, {"raw_text": "(In reply to Rob Campbell [:rc] (robcee) from comment #4)\n> (In reply to Paul Rouget [:paul] from comment #3)\n> > So the plan is to move the JS Object inspector from its own window into the\n> > Web Console (bug 704180).\n> \n> for web console inspected objects. I don't think that applies to this bug.\n> \n> Maybe this should be next to the HTML view?\n\nSo a button next to \"style\", something like \"JS Object\", that would open the Web Console and show the javascript-obj-view? Or you think we should open it in the sidebar (which would be weird, because the same tool could be display in the sidebar and in the webconsole)?", "time": "2011-11-21T18:04:34Z", "bug_id": 704094, "id": 5862877, "count": 5, "text": "(In reply to Rob Campbell [:rc] (robcee) from comment #4)\n> (In reply to Paul Rouget [:paul] from comment #3)\n> > So the plan is to move the JS Object inspector from its own window into the\n> > Web Console (bug 704180).\n> \n> for web console inspected objects. I don't think that applies to this bug.\n> \n> Maybe this should be next to the HTML view?\n\nSo a button next to \"style\", something like \"JS Object\", that would open the Web Console and show the javascript-obj-view? Or you think we should open it in the sidebar (which would be weird, because the same tool could be display in the sidebar and in the webconsole)?", "author": "paul@mozilla.com", "tags": [], "attachment_id": null, "creation_time": "2011-11-21T18:04:34Z", "is_private": false, "creator": "paul@mozilla.com"}, {"tags": [], "time": "2011-11-21T18:19:57Z", "raw_text": "Well, actually, opening the js-obj-view in the Console if opened from the Console, and in the sidebar if opened from the highlighter makes sense.", "attachment_id": null, "bug_id": 704094, "id": 5862920, "creation_time": "2011-11-21T18:19:57Z", "is_private": false, "creator": "paul@mozilla.com", "count": 6, "text": "Well, actually, opening the js-obj-view in the Console if opened from the Console, and in the sidebar if opened from the highlighter makes sense.", "author": "paul@mozilla.com"}, {"attachment_id": null, "tags": [], "creator": "paul@mozilla.com", "creation_time": "2011-11-21T18:28:10Z", "is_private": false, "time": "2011-11-21T18:28:10Z", "raw_text": "(In reply to Rob Campbell [:rc] (robcee) from comment #4)\n> Maybe this should be next to the HTML view?\n\nYou mean splitting the HTML view in two?\nI think it would be better to have it in the sidebar.", "author": "paul@mozilla.com", "text": "(In reply to Rob Campbell [:rc] (robcee) from comment #4)\n> Maybe this should be next to the HTML view?\n\nYou mean splitting the HTML view in two?\nI think it would be better to have it in the sidebar.", "count": 7, "id": 5862944, "bug_id": 704094}, {"author": "rcampbell@mozilla.com", "text": "except the sidebar is labeled \"Style\" currently. I also think, since we have a grouping of style tools in the sidebar, it might make more sense to put a \"DOM Object\" viewer into the same panel as the HTML tree. Or we could pop it up separately as we do now as long as we don't get into more xul panel bugs.\n\nOne of the reasons we didn't include an Object button in the Highlighter was because I was selling \"Annotations\" as a possible way to get information about the object into the Highlighter view. Some people deemed the Object button as \"too fringe\", though I kind of disagreed at the time.\n\nThere is a workaround available if you open the Web Console and type $0 or inspect($0) to open the property viewer directly.", "count": 8, "id": 5862953, "bug_id": 704094, "raw_text": "except the sidebar is labeled \"Style\" currently. I also think, since we have a grouping of style tools in the sidebar, it might make more sense to put a \"DOM Object\" viewer into the same panel as the HTML tree. Or we could pop it up separately as we do now as long as we don't get into more xul panel bugs.\n\nOne of the reasons we didn't include an Object button in the Highlighter was because I was selling \"Annotations\" as a possible way to get information about the object into the Highlighter view. Some people deemed the Object button as \"too fringe\", though I kind of disagreed at the time.\n\nThere is a workaround available if you open the Web Console and type $0 or inspect($0) to open the property viewer directly.", "time": "2011-11-21T18:30:33Z", "creator": "rcampbell@mozilla.com", "creation_time": "2011-11-21T18:30:33Z", "is_private": false, "attachment_id": null, "tags": []}, {"time": "2011-11-21T19:09:57Z", "raw_text": "(In reply to Rob Campbell [:rc] (robcee) from comment #8)\n> except the sidebar is labeled \"Style\" currently. I also think, since we have\n> a grouping of style tools in the sidebar, it might make more sense to put a\n> \"DOM Object\" viewer into the same panel as the HTML tree. Or we could pop it\n> up separately as we do now as long as we don't get into more xul panel bugs.\n\nThis tool doesn't have a name yet, but I don't think it's a DOM-only tool. It's a bit more general (we can inspect the whole JS structure, not just the DOM methods/properties). I would call it JS Object View.\n\nThis JS Object View can be open in the Web Console (`inspect(window)`). This will happen in bug 704180.\n\nSounds like we want to have a button that will inspect the node too (this bug).\n\nWe can simply open this tool in the Web Console since we will get inline-inspect working. But:\na) from the inspector, the user probably doesn't want to have the whole Web Console;\nb) this view would fit better in a vertical view.\n\nSo we need to find a better slot for it.\n\nIf I'm not mistaken... if we would have had the modular sidebar (from where we could dock/undock tools, and maybe stack tools, with an accordion), we would just add it there. But we don't have this modular sidebar. For now, we have a style-specific sidebar.\n\nWe could move it into the HTML Panel. But:\na) It's a horizontal view;\nb) We will have to move it the sidebar once it will get the modular sidebar.\n\nI see 3 options:\na) We open the Web Console when the user click on the button. It's horizontal, but at least, we won't have to \"kill\" the feature when we will be able to host the JS Object view into the future modular sidebar;\nb) We hide the style sidebar, and create a JS sidebar;\nc) We start working on the modular sidebar now.", "attachment_id": null, "tags": [], "creator": "paul@mozilla.com", "count": 9, "text": "(In reply to Rob Campbell [:rc] (robcee) from comment #8)\n> except the sidebar is labeled \"Style\" currently. I also think, since we have\n> a grouping of style tools in the sidebar, it might make more sense to put a\n> \"DOM Object\" viewer into the same panel as the HTML tree. Or we could pop it\n> up separately as we do now as long as we don't get into more xul panel bugs.\n\nThis tool doesn't have a name yet, but I don't think it's a DOM-only tool. It's a bit more general (we can inspect the whole JS structure, not just the DOM methods/properties). I would call it JS Object View.\n\nThis JS Object View can be open in the Web Console (`inspect(window)`). This will happen in bug 704180.\n\nSounds like we want to have a button that will inspect the node too (this bug).\n\nWe can simply open this tool in the Web Console since we will get inline-inspect working. But:\na) from the inspector, the user probably doesn't want to have the whole Web Console;\nb) this view would fit better in a vertical view.\n\nSo we need to find a better slot for it.\n\nIf I'm not mistaken... if we would have had the modular sidebar (from where we could dock/undock tools, and maybe stack tools, with an accordion), we would just add it there. But we don't have this modular sidebar. For now, we have a style-specific sidebar.\n\nWe could move it into the HTML Panel. But:\na) It's a horizontal view;\nb) We will have to move it the sidebar once it will get the modular sidebar.\n\nI see 3 options:\na) We open the Web Console when the user click on the button. It's horizontal, but at least, we won't have to \"kill\" the feature when we will be able to host the JS Object view into the future modular sidebar;\nb) We hide the style sidebar, and create a JS sidebar;\nc) We start working on the modular sidebar now.", "author": "paul@mozilla.com", "bug_id": 704094, "id": 5863067, "creation_time": "2011-11-21T19:09:57Z", "is_private": false}, {"attachment_id": null, "tags": [], "creator": "paul@mozilla.com", "creation_time": "2012-03-14T16:40:39Z", "is_private": false, "time": "2012-03-14T16:40:39Z", "raw_text": "", "count": 10, "text": "*** Bug 719867 has been marked as a duplicate of this bug. ***", "author": "paul@mozilla.com", "id": 6139321, "bug_id": 704094}, {"raw_text": "triage, filter on centaur", "time": "2012-03-14T16:41:22Z", "id": 6139323, "bug_id": 704094, "count": 11, "text": "triage, filter on centaur", "author": "paul@mozilla.com", "tags": [], "attachment_id": null, "creation_time": "2012-03-14T16:41:22Z", "is_private": false, "creator": "paul@mozilla.com"}, {"creator": "paul@mozilla.com", "author": "paul@mozilla.com", "text": "We want to move the buttons inside the sidebar. See bug 717929.", "count": 12, "bug_id": 704094, "id": 6140129, "is_private": false, "creation_time": "2012-03-14T19:45:06Z", "time": "2012-03-14T19:45:06Z", "attachment_id": null, "raw_text": "We want to move the buttons inside the sidebar. See bug 717929.", "tags": []}, {"is_private": false, "creation_time": "2012-03-15T13:48:06Z", "bug_id": 704094, "id": 6142503, "count": 13, "text": "(P3, as discussed with Kevin)", "author": "paul@mozilla.com", "creator": "paul@mozilla.com", "tags": [], "raw_text": "(P3, as discussed with Kevin)", "attachment_id": null, "time": "2012-03-15T13:48:06Z"}, {"text": "The Toolbox + Sidebar.jsm makes things much easier.\n\nBug triage, filter on PINKISBEAUTIFUL\n\n*** This bug has been marked as a duplicate of bug 817547 ***", "count": 14, "author": "paul@mozilla.com", "id": 6874751, "bug_id": 704094, "raw_text": "The Toolbox + Sidebar.jsm makes things much easier.\n\nBug triage, filter on PINKISBEAUTIFUL", "time": "2012-12-03T16:48:33Z", "creator": "paul@mozilla.com", "creation_time": "2012-12-03T16:48:33Z", "is_private": false, "attachment_id": null, "tags": []}, {"tags": [], "time": "2012-12-03T16:49:53Z", "attachment_id": null, "raw_text": "Sorry sorry, wrong bug!", "id": 6874762, "bug_id": 704094, "is_private": false, "creation_time": "2012-12-03T16:49:53Z", "creator": "paul@mozilla.com", "author": "paul@mozilla.com", "count": 15, "text": "Sorry sorry, wrong bug!"}, {"creator": "paul@mozilla.com", "author": "paul@mozilla.com", "count": 16, "text": "*** Bug 801124 has been marked as a duplicate of this bug. ***", "id": 6874908, "bug_id": 704094, "creation_time": "2012-12-03T17:21:34Z", "is_private": false, "time": "2012-12-03T17:21:34Z", "attachment_id": null, "raw_text": "", "tags": []}, {"tags": [], "attachment_id": null, "raw_text": "", "time": "2012-12-03T17:21:37Z", "is_private": false, "creation_time": "2012-12-03T17:21:37Z", "id": 6874911, "bug_id": 704094, "author": "paul@mozilla.com", "text": "*** Bug 796063 has been marked as a duplicate of this bug. ***", "count": 17, "creator": "paul@mozilla.com"}, {"id": 6878196, "bug_id": 704094, "author": "paul@mozilla.com", "text": "*** Bug 787470 has been marked as a duplicate of this bug. ***", "count": 18, "raw_text": "", "time": "2012-12-04T10:54:56Z", "is_private": false, "creation_time": "2012-12-04T10:54:56Z", "creator": "paul@mozilla.com", "tags": [], "attachment_id": null}, {"creator": "techiespidie@gmail.com", "creation_time": "2013-02-13T05:14:15Z", "is_private": false, "attachment_id": null, "tags": ["spam"], "author": "techiespidie@gmail.com", "text": "ok", "count": 19, "bug_id": 704094, "id": 7098140, "raw_text": "ok", "time": "2013-02-13T05:14:15Z"}, {"attachment_id": null, "tags": [], "creator": "michael@ratcliffefamily.org", "creation_time": "2013-07-19T13:16:55Z", "is_private": false, "time": "2013-07-19T13:16:55Z", "raw_text": "Probably the most irritating thing for most Firebug users is that we have no DOM tab. In Firebug I can easily inspect an object and click on the DOM tab (In fact, I can use the inspector whilst the DOM tab is open, which makes it very easy to select nodes.\n\nFirebug also allows me to right-click an HTML node  and \"Inspect in DOM panel.\" In our native tools I have to open a scratchpad or the web console, use a selector to get a node and then click Scratchpad's \"Inspect\" button. This is hardly discoverable nor as simple to use as Firebug's DOM panel.", "author": "michael@ratcliffefamily.org", "count": 20, "text": "Probably the most irritating thing for most Firebug users is that we have no DOM tab. In Firebug I can easily inspect an object and click on the DOM tab (In fact, I can use the inspector whilst the DOM tab is open, which makes it very easy to select nodes.\n\nFirebug also allows me to right-click an HTML node  and \"Inspect in DOM panel.\" In our native tools I have to open a scratchpad or the web console, use a selector to get a node and then click Scratchpad's \"Inspect\" button. This is hardly discoverable nor as simple to use as Firebug's DOM panel.", "bug_id": 704094, "id": 7655172}, {"text": "The VariablesView is a pretty self-contained widget now, so using it inside the inspector shouldn't be too hard.", "count": 21, "author": "pastith@gmail.com", "creator": "pastith@gmail.com", "creation_time": "2013-07-19T13:37:06Z", "is_private": false, "id": 7655235, "bug_id": 704094, "raw_text": "The VariablesView is a pretty self-contained widget now, so using it inside the inspector shouldn't be too hard.", "attachment_id": null, "time": "2013-07-19T13:37:06Z", "tags": []}, {"raw_text": "I will try to take a look at this one. It would indeed be a pretty good addition to our tools.\nI've looked at the code a bit and the only unclear part that I'll look into now is how to get an objectActor grip for a dom node in the inspector.\nOther than that, it should be pretty straight forward with the VariablesView.\n\nThe other thing is we have 4 tabs in the sidepanel already, this would be a 5th! We might need some re-thinking here.\n@darrin: thoughts on this?", "time": "2013-12-20T11:26:34Z", "author": "patrickbrosset+bugzilla@gmail.com", "text": "I will try to take a look at this one. It would indeed be a pretty good addition to our tools.\nI've looked at the code a bit and the only unclear part that I'll look into now is how to get an objectActor grip for a dom node in the inspector.\nOther than that, it should be pretty straight forward with the VariablesView.\n\nThe other thing is we have 4 tabs in the sidepanel already, this would be a 5th! We might need some re-thinking here.\n@darrin: thoughts on this?", "count": 22, "bug_id": 704094, "id": 8220305, "attachment_id": null, "tags": [], "creator": "patrickbrosset+bugzilla@gmail.com", "is_private": false, "creation_time": "2013-12-20T11:26:34Z"}, {"text": "The obvious thing would be to show the DOM panel where the Fonts tab is and to have an ellipse button to show less useful tools (e.g. Fonts). We need something like that anyway as the side panel pushes tabs off to the right when it is too narrow.\n\nDarrin may have something better though.", "count": 23, "author": "michael@ratcliffefamily.org", "bug_id": 704094, "id": 8220339, "time": "2013-12-20T11:51:46Z", "raw_text": "The obvious thing would be to show the DOM panel where the Fonts tab is and to have an ellipse button to show less useful tools (e.g. Fonts). We need something like that anyway as the side panel pushes tabs off to the right when it is too narrow.\n\nDarrin may have something better though.", "creator": "michael@ratcliffefamily.org", "is_private": false, "creation_time": "2013-12-20T11:51:46Z", "attachment_id": null, "tags": []}, {"creation_time": "2014-01-03T11:39:48Z", "is_private": false, "bug_id": 704094, "id": 8250738, "author": "patrickbrosset+bugzilla@gmail.com", "count": 24, "text": "When it comes to actually retrieving properties from the currently selected node, I'm wondering what's the best course of action.\n\nOn one side we have the DOM view that will live in the inspector, where we have a reference to the currently selected NodeFront.\nAnd on the other side, we have the VariableView widget that works well with ObjectActor's grips.\n\nWe could:\n\n(a) implement a new WalkerActor method that, based on the passed node, would send back the grip. However, this requires to have a ThreadActor (see http://mxr.mozilla.org/mozilla-central/source/toolkit/devtools/server/actors/script.js#2832) which the Walker does not have.\n(b) alternatively, the new WalkerActor method could simply send a new response packet containing the list of key/value pairs for all of the node's properties. This way, we wouldn't use the VariableView's ability to work with grips at all.\n(c) or find a way to call the webconsole's server which does the job already (i.e. when you click on the output link for a DOM node).\n\nI'm leaning towards (a) but haven't yet been able to figure out how to make it happen.", "creator": "patrickbrosset+bugzilla@gmail.com", "tags": [], "attachment_id": null, "raw_text": "When it comes to actually retrieving properties from the currently selected node, I'm wondering what's the best course of action.\n\nOn one side we have the DOM view that will live in the inspector, where we have a reference to the currently selected NodeFront.\nAnd on the other side, we have the VariableView widget that works well with ObjectActor's grips.\n\nWe could:\n\n(a) implement a new WalkerActor method that, based on the passed node, would send back the grip. However, this requires to have a ThreadActor (see http://mxr.mozilla.org/mozilla-central/source/toolkit/devtools/server/actors/script.js#2832) which the Walker does not have.\n(b) alternatively, the new WalkerActor method could simply send a new response packet containing the list of key/value pairs for all of the node's properties. This way, we wouldn't use the VariableView's ability to work with grips at all.\n(c) or find a way to call the webconsole's server which does the job already (i.e. when you click on the output link for a DOM node).\n\nI'm leaning towards (a) but haven't yet been able to figure out how to make it happen.", "time": "2014-01-03T11:39:48Z"}, {"time": "2014-01-03T13:46:53Z", "raw_text": "(c) isn't very practical as it requires a \"evaluateJS\" packet type which takes a string input whereas we have a DOM node front here.", "id": 8250921, "bug_id": 704094, "author": "patrickbrosset+bugzilla@gmail.com", "text": "(c) isn't very practical as it requires a \"evaluateJS\" packet type which takes a string input whereas we have a DOM node front here.", "count": 25, "tags": [], "attachment_id": null, "is_private": false, "creation_time": "2014-01-03T13:46:53Z", "creator": "patrickbrosset+bugzilla@gmail.com"}, {"author": "pastith@gmail.com", "count": 26, "text": "Mihai can elaborate more on this, but you don't need much machinery to use the debugger APIs with object actors. Unfortunately this is not well documented, but see how WebConsoleActor creates ObjectActors internally (pretending to be a ThreadActor by mocking _gripDepth and createValueGrip mostly). If your actor implements the right methods, the code that will give you the grip should roughly be:\n\nlet grip = actor.createValueGrip(actor.makeDebuggeeValue(domObject));", "creator": "pastith@gmail.com", "is_private": false, "creation_time": "2014-01-03T14:13:11Z", "id": 8250983, "bug_id": 704094, "attachment_id": null, "raw_text": "Mihai can elaborate more on this, but you don't need much machinery to use the debugger APIs with object actors. Unfortunately this is not well documented, but see how WebConsoleActor creates ObjectActors internally (pretending to be a ThreadActor by mocking _gripDepth and createValueGrip mostly). If your actor implements the right methods, the code that will give you the grip should roughly be:\n\nlet grip = actor.createValueGrip(actor.makeDebuggeeValue(domObject));", "time": "2014-01-03T14:13:11Z", "tags": []}, {"author": "patrickbrosset+bugzilla@gmail.com", "count": 27, "text": "Thanks Panos for the help.\nI've managed to implement the premise of solution (a). I now have problems related to how the VariablesView widget fetches properties, but this seems related to the actorpool which I need to maintain on my side.\n\nNo need to needinfo Mihai anymore for now. I'll probably come back with more questions later though :)", "creator": "patrickbrosset+bugzilla@gmail.com", "creation_time": "2014-01-03T16:22:18Z", "is_private": false, "bug_id": 704094, "id": 8251302, "attachment_id": null, "raw_text": "Thanks Panos for the help.\nI've managed to implement the premise of solution (a). I now have problems related to how the VariablesView widget fetches properties, but this seems related to the actorpool which I need to maintain on my side.\n\nNo need to needinfo Mihai anymore for now. I'll probably come back with more questions later though :)", "time": "2014-01-03T16:22:18Z", "tags": []}, {"time": "2014-01-06T20:06:56Z", "raw_text": "Patrick, I believe solution (a) is the one you should continue work on, as you are already doing.\n\nAs Panos pointed out, you only need _gripDepth and createValueGrip(). For createValueGrip() I maintain my own actor pool, because the lifetime of object actors is different in the webconsole, when compared to debugging. During debugging you have thread-lifetime and pause-lifetime actors.\n\nIt would be nice if you could reuse the console actor, to avoid code duplication.", "attachment_id": null, "tags": [], "creator": "mihai.sucan@gmail.com", "text": "Patrick, I believe solution (a) is the one you should continue work on, as you are already doing.\n\nAs Panos pointed out, you only need _gripDepth and createValueGrip(). For createValueGrip() I maintain my own actor pool, because the lifetime of object actors is different in the webconsole, when compared to debugging. During debugging you have thread-lifetime and pause-lifetime actors.\n\nIt would be nice if you could reuse the console actor, to avoid code duplication.", "count": 28, "author": "mihai.sucan@gmail.com", "id": 8257011, "bug_id": 704094, "is_private": false, "creation_time": "2014-01-06T20:06:56Z"}, {"creation_time": "2014-01-07T15:23:02Z", "is_private": false, "id": 8260635, "bug_id": 704094, "author": "patrickbrosset+bugzilla@gmail.com", "count": 29, "text": "Dave, do you have suggestions as to how I could reuse the WebConsoleActor's ability to retrieve object actor grips from the inspector actor?\n\nIt seems to me that the inspector, being a protocol.js type actor, does not have access to the globally loaded actors.", "creator": "patrickbrosset+bugzilla@gmail.com", "tags": [], "attachment_id": null, "raw_text": "Dave, do you have suggestions as to how I could reuse the WebConsoleActor's ability to retrieve object actor grips from the inspector actor?\n\nIt seems to me that the inspector, being a protocol.js type actor, does not have access to the globally loaded actors.", "time": "2014-01-07T15:23:02Z"}, {"raw_text": "Status update: I've managed to get the DOM view sidebar working but it's a bit of a hack right now.\n\nIt works by acting as a ThreadActor, just like the WebConsoleActor does, and in doing so, can easily create ObjectActorGrips that have the thread lifetime instead.\n\nThe reason it's hacky right now is that from the WalkerActor I need access to 2 classes defined in script.js: ThreadActor and ObjectActor. Although the WebConsoleActor has access to these classes from the global scope, the WalkerActor does not.", "attachment_id": null, "time": "2014-01-07T21:11:15Z", "tags": [], "count": 30, "text": "Status update: I've managed to get the DOM view sidebar working but it's a bit of a hack right now.\n\nIt works by acting as a ThreadActor, just like the WebConsoleActor does, and in doing so, can easily create ObjectActorGrips that have the thread lifetime instead.\n\nThe reason it's hacky right now is that from the WalkerActor I need access to 2 classes defined in script.js: ThreadActor and ObjectActor. Although the WebConsoleActor has access to these classes from the global scope, the WalkerActor does not.", "author": "patrickbrosset+bugzilla@gmail.com", "creator": "patrickbrosset+bugzilla@gmail.com", "is_private": false, "creation_time": "2014-01-07T21:11:15Z", "id": 8262508, "bug_id": 704094}, {"creation_time": "2014-01-08T08:02:13Z", "is_private": false, "bug_id": 704094, "id": 8264708, "author": "pastith@gmail.com", "text": "I think you are right, protocol.js-based actors are loaded in separate globals, so perhaps it's time we split the common bits of script.js into separate objects that can be used by both old-style actors (script.js, webconsole.js) and modern ones, like inspector.js. Moving the ObjectActor to an object.js module sounds straightforward and a good place to start.", "count": 31, "creator": "pastith@gmail.com", "tags": [], "attachment_id": null, "raw_text": "I think you are right, protocol.js-based actors are loaded in separate globals, so perhaps it's time we split the common bits of script.js into separate objects that can be used by both old-style actors (script.js, webconsole.js) and modern ones, like inspector.js. Moving the ObjectActor to an object.js module sounds straightforward and a good place to start.", "time": "2014-01-08T08:02:13Z"}, {"creator": "patrickbrosset+bugzilla@gmail.com", "author": "patrickbrosset+bugzilla@gmail.com", "count": 32, "text": "Darrin, here's a work in progress to add an ellipsis to the sidebar tabbox in case there's not enough room: http://www.youtube.com/watch?v=K2EHMZK9ybU\nAs you suggested, it would be nice to have an icon for this.", "id": 8271296, "bug_id": 704094, "is_private": false, "creation_time": "2014-01-09T15:52:15Z", "time": "2014-01-09T15:52:15Z", "attachment_id": null, "raw_text": "Darrin, here's a work in progress to add an ellipsis to the sidebar tabbox in case there's not enough room: http://www.youtube.com/watch?v=K2EHMZK9ybU\nAs you suggested, it would be nice to have an icon for this.", "tags": []}, {"time": "2014-01-22T21:21:28Z", "raw_text": "", "id": 8322021, "bug_id": 704094, "author": "patrickbrosset+bugzilla@gmail.com", "text": "Created attachment 8363914\nbug704094-inspector-domview-part1-Adds-the-sidebar.patch", "count": 33, "tags": [], "attachment_id": 8363914, "is_private": false, "creation_time": "2014-01-22T21:21:28Z", "creator": "patrickbrosset+bugzilla@gmail.com"}, {"author": "patrickbrosset+bugzilla@gmail.com", "text": "Created attachment 8363915\nbug704094-inspector-domview-part2-Sidebar-alltabs-menu.patch", "count": 34, "bug_id": 704094, "id": 8322023, "time": "2014-01-22T21:21:42Z", "raw_text": "", "creator": "patrickbrosset+bugzilla@gmail.com", "creation_time": "2014-01-22T21:21:42Z", "is_private": false, "attachment_id": 8363915, "tags": []}, {"tags": [], "time": "2014-01-22T21:22:04Z", "attachment_id": 8363917, "raw_text": "", "bug_id": 704094, "id": 8322025, "creation_time": "2014-01-22T21:22:04Z", "is_private": false, "creator": "patrickbrosset+bugzilla@gmail.com", "author": "patrickbrosset+bugzilla@gmail.com", "count": 35, "text": "Created attachment 8363917\nbug704094-inspector-domview-part3-Tests.patch"}, {"id": 8322126, "bug_id": 704094, "text": "Attaching my current patches for this bug.\nThey're not ready for review just yet, but I'm getting there.\n\nHere's a status of the progress:\n\npart 1:\n\n- New \"DOM\" sidebar panel in the inspector.\n- Reacts as the other panels do: refresh on new selection, empties if no node selected.\n- Also reloads on node mutation.\n- Uses telemetry.\n- Is localized.\n- Uses the VariablesView widget to display the properties.\n- Goes to the server to translate the NodeFront into an ObjectActorGrip for the VariablesView to work (it does this similarly to how the WebConsole does it: that is by playing the role of the ThreadActor, by overriding some of its methods and managing its own actor pool).\nThis part isn't very very nice, but it turns out protocol.js actors aren't loaded in the server's global scope, so they don't have access to all actors by default. So what I did was split script.js in several files as I could. For instance, ObjectActor is now in a separate module that can be required by other actors. But I wasn't able to split the ThreadActor in a separate module as it requires simply too many dependencies.\n\npart 2:\n\n- Adds a new option to the ToolSidebar widget that shows an allTabs menu to the right when there's not enough space to let all tabs be visible. This menu contains a drop-down of all tabs.\n- Makes the netmonitor also use ToolSidebar so it has the same feature. For this, I had to improve again ToolSidebar in a way that it now also works with existing <tab> elements.\n\npart 3:\n\n- Adds a simple test. I need to keep working on it and add new tests for the inspector and netmonitor sidebars.", "count": 36, "author": "patrickbrosset+bugzilla@gmail.com", "time": "2014-01-22T21:41:21Z", "raw_text": "Attaching my current patches for this bug.\nThey're not ready for review just yet, but I'm getting there.\n\nHere's a status of the progress:\n\npart 1:\n\n- New \"DOM\" sidebar panel in the inspector.\n- Reacts as the other panels do: refresh on new selection, empties if no node selected.\n- Also reloads on node mutation.\n- Uses telemetry.\n- Is localized.\n- Uses the VariablesView widget to display the properties.\n- Goes to the server to translate the NodeFront into an ObjectActorGrip for the VariablesView to work (it does this similarly to how the WebConsole does it: that is by playing the role of the ThreadActor, by overriding some of its methods and managing its own actor pool).\nThis part isn't very very nice, but it turns out protocol.js actors aren't loaded in the server's global scope, so they don't have access to all actors by default. So what I did was split script.js in several files as I could. For instance, ObjectActor is now in a separate module that can be required by other actors. But I wasn't able to split the ThreadActor in a separate module as it requires simply too many dependencies.\n\npart 2:\n\n- Adds a new option to the ToolSidebar widget that shows an allTabs menu to the right when there's not enough space to let all tabs be visible. This menu contains a drop-down of all tabs.\n- Makes the netmonitor also use ToolSidebar so it has the same feature. For this, I had to improve again ToolSidebar in a way that it now also works with existing <tab> elements.\n\npart 3:\n\n- Adds a simple test. I need to keep working on it and add new tests for the inspector and netmonitor sidebars.", "creation_time": "2014-01-22T21:41:21Z", "is_private": false, "creator": "patrickbrosset+bugzilla@gmail.com", "tags": [], "attachment_id": null}, {"text": "Comment on attachment 8363914\nbug704094-inspector-domview-part1-Adds-the-sidebar.patch\n\nMihai, getting a review on the part that returns actor grips would be awesome since you did this for the webconsole.", "count": 37, "author": "patrickbrosset+bugzilla@gmail.com", "id": 8322139, "bug_id": 704094, "time": "2014-01-22T21:44:19Z", "raw_text": "Mihai, getting a review on the part that returns actor grips would be awesome since you did this for the webconsole.", "creator": "patrickbrosset+bugzilla@gmail.com", "creation_time": "2014-01-22T21:44:19Z", "is_private": false, "attachment_id": 8363914, "tags": []}, {"raw_text": "Review of attachment 8363914:\n-----------------------------------------------------------------\n\nPatch looks good and I'm really glad to see we will have a DOM panel in the inspector - finally. ;)\n\nDo you plan to add editing of properties in this patch? If not, please file a follow-up bug - we should allow editing of properties, like the debugger and console do.\n\n::: browser/devtools/dominspector/dominspector-panel.xul\n@@ +9,5 @@\n> +<?xml-stylesheet href=\"chrome://browser/skin/devtools/common.css\" type=\"text/css\"?>\n> +<?xml-stylesheet href=\"chrome://browser/skin/devtools/widgets.css\" type=\"text/css\"?>\n> +<?xul-overlay href=\"chrome://global/content/editMenuOverlay.xul\"?>\n> +\n> +<xul:window xmlns:xul=\"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\"\n\nWhy not make XUL the default namespace?\n\n@@ +18,5 @@\n> +  <script type=\"application/javascript;version=1.8\"\n> +          src=\"chrome://browser/content/devtools/theme-switching.js\"/>\n> +  <script type=\"application/javascript;version=1.8\"\n> +          src=\"chrome://browser/content/devtools/dominspector.js\"/>\n> +  <xul:script type=\"application/javascript\" src=\"chrome://global/content/globalOverlay.js\"/>\n\nWhy do you mix <script> tags with and without the xul prefix?\n\n@@ +24,5 @@\n> +  <xul:box id=\"variable-view\"\n> +       class=\"devtools-responsive-container theme-body\"\n> +       flex=\"1\"/>\n> +\n> +  <script type=\"application/javascript;version=1.8\">\n\nWe have bug 960728 about removing all of the inlined scripts and styles. Please avoid adding this inlined script here.\n\n::: browser/devtools/dominspector/dominspector.js\n@@ +11,5 @@\n> +Cu.import(\"resource:///modules/devtools/VariablesViewController.jsm\");\n> +Cu.import(\"resource://gre/modules/devtools/dbg-client.jsm\");\n> +Cu.import(\"resource://gre/modules/devtools/Loader.jsm\");\n> +Cu.import(\"resource://gre/modules/XPCOMUtils.jsm\");\n> +let promise = devtools.require(\"sdk/core/promise\");\n\nnit: you might want to lazy import/require modules you dont need when someone does require(\"dominspector\").\n\nAlso, you might want to use Promise.jsm - the promise implementation that doesn't swallow exceptions.\n\n@@ +13,5 @@\n> +Cu.import(\"resource://gre/modules/devtools/Loader.jsm\");\n> +Cu.import(\"resource://gre/modules/XPCOMUtils.jsm\");\n> +let promise = devtools.require(\"sdk/core/promise\");\n> +\n> +function DomInspector(inspector, rootEl) {\n\nPlease add jsdoc comments to functions/public methods.\n\n::: toolkit/components/telemetry/Histograms.json\n@@ +5071,5 @@\n>    },\n> +  \"DEVTOOLS_DOMINSPECTOR_OPENED_BOOLEAN\": {\n> +    \"expires_in_version\": \"never\",\n> +    \"kind\": \"boolean\",\n> +    \"description\": \"How many times has the devtool's DOM Inspector been opened?\"\n\nThis might be confusing. Which DOM inspector? The markup view is a type of a DOM inspector.\n\nI would suggest: How many times has the DOM panel been opened in the Inspector devtool?\n\n... better suggestions are welcome.\n\nI see below you use this in more places. Why not call it the DOM panel? Even in the devtools folder \"inspector\" versus \"dominspector\" could be confusing. You could put the DOM panel in devtools/inspector/ - a dom-panel.js and .xul.\n\nI dont know if we have any \"policy\", but I was under the impression that the top level devtools/ folder should be used for tools.\n\n(these concerns do not block the review, just mentioning my thoughts - no strong opinions on this. If you feel inclined to do something, maybe you should ping paul/joe to ask.)\n\n::: toolkit/devtools/server/actors/inspector.js\n@@ +866,5 @@\n>     */\n>    initialize: function(conn, tabActor, options) {\n>      protocol.Actor.prototype.initialize.call(this, conn);\n> +\n> +    this.conn.addActorPool(this);\n\nWhy do you do this here? All protocol.js Actors do this, if I correctly understand protocol.js.\n\n@@ +926,5 @@\n> +\n> +    this.dbg.enabled = false;\n> +    this.dbg = null;\n> +\n> +    this.conn.removeActorPool(this);\n\nSame question as above.\n\n@@ +1946,5 @@\n> +   * widget\n> +   */\n> +  getActorGripForNode: method(function(node) {\n> +    let dbgGlobal = this.dbg.makeGlobalObjectReference(this.rootWin);\n> +    let value = dbgGlobal.makeDebuggeeValue(node.rawNode);\n\nWhat happens if rawNode comes from an iframe? For the webconsole we needed to get the global from the rawNode, not assume rootWin. See makeDebuggeeValue() in the console actor.\n\n@@ +1960,5 @@\n> +\n> +  // Making the walker act as a ThreadActor so it can create node value grips.\n> +  // This is somewhat similar to what the webconsole actor does, except that\n> +  // the ThreadActor class isn't globally available here.\n> +  // FIXME: the ThreadActor should be moved to its own separate module so it\n\nIs this something you want to do in this bug or do you want to file a follow-up? If the latter, please add the bug number in the comment.\n\n::: toolkit/devtools/server/actors/object-stringifier.js\n@@ +16,5 @@\n> + *        The object to stringify.\n> + * @return String\n> + *         The stringification for the object.\n> + */\n> +exports.stringify = function(obj) {\n\nDid you make any changes in the code you moved from script.js into this file? If yes, do you have a diff?\n\n::: toolkit/devtools/server/actors/object.js\n@@ +8,5 @@\n> +\n> +const {Cu} = require(\"chrome\");\n> +const {DebuggerServer} = Cu.import(\"resource://gre/modules/devtools/dbg-server.jsm\", {});\n> +const {DevToolsUtils} = Cu.import(\"resource://gre/modules/devtools/DevToolsUtils.jsm\", {});\n> +const {stringify} = require(\"devtools/server/actors/object-stringifier\");\n\nWhy do you move out the stringifiers from script.js into their own file? They seem to be only used by the ObjectActor (object.js). Also, they are deprecated until bug 952197 is fixed - we now have the object previewers (which you can find in script.js).\n\n@@ +18,5 @@\n> + *        The debuggee object.\n> + * @param aThreadActor ThreadActor\n> + *        The parent thread actor for this object.\n> + */\n> +function ObjectActor(aObj, aThreadActor) {\n\nDid you make any changes in the code you moved from script.js into this file? If yes, do you have a diff?\n\n::: toolkit/devtools/server/actors/webconsole.js\n@@ -260,5 @@\n>  \n>    _createValueGrip: ThreadActor.prototype.createValueGrip,\n>    _stringIsLong: ThreadActor.prototype._stringIsLong,\n> -  _findProtoChain: ThreadActor.prototype._findProtoChain,\n> -  _removeFromProtoChain: ThreadActor.prototype._removeFromProtoChain,\n\nPlease also remove the references to _protoChains.", "attachment_id": 8363914, "time": "2014-01-23T21:19:20Z", "tags": [], "count": 38, "text": "Comment on attachment 8363914\nbug704094-inspector-domview-part1-Adds-the-sidebar.patch\n\nReview of attachment 8363914:\n-----------------------------------------------------------------\n\nPatch looks good and I'm really glad to see we will have a DOM panel in the inspector - finally. ;)\n\nDo you plan to add editing of properties in this patch? If not, please file a follow-up bug - we should allow editing of properties, like the debugger and console do.\n\n::: browser/devtools/dominspector/dominspector-panel.xul\n@@ +9,5 @@\n> +<?xml-stylesheet href=\"chrome://browser/skin/devtools/common.css\" type=\"text/css\"?>\n> +<?xml-stylesheet href=\"chrome://browser/skin/devtools/widgets.css\" type=\"text/css\"?>\n> +<?xul-overlay href=\"chrome://global/content/editMenuOverlay.xul\"?>\n> +\n> +<xul:window xmlns:xul=\"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\"\n\nWhy not make XUL the default namespace?\n\n@@ +18,5 @@\n> +  <script type=\"application/javascript;version=1.8\"\n> +          src=\"chrome://browser/content/devtools/theme-switching.js\"/>\n> +  <script type=\"application/javascript;version=1.8\"\n> +          src=\"chrome://browser/content/devtools/dominspector.js\"/>\n> +  <xul:script type=\"application/javascript\" src=\"chrome://global/content/globalOverlay.js\"/>\n\nWhy do you mix <script> tags with and without the xul prefix?\n\n@@ +24,5 @@\n> +  <xul:box id=\"variable-view\"\n> +       class=\"devtools-responsive-container theme-body\"\n> +       flex=\"1\"/>\n> +\n> +  <script type=\"application/javascript;version=1.8\">\n\nWe have bug 960728 about removing all of the inlined scripts and styles. Please avoid adding this inlined script here.\n\n::: browser/devtools/dominspector/dominspector.js\n@@ +11,5 @@\n> +Cu.import(\"resource:///modules/devtools/VariablesViewController.jsm\");\n> +Cu.import(\"resource://gre/modules/devtools/dbg-client.jsm\");\n> +Cu.import(\"resource://gre/modules/devtools/Loader.jsm\");\n> +Cu.import(\"resource://gre/modules/XPCOMUtils.jsm\");\n> +let promise = devtools.require(\"sdk/core/promise\");\n\nnit: you might want to lazy import/require modules you dont need when someone does require(\"dominspector\").\n\nAlso, you might want to use Promise.jsm - the promise implementation that doesn't swallow exceptions.\n\n@@ +13,5 @@\n> +Cu.import(\"resource://gre/modules/devtools/Loader.jsm\");\n> +Cu.import(\"resource://gre/modules/XPCOMUtils.jsm\");\n> +let promise = devtools.require(\"sdk/core/promise\");\n> +\n> +function DomInspector(inspector, rootEl) {\n\nPlease add jsdoc comments to functions/public methods.\n\n::: toolkit/components/telemetry/Histograms.json\n@@ +5071,5 @@\n>    },\n> +  \"DEVTOOLS_DOMINSPECTOR_OPENED_BOOLEAN\": {\n> +    \"expires_in_version\": \"never\",\n> +    \"kind\": \"boolean\",\n> +    \"description\": \"How many times has the devtool's DOM Inspector been opened?\"\n\nThis might be confusing. Which DOM inspector? The markup view is a type of a DOM inspector.\n\nI would suggest: How many times has the DOM panel been opened in the Inspector devtool?\n\n... better suggestions are welcome.\n\nI see below you use this in more places. Why not call it the DOM panel? Even in the devtools folder \"inspector\" versus \"dominspector\" could be confusing. You could put the DOM panel in devtools/inspector/ - a dom-panel.js and .xul.\n\nI dont know if we have any \"policy\", but I was under the impression that the top level devtools/ folder should be used for tools.\n\n(these concerns do not block the review, just mentioning my thoughts - no strong opinions on this. If you feel inclined to do something, maybe you should ping paul/joe to ask.)\n\n::: toolkit/devtools/server/actors/inspector.js\n@@ +866,5 @@\n>     */\n>    initialize: function(conn, tabActor, options) {\n>      protocol.Actor.prototype.initialize.call(this, conn);\n> +\n> +    this.conn.addActorPool(this);\n\nWhy do you do this here? All protocol.js Actors do this, if I correctly understand protocol.js.\n\n@@ +926,5 @@\n> +\n> +    this.dbg.enabled = false;\n> +    this.dbg = null;\n> +\n> +    this.conn.removeActorPool(this);\n\nSame question as above.\n\n@@ +1946,5 @@\n> +   * widget\n> +   */\n> +  getActorGripForNode: method(function(node) {\n> +    let dbgGlobal = this.dbg.makeGlobalObjectReference(this.rootWin);\n> +    let value = dbgGlobal.makeDebuggeeValue(node.rawNode);\n\nWhat happens if rawNode comes from an iframe? For the webconsole we needed to get the global from the rawNode, not assume rootWin. See makeDebuggeeValue() in the console actor.\n\n@@ +1960,5 @@\n> +\n> +  // Making the walker act as a ThreadActor so it can create node value grips.\n> +  // This is somewhat similar to what the webconsole actor does, except that\n> +  // the ThreadActor class isn't globally available here.\n> +  // FIXME: the ThreadActor should be moved to its own separate module so it\n\nIs this something you want to do in this bug or do you want to file a follow-up? If the latter, please add the bug number in the comment.\n\n::: toolkit/devtools/server/actors/object-stringifier.js\n@@ +16,5 @@\n> + *        The object to stringify.\n> + * @return String\n> + *         The stringification for the object.\n> + */\n> +exports.stringify = function(obj) {\n\nDid you make any changes in the code you moved from script.js into this file? If yes, do you have a diff?\n\n::: toolkit/devtools/server/actors/object.js\n@@ +8,5 @@\n> +\n> +const {Cu} = require(\"chrome\");\n> +const {DebuggerServer} = Cu.import(\"resource://gre/modules/devtools/dbg-server.jsm\", {});\n> +const {DevToolsUtils} = Cu.import(\"resource://gre/modules/devtools/DevToolsUtils.jsm\", {});\n> +const {stringify} = require(\"devtools/server/actors/object-stringifier\");\n\nWhy do you move out the stringifiers from script.js into their own file? They seem to be only used by the ObjectActor (object.js). Also, they are deprecated until bug 952197 is fixed - we now have the object previewers (which you can find in script.js).\n\n@@ +18,5 @@\n> + *        The debuggee object.\n> + * @param aThreadActor ThreadActor\n> + *        The parent thread actor for this object.\n> + */\n> +function ObjectActor(aObj, aThreadActor) {\n\nDid you make any changes in the code you moved from script.js into this file? If yes, do you have a diff?\n\n::: toolkit/devtools/server/actors/webconsole.js\n@@ -260,5 @@\n>  \n>    _createValueGrip: ThreadActor.prototype.createValueGrip,\n>    _stringIsLong: ThreadActor.prototype._stringIsLong,\n> -  _findProtoChain: ThreadActor.prototype._findProtoChain,\n> -  _removeFromProtoChain: ThreadActor.prototype._removeFromProtoChain,\n\nPlease also remove the references to _protoChains.", "author": "mihai.sucan@gmail.com", "creator": "mihai.sucan@gmail.com", "creation_time": "2014-01-23T21:19:20Z", "is_private": false, "bug_id": 704094, "id": 8327543}, {"author": "mihai.sucan@gmail.com", "text": "(In reply to Patrick Brosset [:pbrosset] from comment #37)\n> Comment on attachment 8363914\n> bug704094-inspector-domview-part1-Adds-the-sidebar.patch\n> \n> Mihai, getting a review on the part that returns actor grips would be\n> awesome since you did this for the webconsole.\n\nThat part seems fine. Is the threadActor always available on the tabActor? I understand these are wip patches, so dont worry about all the comments, I noted them so we dont forget things with the next update.", "count": 39, "creator": "mihai.sucan@gmail.com", "creation_time": "2014-01-23T21:22:57Z", "is_private": false, "id": 8327556, "bug_id": 704094, "attachment_id": null, "raw_text": "(In reply to Patrick Brosset [:pbrosset] from comment #37)\n> Comment on attachment 8363914\n> bug704094-inspector-domview-part1-Adds-the-sidebar.patch\n> \n> Mihai, getting a review on the part that returns actor grips would be\n> awesome since you did this for the webconsole.\n\nThat part seems fine. Is the threadActor always available on the tabActor? I understand these are wip patches, so dont worry about all the comments, I noted them so we dont forget things with the next update.", "time": "2014-01-23T21:22:57Z", "tags": []}, {"creator": "gijskruitbosch+bugs@gmail.com", "text": "*** Bug 1066026 has been marked as a duplicate of this bug. ***", "count": 40, "author": "gijskruitbosch+bugs@gmail.com", "bug_id": 704094, "id": 9512112, "creation_time": "2014-10-28T17:40:42Z", "is_private": false, "time": "2014-10-28T17:40:42Z", "raw_text": "", "attachment_id": null, "tags": []}, {"creator": "patrickbrosset+bugzilla@gmail.com", "creation_time": "2014-12-03T23:23:15Z", "is_private": false, "attachment_id": null, "tags": [], "author": "patrickbrosset+bugzilla@gmail.com", "text": "NIing Mike on this old bug which I never finished ...\nGetting this landed would be great! For info, I also started bug 1101569 to make the sidebar easier to use when there are many tabs. So attachment 8363915 should be ignored here.", "count": 41, "bug_id": 704094, "id": 9658721, "raw_text": "NIing Mike on this old bug which I never finished ...\nGetting this landed would be great! For info, I also started bug 1101569 to make the sidebar easier to use when there are many tabs. So attachment 8363915 should be ignored here.", "time": "2014-12-03T23:23:15Z"}, {"tags": [], "time": "2015-04-17T11:06:42Z", "raw_text": "I don't have time to work on this at the moment. I would prefer a sidebar than our current context menu implementation because I think it would be more discoverable and useable.", "attachment_id": null, "bug_id": 704094, "id": 10167587, "is_private": false, "creation_time": "2015-04-17T11:06:42Z", "creator": "michael@ratcliffefamily.org", "count": 42, "text": "I don't have time to work on this at the moment. I would prefer a sidebar than our current context menu implementation because I think it would be more discoverable and useable.", "author": "michael@ratcliffefamily.org"}, {"creator": "sebastianzartner@gmail.com", "author": "sebastianzartner@gmail.com", "count": 43, "text": "*** Bug 1306160 has been marked as a duplicate of this bug. ***", "bug_id": 704094, "id": 11746689, "creation_time": "2016-09-29T12:06:01Z", "is_private": false, "time": "2016-09-29T12:06:01Z", "attachment_id": null, "raw_text": "", "tags": []}, {"creation_time": "2017-02-06T21:09:04Z", "is_private": false, "creator": "sebastianzartner@gmail.com", "tags": [], "attachment_id": null, "id": 12042731, "bug_id": 704094, "text": "*** Bug 1320351 has been marked as a duplicate of this bug. ***", "count": 44, "author": "sebastianzartner@gmail.com", "time": "2017-02-06T21:09:04Z", "raw_text": ""}, {"tags": [], "time": "2017-02-14T06:14:50Z", "attachment_id": null, "raw_text": "Resetting assignee due to lack of activity.", "bug_id": 704094, "id": 12064553, "creation_time": "2017-02-14T06:14:50Z", "is_private": false, "creator": "gl@mozilla.com", "author": "gl@mozilla.com", "count": 45, "text": "Resetting assignee due to lack of activity."}, {"attachment_id": null, "tags": ["advocacy"], "creator": "dan_256@yahoo.com", "creation_time": "2018-06-08T21:36:57Z", "is_private": false, "raw_text": "A little disheartening that the last activity was 1 year ago, and that was just recognition of a lack of activity.", "time": "2018-06-08T21:36:57Z", "author": "dan_256@yahoo.com", "text": "A little disheartening that the last activity was 1 year ago, and that was just recognition of a lack of activity.", "count": 46, "bug_id": 704094, "id": 13397282}, {"tags": [], "time": "2018-06-08T23:25:32Z", "raw_text": "I have a colleague that still uses an ancient build of Firefox so they can us Firebug and the dom properties panel.  In Fx, currently, the right-click, \"show dom properties\" gets kind of close. In Firebug, that panel was on the right in a tabbed interface, and in Fx, it's in a panel below (using the console), but that's a minor issue.  The real issue is that I cannot seem to edit the dom properties in the \"inspect($0)\" anymore.  I think I used to be able to in Fx, but I know I was able to in Firebug DOM Properties.\n\nFx dev tools is better than Firebug in most ways, now, but this seems a major oversight to me.  It was one of the best features of Firebug.", "attachment_id": null, "bug_id": 704094, "id": 13397473, "creation_time": "2018-06-08T23:25:32Z", "is_private": false, "creator": "dan_256@yahoo.com", "text": "I have a colleague that still uses an ancient build of Firefox so they can us Firebug and the dom properties panel.  In Fx, currently, the right-click, \"show dom properties\" gets kind of close. In Firebug, that panel was on the right in a tabbed interface, and in Fx, it's in a panel below (using the console), but that's a minor issue.  The real issue is that I cannot seem to edit the dom properties in the \"inspect($0)\" anymore.  I think I used to be able to in Fx, but I know I was able to in Firebug DOM Properties.\n\nFx dev tools is better than Firebug in most ways, now, but this seems a major oversight to me.  It was one of the best features of Firebug.", "count": 47, "author": "dan_256@yahoo.com"}, {"attachment_id": null, "tags": [], "creator": "patrickbrosset+bugzilla@gmail.com", "creation_time": "2018-09-18T07:10:40Z", "is_private": false, "time": "2018-09-18T07:10:40Z", "raw_text": "", "count": 48, "text": "*** Bug 1491877 has been marked as a duplicate of this bug. ***", "author": "patrickbrosset+bugzilla@gmail.com", "id": 13622444, "bug_id": 704094}, {"creation_time": "2019-03-07T13:00:28Z", "is_private": false, "id": 13971110, "bug_id": 704094, "count": 49, "text": "What is the status of this bug? I see that at comment 38 a patch was reviewed (it was 5 years ago), than after, some patch was marked obsolete and there is no more acrivities.", "author": "malix0@gmail.com", "creator": "malix0@gmail.com", "tags": [], "raw_text": "What is the status of this bug? I see that at comment 38 a patch was reviewed (it was 5 years ago), than after, some patch was marked obsolete and there is no more acrivities.", "attachment_id": null, "time": "2019-03-07T13:00:28Z"}, {"time": "2019-03-07T13:14:07Z", "raw_text": "This bug is paused because the feature isn't deemed high priority enough by the team at Mozilla working on devtools, and its community of volunteers.\nThe patch that was done a number of years ago will likely not apply anymore and we would have to start from scratch again.\nThe right-click/show dom properties is the best alternative to this feature if you do need it. \nAt this stage, I don't expect activity on this bug unless someone had time to commit to it. And even then, the extra sidebar would still cause usability problems as the inspector's tabbar isn't easily navigable.\n\nMartin: would you say we're actively trying to avoid adding more sidebar panels, or would we land the patch if someone did spend the time to create it? \nJust trying to figure out if we should WONTFIX this or not.", "text": "This bug is paused because the feature isn't deemed high priority enough by the team at Mozilla working on devtools, and its community of volunteers.\nThe patch that was done a number of years ago will likely not apply anymore and we would have to start from scratch again.\nThe right-click/show dom properties is the best alternative to this feature if you do need it. \nAt this stage, I don't expect activity on this bug unless someone had time to commit to it. And even then, the extra sidebar would still cause usability problems as the inspector's tabbar isn't easily navigable.\n\nMartin: would you say we're actively trying to avoid adding more sidebar panels, or would we land the patch if someone did spend the time to create it? \nJust trying to figure out if we should WONTFIX this or not.", "count": 50, "author": "patrickbrosset+bugzilla@gmail.com", "bug_id": 704094, "id": 13971130, "attachment_id": null, "tags": [], "creator": "patrickbrosset+bugzilla@gmail.com", "is_private": false, "creation_time": "2019-03-07T13:14:07Z"}, {"attachment_id": null, "tags": [], "creator": "patrickbrosset+bugzilla@gmail.com", "creation_time": "2019-03-13T13:24:04Z", "is_private": false, "time": "2019-03-13T13:24:04Z", "raw_text": "As discussed with Martin, this isn't a priority right now for the mozilla team working on devtools. However we'll happily accept patches if people want to fix this.\nNote however that I've made this depend on bug 1534982 because we ideally want to fix the tabbar situation first.", "author": "patrickbrosset+bugzilla@gmail.com", "count": 51, "text": "As discussed with Martin, this isn't a priority right now for the mozilla team working on devtools. However we'll happily accept patches if people want to fix this.\nNote however that I've made this depend on bug 1534982 because we ideally want to fix the tabbar situation first.", "bug_id": 704094, "id": 13983960}]}}, "comments": {}}