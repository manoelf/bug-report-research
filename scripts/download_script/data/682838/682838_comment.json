{"bugs": {"682838": {"comments": [{"raw_text": "GIO remote locations are not showed in file open/save dialog so user is not allowed to open and save to remote location (like sftp://, smb://, obex:// etc) mounted by GIO.", "attachment_id": null, "text": "GIO remote locations are not showed in file open/save dialog so user is not allowed to open and save to remote location (like sftp://, smb://, obex:// etc) mounted by GIO.", "bug_id": 682838, "tags": [], "id": 5684844, "count": 0, "is_private": false, "author": "jhorak@redhat.com", "time": "2011-08-29T14:33:47Z", "creation_time": "2011-08-29T14:33:47Z", "creator": "jhorak@redhat.com"}, {"tags": [], "bug_id": 682838, "text": "This bug is still valid and I'm thinking how to fix it. The FilePicker dialog return nsILocalFile. This file differs from GIO file in many ways. You can't get FILE or PRFileDesc of file on remote host (thru GIO). Also load() doesn't make a sense with files stored on remote host. However nsGIOFile can be derived from nsIFile, all required methods can be bound to GIO functions.\nProblem is that FilePicker returns nsILocalFile (by GetFile method) and not nsIFile. So I'm unsure how to proceed with implementation of GIO for Mozilla products.\n\nTwo approaches came into my mind:\n1. Derive nsGIO from nsIFile, make GetFile return nsIFile, rework all usage of FilePicker class by checking whenever nsIFile is nsILocalFile or nsGIOFile.\n2. Derive nsGIOFile from nsILocalFile, mark irrelevant methods of parent class nsILocalFile as not implemented, in some cases change FilePicker usage to check if nsILocalFile returned by GetFile() can be cast to nsGIOFile. However I'm not sure if nsILocalFile methods are required for open/save dialog, setting download location, import/export bookmarks, etc.\n\nIdeas welcomed.", "attachment_id": null, "raw_text": "This bug is still valid and I'm thinking how to fix it. The FilePicker dialog return nsILocalFile. This file differs from GIO file in many ways. You can't get FILE or PRFileDesc of file on remote host (thru GIO). Also load() doesn't make a sense with files stored on remote host. However nsGIOFile can be derived from nsIFile, all required methods can be bound to GIO functions.\nProblem is that FilePicker returns nsILocalFile (by GetFile method) and not nsIFile. So I'm unsure how to proceed with implementation of GIO for Mozilla products.\n\nTwo approaches came into my mind:\n1. Derive nsGIO from nsIFile, make GetFile return nsIFile, rework all usage of FilePicker class by checking whenever nsIFile is nsILocalFile or nsGIOFile.\n2. Derive nsGIOFile from nsILocalFile, mark irrelevant methods of parent class nsILocalFile as not implemented, in some cases change FilePicker usage to check if nsILocalFile returned by GetFile() can be cast to nsGIOFile. However I'm not sure if nsILocalFile methods are required for open/save dialog, setting download location, import/export bookmarks, etc.\n\nIdeas welcomed.", "time": "2011-12-19T14:59:04Z", "creation_time": "2011-12-19T14:59:04Z", "creator": "jhorak@redhat.com", "author": "jhorak@redhat.com", "id": 5926616, "count": 1, "is_private": false}, {"is_private": false, "count": 2, "id": 6151286, "creator": "jhorak@redhat.com", "time": "2012-03-19T13:04:38Z", "creation_time": "2012-03-19T13:04:38Z", "author": "jhorak@redhat.com", "attachment_id": 607138, "raw_text": "I've managed to create a patch finally for which I'd like to get a feedback. I've used nsILocalFile as base for nsGIOFile. I also implemented nsGIOOutputStream and fixed nsGIOInputStream a bit.", "text": "Created attachment 607138\nwip patch 1 - may be close to final\n\nI've managed to create a patch finally for which I'd like to get a feedback. I've used nsILocalFile as base for nsGIOFile. I also implemented nsGIOOutputStream and fixed nsGIOInputStream a bit.", "bug_id": 682838, "tags": []}, {"bug_id": 682838, "text": "Hi, thanks for the work regarding this bug. Is it already clear in what version of Thunderbird the patch gets?\nI am looking forward to a solution for Bug 378425 which depends on this one here.", "tags": [], "attachment_id": null, "raw_text": "Hi, thanks for the work regarding this bug. Is it already clear in what version of Thunderbird the patch gets?\nI am looking forward to a solution for Bug 378425 which depends on this one here.", "creator": "gleppert@gmx.de", "creation_time": "2012-05-01T10:41:50Z", "time": "2012-05-01T10:41:50Z", "author": "gleppert@gmx.de", "is_private": false, "count": 3, "id": 6268708}, {"author": "jhorak@redhat.com", "creator": "jhorak@redhat.com", "creation_time": "2012-05-04T12:36:38Z", "time": "2012-05-04T12:36:38Z", "is_private": false, "id": 6279907, "count": 4, "bug_id": 682838, "text": "Karl, could you let me know if this approach is valid (wip patch 1), please? I'm not sure if I should continue working on this by this way. There is still some work to do, like fixing download manager. This feature is wanted by our user base, so that's why I'm bothering you again.", "tags": [], "raw_text": "Karl, could you let me know if this approach is valid (wip patch 1), please? I'm not sure if I should continue working on this by this way. There is still some work to do, like fixing download manager. This feature is wanted by our user base, so that's why I'm bothering you again.", "attachment_id": null}, {"author": "karlt@mozbugz.karlt.net", "creator": "karlt@mozbugz.karlt.net", "time": "2012-05-07T06:24:34Z", "creation_time": "2012-05-07T06:24:34Z", "is_private": false, "id": 6284867, "count": 5, "tags": [], "bug_id": 682838, "text": "I'm finding it hard to provide feedback here as I'm not familiar with the relevant interfaces.\n\nSome initial comments:\n\nSince bug 682360, nsIFile and nsILocalFile are the same interface.\n\nPart of this bug is very similar to bug 121059, where there is a patch using quite a different approach, but that patch didn't get to a state that was considered acceptable because it doesn't yet avoid blocking the main thread on network activity.\n\nBug 412822 added the nsIURL interface to nsIFilePicker together with filterAllowURLs to deal with the misfit with nsILocalFile or nsIFileURL.\n\n(In reply to jhorak from comment #4)\n> This feature is wanted by our user base\n\nCan you describe the most common situation(s) where this feature is desired, please?\nIs it downloading to an SMB network file system that is not mounted, or downloading via obex to mobile device, or something else?", "raw_text": "I'm finding it hard to provide feedback here as I'm not familiar with the relevant interfaces.\n\nSome initial comments:\n\nSince bug 682360, nsIFile and nsILocalFile are the same interface.\n\nPart of this bug is very similar to bug 121059, where there is a patch using quite a different approach, but that patch didn't get to a state that was considered acceptable because it doesn't yet avoid blocking the main thread on network activity.\n\nBug 412822 added the nsIURL interface to nsIFilePicker together with filterAllowURLs to deal with the misfit with nsILocalFile or nsIFileURL.\n\n(In reply to jhorak from comment #4)\n> This feature is wanted by our user base\n\nCan you describe the most common situation(s) where this feature is desired, please?\nIs it downloading to an SMB network file system that is not mounted, or downloading via obex to mobile device, or something else?", "attachment_id": null}, {"is_private": false, "count": 6, "id": 6284888, "creator": "gleppert@gmx.de", "time": "2012-05-07T06:49:34Z", "creation_time": "2012-05-07T06:49:34Z", "author": "gleppert@gmx.de", "attachment_id": null, "raw_text": "@Karl: Since this bug blocks bug 378425 which I am very much interested in, I describe a typical situation where a solution is absolutely necessary: \nIn many working groups most (or all) of the relevant documents are stored in an SMB network file system. Hence, attaching files to an email from a SMB share and saving an attachment to a SMB share is an absolute must. \nI look forward to a solution.", "bug_id": 682838, "text": "@Karl: Since this bug blocks bug 378425 which I am very much interested in, I describe a typical situation where a solution is absolutely necessary: \nIn many working groups most (or all) of the relevant documents are stored in an SMB network file system. Hence, attaching files to an email from a SMB share and saving an attachment to a SMB share is an absolute must. \nI look forward to a solution.", "tags": []}, {"author": "bzbarsky@mit.edu", "creator": "bzbarsky@mit.edu", "time": "2012-05-10T01:45:17Z", "creation_time": "2012-05-10T01:45:17Z", "is_private": false, "id": 6295463, "count": 7, "bug_id": 682838, "text": "So my gut reaction is that having those ifdefs all over is pretty suboptimal and that this will completely fall down as soon as someone tries to use a filepicker from JS.\n\nnsIFile and nsILocalFile _used_ to be separate precisely because the former could be a remote file as here...  But of course all consumers probably assumed it was an nsILocalFile anyway...\n\nI'm really not sure what a sane setup here is.  :(  Benjamin, any ideas?", "tags": [], "raw_text": "So my gut reaction is that having those ifdefs all over is pretty suboptimal and that this will completely fall down as soon as someone tries to use a filepicker from JS.\n\nnsIFile and nsILocalFile _used_ to be separate precisely because the former could be a remote file as here...  But of course all consumers probably assumed it was an nsILocalFile anyway...\n\nI'm really not sure what a sane setup here is.  :(  Benjamin, any ideas?", "attachment_id": null}, {"tags": [], "text": "The current form of nsIFile is only intended for files which can be opened by the OS using open() or equivalent.\n\nI lack any context about what kind of UI maps to GIO remote locations are or whether we want to support that. It seems that other OSes (Windows and Linux) actually mount network shares to the local filesystem (either via SMB paths like \\\\server\\foo or by actually mounting them to Z:/ or to /Volumes).\n\nIf this \"thing\" on Linux is actually using URIs instead of files, then we shouldn't try to make the nsIFile API fit it. But it's also completely unclear to me why we would need \"setSupportsFileURL\" in this patch.", "bug_id": 682838, "raw_text": "The current form of nsIFile is only intended for files which can be opened by the OS using open() or equivalent.\n\nI lack any context about what kind of UI maps to GIO remote locations are or whether we want to support that. It seems that other OSes (Windows and Linux) actually mount network shares to the local filesystem (either via SMB paths like \\\\server\\foo or by actually mounting them to Z:/ or to /Volumes).\n\nIf this \"thing\" on Linux is actually using URIs instead of files, then we shouldn't try to make the nsIFile API fit it. But it's also completely unclear to me why we would need \"setSupportsFileURL\" in this patch.", "attachment_id": null, "author": "benjamin@smedbergs.us", "creator": "benjamin@smedbergs.us", "time": "2012-05-10T13:58:02Z", "creation_time": "2012-05-10T13:58:02Z", "is_private": false, "id": 6296595, "count": 8}, {"creator": "jhorak@redhat.com", "creation_time": "2012-05-10T14:32:14Z", "time": "2012-05-10T14:32:14Z", "author": "jhorak@redhat.com", "is_private": false, "count": 9, "id": 6296702, "tags": [], "bug_id": 682838, "text": "I'm not proud of setSupportsFileURL. It is kind of a hack which forces nsStandardURL to treat nsGIOFile as nsILocalFile. Without this nsStandardURL couldn't be cast to nsIFileURL and call GetFile() or SetFile which is later used for uploading files from html form. See:\nhttp://mxr.mozilla.org/mozilla-central/source/netwerk/base/src/nsStandardURL.cpp#971\nhttp://mxr.mozilla.org/mozilla-central/source/content/html/content/src/nsHTMLInputElement.cpp#415\n\nAbout Linux and GIO situation: There's fallback mode for applications which doesn't support GIO directly. It's in $HOME/.gvfs directory and it is mostly disliked by users (too slow, etc). There's strong tendency to port all GTK apps to GIO.\nSee:\nhttps://bugzilla.redhat.com/show_bug.cgi?id=668448\nhttps://bugzilla.redhat.com/show_bug.cgi?id=666929\nGIO has now api for pretty much everything for file manipulation on remote locations. For users it allows to work seamlessly with local or remote located files without actually noticing it. That's what https://bugzilla.mozilla.org/show_bug.cgi?id=378425 is all about.\n\nI can rework the patch completely, but I need some guidance here. I'm not sure where to start different approach.", "attachment_id": null, "raw_text": "I'm not proud of setSupportsFileURL. It is kind of a hack which forces nsStandardURL to treat nsGIOFile as nsILocalFile. Without this nsStandardURL couldn't be cast to nsIFileURL and call GetFile() or SetFile which is later used for uploading files from html form. See:\nhttp://mxr.mozilla.org/mozilla-central/source/netwerk/base/src/nsStandardURL.cpp#971\nhttp://mxr.mozilla.org/mozilla-central/source/content/html/content/src/nsHTMLInputElement.cpp#415\n\nAbout Linux and GIO situation: There's fallback mode for applications which doesn't support GIO directly. It's in $HOME/.gvfs directory and it is mostly disliked by users (too slow, etc). There's strong tendency to port all GTK apps to GIO.\nSee:\nhttps://bugzilla.redhat.com/show_bug.cgi?id=668448\nhttps://bugzilla.redhat.com/show_bug.cgi?id=666929\nGIO has now api for pretty much everything for file manipulation on remote locations. For users it allows to work seamlessly with local or remote located files without actually noticing it. That's what https://bugzilla.mozilla.org/show_bug.cgi?id=378425 is all about.\n\nI can rework the patch completely, but I need some guidance here. I'm not sure where to start different approach."}, {"id": 6296703, "count": 10, "is_private": false, "creation_time": "2012-05-10T14:32:34Z", "time": "2012-05-10T14:32:34Z", "creator": "jhorak@redhat.com", "author": "jhorak@redhat.com", "attachment_id": null, "raw_text": "And thanks for feedback!", "text": "And thanks for feedback!", "bug_id": 682838, "tags": []}, {"id": 6297292, "count": 11, "is_private": false, "time": "2012-05-10T16:52:30Z", "creation_time": "2012-05-10T16:52:30Z", "creator": "benjamin@smedbergs.us", "author": "benjamin@smedbergs.us", "attachment_id": null, "raw_text": "I think the takeaway here is that nsGIOFile is almost certainly the incorrect solution to this problem, since it will not behave like files and in general we assume that all nsIFile are nsLocalFile (and we even static_cast then in the impl, IIRC). We should be doing something like bug 121059 and just treating all of these as URLs.", "tags": [], "text": "I think the takeaway here is that nsGIOFile is almost certainly the incorrect solution to this problem, since it will not behave like files and in general we assume that all nsIFile are nsLocalFile (and we even static_cast then in the impl, IIRC). We should be doing something like bug 121059 and just treating all of these as URLs.", "bug_id": 682838}, {"bug_id": 682838, "text": "(In reply to Benjamin Smedberg  [:bsmedberg] from comment #8)\n> It seems that other OSes (Windows and\n> Linux) actually mount network shares to the local filesystem (either via SMB\n> paths like \\\\server\\foo or by actually mounting them to Z:/ or to /Volumes).\n\nI assume the reason to use URLs and GIO/GVFS instead of a kernel mount is that authentication is user-specific and doesn't need privileges at system level.", "tags": [], "raw_text": "(In reply to Benjamin Smedberg  [:bsmedberg] from comment #8)\n> It seems that other OSes (Windows and\n> Linux) actually mount network shares to the local filesystem (either via SMB\n> paths like \\\\server\\foo or by actually mounting them to Z:/ or to /Volumes).\n\nI assume the reason to use URLs and GIO/GVFS instead of a kernel mount is that authentication is user-specific and doesn't need privileges at system level.", "attachment_id": null, "author": "karlt@mozbugz.karlt.net", "creator": "karlt@mozbugz.karlt.net", "creation_time": "2012-05-10T22:59:28Z", "time": "2012-05-10T22:59:28Z", "is_private": false, "id": 6299103, "count": 12}, {"author": "bzbarsky@mit.edu", "creation_time": "2012-05-11T05:45:31Z", "time": "2012-05-11T05:45:31Z", "creator": "bzbarsky@mit.edu", "count": 13, "id": 6299808, "is_private": false, "bug_id": 682838, "text": "Comment on attachment 607138\nwip patch 1 - may be close to final\n\nI'm going to call this feedback-, for lack of anything better...", "tags": [], "raw_text": "I'm going to call this feedback-, for lack of anything better...", "attachment_id": 607138}, {"tags": [], "text": "So after looking into sourcecode I've found out this:\n- Opening gio locations is just fine. This is solved by gio extension already. It only requires to add filterAllowURLs to FilePicker filters in couple of .js files. I also need to fix LastOpenDirectory\n\n- To upload files from gio locations I need to rework nsDOMFileFile like it was proposed in bug 121059. But I'm not sure about 'sync-loading' thing mentioned in bug (that's why it didn't get a review). Is loading of remote content done in main thread so it blocks UI?\n\n- To save page/image/whatever to gio location I will have to rework nsDownloadManager and contentUtils.js. The nsDownloadManager expect that target nsURI is also nsIFileURL which works only for 'file://...' specs.\n\nThere should be more changes in Thunderbird, I'll check that later.\n\nThanks for feedbacks.", "bug_id": 682838, "raw_text": "So after looking into sourcecode I've found out this:\n- Opening gio locations is just fine. This is solved by gio extension already. It only requires to add filterAllowURLs to FilePicker filters in couple of .js files. I also need to fix LastOpenDirectory\n\n- To upload files from gio locations I need to rework nsDOMFileFile like it was proposed in bug 121059. But I'm not sure about 'sync-loading' thing mentioned in bug (that's why it didn't get a review). Is loading of remote content done in main thread so it blocks UI?\n\n- To save page/image/whatever to gio location I will have to rework nsDownloadManager and contentUtils.js. The nsDownloadManager expect that target nsURI is also nsIFileURL which works only for 'file://...' specs.\n\nThere should be more changes in Thunderbird, I'll check that later.\n\nThanks for feedbacks.", "attachment_id": null, "author": "jhorak@redhat.com", "creation_time": "2012-05-11T19:45:19Z", "time": "2012-05-11T19:45:19Z", "creator": "jhorak@redhat.com", "count": 14, "id": 6301634, "is_private": false}, {"text": "> Is loading of remote content done in main thread so it blocks UI?\n\nnsDOMFile::GetAsBinary has to do just that, yes: block UI until the data is loaded.\n\nI believe the real issue with the sync bits was that the patch in bug 121059 spun an event loop to make an async load look like a sync one, and could therefore cause code to be reentered that did not expect to be reentered....  Precisely because network access does NOT normally block UI, while the web-exposed API there is expected to do so.\n\nOr put another way, the DOM File API expects that files are just that: files.", "bug_id": 682838, "tags": [], "attachment_id": null, "raw_text": "> Is loading of remote content done in main thread so it blocks UI?\n\nnsDOMFile::GetAsBinary has to do just that, yes: block UI until the data is loaded.\n\nI believe the real issue with the sync bits was that the patch in bug 121059 spun an event loop to make an async load look like a sync one, and could therefore cause code to be reentered that did not expect to be reentered....  Precisely because network access does NOT normally block UI, while the web-exposed API there is expected to do so.\n\nOr put another way, the DOM File API expects that files are just that: files.", "creator": "bzbarsky@mit.edu", "creation_time": "2012-05-11T20:00:29Z", "time": "2012-05-11T20:00:29Z", "author": "bzbarsky@mit.edu", "is_private": false, "id": 6301668, "count": 15}, {"author": "jhorak@redhat.com", "creator": "jhorak@redhat.com", "creation_time": "2012-05-15T11:30:01Z", "time": "2012-05-15T11:30:01Z", "is_private": false, "id": 6308368, "count": 16, "tags": [], "text": "I'm working on saving content to GIO location and I stuck on nsWebBrowserPersist::MakeOutputStreamFromURI, particulary here:\nhttp://mxr.mozilla.org/mozilla-central/source/embedding/components/webbrowserpersist/src/nsWebBrowserPersist.cpp#2332\n\nI'd like to create nsGIOOutputStream here instead of nsIStorageStream just for case we're trying to save to GIO location. But I miss the right parent class which allows me to init output stream with nsIURI. Using nsIFileOutputStream makes no sense now since it requires nsIFile in Init() method. Any hint here? Should I create new subclass of nsIOutputStream like nsINetworkOutputStream with Init(nsIURI) and inherit nsGIOOutputStream from it or is there better approach?", "bug_id": 682838, "raw_text": "I'm working on saving content to GIO location and I stuck on nsWebBrowserPersist::MakeOutputStreamFromURI, particulary here:\nhttp://mxr.mozilla.org/mozilla-central/source/embedding/components/webbrowserpersist/src/nsWebBrowserPersist.cpp#2332\n\nI'd like to create nsGIOOutputStream here instead of nsIStorageStream just for case we're trying to save to GIO location. But I miss the right parent class which allows me to init output stream with nsIURI. Using nsIFileOutputStream makes no sense now since it requires nsIFile in Init() method. Any hint here? Should I create new subclass of nsIOutputStream like nsINetworkOutputStream with Init(nsIURI) and inherit nsGIOOutputStream from it or is there better approach?", "attachment_id": null}, {"is_private": false, "id": 6326185, "count": 17, "creator": "bzbarsky@mit.edu", "time": "2012-05-22T03:43:58Z", "creation_time": "2012-05-22T03:43:58Z", "author": "bzbarsky@mit.edu", "attachment_id": null, "raw_text": "Well, one option would be to simply implement upload (in the nsIUploadChannel sense) for GIO channels, and then that code would Just Work, I think.  The only caveat is that it would buffer up the data in memory before calling AsyncOpen() on your channel and setting the upload stream.\n\nBut yes, the other option is to change MakeOutputStream or MakeOutputStreamFromURI to just create some subclass of nsIOutputStream (however you decide to do that) and initialize it with your URI (however you do that).  I'm not sure whether this is better, since presumably writes to this stream would still either buffer up in memory or block on network, right?  I guess you could read the data out of the stream async on a separate thread or something....", "text": "Well, one option would be to simply implement upload (in the nsIUploadChannel sense) for GIO channels, and then that code would Just Work, I think.  The only caveat is that it would buffer up the data in memory before calling AsyncOpen() on your channel and setting the upload stream.\n\nBut yes, the other option is to change MakeOutputStream or MakeOutputStreamFromURI to just create some subclass of nsIOutputStream (however you decide to do that) and initialize it with your URI (however you do that).  I'm not sure whether this is better, since presumably writes to this stream would still either buffer up in memory or block on network, right?  I guess you could read the data out of the stream async on a separate thread or something....", "bug_id": 682838, "tags": []}, {"raw_text": "Attaching first version of patch which allows to save to remote locations (GIO). What doesn't work is remembering last save dir for GIO locations.", "id": 6348329, "count": 18, "attachment_id": 628323, "is_private": false, "bug_id": 682838, "text": "Created attachment 628323\nPatch which allows to save files/page to gio location 1\n\nAttaching first version of patch which allows to save to remote locations (GIO). What doesn't work is remembering last save dir for GIO locations.", "tags": [], "author": "jhorak@redhat.com", "time": "2012-05-30T13:39:02Z", "creation_time": "2012-05-30T13:39:02Z", "creator": "jhorak@redhat.com"}, {"is_private": false, "id": 6348337, "count": 19, "creator": "jhorak@redhat.com", "time": "2012-05-30T13:41:44Z", "creation_time": "2012-05-30T13:41:44Z", "author": "jhorak@redhat.com", "attachment_id": 628325, "raw_text": "Ops, removed some irrelevant portions.", "tags": [], "text": "Created attachment 628325\nPatch which allows to save files/page to gio location 1\n\nOps, removed some irrelevant portions.", "bug_id": 682838}, {"id": 6348560, "count": 20, "is_private": false, "creation_time": "2012-05-30T14:48:11Z", "time": "2012-05-30T14:48:11Z", "creator": "bzbarsky@mit.edu", "author": "bzbarsky@mit.edu", "attachment_id": null, "raw_text": "I'm probably not going to get to this today, and you'll need another reviewer for the browser/ changes.\n\nThat said, from a quick glance, why are you hand-writing QueryInterface functions instead of using NS_IMPL_ISUPPORTS macros?", "tags": [], "bug_id": 682838, "text": "I'm probably not going to get to this today, and you'll need another reviewer for the browser/ changes.\n\nThat said, from a quick glance, why are you hand-writing QueryInterface functions instead of using NS_IMPL_ISUPPORTS macros?"}, {"text": "(In reply to Boris Zbarsky (:bz) from comment #20)\n> I'm probably not going to get to this today, and you'll need another\n> reviewer for the browser/ changes.\n> \n> That said, from a quick glance, why are you hand-writing QueryInterface\n> functions instead of using NS_IMPL_ISUPPORTS macros?\n\nBecause in:\nhttps://bugzilla.mozilla.org/attachment.cgi?id=628325&action=diff#a/embedding/components/webbrowserpersist/src/nsWebBrowserPersist.cpp_sec2\nI'm doing QueryInterface of NS_GIOPROTOCOL_HANDLER_IMPL_IID to determine if I'm handling gio protocol handler and should create nsGIOOutput stream instead of nsIStorageStream.\nI don't know how to do it more clear by using macros.", "bug_id": 682838, "tags": [], "attachment_id": null, "raw_text": "(In reply to Boris Zbarsky (:bz) from comment #20)\n> I'm probably not going to get to this today, and you'll need another\n> reviewer for the browser/ changes.\n> \n> That said, from a quick glance, why are you hand-writing QueryInterface\n> functions instead of using NS_IMPL_ISUPPORTS macros?\n\nBecause in:\nhttps://bugzilla.mozilla.org/attachment.cgi?id=628325&action=diff#a/embedding/components/webbrowserpersist/src/nsWebBrowserPersist.cpp_sec2\nI'm doing QueryInterface of NS_GIOPROTOCOL_HANDLER_IMPL_IID to determine if I'm handling gio protocol handler and should create nsGIOOutput stream instead of nsIStorageStream.\nI don't know how to do it more clear by using macros.", "creation_time": "2012-05-31T10:06:52Z", "time": "2012-05-31T10:06:52Z", "creator": "jhorak@redhat.com", "author": "jhorak@redhat.com", "id": 6351491, "count": 21, "is_private": false}, {"is_private": false, "count": 22, "id": 6352021, "creator": "bzbarsky@mit.edu", "creation_time": "2012-05-31T14:10:23Z", "time": "2012-05-31T14:10:23Z", "author": "bzbarsky@mit.edu", "attachment_id": null, "raw_text": "But you actually added an IID to nsGIOProtocolHandler, no?  So you should just be able to do:\n\n  NS_IMPL_ISUPPORTS3(nsGIOProtocolHandler, nsIProtocolHandler, nsIObserver,\n                     nsGIOProtocolHandler)\n\nI would think.", "tags": [], "text": "But you actually added an IID to nsGIOProtocolHandler, no?  So you should just be able to do:\n\n  NS_IMPL_ISUPPORTS3(nsGIOProtocolHandler, nsIProtocolHandler, nsIObserver,\n                     nsGIOProtocolHandler)\n\nI would think.", "bug_id": 682838}, {"id": 6360111, "count": 23, "is_private": false, "author": "bzbarsky@mit.edu", "time": "2012-06-04T02:14:03Z", "creation_time": "2012-06-04T02:14:03Z", "creator": "bzbarsky@mit.edu", "raw_text": ">+++ b/browser/components/downloads/content/downloads.js\n\nLike I said, this needs review from a browser peer.  Maybe Gavin?\n\n>+++ b/embedding/components/webbrowserpersist/src/nsWebBrowserPersist.cpp\n>+ * This is helper method for creating nsINetworkOutputStream for saving files to\n>+ * remote locations. Only GIO backend is supported right now. At first it checks\n>+ * if aURI's scheme is supported by nsGIOProtocolHandler.\n\nSo I think this would be less hardcoded for GIO if we required that protocol handlers that want to enable network output streams just implement an interface which hands out an nsIOutputStream given a URI.  Then this code could get the protocol for the given scheme, QI to this interface, and get the output stream.  No hardcoding of GIO involved.\n\n>+  nsIProtocolHandler *tmp_handler;\n>+  rv = handler->QueryInterface(NS_GIOPROTOCOL_HANDLER_IMPL_IID, (void **) &tmp_handler);\n\nAn no manual QI calls involved.  Which would be good, since this call here leaks the handler when the QI succeeds...\n\n>+  nsCOMPtr<nsISupports> output_stream = do_CreateInstance(NS_NETWORK_PROTOCOL_CONTRACTID_PREFIX\"moz-gio-output-stream\", &rv);\n>+  NS_ENSURE_SUCCESS(rv, rv);\n>+\n>+  nsCOMPtr<nsINetworkOutputStream> network_os = do_QueryInterface(output_stream, &rv);\n\nFor future reference, this could have been written simply as:\n\n  nsCOMPtr<nsINetworkOutputStream> network_os = do_CreateInstance(NS_NETWORK_PROTOCOL_CONTRACTID_PREFIX\"moz-gio-output-stream\", &rv);\n\nbecause do_CreateInstance will do a QI to the target interface anyway.\n\n> nsWebBrowserPersist::MakeOutputStreamFromURI(\n>+    if (MakeNetworkOutputStreamFromURI(aURI, aOutputStream) == NS_OK)\n\nProbably better to test NS_SUCCEEDED.\n\n>+++ b/extensions/gio/nsGIOProtocolHandler.cpp\n>+class nsGIOOutputStream: public nsINetworkOutputStream\n\nI'm not really competent to review the gtk bits here.  Maybe karlt?\n\nThat said, a few general comments:\n\n1)  Does calling write() and the like after close() return an error or crash?  It should do the former, so if the various GTK bits are not safe with a null mGIOStream we should be null-checking it up front.\n\n2)  You probably do want an implementation of WriteFrom at some point.\n\n3)  Returning NOT_IMPLEMENTED from WriteSegments is fine if there is no underlying buffer, as here.\n\n4)  false for IsNonBlocking looks right to me.\n\n\n>+++ b/netwerk/base/public/nsINetworkStreams.idl\n\nMPL2, please.  The license boilerplate is at http://www.mozilla.org/MPL/headers/\n\nBut if you take the other approach I suggest above, you may not even need this interface.\n\n>+++ b/toolkit/components/downloads/nsDownloadManager.cpp\n\nThis and the other toolkit code should probably get review from a toolkit peer (again Gavin?).\n\n>+  if (rv == NS_OK) {\n\nNS_SUCCEEDED(rv)\n\n>+      dl->mDisplayName = NS_ConvertUTF8toUTF16(filename);\n\n  CopyUTF8ToUTF16(filename, dl->mDisplayName);", "attachment_id": 628325, "bug_id": 682838, "text": "Comment on attachment 628325\nPatch which allows to save files/page to gio location 1\n\n>+++ b/browser/components/downloads/content/downloads.js\n\nLike I said, this needs review from a browser peer.  Maybe Gavin?\n\n>+++ b/embedding/components/webbrowserpersist/src/nsWebBrowserPersist.cpp\n>+ * This is helper method for creating nsINetworkOutputStream for saving files to\n>+ * remote locations. Only GIO backend is supported right now. At first it checks\n>+ * if aURI's scheme is supported by nsGIOProtocolHandler.\n\nSo I think this would be less hardcoded for GIO if we required that protocol handlers that want to enable network output streams just implement an interface which hands out an nsIOutputStream given a URI.  Then this code could get the protocol for the given scheme, QI to this interface, and get the output stream.  No hardcoding of GIO involved.\n\n>+  nsIProtocolHandler *tmp_handler;\n>+  rv = handler->QueryInterface(NS_GIOPROTOCOL_HANDLER_IMPL_IID, (void **) &tmp_handler);\n\nAn no manual QI calls involved.  Which would be good, since this call here leaks the handler when the QI succeeds...\n\n>+  nsCOMPtr<nsISupports> output_stream = do_CreateInstance(NS_NETWORK_PROTOCOL_CONTRACTID_PREFIX\"moz-gio-output-stream\", &rv);\n>+  NS_ENSURE_SUCCESS(rv, rv);\n>+\n>+  nsCOMPtr<nsINetworkOutputStream> network_os = do_QueryInterface(output_stream, &rv);\n\nFor future reference, this could have been written simply as:\n\n  nsCOMPtr<nsINetworkOutputStream> network_os = do_CreateInstance(NS_NETWORK_PROTOCOL_CONTRACTID_PREFIX\"moz-gio-output-stream\", &rv);\n\nbecause do_CreateInstance will do a QI to the target interface anyway.\n\n> nsWebBrowserPersist::MakeOutputStreamFromURI(\n>+    if (MakeNetworkOutputStreamFromURI(aURI, aOutputStream) == NS_OK)\n\nProbably better to test NS_SUCCEEDED.\n\n>+++ b/extensions/gio/nsGIOProtocolHandler.cpp\n>+class nsGIOOutputStream: public nsINetworkOutputStream\n\nI'm not really competent to review the gtk bits here.  Maybe karlt?\n\nThat said, a few general comments:\n\n1)  Does calling write() and the like after close() return an error or crash?  It should do the former, so if the various GTK bits are not safe with a null mGIOStream we should be null-checking it up front.\n\n2)  You probably do want an implementation of WriteFrom at some point.\n\n3)  Returning NOT_IMPLEMENTED from WriteSegments is fine if there is no underlying buffer, as here.\n\n4)  false for IsNonBlocking looks right to me.\n\n\n>+++ b/netwerk/base/public/nsINetworkStreams.idl\n\nMPL2, please.  The license boilerplate is at http://www.mozilla.org/MPL/headers/\n\nBut if you take the other approach I suggest above, you may not even need this interface.\n\n>+++ b/toolkit/components/downloads/nsDownloadManager.cpp\n\nThis and the other toolkit code should probably get review from a toolkit peer (again Gavin?).\n\n>+  if (rv == NS_OK) {\n\nNS_SUCCEEDED(rv)\n\n>+      dl->mDisplayName = NS_ConvertUTF8toUTF16(filename);\n\n  CopyUTF8ToUTF16(filename, dl->mDisplayName);", "tags": []}, {"text": "(In reply to Boris Zbarsky (:bz) from comment #23)\n> >+      dl->mDisplayName = NS_ConvertUTF8toUTF16(filename);\n> \n>   CopyUTF8ToUTF16(filename, dl->mDisplayName);\nShould I include nsStringAPI.h or nsReadableUtils.h?", "bug_id": 682838, "tags": [], "attachment_id": null, "raw_text": "(In reply to Boris Zbarsky (:bz) from comment #23)\n> >+      dl->mDisplayName = NS_ConvertUTF8toUTF16(filename);\n> \n>   CopyUTF8ToUTF16(filename, dl->mDisplayName);\nShould I include nsStringAPI.h or nsReadableUtils.h?", "time": "2012-06-06T12:42:50Z", "creation_time": "2012-06-06T12:42:50Z", "creator": "jhorak@redhat.com", "author": "jhorak@redhat.com", "id": 6367776, "count": 24, "is_private": false}, {"attachment_id": 630526, "raw_text": "Thanks for reviewing, I've chopped the patch to smaller sections to easy review process.", "bug_id": 682838, "text": "Created attachment 630526\nSupport for NewNetworkOutputStream v1\n\nThanks for reviewing, I've chopped the patch to smaller sections to easy review process.", "tags": [], "is_private": false, "id": 6367780, "count": 25, "creator": "jhorak@redhat.com", "time": "2012-06-06T12:45:08Z", "creation_time": "2012-06-06T12:45:08Z", "author": "jhorak@redhat.com"}, {"author": "jhorak@redhat.com", "time": "2012-06-06T12:46:32Z", "creation_time": "2012-06-06T12:46:32Z", "creator": "jhorak@redhat.com", "id": 6367785, "count": 26, "is_private": false, "bug_id": 682838, "text": "Created attachment 630529\nAdd nsGIOOutputStream to nsGIOProtocolHandler", "tags": [], "raw_text": "", "attachment_id": 630529}, {"count": 27, "id": 6367787, "is_private": false, "author": "jhorak@redhat.com", "creation_time": "2012-06-06T12:48:12Z", "time": "2012-06-06T12:48:12Z", "creator": "jhorak@redhat.com", "raw_text": "", "attachment_id": 630530, "tags": [], "bug_id": 682838, "text": "Created attachment 630530\nToolkit and browser part"}, {"text": "> Should I include nsStringAPI.h or nsReadableUtils.h?\n\nnsReadableUtils.h", "bug_id": 682838, "tags": [], "attachment_id": null, "raw_text": "> Should I include nsStringAPI.h or nsReadableUtils.h?\n\nnsReadableUtils.h", "creator": "bzbarsky@mit.edu", "time": "2012-06-06T15:06:15Z", "creation_time": "2012-06-06T15:06:15Z", "author": "bzbarsky@mit.edu", "is_private": false, "count": 28, "id": 6368153}, {"author": "bzbarsky@mit.edu", "creation_time": "2012-06-06T20:26:25Z", "time": "2012-06-06T20:26:25Z", "creator": "bzbarsky@mit.edu", "count": 29, "id": 6369367, "is_private": false, "bug_id": 682838, "text": "Hmm.  I'm torn between the approach in the patch and putting the newNetworkOutputStream thing on a separate interface that most protocol handlers just wouldn't QI to....", "tags": [], "raw_text": "Hmm.  I'm torn between the approach in the patch and putting the newNetworkOutputStream thing on a separate interface that most protocol handlers just wouldn't QI to....", "attachment_id": null}, {"count": 30, "id": 6377354, "is_private": false, "creation_time": "2012-06-09T02:35:49Z", "time": "2012-06-09T02:35:49Z", "creator": "bzbarsky@mit.edu", "author": "bzbarsky@mit.edu", "attachment_id": 630526, "raw_text": "I think a separate interface plays better with extension-implemented protocols.  Can you please do that?", "bug_id": 682838, "text": "Comment on attachment 630526\nSupport for NewNetworkOutputStream v1\n\nI think a separate interface plays better with extension-implemented protocols.  Can you please do that?", "tags": []}, {"tags": [], "bug_id": 682838, "text": "Created attachment 631863\nSupport for NewNetworkOutputStream v2\n\nI hope that's what you have in mind. It seems to be more subtle change than adding nsIOutputStream::NewNetworkOutputStream, I like it. I'm not sure about interface name, feel free to suggest better one.", "attachment_id": 631863, "raw_text": "I hope that's what you have in mind. It seems to be more subtle change than adding nsIOutputStream::NewNetworkOutputStream, I like it. I'm not sure about interface name, feel free to suggest better one.", "time": "2012-06-11T12:27:51Z", "creation_time": "2012-06-11T12:27:51Z", "creator": "jhorak@redhat.com", "author": "jhorak@redhat.com", "count": 31, "id": 6379982, "is_private": false}, {"author": "jhorak@redhat.com", "creator": "jhorak@redhat.com", "creation_time": "2012-06-11T12:29:45Z", "time": "2012-06-11T12:29:45Z", "is_private": false, "count": 32, "id": 6379985, "text": "Created attachment 631864\nAdd nsGIOOutputStream to nsGIOProtocolHandler v2\n\nBy introducing nsISupportsNetworkOutputStreams changes were also required to this attachment.", "bug_id": 682838, "tags": [], "raw_text": "By introducing nsISupportsNetworkOutputStreams changes were also required to this attachment.", "attachment_id": 631864}, {"creator": "bzbarsky@mit.edu", "creation_time": "2012-06-12T03:39:58Z", "time": "2012-06-12T03:39:58Z", "author": "bzbarsky@mit.edu", "is_private": false, "id": 6382669, "count": 33, "text": "Comment on attachment 631863\nSupport for NewNetworkOutputStream v2\n\n>+#include \"nsISupportsNetworkOutputStreams.h\"\n\nHow about nsINetworkOutputProtocolHandler ?\n\n>+            /* Without set mCancel to true call of SendErrorStatusChange will\n>+             * end in endless loop when we're saving to remote location */\n\n  If we don't set mCancel to true, calling SendErrorStatusChange will result\n  in an endless loop when we're saving to remote location\n\n> Only GIO backend is supported right now.\n\nNo reason to mention that here.  What's supported is any backend that implements the right interface.\n\n>+nsWebBrowserPersist::MakeNetworkOutputStreamFromURI(nsIURI *aURI,\n>+  nsCString scheme;\n\nDeclare this right before it's used?\n\n>+  *aOutputStream = NULL;\n\nI don't think that line is needed.\n\n>+++ b/netwerk/base/public/nsISupportsNetworkOutputStreams.idl\n\nMPL2 license, please.  And see my suggested name above.\n\nr=me with those nits picked.", "bug_id": 682838, "tags": [], "attachment_id": 631863, "raw_text": ">+#include \"nsISupportsNetworkOutputStreams.h\"\n\nHow about nsINetworkOutputProtocolHandler ?\n\n>+            /* Without set mCancel to true call of SendErrorStatusChange will\n>+             * end in endless loop when we're saving to remote location */\n\n  If we don't set mCancel to true, calling SendErrorStatusChange will result\n  in an endless loop when we're saving to remote location\n\n> Only GIO backend is supported right now.\n\nNo reason to mention that here.  What's supported is any backend that implements the right interface.\n\n>+nsWebBrowserPersist::MakeNetworkOutputStreamFromURI(nsIURI *aURI,\n>+  nsCString scheme;\n\nDeclare this right before it's used?\n\n>+  *aOutputStream = NULL;\n\nI don't think that line is needed.\n\n>+++ b/netwerk/base/public/nsISupportsNetworkOutputStreams.idl\n\nMPL2 license, please.  And see my suggested name above.\n\nr=me with those nits picked."}, {"tags": [], "text": "Created attachment 632233\nSupport for NewNetworkOutputStream v3\n\nDo we need superreview for this?", "bug_id": 682838, "attachment_id": 632233, "raw_text": "Do we need superreview for this?", "creator": "jhorak@redhat.com", "time": "2012-06-12T13:44:54Z", "creation_time": "2012-06-12T13:44:54Z", "author": "jhorak@redhat.com", "is_private": false, "count": 34, "id": 6383748}, {"time": "2012-06-12T13:45:31Z", "creation_time": "2012-06-12T13:45:31Z", "creator": "jhorak@redhat.com", "author": "jhorak@redhat.com", "id": 6383751, "count": 35, "is_private": false, "bug_id": 682838, "text": "Created attachment 632235\nAdd nsGIOOutputStream to nsGIOProtocolHandler v2", "tags": [], "attachment_id": 632235, "raw_text": ""}, {"tags": [], "text": "Comment on attachment 631864\nAdd nsGIOOutputStream to nsGIOProtocolHandler v2\n\nMarking as obsolete du to changes to Support for NewNetworkOutputStream patch.", "bug_id": 682838, "attachment_id": 631864, "raw_text": "Marking as obsolete du to changes to Support for NewNetworkOutputStream patch.", "creator": "jhorak@redhat.com", "time": "2012-06-12T13:48:17Z", "creation_time": "2012-06-12T13:48:17Z", "author": "jhorak@redhat.com", "is_private": false, "id": 6383757, "count": 36}, {"is_private": false, "count": 37, "id": 6384707, "author": "bzbarsky@mit.edu", "creator": "bzbarsky@mit.edu", "time": "2012-06-12T18:09:42Z", "creation_time": "2012-06-12T18:09:42Z", "raw_text": "Probably worth Benjamin giving this a once-over", "attachment_id": 632233, "text": "Comment on attachment 632233\nSupport for NewNetworkOutputStream v3\n\nProbably worth Benjamin giving this a once-over", "bug_id": 682838, "tags": []}, {"author": "benjamin@smedbergs.us", "creator": "benjamin@smedbergs.us", "time": "2012-06-14T18:17:57Z", "creation_time": "2012-06-14T18:17:57Z", "is_private": false, "id": 6392440, "count": 38, "tags": [], "bug_id": 682838, "text": "I will not be able to look at this until next week.", "raw_text": "I will not be able to look at this until next week.", "attachment_id": null}, {"tags": [], "bug_id": 682838, "text": "Created attachment 634041\nwip - Support for saving attachments to GIO locations\n\nI'm working on support for saving attachment and messages from Thunderbird to remote locations using GIO backend. I happened to run into several usage of nsIFile and I'm looking at opportunity to use nsIFileURL instead. I'd like to get some feedback on this subject to let me know how wrong is my approach from mailnews guys. Thanks in forward.", "raw_text": "I'm working on support for saving attachment and messages from Thunderbird to remote locations using GIO backend. I happened to run into several usage of nsIFile and I'm looking at opportunity to use nsIFileURL instead. I'd like to get some feedback on this subject to let me know how wrong is my approach from mailnews guys. Thanks in forward.", "attachment_id": 634041, "author": "jhorak@redhat.com", "creator": "jhorak@redhat.com", "time": "2012-06-18T15:06:49Z", "creation_time": "2012-06-18T15:06:49Z", "is_private": false, "id": 6399705, "count": 39}, {"count": 40, "id": 6399786, "is_private": false, "creation_time": "2012-06-18T15:27:54Z", "time": "2012-06-18T15:27:54Z", "creator": "standard8@mozilla.com", "author": "standard8@mozilla.com", "attachment_id": 634041, "raw_text": "I suspect David might be able to give more immediate feedback than myself.", "tags": [], "bug_id": 682838, "text": "Comment on attachment 634041\nwip - Support for saving attachments to GIO locations\n\nI suspect David might be able to give more immediate feedback than myself."}, {"raw_text": "jhorak, I don't suppose there's any way to test this on windows?", "attachment_id": null, "bug_id": 682838, "text": "jhorak, I don't suppose there's any way to test this on windows?", "tags": [], "count": 41, "id": 6401502, "is_private": false, "author": "mozilla@davidbienvenu.org", "time": "2012-06-18T23:13:28Z", "creation_time": "2012-06-18T23:13:28Z", "creator": "mozilla@davidbienvenu.org"}, {"attachment_id": null, "raw_text": "I doubt it, only if you could build with --enable-gio and --enable-extensions=gio options and use GTK as ui toolkit.", "bug_id": 682838, "text": "I doubt it, only if you could build with --enable-gio and --enable-extensions=gio options and use GTK as ui toolkit.", "tags": [], "count": 42, "id": 6402297, "is_private": false, "time": "2012-06-19T07:28:04Z", "creation_time": "2012-06-19T07:28:04Z", "creator": "jhorak@redhat.com", "author": "jhorak@redhat.com"}, {"raw_text": "In this code, is aFileURI always a remote file uri? Or really, just a remote URL? I think it might make the code easier to understand if the variable names reflect that.\n\nWe try to use nsnull instead of NULL.\n\nI could be wrong, but I feel like there's some opportunity to avoid passing two parameters around all the time, one nsIFile and one nsIURI. A couple methods just convert the nsIFile to an nsIURI if the nsIFile parameter is non-null. If possible, I'd like to avoid that. If you need a helper method that converts an nsIFile to an nsIURI and then calls SaveAttachment(s) with all the other params, that would be better than passing two parameters all the time.\n\nA few style things:\n\n+      if (NS_FAILED(rv)) {\n+        localFile = nsnull;\n+      }\n\nwe don't use braces for single line if's.\n\n+      } else {\n\nelse goes on it's own line, with the {\n\ni.e.,\n}\nelse {\n\npretty sure Neil won't be happy with the + string stuff :-)", "attachment_id": 634041, "tags": [], "bug_id": 682838, "text": "Comment on attachment 634041\nwip - Support for saving attachments to GIO locations\n\nIn this code, is aFileURI always a remote file uri? Or really, just a remote URL? I think it might make the code easier to understand if the variable names reflect that.\n\nWe try to use nsnull instead of NULL.\n\nI could be wrong, but I feel like there's some opportunity to avoid passing two parameters around all the time, one nsIFile and one nsIURI. A couple methods just convert the nsIFile to an nsIURI if the nsIFile parameter is non-null. If possible, I'd like to avoid that. If you need a helper method that converts an nsIFile to an nsIURI and then calls SaveAttachment(s) with all the other params, that would be better than passing two parameters all the time.\n\nA few style things:\n\n+      if (NS_FAILED(rv)) {\n+        localFile = nsnull;\n+      }\n\nwe don't use braces for single line if's.\n\n+      } else {\n\nelse goes on it's own line, with the {\n\ni.e.,\n}\nelse {\n\npretty sure Neil won't be happy with the + string stuff :-)", "id": 6423544, "count": 43, "is_private": false, "author": "mozilla@davidbienvenu.org", "time": "2012-06-26T15:06:36Z", "creation_time": "2012-06-26T15:06:36Z", "creator": "mozilla@davidbienvenu.org"}, {"author": "jhorak@redhat.com", "creator": "jhorak@redhat.com", "time": "2012-07-16T09:34:45Z", "creation_time": "2012-07-16T09:34:45Z", "is_private": false, "id": 6475179, "count": 44, "tags": [], "bug_id": 682838, "text": "Created attachment 642509\nBrowser part v2\n\nDue to some updates to GIO thunderbird patch, I'm attaching next version of patches:\n- allows attaching files from remote locations\n- allows opening of remote locations from File/Open and Open location\n- Downloads: can open files and directories on remote locations\nPlease have a look.", "raw_text": "Due to some updates to GIO thunderbird patch, I'm attaching next version of patches:\n- allows attaching files from remote locations\n- allows opening of remote locations from File/Open and Open location\n- Downloads: can open files and directories on remote locations\nPlease have a look.", "attachment_id": 642509}, {"attachment_id": 642510, "raw_text": "Support for downloading to remote locations.\n- resume\n- cancel\n- Using local temp file when downloading to remote locations. When download is finished, file is uploaded to remote location (this would require change of mTempFile to mTempFileURI and couple additional changes).", "tags": [], "text": "Created attachment 642510\nToolkit part v2\n\nSupport for downloading to remote locations.\n- resume\n- cancel\n- Using local temp file when downloading to remote locations. When download is finished, file is uploaded to remote location (this would require change of mTempFile to mTempFileURI and couple additional changes).", "bug_id": 682838, "count": 45, "id": 6475201, "is_private": false, "time": "2012-07-16T09:40:25Z", "creation_time": "2012-07-16T09:40:25Z", "creator": "jhorak@redhat.com", "author": "jhorak@redhat.com"}, {"is_private": false, "id": 6475217, "count": 46, "author": "jhorak@redhat.com", "creator": "jhorak@redhat.com", "creation_time": "2012-07-16T09:44:33Z", "time": "2012-07-16T09:44:33Z", "raw_text": "A nsGIOProtocolHandler is also derived from nsINetworkOutputProtocolHandler and it implements few methods required for saving to remote locations (check if file specified by URI exists and is a directory, remove file by URI and moving files by using two URIs).", "attachment_id": 642512, "text": "Created attachment 642512\nAdd nsGIOOutputStream, expand nsGIOProtocolHandler v3\n\nA nsGIOProtocolHandler is also derived from nsINetworkOutputProtocolHandler and it implements few methods required for saving to remote locations (check if file specified by URI exists and is a directory, remove file by URI and moving files by using two URIs).", "bug_id": 682838, "tags": []}, {"attachment_id": 642514, "raw_text": "I'm re-requesting once again because I've added few more methods to nsINetworkOutputStream. I also changed mFinalFileDestination to mFinalFileDestinationURI in nsExternalHelperAppService and targetFile to mTargetFileURI in nsIHelperAppLauncherDialog.", "tags": [], "text": "Created attachment 642514\nSupport for NewNetworkOutputStream v4\n\nI'm re-requesting once again because I've added few more methods to nsINetworkOutputStream. I also changed mFinalFileDestination to mFinalFileDestinationURI in nsExternalHelperAppService and targetFile to mTargetFileURI in nsIHelperAppLauncherDialog.", "bug_id": 682838, "count": 47, "id": 6475225, "is_private": false, "time": "2012-07-16T09:50:42Z", "creation_time": "2012-07-16T09:50:42Z", "creator": "jhorak@redhat.com", "author": "jhorak@redhat.com"}, {"id": 6476257, "count": 48, "is_private": false, "creation_time": "2012-07-16T16:41:07Z", "time": "2012-07-16T16:41:07Z", "creator": "jhorak@redhat.com", "author": "jhorak@redhat.com", "attachment_id": 642614, "raw_text": "Fixed some minor issues.", "bug_id": 682838, "text": "Created attachment 642614\nToolkit part v3\n\nFixed some minor issues.", "tags": []}, {"attachment_id": 642514, "raw_text": "The new methods look like they require sync I/O on the main thread.  That seems somewhat suboptimal.", "bug_id": 682838, "text": "Comment on attachment 642514\nSupport for NewNetworkOutputStream v4\n\nThe new methods look like they require sync I/O on the main thread.  That seems somewhat suboptimal.", "tags": [], "id": 6478675, "count": 49, "is_private": false, "time": "2012-07-17T04:17:31Z", "creation_time": "2012-07-17T04:17:31Z", "creator": "bzbarsky@mit.edu", "author": "bzbarsky@mit.edu"}, {"id": 6479849, "count": 50, "is_private": false, "creation_time": "2012-07-17T15:32:39Z", "time": "2012-07-17T15:32:39Z", "creator": "jhorak@redhat.com", "author": "jhorak@redhat.com", "attachment_id": 642967, "raw_text": "First version of TB patch:\n - In nsIMsgMailNewsUrl.idl changed messageFile to destinationFileURI\n - Converted usage of nsIFile to nsIURI where required\n - Get/SetLastSaveDirectory doesn't work for remote locations", "text": "Created attachment 642967\nmailnews patch v1\n\nFirst version of TB patch:\n - In nsIMsgMailNewsUrl.idl changed messageFile to destinationFileURI\n - Converted usage of nsIFile to nsIURI where required\n - Get/SetLastSaveDirectory doesn't work for remote locations", "bug_id": 682838, "tags": []}, {"creation_time": "2012-07-17T15:39:01Z", "time": "2012-07-17T15:39:01Z", "creator": "jhorak@redhat.com", "author": "jhorak@redhat.com", "id": 6479864, "count": 51, "is_private": false, "text": "(In reply to Boris Zbarsky (:bz) from comment #49)\n> Comment on attachment 642514\n> Support for NewNetworkOutputStream v4\n> \n> The new methods look like they require sync I/O on the main thread.  That\n> seems somewhat suboptimal.\nThanks for looking. Yeah, it may cause some UI freeze but only when user is operating with remote locations (like trying to open downloaded file or starting download). This might be expected when using remote locations. Do you have any hint how to avoid this problem?", "bug_id": 682838, "tags": [], "attachment_id": null, "raw_text": "(In reply to Boris Zbarsky (:bz) from comment #49)\n> Comment on attachment 642514\n> Support for NewNetworkOutputStream v4\n> \n> The new methods look like they require sync I/O on the main thread.  That\n> seems somewhat suboptimal.\nThanks for looking. Yeah, it may cause some UI freeze but only when user is operating with remote locations (like trying to open downloaded file or starting download). This might be expected when using remote locations. Do you have any hint how to avoid this problem?"}, {"is_private": false, "attachment_id": null, "id": 6479908, "count": 52, "raw_text": "Well, the canonical way would be to make those functions return things asynchronously and make the callers deal with that.", "creator": "bzbarsky@mit.edu", "creation_time": "2012-07-17T15:54:28Z", "time": "2012-07-17T15:54:28Z", "author": "bzbarsky@mit.edu", "bug_id": 682838, "text": "Well, the canonical way would be to make those functions return things asynchronously and make the callers deal with that.", "tags": []}, {"bug_id": 682838, "text": "(In reply to Boris Zbarsky (:bz) from comment #52)\n> Well, the canonical way would be to make those functions return things\n> asynchronously and make the callers deal with that.\nAnd what construction would you recommend? Observer, PRThreads, nsRunnable or something else?\nSorry, I didn't have a chance to do async IO in mozilla yet.", "tags": [], "attachment_id": null, "raw_text": "(In reply to Boris Zbarsky (:bz) from comment #52)\n> Well, the canonical way would be to make those functions return things\n> asynchronously and make the callers deal with that.\nAnd what construction would you recommend? Observer, PRThreads, nsRunnable or something else?\nSorry, I didn't have a chance to do async IO in mozilla yet.", "creator": "jhorak@redhat.com", "time": "2012-07-18T15:25:53Z", "creation_time": "2012-07-18T15:25:53Z", "author": "jhorak@redhat.com", "is_private": false, "id": 6483723, "count": 53}, {"attachment_id": null, "raw_text": "From the API standpoint you would hand in some callback interface and it would get notified when the operation is done, right?\n\nFrom an implementation standpoint, seems like a separate GIO thread that you communicate with via runnables is the way to go....", "tags": [], "bug_id": 682838, "text": "From the API standpoint you would hand in some callback interface and it would get notified when the operation is done, right?\n\nFrom an implementation standpoint, seems like a separate GIO thread that you communicate with via runnables is the way to go....", "count": 54, "id": 6483888, "is_private": false, "time": "2012-07-18T16:11:11Z", "creation_time": "2012-07-18T16:11:11Z", "creator": "bzbarsky@mit.edu", "author": "bzbarsky@mit.edu"}, {"attachment_id": null, "raw_text": "That seems to be a bit complicated to change for example nsDownload to work with events from other threads. Are all IO operations required (ie. remove, isDir, exists) to be implemented as async requests? \nActually GIO have async version for most of file operations but the problem is how to propagate results of these async calls to mozilla-central code (where the code requires result for further actions and it used sync calls). A lot of changes (and high possibility of bringing new bugs), at least it seems to me. Maybe I see it too much complicated.", "bug_id": 682838, "text": "That seems to be a bit complicated to change for example nsDownload to work with events from other threads. Are all IO operations required (ie. remove, isDir, exists) to be implemented as async requests? \nActually GIO have async version for most of file operations but the problem is how to propagate results of these async calls to mozilla-central code (where the code requires result for further actions and it used sync calls). A lot of changes (and high possibility of bringing new bugs), at least it seems to me. Maybe I see it too much complicated.", "tags": [], "is_private": false, "count": 55, "id": 6486995, "creator": "jhorak@redhat.com", "creation_time": "2012-07-19T11:18:26Z", "time": "2012-07-19T11:18:26Z", "author": "jhorak@redhat.com"}, {"raw_text": "Generally we're moving to making all I/O be async as much as possible, yes.  I can't speak to the situation with nsDownload; I'm not familiar with that code.  If it's already doing sync file operations, that might be OK, I guess.", "attachment_id": null, "text": "Generally we're moving to making all I/O be async as much as possible, yes.  I can't speak to the situation with nsDownload; I'm not familiar with that code.  If it's already doing sync file operations, that might be OK, I guess.", "bug_id": 682838, "tags": [], "is_private": false, "count": 56, "id": 6488615, "author": "bzbarsky@mit.edu", "creator": "bzbarsky@mit.edu", "time": "2012-07-19T18:55:02Z", "creation_time": "2012-07-19T18:55:02Z"}, {"bug_id": 682838, "text": "Given that nsIFile has synchronous I/O APIs, I guess that means we're moving nsIFile usage off the main thread?", "tags": [], "raw_text": "Given that nsIFile has synchronous I/O APIs, I guess that means we're moving nsIFile usage off the main thread?", "attachment_id": null, "author": "karlt@mozbugz.karlt.net", "creator": "karlt@mozbugz.karlt.net", "time": "2012-07-19T19:00:15Z", "creation_time": "2012-07-19T19:00:15Z", "is_private": false, "count": 57, "id": 6488638}, {"creator": "bzbarsky@mit.edu", "time": "2012-07-19T19:08:15Z", "creation_time": "2012-07-19T19:08:15Z", "author": "bzbarsky@mit.edu", "bug_id": 682838, "text": "We generally have been, yes.", "tags": [], "is_private": false, "attachment_id": null, "count": 58, "id": 6488675, "raw_text": "We generally have been, yes."}, {"raw_text": "(In reply to Boris Zbarsky (:bz) from comment #58)\n> We generally have been, yes.\nIs there a bug for that (to have some inspiration)? So far I've come to conclusion the easiest way to do GIO in async is to move nsDownloadManager from main to new thread.", "attachment_id": null, "tags": [], "text": "(In reply to Boris Zbarsky (:bz) from comment #58)\n> We generally have been, yes.\nIs there a bug for that (to have some inspiration)? So far I've come to conclusion the easiest way to do GIO in async is to move nsDownloadManager from main to new thread.", "bug_id": 682838, "is_private": false, "count": 59, "id": 6496224, "author": "jhorak@redhat.com", "creator": "jhorak@redhat.com", "creation_time": "2012-07-23T12:08:35Z", "time": "2012-07-23T12:08:35Z"}, {"text": "> Is there a bug for that (to have some inspiration)?\n\nThere's a bunch of different bugs; I haven't been tracking it that carefully.\n\nAre the sync parts only called from the download manager?  Are they absolutely required for this stuff to work at all?", "bug_id": 682838, "tags": [], "raw_text": "> Is there a bug for that (to have some inspiration)?\n\nThere's a bunch of different bugs; I haven't been tracking it that carefully.\n\nAre the sync parts only called from the download manager?  Are they absolutely required for this stuff to work at all?", "attachment_id": null, "author": "bzbarsky@mit.edu", "time": "2012-07-23T13:09:39Z", "creation_time": "2012-07-23T13:09:39Z", "creator": "bzbarsky@mit.edu", "id": 6496320, "count": 60, "is_private": false}, {"attachment_id": null, "raw_text": "(In reply to Karl Tomlinson (:karlt) from comment #57)\n> Given that nsIFile has synchronous I/O APIs, I guess that means we're moving\n> nsIFile usage off the main thread?\n\nyes and we are also moving away from nsIFile(it performs poorly by design).\n\n572459 tracks bad io patterns. bug 563742 tracks nsIFile alternative for JS code.\n\nWe are[will soon] moving download manager off main thread in bug 699854", "tags": [], "text": "(In reply to Karl Tomlinson (:karlt) from comment #57)\n> Given that nsIFile has synchronous I/O APIs, I guess that means we're moving\n> nsIFile usage off the main thread?\n\nyes and we are also moving away from nsIFile(it performs poorly by design).\n\n572459 tracks bad io patterns. bug 563742 tracks nsIFile alternative for JS code.\n\nWe are[will soon] moving download manager off main thread in bug 699854", "bug_id": 682838, "id": 6498369, "count": 61, "is_private": false, "creation_time": "2012-07-23T22:19:11Z", "time": "2012-07-23T22:19:11Z", "creator": "taras.mozilla@glek.net", "author": "taras.mozilla@glek.net"}, {"raw_text": "(In reply to Boris Zbarsky (:bz) from comment #60)\n> > Is there a bug for that (to have some inspiration)?\n> \n> There's a bunch of different bugs; I haven't been tracking it that carefully.\n> \n> Are the sync parts only called from the download manager?  Are they\n> absolutely required for this stuff to work at all?\nHm, I was mostly able to get rid of RemoteTarget* calls in DownloadManager and ExternalHelperAppService. I can also run MoveRemoteTargetFromURIToURI as async with couple of changes to DownloadManager and ExternalHelperAppService.\n\nI was a little bit surprised when I've realized that on download resume operation is done on main thread (and thus is blocking by calling nsGIOOutputStream::Write). I'll have to check  further how to run nsGIOOutputStream::Write somehow else. Looks like GIO file operations must be called from main thread too (at least they are not thread safe, they have async variants of blocking IO functions).", "is_private": false, "attachment_id": null, "count": 62, "id": 6511044, "author": "jhorak@redhat.com", "bug_id": 682838, "text": "(In reply to Boris Zbarsky (:bz) from comment #60)\n> > Is there a bug for that (to have some inspiration)?\n> \n> There's a bunch of different bugs; I haven't been tracking it that carefully.\n> \n> Are the sync parts only called from the download manager?  Are they\n> absolutely required for this stuff to work at all?\nHm, I was mostly able to get rid of RemoteTarget* calls in DownloadManager and ExternalHelperAppService. I can also run MoveRemoteTargetFromURIToURI as async with couple of changes to DownloadManager and ExternalHelperAppService.\n\nI was a little bit surprised when I've realized that on download resume operation is done on main thread (and thus is blocking by calling nsGIOOutputStream::Write). I'll have to check  further how to run nsGIOOutputStream::Write somehow else. Looks like GIO file operations must be called from main thread too (at least they are not thread safe, they have async variants of blocking IO functions).", "tags": [], "creator": "jhorak@redhat.com", "time": "2012-07-27T12:00:47Z", "creation_time": "2012-07-27T12:00:47Z"}, {"text": "Created attachment 647177\nAll-in-one patch for feedback\n\nI've made some changes to DownloadManager and ExternalHelperAppService. MoveRemoteTarget is now calling async version of copy and use RemoteMoveTaskFinishedExternal nsIRunnable to dispatch finish event to main thread. Please let me know if this is viable approach.", "bug_id": 682838, "tags": [], "attachment_id": 647177, "raw_text": "I've made some changes to DownloadManager and ExternalHelperAppService. MoveRemoteTarget is now calling async version of copy and use RemoteMoveTaskFinishedExternal nsIRunnable to dispatch finish event to main thread. Please let me know if this is viable approach.", "creator": "jhorak@redhat.com", "time": "2012-07-30T15:09:44Z", "creation_time": "2012-07-30T15:09:44Z", "author": "jhorak@redhat.com", "is_private": false, "id": 6516769, "count": 63}, {"raw_text": "I'm thinking about using temp files on local filesystem for nsGIOOutputStream and 'uploading' temp file to remote location on calling Flush() or Close() by async way (like MoveTempFile in  All-in-one patch for feedback).\n\nOr should I implement nsGIOOutputStream as nsISafeOutputStream? It is possible to use something like nsOutputStreamTransport instead of calling nsIOutputStream::Write() to somehow sink nsIInputStream to nsIOutputStream in background?", "attachment_id": null, "tags": [], "bug_id": 682838, "text": "I'm thinking about using temp files on local filesystem for nsGIOOutputStream and 'uploading' temp file to remote location on calling Flush() or Close() by async way (like MoveTempFile in  All-in-one patch for feedback).\n\nOr should I implement nsGIOOutputStream as nsISafeOutputStream? It is possible to use something like nsOutputStreamTransport instead of calling nsIOutputStream::Write() to somehow sink nsIInputStream to nsIOutputStream in background?", "is_private": false, "count": 64, "id": 6525984, "author": "jhorak@redhat.com", "creator": "jhorak@redhat.com", "creation_time": "2012-08-02T08:40:22Z", "time": "2012-08-02T08:40:22Z"}, {"text": "I am glad to see that jhorak takes care of this bug, particularly because it blocks bug 378425. Is there any chance that it will be fixed in the next version of Thunderbird? Thank a lot!", "bug_id": 682838, "tags": [], "attachment_id": null, "raw_text": "I am glad to see that jhorak takes care of this bug, particularly because it blocks bug 378425. Is there any chance that it will be fixed in the next version of Thunderbird? Thank a lot!", "time": "2012-10-04T10:06:51Z", "creation_time": "2012-10-04T10:06:51Z", "creator": "gleppert@gmx.de", "author": "gleppert@gmx.de", "id": 6696781, "count": 65, "is_private": false}, {"id": 6904999, "count": 66, "is_private": false, "time": "2012-12-12T07:25:22Z", "creation_time": "2012-12-12T07:25:22Z", "creator": "karlt@mozbugz.karlt.net", "author": "karlt@mozbugz.karlt.net", "attachment_id": null, "raw_text": "(In reply to Boris Zbarsky (:bz) from comment #33)\n> Comment on attachment 631863\n> Support for NewNetworkOutputStream v2\n> \n> >+#include \"nsISupportsNetworkOutputStreams.h\"\n> \n> How about nsINetworkOutputProtocolHandler ?\n\nPerhaps it could be nsIOutputProtocolHandler and newOutputStream, so\nthat a file protocol handler, for example, could be used with the same code paths?", "tags": [], "text": "(In reply to Boris Zbarsky (:bz) from comment #33)\n> Comment on attachment 631863\n> Support for NewNetworkOutputStream v2\n> \n> >+#include \"nsISupportsNetworkOutputStreams.h\"\n> \n> How about nsINetworkOutputProtocolHandler ?\n\nPerhaps it could be nsIOutputProtocolHandler and newOutputStream, so\nthat a file protocol handler, for example, could be used with the same code paths?", "bug_id": 682838}, {"id": 6905002, "count": 67, "is_private": false, "time": "2012-12-12T07:25:44Z", "creation_time": "2012-12-12T07:25:44Z", "creator": "karlt@mozbugz.karlt.net", "author": "karlt@mozbugz.karlt.net", "attachment_id": null, "raw_text": "One of the things making this difficult is that Mozilla is trying to avoid\nblocking file I/O on the main thread and yet doesn't AFAIK have an XPCOM API\nfor doing async file operations.  The current approach, as in bug 789932, is\nto use nsIFile et al on a separate thread.\n\nUsing a GFile for a remote file is not so different from using a local file.\nIf any code is performing sync file operations on the main thread, then I\ndon't see it as morally worse if that same code initially uses a GFile in the\nsame way.\n\nHowever, we want to do things in a way that will allow code to be modified in\nsuch a way that the GFile I/O no longer blocks the main thread.\n\nThere are two possible approaches.\n\n1) Enable all I/O and other file operations to be async.\n\n2) Provide an object (or objects) that can perform file operations on a\n   different thread.\n\nRemote file operations seem similar enough to local file operations, that we\nshould look for a solution that doesn't require if/else code everywhere.\nIdeally the same base interface should be a solution for both remote and local\nfiles.\n\nApproach 1 above probably would be the preferred, but the approach so far has\nbeen 2, so it may be easier to use that approach.\n\nComment 8 and comment 11 recommend against using nsIFile.  Perhaps\nimplementing another kind of nsIFile wouldn't be so bad if the nsIFile is used\nfor performing file operations rather than for carrying path info, and doesn't\ntry to be an nsILocalFile.  That I assume would not require a GIO nsIFileURL.\n\nPerhaps nsGIOProtocolHandler could implement\nnsIFileProtocolHandler::getFileFromURLSpec to provide its own nsIFile.\n\nThere are people who have spent much more time thinking about this than I\nhere, so take what I say as suggestions to consider rather than gospel.\n\nIn reply to jhorak from comment #62)\n> Looks like GIO file operations must\n> be called from main thread too (at least they are not thread safe, they have\n> async variants of blocking IO functions).\n\nI would have expected GLib, including GIO, objects to be thread safe unless\notherwise indicated.  What makes you think the sync operations are not thread\nsafe?\n\n(In reply to jhorak from comment #63)\n> Created attachment 647177\n> All-in-one patch for feedback\n> \n> I've made some changes to DownloadManager and ExternalHelperAppService.\n> MoveRemoteTarget is now calling async version of copy and use\n> RemoteMoveTaskFinishedExternal nsIRunnable to dispatch finish event to main\n> thread. Please let me know if this is viable approach.\n\nUsing async methods on nsIOutputProtocolHandler or another interface might be\na viable approach, but I'm not the right person to make suggestions here.\nPerhaps nsIFileProtocolHandler might be a better interface - I don't know.\nThe convention in necko seems to be to use callbacks rather than runnables.\n\nThe people who know the existing structures best are busy people, so the best\nway to get feedback is to make it as easy as possible for them.  I'd suggest\nuploading a patch with just the interface proposal and perhaps modifications\nto one part of code to use the interface.  Request feedback? from someone.\n\n((In reply to jhorak from comment #64)\n> I'm thinking about using temp files on local filesystem for\n> nsGIOOutputStream and 'uploading' temp file to remote location on calling\n> Flush() or Close() by async way (like MoveTempFile in  All-in-one patch for\n> feedback).\n\nMy gut feeling is that temp files won't solve much because the write to the\ntemp file will still block.\n\n> Or should I implement nsGIOOutputStream as nsISafeOutputStream? It is\n> possible to use something like nsOutputStreamTransport instead of calling\n> nsIOutputStream::Write() to somehow sink nsIInputStream to nsIOutputStream\n> in background?\n\nnsISafeOutputStream sounds good.  It may make the MoveRemoteTargetFromURIToURI\nmethod unnecessary.  A flag like O_EXCL for newOutputStream may make the\nRemoteTargetExists method unnecessary.\n\nI don't know about nsOutputStreamTransport.", "tags": [], "bug_id": 682838, "text": "One of the things making this difficult is that Mozilla is trying to avoid\nblocking file I/O on the main thread and yet doesn't AFAIK have an XPCOM API\nfor doing async file operations.  The current approach, as in bug 789932, is\nto use nsIFile et al on a separate thread.\n\nUsing a GFile for a remote file is not so different from using a local file.\nIf any code is performing sync file operations on the main thread, then I\ndon't see it as morally worse if that same code initially uses a GFile in the\nsame way.\n\nHowever, we want to do things in a way that will allow code to be modified in\nsuch a way that the GFile I/O no longer blocks the main thread.\n\nThere are two possible approaches.\n\n1) Enable all I/O and other file operations to be async.\n\n2) Provide an object (or objects) that can perform file operations on a\n   different thread.\n\nRemote file operations seem similar enough to local file operations, that we\nshould look for a solution that doesn't require if/else code everywhere.\nIdeally the same base interface should be a solution for both remote and local\nfiles.\n\nApproach 1 above probably would be the preferred, but the approach so far has\nbeen 2, so it may be easier to use that approach.\n\nComment 8 and comment 11 recommend against using nsIFile.  Perhaps\nimplementing another kind of nsIFile wouldn't be so bad if the nsIFile is used\nfor performing file operations rather than for carrying path info, and doesn't\ntry to be an nsILocalFile.  That I assume would not require a GIO nsIFileURL.\n\nPerhaps nsGIOProtocolHandler could implement\nnsIFileProtocolHandler::getFileFromURLSpec to provide its own nsIFile.\n\nThere are people who have spent much more time thinking about this than I\nhere, so take what I say as suggestions to consider rather than gospel.\n\nIn reply to jhorak from comment #62)\n> Looks like GIO file operations must\n> be called from main thread too (at least they are not thread safe, they have\n> async variants of blocking IO functions).\n\nI would have expected GLib, including GIO, objects to be thread safe unless\notherwise indicated.  What makes you think the sync operations are not thread\nsafe?\n\n(In reply to jhorak from comment #63)\n> Created attachment 647177\n> All-in-one patch for feedback\n> \n> I've made some changes to DownloadManager and ExternalHelperAppService.\n> MoveRemoteTarget is now calling async version of copy and use\n> RemoteMoveTaskFinishedExternal nsIRunnable to dispatch finish event to main\n> thread. Please let me know if this is viable approach.\n\nUsing async methods on nsIOutputProtocolHandler or another interface might be\na viable approach, but I'm not the right person to make suggestions here.\nPerhaps nsIFileProtocolHandler might be a better interface - I don't know.\nThe convention in necko seems to be to use callbacks rather than runnables.\n\nThe people who know the existing structures best are busy people, so the best\nway to get feedback is to make it as easy as possible for them.  I'd suggest\nuploading a patch with just the interface proposal and perhaps modifications\nto one part of code to use the interface.  Request feedback? from someone.\n\n((In reply to jhorak from comment #64)\n> I'm thinking about using temp files on local filesystem for\n> nsGIOOutputStream and 'uploading' temp file to remote location on calling\n> Flush() or Close() by async way (like MoveTempFile in  All-in-one patch for\n> feedback).\n\nMy gut feeling is that temp files won't solve much because the write to the\ntemp file will still block.\n\n> Or should I implement nsGIOOutputStream as nsISafeOutputStream? It is\n> possible to use something like nsOutputStreamTransport instead of calling\n> nsIOutputStream::Write() to somehow sink nsIInputStream to nsIOutputStream\n> in background?\n\nnsISafeOutputStream sounds good.  It may make the MoveRemoteTargetFromURIToURI\nmethod unnecessary.  A flag like O_EXCL for newOutputStream may make the\nRemoteTargetExists method unnecessary.\n\nI don't know about nsOutputStreamTransport."}, {"author": "karlt@mozbugz.karlt.net", "creator": "karlt@mozbugz.karlt.net", "time": "2012-12-12T07:27:12Z", "creation_time": "2012-12-12T07:27:12Z", "is_private": false, "id": 6905010, "count": 68, "tags": [], "bug_id": 682838, "text": "Comment on attachment 642512\nAdd nsGIOOutputStream, expand nsGIOProtocolHandler v3\n\nI don't think there's much point me reviewing this until we have review on the\ninterfaces, but some comments from a quick look:\n\nnsGIOOutputStream::Init uses g_file_query_info which would block, but Init\nwould be called on the main thread, I assume.\n\nLooks like it is not safe to ref-count nsGIOOutputStream on another thread,\nwhich would make it hard to use on another thread.  Should it use  \nNS_IMPL_THREADSAFE_ISUPPORTS1?", "raw_text": "I don't think there's much point me reviewing this until we have review on the\ninterfaces, but some comments from a quick look:\n\nnsGIOOutputStream::Init uses g_file_query_info which would block, but Init\nwould be called on the main thread, I assume.\n\nLooks like it is not safe to ref-count nsGIOOutputStream on another thread,\nwhich would make it hard to use on another thread.  Should it use  \nNS_IMPL_THREADSAFE_ISUPPORTS1?", "attachment_id": 642512}, {"author": "gavin.sharp@gmail.com", "creator": "gavin.sharp@gmail.com", "time": "2014-03-01T01:55:23Z", "creation_time": "2014-03-01T01:55:23Z", "is_private": false, "count": 69, "id": 8479545, "bug_id": 682838, "text": "Comment on attachment 642614\nToolkit part v3\n\nUnfortunately these patches have been bit rotten. If this work is revived I'll do a better job of getting you a review.", "tags": [], "raw_text": "Unfortunately these patches have been bit rotten. If this work is revived I'll do a better job of getting you a review.", "attachment_id": 642614}, {"count": 70, "id": 9254683, "attachment_id": 642967, "is_private": false, "raw_text": "note, bienvenu is no longer doing reviews", "time": "2014-09-01T13:29:43Z", "creation_time": "2014-09-01T13:29:43Z", "creator": "vseerror@lehigh.edu", "text": "Comment on attachment 642967\nmailnews patch v1\n\nnote, bienvenu is no longer doing reviews", "bug_id": 682838, "tags": [], "author": "vseerror@lehigh.edu"}, {"text": "It does feel like there is merely a UI issue with latest version of GNOME.\n\n1. In Fedora 21 (FF 42), I could bookmark a remote location, mount it in Nautilus, then it shows up in FF's open file dialogue.\n\n2. In Fedora 22 (I don't have the computer with me to tell FF version), I could use the remote location 'bookmark' and manually type a location and could open files there. The bookmarks are all gone though.", "bug_id": 682838, "tags": [], "raw_text": "It does feel like there is merely a UI issue with latest version of GNOME.\n\n1. In Fedora 21 (FF 42), I could bookmark a remote location, mount it in Nautilus, then it shows up in FF's open file dialogue.\n\n2. In Fedora 22 (I don't have the computer with me to tell FF version), I could use the remote location 'bookmark' and manually type a location and could open files there. The bookmarks are all gone though.", "attachment_id": null, "author": "rainwoodman@gmail.com", "creation_time": "2016-01-11T19:57:41Z", "time": "2016-01-11T19:57:41Z", "creator": "rainwoodman@gmail.com", "count": 71, "id": 11065467, "is_private": false}, {"attachment_id": null, "raw_text": "With the switch to Gtk3 by default, should this be revived/reconsidered ?", "tags": [], "text": "With the switch to Gtk3 by default, should this be revived/reconsidered ?", "bug_id": 682838, "id": 11409744, "count": 72, "is_private": false, "time": "2016-05-15T14:57:57Z", "creation_time": "2016-05-15T14:57:57Z", "creator": "landry@openbsd.org", "author": "landry@openbsd.org"}, {"count": 73, "id": 12445087, "is_private": false, "author": "bugzilla@colorremedies.com", "creation_time": "2017-07-03T23:17:15Z", "time": "2017-07-03T23:17:15Z", "creator": "bugzilla@colorremedies.com", "raw_text": "This bug has GTK3+ advice.\nhttps://bugzilla.gnome.org/show_bug.cgi?id=784490#c8", "attachment_id": null, "tags": [], "text": "This bug has GTK3+ advice.\nhttps://bugzilla.gnome.org/show_bug.cgi?id=784490#c8", "bug_id": 682838}, {"text": "Bulk change to priority: https://bugzilla.mozilla.org/show_bug.cgi?id=1399258", "bug_id": 682838, "tags": [], "raw_text": "Bulk change to priority: https://bugzilla.mozilla.org/show_bug.cgi?id=1399258", "attachment_id": null, "author": "bug-husbandry-bot@mozilla.bugs", "time": "2017-09-13T18:38:30Z", "creation_time": "2017-09-13T18:38:30Z", "creator": "bug-husbandry-bot@mozilla.bugs", "count": 74, "id": 12658548, "is_private": false}, {"creator": "johnmaverick74@mail.com", "time": "2022-01-11T11:02:18Z", "creation_time": "2022-01-11T11:02:18Z", "author": "johnmaverick74@mail.com", "is_private": false, "id": 15727329, "count": 75, "tags": [], "bug_id": 682838, "text": "I'm having the same problem with KDE's KIO", "attachment_id": null, "raw_text": "I'm having the same problem with KDE's KIO"}]}}, "comments": {}}