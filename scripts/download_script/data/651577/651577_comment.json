{"comments": {}, "bugs": {"651577": {"comments": [{"id": 5421892, "time": "2011-04-20T18:52:03Z", "tags": [], "creation_time": "2011-04-20T18:52:03Z", "bug_id": 651577, "raw_text": "I would like to be able to hook into NS_StackWalk to modify the frames returned (in my case, slap in Python frames, though this will also help bug 393501).\n\nIn my case, this must be usable from outside libxul (since I'm not built at that point), hence taking a different approach from bug 393501 which required building xpconnect into libxul.\n\nThere's a hard-coded maximum number of hooks, because I don't expect this to be used much - it's only built with tracerefcnt builds anyway, so this should essentially be NPOTB (and not affect performance numbers).  If NS_StackWalk was ever on a hot path anyway something is very, very wrong :)\n\nIt would probably be useful to change the signature NS_StackWalk so that it's possible to do properly mark the stacks as belonging to somebody who munged it (I'm currently faking this by making PC point to a struct with the first member being a pointer to one of my functions).  Also, there would need to be some sort of cleanup (I'm just leaking stuff right now).", "is_private": false, "text": "Created attachment 527338\ninitial stab\n\nI would like to be able to hook into NS_StackWalk to modify the frames returned (in my case, slap in Python frames, though this will also help bug 393501).\n\nIn my case, this must be usable from outside libxul (since I'm not built at that point), hence taking a different approach from bug 393501 which required building xpconnect into libxul.\n\nThere's a hard-coded maximum number of hooks, because I don't expect this to be used much - it's only built with tracerefcnt builds anyway, so this should essentially be NPOTB (and not affect performance numbers).  If NS_StackWalk was ever on a hot path anyway something is very, very wrong :)\n\nIt would probably be useful to change the signature NS_StackWalk so that it's possible to do properly mark the stacks as belonging to somebody who munged it (I'm currently faking this by making PC point to a struct with the first member being a pointer to one of my functions).  Also, there would need to be some sort of cleanup (I'm just leaking stuff right now).", "count": 0, "author": "mark.yen@suse.com", "creator": "mark.yen@suse.com", "attachment_id": 527338}, {"creator": "dbaron@dbaron.org", "attachment_id": 527338, "text": "Comment on attachment 527338\ninitial stab\n\nI don't understand the comments or the code relating to return values from aWalkHook.  What's the purpose of the different return values?\n\nYou also need comments describing aWalkHookBegin and aWalkHookEnd.\n\n\nI was tempted to suggest chained callbacks (like JS_SetGCCallback), but that doesn't support the data that you need to pass.\n\n\nNS_HookStackWalk should also assert that it's called only on the main thread.  And its documentation should also say it works only on one platform.\n\nOtherwise this seems like a reasonable approach if it works from your end.  Sorry for the delay in getting to it.", "count": 1, "author": "dbaron@dbaron.org", "tags": [], "bug_id": 651577, "creation_time": "2011-07-11T23:21:09Z", "raw_text": "I don't understand the comments or the code relating to return values from aWalkHook.  What's the purpose of the different return values?\n\nYou also need comments describing aWalkHookBegin and aWalkHookEnd.\n\n\nI was tempted to suggest chained callbacks (like JS_SetGCCallback), but that doesn't support the data that you need to pass.\n\n\nNS_HookStackWalk should also assert that it's called only on the main thread.  And its documentation should also say it works only on one platform.\n\nOtherwise this seems like a reasonable approach if it works from your end.  Sorry for the delay in getting to it.", "is_private": false, "id": 5585650, "time": "2011-07-11T23:21:09Z"}, {"creator": "mark.yen@suse.com", "attachment_id": null, "count": 2, "text": "(In reply to comment #1)\n> I don't understand the comments or the code relating to return values from\n> aWalkHook.  What's the purpose of the different return values?\nThe return value is basically zero for \"don't let the NS_StackWalk caller know about this frame\", and non-zero for default behaviour.  My use case here was to hide the interpreter-internal frames from view (since I'm emitting fake frames describing the script callstack).\n\n> You also need comments describing aWalkHookBegin and aWalkHookEnd.\nAgreed.\n\n> I was tempted to suggest chained callbacks (like JS_SetGCCallback), but that\n> doesn't support the data that you need to pass.\nYeah, that and experience from the Win32 WndProc hooking says that's horrible anyway because you effectively can't ever remove any callbacks (since you don't know who got a pointer to _your_ callback on the next call to JS_SetGCCallback).\n\n> NS_HookStackWalk should also assert that it's called only on the main\n> thread.  And its documentation should also say it works only on one platform.\nAgreed. (The one-platform thing is mainly just that I only needed _something_ to work for now and there's no point implementing it elsewhere if the API needed an overhaul.)\n\n> Otherwise this seems like a reasonable approach if it works from your end. \n> Sorry for the delay in getting to it.\nUnfortunately, this has pretty much timed out - I probably won't be able to find an excuse to work on this any time soon.", "author": "mark.yen@suse.com", "tags": [], "raw_text": "(In reply to comment #1)\n> I don't understand the comments or the code relating to return values from\n> aWalkHook.  What's the purpose of the different return values?\nThe return value is basically zero for \"don't let the NS_StackWalk caller know about this frame\", and non-zero for default behaviour.  My use case here was to hide the interpreter-internal frames from view (since I'm emitting fake frames describing the script callstack).\n\n> You also need comments describing aWalkHookBegin and aWalkHookEnd.\nAgreed.\n\n> I was tempted to suggest chained callbacks (like JS_SetGCCallback), but that\n> doesn't support the data that you need to pass.\nYeah, that and experience from the Win32 WndProc hooking says that's horrible anyway because you effectively can't ever remove any callbacks (since you don't know who got a pointer to _your_ callback on the next call to JS_SetGCCallback).\n\n> NS_HookStackWalk should also assert that it's called only on the main\n> thread.  And its documentation should also say it works only on one platform.\nAgreed. (The one-platform thing is mainly just that I only needed _something_ to work for now and there's no point implementing it elsewhere if the API needed an overhaul.)\n\n> Otherwise this seems like a reasonable approach if it works from your end. \n> Sorry for the delay in getting to it.\nUnfortunately, this has pretty much timed out - I probably won't be able to find an excuse to work on this any time soon.", "bug_id": 651577, "creation_time": "2011-07-11T23:34:44Z", "is_private": false, "id": 5585668, "time": "2011-07-11T23:34:44Z"}]}}}