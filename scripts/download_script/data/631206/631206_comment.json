{"bugs": {"631206": {"comments": [{"raw_text": "User-Agent:       Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/534.10 (KHTML, like Gecko) Chrome/8.0.552.237 Safari/534.10\nBuild Identifier: Mozilla/5.0 (Windows; U; Windows NT 6.0; ru; rv:1.9.2.13) Gecko/20101207 Thunderbird/3.1.7\n\nWhen creating a new contact in Address Book \"Email\" field checks the presence of character \"@\" only. Meanwhile it should check all type of invalid email addresses: email which consists of two or more \"@\" and email which has characters ()[]\\;:,<> before the @.\n\nReproducible: Always\n\nSteps to Reproduce:\n1. Hit \"Address Book\" in the Tool Bar and choose New Contact.\n2. Type 111@222@>3<@mail.ru in \"Email\" field of \"Edit Contact\" tab and hit OK. \n\nActual Results:  \nThe data accepted without warning about incorrect email address format.\n\nExpected Results:  \nThe warning message should be displayed.", "bug_id": 631206, "author": "rosoma_xa@yahoo.com", "creator": "rosoma_xa@yahoo.com", "attachment_id": null, "time": "2011-02-03T13:42:58Z", "count": 0, "id": 5251306, "is_private": false, "text": "User-Agent:       Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/534.10 (KHTML, like Gecko) Chrome/8.0.552.237 Safari/534.10\nBuild Identifier: Mozilla/5.0 (Windows; U; Windows NT 6.0; ru; rv:1.9.2.13) Gecko/20101207 Thunderbird/3.1.7\n\nWhen creating a new contact in Address Book \"Email\" field checks the presence of character \"@\" only. Meanwhile it should check all type of invalid email addresses: email which consists of two or more \"@\" and email which has characters ()[]\\;:,<> before the @.\n\nReproducible: Always\n\nSteps to Reproduce:\n1. Hit \"Address Book\" in the Tool Bar and choose New Contact.\n2. Type 111@222@>3<@mail.ru in \"Email\" field of \"Edit Contact\" tab and hit OK. \n\nActual Results:  \nThe data accepted without warning about incorrect email address format.\n\nExpected Results:  \nThe warning message should be displayed.", "tags": [], "creation_time": "2011-02-03T13:42:58Z"}, {"creator": "bugzilla2007@duellmann24.net", "attachment_id": null, "author": "bugzilla2007@duellmann24.net", "time": "2013-07-01T11:48:15Z", "raw_text": ":thun,mail :addr su:invalid,wrong,bad,mal su:address,email\n\nhttps://bugzilla.mozilla.org/buglist.cgi?quicksearch=%3Athun%2Cmail%20%3Aaddr%20su%3Ainvalid%2Cwrong%2Cbad%2Cmal%20su%3Aaddress%2Cemail&list_id=7006924\n\nno dupes found -> confirming\n\nA much more frequent case that we should also prevent by email field pre-validation is trailing or leading whitespace, see related attempts to catch that after-the-fact in bug 286760 and 853437.", "bug_id": 631206, "creation_time": "2013-07-01T11:48:15Z", "tags": [], "count": 1, "id": 7590313, "text": ":thun,mail :addr su:invalid,wrong,bad,mal su:address,email\n\nhttps://bugzilla.mozilla.org/buglist.cgi?quicksearch=%3Athun%2Cmail%20%3Aaddr%20su%3Ainvalid%2Cwrong%2Cbad%2Cmal%20su%3Aaddress%2Cemail&list_id=7006924\n\nno dupes found -> confirming\n\nA much more frequent case that we should also prevent by email field pre-validation is trailing or leading whitespace, see related attempts to catch that after-the-fact in bug 286760 and 853437.", "is_private": false}, {"bug_id": 631206, "raw_text": "I'd caution that \"111@222@>3<\"@mail.ru is a perfectly valid email address. In fact, there's basically nothing that can't be in the local part as long as it's quoted. See RFC 822, section 6.1. Thus, the proposed action of \"do not accept ()[]\\;:,<> before @, multiple @, trailing, leading spaces/whitespace\", if implemented naively, is incorrect.", "time": "2013-11-21T21:29:42Z", "author": "indigo@bitglue.com", "attachment_id": null, "creator": "indigo@bitglue.com", "text": "I'd caution that \"111@222@>3<\"@mail.ru is a perfectly valid email address. In fact, there's basically nothing that can't be in the local part as long as it's quoted. See RFC 822, section 6.1. Thus, the proposed action of \"do not accept ()[]\\;:,<> before @, multiple @, trailing, leading spaces/whitespace\", if implemented naively, is incorrect.", "is_private": false, "id": 8110285, "count": 2, "creation_time": "2013-11-21T21:29:42Z", "tags": []}, {"bug_id": 631206, "raw_text": "(In reply to Phil Frost from comment #2)\n> I'd caution that \"111@222@>3<\"@mail.ru is a perfectly valid email address.\n> In fact, there's basically nothing that can't be in the local part as long\n> as it's quoted. See RFC 822, section 6.1. Thus, the proposed action of \"do\n> not accept ()[]\\;:,<> before @, multiple @, trailing, leading\n> spaces/whitespace\", if implemented naively, is incorrect.\n\nYes Phil, you are right. Thanks for that caveat.", "time": "2014-12-01T10:12:28Z", "creator": "bugzilla2007@duellmann24.net", "attachment_id": null, "author": "bugzilla2007@duellmann24.net", "text": "(In reply to Phil Frost from comment #2)\n> I'd caution that \"111@222@>3<\"@mail.ru is a perfectly valid email address.\n> In fact, there's basically nothing that can't be in the local part as long\n> as it's quoted. See RFC 822, section 6.1. Thus, the proposed action of \"do\n> not accept ()[]\\;:,<> before @, multiple @, trailing, leading\n> spaces/whitespace\", if implemented naively, is incorrect.\n\nYes Phil, you are right. Thanks for that caveat.", "is_private": false, "count": 3, "id": 9652636, "tags": [], "creation_time": "2014-12-01T10:12:28Z"}, {"attachment_id": null, "creator": "bugzilla2007@duellmann24.net", "author": "bugzilla2007@duellmann24.net", "time": "2014-12-01T10:18:32Z", "raw_text": "Phil, could you elaborate how you'd expect the UI of TB to handle certain inputs, ideally with examples?\n\n- Should we auto-quote invalid inputs (I suppose not, because it's much more likely that user made a mistake compared to entering a weird email address without quotes)\n- or should we only accept weird inputs when they are quoted by user? (I think that's more reasonable)\n- or what else?", "bug_id": 631206, "creation_time": "2014-12-01T10:18:32Z", "tags": [], "count": 4, "id": 9652640, "is_private": false, "text": "Phil, could you elaborate how you'd expect the UI of TB to handle certain inputs, ideally with examples?\n\n- Should we auto-quote invalid inputs (I suppose not, because it's much more likely that user made a mistake compared to entering a weird email address without quotes)\n- or should we only accept weird inputs when they are quoted by user? (I think that's more reasonable)\n- or what else?"}, {"text": "I would expect the UI to accept email addresses formatted exactly as RFC 822 (and friends) specify. The RFCs are the only specifications of email address grammar that everyone can agree on. I should be able to paste any valid To: header in the corresponding field of the UI and have it accepted and parsed according to the RFC.\n\nThis alone would resolve some of this and related bugs -- some of them result from TB erronously \"correcting\" an email address that was already valid. This is DWIM at its worst.\n\nWhen user input isn't valid, I'd stick to these principles:\n\n  - input is validated when it is first entered, be it in the address book or compose window\n  - if input has passed validation previously, it won't get munged or rejected later\n  - if TB wants to \"correct\" an input, it does so only with user confirmation\n\nPerhaps if an invalid address is entered, the UI could respond with an error including suggestions. For example, if I enter\n\n  111@222@>3<@mail.ru\n\nThe UI might respond:\n\n  Did you mean:\n  \"111@222@>3<\"@mail.ru\n  [pick one] or [go back and edit manually]\n\nThis would clearly communicate to the user that there's a problem, but also provide a way forward, yet while never doing anything the user did not specifically request.", "is_private": false, "count": 5, "id": 9652813, "creation_time": "2014-12-01T13:15:23Z", "tags": [], "bug_id": 631206, "raw_text": "I would expect the UI to accept email addresses formatted exactly as RFC 822 (and friends) specify. The RFCs are the only specifications of email address grammar that everyone can agree on. I should be able to paste any valid To: header in the corresponding field of the UI and have it accepted and parsed according to the RFC.\n\nThis alone would resolve some of this and related bugs -- some of them result from TB erronously \"correcting\" an email address that was already valid. This is DWIM at its worst.\n\nWhen user input isn't valid, I'd stick to these principles:\n\n  - input is validated when it is first entered, be it in the address book or compose window\n  - if input has passed validation previously, it won't get munged or rejected later\n  - if TB wants to \"correct\" an input, it does so only with user confirmation\n\nPerhaps if an invalid address is entered, the UI could respond with an error including suggestions. For example, if I enter\n\n  111@222@>3<@mail.ru\n\nThe UI might respond:\n\n  Did you mean:\n  \"111@222@>3<\"@mail.ru\n  [pick one] or [go back and edit manually]\n\nThis would clearly communicate to the user that there's a problem, but also provide a way forward, yet while never doing anything the user did not specifically request.", "time": "2014-12-01T13:15:23Z", "creator": "indigo@bitglue.com", "author": "indigo@bitglue.com", "attachment_id": null}, {"tags": [], "creation_time": "2015-04-09T18:37:24Z", "text": "Phil is correct, per RFC 5322 (which I believe is the latest successor to 822.)  I notice that Thunderbird applies arbitrary limits to the characters it considers \"valid\" in an email address localpart.  In fact ANY printable character is valid.  Quoting is necessary for \" \", \"<\", \">\" and \"@\", but basically optional for any and all other 7-bit ASCII characters greater than 0x31.  (0x32 being a space.)\n\nMy company uses an address which contains \"^\", like \"test^@example.org\", which of course is perfectly valid (as is, without quoting.)  But Thunderbird does not recognize it as an email address (that is, I can't click it and get a New Message composer window.\n\nWhy didn't you guys read these standards before imposing these arbitrary limits?  Please remove them.  Thanks.", "is_private": false, "count": 6, "id": 10137827, "time": "2015-04-09T18:37:24Z", "author": "cba@isc.org", "attachment_id": null, "creator": "cba@isc.org", "bug_id": 631206, "raw_text": "Phil is correct, per RFC 5322 (which I believe is the latest successor to 822.)  I notice that Thunderbird applies arbitrary limits to the characters it considers \"valid\" in an email address localpart.  In fact ANY printable character is valid.  Quoting is necessary for \" \", \"<\", \">\" and \"@\", but basically optional for any and all other 7-bit ASCII characters greater than 0x31.  (0x32 being a space.)\n\nMy company uses an address which contains \"^\", like \"test^@example.org\", which of course is perfectly valid (as is, without quoting.)  But Thunderbird does not recognize it as an email address (that is, I can't click it and get a New Message composer window.\n\nWhy didn't you guys read these standards before imposing these arbitrary limits?  Please remove them.  Thanks."}, {"creation_time": "2021-08-14T18:21:21Z", "tags": [], "text": "I noticed today that TB's address book keeps accepting email addresses which are not valid according to RC 5322 (https://www.ietf.org/rfc/rfc5322.txt). I mistyped an address so that it spelled something along the lines of sara@@example.org - this is not a valid email address. I believe that sanitization of user input is basic programming security.", "is_private": false, "count": 7, "id": 15527686, "time": "2021-08-14T18:21:21Z", "attachment_id": null, "creator": "u@451f.org", "author": "u@451f.org", "bug_id": 631206, "raw_text": "I noticed today that TB's address book keeps accepting email addresses which are not valid according to RC 5322 (https://www.ietf.org/rfc/rfc5322.txt). I mistyped an address so that it spelled something along the lines of sara@@example.org - this is not a valid email address. I believe that sanitization of user input is basic programming security."}, {"time": "2021-08-14T18:23:12Z", "attachment_id": null, "creator": "u@451f.org", "author": "u@451f.org", "bug_id": 631206, "raw_text": "(In reply to u from comment #7)\n> I noticed today that TB's address book keeps accepting email addresses which are not valid according to RC 5322 (https://www.ietf.org/rfc/rfc5322.txt). I mistyped an address so that it spelled something along the lines of sara@@example.org - this is not a valid email address. I believe that sanitization of user input is basic programming security.\n\nI'm using TB 78.12.0 (64-bit) on Debian.", "tags": [], "creation_time": "2021-08-14T18:23:12Z", "text": "(In reply to u from comment #7)\n> I noticed today that TB's address book keeps accepting email addresses which are not valid according to RC 5322 (https://www.ietf.org/rfc/rfc5322.txt). I mistyped an address so that it spelled something along the lines of sara@@example.org - this is not a valid email address. I believe that sanitization of user input is basic programming security.\n\nI'm using TB 78.12.0 (64-bit) on Debian.", "is_private": false, "count": 8, "id": 15527687}]}}, "comments": {}}