{"bugs": {"684875": {"comments": [{"attachment_id": null, "raw_text": "This would be handy for situations where you want to do something sometimes.", "id": 5702229, "creator": "jmuizelaar@mozilla.com", "is_private": false, "author": "jmuizelaar@mozilla.com", "creation_time": "2011-09-06T16:15:16Z", "time": "2011-09-06T16:15:16Z", "tags": [], "text": "This would be handy for situations where you want to do something sometimes.", "count": 0, "bug_id": 684875}, {"time": "2011-09-06T16:19:04Z", "tags": [], "text": "Created attachment 558494\nFirst cut at this\n\nI'm not sure what a good name for this is. Suggestions welcome. I'd like to use this for bug 681350", "author": "jmuizelaar@mozilla.com", "creation_time": "2011-09-06T16:19:04Z", "creator": "jmuizelaar@mozilla.com", "is_private": false, "id": 5702239, "raw_text": "I'm not sure what a good name for this is. Suggestions welcome. I'd like to use this for bug 681350", "attachment_id": 558494, "bug_id": 684875, "count": 1}, {"id": 5702250, "attachment_id": null, "raw_text": "I'm also not sure where to put this in the source tree.", "creation_time": "2011-09-06T16:21:13Z", "author": "jmuizelaar@mozilla.com", "text": "I'm also not sure where to put this in the source tree.", "tags": [], "bug_id": 684875, "time": "2011-09-06T16:21:13Z", "is_private": false, "creator": "jmuizelaar@mozilla.com", "count": 2}, {"bug_id": 684875, "count": 3, "id": 5702290, "raw_text": "mfbt/", "attachment_id": null, "tags": [], "time": "2011-09-06T16:37:23Z", "text": "mfbt/", "author": "jwalden@mit.edu", "creation_time": "2011-09-06T16:37:23Z", "creator": "jwalden@mit.edu", "is_private": false}, {"author": "jmuizelaar@mozilla.com", "creation_time": "2011-09-06T18:00:25Z", "time": "2011-09-06T18:00:25Z", "tags": [], "bug_id": 684875, "text": "(In reply to Jeff Walden (remove +bmo to email) from comment #3)\n> mfbt/\n\nEven if it's not just a header?", "creator": "jmuizelaar@mozilla.com", "is_private": false, "count": 4, "id": 5702543, "attachment_id": null, "raw_text": "(In reply to Jeff Walden (remove +bmo to email) from comment #3)\n> mfbt/\n\nEven if it's not just a header?"}, {"id": 5703052, "raw_text": "This API feels a bit odd to me: it's under-general to be a generic STL-like interface, but over-general for something just used as a telemetry helper.  I wonder if it would make sense for now to keep it in Telemetry::?  mfbt/ isn't the right fit atm.\n\n>diff --git a/xpcom/ds/rand-bool.cpp b/xpcom/ds/rand-bool.cpp\n\nProbably won't matter, but naming style is LikeThis.cpp.\n\n>+/* this isn't the greatest random number generator, but\n>+ * we should wait for evidence that we need something better */\n>+#define RAND_MAX 0xffffffff\n>+static unsigned int rand_lcg() {\n\nWhy do you *not* want to use libc rand()/rand_r()?  They're generally implemented as LCGs.  Note that this isn't reentrant, so wouldn't fly as a generic impl.\n\n>+/* returns true with probability 1/p\n>+ *\n>+ * This won't be exact unless n divides RAND_MAX, however the division can be constant\n\ns/n/p/\n\n>+ * folded which makes this very cheap */\n>+bool rand_bool(unsigned int p)\n>+{\n>+    return rand_lcg() <= (RAND_MAX / p);\n\nAs things stand the division wouldn't be boiled away because rand_bool() isn't inlined.  (Unless the LTO step is *really* smart.  Wouldn't rely on that.)  This would seem to make sense as an inlined Telemetry helper.  If you really wanted to be fancy, you could make this a template and specialize it on RAND_MAX % p, but that doesn't seem worth the trouble atm.\n\nSo generally, I'm not so enthused with this, and would rather see it in Telemetry for now.", "attachment_id": 558494, "text": "Comment on attachment 558494\nFirst cut at this\n\nThis API feels a bit odd to me: it's under-general to be a generic STL-like interface, but over-general for something just used as a telemetry helper.  I wonder if it would make sense for now to keep it in Telemetry::?  mfbt/ isn't the right fit atm.\n\n>diff --git a/xpcom/ds/rand-bool.cpp b/xpcom/ds/rand-bool.cpp\n\nProbably won't matter, but naming style is LikeThis.cpp.\n\n>+/* this isn't the greatest random number generator, but\n>+ * we should wait for evidence that we need something better */\n>+#define RAND_MAX 0xffffffff\n>+static unsigned int rand_lcg() {\n\nWhy do you *not* want to use libc rand()/rand_r()?  They're generally implemented as LCGs.  Note that this isn't reentrant, so wouldn't fly as a generic impl.\n\n>+/* returns true with probability 1/p\n>+ *\n>+ * This won't be exact unless n divides RAND_MAX, however the division can be constant\n\ns/n/p/\n\n>+ * folded which makes this very cheap */\n>+bool rand_bool(unsigned int p)\n>+{\n>+    return rand_lcg() <= (RAND_MAX / p);\n\nAs things stand the division wouldn't be boiled away because rand_bool() isn't inlined.  (Unless the LTO step is *really* smart.  Wouldn't rely on that.)  This would seem to make sense as an inlined Telemetry helper.  If you really wanted to be fancy, you could make this a template and specialize it on RAND_MAX % p, but that doesn't seem worth the trouble atm.\n\nSo generally, I'm not so enthused with this, and would rather see it in Telemetry for now.", "time": "2011-09-06T20:45:01Z", "tags": [], "creation_time": "2011-09-06T20:45:01Z", "author": "cjones.bugs@gmail.com", "is_private": false, "creator": "cjones.bugs@gmail.com", "bug_id": 684875, "count": 5}, {"id": 5703520, "raw_text": "Er.  I did not actually intend to submit comment 3!  Had I, I would certainly have expanded on that just a little bit!  I think I probably wrote that detritus as the start of a comment I decided to abandon, but I forgot to clear it while CCing myself here.\n\nBut since I left that cryptically useless comment, at the very least I might as well say what I was half-thinking.\n\nmfbt seems to be the right location, going forward, for common code used many places in Mozilla.  It's compact, clean code.  It's easy to peruse, unlike the utility directories in xpcom and under it.  Adding new algorithms to it seems the right thing to do to me.  (Especially when those algorithms, as here, are completely unrelated to XPCOM.)  And over time, mfbt/ will grow more and more comprehensive as a result, while being much better curated than some of the dumping grounds in xpcom.\n\nmfbt does have actual compiled code in it, not just headers.  That code is in js/src/.  (I wish I were making that up.)  But there is some, and you could add to it, still keeping the header in mfbt/.\n\nSince I'm already saying something, it does seem to me that an underscore-y C-style-named API is out of place for the majority of Mozilla code.  I have no suggestion for a better name.", "attachment_id": null, "text": "Er.  I did not actually intend to submit comment 3!  Had I, I would certainly have expanded on that just a little bit!  I think I probably wrote that detritus as the start of a comment I decided to abandon, but I forgot to clear it while CCing myself here.\n\nBut since I left that cryptically useless comment, at the very least I might as well say what I was half-thinking.\n\nmfbt seems to be the right location, going forward, for common code used many places in Mozilla.  It's compact, clean code.  It's easy to peruse, unlike the utility directories in xpcom and under it.  Adding new algorithms to it seems the right thing to do to me.  (Especially when those algorithms, as here, are completely unrelated to XPCOM.)  And over time, mfbt/ will grow more and more comprehensive as a result, while being much better curated than some of the dumping grounds in xpcom.\n\nmfbt does have actual compiled code in it, not just headers.  That code is in js/src/.  (I wish I were making that up.)  But there is some, and you could add to it, still keeping the header in mfbt/.\n\nSince I'm already saying something, it does seem to me that an underscore-y C-style-named API is out of place for the majority of Mozilla code.  I have no suggestion for a better name.", "tags": [], "time": "2011-09-06T23:40:46Z", "bug_id": 684875, "creation_time": "2011-09-06T23:40:46Z", "author": "jwalden@mit.edu", "count": 6, "is_private": false, "creator": "jwalden@mit.edu"}, {"id": 5703522, "raw_text": "All that said, keeping it specific to telemetry also seems fine, if it's desired that it not be exposed generally just yet.", "attachment_id": null, "tags": [], "bug_id": 684875, "time": "2011-09-06T23:41:28Z", "text": "All that said, keeping it specific to telemetry also seems fine, if it's desired that it not be exposed generally just yet.", "author": "jwalden@mit.edu", "creation_time": "2011-09-06T23:41:28Z", "count": 7, "creator": "jwalden@mit.edu", "is_private": false}]}}, "comments": {}}