{"comments": {}, "bugs": {"699588": {"comments": [{"raw_text": "User Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:10.0a1) Gecko/20111101 Firefox/10.0a1\nBuild ID: 20111101031108\n\n\n\n\nExpected results:\n\nIn Thunderbird 7.0.1 it is possible to change the columns shown in the message list pane.  Right clicking on any of the column headers brings up a list of columns that can be selected for display.   Other mail clients I have used allow 'cc' and / or 'bcc' to be selected as columns so that it is easy to see who the message was sent to using the 'To:' field, and who was copied (or blind copied).  I find this very helpful.\n\nAt present there is only a 'Recipient' column and it is not clear from this who was sent the message directly and who was cc'd or bcc'd", "attachment_id": null, "time": "2011-11-03T21:45:19Z", "tags": [], "count": 0, "text": "User Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:10.0a1) Gecko/20111101 Firefox/10.0a1\nBuild ID: 20111101031108\n\n\n\n\nExpected results:\n\nIn Thunderbird 7.0.1 it is possible to change the columns shown in the message list pane.  Right clicking on any of the column headers brings up a list of columns that can be selected for display.   Other mail clients I have used allow 'cc' and / or 'bcc' to be selected as columns so that it is easy to see who the message was sent to using the 'To:' field, and who was copied (or blind copied).  I find this very helpful.\n\nAt present there is only a 'Recipient' column and it is not clear from this who was sent the message directly and who was cc'd or bcc'd", "author": "it@tsgrp.net", "creator": "it@tsgrp.net", "creation_time": "2011-11-03T21:45:19Z", "is_private": false, "id": 5824859, "bug_id": 699588}, {"tags": [], "attachment_id": null, "raw_text": "Confirming. Can't see any reason not to offer (optional/separate) CC or BCC column while we do offer To column. Makes a nice set with bug 522885 and bug 522886.", "time": "2013-05-13T16:20:12Z", "is_private": false, "creation_time": "2013-05-13T16:20:12Z", "bug_id": 699588, "id": 7416653, "author": "bugzilla2007@duellmann24.net", "count": 1, "text": "Confirming. Can't see any reason not to offer (optional/separate) CC or BCC column while we do offer To column. Makes a nice set with bug 522885 and bug 522886.", "creator": "bugzilla2007@duellmann24.net"}, {"attachment_id": null, "tags": [], "creator": "bugzilla2007@duellmann24.net", "is_private": false, "creation_time": "2013-06-09T15:05:54Z", "raw_text": "", "time": "2013-06-09T15:05:54Z", "count": 2, "text": "*** Bug 376389 has been marked as a duplicate of this bug. ***", "author": "bugzilla2007@duellmann24.net", "bug_id": 699588, "id": 7513735}, {"attachment_id": 778940, "raw_text": "The cc and bcc columns included.", "time": "2013-07-21T10:11:16Z", "tags": [], "author": "syshagarwal@gmail.com", "text": "Created attachment 778940\nPatch\n\nThe cc and bcc columns included.", "count": 3, "creator": "syshagarwal@gmail.com", "is_private": false, "creation_time": "2013-07-21T10:11:16Z", "bug_id": 699588, "id": 7659170}, {"tags": [], "raw_text": "Review of attachment 778940:\n-----------------------------------------------------------------\n\nI haven't compiled the patch yet but I have some comments just from reading it.\n\n::: mail/locales/en-US/chrome/messenger/messenger.dtd\n@@ +190,5 @@\n>  <!ENTITY sortByRecipientsCmd.accesskey \"c\">\n>  <!ENTITY sortByToCmd.label \"To\">\n>  <!ENTITY sortByToCmd.accesskey \"o\">\n> +<!ENTITY sortByCcCmd.label \"Cc\">\n> +<!ENTITY sortByCcCmd.accesskey \"k\">\n\nThis will look awful (as \"CC (k)\"). But there are not many option left. Any chance you could use \"c\" key here and choose a different one for Recipients?\n\n::: mailnews/base/src/nsMsgDBView.cpp\n@@ +596,4 @@\n>  \n>  nsresult nsMsgDBView::FetchToRecipients(nsIMsgDBHdr * aHdr, nsAString &aRecipientsString)\n>  {\n>    return commonFetchRecipients(aHdr, \"torecipient_names\",\n\nDon't forget about creating the plan on what to do with this \"torecipient_names\" cache name.\n\n@@ +620,5 @@\n>    nsresult rv = FetchToRecipients(aHdr, aRecipientsString);\n>    NS_ENSURE_SUCCESS(rv, rv);\n>    rv = commonFetchRecipients(aHdr, \"ccRecipient_names\",\n>                               &nsIMsgDBHdr::GetMime2DecodedCC,\n>                               aRecipientsString);\n\nOK, so now call FetchCcRecipients and FetchBccRecipients here instead of duplicating them. In the same way you use FetchToRecipients.\n\n@@ +4161,5 @@\n>  }\n>  \n> +nsresult nsMsgDBView::GetRecipientCollationKey(\n> +                        nsIMsgDBHdr * msgHdr, nsresult (NS_STDCALL \n> +                                              nsMsgDBView::*fetchRecipients)\n\nDoes this need the nsMsgDBView:: prefix?\n\n@@ +4163,5 @@\n> +nsresult nsMsgDBView::GetRecipientCollationKey(\n> +                        nsIMsgDBHdr * msgHdr, nsresult (NS_STDCALL \n> +                                              nsMsgDBView::*fetchRecipients)\n> +                                              (nsIMsgDBHdr*, nsAString&),\n> +                        nsString& recipients, nsCOMPtr <nsIMsgDatabase> &dbToUse)\n\nDo you need to get dbToUse passed as argument? Can't it be a local variable?\n\n@@ +4174,5 @@\n> +    {\n> +      rv = GetDBForHeader(msgHdr, getter_AddRefs(dbToUse));\n> +      NS_ENSURE_SUCCESS(rv,rv);\n> +    }\n> +//    rv = dbToUse->CreateCollationKey(recipients, len, result);\n\nWhy is this commented out? If this is not called here then the whole function does not have much sense.\n\n@@ +4214,5 @@\n>      case nsMsgViewSortType::byTo:\n>        {\n>          nsString toRecipients;\n> +        nsCOMPtr <nsIMsgDatabase> dbToUse;\n> +        rv = GetRecipientCollationKey(msgHdr, &nsMsgDBView::FetchToRecipients,\n\nDoes this need the nsMsgDBView:: prefix?\n\n@@ +4226,5 @@\n> +    case nsMsgViewSortType::byCc:\n> +      {\n> +        nsString ccRecipients;\n> +        nsCOMPtr <nsIMsgDatabase> dbToUse;\n> +        rv = GetRecipientCollationKey(msgHdr, &nsMsgDBView::FetchCcRecipients,\n\nDoes this need the nsMsgDBView:: prefix?\n\n@@ +4230,5 @@\n> +        rv = GetRecipientCollationKey(msgHdr, &nsMsgDBView::FetchCcRecipients,\n> +                                      ccRecipients, dbToUse);\n> +        if (NS_SUCCEEDED(rv))\n> +        {\n> +          rv = dbToUse->CreateCollationKey(ccRecipients, len, result);\n\nShouldn't this be part of GetRecipientCollationKey ?\n\n@@ +4238,5 @@\n> +    case nsMsgViewSortType::byBcc:\n> +      {\n> +        nsString bccRecipients;\n> +        nsCOMPtr <nsIMsgDatabase> dbToUse;\n> +        rv = GetRecipientCollationKey(msgHdr, &nsMsgDBView::FetchBccRecipients,\n\nDoes this need the nsMsgDBView:: prefix?\n\n@@ +4242,5 @@\n> +        rv = GetRecipientCollationKey(msgHdr, &nsMsgDBView::FetchBccRecipients,\n> +                                      bccRecipients, dbToUse);\n> +        if (NS_SUCCEEDED(rv))\n> +        {\n> +          rv = dbToUse->CreateCollationKey(bccRecipients, len, result);\n\nShouldn't this be part of GetRecipientCollationKey ?\n\n::: mailnews/base/src/nsMsgDBView.h\n@@ +475,5 @@\n>                                   nsresult (NS_STDCALL nsIMsgDBHdr::*mimeDecoder)\n>                                              (nsAString&),\n>                                   nsAString&);\n> +  nsresult GetRecipientCollationKey(nsIMsgDBHdr * msgHdr,\n> +                                    nsresult (NS_STDCALL nsMsgDBView::*fetchRecipients)\n\nDoes this need the nsMsgDBView:: prefix?\n\n::: mailnews/base/src/nsMsgGroupView.cpp\n@@ +181,4 @@\n>      case nsMsgViewSortType::byTo:\n>        (void) msgHdr->GetRecipients(getter_Copies(cStringKey));\n>        CopyASCIItoUTF16(cStringKey, aHashKey);\n>        break;\n\nIs this correct? Do we really want the same GetRecipients() for all recipient types?\n\n::: suite/locales/en-US/chrome/mailnews/messenger.dtd\n@@ +164,5 @@\n>  <!ENTITY sortByToCmd.accesskey \"o\">\n> +<!ENTITY sortByCcCmd.label \"Cc\">\n> +<!ENTITY sortByBccCmd.label \"Bcc\">\n> +<!ENTITY sortByCcCmd.accesskey \"k\">\n> +<!ENTITY sortByBccCmd.accesskey \"b\"> \n\nPut .accesskey next to .label. And see the \"k\" issue in the corresponding /mail file.\n\n::: suite/mailnews/threadPane.js\n@@ +284,5 @@\n>           || sortType == nsMsgViewSortType.bySubject || sortType == nsMsgViewSortType.byTags\n>           || sortType == nsMsgViewSortType.byStatus  || sortType == nsMsgViewSortType.byRecipient\n>           || sortType == nsMsgViewSortType.byTo || sortType == nsMsgViewSortType.byAccount\n> +         || sortType == nsMsgViewSortType.byFlagged || sortType == nsMsgViewSortType.byAttachments\n> +         || sortType == nsMsgViewSortType.byCc || sortType == nsMsgViewSortType.byBcc);\n\nWould it not be tidier to add Cc and Bcc after To in this expression and Flagged last?", "attachment_id": 778940, "time": "2013-07-24T12:05:29Z", "creation_time": "2013-07-24T12:05:29Z", "is_private": false, "id": 7670889, "bug_id": 699588, "text": "Comment on attachment 778940\nPatch\n\nReview of attachment 778940:\n-----------------------------------------------------------------\n\nI haven't compiled the patch yet but I have some comments just from reading it.\n\n::: mail/locales/en-US/chrome/messenger/messenger.dtd\n@@ +190,5 @@\n>  <!ENTITY sortByRecipientsCmd.accesskey \"c\">\n>  <!ENTITY sortByToCmd.label \"To\">\n>  <!ENTITY sortByToCmd.accesskey \"o\">\n> +<!ENTITY sortByCcCmd.label \"Cc\">\n> +<!ENTITY sortByCcCmd.accesskey \"k\">\n\nThis will look awful (as \"CC (k)\"). But there are not many option left. Any chance you could use \"c\" key here and choose a different one for Recipients?\n\n::: mailnews/base/src/nsMsgDBView.cpp\n@@ +596,4 @@\n>  \n>  nsresult nsMsgDBView::FetchToRecipients(nsIMsgDBHdr * aHdr, nsAString &aRecipientsString)\n>  {\n>    return commonFetchRecipients(aHdr, \"torecipient_names\",\n\nDon't forget about creating the plan on what to do with this \"torecipient_names\" cache name.\n\n@@ +620,5 @@\n>    nsresult rv = FetchToRecipients(aHdr, aRecipientsString);\n>    NS_ENSURE_SUCCESS(rv, rv);\n>    rv = commonFetchRecipients(aHdr, \"ccRecipient_names\",\n>                               &nsIMsgDBHdr::GetMime2DecodedCC,\n>                               aRecipientsString);\n\nOK, so now call FetchCcRecipients and FetchBccRecipients here instead of duplicating them. In the same way you use FetchToRecipients.\n\n@@ +4161,5 @@\n>  }\n>  \n> +nsresult nsMsgDBView::GetRecipientCollationKey(\n> +                        nsIMsgDBHdr * msgHdr, nsresult (NS_STDCALL \n> +                                              nsMsgDBView::*fetchRecipients)\n\nDoes this need the nsMsgDBView:: prefix?\n\n@@ +4163,5 @@\n> +nsresult nsMsgDBView::GetRecipientCollationKey(\n> +                        nsIMsgDBHdr * msgHdr, nsresult (NS_STDCALL \n> +                                              nsMsgDBView::*fetchRecipients)\n> +                                              (nsIMsgDBHdr*, nsAString&),\n> +                        nsString& recipients, nsCOMPtr <nsIMsgDatabase> &dbToUse)\n\nDo you need to get dbToUse passed as argument? Can't it be a local variable?\n\n@@ +4174,5 @@\n> +    {\n> +      rv = GetDBForHeader(msgHdr, getter_AddRefs(dbToUse));\n> +      NS_ENSURE_SUCCESS(rv,rv);\n> +    }\n> +//    rv = dbToUse->CreateCollationKey(recipients, len, result);\n\nWhy is this commented out? If this is not called here then the whole function does not have much sense.\n\n@@ +4214,5 @@\n>      case nsMsgViewSortType::byTo:\n>        {\n>          nsString toRecipients;\n> +        nsCOMPtr <nsIMsgDatabase> dbToUse;\n> +        rv = GetRecipientCollationKey(msgHdr, &nsMsgDBView::FetchToRecipients,\n\nDoes this need the nsMsgDBView:: prefix?\n\n@@ +4226,5 @@\n> +    case nsMsgViewSortType::byCc:\n> +      {\n> +        nsString ccRecipients;\n> +        nsCOMPtr <nsIMsgDatabase> dbToUse;\n> +        rv = GetRecipientCollationKey(msgHdr, &nsMsgDBView::FetchCcRecipients,\n\nDoes this need the nsMsgDBView:: prefix?\n\n@@ +4230,5 @@\n> +        rv = GetRecipientCollationKey(msgHdr, &nsMsgDBView::FetchCcRecipients,\n> +                                      ccRecipients, dbToUse);\n> +        if (NS_SUCCEEDED(rv))\n> +        {\n> +          rv = dbToUse->CreateCollationKey(ccRecipients, len, result);\n\nShouldn't this be part of GetRecipientCollationKey ?\n\n@@ +4238,5 @@\n> +    case nsMsgViewSortType::byBcc:\n> +      {\n> +        nsString bccRecipients;\n> +        nsCOMPtr <nsIMsgDatabase> dbToUse;\n> +        rv = GetRecipientCollationKey(msgHdr, &nsMsgDBView::FetchBccRecipients,\n\nDoes this need the nsMsgDBView:: prefix?\n\n@@ +4242,5 @@\n> +        rv = GetRecipientCollationKey(msgHdr, &nsMsgDBView::FetchBccRecipients,\n> +                                      bccRecipients, dbToUse);\n> +        if (NS_SUCCEEDED(rv))\n> +        {\n> +          rv = dbToUse->CreateCollationKey(bccRecipients, len, result);\n\nShouldn't this be part of GetRecipientCollationKey ?\n\n::: mailnews/base/src/nsMsgDBView.h\n@@ +475,5 @@\n>                                   nsresult (NS_STDCALL nsIMsgDBHdr::*mimeDecoder)\n>                                              (nsAString&),\n>                                   nsAString&);\n> +  nsresult GetRecipientCollationKey(nsIMsgDBHdr * msgHdr,\n> +                                    nsresult (NS_STDCALL nsMsgDBView::*fetchRecipients)\n\nDoes this need the nsMsgDBView:: prefix?\n\n::: mailnews/base/src/nsMsgGroupView.cpp\n@@ +181,4 @@\n>      case nsMsgViewSortType::byTo:\n>        (void) msgHdr->GetRecipients(getter_Copies(cStringKey));\n>        CopyASCIItoUTF16(cStringKey, aHashKey);\n>        break;\n\nIs this correct? Do we really want the same GetRecipients() for all recipient types?\n\n::: suite/locales/en-US/chrome/mailnews/messenger.dtd\n@@ +164,5 @@\n>  <!ENTITY sortByToCmd.accesskey \"o\">\n> +<!ENTITY sortByCcCmd.label \"Cc\">\n> +<!ENTITY sortByBccCmd.label \"Bcc\">\n> +<!ENTITY sortByCcCmd.accesskey \"k\">\n> +<!ENTITY sortByBccCmd.accesskey \"b\"> \n\nPut .accesskey next to .label. And see the \"k\" issue in the corresponding /mail file.\n\n::: suite/mailnews/threadPane.js\n@@ +284,5 @@\n>           || sortType == nsMsgViewSortType.bySubject || sortType == nsMsgViewSortType.byTags\n>           || sortType == nsMsgViewSortType.byStatus  || sortType == nsMsgViewSortType.byRecipient\n>           || sortType == nsMsgViewSortType.byTo || sortType == nsMsgViewSortType.byAccount\n> +         || sortType == nsMsgViewSortType.byFlagged || sortType == nsMsgViewSortType.byAttachments\n> +         || sortType == nsMsgViewSortType.byCc || sortType == nsMsgViewSortType.byBcc);\n\nWould it not be tidier to add Cc and Bcc after To in this expression and Flagged last?", "count": 4, "author": "acelists@atlas.sk", "creator": "acelists@atlas.sk"}, {"attachment_id": null, "tags": [], "creator": "syshagarwal@gmail.com", "creation_time": "2013-07-25T11:13:50Z", "is_private": false, "time": "2013-07-25T11:13:50Z", "raw_text": "(In reply to :aceman from comment #4)\n> Comment on attachment 778940\n> Patch\n> ::: mail/locales/en-US/chrome/messenger/messenger.dtd\n> @@ +190,5 @@\n> >  <!ENTITY sortByRecipientsCmd.accesskey \"c\">\n> >  <!ENTITY sortByToCmd.label \"To\">\n> >  <!ENTITY sortByToCmd.accesskey \"o\">\n> > +<!ENTITY sortByCcCmd.label \"Cc\">\n> > +<!ENTITY sortByCcCmd.accesskey \"k\">\n> \n> This will look awful (as \"CC (k)\"). But there are not many option left. Any\n> chance you could use \"c\" key here and choose a different one for Recipients?\n>\nFixed.\n \n> ::: mailnews/base/src/nsMsgDBView.cpp\n> @@ +596,4 @@\n> >  \n> >  nsresult nsMsgDBView::FetchToRecipients(nsIMsgDBHdr * aHdr, nsAString &aRecipientsString)\n> >  {\n> >    return commonFetchRecipients(aHdr, \"torecipient_names\",\n> \n> Don't forget about creating the plan on what to do with this\n> \"torecipient_names\" cache name.\n>\nreverted back to the name recipient_names\n \n> @@ +620,5 @@\n> >    nsresult rv = FetchToRecipients(aHdr, aRecipientsString);\n> >    NS_ENSURE_SUCCESS(rv, rv);\n> >    rv = commonFetchRecipients(aHdr, \"ccRecipient_names\",\n> >                               &nsIMsgDBHdr::GetMime2DecodedCC,\n> >                               aRecipientsString);\n> \n> OK, so now call FetchCcRecipients and FetchBccRecipients here instead of\n> duplicating them. In the same way you use FetchToRecipients.\n>\ndone. \n> @@ +4161,5 @@\n> >  }\n> >  \n> > +nsresult nsMsgDBView::GetRecipientCollationKey(\n> > +                        nsIMsgDBHdr * msgHdr, nsresult (NS_STDCALL \n> > +                                              nsMsgDBView::*fetchRecipients)\n> \n> Does this need the nsMsgDBView:: prefix?\n> \nI tried to work without the prefixes, but it wasn't working, so put them back.\n\n> @@ +4163,5 @@\n> > +nsresult nsMsgDBView::GetRecipientCollationKey(\n> > +                        nsIMsgDBHdr * msgHdr, nsresult (NS_STDCALL \n> > +                                              nsMsgDBView::*fetchRecipients)\n> > +                                              (nsIMsgDBHdr*, nsAString&),\n> > +                        nsString& recipients, nsCOMPtr <nsIMsgDatabase> &dbToUse)\n> \n> Do you need to get dbToUse passed as argument? Can't it be a local variable?\n> \n> @@ +4174,5 @@\n> > +    {\n> > +      rv = GetDBForHeader(msgHdr, getter_AddRefs(dbToUse));\n> > +      NS_ENSURE_SUCCESS(rv,rv);\n> > +    }\n> > +//    rv = dbToUse->CreateCollationKey(recipients, len, result);\n> \n> Why is this commented out? If this is not called here then the whole\n> function does not have much sense.\n>\nFixed the GetRecipientCollationKey()\n\n> ::: mailnews/base/src/nsMsgGroupView.cpp\n> @@ +181,4 @@\n> >      case nsMsgViewSortType::byTo:\n> >        (void) msgHdr->GetRecipients(getter_Copies(cStringKey));\n> >        CopyASCIItoUTF16(cStringKey, aHashKey);\n> >        break;\n> \n> Is this correct? Do we really want the same GetRecipients() for all\n> recipient types?\n>\nI am not sure about this, it was the same in bug 522886 and noone objected, so I used it here as well.\n \nFixed the accesskey and ordering issues in suite/ as well.\n\nThanks.", "count": 5, "text": "(In reply to :aceman from comment #4)\n> Comment on attachment 778940\n> Patch\n> ::: mail/locales/en-US/chrome/messenger/messenger.dtd\n> @@ +190,5 @@\n> >  <!ENTITY sortByRecipientsCmd.accesskey \"c\">\n> >  <!ENTITY sortByToCmd.label \"To\">\n> >  <!ENTITY sortByToCmd.accesskey \"o\">\n> > +<!ENTITY sortByCcCmd.label \"Cc\">\n> > +<!ENTITY sortByCcCmd.accesskey \"k\">\n> \n> This will look awful (as \"CC (k)\"). But there are not many option left. Any\n> chance you could use \"c\" key here and choose a different one for Recipients?\n>\nFixed.\n \n> ::: mailnews/base/src/nsMsgDBView.cpp\n> @@ +596,4 @@\n> >  \n> >  nsresult nsMsgDBView::FetchToRecipients(nsIMsgDBHdr * aHdr, nsAString &aRecipientsString)\n> >  {\n> >    return commonFetchRecipients(aHdr, \"torecipient_names\",\n> \n> Don't forget about creating the plan on what to do with this\n> \"torecipient_names\" cache name.\n>\nreverted back to the name recipient_names\n \n> @@ +620,5 @@\n> >    nsresult rv = FetchToRecipients(aHdr, aRecipientsString);\n> >    NS_ENSURE_SUCCESS(rv, rv);\n> >    rv = commonFetchRecipients(aHdr, \"ccRecipient_names\",\n> >                               &nsIMsgDBHdr::GetMime2DecodedCC,\n> >                               aRecipientsString);\n> \n> OK, so now call FetchCcRecipients and FetchBccRecipients here instead of\n> duplicating them. In the same way you use FetchToRecipients.\n>\ndone. \n> @@ +4161,5 @@\n> >  }\n> >  \n> > +nsresult nsMsgDBView::GetRecipientCollationKey(\n> > +                        nsIMsgDBHdr * msgHdr, nsresult (NS_STDCALL \n> > +                                              nsMsgDBView::*fetchRecipients)\n> \n> Does this need the nsMsgDBView:: prefix?\n> \nI tried to work without the prefixes, but it wasn't working, so put them back.\n\n> @@ +4163,5 @@\n> > +nsresult nsMsgDBView::GetRecipientCollationKey(\n> > +                        nsIMsgDBHdr * msgHdr, nsresult (NS_STDCALL \n> > +                                              nsMsgDBView::*fetchRecipients)\n> > +                                              (nsIMsgDBHdr*, nsAString&),\n> > +                        nsString& recipients, nsCOMPtr <nsIMsgDatabase> &dbToUse)\n> \n> Do you need to get dbToUse passed as argument? Can't it be a local variable?\n> \n> @@ +4174,5 @@\n> > +    {\n> > +      rv = GetDBForHeader(msgHdr, getter_AddRefs(dbToUse));\n> > +      NS_ENSURE_SUCCESS(rv,rv);\n> > +    }\n> > +//    rv = dbToUse->CreateCollationKey(recipients, len, result);\n> \n> Why is this commented out? If this is not called here then the whole\n> function does not have much sense.\n>\nFixed the GetRecipientCollationKey()\n\n> ::: mailnews/base/src/nsMsgGroupView.cpp\n> @@ +181,4 @@\n> >      case nsMsgViewSortType::byTo:\n> >        (void) msgHdr->GetRecipients(getter_Copies(cStringKey));\n> >        CopyASCIItoUTF16(cStringKey, aHashKey);\n> >        break;\n> \n> Is this correct? Do we really want the same GetRecipients() for all\n> recipient types?\n>\nI am not sure about this, it was the same in bug 522886 and noone objected, so I used it here as well.\n \nFixed the accesskey and ordering issues in suite/ as well.\n\nThanks.", "author": "syshagarwal@gmail.com", "bug_id": 699588, "id": 7675634}, {"attachment_id": 780922, "tags": [], "creator": "syshagarwal@gmail.com", "creation_time": "2013-07-25T11:39:35Z", "is_private": false, "time": "2013-07-25T11:39:35Z", "raw_text": "Patch addressed in comment 5.", "text": "Created attachment 780922\nPatch v2\n\nPatch addressed in comment 5.", "count": 6, "author": "syshagarwal@gmail.com", "bug_id": 699588, "id": 7675675}, {"text": "Comment on attachment 780922\nPatch v2\n\nReview of attachment 780922:\n-----------------------------------------------------------------\n\nNice, thanks. I will need to compile this now.\n\n::: mail/base/content/mailWindowOverlay.js\n@@ +313,5 @@\n>        sortType == nsMsgViewSortType.bySubject || sortType == nsMsgViewSortType.byTags ||\n>        sortType == nsMsgViewSortType.byRecipient || sortType == nsMsgViewSortType.byAccount ||\n>        sortType == nsMsgViewSortType.byStatus || sortType == nsMsgViewSortType.byFlagged ||\n> +      sortType == nsMsgViewSortType.byAttachments || sortType == nsMsgViewSortType.byTo ||\n> +      sortType == nsMsgViewSortType.byCc || sortType == nsMsgViewSortType.byBcc);\n\nI would have expected byRecipient, byTo, byCc, byBcc to be next to each other here.\n\n@@ +368,5 @@\n>                                    sortType == nsMsgViewSortType.byFlagged ||\n>                                    sortType == nsMsgViewSortType.byAttachments ||\n> +                                  sortType == nsMsgViewSortType.byTo ||\n> +                                  sortType == nsMsgViewSortType.byCc ||\n> +                                  sortType == nsMsgViewSortType.byBcc);\n\nI would have expected byRecipient, byTo, byCc, byBcc to be next to each other here.\n\n::: mailnews/base/src/nsMsgDBView.cpp\n@@ +595,5 @@\n>  \n>  \n>  nsresult nsMsgDBView::FetchToRecipients(nsIMsgDBHdr * aHdr, nsAString &aRecipientsString)\n>  {\n> +  return commonFetchRecipients(aHdr, \"recipient_names\",\n\nOk, so just add a comment here that: 'The correct cache name should have been \"torecipient_names\" but it is kept as \"recipient_names\" for legacy reasons to pick up its contents in existing user profiles.'\n\n(We will then think about ways to rename it and regenerate the contents in the other bugs.)\n\n@@ +4169,5 @@\n> +    nsCOMPtr <nsIMsgDatabase> dbToUse = m_db;\n> +    if (!dbToUse) // probably search view\n> +    {\n> +      rv = GetDBForHeader(msgHdr, getter_AddRefs(dbToUse));\n> +      NS_ENSURE_SUCCESS(rv,rv);\n\nSpace after \",\" .\n\n@@ +4199,1 @@\n>        }\n\nIt looks like you can now remove the { } on all 4 cases. It was probably to limit the scope of the local variables.\n\n::: suite/mailnews/mailWindowOverlay.js\n@@ +235,5 @@\n>          || sortType == nsMsgViewSortType.byDate || sortType == nsMsgViewSortType.byReceived || sortType == nsMsgViewSortType.byPriority\n>          || sortType == nsMsgViewSortType.bySubject || sortType == nsMsgViewSortType.byTags\n>          || sortType == nsMsgViewSortType.byRecipient|| sortType == nsMsgViewSortType.byTo\n> +        || sortType == nsMsgViewSortType.byFlagged || sortType == nsMsgViewSortType.byAttachments\n> +        || sortType == nsMsgViewSortType.byCc || sortType == nsMsgViewSortType.byBcc);\n\nI would have expected byReciepient, byTo, byCc, byBcc to be next to each other here.\n\n::: suite/mailnews/threadPane.js\n@@ +284,5 @@\n>           || sortType == nsMsgViewSortType.bySubject || sortType == nsMsgViewSortType.byTags\n>           || sortType == nsMsgViewSortType.byStatus  || sortType == nsMsgViewSortType.byRecipient\n> +         || sortType == nsMsgViewSortType.byAccount || sortType == nsMsgViewSortType.byFlagged\n> +         || sortType == nsMsgViewSortType.byAttachments || sortType == nsMsgViewSortType.byTo\n> +         || sortType == nsMsgViewSortType.byCc || sortType == nsMsgViewSortType.byBcc);\n\nI would have expected byReciepient, byTo, byCc, byBcc to be next to each other here.", "count": 7, "author": "acelists@atlas.sk", "bug_id": 699588, "id": 7675886, "raw_text": "Review of attachment 780922:\n-----------------------------------------------------------------\n\nNice, thanks. I will need to compile this now.\n\n::: mail/base/content/mailWindowOverlay.js\n@@ +313,5 @@\n>        sortType == nsMsgViewSortType.bySubject || sortType == nsMsgViewSortType.byTags ||\n>        sortType == nsMsgViewSortType.byRecipient || sortType == nsMsgViewSortType.byAccount ||\n>        sortType == nsMsgViewSortType.byStatus || sortType == nsMsgViewSortType.byFlagged ||\n> +      sortType == nsMsgViewSortType.byAttachments || sortType == nsMsgViewSortType.byTo ||\n> +      sortType == nsMsgViewSortType.byCc || sortType == nsMsgViewSortType.byBcc);\n\nI would have expected byRecipient, byTo, byCc, byBcc to be next to each other here.\n\n@@ +368,5 @@\n>                                    sortType == nsMsgViewSortType.byFlagged ||\n>                                    sortType == nsMsgViewSortType.byAttachments ||\n> +                                  sortType == nsMsgViewSortType.byTo ||\n> +                                  sortType == nsMsgViewSortType.byCc ||\n> +                                  sortType == nsMsgViewSortType.byBcc);\n\nI would have expected byRecipient, byTo, byCc, byBcc to be next to each other here.\n\n::: mailnews/base/src/nsMsgDBView.cpp\n@@ +595,5 @@\n>  \n>  \n>  nsresult nsMsgDBView::FetchToRecipients(nsIMsgDBHdr * aHdr, nsAString &aRecipientsString)\n>  {\n> +  return commonFetchRecipients(aHdr, \"recipient_names\",\n\nOk, so just add a comment here that: 'The correct cache name should have been \"torecipient_names\" but it is kept as \"recipient_names\" for legacy reasons to pick up its contents in existing user profiles.'\n\n(We will then think about ways to rename it and regenerate the contents in the other bugs.)\n\n@@ +4169,5 @@\n> +    nsCOMPtr <nsIMsgDatabase> dbToUse = m_db;\n> +    if (!dbToUse) // probably search view\n> +    {\n> +      rv = GetDBForHeader(msgHdr, getter_AddRefs(dbToUse));\n> +      NS_ENSURE_SUCCESS(rv,rv);\n\nSpace after \",\" .\n\n@@ +4199,1 @@\n>        }\n\nIt looks like you can now remove the { } on all 4 cases. It was probably to limit the scope of the local variables.\n\n::: suite/mailnews/mailWindowOverlay.js\n@@ +235,5 @@\n>          || sortType == nsMsgViewSortType.byDate || sortType == nsMsgViewSortType.byReceived || sortType == nsMsgViewSortType.byPriority\n>          || sortType == nsMsgViewSortType.bySubject || sortType == nsMsgViewSortType.byTags\n>          || sortType == nsMsgViewSortType.byRecipient|| sortType == nsMsgViewSortType.byTo\n> +        || sortType == nsMsgViewSortType.byFlagged || sortType == nsMsgViewSortType.byAttachments\n> +        || sortType == nsMsgViewSortType.byCc || sortType == nsMsgViewSortType.byBcc);\n\nI would have expected byReciepient, byTo, byCc, byBcc to be next to each other here.\n\n::: suite/mailnews/threadPane.js\n@@ +284,5 @@\n>           || sortType == nsMsgViewSortType.bySubject || sortType == nsMsgViewSortType.byTags\n>           || sortType == nsMsgViewSortType.byStatus  || sortType == nsMsgViewSortType.byRecipient\n> +         || sortType == nsMsgViewSortType.byAccount || sortType == nsMsgViewSortType.byFlagged\n> +         || sortType == nsMsgViewSortType.byAttachments || sortType == nsMsgViewSortType.byTo\n> +         || sortType == nsMsgViewSortType.byCc || sortType == nsMsgViewSortType.byBcc);\n\nI would have expected byReciepient, byTo, byCc, byBcc to be next to each other here.", "time": "2013-07-25T13:02:23Z", "creator": "acelists@atlas.sk", "is_private": false, "creation_time": "2013-07-25T13:02:23Z", "attachment_id": 780922, "tags": []}, {"time": "2013-08-03T05:24:59Z", "raw_text": "Made the changes suggested.", "bug_id": 699588, "id": 7708956, "count": 8, "text": "Created attachment 785342\nPatch v2 (Modified)\n\nMade the changes suggested.", "author": "syshagarwal@gmail.com", "tags": [], "attachment_id": 785342, "creation_time": "2013-08-03T05:24:59Z", "is_private": false, "creator": "syshagarwal@gmail.com"}, {"creator": "syshagarwal@gmail.com", "creation_time": "2013-08-03T05:28:00Z", "is_private": false, "attachment_id": null, "tags": [], "author": "syshagarwal@gmail.com", "text": "As the patch for bug 522886 is checked-out, this patch is to be applied atop the patch for bug 522886 for the review (before it gets checked-in again).\n\nThanks.", "count": 9, "bug_id": 699588, "id": 7708957, "raw_text": "As the patch for bug 522886 is checked-out, this patch is to be applied atop the patch for bug 522886 for the review (before it gets checked-in again).\n\nThanks.", "time": "2013-08-03T05:28:00Z"}, {"author": "syshagarwal@gmail.com", "count": 10, "text": "Comment on attachment 785342\nPatch v2 (Modified)\n\nCancelling review requests as this patch has no meaning before bug 522886 lands.\n\nThanks.", "id": 7875800, "bug_id": 699588, "time": "2013-09-18T18:18:37Z", "raw_text": "Cancelling review requests as this patch has no meaning before bug 522886 lands.\n\nThanks.", "creator": "syshagarwal@gmail.com", "is_private": false, "creation_time": "2013-09-18T18:18:37Z", "attachment_id": 785342, "tags": []}, {"creator": "digitect@gmail.com", "author": "digitect@gmail.com", "text": "Still no CC or BCC column after 10 years?", "count": 11, "id": 15623496, "bug_id": 699588, "creation_time": "2021-10-21T15:35:58Z", "is_private": false, "time": "2021-10-21T15:35:58Z", "attachment_id": null, "raw_text": "Still no CC or BCC column after 10 years?", "tags": []}]}}}