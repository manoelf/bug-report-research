{"bugs": {"684646": {"comments": [{"id": 5700023, "attachment_id": null, "raw_text": "We need functionality into Firefox to conditionally kick in for people with >15second startups that would check for common causes of slow IO:\n1) IO contention due to known windows services(windows media player and windows indexing service kickin on startup)\n2) Antiviral software such as Norton or AVG\n\nThis should popup an info bar pointing to an article on the problem and how to fix it. \n\nThe trick here would be to scan windows processes and see how much IO they do and then attribute that to the relevant highlevel notion of a windows service or another software product. Kevin, do you know how feasible this is for a non-privileged product?\n\nI think as a prereq we should stick in some telemetry probes that would report this info back to us to see if we are even capable of detecting startup contention reliably.", "author": "taras.mozilla@glek.net", "creation_time": "2011-09-05T02:13:19Z", "time": "2011-09-05T02:13:19Z", "tags": [], "bug_id": 684646, "text": "We need functionality into Firefox to conditionally kick in for people with >15second startups that would check for common causes of slow IO:\n1) IO contention due to known windows services(windows media player and windows indexing service kickin on startup)\n2) Antiviral software such as Norton or AVG\n\nThis should popup an info bar pointing to an article on the problem and how to fix it. \n\nThe trick here would be to scan windows processes and see how much IO they do and then attribute that to the relevant highlevel notion of a windows service or another software product. Kevin, do you know how feasible this is for a non-privileged product?\n\nI think as a prereq we should stick in some telemetry probes that would report this info back to us to see if we are even capable of detecting startup contention reliably.", "creator": "taras.mozilla@glek.net", "is_private": false, "count": 0}, {"bug_id": 684646, "count": 1, "author": "kg@luminance.org", "creation_time": "2011-09-05T16:03:35Z", "tags": [], "time": "2011-09-05T16:03:35Z", "text": "http://msdn.microsoft.com/en-us/library/ms684865%28v=vs.85%29.aspx\n\"All users have read access to the list of processes in the system\"\n\nIf you can detect things just based on process name that would probably be easy to do regardless of whether you're running as guest. If you need access to the version information from the executable to get the name of the vendor (like Norton) you'll need read access to the folder where the executable lives - the bright side is that Program Files is always readable, so if they're sane and install it there, you should be able to open the executable and read the version info.", "creator": "kg@luminance.org", "is_private": false, "id": 5700676, "attachment_id": null, "raw_text": "http://msdn.microsoft.com/en-us/library/ms684865%28v=vs.85%29.aspx\n\"All users have read access to the list of processes in the system\"\n\nIf you can detect things just based on process name that would probably be easy to do regardless of whether you're running as guest. If you need access to the version information from the executable to get the name of the vendor (like Norton) you'll need read access to the folder where the executable lives - the bright side is that Program Files is always readable, so if they're sane and install it there, you should be able to open the executable and read the version info."}, {"id": 5719199, "attachment_id": null, "raw_text": "(In reply to Kevin Gadd (:kael) from comment #1)\n> http://msdn.microsoft.com/en-us/library/ms684865%28v=vs.85%29.aspx\n> \"All users have read access to the list of processes in the system\"\n> \n> If you can detect things just based on process name that would probably be\n> easy to do regardless of whether you're running as guest. If you need access\n> to the version information from the executable to get the name of the vendor\n> (like Norton) you'll need read access to the folder where the executable\n> lives - the bright side is that Program Files is always readable, so if\n> they're sane and install it there, you should be able to open the executable\n> and read the version info.\n\nMost of these IO suckers are due to svchost stuff, we need to be able to tell apart various kinds of svchost to detect the harmful ones.", "creation_time": "2011-09-15T20:52:59Z", "author": "taras.mozilla@glek.net", "text": "(In reply to Kevin Gadd (:kael) from comment #1)\n> http://msdn.microsoft.com/en-us/library/ms684865%28v=vs.85%29.aspx\n> \"All users have read access to the list of processes in the system\"\n> \n> If you can detect things just based on process name that would probably be\n> easy to do regardless of whether you're running as guest. If you need access\n> to the version information from the executable to get the name of the vendor\n> (like Norton) you'll need read access to the folder where the executable\n> lives - the bright side is that Program Files is always readable, so if\n> they're sane and install it there, you should be able to open the executable\n> and read the version info.\n\nMost of these IO suckers are due to svchost stuff, we need to be able to tell apart various kinds of svchost to detect the harmful ones.", "time": "2011-09-15T20:52:59Z", "tags": [], "is_private": false, "creator": "taras.mozilla@glek.net", "bug_id": 684646, "count": 2}, {"author": "netzen@gmail.com", "creation_time": "2011-09-15T22:40:53Z", "tags": [], "bug_id": 684646, "time": "2011-09-15T22:40:53Z", "text": "One way is to create a mini file system filter driver to do this manually:\nhttp://msdn.microsoft.com/en-us/windows/hardware/gg462968\n\n...but could we just use a tool that already exists?\n\nI mean something like perfmon?\nYou can access it programatically if needed or just use perfomon.exe.\nYou can see some nice overall stats like avg disk queue length per disk.\n\nAnother great tool is the sysinternals process monitor:\nhttp://technet.microsoft.com/en-us/sysinternals/bb896645\nIt will show you every process in windows, you can filter on everything, and it shows all access times.\nYou can then save/export the data and parse it.  \n\nYou could also look into windows API hooking if process monitor doesn't meet your needs:\nhttp://www.codeproject.com/KB/winsdk/MonitorWindowsFileSystem.aspx\n\nThere are also a number of commercial products that we can simply buy if it would dramatically help you for debugging.\n\nI think using process monitor with some filters defined, and build a simple parser for the data would be best.\nLet me know either way though as tools can be built, but I hope we don't need to spend our time building them.\n\nAlso I'm not sure if you use it, but for our process you could use the FILE_FLAG_NO_BUFFERING flag for open file operations (CreateFile) to get more consistent stats on windows.  \nI think we can do a mini file system filter driver or API hooking for things that aren't our process which automatically sets this flag as well.", "creator": "netzen@gmail.com", "is_private": false, "count": 3, "id": 5719403, "attachment_id": null, "raw_text": "One way is to create a mini file system filter driver to do this manually:\nhttp://msdn.microsoft.com/en-us/windows/hardware/gg462968\n\n...but could we just use a tool that already exists?\n\nI mean something like perfmon?\nYou can access it programatically if needed or just use perfomon.exe.\nYou can see some nice overall stats like avg disk queue length per disk.\n\nAnother great tool is the sysinternals process monitor:\nhttp://technet.microsoft.com/en-us/sysinternals/bb896645\nIt will show you every process in windows, you can filter on everything, and it shows all access times.\nYou can then save/export the data and parse it.  \n\nYou could also look into windows API hooking if process monitor doesn't meet your needs:\nhttp://www.codeproject.com/KB/winsdk/MonitorWindowsFileSystem.aspx\n\nThere are also a number of commercial products that we can simply buy if it would dramatically help you for debugging.\n\nI think using process monitor with some filters defined, and build a simple parser for the data would be best.\nLet me know either way though as tools can be built, but I hope we don't need to spend our time building them.\n\nAlso I'm not sure if you use it, but for our process you could use the FILE_FLAG_NO_BUFFERING flag for open file operations (CreateFile) to get more consistent stats on windows.  \nI think we can do a mini file system filter driver or API hooking for things that aren't our process which automatically sets this flag as well."}, {"bug_id": 684646, "count": 4, "author": "kg@luminance.org", "creation_time": "2011-09-15T22:55:14Z", "tags": [], "time": "2011-09-15T22:55:14Z", "text": "(In reply to Taras Glek (:taras) from comment #2)\n> (In reply to Kevin Gadd (:kael) from comment #1)\n> > http://msdn.microsoft.com/en-us/library/ms684865%28v=vs.85%29.aspx\n> > \"All users have read access to the list of processes in the system\"\n> > \n> > If you can detect things just based on process name that would probably be\n> > easy to do regardless of whether you're running as guest. If you need access\n> > to the version information from the executable to get the name of the vendor\n> > (like Norton) you'll need read access to the folder where the executable\n> > lives - the bright side is that Program Files is always readable, so if\n> > they're sane and install it there, you should be able to open the executable\n> > and read the version info.\n> \n> Most of these IO suckers are due to svchost stuff, we need to be able to\n> tell apart various kinds of svchost to detect the harmful ones.\n\nIf you know the filename for the IO sucker (x.dll, y.exe, etc) you can detect it inside a svchost instance using the debugging helper APIs. I think this might require administrator access, but it might be possible to enumerate as guest, especially if the services are running under the currently logged in user's account (instead of as Local System, etc).\n\nIf you highlight a svchost.exe process with the mouse in Process Explorer, the tooltip shows you which services are currently hosted within that process. I believe the way that works is roughly this:\n\n1) Create a snapshot of the process in question using CreateToolhelp32Snapshot: http://msdn.microsoft.com/en-us/library/ms682489%28v=vs.85%29.aspx\n2) Enumerate all the loaded modules in that process via Module32First and Module32Next: http://msdn.microsoft.com/en-us/library/ms684218%28v=VS.85%29.aspx\n3) From the set of loaded modules, identify modules associated with a registered windows service. Services that run under svchost are configured that way in the registry, so you can just enumerate the registry entries for services to find ones that run under svchost (or outside it, for that matter).\n\nThere's also a simpler way on Windows XP and up, but I don't know if it works as non-administrator - the TASKLIST utility included with Windows can enumerate all running services:\n\nC:\\Users\\Kevin>tasklist /svc /FI \"imagename eq svchost.exe\"\nImage Name                     PID Services\n========================= ======== ============================================\nsvchost.exe                    708 DcomLaunch, PlugPlay, Power\nsvchost.exe                    596 RpcEptMapper, RpcSs\nsvchost.exe                   1120 AudioSrv, Dhcp, eventlog,\n                                   HomeGroupProvider, lmhosts, wscsvc\n\netc. You can leave off /FI to find *all* running services, regardless of the name of the process hosting them, as well. The service names are short-form, though, so to get a more detailed identifier of the service you'd want to look it up in the registry and then read the version info out of the executable(s) to get the company name, etc.", "creator": "kg@luminance.org", "is_private": false, "id": 5719433, "attachment_id": null, "raw_text": "(In reply to Taras Glek (:taras) from comment #2)\n> (In reply to Kevin Gadd (:kael) from comment #1)\n> > http://msdn.microsoft.com/en-us/library/ms684865%28v=vs.85%29.aspx\n> > \"All users have read access to the list of processes in the system\"\n> > \n> > If you can detect things just based on process name that would probably be\n> > easy to do regardless of whether you're running as guest. If you need access\n> > to the version information from the executable to get the name of the vendor\n> > (like Norton) you'll need read access to the folder where the executable\n> > lives - the bright side is that Program Files is always readable, so if\n> > they're sane and install it there, you should be able to open the executable\n> > and read the version info.\n> \n> Most of these IO suckers are due to svchost stuff, we need to be able to\n> tell apart various kinds of svchost to detect the harmful ones.\n\nIf you know the filename for the IO sucker (x.dll, y.exe, etc) you can detect it inside a svchost instance using the debugging helper APIs. I think this might require administrator access, but it might be possible to enumerate as guest, especially if the services are running under the currently logged in user's account (instead of as Local System, etc).\n\nIf you highlight a svchost.exe process with the mouse in Process Explorer, the tooltip shows you which services are currently hosted within that process. I believe the way that works is roughly this:\n\n1) Create a snapshot of the process in question using CreateToolhelp32Snapshot: http://msdn.microsoft.com/en-us/library/ms682489%28v=vs.85%29.aspx\n2) Enumerate all the loaded modules in that process via Module32First and Module32Next: http://msdn.microsoft.com/en-us/library/ms684218%28v=VS.85%29.aspx\n3) From the set of loaded modules, identify modules associated with a registered windows service. Services that run under svchost are configured that way in the registry, so you can just enumerate the registry entries for services to find ones that run under svchost (or outside it, for that matter).\n\nThere's also a simpler way on Windows XP and up, but I don't know if it works as non-administrator - the TASKLIST utility included with Windows can enumerate all running services:\n\nC:\\Users\\Kevin>tasklist /svc /FI \"imagename eq svchost.exe\"\nImage Name                     PID Services\n========================= ======== ============================================\nsvchost.exe                    708 DcomLaunch, PlugPlay, Power\nsvchost.exe                    596 RpcEptMapper, RpcSs\nsvchost.exe                   1120 AudioSrv, Dhcp, eventlog,\n                                   HomeGroupProvider, lmhosts, wscsvc\n\netc. You can leave off /FI to find *all* running services, regardless of the name of the process hosting them, as well. The service names are short-form, though, so to get a more detailed identifier of the service you'd want to look it up in the registry and then read the version info out of the executable(s) to get the company name, etc."}, {"author": "jpr@mozilla.com", "creation_time": "2011-11-30T23:03:36Z", "tags": [], "time": "2011-11-30T23:03:36Z", "bug_id": 684646, "text": "Cheng, what is the likelihood we could provide quality support articles to address these problems?", "creator": "jpr@mozilla.com", "is_private": false, "count": 5, "id": 5883708, "attachment_id": null, "raw_text": "Cheng, what is the likelihood we could provide quality support articles to address these problems?"}, {"id": 5883846, "attachment_id": null, "raw_text": "JP: I need context, sorry.  This makes no sense to me. If we're going to tell users generically: \"Hey Firefox looks slow\", I think the article isn't likely to get much traction with a lot of generic solutions... and if you're asking people to run a 3rd party tool and dig through registry entries, I'd say it's not worth the effort of writing it given how few people can figure it out.", "author": "cww@mozilla.com", "creation_time": "2011-11-30T23:54:04Z", "tags": [], "bug_id": 684646, "time": "2011-11-30T23:54:04Z", "text": "JP: I need context, sorry.  This makes no sense to me. If we're going to tell users generically: \"Hey Firefox looks slow\", I think the article isn't likely to get much traction with a lot of generic solutions... and if you're asking people to run a 3rd party tool and dig through registry entries, I'd say it's not worth the effort of writing it given how few people can figure it out.", "creator": "cww@mozilla.com", "is_private": false, "count": 6}, {"raw_text": "Cheng, the idea is to have Firefox detect specific windows misconfiguration issues and present a support article on how to turn off windows file indexing, windows media player indexing, etc.", "attachment_id": null, "id": 5883850, "is_private": false, "creator": "taras.mozilla@glek.net", "text": "Cheng, the idea is to have Firefox detect specific windows misconfiguration issues and present a support article on how to turn off windows file indexing, windows media player indexing, etc.", "time": "2011-11-30T23:56:34Z", "tags": [], "creation_time": "2011-11-30T23:56:34Z", "author": "taras.mozilla@glek.net", "count": 7, "bug_id": 684646}, {"author": "cww@mozilla.com", "creation_time": "2011-12-01T00:49:54Z", "tags": [], "bug_id": 684646, "time": "2011-12-01T00:49:54Z", "text": "Ok, why don't we look at telemetry data and figure out what percentage of our slow responsiveness is covered by, say, the top 5-10 issues (that have usable solutions).\n\nI think writing articles is fine and doable but we did try this with crash reports and found that even dozens of articles only covered a small percentage of crashes.", "creator": "cww@mozilla.com", "is_private": false, "count": 8, "id": 5884040, "attachment_id": null, "raw_text": "Ok, why don't we look at telemetry data and figure out what percentage of our slow responsiveness is covered by, say, the top 5-10 issues (that have usable solutions).\n\nI think writing articles is fine and doable but we did try this with crash reports and found that even dozens of articles only covered a small percentage of crashes."}, {"attachment_id": null, "raw_text": "Making this bug more general. We have multiple sources of data that we should show to the user\na) We can detect common windows misconfiguration + AV issues\nb) Report slow webpages\nc) Use telemetry to inform the user of addons that are likely to be causing a problem\n\nThe main thing blocking progress at this point is that we need to design/implement a useful notification system.", "id": 6106554, "creator": "taras.mozilla@glek.net", "is_private": false, "author": "taras.mozilla@glek.net", "creation_time": "2012-03-01T18:27:34Z", "tags": [], "time": "2012-03-01T18:27:34Z", "text": "Making this bug more general. We have multiple sources of data that we should show to the user\na) We can detect common windows misconfiguration + AV issues\nb) Report slow webpages\nc) Use telemetry to inform the user of addons that are likely to be causing a problem\n\nThe main thing blocking progress at this point is that we need to design/implement a useful notification system.", "count": 9, "bug_id": 684646}, {"is_private": false, "creator": "jboriss@mozilla.com", "text": "Created attachment 602180\nMockup: Add-on performance indicators surfaced in add-ons manager\n\nRepeating from email:  Showing indicators of add-on performance can offer huge benefit to our users.  We know via Test Pilot that memory and startup-time intensive add-ons are one of the most consistent factors among poorly performing Firefox profiles.  So, giving users the ability to identify which add-ons they are \"paying\" performance for is very valuable.\n\nThis should be our goal: to identify to users the add-ons that are causing serious performance issues.  This gives users the ability to decide whether a particular add-on is \"worth\" a performance investment.  For instance, a web developer may see that a markup tool causes slower startup time, but keep it because it's valuable and possibly disable it when they are not developing.  For users who are not heavy add-on users, if they once installed an add-on that is memory intensive but not being used, they can disable or remove that add-on and enjoy an improved Firefox experience.\n\nSo, there's really no need to mark add-ons performing well.  What we implement should help users identify \"heavy\" add-ons.  This can finally improve our current situation, where performance problems are met with a blanket approach of \"just disable all add-ons,\" as there's no way distinguish add-ons by performance.  The mockup attached how could do that by using our current icons and strings for notifications such as incompatibility.\n\nAs Blair pointed out on that thread, the text is just placeholder - we couldn't reliably know the specific amount of memory an add-on requires enough to say it here.\n\n(In reply to Taras Glek (:taras) from comment #9)\n> Making this bug more general.\n\nWe currently have a number of notification systems in place for problems we need to alert users of.  Surely there's a myriad of performance-related problems we *could* notify users of, but such a problem would need to meet an incredibly high bar.  If a user is frustrated with poor browser performance, merely giving them data about what's going wrong that they (in most cases) can't act on isn't necessarily going to serve their needs.  \n\nOne of the UX team's goals in designing Firefox is to keep interruption and notifications to an absolute minimum possible, only alerting users if something requires direct action (such as a request for permission) or places them in potential danger (such as a potential phishing site).  To alert users of problems like a slow page loading seems very redundant: the user would see the page loading slowly.  I think if we put an additional warning that an add-on causes a performance hit in the actual flow to install that add-on, this could be useful in the user's decision whether or not to install.  But, constantly alerting users to system problems probably isn't the goal here.", "time": "2012-03-01T23:56:07Z", "tags": [], "creation_time": "2012-03-01T23:56:07Z", "author": "jboriss@mozilla.com", "raw_text": "Repeating from email:  Showing indicators of add-on performance can offer huge benefit to our users.  We know via Test Pilot that memory and startup-time intensive add-ons are one of the most consistent factors among poorly performing Firefox profiles.  So, giving users the ability to identify which add-ons they are \"paying\" performance for is very valuable.\n\nThis should be our goal: to identify to users the add-ons that are causing serious performance issues.  This gives users the ability to decide whether a particular add-on is \"worth\" a performance investment.  For instance, a web developer may see that a markup tool causes slower startup time, but keep it because it's valuable and possibly disable it when they are not developing.  For users who are not heavy add-on users, if they once installed an add-on that is memory intensive but not being used, they can disable or remove that add-on and enjoy an improved Firefox experience.\n\nSo, there's really no need to mark add-ons performing well.  What we implement should help users identify \"heavy\" add-ons.  This can finally improve our current situation, where performance problems are met with a blanket approach of \"just disable all add-ons,\" as there's no way distinguish add-ons by performance.  The mockup attached how could do that by using our current icons and strings for notifications such as incompatibility.\n\nAs Blair pointed out on that thread, the text is just placeholder - we couldn't reliably know the specific amount of memory an add-on requires enough to say it here.\n\n(In reply to Taras Glek (:taras) from comment #9)\n> Making this bug more general.\n\nWe currently have a number of notification systems in place for problems we need to alert users of.  Surely there's a myriad of performance-related problems we *could* notify users of, but such a problem would need to meet an incredibly high bar.  If a user is frustrated with poor browser performance, merely giving them data about what's going wrong that they (in most cases) can't act on isn't necessarily going to serve their needs.  \n\nOne of the UX team's goals in designing Firefox is to keep interruption and notifications to an absolute minimum possible, only alerting users if something requires direct action (such as a request for permission) or places them in potential danger (such as a potential phishing site).  To alert users of problems like a slow page loading seems very redundant: the user would see the page loading slowly.  I think if we put an additional warning that an add-on causes a performance hit in the actual flow to install that add-on, this could be useful in the user's decision whether or not to install.  But, constantly alerting users to system problems probably isn't the goal here.", "attachment_id": 602180, "id": 6107899, "count": 10, "bug_id": 684646}, {"id": 6108169, "attachment_id": null, "raw_text": "(In reply to Jennifer Morrow [:Boriss] (Firefox UX) from comment #10)\n> (In reply to Taras Glek (:taras) from comment #9)\n> > Making this bug more general.\n> \n> We currently have a number of notification systems in place for problems we\n> need to alert users of.  Surely there's a myriad of performance-related\n> problems we *could* notify users of, but such a problem would need to meet\n> an incredibly high bar.  If a user is frustrated with poor browser\n> performance, merely giving them data about what's going wrong that they (in\n> most cases) can't act on isn't necessarily going to serve their needs.  \n> \n\nI agree about a high bar.\n1) Some windows problems are really common and user can act on them by following a link to a sumo article on how to change stuff. Think of it as an oil change or low fuel indicator in the car.\n2) Addons are a problem. No need to elaborate\n3) Having a misbehaving tab open is a problem.\nAll 3 of the above are frequent, can be detected and the user would be better off by becoming more aware of them. IE does this well with offering to disable toolbars and other junk. \n\nAs mentioned in the email, the problem with current proposal is that it lives in the addon manager. This needs to be more proactive. I think interrupting the user with a popup/dialog/(or custom tab?) is more ok when we detect firefox is misbehaving.", "author": "taras.mozilla@glek.net", "creation_time": "2012-03-02T01:20:08Z", "time": "2012-03-02T01:20:08Z", "bug_id": 684646, "tags": [], "text": "(In reply to Jennifer Morrow [:Boriss] (Firefox UX) from comment #10)\n> (In reply to Taras Glek (:taras) from comment #9)\n> > Making this bug more general.\n> \n> We currently have a number of notification systems in place for problems we\n> need to alert users of.  Surely there's a myriad of performance-related\n> problems we *could* notify users of, but such a problem would need to meet\n> an incredibly high bar.  If a user is frustrated with poor browser\n> performance, merely giving them data about what's going wrong that they (in\n> most cases) can't act on isn't necessarily going to serve their needs.  \n> \n\nI agree about a high bar.\n1) Some windows problems are really common and user can act on them by following a link to a sumo article on how to change stuff. Think of it as an oil change or low fuel indicator in the car.\n2) Addons are a problem. No need to elaborate\n3) Having a misbehaving tab open is a problem.\nAll 3 of the above are frequent, can be detected and the user would be better off by becoming more aware of them. IE does this well with offering to disable toolbars and other junk. \n\nAs mentioned in the email, the problem with current proposal is that it lives in the addon manager. This needs to be more proactive. I think interrupting the user with a popup/dialog/(or custom tab?) is more ok when we detect firefox is misbehaving.", "creator": "taras.mozilla@glek.net", "is_private": false, "count": 11}]}}, "comments": {}}