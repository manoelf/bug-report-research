{"bugs": {"784842": {"comments": [{"creator": "mats@mozilla.com", "attachment_id": null, "time": "2012-08-22T22:22:49Z", "raw_text": "This bug only occurs in my default profile, it works fine\nin a fresh profile... but still, it seems something broke\nin the past few days...\n\nSTEPS TO REPRODUCE\n1. go to a bug in Bugzilla, such as this one\n2. click \"Add an attachment\"\n3. click \"Browse\"\n\nACTUAL RESULTS\nError: [Exception... \"'JavaScript component does not have a method named: \"open\"' when calling method: [nsIFilePicker::open]\"  nsresult: \"0x80570030 (NS_ERROR_XPC_JSOBJECT_HAS_NO_FUNCTION_NAMED)\"  location: \"native frame :: <unknown filename> :: <TOP_LEVEL> :: line 0\"  data: no]\n\nPLATFORMS AND BUILDS TESTED\nBug occurs in Nightly 2012-08-22 on Linux64", "id": 6575872, "bug_id": 784842, "count": 0, "text": "This bug only occurs in my default profile, it works fine\nin a fresh profile... but still, it seems something broke\nin the past few days...\n\nSTEPS TO REPRODUCE\n1. go to a bug in Bugzilla, such as this one\n2. click \"Add an attachment\"\n3. click \"Browse\"\n\nACTUAL RESULTS\nError: [Exception... \"'JavaScript component does not have a method named: \"open\"' when calling method: [nsIFilePicker::open]\"  nsresult: \"0x80570030 (NS_ERROR_XPC_JSOBJECT_HAS_NO_FUNCTION_NAMED)\"  location: \"native frame :: <unknown filename> :: <TOP_LEVEL> :: line 0\"  data: no]\n\nPLATFORMS AND BUILDS TESTED\nBug occurs in Nightly 2012-08-22 on Linux64", "author": "mats@mozilla.com", "tags": [], "creation_time": "2012-08-22T22:22:49Z", "is_private": false}, {"attachment_id": null, "creator": "mats@mozilla.com", "raw_text": "2012-08-17-03-05-55 works\n2012-08-18-03-06-04 broken\n\nBrian, bug 731307 seems to be in that range?", "time": "2012-08-22T22:48:37Z", "id": 6575980, "bug_id": 784842, "text": "2012-08-17-03-05-55 works\n2012-08-18-03-06-04 broken\n\nBrian, bug 731307 seems to be in that range?", "count": 1, "author": "mats@mozilla.com", "tags": [], "creation_time": "2012-08-22T22:48:37Z", "is_private": false}, {"is_private": false, "author": "mats@mozilla.com", "creation_time": "2012-08-22T23:01:30Z", "tags": [], "raw_text": "Resetting ui.allow_platform_file_picker to false fixes it.\nI had it set to true because I don't like the GTK file picker.", "time": "2012-08-22T23:01:30Z", "id": 6576033, "bug_id": 784842, "text": "Resetting ui.allow_platform_file_picker to false fixes it.\nI had it set to true because I don't like the GTK file picker.", "count": 2, "attachment_id": null, "creator": "mats@mozilla.com"}, {"time": "2012-08-22T23:02:46Z", "raw_text": "AFAIK, many Linux distros set this pref that way by default.", "id": 6576037, "bug_id": 784842, "count": 3, "text": "AFAIK, many Linux distros set this pref that way by default.", "creator": "kairo@kairo.at", "attachment_id": null, "is_private": false, "author": "kairo@kairo.at", "tags": [], "creation_time": "2012-08-22T23:02:46Z"}, {"is_private": false, "tags": [], "creation_time": "2012-08-22T23:12:28Z", "author": "mats@mozilla.com", "bug_id": 784842, "count": 4, "text": "Oops, I mixed up true/false in comment 2.  Hopefully it's clear what\nI meant anyway.", "raw_text": "Oops, I mixed up true/false in comment 2.  Hopefully it's clear what\nI meant anyway.", "time": "2012-08-22T23:12:28Z", "id": 6576064, "creator": "mats@mozilla.com", "attachment_id": null}, {"is_private": false, "tags": [], "creation_time": "2012-08-23T01:46:00Z", "author": "netzen@gmail.com", "count": 5, "text": "Didn't know that existed :) I'll fix that shortly.", "bug_id": 784842, "id": 6576453, "raw_text": "Didn't know that existed :) I'll fix that shortly.", "time": "2012-08-23T01:46:00Z", "creator": "netzen@gmail.com", "attachment_id": null}, {"attachment_id": 654489, "creator": "netzen@gmail.com", "time": "2012-08-23T01:49:03Z", "raw_text": "", "id": 6576459, "bug_id": 784842, "text": "Created attachment 654489\nPatch v1", "count": 6, "author": "netzen@gmail.com", "creation_time": "2012-08-23T01:49:03Z", "tags": [], "is_private": false}, {"count": 7, "text": "Comment on attachment 654489\nPatch v1\n\nTested on linux", "bug_id": 784842, "id": 6576546, "raw_text": "Tested on linux", "time": "2012-08-23T03:09:28Z", "attachment_id": 654489, "creator": "netzen@gmail.com", "is_private": false, "creation_time": "2012-08-23T03:09:28Z", "tags": [], "author": "netzen@gmail.com"}, {"attachment_id": null, "creator": "gavin.sharp@gmail.com", "count": 8, "text": "You can pass a JS function object directly to dispatch (no need for the object with the \"run\" property), since nsIRunnable is a [function]-annotated interface.", "bug_id": 784842, "id": 6578218, "time": "2012-08-23T17:27:42Z", "raw_text": "You can pass a JS function object directly to dispatch (no need for the object with the \"run\" property), since nsIRunnable is a [function]-annotated interface.", "creation_time": "2012-08-23T17:27:42Z", "tags": [], "author": "gavin.sharp@gmail.com", "is_private": false}, {"creator": "netzen@gmail.com", "attachment_id": null, "id": 6578264, "time": "2012-08-23T17:39:29Z", "raw_text": "Oh cool, thanks for the info, I'll update it a bit later today.", "text": "Oh cool, thanks for the info, I'll update it a bit later today.", "count": 9, "bug_id": 784842, "author": "netzen@gmail.com", "creation_time": "2012-08-23T17:39:29Z", "tags": [], "is_private": false}, {"creator": "netzen@gmail.com", "attachment_id": 654887, "time": "2012-08-24T01:36:51Z", "raw_text": "", "id": 6579871, "bug_id": 784842, "text": "Created attachment 654887\nPatch v2", "count": 10, "author": "netzen@gmail.com", "tags": [], "creation_time": "2012-08-24T01:36:51Z", "is_private": false}, {"id": 6580591, "time": "2012-08-24T11:40:50Z", "raw_text": "Updated patch to not use an object with a run property and instead use a function directly.  Tested on linux with the perf set and it's working.", "count": 11, "text": "Comment on attachment 654887\nPatch v2\n\nUpdated patch to not use an object with a run property and instead use a function directly.  Tested on linux with the perf set and it's working.", "bug_id": 784842, "attachment_id": 654887, "creator": "netzen@gmail.com", "is_private": false, "author": "netzen@gmail.com", "tags": [], "creation_time": "2012-08-24T11:40:50Z"}, {"author": "gavin.sharp@gmail.com", "tags": [], "creation_time": "2012-08-24T14:48:21Z", "is_private": false, "creator": "gavin.sharp@gmail.com", "attachment_id": 654887, "raw_text": "That specific part looks fine, haven't reviewed the rest of the patch (I don't think you need re-review for this nit :)", "time": "2012-08-24T14:48:21Z", "id": 6580888, "bug_id": 784842, "text": "Comment on attachment 654887\nPatch v2\n\nThat specific part looks fine, haven't reviewed the rest of the patch (I don't think you need re-review for this nit :)", "count": 12}, {"text": "Comment on attachment 654887\nPatch v2\n\nOK thanks, carrying forward roc's r+.  There is no other part to this patch by the way.  The async filepicker method has already landed.", "count": 13, "bug_id": 784842, "id": 6580891, "time": "2012-08-24T14:49:39Z", "raw_text": "OK thanks, carrying forward roc's r+.  There is no other part to this patch by the way.  The async filepicker method has already landed.", "creator": "netzen@gmail.com", "attachment_id": 654887, "is_private": false, "tags": [], "creation_time": "2012-08-24T14:49:39Z", "author": "netzen@gmail.com"}, {"bug_id": 784842, "text": "I know, but I'm on a phone and am not able to look up interface details or otherwise look into this enough to grant r+.", "count": 14, "raw_text": "I know, but I'm on a phone and am not able to look up interface details or otherwise look into this enough to grant r+.", "time": "2012-08-24T14:52:04Z", "id": 6580900, "creator": "gavin.sharp@gmail.com", "attachment_id": null, "is_private": false, "tags": [], "creation_time": "2012-08-24T14:52:04Z", "author": "gavin.sharp@gmail.com"}, {"author": "netzen@gmail.com", "creation_time": "2012-08-24T14:54:51Z", "tags": [], "is_private": false, "creator": "netzen@gmail.com", "attachment_id": null, "id": 6580906, "raw_text": "np thanks for the feedback and suggestion.", "time": "2012-08-24T14:54:51Z", "count": 15, "text": "np thanks for the feedback and suggestion.", "bug_id": 784842}, {"author": "netzen@gmail.com", "tags": [], "creation_time": "2012-08-25T23:40:51Z", "is_private": false, "creator": "netzen@gmail.com", "attachment_id": null, "id": 6583947, "raw_text": "http://hg.mozilla.org/integration/mozilla-inbound/rev/730c4f0ec3ae", "time": "2012-08-25T23:40:51Z", "text": "http://hg.mozilla.org/integration/mozilla-inbound/rev/730c4f0ec3ae", "count": 16, "bug_id": 784842}, {"time": "2012-08-26T13:18:22Z", "raw_text": ">+      try {\n>+        let result = this.show();\n>+        aFilePickerShownCallback.done(result);\n>+      } catch(ex) {\n>+        aFilePickerShownCallback.done(this.returnCancel);\n>+      }\nI'm not convinced that show() can actually throw; it's certainly got enough try/catch blocks of its own. On the other hand, the callback could throw, and in that case you would attempt to call the callback again. Now you try to pass returnCancel, but JavaScript doesn't inherit interfaces in the same way C++ does, so you needed to use nsIFilePicker.returnCancel, instead you end up passing undefined; I can't remember whether XPConnect throws or casts it to zero.", "id": 6584393, "bug_id": 784842, "count": 17, "text": "Comment on attachment 654887\nPatch v2\n\n>+      try {\n>+        let result = this.show();\n>+        aFilePickerShownCallback.done(result);\n>+      } catch(ex) {\n>+        aFilePickerShownCallback.done(this.returnCancel);\n>+      }\nI'm not convinced that show() can actually throw; it's certainly got enough try/catch blocks of its own. On the other hand, the callback could throw, and in that case you would attempt to call the callback again. Now you try to pass returnCancel, but JavaScript doesn't inherit interfaces in the same way C++ does, so you needed to use nsIFilePicker.returnCancel, instead you end up passing undefined; I can't remember whether XPConnect throws or casts it to zero.", "attachment_id": 654887, "creator": "neil@httl.net", "is_private": false, "author": "neil@httl.net", "tags": [], "creation_time": "2012-08-26T13:18:22Z"}, {"creator": "ryanvm@gmail.com", "attachment_id": null, "raw_text": "https://hg.mozilla.org/mozilla-central/rev/730c4f0ec3ae", "time": "2012-08-26T20:06:36Z", "id": 6584717, "bug_id": 784842, "count": 18, "text": "https://hg.mozilla.org/mozilla-central/rev/730c4f0ec3ae", "author": "ryanvm@gmail.com", "creation_time": "2012-08-26T20:06:36Z", "tags": [], "is_private": false}, {"creation_time": "2012-08-26T20:07:50Z", "tags": [], "author": "netzen@gmail.com", "is_private": false, "attachment_id": null, "creator": "netzen@gmail.com", "bug_id": 784842, "text": "(In reply to neil@parkwaycc.co.uk from comment #17)\n> Comment on attachment 654887\n> Patch v2\n> \n> >+      try {\n> >+        let result = this.show();\n> >+        aFilePickerShownCallback.done(result);\n> >+      } catch(ex) {\n> >+        aFilePickerShownCallback.done(this.returnCancel);\n> >+      }\n> I'm not convinced that show() can actually throw; it's certainly got enough\n> try/catch blocks of its own. On the other hand, the callback could throw,\n> and in that case you would attempt to call the callback again. \n\nGood point I'll fix that along with your previous mention of NS_ENSURE_ARG_POINTER in a new bug since I already pushed this to m-i.\n\n> Now you try\n> to pass returnCancel, but JavaScript doesn't inherit interfaces in the same\n> way C++ does, so you needed to use nsIFilePicker.returnCancel, instead you\n> end up passing undefined; I can't remember whether XPConnect throws or casts\n> it to zero.\n\nDoh ya, this code was the same as the mockfilepicker, but it has this at the top which makes it work correctly: returnCancel: Ci.nsIFilePicker.returnCancel,", "count": 19, "raw_text": "(In reply to neil@parkwaycc.co.uk from comment #17)\n> Comment on attachment 654887\n> Patch v2\n> \n> >+      try {\n> >+        let result = this.show();\n> >+        aFilePickerShownCallback.done(result);\n> >+      } catch(ex) {\n> >+        aFilePickerShownCallback.done(this.returnCancel);\n> >+      }\n> I'm not convinced that show() can actually throw; it's certainly got enough\n> try/catch blocks of its own. On the other hand, the callback could throw,\n> and in that case you would attempt to call the callback again. \n\nGood point I'll fix that along with your previous mention of NS_ENSURE_ARG_POINTER in a new bug since I already pushed this to m-i.\n\n> Now you try\n> to pass returnCancel, but JavaScript doesn't inherit interfaces in the same\n> way C++ does, so you needed to use nsIFilePicker.returnCancel, instead you\n> end up passing undefined; I can't remember whether XPConnect throws or casts\n> it to zero.\n\nDoh ya, this code was the same as the mockfilepicker, but it has this at the top which makes it work correctly: returnCancel: Ci.nsIFilePicker.returnCancel,", "time": "2012-08-26T20:07:50Z", "id": 6584719}, {"author": "netzen@gmail.com", "creation_time": "2012-08-26T20:35:23Z", "tags": [], "attachment_id": null, "creator": "netzen@gmail.com", "id": 6584739, "is_private": false, "time": "2012-08-26T20:35:23Z", "raw_text": "Comment 17 fixed in Bug 785744", "count": 20, "text": "Comment 17 fixed in Bug 785744", "bug_id": 784842}]}}, "comments": {}}