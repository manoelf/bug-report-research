{"bugs": {"666963": {"comments": [{"author": "jorendorff@mozilla.com", "creator": "jorendorff@mozilla.com", "id": 5554311, "is_private": false, "count": 0, "tags": [], "bug_id": 666963, "raw_text": "var fp_t = ctypes.FunctionType(ctypes.default_abi, ctypes.void_t).ptr;\nvar fp = new fp_t(function () {});\nfp();\n\n#0  JS_Assert (s=0x100373106 \"!rt->gcRunning\", file=0x100372c48 \"js/src/jscntxt.cpp\", ln=586) at js/src/jsutil.cpp:86\n#1  js_DestroyContext (cx=0x100b0c280, mode=JSDCM_NO_GC) at js/src/jscntxt.cpp:586\n#2  JS_DestroyContextNoGC (cx=0x100b0c280) at js/src/jsapi.cpp:1046\n#3  js::ctypes::CType::FinalizeProtoClass (cx=0x100b016b0, obj=0x100d092e0) at js/src/ctypes/CTypes.cpp:2753\n#4  JSObject::finalize (this=0x100d092e0, cx=0x100b016b0) at jsobjinlines.h:141\n#5  js::gc::Arena::finalize<JSObject_Slots12> (this=0x100d09000, cx=0x100b016b0) at js/src/jsgc.cpp:252\n#6  js::gc::FinalizeArenas<JSObject_Slots12> (cx=0x100b016b0, listHeadp=0x10180a058) at js/src/jsgc.cpp:297\n#7  js::gc::ArenaList::finalizeNow<JSObject_Slots12> (this=0x10180a058, cx=0x100b016b0) at js/src/jsgc.cpp:1230\n#8  JSCompartment::finalizeObjectArenaLists (this=0x101809e00, cx=0x100b016b0) at js/src/jsgc.cpp:2011\n#9  MarkAndSweep (cx=0x100b016b0, comp=0x0, gckind=GC_NORMAL, gcTimer=@0x7fff5fbff520) at js/src/jsgc.cpp:2384\n#10 GCCycle (cx=0x100b016b0, comp=0x0, gckind=GC_NORMAL, gcTimer=@0x7fff5fbff520) at js/src/jsgc.cpp:2679\n#11 js_GC (cx=0x100b016b0, comp=0x0, gckind=GC_NORMAL) at js/src/jsgc.cpp:2744\n#12 js_DestroyContext (cx=0x100b016b0, mode=JSDCM_FORCE_GC) at js/src/jscntxt.cpp:642\n#13 JS_DestroyContext (cx=0x100b016b0) at js/src/jsapi.cpp:1040\n#14 DestroyContext (cx=0x100b016b0, withGC=true) at js/src/shell/js.cpp:5974\n#15 main (argc=4, argv=0x7fff5fbff6e0, envp=0x7fff5fbff708) at js/src/shell/js.cpp:6230\n\nWe assert that you don't destroy the last context during GC. The easiest workaround I can think of is for the shell (and all ctypes-using JSAPI applications) to keep an extra cx around until we're pretty sure all objects have been finalized.\n\nThat's kind of gross, though. Anyone got alternatives?", "creation_time": "2011-06-24T17:22:57Z", "time": "2011-06-24T17:22:57Z", "attachment_id": null, "text": "var fp_t = ctypes.FunctionType(ctypes.default_abi, ctypes.void_t).ptr;\nvar fp = new fp_t(function () {});\nfp();\n\n#0  JS_Assert (s=0x100373106 \"!rt->gcRunning\", file=0x100372c48 \"js/src/jscntxt.cpp\", ln=586) at js/src/jsutil.cpp:86\n#1  js_DestroyContext (cx=0x100b0c280, mode=JSDCM_NO_GC) at js/src/jscntxt.cpp:586\n#2  JS_DestroyContextNoGC (cx=0x100b0c280) at js/src/jsapi.cpp:1046\n#3  js::ctypes::CType::FinalizeProtoClass (cx=0x100b016b0, obj=0x100d092e0) at js/src/ctypes/CTypes.cpp:2753\n#4  JSObject::finalize (this=0x100d092e0, cx=0x100b016b0) at jsobjinlines.h:141\n#5  js::gc::Arena::finalize<JSObject_Slots12> (this=0x100d09000, cx=0x100b016b0) at js/src/jsgc.cpp:252\n#6  js::gc::FinalizeArenas<JSObject_Slots12> (cx=0x100b016b0, listHeadp=0x10180a058) at js/src/jsgc.cpp:297\n#7  js::gc::ArenaList::finalizeNow<JSObject_Slots12> (this=0x10180a058, cx=0x100b016b0) at js/src/jsgc.cpp:1230\n#8  JSCompartment::finalizeObjectArenaLists (this=0x101809e00, cx=0x100b016b0) at js/src/jsgc.cpp:2011\n#9  MarkAndSweep (cx=0x100b016b0, comp=0x0, gckind=GC_NORMAL, gcTimer=@0x7fff5fbff520) at js/src/jsgc.cpp:2384\n#10 GCCycle (cx=0x100b016b0, comp=0x0, gckind=GC_NORMAL, gcTimer=@0x7fff5fbff520) at js/src/jsgc.cpp:2679\n#11 js_GC (cx=0x100b016b0, comp=0x0, gckind=GC_NORMAL) at js/src/jsgc.cpp:2744\n#12 js_DestroyContext (cx=0x100b016b0, mode=JSDCM_FORCE_GC) at js/src/jscntxt.cpp:642\n#13 JS_DestroyContext (cx=0x100b016b0) at js/src/jsapi.cpp:1040\n#14 DestroyContext (cx=0x100b016b0, withGC=true) at js/src/shell/js.cpp:5974\n#15 main (argc=4, argv=0x7fff5fbff6e0, envp=0x7fff5fbff708) at js/src/shell/js.cpp:6230\n\nWe assert that you don't destroy the last context during GC. The easiest workaround I can think of is for the shell (and all ctypes-using JSAPI applications) to keep an extra cx around until we're pretty sure all objects have been finalized.\n\nThat's kind of gross, though. Anyone got alternatives?"}, {"raw_text": "While whatever ctypes-knowing person is solving this, I have a related question: what is the multi-threading situation with ctypes that requires a JS_SetContextThread/JS_ClearContextThread in ClosureStub?", "creation_time": "2011-06-24T17:37:55Z", "attachment_id": null, "time": "2011-06-24T17:37:55Z", "text": "While whatever ctypes-knowing person is solving this, I have a related question: what is the multi-threading situation with ctypes that requires a JS_SetContextThread/JS_ClearContextThread in ClosureStub?", "id": 5554351, "count": 1, "is_private": false, "tags": [], "bug_id": 666963, "author": "mail@lukewagner.name", "creator": "mail@lukewagner.name"}, {"author": "bent.mozilla@gmail.com", "creator": "bent.mozilla@gmail.com", "bug_id": 666963, "id": 5554357, "tags": [], "is_private": false, "count": 2, "time": "2011-06-24T17:39:04Z", "attachment_id": null, "text": "There's some sort of multithreaded callback support.", "raw_text": "There's some sort of multithreaded callback support.", "creation_time": "2011-06-24T17:39:04Z"}, {"bug_id": 666963, "tags": [], "count": 3, "is_private": false, "id": 5554630, "text": "Do you see a straight-forward way to handle this in a single-threaded runtime world?", "attachment_id": null, "time": "2011-06-24T18:54:25Z", "creation_time": "2011-06-24T18:54:25Z", "raw_text": "Do you see a straight-forward way to handle this in a single-threaded runtime world?", "creator": "mail@lukewagner.name", "author": "mail@lukewagner.name"}, {"creator": "cdleary@acm.org", "author": "cdleary@acm.org", "raw_text": "Why is that assert useful? It just seems incorrect.", "creation_time": "2011-06-26T19:37:30Z", "text": "Why is that assert useful? It just seems incorrect.", "attachment_id": null, "time": "2011-06-26T19:37:30Z", "count": 4, "is_private": false, "tags": [], "id": 5557318, "bug_id": 666963}, {"tags": [], "is_private": false, "count": 5, "id": 5562052, "bug_id": 666963, "raw_text": "Hey all:\n\nI just hit this with a js-ctypes backed add-on I'm developing for Thunderbird.  Just thought I'd let y'all know.\n\n-Mike", "creation_time": "2011-06-28T17:09:31Z", "text": "Hey all:\n\nI just hit this with a js-ctypes backed add-on I'm developing for Thunderbird.  Just thought I'd let y'all know.\n\n-Mike", "attachment_id": null, "time": "2011-06-28T17:09:31Z", "creator": "mconley@mozilla.com", "author": "mconley@mozilla.com"}, {"creator": "bent.mozilla@gmail.com", "author": "bent.mozilla@gmail.com", "creation_time": "2011-07-07T19:53:24Z", "raw_text": "Ouch, this bites the new worker stuff too if you use ctypes. dmandelin, can we get this assigned?", "text": "Ouch, this bites the new worker stuff too if you use ctypes. dmandelin, can we get this assigned?", "time": "2011-07-07T19:53:24Z", "attachment_id": null, "tags": [], "is_private": false, "count": 6, "id": 5579378, "bug_id": 666963}, {"creator": "igor@mir2.org", "author": "igor@mir2.org", "raw_text": "I will look into it.", "creation_time": "2011-07-08T17:16:12Z", "text": "I will look into it.", "time": "2011-07-08T17:16:12Z", "attachment_id": null, "tags": [], "is_private": false, "count": 7, "id": 5581245, "bug_id": 666963}]}}, "comments": {}}