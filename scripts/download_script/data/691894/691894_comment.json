{"comments": {}, "bugs": {"691894": {"comments": [{"raw_text": "", "creation_time": "2011-10-04T20:27:31Z", "time": "2011-10-04T20:27:31Z", "attachment_id": null, "text": "", "id": 5758412, "tags": [], "is_private": false, "count": 0, "bug_id": 691894, "author": "jorendorff@mozilla.com", "creator": "jorendorff@mozilla.com"}, {"text": "This turned out to be something of a pain.\n\n  - The front end isn't set up to handle compiling against a Call object.\n    Only stack frames. This was pretty easy to fix.\n\n  - ContextStack::pushExecuteFrame had to be rewired a bit to handle running\n    against a Call object without a StackFrame. This was a bit touchy but I\n    think I got it working.\n\n  - It's impossible to recover the this-value for an execution context given\n    only the lexical environment. The API is incomplete: the method should\n    probably include a way to specify a this-value.\n\n  - I am worried about DEFVAR and DEFFUN opcodes being emitted that could\n    extend Call environments that the were previously assumed to be inextensible.\n    I didn't try to fix this.\n\n  - Deciding when to treat the eval code as strict mode (and thus introduce\n    a new variable environment, like strict direct eval) turned out to be\n    hard to specify nicely.\n\n  - Need to do some more research to figure out how best to handle \"arguments\".\n    ES5 says \"arguments\" is a binding in the call environment, but we don't\n    actually implement it that way--at least, I *think* we never do.\n\nAnd I have vague misgivings about adding another vector into the interpreter.\n\nSo this has been reclassified as a \"future plan\" for now. We may actually do it but it needs more thought than I can give it today.", "creator": "jorendorff@mozilla.com", "author": "jorendorff@mozilla.com", "attachment_id": null, "time": "2011-10-07T23:12:37Z", "creation_time": "2011-10-07T23:12:37Z", "raw_text": "This turned out to be something of a pain.\n\n  - The front end isn't set up to handle compiling against a Call object.\n    Only stack frames. This was pretty easy to fix.\n\n  - ContextStack::pushExecuteFrame had to be rewired a bit to handle running\n    against a Call object without a StackFrame. This was a bit touchy but I\n    think I got it working.\n\n  - It's impossible to recover the this-value for an execution context given\n    only the lexical environment. The API is incomplete: the method should\n    probably include a way to specify a this-value.\n\n  - I am worried about DEFVAR and DEFFUN opcodes being emitted that could\n    extend Call environments that the were previously assumed to be inextensible.\n    I didn't try to fix this.\n\n  - Deciding when to treat the eval code as strict mode (and thus introduce\n    a new variable environment, like strict direct eval) turned out to be\n    hard to specify nicely.\n\n  - Need to do some more research to figure out how best to handle \"arguments\".\n    ES5 says \"arguments\" is a binding in the call environment, but we don't\n    actually implement it that way--at least, I *think* we never do.\n\nAnd I have vague misgivings about adding another vector into the interpreter.\n\nSo this has been reclassified as a \"future plan\" for now. We may actually do it but it needs more thought than I can give it today.", "bug_id": 691894, "tags": [], "count": 1, "is_private": false, "id": 5768388}]}}}