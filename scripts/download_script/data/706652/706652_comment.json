{"bugs": {"706652": {"comments": [{"is_private": false, "id": 5883480, "count": 0, "creator": "jimb@mozilla.com", "creation_time": "2011-11-30T21:49:14Z", "time": "2011-11-30T21:49:14Z", "author": "jimb@mozilla.com", "attachment_id": null, "raw_text": "At present, calling a function via 'new' or JS_New sets the CONSTRUCTING flag on the stack frame for the constructor. ScriptPrologue checks this flag to decide whether to allocate a new object. ScriptEpilogue checks this flag to decide whether to replace a non-object return value with 'this', as required by ECMAScript's [[Construct]] algorithm.\n\nJaegerMonkey boils this away by generating separate 'constructor' and 'normal' versions of the code, and the tests' interpreter perf impact doesn't matter, but it seems like all this could go away simply by having the call site take care of allocating the object and replacing a primitive return value with 'this', instead of having the callee tend to it.\n\n(Native functions can be marked as always creating their own objects, so the call site should recognize those and avoid allocating an object in that case.)", "bug_id": 706652, "text": "At present, calling a function via 'new' or JS_New sets the CONSTRUCTING flag on the stack frame for the constructor. ScriptPrologue checks this flag to decide whether to allocate a new object. ScriptEpilogue checks this flag to decide whether to replace a non-object return value with 'this', as required by ECMAScript's [[Construct]] algorithm.\n\nJaegerMonkey boils this away by generating separate 'constructor' and 'normal' versions of the code, and the tests' interpreter perf impact doesn't matter, but it seems like all this could go away simply by having the call site take care of allocating the object and replacing a primitive return value with 'this', instead of having the callee tend to it.\n\n(Native functions can be marked as always creating their own objects, so the call site should recognize those and avoid allocating an object in that case.)", "tags": []}]}}, "comments": {}}