{"comments": {}, "bugs": {"1635906": {"comments": [{"id": 14801180, "bug_id": 1635906, "tags": [], "author": "jklukas@mozilla.com", "attachment_id": null, "creator": "jklukas@mozilla.com", "is_private": false, "creation_time": "2020-05-06T19:50:51Z", "time": "2020-05-06T19:50:51Z", "text": "When an FxA user has their ecosystem_user_id value change (due a password reset, for example), we will receive some ping with both old and new values. We will need ETL to keep track of a canonical value.", "raw_text": "When an FxA user has their ecosystem_user_id value change (due a password reset, for example), we will receive some ping with both old and new values. We will need ETL to keep track of a canonical value.", "count": 0}, {"attachment_id": null, "creator": "jklukas@mozilla.com", "tags": [], "author": "jklukas@mozilla.com", "bug_id": 1635906, "id": 15016404, "count": 1, "text": "I am currently working on how to express this in BigQuery SQL, and it will require a bit of new tooling since the necessary logic requires a loop to catch the full trail if there are multiple password resets for a single user in a given day.\n\nThe `canonical_ecosystem_user_id` table will have columns `(ecosystem_user_id, canonical_id)` where `ecosystem_user_id` is unique and `canonical_id` may appear multiple times.\n\nWe can choose to have `canonical_id` be the user's first seen `ecosystem_user_id` value, some hash of that first value, or a generated UUID.\n\nOutline of the proposed logic:\n\n- Create a temporary table of (eco_uid, previous_eco_uid) pairs from for the target submission date from `firefox_accounts_stable.account_ecosystem_v1`\n- Deduplicate the temporary table to ensure a single entry per eco_uid\n- Loop\n  - Rewrite the temp table using a self-join that connects eco_uid to previous_eco_uid; we replace previous_eco_uid with the parent value when available\n  - Loop ends when no more entries match the join condition\n- Merge the new day's results into the full `canonical_ecosystem_user_id` table", "creation_time": "2020-09-01T14:28:49Z", "time": "2020-09-01T14:28:49Z", "raw_text": "I am currently working on how to express this in BigQuery SQL, and it will require a bit of new tooling since the necessary logic requires a loop to catch the full trail if there are multiple password resets for a single user in a given day.\n\nThe `canonical_ecosystem_user_id` table will have columns `(ecosystem_user_id, canonical_id)` where `ecosystem_user_id` is unique and `canonical_id` may appear multiple times.\n\nWe can choose to have `canonical_id` be the user's first seen `ecosystem_user_id` value, some hash of that first value, or a generated UUID.\n\nOutline of the proposed logic:\n\n- Create a temporary table of (eco_uid, previous_eco_uid) pairs from for the target submission date from `firefox_accounts_stable.account_ecosystem_v1`\n- Deduplicate the temporary table to ensure a single entry per eco_uid\n- Loop\n  - Rewrite the temp table using a self-join that connects eco_uid to previous_eco_uid; we replace previous_eco_uid with the parent value when available\n  - Loop ends when no more entries match the join condition\n- Merge the new day's results into the full `canonical_ecosystem_user_id` table", "is_private": false}, {"count": 2, "is_private": false, "raw_text": "", "creation_time": "2020-09-10T20:08:09Z", "time": "2020-09-10T20:08:09Z", "text": "Created attachment 9175024\nLink to GitHub pull-request: https://github.com/mozilla/bigquery-etl/pull/1298", "author": "pulgasaur@mozilla.bugs", "tags": [], "creator": "pulgasaur@mozilla.bugs", "attachment_id": 9175024, "id": 15030339, "bug_id": 1635906}, {"text": "Created attachment 9176318\nLink to GitHub pull-request: https://github.com/mozilla/bigquery-etl/pull/1323", "creation_time": "2020-09-17T15:55:10Z", "tags": [], "author": "pulgasaur@mozilla.bugs", "attachment_id": 9176318, "is_private": false, "time": "2020-09-17T15:55:10Z", "raw_text": "", "count": 3, "id": 15041156, "bug_id": 1635906, "creator": "pulgasaur@mozilla.bugs"}, {"raw_text": "Real implementation up for review in https://bugzilla.mozilla.org/attachment.cgi?id=9176318\n\nIt introduces terminology of `canonical_id` for the first `ecosystem_user_id` per user.\n\nThis table is being created in dataset `account_ecosystem_derived` and will be referenced in future user-facing views under `account_ecosystem`.", "text": "Real implementation up for review in https://bugzilla.mozilla.org/attachment.cgi?id=9176318\n\nIt introduces terminology of `canonical_id` for the first `ecosystem_user_id` per user.\n\nThis table is being created in dataset `account_ecosystem_derived` and will be referenced in future user-facing views under `account_ecosystem`.", "creation_time": "2020-09-17T15:59:02Z", "time": "2020-09-17T15:59:02Z", "is_private": false, "count": 4, "bug_id": 1635906, "id": 15041160, "creator": "jklukas@mozilla.com", "attachment_id": null, "author": "jklukas@mozilla.com", "tags": []}, {"bug_id": 1635906, "id": 15050844, "creator": "pulgasaur@mozilla.bugs", "raw_text": "", "time": "2020-09-23T19:55:21Z", "is_private": false, "count": 5, "attachment_id": 9177484, "author": "pulgasaur@mozilla.bugs", "tags": [], "text": "Created attachment 9177484\nLink to GitHub pull-request: https://github.com/mozilla/bigquery-etl/pull/1335", "creation_time": "2020-09-23T19:55:21Z"}]}}}