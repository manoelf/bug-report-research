{"bugs": {"539476": {"comments": [{"is_private": false, "time": "2010-01-13T17:45:53Z", "count": 0, "attachment_id": null, "bug_id": 539476, "id": 4485783, "author": "mdavids@gmail.com", "tags": [], "raw_text": "User-Agent:       Mozilla/5.0 (X11; U; Linux x86_64; en-US) AppleWebKit/532.8 (KHTML, like Gecko) Chrome/4.0.288.1 Safari/532.8\nBuild Identifier: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.2) Gecko/20100105 Firefox/3.6 GTB6 (.NET CLR 3.5.30729)\n\nUsing the new drag/drop file handling in FF 3.6, if you drag an image file into an iframe in designMode, the HTML is modified to include an <img> with src of the file:/// URL of the image you dragged. This cannot be prevented. \n\nReproducible: Always\n\nSteps to Reproduce:\n1. Drag an image from the FS into the frame.\n2. Notice the alert (which is the custom drag/drop handling)\n\nActual Results:  \nThere is an <img> added to the HTML of the frame (verifiable in Firebug).\n\nExpected Results:  \nThere should be no <img> added since the script calls preventDefault()", "creation_time": "2010-01-13T17:45:53Z", "text": "User-Agent:       Mozilla/5.0 (X11; U; Linux x86_64; en-US) AppleWebKit/532.8 (KHTML, like Gecko) Chrome/4.0.288.1 Safari/532.8\nBuild Identifier: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.2) Gecko/20100105 Firefox/3.6 GTB6 (.NET CLR 3.5.30729)\n\nUsing the new drag/drop file handling in FF 3.6, if you drag an image file into an iframe in designMode, the HTML is modified to include an <img> with src of the file:/// URL of the image you dragged. This cannot be prevented. \n\nReproducible: Always\n\nSteps to Reproduce:\n1. Drag an image from the FS into the frame.\n2. Notice the alert (which is the custom drag/drop handling)\n\nActual Results:  \nThere is an <img> added to the HTML of the frame (verifiable in Firebug).\n\nExpected Results:  \nThere should be no <img> added since the script calls preventDefault()", "creator": "mdavids@gmail.com"}, {"raw_text": "Neil, is part of your drag'n'drop code? Or is this a bug somewhere in editor? This is sort of a big deal since it means that you can't use our new-fangled File drag'n'drop support doesn't work with rich text editing.", "text": "Neil, is part of your drag'n'drop code? Or is this a bug somewhere in editor? This is sort of a big deal since it means that you can't use our new-fangled File drag'n'drop support doesn't work with rich text editing.", "creation_time": "2010-01-13T20:16:40Z", "creator": "jonas@sicking.cc", "author": "jonas@sicking.cc", "bug_id": 539476, "id": 4486142, "is_private": false, "count": 1, "time": "2010-01-13T20:16:40Z", "attachment_id": null, "tags": []}, {"text": "Two issues here:\n\n1. The editor drop event listener is firing before the one added by the testcase.\n2. The editor drop event listener doesn't check if the event has been cancelled.\n\nThe editor should really be handing everything as part of the default phase of the event handling, or it should add the listener in the system event group.\n\nAs a workaround, change:\n  target.addEventListener('drop', drop, false);\nto:\n  target.documentElement.addEventListener('drop', drop, false);\n\nsuch that this listener occurs before the editor one.", "creation_time": "2010-01-19T20:14:23Z", "creator": "enndeakin@gmail.com", "raw_text": "Two issues here:\n\n1. The editor drop event listener is firing before the one added by the testcase.\n2. The editor drop event listener doesn't check if the event has been cancelled.\n\nThe editor should really be handing everything as part of the default phase of the event handling, or it should add the listener in the system event group.\n\nAs a workaround, change:\n  target.addEventListener('drop', drop, false);\nto:\n  target.documentElement.addEventListener('drop', drop, false);\n\nsuch that this listener occurs before the editor one.", "tags": [], "author": "enndeakin@gmail.com", "id": 4494439, "bug_id": 539476, "is_private": false, "time": "2010-01-19T20:14:23Z", "count": 2, "attachment_id": null}, {"is_private": false, "time": "2010-01-22T23:13:57Z", "count": 3, "attachment_id": null, "bug_id": 539476, "id": 4500902, "author": "mdavids@gmail.com", "raw_text": "In the code I'm working on we have a contentEditable body in an iframe, so the timing might be different there. I'll try the workaround in the meantime.", "text": "In the code I'm working on we have a contentEditable body in an iframe, so the timing might be different there. I'll try the workaround in the meantime.", "creation_time": "2010-01-22T23:13:57Z", "creator": "mdavids@gmail.com", "tags": []}, {"tags": [], "creator": "jonas@sicking.cc", "text": "Neil, could you take this bug on?", "creation_time": "2010-01-22T23:48:17Z", "raw_text": "Neil, could you take this bug on?", "author": "jonas@sicking.cc", "id": 4500997, "bug_id": 539476, "count": 4, "attachment_id": null, "time": "2010-01-22T23:48:17Z", "is_private": false}, {"id": 4542775, "bug_id": 539476, "is_private": false, "count": 6, "time": "2010-02-18T21:04:56Z", "attachment_id": 427639, "creation_time": "2010-02-18T21:04:56Z", "text": "Created attachment 427639\nFix bug. The patch is dependent on other bugs", "creator": "enndeakin@gmail.com", "raw_text": "", "author": "enndeakin@gmail.com", "tags": []}, {"creation_time": "2010-03-25T18:14:43Z", "text": "Created attachment 434921\nversion 2", "creator": "enndeakin@gmail.com", "raw_text": "", "tags": [], "author": "enndeakin@gmail.com", "id": 4604273, "bug_id": 539476, "is_private": false, "attachment_id": 434921, "count": 7, "time": "2010-03-25T18:14:43Z"}, {"author": "bugs@pettay.fi", "creator": "bugs@pettay.fi", "text": "Comment on attachment 434921\nversion 2\n\n>diff --git a/editor/libeditor/base/nsEditor.cpp b/editor/libeditor/base/nsEditor.cpp\n>--- a/editor/libeditor/base/nsEditor.cpp\n>+++ b/editor/libeditor/base/nsEditor.cpp\n>@@ -364,26 +364,36 @@ nsEditor::InstallEventListeners()\n>                                         NS_GET_IID(nsIDOMTextListener));\n> \n>   rv |= piTarget->AddEventListenerByIID(mEventListener,\n>                                         NS_GET_IID(nsIDOMCompositionListener));\n> \n>   nsCOMPtr<nsIDOMEventTarget> target(do_QueryInterface(piTarget));\n>   if (target) {\n>     // See bug 455215, we cannot use the standard dragstart event yet\n>-    rv |= target->AddEventListener(NS_LITERAL_STRING(\"draggesture\"),\n>-                                   mEventListener, PR_FALSE);\n>-    rv |= target->AddEventListener(NS_LITERAL_STRING(\"dragenter\"),\n>-                                   mEventListener, PR_FALSE);\n>-    rv |= target->AddEventListener(NS_LITERAL_STRING(\"dragover\"),\n>-                                   mEventListener, PR_FALSE);\n>-    rv |= target->AddEventListener(NS_LITERAL_STRING(\"dragleave\"),\n>-                                   mEventListener, PR_FALSE);\n>-    rv |= target->AddEventListener(NS_LITERAL_STRING(\"drop\"),\n>-                                   mEventListener, PR_FALSE);\n>+    rv |= elmP->AddEventListenerByType(mEventListener, NS_LITERAL_STRING(\"draggesture\"),\n>+                                       NS_EVENT_FLAG_BUBBLE |\n>+                                       NS_PRIV_EVENT_UNTRUSTED_PERMITTED,\n>+                                       sysGroup);\n>+    rv |= elmP->AddEventListenerByType(mEventListener, NS_LITERAL_STRING(\"dragenter\"),\n>+                                       NS_EVENT_FLAG_BUBBLE |\n>+                                       NS_PRIV_EVENT_UNTRUSTED_PERMITTED,\n>+                                       sysGroup);\n>+    rv |= elmP->AddEventListenerByType(mEventListener, NS_LITERAL_STRING(\"dragover\"),\n>+                                       NS_EVENT_FLAG_BUBBLE |\n>+                                       NS_PRIV_EVENT_UNTRUSTED_PERMITTED,\n>+                                       sysGroup);\n>+    rv |= elmP->AddEventListenerByType(mEventListener, NS_LITERAL_STRING(\"dragleave\"),\n>+                                       NS_EVENT_FLAG_BUBBLE |\n>+                                       NS_PRIV_EVENT_UNTRUSTED_PERMITTED,\n>+                                       sysGroup);\n>+    rv |= elmP->AddEventListenerByType(mEventListener, NS_LITERAL_STRING(\"drop\"),\n>+                                       NS_EVENT_FLAG_BUBBLE |\n>+                                       NS_PRIV_EVENT_UNTRUSTED_PERMITTED,\n>+                                       sysGroup);\n>   }\n>\nDo we really want to allow untrusted events?\nI guess that depends on other browser, do they support dispatching \ndrag events to contentEditable or designMode?\n\n> nsresult\n> nsEditorEventListener::DragOver(nsIDOMDragEvent* aDragEvent)\n> {\nI wonder if there should be a check somewhere here that whether\npreventDefault() was called.\n\n>+\n>+  // If there is no source node, this is an external drag and the drop is allowed.\nAlways? Even if script dispatches the event?", "creation_time": "2010-03-25T18:36:16Z", "raw_text": ">diff --git a/editor/libeditor/base/nsEditor.cpp b/editor/libeditor/base/nsEditor.cpp\n>--- a/editor/libeditor/base/nsEditor.cpp\n>+++ b/editor/libeditor/base/nsEditor.cpp\n>@@ -364,26 +364,36 @@ nsEditor::InstallEventListeners()\n>                                         NS_GET_IID(nsIDOMTextListener));\n> \n>   rv |= piTarget->AddEventListenerByIID(mEventListener,\n>                                         NS_GET_IID(nsIDOMCompositionListener));\n> \n>   nsCOMPtr<nsIDOMEventTarget> target(do_QueryInterface(piTarget));\n>   if (target) {\n>     // See bug 455215, we cannot use the standard dragstart event yet\n>-    rv |= target->AddEventListener(NS_LITERAL_STRING(\"draggesture\"),\n>-                                   mEventListener, PR_FALSE);\n>-    rv |= target->AddEventListener(NS_LITERAL_STRING(\"dragenter\"),\n>-                                   mEventListener, PR_FALSE);\n>-    rv |= target->AddEventListener(NS_LITERAL_STRING(\"dragover\"),\n>-                                   mEventListener, PR_FALSE);\n>-    rv |= target->AddEventListener(NS_LITERAL_STRING(\"dragleave\"),\n>-                                   mEventListener, PR_FALSE);\n>-    rv |= target->AddEventListener(NS_LITERAL_STRING(\"drop\"),\n>-                                   mEventListener, PR_FALSE);\n>+    rv |= elmP->AddEventListenerByType(mEventListener, NS_LITERAL_STRING(\"draggesture\"),\n>+                                       NS_EVENT_FLAG_BUBBLE |\n>+                                       NS_PRIV_EVENT_UNTRUSTED_PERMITTED,\n>+                                       sysGroup);\n>+    rv |= elmP->AddEventListenerByType(mEventListener, NS_LITERAL_STRING(\"dragenter\"),\n>+                                       NS_EVENT_FLAG_BUBBLE |\n>+                                       NS_PRIV_EVENT_UNTRUSTED_PERMITTED,\n>+                                       sysGroup);\n>+    rv |= elmP->AddEventListenerByType(mEventListener, NS_LITERAL_STRING(\"dragover\"),\n>+                                       NS_EVENT_FLAG_BUBBLE |\n>+                                       NS_PRIV_EVENT_UNTRUSTED_PERMITTED,\n>+                                       sysGroup);\n>+    rv |= elmP->AddEventListenerByType(mEventListener, NS_LITERAL_STRING(\"dragleave\"),\n>+                                       NS_EVENT_FLAG_BUBBLE |\n>+                                       NS_PRIV_EVENT_UNTRUSTED_PERMITTED,\n>+                                       sysGroup);\n>+    rv |= elmP->AddEventListenerByType(mEventListener, NS_LITERAL_STRING(\"drop\"),\n>+                                       NS_EVENT_FLAG_BUBBLE |\n>+                                       NS_PRIV_EVENT_UNTRUSTED_PERMITTED,\n>+                                       sysGroup);\n>   }\n>\nDo we really want to allow untrusted events?\nI guess that depends on other browser, do they support dispatching \ndrag events to contentEditable or designMode?\n\n> nsresult\n> nsEditorEventListener::DragOver(nsIDOMDragEvent* aDragEvent)\n> {\nI wonder if there should be a check somewhere here that whether\npreventDefault() was called.\n\n>+\n>+  // If there is no source node, this is an external drag and the drop is allowed.\nAlways? Even if script dispatches the event?", "attachment_id": 434921, "count": 8, "time": "2010-03-25T18:36:16Z", "is_private": false, "id": 4604322, "bug_id": 539476, "tags": []}, {"bug_id": 539476, "id": 4604362, "attachment_id": null, "count": 9, "time": "2010-03-25T18:47:23Z", "is_private": false, "raw_text": "> Do we really want to allow untrusted events?\n\nProbably not, but I'll test some more.\n\n> > nsresult\n> > nsEditorEventListener::DragOver(nsIDOMDragEvent* aDragEvent)\n> > {\n> I wonder if there should be a check somewhere here that whether\n> preventDefault() was called.\n\nSounds like a good idea.\n\n\n> >+\n> >+  // If there is no source node, this is an external drag and the drop is allowed.\n> Always? Even if script dispatches the event?\n\nPerhaps not, but it wouldn't be a security issue. The remaining checks are only relevant when there is a source node of the drag (that is, they prevent drops on the start of the drag). I'll clarify the comment.", "creator": "enndeakin@gmail.com", "creation_time": "2010-03-25T18:47:23Z", "text": "> Do we really want to allow untrusted events?\n\nProbably not, but I'll test some more.\n\n> > nsresult\n> > nsEditorEventListener::DragOver(nsIDOMDragEvent* aDragEvent)\n> > {\n> I wonder if there should be a check somewhere here that whether\n> preventDefault() was called.\n\nSounds like a good idea.\n\n\n> >+\n> >+  // If there is no source node, this is an external drag and the drop is allowed.\n> Always? Even if script dispatches the event?\n\nPerhaps not, but it wouldn't be a security issue. The remaining checks are only relevant when there is a source node of the drag (that is, they prevent drops on the start of the drag). I'll clarify the comment.", "author": "enndeakin@gmail.com", "tags": []}, {"is_private": false, "attachment_id": 434921, "count": 10, "time": "2010-03-28T21:27:58Z", "bug_id": 539476, "id": 4608862, "author": "bugs@pettay.fi", "raw_text": "I assume there is a new patch coming.", "text": "Comment on attachment 434921\nversion 2\n\nI assume there is a new patch coming.", "creation_time": "2010-03-28T21:27:58Z", "creator": "bugs@pettay.fi", "tags": []}, {"bug_id": 539476, "id": 4611979, "attachment_id": null, "time": "2010-03-30T15:40:52Z", "count": 11, "is_private": false, "raw_text": "How does the patch in bug 512717 affect this bug?", "creator": "jonas@sicking.cc", "text": "How does the patch in bug 512717 affect this bug?", "creation_time": "2010-03-30T15:40:52Z", "author": "jonas@sicking.cc", "tags": []}, {"bug_id": 539476, "id": 4630319, "time": "2010-04-09T13:54:23Z", "count": 12, "attachment_id": 438078, "is_private": false, "raw_text": "", "creator": "enndeakin@gmail.com", "creation_time": "2010-04-09T13:54:23Z", "text": "Created attachment 438078\naddress comments", "author": "enndeakin@gmail.com", "tags": []}, {"id": 4635971, "bug_id": 539476, "count": 13, "time": "2010-04-13T11:58:44Z", "attachment_id": 438078, "is_private": false, "creator": "bugs@pettay.fi", "text": "Comment on attachment 438078\naddress comments\n\nr+, but this really needs tests.", "creation_time": "2010-04-13T11:58:44Z", "raw_text": "r+, but this really needs tests.", "author": "bugs@pettay.fi", "tags": []}, {"attachment_id": null, "count": 14, "time": "2010-04-14T19:02:28Z", "is_private": false, "bug_id": 539476, "id": 4639007, "author": "enndeakin@gmail.com", "tags": [], "raw_text": "Tests are dependent on editor using the new api (bug 499008).", "creator": "enndeakin@gmail.com", "creation_time": "2010-04-14T19:02:28Z", "text": "Tests are dependent on editor using the new api (bug 499008)."}, {"id": 4639011, "bug_id": 539476, "is_private": false, "time": "2010-04-14T19:03:55Z", "count": 15, "attachment_id": null, "text": "OK. Please add tests somewhere.", "creation_time": "2010-04-14T19:03:55Z", "creator": "bugs@pettay.fi", "raw_text": "OK. Please add tests somewhere.", "tags": [], "author": "bugs@pettay.fi"}, {"author": "enndeakin@gmail.com", "tags": [], "raw_text": "http://hg.mozilla.org/mozilla-central/rev/701fd8e1377c", "creation_time": "2010-04-18T18:29:46Z", "text": "http://hg.mozilla.org/mozilla-central/rev/701fd8e1377c", "creator": "enndeakin@gmail.com", "is_private": false, "count": 16, "attachment_id": null, "time": "2010-04-18T18:29:46Z", "bug_id": 539476, "id": 4645584}]}}, "comments": {}}