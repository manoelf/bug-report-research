{"bugs": {"677757": {"comments": [{"attachment_id": null, "raw_text": "As part of the Search refactoring of Bugzilla 4.2, all Custom Search clauses were made totally independent. That means that now:\n\n  \"Attachment description\" \"contains\" \"foo\"\n  AND\n  \"Attachment filename\" \"contains\" \"bar\"\n\nMeans: \"Any bug where one attachment's description contains 'foo' and one attachment's description contains 'bar'.\"\n\nThis was done in order to make Custom Search behave totally predictably and extremely simply. This actually resolves many, many support requests and bugs that have been filed over the years about \"I added two criteria and weird things happened!\"\n\nHowever, it's still important to be able to also say, \"I want to find one attachment that matches these two [three, four, n] criteria.\" or \"I want to find one flag that matches all these criteria.\" In particular, that Flags search feature has been asked for for a long time.\n\nThis bug tracks adding in a comprehensive functionality for this that will be far better than the hacky, hidden, cryptic functionality that boolean charts *sometimes* implemented for this.\n\nMy current proposal is that you can specify that you're searching an \"attachment\" and then specify several criteria for just that attachment. You can search \"a bug\" and specify several critera for that bug. You can search \"a comment\" and specify several criteria for that comment. And so on.\n\nThis functionality won't be available in Bugzilla 4.2, even though this does represent a regression for the people who were familiar with the secret field-associating behaviors of boolean charts. This work could take several months, and I don't want to hold up 4.2 for that reason.\n\nHowever, all people concerned about this should rest assured that we very much *do* want this functionality, and it will be *much better* and *far more functional* than it was in Bugzilla 4.0 when it is completed.", "tags": [], "bug_id": 677757, "text": "As part of the Search refactoring of Bugzilla 4.2, all Custom Search clauses were made totally independent. That means that now:\n\n  \"Attachment description\" \"contains\" \"foo\"\n  AND\n  \"Attachment filename\" \"contains\" \"bar\"\n\nMeans: \"Any bug where one attachment's description contains 'foo' and one attachment's description contains 'bar'.\"\n\nThis was done in order to make Custom Search behave totally predictably and extremely simply. This actually resolves many, many support requests and bugs that have been filed over the years about \"I added two criteria and weird things happened!\"\n\nHowever, it's still important to be able to also say, \"I want to find one attachment that matches these two [three, four, n] criteria.\" or \"I want to find one flag that matches all these criteria.\" In particular, that Flags search feature has been asked for for a long time.\n\nThis bug tracks adding in a comprehensive functionality for this that will be far better than the hacky, hidden, cryptic functionality that boolean charts *sometimes* implemented for this.\n\nMy current proposal is that you can specify that you're searching an \"attachment\" and then specify several criteria for just that attachment. You can search \"a bug\" and specify several critera for that bug. You can search \"a comment\" and specify several criteria for that comment. And so on.\n\nThis functionality won't be available in Bugzilla 4.2, even though this does represent a regression for the people who were familiar with the secret field-associating behaviors of boolean charts. This work could take several months, and I don't want to hold up 4.2 for that reason.\n\nHowever, all people concerned about this should rest assured that we very much *do* want this functionality, and it will be *much better* and *far more functional* than it was in Bugzilla 4.0 when it is completed.", "is_private": false, "id": 5643902, "count": 0, "creator": "mkanat@bugzilla.org", "time": "2011-08-09T23:44:14Z", "creation_time": "2011-08-09T23:44:14Z", "author": "mkanat@bugzilla.org"}, {"author": "mkanat@bugzilla.org", "text": "(In reply to Max Kanat-Alexander from comment #0)\n> Means: \"Any bug where one attachment's description contains 'foo' and one\n> attachment's description contains 'bar'.\"\n\n  This should read:\n\n  \"and one attachment's **filename** contains 'bar'.\"", "bug_id": 677757, "tags": [], "creator": "mkanat@bugzilla.org", "creation_time": "2011-08-09T23:45:16Z", "time": "2011-08-09T23:45:16Z", "raw_text": "(In reply to Max Kanat-Alexander from comment #0)\n> Means: \"Any bug where one attachment's description contains 'foo' and one\n> attachment's description contains 'bar'.\"\n\n  This should read:\n\n  \"and one attachment's **filename** contains 'bar'.\"", "attachment_id": null, "is_private": false, "id": 5643905, "count": 1}, {"bug_id": 677757, "text": "(From Max Kanat-Alexander on bug 759999 comment #2)\n> I had a plan for future versions of search to allow you to do criteria that\n> explicitly depend on each other. For example, for this case the UI would\n> look something like:\n> \n> [ Change ] [ by ] [ is equal to ] [ rc5tv@home.com ]\n>            [ date ] [ is less than ] [ 2008-02-01 ]\n>            [ date ] [ is greater than or equal to ] [ 2008-01-01 ]\n> \n> (The other options in the \"Change\" menu would be \"Bug,\" \"Attachment,\" and\n> \"Comment\".)\n> \n> Given my current availability, somebody else will have to implement that UI.\n\n(From Max Kanat-Alexander on bug 759999 comment #3)\n> The first step toward implementing that UI would be to implement a backend\n> that can handle criteria like that, and deciding on how the URL parameters\n> should be structured (keeping in mind that short URL parameters are\n> preferred and that it should be backwards-compatible with what is there\n> now). I'd really appreciate somebody working on this, although it would\n> certainly be a fair bit of work (at least one entire release cycle for one\n> engineer).", "tags": [], "raw_text": "(From Max Kanat-Alexander on bug 759999 comment #2)\n> I had a plan for future versions of search to allow you to do criteria that\n> explicitly depend on each other. For example, for this case the UI would\n> look something like:\n> \n> [ Change ] [ by ] [ is equal to ] [ rc5tv@home.com ]\n>            [ date ] [ is less than ] [ 2008-02-01 ]\n>            [ date ] [ is greater than or equal to ] [ 2008-01-01 ]\n> \n> (The other options in the \"Change\" menu would be \"Bug,\" \"Attachment,\" and\n> \"Comment\".)\n> \n> Given my current availability, somebody else will have to implement that UI.\n\n(From Max Kanat-Alexander on bug 759999 comment #3)\n> The first step toward implementing that UI would be to implement a backend\n> that can handle criteria like that, and deciding on how the URL parameters\n> should be structured (keeping in mind that short URL parameters are\n> preferred and that it should be backwards-compatible with what is there\n> now). I'd really appreciate somebody working on this, although it would\n> certainly be a fair bit of work (at least one entire release cycle for one\n> engineer).", "attachment_id": null, "author": "glob@mozilla.com", "creator": "glob@mozilla.com", "creation_time": "2012-07-17T05:58:46Z", "time": "2012-07-17T05:58:46Z", "is_private": false, "count": 2, "id": 6478768}, {"is_private": false, "id": 6478774, "count": 3, "author": "jruderman@gmail.com", "creator": "jruderman@gmail.com", "time": "2012-07-17T06:06:31Z", "creation_time": "2012-07-17T06:06:31Z", "raw_text": "https://bugzilla.mozilla.org/buglist.cgi?field0-0-0=longdesc;type0-0-0=changedby;value0-0-0=HeroreV%40yahoo.com;field0-1-0=longdesc;type0-1-0=substring;value0-1-0=Components.interfaces\n\nShould return only bug 292789 and bug 429070.  On the Bugzilla 4.2 staging server, it also returns bug 331259.\n\nI do this kind of query almost once a day; losing it (as a regression from bug 638623) would be quite a blow :(\n\nNote that filtering out the noise myself isn't an option, because the new query takes too long and times out when the commenter in question is a heavy bmo user like me.", "attachment_id": null, "text": "https://bugzilla.mozilla.org/buglist.cgi?field0-0-0=longdesc;type0-0-0=changedby;value0-0-0=HeroreV%40yahoo.com;field0-1-0=longdesc;type0-1-0=substring;value0-1-0=Components.interfaces\n\nShould return only bug 292789 and bug 429070.  On the Bugzilla 4.2 staging server, it also returns bug 331259.\n\nI do this kind of query almost once a day; losing it (as a regression from bug 638623) would be quite a blow :(\n\nNote that filtering out the noise myself isn't an option, because the new query takes too long and times out when the commenter in question is a heavy bmo user like me.", "bug_id": 677757, "tags": []}, {"tags": [], "text": "*** Bug 759999 has been marked as a duplicate of this bug. ***", "bug_id": 677757, "attachment_id": null, "raw_text": "", "time": "2012-07-17T06:08:56Z", "creation_time": "2012-07-17T06:08:56Z", "creator": "jruderman@gmail.com", "author": "jruderman@gmail.com", "count": 4, "id": 6478778, "is_private": false}, {"is_private": false, "id": 6536080, "count": 5, "author": "glob@mozilla.com", "creator": "glob@mozilla.com", "creation_time": "2012-08-07T06:13:37Z", "time": "2012-08-07T06:13:37Z", "raw_text": "I've created bug 780820 to deal with a subset of this work.", "attachment_id": null, "bug_id": 677757, "text": "I've created bug 780820 to deal with a subset of this work.", "tags": []}, {"text": "*** Bug 785565 has been marked as a duplicate of this bug. ***", "bug_id": 677757, "tags": [], "raw_text": "", "attachment_id": null, "author": "glob@mozilla.com", "creation_time": "2012-08-27T13:22:18Z", "time": "2012-08-27T13:22:18Z", "creator": "glob@mozilla.com", "id": 6585758, "count": 6, "is_private": false}, {"author": "glob@mozilla.com", "creator": "glob@mozilla.com", "creation_time": "2012-10-25T19:19:17Z", "time": "2012-10-25T19:19:17Z", "is_private": false, "count": 7, "id": 6764190, "tags": [], "bug_id": 677757, "text": "Created attachment 675241\npatch v1\n\nadds the ability to search for changes made to the same field.", "raw_text": "adds the ability to search for changes made to the same field.", "attachment_id": 675241}, {"is_private": false, "id": 6769362, "count": 8, "author": "dkl@mozilla.com", "creator": "dkl@mozilla.com", "time": "2012-10-27T16:07:49Z", "creation_time": "2012-10-27T16:07:49Z", "raw_text": "(In reply to Byron Jones \u2039:glob\u203a from comment #7)\n> Created attachment 675241\n> patch v1\n> \n> adds the ability to search for changes made to the same field.\n\nFollowing warning from prove xt/search.t:\n\nUse of uninitialized value $joiner in string eq at Bugzilla/Search.pm line 1650.\n at Bugzilla/Search.pm line 1650\n\tBugzilla::Search::_custom_search() called at Bugzilla/Search.pm line 1590\n\tBugzilla::Search::_params_to_data_structure() called at Bugzilla/Search.pm line 1572\n\tBugzilla::Search::_charts() called at Bugzilla/Search.pm line 1559\n\tBugzilla::Search::_charts_to_conditions() called at Bugzilla/Search.pm line 692\n\tBugzilla::Search::sql() called at xt/lib/Bugzilla/Test/Search/FieldTest.pm line 533\n\tTest::Exception::lives_ok() called at xt/lib/Bugzilla/Test/Search/FieldTest.pm line 533\n\tBugzilla::Test::Search::FieldTest::do_tests() called at xt/lib/Bugzilla/Test/Search/FieldTest.pm line 517\n\tBugzilla::Test::Search::FieldTest::run() called at xt/lib/Bugzilla/Test/Search.pm line 888\n\tBugzilla::Test::Search::run() called at xt/search.t line 36", "attachment_id": null, "bug_id": 677757, "text": "(In reply to Byron Jones \u2039:glob\u203a from comment #7)\n> Created attachment 675241\n> patch v1\n> \n> adds the ability to search for changes made to the same field.\n\nFollowing warning from prove xt/search.t:\n\nUse of uninitialized value $joiner in string eq at Bugzilla/Search.pm line 1650.\n at Bugzilla/Search.pm line 1650\n\tBugzilla::Search::_custom_search() called at Bugzilla/Search.pm line 1590\n\tBugzilla::Search::_params_to_data_structure() called at Bugzilla/Search.pm line 1572\n\tBugzilla::Search::_charts() called at Bugzilla/Search.pm line 1559\n\tBugzilla::Search::_charts_to_conditions() called at Bugzilla/Search.pm line 692\n\tBugzilla::Search::sql() called at xt/lib/Bugzilla/Test/Search/FieldTest.pm line 533\n\tTest::Exception::lives_ok() called at xt/lib/Bugzilla/Test/Search/FieldTest.pm line 533\n\tBugzilla::Test::Search::FieldTest::do_tests() called at xt/lib/Bugzilla/Test/Search/FieldTest.pm line 517\n\tBugzilla::Test::Search::FieldTest::run() called at xt/lib/Bugzilla/Test/Search.pm line 888\n\tBugzilla::Test::Search::run() called at xt/search.t line 36", "tags": []}, {"bug_id": 677757, "text": "Created attachment 675856\npatch v2\n\naddresses undef warnings thrown by xt/ tests", "tags": [], "raw_text": "addresses undef warnings thrown by xt/ tests", "attachment_id": 675856, "author": "glob@mozilla.com", "time": "2012-10-27T16:34:13Z", "creation_time": "2012-10-27T16:34:13Z", "creator": "glob@mozilla.com", "count": 9, "id": 6769387, "is_private": false}, {"author": "LpSolit@gmail.com", "creation_time": "2012-11-03T20:23:06Z", "time": "2012-11-03T20:23:06Z", "creator": "LpSolit@gmail.com", "count": 10, "id": 6790567, "is_private": false, "tags": [], "bug_id": 677757, "text": "As discussed with glob on IRC, I will be happy to take it for 4.4 if it's reviewed on time and works fine, but I won't block 4.4 on it.", "raw_text": "As discussed with glob on IRC, I will be happy to take it for 4.4 if it's reviewed on time and works fine, but I won't block 4.4 on it.", "attachment_id": null}, {"author": "dkl@mozilla.com", "creation_time": "2012-11-06T17:23:24Z", "time": "2012-11-06T17:23:24Z", "creator": "dkl@mozilla.com", "id": 6797313, "count": 11, "is_private": false, "text": "One issue I found when comparing queries on a non-patched trunk with a patched one:\n\nhttp://centos/677757/buglist.cgi?o5=notequals&f1=OP&f0=OP&o2=notequals&f4=OP&v5=0&query_format=advanced&j1=OR&f3=CP&f2=dependson&j4=OR&f5=blocked&f6=CP&v2=0&f7\n\nWithout:\n\nSELECT bugs.bug_id AS bug_id, bugs.bug_severity AS bug_severity, bugs.priority AS priority,\n       bugs.bug_status AS bug_status, bugs.resolution AS resolution, map_product.name AS product,\n       map_component.name AS component, CASE WHEN INSTR(CAST(map_assigned_to.login_name AS BINARY),\n       CAST('@' AS BINARY)) != 0 THEN SUBSTR(map_assigned_to.login_name, 1, INSTR(CAST(map_assigned_to.login_name AS BINARY),\n       CAST('@' AS BINARY)) - 1) ELSE map_assigned_to.login_name END AS assigned_to, bugs.short_desc AS short_desc, bugs.delta_ts AS changeddate\n       FROM bugs LEFT JOIN bug_group_map AS security_map ON bugs.bug_id = security_map.bug_id\n       INNER JOIN products AS map_product ON bugs.product_id = map_product.id\n       INNER JOIN components AS map_component ON bugs.component_id = map_component.id\n       INNER JOIN profiles AS map_assigned_to ON bugs.assigned_to = map_assigned_to.userid\n       WHERE bugs.creation_ts IS NOT NULL AND security_map.group_id IS NULL\n\n       AND bugs.bug_id NOT IN (SELECT blocked FROM dependencies WHERE dependson = 0)\n       AND bugs.bug_id NOT IN (SELECT dependson FROM dependencies WHERE blocked = 0)\n\n       GROUP BY bugs.bug_id ORDER BY bug_id LIMIT 500 \n\nResults: > 10000 (hit the internal limit)\n\nWith:\n\nSELECT bugs.bug_id AS bug_id, bugs.bug_severity AS bug_severity, bugs.priority AS priority,\n       bugs.bug_status AS bug_status, bugs.resolution AS resolution, map_product.name AS product,\n       map_component.name AS component, CASE WHEN INSTR(CAST(map_assigned_to.login_name AS BINARY),\n       CAST('@' AS BINARY)) != 0 THEN SUBSTR(map_assigned_to.login_name, 1, INSTR(CAST(map_assigned_to.login_name AS BINARY),\n       CAST('@' AS BINARY)) - 1) ELSE map_assigned_to.login_name END AS assigned_to, bugs.short_desc AS short_desc, bugs.delta_ts AS changeddate\n       FROM bugs LEFT JOIN bug_group_map AS security_map ON bugs.bug_id = security_map.bug_id\n       INNER JOIN products AS map_product ON bugs.product_id = map_product.id\n       INNER JOIN components AS map_component ON bugs.component_id = map_component.id \n       INNER JOIN profiles AS map_assigned_to ON bugs.assigned_to = map_assigned_to.userid\n       WHERE bugs.creation_ts IS NOT NULL AND security_map.group_id IS NULL\n\n       AND 1=2\n       AND 1=2\n\n       GROUP BY bugs.bug_id ORDER BY bug_id LIMIT 500;\n\nResults: 0\n\nThe results should be the same. Strangely \"AND 1=2 AND 1=2\" is being added instead of the clauses regarding blocked/dependson so the results will always be 0.\n\ndkl", "bug_id": 677757, "tags": [], "raw_text": "One issue I found when comparing queries on a non-patched trunk with a patched one:\n\nhttp://centos/677757/buglist.cgi?o5=notequals&f1=OP&f0=OP&o2=notequals&f4=OP&v5=0&query_format=advanced&j1=OR&f3=CP&f2=dependson&j4=OR&f5=blocked&f6=CP&v2=0&f7\n\nWithout:\n\nSELECT bugs.bug_id AS bug_id, bugs.bug_severity AS bug_severity, bugs.priority AS priority,\n       bugs.bug_status AS bug_status, bugs.resolution AS resolution, map_product.name AS product,\n       map_component.name AS component, CASE WHEN INSTR(CAST(map_assigned_to.login_name AS BINARY),\n       CAST('@' AS BINARY)) != 0 THEN SUBSTR(map_assigned_to.login_name, 1, INSTR(CAST(map_assigned_to.login_name AS BINARY),\n       CAST('@' AS BINARY)) - 1) ELSE map_assigned_to.login_name END AS assigned_to, bugs.short_desc AS short_desc, bugs.delta_ts AS changeddate\n       FROM bugs LEFT JOIN bug_group_map AS security_map ON bugs.bug_id = security_map.bug_id\n       INNER JOIN products AS map_product ON bugs.product_id = map_product.id\n       INNER JOIN components AS map_component ON bugs.component_id = map_component.id\n       INNER JOIN profiles AS map_assigned_to ON bugs.assigned_to = map_assigned_to.userid\n       WHERE bugs.creation_ts IS NOT NULL AND security_map.group_id IS NULL\n\n       AND bugs.bug_id NOT IN (SELECT blocked FROM dependencies WHERE dependson = 0)\n       AND bugs.bug_id NOT IN (SELECT dependson FROM dependencies WHERE blocked = 0)\n\n       GROUP BY bugs.bug_id ORDER BY bug_id LIMIT 500 \n\nResults: > 10000 (hit the internal limit)\n\nWith:\n\nSELECT bugs.bug_id AS bug_id, bugs.bug_severity AS bug_severity, bugs.priority AS priority,\n       bugs.bug_status AS bug_status, bugs.resolution AS resolution, map_product.name AS product,\n       map_component.name AS component, CASE WHEN INSTR(CAST(map_assigned_to.login_name AS BINARY),\n       CAST('@' AS BINARY)) != 0 THEN SUBSTR(map_assigned_to.login_name, 1, INSTR(CAST(map_assigned_to.login_name AS BINARY),\n       CAST('@' AS BINARY)) - 1) ELSE map_assigned_to.login_name END AS assigned_to, bugs.short_desc AS short_desc, bugs.delta_ts AS changeddate\n       FROM bugs LEFT JOIN bug_group_map AS security_map ON bugs.bug_id = security_map.bug_id\n       INNER JOIN products AS map_product ON bugs.product_id = map_product.id\n       INNER JOIN components AS map_component ON bugs.component_id = map_component.id \n       INNER JOIN profiles AS map_assigned_to ON bugs.assigned_to = map_assigned_to.userid\n       WHERE bugs.creation_ts IS NOT NULL AND security_map.group_id IS NULL\n\n       AND 1=2\n       AND 1=2\n\n       GROUP BY bugs.bug_id ORDER BY bug_id LIMIT 500;\n\nResults: 0\n\nThe results should be the same. Strangely \"AND 1=2 AND 1=2\" is being added instead of the clauses regarding blocked/dependson so the results will always be 0.\n\ndkl", "attachment_id": null}, {"raw_text": "I see what is happening from comment 11:\n\n sub build_subselect {\n-    my ($outer, $inner, $table, $cond) = @_;\n-    return \"$outer IN (SELECT $inner FROM $table WHERE $cond)\";\n+    my ($outer, $inner, $table, $cond, $negate) = @_;\n+    # Execute subselects immediately to avoid dependent subqueries, which are\n+    # large performance hits on MySql\n+    my $q = \"SELECT $inner FROM $table WHERE $cond\";\n+    my $dbh = Bugzilla->dbh;\n+    my $list = $dbh->selectcol_arrayref($q);\n+    return \"1=2\" unless @$list;\n+    return $dbh->sql_in($outer, $list, $negate);\n }\n\nIf the condition is negated \"NOT IN(...)\" maybe we should return empty string if !@$list\n\nreturn if (!@$list && $negate);\n\n\ndkl", "attachment_id": null, "text": "I see what is happening from comment 11:\n\n sub build_subselect {\n-    my ($outer, $inner, $table, $cond) = @_;\n-    return \"$outer IN (SELECT $inner FROM $table WHERE $cond)\";\n+    my ($outer, $inner, $table, $cond, $negate) = @_;\n+    # Execute subselects immediately to avoid dependent subqueries, which are\n+    # large performance hits on MySql\n+    my $q = \"SELECT $inner FROM $table WHERE $cond\";\n+    my $dbh = Bugzilla->dbh;\n+    my $list = $dbh->selectcol_arrayref($q);\n+    return \"1=2\" unless @$list;\n+    return $dbh->sql_in($outer, $list, $negate);\n }\n\nIf the condition is negated \"NOT IN(...)\" maybe we should return empty string if !@$list\n\nreturn if (!@$list && $negate);\n\n\ndkl", "bug_id": 677757, "tags": [], "is_private": false, "id": 6798780, "count": 12, "author": "dkl@mozilla.com", "creator": "dkl@mozilla.com", "time": "2012-11-06T22:57:28Z", "creation_time": "2012-11-06T22:57:28Z"}, {"is_private": false, "id": 6798795, "count": 13, "author": "dkl@mozilla.com", "creator": "dkl@mozilla.com", "creation_time": "2012-11-06T23:00:28Z", "time": "2012-11-06T23:00:28Z", "raw_text": "Review of attachment 675856:\n-----------------------------------------------------------------\n\nExcept for the minor issue mentioned in comment 11, this looks good to me and works with all my other testing executed. the other nits such as the addition of extra rows on <back> and the inability to remove rows are not regressions and can be fixed in other bugs. r=dkl", "attachment_id": 675856, "bug_id": 677757, "text": "Comment on attachment 675856\npatch v2\n\nReview of attachment 675856:\n-----------------------------------------------------------------\n\nExcept for the minor issue mentioned in comment 11, this looks good to me and works with all my other testing executed. the other nits such as the addition of extra rows on <back> and the inability to remove rows are not regressions and can be fixed in other bugs. r=dkl", "tags": []}, {"is_private": false, "id": 6799055, "count": 14, "author": "LpSolit@gmail.com", "creator": "LpSolit@gmail.com", "creation_time": "2012-11-07T00:03:30Z", "time": "2012-11-07T00:03:30Z", "raw_text": "Err.... wait!\n\nComment 0 is about joining several criteria against the same object, such as attachments:\n\n\"I want to find one attachment that matches these two [three, four, n] criteria.\"\n\nSo for instance, I want the following:\n\nAttachment creator contains bugzilla\n\nAND\n\nAttachment MIME type is equal to text/plain\n\n\nWithout your patch, they behave as described in comment 0, i.e. not bound to the same attachment. With your patch, it behaves exactly the same way, so there is no improvement. If I select \"against the same field\", it forces me to choose between Attachment creator and Attachment MIME type, but I cannot select both, i.e. it's really bound to the same field but not to the same object, which is too restrictive.\n\nI see that glob reworded the bug summary to replace bug/attachment by field, which is only a subselect of the problem described here. This is not what this bug is about.\n\nPlease reopen bug 780820 (whose bug summary must be adapted to be less restrictive) and attach your patch there. But this bug is really about what comment 0 describes.", "attachment_id": null, "bug_id": 677757, "text": "Err.... wait!\n\nComment 0 is about joining several criteria against the same object, such as attachments:\n\n\"I want to find one attachment that matches these two [three, four, n] criteria.\"\n\nSo for instance, I want the following:\n\nAttachment creator contains bugzilla\n\nAND\n\nAttachment MIME type is equal to text/plain\n\n\nWithout your patch, they behave as described in comment 0, i.e. not bound to the same attachment. With your patch, it behaves exactly the same way, so there is no improvement. If I select \"against the same field\", it forces me to choose between Attachment creator and Attachment MIME type, but I cannot select both, i.e. it's really bound to the same field but not to the same object, which is too restrictive.\n\nI see that glob reworded the bug summary to replace bug/attachment by field, which is only a subselect of the problem described here. This is not what this bug is about.\n\nPlease reopen bug 780820 (whose bug summary must be adapted to be less restrictive) and attach your patch there. But this bug is really about what comment 0 describes.", "tags": []}, {"attachment_id": null, "raw_text": "(In reply to David Lawrence [:dkl] from comment #12)\n> If the condition is negated \"NOT IN(...)\" maybe we should return empty\n> string if !@$list\n> \n> return if (!@$list && $negate);\n\nDon't do that. If you do this change, then Bugzilla crashes if it doesn't match any bug.", "bug_id": 677757, "text": "(In reply to David Lawrence [:dkl] from comment #12)\n> If the condition is negated \"NOT IN(...)\" maybe we should return empty\n> string if !@$list\n> \n> return if (!@$list && $negate);\n\nDon't do that. If you do this change, then Bugzilla crashes if it doesn't match any bug.", "tags": [], "is_private": false, "id": 6799068, "count": 15, "creator": "LpSolit@gmail.com", "time": "2012-11-07T00:06:43Z", "creation_time": "2012-11-07T00:06:43Z", "author": "LpSolit@gmail.com"}, {"bug_id": 677757, "text": "Comment on attachment 675856\npatch v2\n\n>=== modified file 'Bugzilla/Search.pm'\n\n> sub build_subselect {\n>-    my ($outer, $inner, $table, $cond) = @_;\n>-    return \"$outer IN (SELECT $inner FROM $table WHERE $cond)\";\n>+    my ($outer, $inner, $table, $cond, $negate) = @_;\n>+    # Execute subselects immediately to avoid dependent subqueries, which are\n>+    # large performance hits on MySql\n>+    my $q = \"SELECT $inner FROM $table WHERE $cond\";\n>+    my $dbh = Bugzilla->dbh;\n>+    my $list = $dbh->selectcol_arrayref($q);\n>+    return \"1=2\" unless @$list;\n>+    return $dbh->sql_in($outer, $list, $negate);\n> }\n\nI don't like this subroutine. It generates an incredibly long list of bug IDs in the SQL query. Just append &debug=1 to the URL and see the output. I hope MySQL or any other DB server is clever enough to optimize subselects without having to pass a list with several thousands of items. Do you have data about what you argue here?\n\nMoreover, the generated list has the same bug IDs several tens of times. Looks like a DISTINCT is missing in the SQL query. This must be fixed. As dkl's fix in comment 12 is incorrect (Bugzilla crashes with it), it looks like the problem described in comment 11 needs a new patch rather than a fix on checkin.", "tags": [], "raw_text": ">=== modified file 'Bugzilla/Search.pm'\n\n> sub build_subselect {\n>-    my ($outer, $inner, $table, $cond) = @_;\n>-    return \"$outer IN (SELECT $inner FROM $table WHERE $cond)\";\n>+    my ($outer, $inner, $table, $cond, $negate) = @_;\n>+    # Execute subselects immediately to avoid dependent subqueries, which are\n>+    # large performance hits on MySql\n>+    my $q = \"SELECT $inner FROM $table WHERE $cond\";\n>+    my $dbh = Bugzilla->dbh;\n>+    my $list = $dbh->selectcol_arrayref($q);\n>+    return \"1=2\" unless @$list;\n>+    return $dbh->sql_in($outer, $list, $negate);\n> }\n\nI don't like this subroutine. It generates an incredibly long list of bug IDs in the SQL query. Just append &debug=1 to the URL and see the output. I hope MySQL or any other DB server is clever enough to optimize subselects without having to pass a list with several thousands of items. Do you have data about what you argue here?\n\nMoreover, the generated list has the same bug IDs several tens of times. Looks like a DISTINCT is missing in the SQL query. This must be fixed. As dkl's fix in comment 12 is incorrect (Bugzilla crashes with it), it looks like the problem described in comment 11 needs a new patch rather than a fix on checkin.", "attachment_id": 675856, "author": "LpSolit@gmail.com", "creator": "LpSolit@gmail.com", "time": "2012-11-07T00:17:56Z", "creation_time": "2012-11-07T00:17:56Z", "is_private": false, "count": 16, "id": 6799106}, {"attachment_id": null, "raw_text": "(In reply to Fr\u00e9d\u00e9ric Buclin from comment #16)\n> I don't like this subroutine. It generates an incredibly long list of bug\n> IDs in the SQL query. Just append &debug=1 to the URL and see the output. I\n> hope MySQL or any other DB server is clever enough to optimize subselects\n> without having to pass a list with several thousands of items. Do you have\n> data about what you argue here?\n\nyes, mysql isn't clever enough to optimise subselects; instead it will execute the subselect **for every row** even if it is lacking dependencies.\n\nsame query in 4.0 takes 7 seconds, 4.2 takes 223 seconds.\n\ni don't think \"not liking the long list of bug ids in the sql query\" is a valid reason for rejecting this change, as that's purely hidden cosmetics.\n\n> Moreover, the generated list has the same bug IDs several tens of times.\n> Looks like a DISTINCT is missing in the SQL query. This must be fixed. As\n> dkl's fix in comment 12 is incorrect (Bugzilla crashes with it), it looks\n> like the problem described in comment 11 needs a new patch rather than a fix\n> on checkin.\n\ncan do.  will move back to bug 780820 and morph.", "tags": [], "bug_id": 677757, "text": "(In reply to Fr\u00e9d\u00e9ric Buclin from comment #16)\n> I don't like this subroutine. It generates an incredibly long list of bug\n> IDs in the SQL query. Just append &debug=1 to the URL and see the output. I\n> hope MySQL or any other DB server is clever enough to optimize subselects\n> without having to pass a list with several thousands of items. Do you have\n> data about what you argue here?\n\nyes, mysql isn't clever enough to optimise subselects; instead it will execute the subselect **for every row** even if it is lacking dependencies.\n\nsame query in 4.0 takes 7 seconds, 4.2 takes 223 seconds.\n\ni don't think \"not liking the long list of bug ids in the sql query\" is a valid reason for rejecting this change, as that's purely hidden cosmetics.\n\n> Moreover, the generated list has the same bug IDs several tens of times.\n> Looks like a DISTINCT is missing in the SQL query. This must be fixed. As\n> dkl's fix in comment 12 is incorrect (Bugzilla crashes with it), it looks\n> like the problem described in comment 11 needs a new patch rather than a fix\n> on checkin.\n\ncan do.  will move back to bug 780820 and morph.", "id": 6799797, "count": 17, "is_private": false, "creation_time": "2012-11-07T06:08:21Z", "time": "2012-11-07T06:08:21Z", "creator": "glob@mozilla.com", "author": "glob@mozilla.com"}, {"raw_text": "(In reply to Fr\u00e9d\u00e9ric Buclin from comment #16)\n> This must be fixed. As\n> dkl's fix in comment 12 is incorrect (Bugzilla crashes with it), it looks\n> like the problem described in comment 11 needs a new patch rather than a fix\n> on checkin.\n\nYeah I see that what should have been returned now is \"1=1\" and was just a possible\nidea that was completely untested. \n\ndkl", "attachment_id": null, "tags": [], "text": "(In reply to Fr\u00e9d\u00e9ric Buclin from comment #16)\n> This must be fixed. As\n> dkl's fix in comment 12 is incorrect (Bugzilla crashes with it), it looks\n> like the problem described in comment 11 needs a new patch rather than a fix\n> on checkin.\n\nYeah I see that what should have been returned now is \"1=1\" and was just a possible\nidea that was completely untested. \n\ndkl", "bug_id": 677757, "is_private": false, "id": 6799809, "count": 18, "author": "dkl@mozilla.com", "creator": "dkl@mozilla.com", "time": "2012-11-07T06:17:26Z", "creation_time": "2012-11-07T06:17:26Z"}, {"raw_text": "(In reply to Byron Jones \u2039:glob\u203a from comment #17)\n> same query in 4.0 takes 7 seconds, 4.2 takes 223 seconds.\n\nWhich example did you use? I'm interested to do some comparisons myself.\n\n\n> i don't think \"not liking the long list of bug ids in the sql query\" is a\n> valid reason for rejecting this change, as that's purely hidden cosmetics.\n\nThat's not the reason of my r-. I denied review because dkl found a bug in your patch, and his proposed fixed made Bugzilla to crash. This is why I said a new patch was needed.", "attachment_id": null, "text": "(In reply to Byron Jones \u2039:glob\u203a from comment #17)\n> same query in 4.0 takes 7 seconds, 4.2 takes 223 seconds.\n\nWhich example did you use? I'm interested to do some comparisons myself.\n\n\n> i don't think \"not liking the long list of bug ids in the sql query\" is a\n> valid reason for rejecting this change, as that's purely hidden cosmetics.\n\nThat's not the reason of my r-. I denied review because dkl found a bug in your patch, and his proposed fixed made Bugzilla to crash. This is why I said a new patch was needed.", "bug_id": 677757, "tags": [], "is_private": false, "count": 19, "id": 6800320, "author": "LpSolit@gmail.com", "creator": "LpSolit@gmail.com", "creation_time": "2012-11-07T12:19:00Z", "time": "2012-11-07T12:19:00Z"}, {"tags": [], "text": "*** Bug 1048018 has been marked as a duplicate of this bug. ***", "bug_id": 677757, "raw_text": "", "attachment_id": null, "author": "LpSolit@gmail.com", "creation_time": "2014-08-03T21:01:40Z", "time": "2014-08-03T21:01:40Z", "creator": "LpSolit@gmail.com", "count": 20, "id": 9135196, "is_private": false}]}}, "comments": {}}