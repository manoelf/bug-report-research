{"bugs": {"690224": {"comments": [{"attachment_id": null, "raw_text": "These pages were found to render very slowly in another rendering engine. We should see how quickly we render them:\n\nzoom-level : 1.7\n\nwww.gumtree.com\t   \nwww.seobook.com\t   \nwww.realtor.com\t   \nwww.wretch.cc\t   \nwww.plentyoffish.com\t   \nwww.snapdeal.com\t   \nwww.cracked.com\t   \nwww.ea.com\t   \nwww.metrolyrics.com\t   \nwww.over-blog.com\t   \nwww.sueddeutsche.de\t   \nwww.pptv.com\t   \nwww.sina.com.cn\t   \nwww.rakuten.co.jp\t   \nwww.yellowpages.com\t   \nwww.suite101.com\t   \nwww.corriere.it\t   \nwww.zoho.com\t   \nwww.imdb.com\t   \nwww.ehow.com\t \n\nzoom-level : 1.0\n \nwww.yoka.com\t   \nwww.sina.com.cn\t   \nwww.washingtonpost.com\t   \nwww.repubblica.it\t   \nwww.pconline.com.cn\t   \nwww.fishki.net\t   \nwww.corriere.it\t   \nwww.beeg.com\t   \nwww.soufun.com\t   \nwww.ea.com\t   \nwww.xinhuanet.com\t   \nwww.marca.com\t   \nwww.smh.com.au\t   \nwww.gumtree.com\t   \nwww.178.com\t   \nwww.xcar.com.cn\t   \nwww.yesky.com\t   \nwww.ifeng.com\t   \nwww.snapdeal.com\t   \nwww.mtime.com\n\nThese pages were found to load slowly:\n\nwww.ynet.com\nwww.photobucket.com\nwww.netflix.com\nwww.globo.com\nwww.2ch.net\nwww.aweber.com\nwww.odnoklassniki.ru\nwww.cpxinteractive.com\nwww.keezmovies.com\nwww.homeway.com.cn\nwww.icontact.com\nwww.pconline.com.cn\nwww.web.de\nwww.walmart.com\nwww.detik.com\nwww.dantri.com.vn\nwww.mapquest.com\nwww.youpornmate.com\nwww.allrecipes.com\nwww.hyves.nl\nwww.pptv.com\nwww.atwiki.jp\nwww.lefigaro.fr\nwww.homedepot.com\nwww.iminent.com\nwww.eluniversal.com.mx\nwww.slrclub.com\nwww.gismeteo.ru\nwww.tabelog.com\nwww.hattrick.org", "id": 5745179, "is_private": false, "creator": "gal@uci.edu", "creation_time": "2011-09-29T03:53:55Z", "author": "gal@uci.edu", "text": "These pages were found to render very slowly in another rendering engine. We should see how quickly we render them:\n\nzoom-level : 1.7\n\nwww.gumtree.com\t   \nwww.seobook.com\t   \nwww.realtor.com\t   \nwww.wretch.cc\t   \nwww.plentyoffish.com\t   \nwww.snapdeal.com\t   \nwww.cracked.com\t   \nwww.ea.com\t   \nwww.metrolyrics.com\t   \nwww.over-blog.com\t   \nwww.sueddeutsche.de\t   \nwww.pptv.com\t   \nwww.sina.com.cn\t   \nwww.rakuten.co.jp\t   \nwww.yellowpages.com\t   \nwww.suite101.com\t   \nwww.corriere.it\t   \nwww.zoho.com\t   \nwww.imdb.com\t   \nwww.ehow.com\t \n\nzoom-level : 1.0\n \nwww.yoka.com\t   \nwww.sina.com.cn\t   \nwww.washingtonpost.com\t   \nwww.repubblica.it\t   \nwww.pconline.com.cn\t   \nwww.fishki.net\t   \nwww.corriere.it\t   \nwww.beeg.com\t   \nwww.soufun.com\t   \nwww.ea.com\t   \nwww.xinhuanet.com\t   \nwww.marca.com\t   \nwww.smh.com.au\t   \nwww.gumtree.com\t   \nwww.178.com\t   \nwww.xcar.com.cn\t   \nwww.yesky.com\t   \nwww.ifeng.com\t   \nwww.snapdeal.com\t   \nwww.mtime.com\n\nThese pages were found to load slowly:\n\nwww.ynet.com\nwww.photobucket.com\nwww.netflix.com\nwww.globo.com\nwww.2ch.net\nwww.aweber.com\nwww.odnoklassniki.ru\nwww.cpxinteractive.com\nwww.keezmovies.com\nwww.homeway.com.cn\nwww.icontact.com\nwww.pconline.com.cn\nwww.web.de\nwww.walmart.com\nwww.detik.com\nwww.dantri.com.vn\nwww.mapquest.com\nwww.youpornmate.com\nwww.allrecipes.com\nwww.hyves.nl\nwww.pptv.com\nwww.atwiki.jp\nwww.lefigaro.fr\nwww.homedepot.com\nwww.iminent.com\nwww.eluniversal.com.mx\nwww.slrclub.com\nwww.gismeteo.ru\nwww.tabelog.com\nwww.hattrick.org", "tags": [], "time": "2011-09-29T03:53:55Z", "count": 0, "bug_id": 690224}, {"id": 5745188, "raw_text": "Here is how the measurements were done:\n\nWe created local environment for both loading and rendering.\nFor loading, we measure elapsed time from \"load uri\" to \"load finished.\"\n\nFor rendering, we measure elapsed time for painting of full contents with 1.0,  1.74 (and other zoom level) after \"load finished\".\n\nWe should be able to match this in Gecko. It seems network latency is included in the measurement, so comparisons will be at most meaningful when done from different browser engines on the same network/machine.", "attachment_id": null, "text": "Here is how the measurements were done:\n\nWe created local environment for both loading and rendering.\nFor loading, we measure elapsed time from \"load uri\" to \"load finished.\"\n\nFor rendering, we measure elapsed time for painting of full contents with 1.0,  1.74 (and other zoom level) after \"load finished\".\n\nWe should be able to match this in Gecko. It seems network latency is included in the measurement, so comparisons will be at most meaningful when done from different browser engines on the same network/machine.", "tags": [], "time": "2011-09-29T03:59:12Z", "creation_time": "2011-09-29T03:59:12Z", "author": "gal@uci.edu", "is_private": false, "creator": "gal@uci.edu", "bug_id": 690224, "count": 1}, {"tags": [], "bug_id": 690224, "time": "2011-09-29T21:50:48Z", "text": "(In reply to Andreas Gal :gal from comment #1)\n> Here is how the measurements were done:\n> \n> We created local environment for both loading and rendering.\n> For loading, we measure elapsed time from \"load uri\" to \"load finished.\"\n> \nHow do you define load finished?  Current talos has been changed to wait until mozafterpaint before declaring something \"finished\"  but if I understand what you're doing this sounds like the old method of waiting until \"onload\" fired.\n\n> For rendering, we measure elapsed time for painting of full contents with\n> 1.0,  1.74 (and other zoom level) after \"load finished\".\n>\nAnd this sounds like measuring the time between onload firing and mozafterpaint firing.  Also, do we have any way to force a site to load at a given zoom level in Firefox?  The only method I know would be to set the site specific pref before loading it dictating the zoom level, and then loading the site.  Seems kind of hacky.  Is there a better way?\n \n> We should be able to match this in Gecko. It seems network latency is\n> included in the measurement, so comparisons will be at most meaningful when\n> done from different browser engines on the same network/machine.\nWe can do this without using the network proxy in talos, that's the one part of this that is actually pretty easy.  We just supply this list of sites to the pageload extension in a manifest.\n\nWhat is the base OS of the system we're doing these measurements on?  To actually use talos locally, we'll need python and py-yaml available to us.  To code something as a one off, there are less requirements.", "author": "cmtalbert@gmail.com", "creation_time": "2011-09-29T21:50:48Z", "count": 2, "creator": "cmtalbert@gmail.com", "is_private": false, "id": 5747734, "raw_text": "(In reply to Andreas Gal :gal from comment #1)\n> Here is how the measurements were done:\n> \n> We created local environment for both loading and rendering.\n> For loading, we measure elapsed time from \"load uri\" to \"load finished.\"\n> \nHow do you define load finished?  Current talos has been changed to wait until mozafterpaint before declaring something \"finished\"  but if I understand what you're doing this sounds like the old method of waiting until \"onload\" fired.\n\n> For rendering, we measure elapsed time for painting of full contents with\n> 1.0,  1.74 (and other zoom level) after \"load finished\".\n>\nAnd this sounds like measuring the time between onload firing and mozafterpaint firing.  Also, do we have any way to force a site to load at a given zoom level in Firefox?  The only method I know would be to set the site specific pref before loading it dictating the zoom level, and then loading the site.  Seems kind of hacky.  Is there a better way?\n \n> We should be able to match this in Gecko. It seems network latency is\n> included in the measurement, so comparisons will be at most meaningful when\n> done from different browser engines on the same network/machine.\nWe can do this without using the network proxy in talos, that's the one part of this that is actually pretty easy.  We just supply this list of sites to the pageload extension in a manifest.\n\nWhat is the base OS of the system we're doing these measurements on?  To actually use talos locally, we'll need python and py-yaml available to us.  To code something as a one off, there are less requirements.", "attachment_id": null}, {"attachment_id": null, "raw_text": "It's been some time since I've done anything substantial with Talos, but I think this gives you nearly everything you want.\n\nI'm tracking down something that may or may not be an issue.  I seem to remember a long time ago that when you run page load tests you'd actually see the tests loading in the browser.  You don't see that anymore.  It may be because the tests load too fast to see in a desktop browser, or because we changed how things work in talos; I'm not sure.  Cc'ing jmaher to follow up on that question.\n\nSo, if you download: http://people.mozilla.org/~ctalbert/talos.zip\n\nAnd unzip it, you'll have a ready-made talos environment. (You'll still need to install the python yaml libraries, mind you though).\n\nNext, edit your tp5_onload.yml and tp5_paint.yml files so that the line:\nbrowser_path <path> (around line 15 in each file)\npoints to your firefox executable.\n\nThen you run them:\npython run_tests.py tp5_onload.yml\n\nYour output will be csv delimited in the output/ directory.  Note that this output is overwritten when you run the next test, so copy it somewhere safe before running the paint test:\n\npython run_tests.py tp5_paint.yml\n\nThat will get you the load_uri (onload) timing, and the time of load until first paint (paint) timing.\n\nDo you need the time between the onload handler and the \"finished paint\"? I'm not sure we know exactly when we've finished painting.\n\nAlso, this doesn't do anything with loading into a specified zoom factor, but I was never clear if that was necessary or not.  Let me know what else you need here.", "id": 5773349, "is_private": false, "creator": "cmtalbert@gmail.com", "count": 3, "creation_time": "2011-10-11T00:53:57Z", "author": "cmtalbert@gmail.com", "text": "It's been some time since I've done anything substantial with Talos, but I think this gives you nearly everything you want.\n\nI'm tracking down something that may or may not be an issue.  I seem to remember a long time ago that when you run page load tests you'd actually see the tests loading in the browser.  You don't see that anymore.  It may be because the tests load too fast to see in a desktop browser, or because we changed how things work in talos; I'm not sure.  Cc'ing jmaher to follow up on that question.\n\nSo, if you download: http://people.mozilla.org/~ctalbert/talos.zip\n\nAnd unzip it, you'll have a ready-made talos environment. (You'll still need to install the python yaml libraries, mind you though).\n\nNext, edit your tp5_onload.yml and tp5_paint.yml files so that the line:\nbrowser_path <path> (around line 15 in each file)\npoints to your firefox executable.\n\nThen you run them:\npython run_tests.py tp5_onload.yml\n\nYour output will be csv delimited in the output/ directory.  Note that this output is overwritten when you run the next test, so copy it somewhere safe before running the paint test:\n\npython run_tests.py tp5_paint.yml\n\nThat will get you the load_uri (onload) timing, and the time of load until first paint (paint) timing.\n\nDo you need the time between the onload handler and the \"finished paint\"? I'm not sure we know exactly when we've finished painting.\n\nAlso, this doesn't do anything with loading into a specified zoom factor, but I was never clear if that was necessary or not.  Let me know what else you need here.", "time": "2011-10-11T00:53:57Z", "tags": [], "bug_id": 690224}, {"author": "cmtalbert@gmail.com", "creation_time": "2011-10-11T01:12:22Z", "time": "2011-10-11T01:12:22Z", "tags": [], "text": "(In reply to Clint Talbert ( :ctalbert ) from comment #3)\n> It's been some time since I've done anything substantial with Talos, but I\n> think this gives you nearly everything you want.\n> \n> I'm tracking down something that may or may not be an issue.  I seem to\n> remember a long time ago that when you run page load tests you'd actually\n> see the tests loading in the browser.  You don't see that anymore.  It may\n> be because the tests load too fast to see in a desktop browser, or because\n> we changed how things work in talos; I'm not sure.  Cc'ing jmaher to follow\n> up on that question.\nJmaher and I worked this out on IRC.  There is now a version of talos up there that works.  It now loads pages, and I'll give you fair warning that some of these sites are a little nsfw.  It also looks like they open a bunch of pop up ads which may end up hanging talos.  I haven't had a chance to do a full run yet on my box, since I wanted to get the fix up on people as quickly as I could.", "creator": "cmtalbert@gmail.com", "is_private": false, "id": 5773378, "attachment_id": null, "raw_text": "(In reply to Clint Talbert ( :ctalbert ) from comment #3)\n> It's been some time since I've done anything substantial with Talos, but I\n> think this gives you nearly everything you want.\n> \n> I'm tracking down something that may or may not be an issue.  I seem to\n> remember a long time ago that when you run page load tests you'd actually\n> see the tests loading in the browser.  You don't see that anymore.  It may\n> be because the tests load too fast to see in a desktop browser, or because\n> we changed how things work in talos; I'm not sure.  Cc'ing jmaher to follow\n> up on that question.\nJmaher and I worked this out on IRC.  There is now a version of talos up there that works.  It now loads pages, and I'll give you fair warning that some of these sites are a little nsfw.  It also looks like they open a bunch of pop up ads which may end up hanging talos.  I haven't had a chance to do a full run yet on my box, since I wanted to get the fix up on people as quickly as I could.", "bug_id": 690224, "count": 4}, {"count": 5, "bug_id": 690224, "is_private": false, "creator": "jmaher@mozilla.com", "text": "pageloader has support for recording the time after we receive a 'mozafterpaint' event.  Actually this waits for the onload event and checks to see if we have already painted.  If we have not, then we wait for the mozafterpaint event.\n\nMy understanding of all this is to make a local copy (wget with some flags) of the webpages mentioned above and run them through a test.  I am not sure how to verify the numbers for another browser/engine, but it would be nice if we could easily do that as well.", "time": "2011-10-11T01:50:35Z", "tags": [], "creation_time": "2011-10-11T01:50:35Z", "author": "jmaher@mozilla.com", "raw_text": "pageloader has support for recording the time after we receive a 'mozafterpaint' event.  Actually this waits for the onload event and checks to see if we have already painted.  If we have not, then we wait for the mozafterpaint event.\n\nMy understanding of all this is to make a local copy (wget with some flags) of the webpages mentioned above and run them through a test.  I am not sure how to verify the numbers for another browser/engine, but it would be nice if we could easily do that as well.", "attachment_id": null, "id": 5773434}, {"attachment_id": null, "raw_text": "Until I hear whether there is more to be done here or not, I'm going to go fight fires to get the native Fennec test automation turned back on (namely the reftest family of tests).\n\nLet me know if you need anything else.", "id": 5802286, "creator": "cmtalbert@gmail.com", "is_private": false, "count": 6, "author": "cmtalbert@gmail.com", "creation_time": "2011-10-25T03:27:26Z", "tags": [], "bug_id": 690224, "time": "2011-10-25T03:27:26Z", "text": "Until I hear whether there is more to be done here or not, I'm going to go fight fires to get the native Fennec test automation turned back on (namely the reftest family of tests).\n\nLet me know if you need anything else."}]}}, "comments": {}}