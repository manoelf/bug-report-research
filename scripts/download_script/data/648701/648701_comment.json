{"bugs": {"648701": {"comments": [{"count": 0, "time": "2011-04-09T03:12:02Z", "creator": "paul.biggar@gmail.com", "raw_text": "From the docs, I believe the build steps are:\n\n   make -f client.mk build\n\nWe've removed the need to have a mozconfig file (yay!), and so newbies are not-too-far from just having to run |make|.\n\nI tried omitting \"build\" and it seems to still work. Is is supposed to work?\n\nCan we make it so that we can omit |-f client.mk|? The simple first attempt of copying client.mk to Makefile didn't work, as Makefile is generated from Makefile.in.\n\nOn the other hand, copying to GNUmakefile worked, though renaming didn't. Do we already require GNU make? If so, there may be a tiny GNUmakefile we can write which redirects to |make -f client.mk|. Or maybe there's a better solution.", "text": "From the docs, I believe the build steps are:\n\n   make -f client.mk build\n\nWe've removed the need to have a mozconfig file (yay!), and so newbies are not-too-far from just having to run |make|.\n\nI tried omitting \"build\" and it seems to still work. Is is supposed to work?\n\nCan we make it so that we can omit |-f client.mk|? The simple first attempt of copying client.mk to Makefile didn't work, as Makefile is generated from Makefile.in.\n\nOn the other hand, copying to GNUmakefile worked, though renaming didn't. Do we already require GNU make? If so, there may be a tiny GNUmakefile we can write which redirects to |make -f client.mk|. Or maybe there's a better solution.", "is_private": false, "author": "paul.biggar@gmail.com", "id": 5398007, "attachment_id": null, "tags": [], "creation_time": "2011-04-09T03:12:02Z", "bug_id": 648701}, {"creator": "khuey@kylehuey.com", "raw_text": "(In reply to comment #0)\n> From the docs, I believe the build steps are:\n> \n>    make -f client.mk build\n> \n> We've removed the need to have a mozconfig file (yay!), and so newbies are\n> not-too-far from just having to run |make|.\n> \n> I tried omitting \"build\" and it seems to still work. Is is supposed to work?\n\nYes.\n \n> Can we make it so that we can omit |-f client.mk|? The simple first attempt of\n> copying client.mk to Makefile didn't work, as Makefile is generated from\n> Makefile.in.\n\nNot easily.  client.mk runs autoconf and configure.\n\n> On the other hand, copying to GNUmakefile worked, though renaming didn't. Do we\n> already require GNU make? If so, there may be a tiny GNUmakefile we can write\n> which redirects to |make -f client.mk|. Or maybe there's a better solution.\n\nSo the problem is that we already have a Makefile.in in the root directory of the source tree, and adding a Makefile in the root too might melt builds where the objdir and the srcdir are the same.", "attachment_id": null, "tags": [], "creation_time": "2011-04-09T03:21:23Z", "text": "(In reply to comment #0)\n> From the docs, I believe the build steps are:\n> \n>    make -f client.mk build\n> \n> We've removed the need to have a mozconfig file (yay!), and so newbies are\n> not-too-far from just having to run |make|.\n> \n> I tried omitting \"build\" and it seems to still work. Is is supposed to work?\n\nYes.\n \n> Can we make it so that we can omit |-f client.mk|? The simple first attempt of\n> copying client.mk to Makefile didn't work, as Makefile is generated from\n> Makefile.in.\n\nNot easily.  client.mk runs autoconf and configure.\n\n> On the other hand, copying to GNUmakefile worked, though renaming didn't. Do we\n> already require GNU make? If so, there may be a tiny GNUmakefile we can write\n> which redirects to |make -f client.mk|. Or maybe there's a better solution.\n\nSo the problem is that we already have a Makefile.in in the root directory of the source tree, and adding a Makefile in the root too might melt builds where the objdir and the srcdir are the same.", "bug_id": 648701, "count": 1, "time": "2011-04-09T03:21:23Z", "author": "khuey@kylehuey.com", "is_private": false, "id": 5398014}, {"time": "2011-04-09T03:24:39Z", "author": "bugspam.Callek@gmail.com", "count": 2, "is_private": false, "id": 5398018, "raw_text": "In theory we can hg mov |Makefile.in| to |main.mk| or some such, and create a |Makefile| shim that translates to client.mk if no target, or |main.mk| if a target and adjust other code as needed.\n\n(I think my above will be the shortest path to victory for most of our tooling, dependant projects/repos and users; but it has not been tested and I'm not sure how well it will work)", "creator": "bugspam.Callek@gmail.com", "creation_time": "2011-04-09T03:24:39Z", "tags": [], "attachment_id": null, "text": "In theory we can hg mov |Makefile.in| to |main.mk| or some such, and create a |Makefile| shim that translates to client.mk if no target, or |main.mk| if a target and adjust other code as needed.\n\n(I think my above will be the shortest path to victory for most of our tooling, dependant projects/repos and users; but it has not been tested and I'm not sure how well it will work)", "bug_id": 648701}, {"text": "(In reply to comment #1)\n> (In reply to comment #0)\n> > On the other hand, copying to GNUmakefile worked, though renaming didn't. Do we\n> > already require GNU make? If so, there may be a tiny GNUmakefile we can write\n> > which redirects to |make -f client.mk|. Or maybe there's a better solution.\n> \n> So the problem is that we already have a Makefile.in in the root directory of\n> the source tree, and adding a Makefile in the root too might melt builds where\n> the objdir and the srcdir are the same.\n\nYes, that appears to be the problem. FWIW, renaming client.mk to GNUmakefile, and doing s/\\bclient\\.mk\\b/GNUmakefile/ gives me a successful build by just typing |make| (which includes running autoconf and automake).", "bug_id": 648701, "creator": "paul.biggar@gmail.com", "raw_text": "(In reply to comment #1)\n> (In reply to comment #0)\n> > On the other hand, copying to GNUmakefile worked, though renaming didn't. Do we\n> > already require GNU make? If so, there may be a tiny GNUmakefile we can write\n> > which redirects to |make -f client.mk|. Or maybe there's a better solution.\n> \n> So the problem is that we already have a Makefile.in in the root directory of\n> the source tree, and adding a Makefile in the root too might melt builds where\n> the objdir and the srcdir are the same.\n\nYes, that appears to be the problem. FWIW, renaming client.mk to GNUmakefile, and doing s/\\bclient\\.mk\\b/GNUmakefile/ gives me a successful build by just typing |make| (which includes running autoconf and automake).", "attachment_id": null, "creation_time": "2011-04-09T07:31:45Z", "tags": [], "id": 5398113, "count": 3, "time": "2011-04-09T07:31:45Z", "author": "paul.biggar@gmail.com", "is_private": false}, {"time": "2011-04-09T07:37:15Z", "count": 4, "text": "You know, I'm slightly rethinking this. The goal is to make a build familiar to new contributor. The most familiar thing is:\n\n ./configure && make\nor\n mkdir objdir && cd objdir && ../configure && make\n\nBy which I mean, this is more familiar than a system that just uses |make|. So perhaps we should just check in configure?", "raw_text": "You know, I'm slightly rethinking this. The goal is to make a build familiar to new contributor. The most familiar thing is:\n\n ./configure && make\nor\n mkdir objdir && cd objdir && ../configure && make\n\nBy which I mean, this is more familiar than a system that just uses |make|. So perhaps we should just check in configure?", "creator": "paul.biggar@gmail.com", "id": 5398116, "is_private": false, "author": "paul.biggar@gmail.com", "bug_id": 648701, "creation_time": "2011-04-09T07:37:15Z", "tags": [], "attachment_id": null}, {"id": 5398122, "is_private": false, "count": 5, "author": "antoine.mechelynck@gmail.com", "time": "2011-04-09T07:45:55Z", "bug_id": 648701, "text": "hm, my homemade build script (see below) has three main steps (checkout, build, package): IIUC this bug touches just the middle one?\n\nHere it is; line 2 has to be customized for your objdir:\n\n#!/bin/bash\nexport AJM_OBJDIR=obj-x86_64-unknown-linux-gnu\ndate && \\\necho 'python client.py checkout' && \\\npython client.py checkout && \\\ndate && \\\necho 'make -f client.mk build' && \\\nmake -f client.mk build && \\\ntest -n \"$AJM_OBJDIR\" -a -d $AJM_OBJDIR && \\\ndate && \\\necho \"make -C $AJM_OBJDIR package\" && \\\nmake -C $AJM_OBJDIR package\necho 'Exit status' $?", "attachment_id": null, "creation_time": "2011-04-09T07:45:55Z", "tags": [], "creator": "antoine.mechelynck@gmail.com", "raw_text": "hm, my homemade build script (see below) has three main steps (checkout, build, package): IIUC this bug touches just the middle one?\n\nHere it is; line 2 has to be customized for your objdir:\n\n#!/bin/bash\nexport AJM_OBJDIR=obj-x86_64-unknown-linux-gnu\ndate && \\\necho 'python client.py checkout' && \\\npython client.py checkout && \\\ndate && \\\necho 'make -f client.mk build' && \\\nmake -f client.mk build && \\\ntest -n \"$AJM_OBJDIR\" -a -d $AJM_OBJDIR && \\\ndate && \\\necho \"make -C $AJM_OBJDIR package\" && \\\nmake -C $AJM_OBJDIR package\necho 'Exit status' $?"}, {"raw_text": "(In reply to comment #4)\n> You know, I'm slightly rethinking this. The goal is to make a build familiar to\n> new contributor. The most familiar thing is:\n> \n>  ./configure && make\n> or\n>  mkdir objdir && cd objdir && ../configure && make\n> \n> By which I mean, this is more familiar than a system that just uses |make|. So\n> perhaps we should just check in configure?\n\nI don't think expecting a user to run autoconf is much more of a burden beyond that.  The only tricky bit is that we're still on autoconf 2.13.  Today\n\nautoconf213 && ./configure && make\n\nshould work.", "creator": "khuey@kylehuey.com", "creation_time": "2011-04-09T11:50:04Z", "tags": [], "attachment_id": null, "text": "(In reply to comment #4)\n> You know, I'm slightly rethinking this. The goal is to make a build familiar to\n> new contributor. The most familiar thing is:\n> \n>  ./configure && make\n> or\n>  mkdir objdir && cd objdir && ../configure && make\n> \n> By which I mean, this is more familiar than a system that just uses |make|. So\n> perhaps we should just check in configure?\n\nI don't think expecting a user to run autoconf is much more of a burden beyond that.  The only tricky bit is that we're still on autoconf 2.13.  Today\n\nautoconf213 && ./configure && make\n\nshould work.", "bug_id": 648701, "author": "khuey@kylehuey.com", "time": "2011-04-09T11:50:04Z", "count": 6, "is_private": false, "id": 5398262}, {"count": 7, "author": "khuey@kylehuey.com", "time": "2011-04-09T11:55:55Z", "is_private": false, "id": 5398263, "creator": "khuey@kylehuey.com", "raw_text": "Also, back in the ancient days we used to check in configure.  Somebody who was around then would know why we don't do that anymore.", "attachment_id": null, "creation_time": "2011-04-09T11:55:55Z", "tags": [], "text": "Also, back in the ancient days we used to check in configure.  Somebody who was around then would know why we don't do that anymore.", "bug_id": 648701}, {"bug_id": 648701, "attachment_id": null, "tags": [], "creation_time": "2011-04-09T12:39:28Z", "id": 5398284, "is_private": false, "author": "ted@mielczarek.org", "text": "So, back then we had a script that watched for checkins to configure.in and checked in the matching configure. We didn't have that when we moved to hg, so we didn't import configure.\n\nI think the only issue is people forgetting to check in the matching configure.", "creator": "ted@mielczarek.org", "raw_text": "So, back then we had a script that watched for checkins to configure.in and checked in the matching configure. We didn't have that when we moved to hg, so we didn't import configure.\n\nI think the only issue is people forgetting to check in the matching configure.", "count": 8, "time": "2011-04-09T12:39:28Z"}, {"bug_id": 648701, "text": "It occurs to me that we could easily write a Hg hook to ensure that both configure and configure.in are changed if either one is changed. If we wanted to be super-paranoid, we could have it run autoconf-2.13 on the configure.in and make sure it matches the configure in the patch.", "attachment_id": null, "tags": [], "creation_time": "2011-04-09T12:57:42Z", "creator": "ted@mielczarek.org", "raw_text": "It occurs to me that we could easily write a Hg hook to ensure that both configure and configure.in are changed if either one is changed. If we wanted to be super-paranoid, we could have it run autoconf-2.13 on the configure.in and make sure it matches the configure in the patch.", "id": 5398291, "is_private": false, "count": 9, "author": "ted@mielczarek.org", "time": "2011-04-09T12:57:42Z"}, {"bug_id": 648701, "text": "Also, our source tarballs for releases include configure, and there `./configure && make` should work just fine.", "attachment_id": null, "creation_time": "2011-04-09T13:03:34Z", "tags": [], "creator": "ted@mielczarek.org", "raw_text": "Also, our source tarballs for releases include configure, and there `./configure && make` should work just fine.", "id": 5398294, "is_private": false, "count": 10, "time": "2011-04-09T13:03:34Z", "author": "ted@mielczarek.org"}, {"id": 5398295, "is_private": false, "count": 11, "time": "2011-04-09T13:04:31Z", "author": "ted@mielczarek.org", "bug_id": 648701, "text": "Having a hard time composing all my thoughts this morning, but I'd rather not encourage \"configure && make\" in hg checkouts if we can avoid it, since that creates a srcdir build and pollutes your src tree with a bunch of crap, which is probably not going to be helpful for new contributors.", "attachment_id": null, "creation_time": "2011-04-09T13:04:31Z", "tags": [], "creator": "ted@mielczarek.org", "raw_text": "Having a hard time composing all my thoughts this morning, but I'd rather not encourage \"configure && make\" in hg checkouts if we can avoid it, since that creates a srcdir build and pollutes your src tree with a bunch of crap, which is probably not going to be helpful for new contributors."}, {"id": 5398313, "author": "khuey@kylehuey.com", "time": "2011-04-09T13:55:13Z", "count": 12, "is_private": false, "text": "Yeah, that's the problem here.  client.mk is better than running autoconf/configure/make by hand, just less discoverable.", "bug_id": 648701, "raw_text": "Yeah, that's the problem here.  client.mk is better than running autoconf/configure/make by hand, just less discoverable.", "creator": "khuey@kylehuey.com", "tags": [], "creation_time": "2011-04-09T13:55:13Z", "attachment_id": null}, {"raw_text": "Checking in configure is bug 464053, with the amusing result that if you develop on Windows or Mac, your generated configure will be just fine, but if you develop on the most common Linux distro, you'd be checking in a freaky crap configure. Dunno whether or not Ubuntu still has a hacky autoconf2.13, but somebody could check that, and write the hooks to check for a configure in any configure.in push and to check for #include <sys/types.h> in configure pushes, and land it.\n\nCouldn't we solve the srcdir build problem by just copying the bits in client.mk that decide if you don't specify an objdir, then you'll get MOZ_OBJDIR = obj-$(CONFIG_GUESS), into /Makefile.in? We've said for years that we want to disallow srcdir builds: here's our chance!", "creator": "philringnalda@gmail.com", "text": "Checking in configure is bug 464053, with the amusing result that if you develop on Windows or Mac, your generated configure will be just fine, but if you develop on the most common Linux distro, you'd be checking in a freaky crap configure. Dunno whether or not Ubuntu still has a hacky autoconf2.13, but somebody could check that, and write the hooks to check for a configure in any configure.in push and to check for #include <sys/types.h> in configure pushes, and land it.\n\nCouldn't we solve the srcdir build problem by just copying the bits in client.mk that decide if you don't specify an objdir, then you'll get MOZ_OBJDIR = obj-$(CONFIG_GUESS), into /Makefile.in? We've said for years that we want to disallow srcdir builds: here's our chance!", "time": "2011-04-09T18:20:50Z", "count": 13, "tags": [], "creation_time": "2011-04-09T18:20:50Z", "attachment_id": null, "bug_id": 648701, "is_private": false, "author": "philringnalda@gmail.com", "id": 5398491}, {"raw_text": "Once you've run configure it's too late, you have a srcdir build.\n\nAlthough, I wonder if we could add hacks in configure to check if it's being run from $topsrcdir, and do a mkdir, cd, and recursively invoke itself in that directory. I have no idea if that would work, but it might be interesting to try.", "creator": "ted@mielczarek.org", "tags": [], "creation_time": "2011-04-09T22:25:04Z", "attachment_id": null, "text": "Once you've run configure it's too late, you have a srcdir build.\n\nAlthough, I wonder if we could add hacks in configure to check if it's being run from $topsrcdir, and do a mkdir, cd, and recursively invoke itself in that directory. I have no idea if that would work, but it might be interesting to try.", "bug_id": 648701, "author": "ted@mielczarek.org", "time": "2011-04-09T22:25:04Z", "count": 14, "is_private": false, "id": 5398663}, {"text": "Have we got consensus on how we'd like it to behave (ignoring the technical details of how we'd make that work).\n\nDo we want:\n\n1.   $ make\n\nor\n\n2.   $ ./configure && make (let's assume this makes an objdir)\n\nor\n\n3.   $ mkdir objdir && cd objdir && ../configure && make\n\n\nOr do we want to support all 3 of the above?", "raw_text": "Have we got consensus on how we'd like it to behave (ignoring the technical details of how we'd make that work).\n\nDo we want:\n\n1.   $ make\n\nor\n\n2.   $ ./configure && make (let's assume this makes an objdir)\n\nor\n\n3.   $ mkdir objdir && cd objdir && ../configure && make\n\n\nOr do we want to support all 3 of the above?", "creator": "paul.biggar@gmail.com", "time": "2011-04-11T06:50:51Z", "count": 15, "bug_id": 648701, "creation_time": "2011-04-11T06:50:51Z", "tags": [], "attachment_id": null, "id": 5399926, "author": "paul.biggar@gmail.com", "is_private": false}, {"id": 5400166, "is_private": false, "count": 16, "author": "ted@mielczarek.org", "time": "2011-04-11T12:56:55Z", "bug_id": 648701, "text": "I think #2 is familiar enough, since it's how 99% of open source projects are built. If we can make it create an objdir, then it ought to be basically perfect. (We should not break #3, since that's how client.mk builds work under the hood right now anyway.)", "attachment_id": null, "creation_time": "2011-04-11T12:56:55Z", "tags": [], "creator": "ted@mielczarek.org", "raw_text": "I think #2 is familiar enough, since it's how 99% of open source projects are built. If we can make it create an objdir, then it ought to be basically perfect. (We should not break #3, since that's how client.mk builds work under the hood right now anyway.)"}, {"id": 5400665, "count": 17, "time": "2011-04-11T17:01:30Z", "author": "benjamin@smedbergs.us", "is_private": false, "text": "Many people currently do #3, so we should keep that working. Making #2 use an objdir would be good. It could just write a \"Makefile\" to the srcdir which shells out to the default objdir.", "bug_id": 648701, "creator": "benjamin@smedbergs.us", "raw_text": "Many people currently do #3, so we should keep that working. Making #2 use an objdir would be good. It could just write a \"Makefile\" to the srcdir which shells out to the default objdir.", "attachment_id": null, "tags": [], "creation_time": "2011-04-11T17:01:30Z"}, {"id": 5413975, "author": "jason.vas.dias@gmail.com", "is_private": false, "bug_id": 648701, "attachment_id": null, "tags": [], "creation_time": "2011-04-16T19:59:36Z", "count": 18, "time": "2011-04-16T19:59:36Z", "text": "I suggest something similar to the following:\n\n1. Ship a \"configure\" script that is just something like:\n\n   #!/bin/bash\n   HOME=${HOME:-`grep `whoami` /etc/passwd | sed 's,^[^:]*:[^:]*:[^:]*:[^:]*:[^:]*:,,;s,:.*$,,'`}\n   MOZ_OBJDIR=${MOZ_OBJDIR:-${OBJDIR:`uname -m`}}\n   if [ ! -rs ${HOME}/.mozconfig ]; then \\\n   echo -e 'mk_add_options AUTOCONF='${AUTOCONF:-autoconf2.13}'\"\\n\" \\\n           'mk_add_options MOZ_OBJDIR='${MOZ_OBJDIR}\"\\n\" \\\n           $(echo $* | tr ' ' '\\n' | grep '^--' | sed 's,^,ac_add_options ') \\\n          > ${HOME}/.mozconfig\n   fi\n   MAKE=${MAKE:`if [ -x /usr/bin/gmake ]; then echo /usr/bin/gmake ; else echo /usr/bin/make;`}\n   $MAKE -f client.mk && cd $MOZ_OBJDIR && ./configure $* && $MAKE\n   \n2. As discussed with Paul on email thread : \n   \" Re: [Contribute] Inquiry about Mozilla Coding \"\n   (sorry, not a very descriptive subject line, but that's what it was -\n    email headers: \n In-Reply-To: <201104161654.p3GGsl02009993@pp-web01.phx.mozilla.com>\n References: <201104161654.p3GGsl02009993@pp-web01.phx.mozilla.com>\n From: Paul Biggar\n Date: Sat, 16 Apr 2011 19:04:36 +0100\n Message-ID: <BANLkTin1p5m5Z-HtTvUiN8dhEfuX=CKebA@mail.gmail.com>\n Subject: Re: [Contribute] Inquiry about Mozilla Coding\n To: jason.vas.dias@gmail.com\n Cc: contribute@mozilla.org,\n  Ted Mielczarek\n  )\n \n   \n  I think if the platform is Linux, then the \"make install\" phase should NOT\n  run the installer ; instead, it should generate a make script that honors\n  all autoconf / configure variables:\n   $DESTDIR , $PREFIX , $LIBDIR , $BINDIR, $SBINDIR, $DATAROOTDIR , $SYSCONFDIR\n  and will optionally install into $PREFIX/$LIBDIR/$MOZ_APP_INSTALL_DIR \n  (as it does currently, or, if some new $MOZ_USE_SYSTEM_TREE environment\n  variable is set, will actually install the app correctly under\n  $PREFIX/{${BINDIR},${LIBDIR},${DATAROOTDIR}} etc. like any \"normal\" package.", "creator": "jason.vas.dias@gmail.com", "raw_text": "I suggest something similar to the following:\n\n1. Ship a \"configure\" script that is just something like:\n\n   #!/bin/bash\n   HOME=${HOME:-`grep `whoami` /etc/passwd | sed 's,^[^:]*:[^:]*:[^:]*:[^:]*:[^:]*:,,;s,:.*$,,'`}\n   MOZ_OBJDIR=${MOZ_OBJDIR:-${OBJDIR:`uname -m`}}\n   if [ ! -rs ${HOME}/.mozconfig ]; then \\\n   echo -e 'mk_add_options AUTOCONF='${AUTOCONF:-autoconf2.13}'\"\\n\" \\\n           'mk_add_options MOZ_OBJDIR='${MOZ_OBJDIR}\"\\n\" \\\n           $(echo $* | tr ' ' '\\n' | grep '^--' | sed 's,^,ac_add_options ') \\\n          > ${HOME}/.mozconfig\n   fi\n   MAKE=${MAKE:`if [ -x /usr/bin/gmake ]; then echo /usr/bin/gmake ; else echo /usr/bin/make;`}\n   $MAKE -f client.mk && cd $MOZ_OBJDIR && ./configure $* && $MAKE\n   \n2. As discussed with Paul on email thread : \n   \" Re: [Contribute] Inquiry about Mozilla Coding \"\n   (sorry, not a very descriptive subject line, but that's what it was -\n    email headers: \n In-Reply-To: <201104161654.p3GGsl02009993@pp-web01.phx.mozilla.com>\n References: <201104161654.p3GGsl02009993@pp-web01.phx.mozilla.com>\n From: Paul Biggar\n Date: Sat, 16 Apr 2011 19:04:36 +0100\n Message-ID: <BANLkTin1p5m5Z-HtTvUiN8dhEfuX=CKebA@mail.gmail.com>\n Subject: Re: [Contribute] Inquiry about Mozilla Coding\n To: jason.vas.dias@gmail.com\n Cc: contribute@mozilla.org,\n  Ted Mielczarek\n  )\n \n   \n  I think if the platform is Linux, then the \"make install\" phase should NOT\n  run the installer ; instead, it should generate a make script that honors\n  all autoconf / configure variables:\n   $DESTDIR , $PREFIX , $LIBDIR , $BINDIR, $SBINDIR, $DATAROOTDIR , $SYSCONFDIR\n  and will optionally install into $PREFIX/$LIBDIR/$MOZ_APP_INSTALL_DIR \n  (as it does currently, or, if some new $MOZ_USE_SYSTEM_TREE environment\n  variable is set, will actually install the app correctly under\n  $PREFIX/{${BINDIR},${LIBDIR},${DATAROOTDIR}} etc. like any \"normal\" package."}, {"count": 19, "time": "2011-04-17T03:45:26Z", "text": "JVD, I think your part 2 might be useful as a different bug. I don't think the install step is what we're talking about here.\n\nI believe your step 1 creates a mozconfig file from the configure options, is that right? It's an interesting approach, but probably a little more complicated than necessary. I think we're looking for a special case in the configure file which:\n\n- mkdir $(objdir)\n- cd $(objdir)\n- ...\n- creates a makefile in the srcdir which does nothing but the equivalent of `make -C $(object) $*`", "creator": "paul.biggar@gmail.com", "raw_text": "JVD, I think your part 2 might be useful as a different bug. I don't think the install step is what we're talking about here.\n\nI believe your step 1 creates a mozconfig file from the configure options, is that right? It's an interesting approach, but probably a little more complicated than necessary. I think we're looking for a special case in the configure file which:\n\n- mkdir $(objdir)\n- cd $(objdir)\n- ...\n- creates a makefile in the srcdir which does nothing but the equivalent of `make -C $(object) $*`", "id": 5414221, "author": "paul.biggar@gmail.com", "is_private": false, "bug_id": 648701, "attachment_id": null, "creation_time": "2011-04-17T03:45:26Z", "tags": []}, {"time": "2011-04-17T15:58:50Z", "count": 20, "raw_text": "Paul - yes, maybe I was going off on my own hobby-horse with part 2 there - I'll raise a different bug about it.\n\nBut as I understand this bug :\n\n1. You want the mozilla build to be \"familiar\" and \"compatible\" with how\n   most users and package maintainers expect open-source software to be\n   built and installed these days, which is autoconf - users expect to\n   be able to unpack the source tar ball , then EITHER:\n   $ cd src; ./configure --prefix=/usr --libdir=/usr/lib ... &&\n     make && make install\n   OR\n   $ mkdir /tmp/my_obj_dir; cd /tmp/my_obj_dir; SRC=${dir_where_I_unpacked_src}\n   $ $SRC/configure --prefix=/usr ... &&\n     make && make install\n\nBut mozilla needs a .mozconfig and run of \"client.mk\" to run autoconf ; so you're shipping something that is very similar to an \"autogen.sh\" , as is\nused by for example all the xorg / freedesktop.com git repositories - they\ndo not check in any \"configure\" script, only \"autogen.sh\" which basically runs\n\"automake ... && autoconf ...\" to generate configure. \n\nSo you could ship an autogen.sh - which users expect to see if configure does not exist - which is similar to the example fragment in Comment #18 - it will create a .mozconfig from its arguments if $MOZCONFIG is unset and no .mozconfig is found, create an \"automatic OBJDIR\" if one is not specified, and run client.mk - the last message it emits should be something like \n\"now change directory to $OBJDIR and enter 'make'\" .\n \nAt the moment, your make files correctly translate .mozconfig settings into\ndefault configure arguments, but there seems nothing to do the reverse.\n\nI suggest :\n  1. Change the .mozconfig finding code to look for:\n $(topsrcdir)/.mozconfig", "creator": "jason.vas.dias@gmail.com", "text": "Paul - yes, maybe I was going off on my own hobby-horse with part 2 there - I'll raise a different bug about it.\n\nBut as I understand this bug :\n\n1. You want the mozilla build to be \"familiar\" and \"compatible\" with how\n   most users and package maintainers expect open-source software to be\n   built and installed these days, which is autoconf - users expect to\n   be able to unpack the source tar ball , then EITHER:\n   $ cd src; ./configure --prefix=/usr --libdir=/usr/lib ... &&\n     make && make install\n   OR\n   $ mkdir /tmp/my_obj_dir; cd /tmp/my_obj_dir; SRC=${dir_where_I_unpacked_src}\n   $ $SRC/configure --prefix=/usr ... &&\n     make && make install\n\nBut mozilla needs a .mozconfig and run of \"client.mk\" to run autoconf ; so you're shipping something that is very similar to an \"autogen.sh\" , as is\nused by for example all the xorg / freedesktop.com git repositories - they\ndo not check in any \"configure\" script, only \"autogen.sh\" which basically runs\n\"automake ... && autoconf ...\" to generate configure. \n\nSo you could ship an autogen.sh - which users expect to see if configure does not exist - which is similar to the example fragment in Comment #18 - it will create a .mozconfig from its arguments if $MOZCONFIG is unset and no .mozconfig is found, create an \"automatic OBJDIR\" if one is not specified, and run client.mk - the last message it emits should be something like \n\"now change directory to $OBJDIR and enter 'make'\" .\n \nAt the moment, your make files correctly translate .mozconfig settings into\ndefault configure arguments, but there seems nothing to do the reverse.\n\nI suggest :\n  1. Change the .mozconfig finding code to look for:\n $(topsrcdir)/.mozconfig", "is_private": false, "author": "jason.vas.dias@gmail.com", "id": 5414559, "creation_time": "2011-04-17T15:58:50Z", "tags": [], "attachment_id": null, "bug_id": 648701}, {"id": 5414575, "author": "jason.vas.dias@gmail.com", "is_private": false, "bug_id": 648701, "attachment_id": null, "creation_time": "2011-04-17T16:19:48Z", "tags": [], "count": 21, "time": "2011-04-17T16:19:48Z", "text": "oops, comment #20 continued - as I was saying:\n\n1. Change the .mozconfig finding code to look for:\n $(topsrcdir)/.mozconfig , $(HOME)/.mozconfig\n   and set $HOME to $topsrcdir if unset,\n   in that order, so the scripts do not have to bother looking up user's home\n   directory and $(topsrcdir)/.mozconfig will override $(HOME)/.mozconfig .\n\n2. Provide an \"autogen.sh\" - OR call it \"configure\" and have it move \"configure\"\n   to \"autogen.sh\" before autoconf is run -\n   that:\n   o  finds .mozconfig - if none exists, creates it from arguments - this \n      command would actually work:\n      \n      $ function to_mozconfig \\\n        { echo $* | tr ' ' '\\n' | grep '^--' | sed 's,^,ac_add_options ,'; }\n\n      $ to_mozconfig --prefix=/usr --libdir=/usr/lib64\n      ac_add_options --prefix=/usr\n      ac_add_options --libdir=/usr/lib64\n\n      - INCLUDING adding a default $OBJDIR if none is specified :\n     \n      MOZ_OBJDIR=${OBJDIR:-`uname -m`}\n\n      This will set the default OBJDIR to the architecture name - eg 'i686'\n      for IA32 or 'x86_64' for x86_64 -  \n\n   Then, once a default .mozconfig has been verified to exist or has been\n   created, the autogen.sh / first 'configure' runs client.mk which runs\n   autoconf.\n\n   This new script can actually be called 'configure' if it does something \n   like:  \n         if [ \"$0\" = configure ]; then mv ./configure autogen.sh; fi\n   BEFORE running :\n         make -f client.mk\n\n   So then, if autogen.sh succeeds, a new $OBJDIR/configure script is   \n   created, AND we are ready to build in $OBJDIR .\n\n3. THEN, to actually conform to user's expectations of what the configure\n   environment variables $LIBDIR, $BINDIR, $DATAROOTDIR, etc. are meant\n   to be used for - eg. I, as a newbie mozilla developer, would have expected\n   ONE SINGLE COPY of the nspr and nss and libxul libraries to be created in   \n   ${PREFIX}/${LIBDIR} - is a \"make install phase\" issue and perhaps should\n   be the topic of new bug report.", "creator": "jason.vas.dias@gmail.com", "raw_text": "oops, comment #20 continued - as I was saying:\n\n1. Change the .mozconfig finding code to look for:\n $(topsrcdir)/.mozconfig , $(HOME)/.mozconfig\n   and set $HOME to $topsrcdir if unset,\n   in that order, so the scripts do not have to bother looking up user's home\n   directory and $(topsrcdir)/.mozconfig will override $(HOME)/.mozconfig .\n\n2. Provide an \"autogen.sh\" - OR call it \"configure\" and have it move \"configure\"\n   to \"autogen.sh\" before autoconf is run -\n   that:\n   o  finds .mozconfig - if none exists, creates it from arguments - this \n      command would actually work:\n      \n      $ function to_mozconfig \\\n        { echo $* | tr ' ' '\\n' | grep '^--' | sed 's,^,ac_add_options ,'; }\n\n      $ to_mozconfig --prefix=/usr --libdir=/usr/lib64\n      ac_add_options --prefix=/usr\n      ac_add_options --libdir=/usr/lib64\n\n      - INCLUDING adding a default $OBJDIR if none is specified :\n     \n      MOZ_OBJDIR=${OBJDIR:-`uname -m`}\n\n      This will set the default OBJDIR to the architecture name - eg 'i686'\n      for IA32 or 'x86_64' for x86_64 -  \n\n   Then, once a default .mozconfig has been verified to exist or has been\n   created, the autogen.sh / first 'configure' runs client.mk which runs\n   autoconf.\n\n   This new script can actually be called 'configure' if it does something \n   like:  \n         if [ \"$0\" = configure ]; then mv ./configure autogen.sh; fi\n   BEFORE running :\n         make -f client.mk\n\n   So then, if autogen.sh succeeds, a new $OBJDIR/configure script is   \n   created, AND we are ready to build in $OBJDIR .\n\n3. THEN, to actually conform to user's expectations of what the configure\n   environment variables $LIBDIR, $BINDIR, $DATAROOTDIR, etc. are meant\n   to be used for - eg. I, as a newbie mozilla developer, would have expected\n   ONE SINGLE COPY of the nspr and nss and libxul libraries to be created in   \n   ${PREFIX}/${LIBDIR} - is a \"make install phase\" issue and perhaps should\n   be the topic of new bug report."}, {"raw_text": "This is an example of a script that could generate .mozconfig if non-existent to contain given autoconf args and default $MOZ_OBJDIR and correct $AUTOCONF setting, and setup a build in $OBJDIR by running 'make -f client.mk'", "creator": "jason.vas.dias@gmail.com", "text": "Created attachment 526598\nexample autogen.sh that could start build in $OBJDIR from scratch\n\nThis is an example of a script that could generate .mozconfig if non-existent to contain given autoconf args and default $MOZ_OBJDIR and correct $AUTOCONF setting, and setup a build in $OBJDIR by running 'make -f client.mk'", "time": "2011-04-17T17:09:37Z", "count": 22, "creation_time": "2011-04-17T17:09:37Z", "tags": [], "attachment_id": 526598, "bug_id": 648701, "is_private": false, "author": "jason.vas.dias@gmail.com", "id": 5414618}, {"id": 5414619, "author": "jason.vas.dias@gmail.com", "is_private": false, "bug_id": 648701, "creation_time": "2011-04-17T17:11:46Z", "tags": [], "attachment_id": 526599, "time": "2011-04-17T17:11:46Z", "count": 23, "text": "Created attachment 526599\noops, previous post should have been \"plain text\", not \"application/x-shellscript\" .", "raw_text": "", "creator": "jason.vas.dias@gmail.com"}, {"count": 24, "author": "jason.vas.dias@gmail.com", "time": "2011-04-17T17:18:09Z", "is_private": false, "id": 5414625, "creator": "jason.vas.dias@gmail.com", "raw_text": "This script could be shipped as initial first script to run to setup build in $OBJDIR (set by default to machine name if unset) and setup default .mozconfig from arguments if no .mozconfig exists.", "attachment_id": 526601, "creation_time": "2011-04-17T17:18:09Z", "tags": [], "text": "Created attachment 526601\nexample autogen.sh that could start build in $OBJDIR from scratch\n\nThis script could be shipped as initial first script to run to setup build in $OBJDIR (set by default to machine name if unset) and setup default .mozconfig from arguments if no .mozconfig exists.", "bug_id": 648701}, {"raw_text": "Example autogen.sh script that could be run as initial script to setup build in\n$OBJDIR (default: machine name) using $MOZCONFIG (created from arguments if non-existent) and running $topsrcdir/client.mk", "creator": "jason.vas.dias@gmail.com", "tags": [], "creation_time": "2011-04-17T17:25:35Z", "attachment_id": 526604, "text": "Created attachment 526604\nexample autogen.sh that could start build in $OBJDIR from scratch\n\nExample autogen.sh script that could be run as initial script to setup build in\n$OBJDIR (default: machine name) using $MOZCONFIG (created from arguments if non-existent) and running $topsrcdir/client.mk", "bug_id": 648701, "time": "2011-04-17T17:25:35Z", "author": "jason.vas.dias@gmail.com", "count": 25, "is_private": false, "id": 5414642}, {"id": 5414646, "count": 26, "time": "2011-04-17T17:29:21Z", "author": "jason.vas.dias@gmail.com", "is_private": false, "text": "oops, problems with \"content-type\" submitting this file - fixed now - sorry.", "bug_id": 648701, "creator": "jason.vas.dias@gmail.com", "raw_text": "oops, problems with \"content-type\" submitting this file - fixed now - sorry.", "attachment_id": null, "creation_time": "2011-04-17T17:29:21Z", "tags": []}, {"raw_text": "better version", "creator": "jason.vas.dias@gmail.com", "creation_time": "2011-04-17T18:23:54Z", "tags": [], "attachment_id": 526607, "text": "Created attachment 526607\nSetup default OBJDIR , potentially default .mozconfig from arguments & make -f client.mk\n\nbetter version", "bug_id": 648701, "time": "2011-04-17T18:23:54Z", "author": "jason.vas.dias@gmail.com", "count": 27, "is_private": false, "id": 5414674}, {"author": "jason.vas.dias@gmail.com", "is_private": false, "id": 5414675, "attachment_id": 526608, "tags": [], "creation_time": "2011-04-17T18:26:27Z", "bug_id": 648701, "count": 28, "time": "2011-04-17T18:26:27Z", "creator": "jason.vas.dias@gmail.com", "raw_text": "better version", "text": "Created attachment 526608\nSetup default OBJDIR , potentially default .mozconfig from arguments & make -f client.mk\n\nbetter version"}, {"is_private": false, "author": "jason.vas.dias@gmail.com", "id": 5414676, "attachment_id": 526609, "tags": [], "creation_time": "2011-04-17T18:28:21Z", "bug_id": 648701, "count": 29, "time": "2011-04-17T18:28:21Z", "creator": "jason.vas.dias@gmail.com", "raw_text": "version with 'make -f client.mk' UNcommented !", "text": "Created attachment 526609\nSetup default OBJDIR , potentially default .mozconfig from arguments & make -f client.mk\n\nversion with 'make -f client.mk' UNcommented !"}, {"bug_id": 648701, "text": "To test - COMMENT OUT line #51 - `make -f client.mk' !\n\nwith existing .mozconfig:\n\n $ ./autogen.sh\nUsing default OBJDIR: /home/firefox/src/x86_64\nUsing existing .mozconfig: .mozconfig\nConfiguration succeeded.\nNow, change directory (cd) to /home/firefox/src/x86_64 and type: 'make' .\n\nwith existing $HOME/.mozconfig:\n\n $ mv .mozconfig $HOME\n $ ./autogen.sh\nUsing default OBJDIR: /home/firefox/src/x86_64\nUsing existing .mozconfig: /home/firefox/.mozconfig\nConfiguration succeeded.\nNow, change directory (cd) to /home/firefox/src/x86_64 and type: 'make' .\n\nWith no .mozconfig or $HOME/.mozconfig, giving configure arguments:\n\n $ mv $HOME/.mozconfig $HOME/.mozconfig.save\n\n$  ./autogen.sh $(grep ac_add_options ~/.mozconfig.save | sed 's,ac_add_options ,,')\nUsing default OBJDIR: /home/firefox/src/x86_64\nCreating default .mozconfig: /home/firefox/src/.mozconfig\nConfiguration succeeded.\nNow, change directory (cd) to /home/firefox/src/x86_64 and type: 'make' .\n$ cat .mozconfig\nMOZ_OBJDIR=/home/firefox/src/x86_64\n AUTOCONF=/usr/bin/autoconf-2.13\n ac_add_options --prefix=/usr\n ac_add_options --libdir=/usr/lib64\n ac_add_options --disable-static\n ac_add_options --enable-shared\n ac_add_options --with-pic\n ac_add_options --enable-application=browser\n ac_add_options --enable-debug\n ac_add_options --enable-default-toolkit=cairo-gtk2\n ac_add_options --enable-plugins\n ac_add_options --with-pthreads\n ac_add_options --with-libxul-sdk=/usr/lib64/xulrunner-devel-2.0b13pre\n ac_add_options --with-system-libxul\n ac_add_options --with-system-nspr\n ac_add_options --with-nspr-prefix=/usr\n ac_add_options --with-system-libevent=/usr\n ac_add_options --with-system-jpeg=/usr\n ac_add_options --with-system-zlib=/usr\n ac_add_options --with-system-bz2=/usr\n ac_add_options --with-java-bin-path=/usr/java/bin\n ac_add_options --with-java-include-path=/usr/java/include\n ac_add_options --disable-strip\n ac_add_options --disable-install-strip\n\n\n \nNOTE: ALL of the above should work when run in another directory, ie.:\n $ $path_to_mozilla_source/autogen.sh", "creation_time": "2011-04-17T18:38:02Z", "tags": [], "attachment_id": null, "raw_text": "To test - COMMENT OUT line #51 - `make -f client.mk' !\n\nwith existing .mozconfig:\n\n $ ./autogen.sh\nUsing default OBJDIR: /home/firefox/src/x86_64\nUsing existing .mozconfig: .mozconfig\nConfiguration succeeded.\nNow, change directory (cd) to /home/firefox/src/x86_64 and type: 'make' .\n\nwith existing $HOME/.mozconfig:\n\n $ mv .mozconfig $HOME\n $ ./autogen.sh\nUsing default OBJDIR: /home/firefox/src/x86_64\nUsing existing .mozconfig: /home/firefox/.mozconfig\nConfiguration succeeded.\nNow, change directory (cd) to /home/firefox/src/x86_64 and type: 'make' .\n\nWith no .mozconfig or $HOME/.mozconfig, giving configure arguments:\n\n $ mv $HOME/.mozconfig $HOME/.mozconfig.save\n\n$  ./autogen.sh $(grep ac_add_options ~/.mozconfig.save | sed 's,ac_add_options ,,')\nUsing default OBJDIR: /home/firefox/src/x86_64\nCreating default .mozconfig: /home/firefox/src/.mozconfig\nConfiguration succeeded.\nNow, change directory (cd) to /home/firefox/src/x86_64 and type: 'make' .\n$ cat .mozconfig\nMOZ_OBJDIR=/home/firefox/src/x86_64\n AUTOCONF=/usr/bin/autoconf-2.13\n ac_add_options --prefix=/usr\n ac_add_options --libdir=/usr/lib64\n ac_add_options --disable-static\n ac_add_options --enable-shared\n ac_add_options --with-pic\n ac_add_options --enable-application=browser\n ac_add_options --enable-debug\n ac_add_options --enable-default-toolkit=cairo-gtk2\n ac_add_options --enable-plugins\n ac_add_options --with-pthreads\n ac_add_options --with-libxul-sdk=/usr/lib64/xulrunner-devel-2.0b13pre\n ac_add_options --with-system-libxul\n ac_add_options --with-system-nspr\n ac_add_options --with-nspr-prefix=/usr\n ac_add_options --with-system-libevent=/usr\n ac_add_options --with-system-jpeg=/usr\n ac_add_options --with-system-zlib=/usr\n ac_add_options --with-system-bz2=/usr\n ac_add_options --with-java-bin-path=/usr/java/bin\n ac_add_options --with-java-include-path=/usr/java/include\n ac_add_options --disable-strip\n ac_add_options --disable-install-strip\n\n\n \nNOTE: ALL of the above should work when run in another directory, ie.:\n $ $path_to_mozilla_source/autogen.sh", "creator": "jason.vas.dias@gmail.com", "id": 5414688, "is_private": false, "author": "jason.vas.dias@gmail.com", "time": "2011-04-17T18:38:02Z", "count": 30}, {"bug_id": 648701, "text": "Created attachment 526614\nSetup default OBJDIR , potentially default .mozconfig from arguments & make -f client.mk\n\nfinal beta version", "creation_time": "2011-04-17T18:45:23Z", "tags": [], "attachment_id": 526614, "raw_text": "final beta version", "creator": "jason.vas.dias@gmail.com", "id": 5414691, "is_private": false, "time": "2011-04-17T18:45:23Z", "author": "jason.vas.dias@gmail.com", "count": 31}, {"creator": "jason.vas.dias@gmail.com", "raw_text": "more tests:\n\nSetup to build in my own objdir:\n\n $ cd /tmp; mkdir ff_build; cd ff_build; export OBJDIR=`pwd`;\n $ /home/firefox/src/autogen.sh\n$ /home/firefox/src/autogen.sh $(grep ac_add_options ~/.mozconfig.save | sed 's,ac_add_options ,,')\nCreating default .mozconfig: /home/firefox/src/.mozconfig                                          \nmake[1]: Entering directory `/home/firefox/src'                                                    \ncd x86_64                                                                                          \n/home/firefox/src/configure                                                                        \nAdding configure options from /home/firefox/src/.mozconfig:                                        \n  --prefix=/usr                                                                                    \n  --libdir=/usr/lib64                                                                              \n  --disable-static                                                                                 \n  --enable-shared                                                                                  \n  --with-pic                                                                                       \n  --enable-application=browser                                                                     \n  --enable-debug                                                                                   \n  --enable-default-toolkit=cairo-gtk2                                                              \n  --enable-plugins                                                                                 \n  --with-pthreads                                                                                  \n  --with-libxul-sdk=/usr/lib64/xulrunner-devel-2.0b13pre                                           \n  --with-system-libxul                                                                             \n  --with-system-nspr                                                                               \n  --with-nspr-prefix=/usr                                                                          \n  --with-system-libevent=/usr                                                                      \n  --with-system-jpeg=/usr                                                                          \n  --with-system-zlib=/usr                                                                          \n  --with-system-bz2=/usr                                                                           \n  --with-java-bin-path=/usr/java/bin                                                               \n  --with-java-include-path=/usr/java/include                                                       \n  --disable-strip                                                                                  \n  --disable-install-strip                                                                          \nloading cache ./config.cache                                                                       \nchecking host system type... x86_64-unknown-linux-gnu                                              \nchecking target system type... x86_64-unknown-linux-gnu                                            \nchecking build system type... x86_64-unknown-linux-gnu                                             \nchecking for mawk... (cached) gawk                                                                 \nchecking for perl5... (cached) /usr/bin/perl                                                       \nchecking for gcc... (cached) /usr/bin/gcc                                                          \nchecking whether the C compiler (/usr/bin/gcc  -Wa,--compress-debug-sections ) works... yes        \n ...\n\n\n$ cat /home/firefox/src/.mozconfig\nMOZ_OBJDIR=/tmp/ff_build\n AUTOCONF=/usr/bin/autoconf-2.13\n ac_add_options --prefix=/usr\n ac_add_options --libdir=/usr/lib64\n ac_add_options --disable-static\n ac_add_options --enable-shared\n ac_add_options --with-pic\n ac_add_options --enable-application=browser\n ac_add_options --enable-debug\n ac_add_options --enable-default-toolkit=cairo-gtk2\n ac_add_options --enable-plugins\n ac_add_options --with-pthreads\n ac_add_options --with-libxul-sdk=/usr/lib64/xulrunner-devel-2.0b13pre\n ac_add_options --with-system-libxul\n ac_add_options --with-system-nspr\n ac_add_options --with-nspr-prefix=/usr\n ac_add_options --with-system-libevent=/usr\n ac_add_options --with-system-jpeg=/usr\n ac_add_options --with-system-zlib=/usr\n ac_add_options --with-system-bz2=/usr\n ac_add_options --with-java-bin-path=/usr/java/bin\n ac_add_options --with-java-include-path=/usr/java/include\n ac_add_options --disable-strip\n ac_add_options --disable-install-strip", "text": "more tests:\n\nSetup to build in my own objdir:\n\n $ cd /tmp; mkdir ff_build; cd ff_build; export OBJDIR=`pwd`;\n $ /home/firefox/src/autogen.sh\n$ /home/firefox/src/autogen.sh $(grep ac_add_options ~/.mozconfig.save | sed 's,ac_add_options ,,')\nCreating default .mozconfig: /home/firefox/src/.mozconfig                                          \nmake[1]: Entering directory `/home/firefox/src'                                                    \ncd x86_64                                                                                          \n/home/firefox/src/configure                                                                        \nAdding configure options from /home/firefox/src/.mozconfig:                                        \n  --prefix=/usr                                                                                    \n  --libdir=/usr/lib64                                                                              \n  --disable-static                                                                                 \n  --enable-shared                                                                                  \n  --with-pic                                                                                       \n  --enable-application=browser                                                                     \n  --enable-debug                                                                                   \n  --enable-default-toolkit=cairo-gtk2                                                              \n  --enable-plugins                                                                                 \n  --with-pthreads                                                                                  \n  --with-libxul-sdk=/usr/lib64/xulrunner-devel-2.0b13pre                                           \n  --with-system-libxul                                                                             \n  --with-system-nspr                                                                               \n  --with-nspr-prefix=/usr                                                                          \n  --with-system-libevent=/usr                                                                      \n  --with-system-jpeg=/usr                                                                          \n  --with-system-zlib=/usr                                                                          \n  --with-system-bz2=/usr                                                                           \n  --with-java-bin-path=/usr/java/bin                                                               \n  --with-java-include-path=/usr/java/include                                                       \n  --disable-strip                                                                                  \n  --disable-install-strip                                                                          \nloading cache ./config.cache                                                                       \nchecking host system type... x86_64-unknown-linux-gnu                                              \nchecking target system type... x86_64-unknown-linux-gnu                                            \nchecking build system type... x86_64-unknown-linux-gnu                                             \nchecking for mawk... (cached) gawk                                                                 \nchecking for perl5... (cached) /usr/bin/perl                                                       \nchecking for gcc... (cached) /usr/bin/gcc                                                          \nchecking whether the C compiler (/usr/bin/gcc  -Wa,--compress-debug-sections ) works... yes        \n ...\n\n\n$ cat /home/firefox/src/.mozconfig\nMOZ_OBJDIR=/tmp/ff_build\n AUTOCONF=/usr/bin/autoconf-2.13\n ac_add_options --prefix=/usr\n ac_add_options --libdir=/usr/lib64\n ac_add_options --disable-static\n ac_add_options --enable-shared\n ac_add_options --with-pic\n ac_add_options --enable-application=browser\n ac_add_options --enable-debug\n ac_add_options --enable-default-toolkit=cairo-gtk2\n ac_add_options --enable-plugins\n ac_add_options --with-pthreads\n ac_add_options --with-libxul-sdk=/usr/lib64/xulrunner-devel-2.0b13pre\n ac_add_options --with-system-libxul\n ac_add_options --with-system-nspr\n ac_add_options --with-nspr-prefix=/usr\n ac_add_options --with-system-libevent=/usr\n ac_add_options --with-system-jpeg=/usr\n ac_add_options --with-system-zlib=/usr\n ac_add_options --with-system-bz2=/usr\n ac_add_options --with-java-bin-path=/usr/java/bin\n ac_add_options --with-java-include-path=/usr/java/include\n ac_add_options --disable-strip\n ac_add_options --disable-install-strip", "count": 32, "time": "2011-04-17T18:55:43Z", "attachment_id": null, "tags": [], "creation_time": "2011-04-17T18:55:43Z", "bug_id": 648701, "is_private": false, "author": "jason.vas.dias@gmail.com", "id": 5414699}, {"bug_id": 648701, "text": "That \"cd x86_64\" was because it had previously been configured for \"x86_64\" and it somehow \"stuck\" in the make environment - that was not the script - hmm...\nlooking into that ...", "creation_time": "2011-04-17T19:00:38Z", "tags": [], "attachment_id": null, "raw_text": "That \"cd x86_64\" was because it had previously been configured for \"x86_64\" and it somehow \"stuck\" in the make environment - that was not the script - hmm...\nlooking into that ...", "creator": "jason.vas.dias@gmail.com", "id": 5414702, "is_private": false, "author": "jason.vas.dias@gmail.com", "time": "2011-04-17T19:00:38Z", "count": 33}, {"tags": [], "creation_time": "2011-04-17T19:13:20Z", "attachment_id": 526615, "raw_text": "Oops, no it was my fault:\n - Script MUST export MOZ_OBJDIR if $OBJDIR is set", "creator": "jason.vas.dias@gmail.com", "bug_id": 648701, "text": "Created attachment 526615\nSetup default OBJDIR , potentially default .mozconfig from arguments & make -f client.mk\n\nOops, no it was my fault:\n - Script MUST export MOZ_OBJDIR if $OBJDIR is set", "is_private": false, "author": "jason.vas.dias@gmail.com", "time": "2011-04-17T19:13:20Z", "count": 34, "id": 5414710}, {"bug_id": 648701, "creation_time": "2011-04-17T19:14:29Z", "tags": [], "attachment_id": 526616, "id": 5414712, "is_private": false, "author": "jason.vas.dias@gmail.com", "text": "Created attachment 526616\nSetup default OBJDIR , potentially default .mozconfig from arguments & make -f client.mk\n\nin 'plain-text'!", "raw_text": "in 'plain-text'!", "creator": "jason.vas.dias@gmail.com", "time": "2011-04-17T19:14:29Z", "count": 35}, {"id": 5414713, "author": "josh@joshmatthews.net", "time": "2011-04-17T19:15:23Z", "count": 36, "is_private": false, "text": "Comment on attachment 526614\nSetup default OBJDIR , potentially default .mozconfig from arguments & make -f client.mk\n\nTo ask for a review on a patch, you need to set the review flag to ? and give a reviewer name (such as :ted).  I'm not going to do so for you, though, since you keep posting new versions.", "bug_id": 648701, "raw_text": "To ask for a review on a patch, you need to set the review flag to ? and give a reviewer name (such as :ted).  I'm not going to do so for you, though, since you keep posting new versions.", "creator": "josh@joshmatthews.net", "creation_time": "2011-04-17T19:15:23Z", "tags": [], "attachment_id": 526614}, {"text": "Also you can change the content-type of a patch from the Details link; you don't need to reupload every time.", "bug_id": 648701, "creator": "josh@joshmatthews.net", "raw_text": "Also you can change the content-type of a patch from the Details link; you don't need to reupload every time.", "attachment_id": null, "tags": [], "creation_time": "2011-04-17T19:16:05Z", "id": 5414714, "count": 37, "time": "2011-04-17T19:16:05Z", "author": "josh@joshmatthews.net", "is_private": false}, {"count": 38, "time": "2011-04-17T19:17:18Z", "creator": "jason.vas.dias@gmail.com", "raw_text": "$ bash -xf /home/firefox/src/autogen.sh $(grep ac_add_options ~/.mozconfig.save | sed 's,ac_add_options ,,')\n+ ME=/home/firefox/src/autogen.sh                                                                           \n+ ME=autogen.sh                                                                                             \n+ SRC=/home/firefox/src/                                                                                    \n++ cd /home/firefox/src/                                                                                    \n++ pwd                                                                                                      \n+ SRC=/home/firefox/src                                                                                     \n+ cd /home/firefox/src                                                                                      \n+ HOME=/home/firefox                                                                                        \n++ which autoconf-2.13                                                                                      \n+ AUTOCONF213=/usr/bin/autoconf-2.13                                                                        \n+ '[' '!' -x /usr/bin/autoconf-2.13 ']'                                                                     \n+ /usr/bin/autoconf-2.13 --version                                                                          \n+ egrep -q '2\\.13'                                                                                          \n+ MOZCONFIG=.mozconfig                                                                                      \n+ '[' x/tmp/ff_build = x ']'                                                                                \n+ MOZ_OBJDIR=/tmp/ff_build                                                                                  \n+ export MOZ_OBJDIR                                                                                         \n+ '[' '!' -d /tmp/ff_build ']'                                                                              \n+ '[' -r .mozconfig ']'                                                                                     \n+ '[' -s .mozconfig ']'                                                                                     \n+ echo 'Using existing .mozconfig: .mozconfig'                                                              \nUsing existing .mozconfig: .mozconfig                                                                       \n+ export MOZCONFIG                                                                                          \n+ make -f client.mk                                                                                         \nmake[1]: Entering directory `/home/firefox/src'                                                             \ncd /tmp/ff_build                                                                                            \n/home/firefox/src/configure                                                                                 \nAdding configure options from /home/firefox/src/.mozconfig:                                                 \n  --prefix=/usr                                                                                             \n  --libdir=/usr/lib64                                                                                       \n  --disable-static\n  --enable-shared\n  --with-pic\n  --enable-application=browser\n  --enable-debug\n  --enable-default-toolkit=cairo-gtk2\n  --enable-plugins\n  --with-pthreads\n  --with-libxul-sdk=/usr/lib64/xulrunner-devel-2.0b13pre\n  --with-system-libxul\n  --with-system-nspr\n  --with-nspr-prefix=/usr\n  --with-system-libevent=/usr\n  --with-system-jpeg=/usr\n  --with-system-zlib=/usr\n  --with-system-bz2=/usr\n  --with-java-bin-path=/usr/java/bin\n  --with-java-include-path=/usr/java/include\n  --disable-strip\n  --disable-install-strip\ncreating cache ./config.cache\nchecking host system type... x86_64-unknown-linux-gnu\nchecking target system type... x86_64-unknown-linux-gnu\nchecking build system type... x86_64-unknown-linux-gnu\nchecking for mawk... no\nchecking for gawk... gawk\nchecking for perl5... no\nchecking for perl... /usr/bin/perl\nchecking for gcc... /usr/bin/gcc\nchecking whether the C compiler (/usr/bin/gcc  -Wa,--compress-debug-sections ) works... yes\nchecking whether the C compiler (/usr/bin/gcc  -Wa,--compress-debug-sections ) is a cross-compiler... no\nchecking whether we are using GNU C... yes\nchecking whether /usr/bin/gcc accepts -g... yes\nchecking for c++... /usr/bin/g++\nchecking whether the C++ compiler (/usr/bin/g++  -fpermissive ) works... ^C*** Fix above errors and then restart with               \"make -f client.mk build\"\nmake[1]: *** [configure] Error 1\nmake: *** [/tmp/ff_build/Makefile] Interrupt", "text": "$ bash -xf /home/firefox/src/autogen.sh $(grep ac_add_options ~/.mozconfig.save | sed 's,ac_add_options ,,')\n+ ME=/home/firefox/src/autogen.sh                                                                           \n+ ME=autogen.sh                                                                                             \n+ SRC=/home/firefox/src/                                                                                    \n++ cd /home/firefox/src/                                                                                    \n++ pwd                                                                                                      \n+ SRC=/home/firefox/src                                                                                     \n+ cd /home/firefox/src                                                                                      \n+ HOME=/home/firefox                                                                                        \n++ which autoconf-2.13                                                                                      \n+ AUTOCONF213=/usr/bin/autoconf-2.13                                                                        \n+ '[' '!' -x /usr/bin/autoconf-2.13 ']'                                                                     \n+ /usr/bin/autoconf-2.13 --version                                                                          \n+ egrep -q '2\\.13'                                                                                          \n+ MOZCONFIG=.mozconfig                                                                                      \n+ '[' x/tmp/ff_build = x ']'                                                                                \n+ MOZ_OBJDIR=/tmp/ff_build                                                                                  \n+ export MOZ_OBJDIR                                                                                         \n+ '[' '!' -d /tmp/ff_build ']'                                                                              \n+ '[' -r .mozconfig ']'                                                                                     \n+ '[' -s .mozconfig ']'                                                                                     \n+ echo 'Using existing .mozconfig: .mozconfig'                                                              \nUsing existing .mozconfig: .mozconfig                                                                       \n+ export MOZCONFIG                                                                                          \n+ make -f client.mk                                                                                         \nmake[1]: Entering directory `/home/firefox/src'                                                             \ncd /tmp/ff_build                                                                                            \n/home/firefox/src/configure                                                                                 \nAdding configure options from /home/firefox/src/.mozconfig:                                                 \n  --prefix=/usr                                                                                             \n  --libdir=/usr/lib64                                                                                       \n  --disable-static\n  --enable-shared\n  --with-pic\n  --enable-application=browser\n  --enable-debug\n  --enable-default-toolkit=cairo-gtk2\n  --enable-plugins\n  --with-pthreads\n  --with-libxul-sdk=/usr/lib64/xulrunner-devel-2.0b13pre\n  --with-system-libxul\n  --with-system-nspr\n  --with-nspr-prefix=/usr\n  --with-system-libevent=/usr\n  --with-system-jpeg=/usr\n  --with-system-zlib=/usr\n  --with-system-bz2=/usr\n  --with-java-bin-path=/usr/java/bin\n  --with-java-include-path=/usr/java/include\n  --disable-strip\n  --disable-install-strip\ncreating cache ./config.cache\nchecking host system type... x86_64-unknown-linux-gnu\nchecking target system type... x86_64-unknown-linux-gnu\nchecking build system type... x86_64-unknown-linux-gnu\nchecking for mawk... no\nchecking for gawk... gawk\nchecking for perl5... no\nchecking for perl... /usr/bin/perl\nchecking for gcc... /usr/bin/gcc\nchecking whether the C compiler (/usr/bin/gcc  -Wa,--compress-debug-sections ) works... yes\nchecking whether the C compiler (/usr/bin/gcc  -Wa,--compress-debug-sections ) is a cross-compiler... no\nchecking whether we are using GNU C... yes\nchecking whether /usr/bin/gcc accepts -g... yes\nchecking for c++... /usr/bin/g++\nchecking whether the C++ compiler (/usr/bin/g++  -fpermissive ) works... ^C*** Fix above errors and then restart with               \"make -f client.mk build\"\nmake[1]: *** [configure] Error 1\nmake: *** [/tmp/ff_build/Makefile] Interrupt", "author": "jason.vas.dias@gmail.com", "is_private": false, "id": 5414716, "attachment_id": null, "creation_time": "2011-04-17T19:17:18Z", "tags": [], "bug_id": 648701}, {"time": "2011-04-17T19:18:04Z", "count": 39, "text": "Josh : oops, sorry - got the content-type set OK now, and this should be FINAL version .", "raw_text": "Josh : oops, sorry - got the content-type set OK now, and this should be FINAL version .", "creator": "jason.vas.dias@gmail.com", "id": 5414718, "author": "jason.vas.dias@gmail.com", "is_private": false, "bug_id": 648701, "creation_time": "2011-04-17T19:18:04Z", "tags": [], "attachment_id": null}, {"count": 40, "time": "2011-04-17T19:27:46Z", "text": "Created attachment 526617\nSetup default OBJDIR , potentially default .mozconfig from arguments & make -f client.mk\n\nFINAL version: set first $MOZCONFIG tried to ${SRC}/.mozconfig , not '.mozconfig', though both end up being OK\nalso added 'reviewer please review' :ted - tag", "creator": "jason.vas.dias@gmail.com", "raw_text": "FINAL version: set first $MOZCONFIG tried to ${SRC}/.mozconfig , not '.mozconfig', though both end up being OK\nalso added 'reviewer please review' :ted - tag", "id": 5414725, "author": "jason.vas.dias@gmail.com", "is_private": false, "bug_id": 648701, "attachment_id": 526617, "tags": [], "creation_time": "2011-04-17T19:27:46Z"}, {"text": "Thanks for the patch!\n\nI think having an autogen.sh is a good idea, but I'm not sure about the implementation:\n\n- do autogen.sh scripts generally call configure too? I don't think they do.\n\n- I'm not sure about creating a .mozconfig file\n\n- i dont think we want to duplicate functionality from client.mk into autogen.sh. One should rely on the other. Perhaps autogen.sh should be as simple as `make -f client.mk create-configure-file` (or whatever that target is called).\n\n\nThe self-configuring I think should be moved to the top of the configure file, in that it moves to an objdir if it's execed from the srcdir. It should probably print a warning at the end that an objdir has been used, and to type 'make -C objdir).", "raw_text": "Thanks for the patch!\n\nI think having an autogen.sh is a good idea, but I'm not sure about the implementation:\n\n- do autogen.sh scripts generally call configure too? I don't think they do.\n\n- I'm not sure about creating a .mozconfig file\n\n- i dont think we want to duplicate functionality from client.mk into autogen.sh. One should rely on the other. Perhaps autogen.sh should be as simple as `make -f client.mk create-configure-file` (or whatever that target is called).\n\n\nThe self-configuring I think should be moved to the top of the configure file, in that it moves to an objdir if it's execed from the srcdir. It should probably print a warning at the end that an objdir has been used, and to type 'make -C objdir).", "creator": "paul.biggar@gmail.com", "time": "2011-04-18T12:59:19Z", "count": 41, "bug_id": 648701, "creation_time": "2011-04-18T12:59:19Z", "tags": [], "attachment_id": null, "id": 5415485, "author": "paul.biggar@gmail.com", "is_private": false}, {"creation_time": "2011-04-18T13:50:44Z", "tags": [], "attachment_id": null, "raw_text": "Hi Paul -\nRE: \n> do autogen.sh scripts generally call configure too? I don't think they do.\n\nWell, the xorg / freedesktop.org ones do :\n\n$ cat /usr/src/xorg/everything/xserver/autogen.sh\n#! /bin/sh\n\nsrcdir=`dirname $0`\ntest -z \"$srcdir\" && srcdir=.\n\nORIGDIR=`pwd`\ncd $srcdir\n\nautoreconf --force -v --install || exit 1\ncd $ORIGDIR || exit $?\n\n$srcdir/configure --enable-maintainer-mode \"$@\"\n\n$\n\nRE: > - I'm not sure about creating a .mozconfig file\n\nWell, if autogen.sh doesn't do it , what will ?\n\nIt ONLY creates a .mozconfig from its arguments if\n 1) $SRC/.mozconfig does not exist\n 2) $HOME/.mozconfig doesn not exist\nThen , if BOTH conditions are satisfied, it passes\nits '--' prefixed configure arguments to the 'to_mozconfig'\nfunction to create $SRC/.mozconfig and then exports $MOZCONFIG\nto the full path of the newly created file.\n\nRE: > Perhaps autogen.sh should be as simple as `make -f client.mk create-configure-file`\n\nYes, but at the moment, no such option exists, and it NEED NOT exist, if\nthis autogen.sh is used.\n\nRE: > type 'make -C objdir'\nTo me, this is far more \"nonstandard and geeky\" than the standard:\n\n$ ./autogen.sh <configure args ...> && cd $OBJDIR && make", "creator": "jason.vas.dias@gmail.com", "bug_id": 648701, "text": "Hi Paul -\nRE: \n> do autogen.sh scripts generally call configure too? I don't think they do.\n\nWell, the xorg / freedesktop.org ones do :\n\n$ cat /usr/src/xorg/everything/xserver/autogen.sh\n#! /bin/sh\n\nsrcdir=`dirname $0`\ntest -z \"$srcdir\" && srcdir=.\n\nORIGDIR=`pwd`\ncd $srcdir\n\nautoreconf --force -v --install || exit 1\ncd $ORIGDIR || exit $?\n\n$srcdir/configure --enable-maintainer-mode \"$@\"\n\n$\n\nRE: > - I'm not sure about creating a .mozconfig file\n\nWell, if autogen.sh doesn't do it , what will ?\n\nIt ONLY creates a .mozconfig from its arguments if\n 1) $SRC/.mozconfig does not exist\n 2) $HOME/.mozconfig doesn not exist\nThen , if BOTH conditions are satisfied, it passes\nits '--' prefixed configure arguments to the 'to_mozconfig'\nfunction to create $SRC/.mozconfig and then exports $MOZCONFIG\nto the full path of the newly created file.\n\nRE: > Perhaps autogen.sh should be as simple as `make -f client.mk create-configure-file`\n\nYes, but at the moment, no such option exists, and it NEED NOT exist, if\nthis autogen.sh is used.\n\nRE: > type 'make -C objdir'\nTo me, this is far more \"nonstandard and geeky\" than the standard:\n\n$ ./autogen.sh <configure args ...> && cd $OBJDIR && make", "is_private": false, "author": "jason.vas.dias@gmail.com", "time": "2011-04-18T13:50:44Z", "count": 42, "id": 5415555}, {"is_private": false, "author": "paul.biggar@gmail.com", "id": 5415577, "tags": [], "creation_time": "2011-04-18T14:04:12Z", "attachment_id": null, "bug_id": 648701, "time": "2011-04-18T14:04:12Z", "count": 43, "raw_text": "(In reply to comment #42)\n> $srcdir/configure --enable-maintainer-mode \"$@\"\n\nFair enough.\n\n\n> Well, if autogen.sh doesn't do it , what will ?\n\nWe don't need .mozconfig files anymore (since --enable-application=browser was added. If the user doesn't know about them, no need to mention them.\n\n\n> RE: > Perhaps autogen.sh should be as simple as `make -f client.mk\n> create-configure-file`\n> \n> Yes, but at the moment, no such option exists, and it NEED NOT exist, if\n> this autogen.sh is used.\n\nThere is definitely a rule in our Makefiles that runs autoconf2.13, though I don't know what it's called. We should be reusing code where possible.\n\n\n> RE: > type 'make -C objdir'\n> To me, this is far more \"nonstandard and geeky\" than the standard:\n> \n> $ ./autogen.sh <configure args ...> && cd $OBJDIR && make\n\nI think what we're aiming for in the long run is to include configure in mozilla-central. Then it can be the more idiomatic:\n\n   ./configure && cd $OBJDIR && make\n\nDo we want to ship an autogen.sh in this case? Maybe, but if so, we want the logic to be in configure, not in autogen.sh.", "creator": "paul.biggar@gmail.com", "text": "(In reply to comment #42)\n> $srcdir/configure --enable-maintainer-mode \"$@\"\n\nFair enough.\n\n\n> Well, if autogen.sh doesn't do it , what will ?\n\nWe don't need .mozconfig files anymore (since --enable-application=browser was added. If the user doesn't know about them, no need to mention them.\n\n\n> RE: > Perhaps autogen.sh should be as simple as `make -f client.mk\n> create-configure-file`\n> \n> Yes, but at the moment, no such option exists, and it NEED NOT exist, if\n> this autogen.sh is used.\n\nThere is definitely a rule in our Makefiles that runs autoconf2.13, though I don't know what it's called. We should be reusing code where possible.\n\n\n> RE: > type 'make -C objdir'\n> To me, this is far more \"nonstandard and geeky\" than the standard:\n> \n> $ ./autogen.sh <configure args ...> && cd $OBJDIR && make\n\nI think what we're aiming for in the long run is to include configure in mozilla-central. Then it can be the more idiomatic:\n\n   ./configure && cd $OBJDIR && make\n\nDo we want to ship an autogen.sh in this case? Maybe, but if so, we want the logic to be in configure, not in autogen.sh."}, {"raw_text": "OK, so the simplest solution is to first ship autogen.sh, then when the configure code is finished, ship configure .\n\nRE: \n> We don't need .mozconfig files anymore (since --enable-application=browser \n> was added)\n\nAHA ! I didn't know this - it isn't documented anywhere.  \n\nSo if I run the autoconf-2.13 generated configure script WITH ARGUMENTS,\nit will automatically create a .mozconfig to honor those arguments if\none does not exist ?\n\nI'll try that and see.\n\nWhat about '--enable-application=xulrunner' ?\nWill that generate a default .mozconfig also ?\nI'll investigate some more.", "creator": "jason.vas.dias@gmail.com", "tags": [], "creation_time": "2011-04-18T14:18:32Z", "attachment_id": null, "text": "OK, so the simplest solution is to first ship autogen.sh, then when the configure code is finished, ship configure .\n\nRE: \n> We don't need .mozconfig files anymore (since --enable-application=browser \n> was added)\n\nAHA ! I didn't know this - it isn't documented anywhere.  \n\nSo if I run the autoconf-2.13 generated configure script WITH ARGUMENTS,\nit will automatically create a .mozconfig to honor those arguments if\none does not exist ?\n\nI'll try that and see.\n\nWhat about '--enable-application=xulrunner' ?\nWill that generate a default .mozconfig also ?\nI'll investigate some more.", "bug_id": 648701, "author": "jason.vas.dias@gmail.com", "time": "2011-04-18T14:18:32Z", "count": 44, "is_private": false, "id": 5415600}, {"text": "RE: >  Then it can be the more idiomatic:\n\n    > ./configure && cd $OBJDIR && make\n\nMy understanding of \"the idiom\" here is that if I want to build any autoconf\npackage in a separate OBJDIR, I simply do:\n\n   $ mkdir $my_build\n   $ cd $my_build\n   $ ${the_source_dir}/configure && make\n\nNOTE: NO setting of $OBJDIR .\n\nPerhaps the one change I'd make to the autogen.script I submitted would be\nto make the \"default $OBJDIR\" setting if one is not set be the initial `pwd` .", "bug_id": 648701, "raw_text": "RE: >  Then it can be the more idiomatic:\n\n    > ./configure && cd $OBJDIR && make\n\nMy understanding of \"the idiom\" here is that if I want to build any autoconf\npackage in a separate OBJDIR, I simply do:\n\n   $ mkdir $my_build\n   $ cd $my_build\n   $ ${the_source_dir}/configure && make\n\nNOTE: NO setting of $OBJDIR .\n\nPerhaps the one change I'd make to the autogen.script I submitted would be\nto make the \"default $OBJDIR\" setting if one is not set be the initial `pwd` .", "creator": "jason.vas.dias@gmail.com", "creation_time": "2011-04-18T14:29:56Z", "tags": [], "attachment_id": null, "id": 5415626, "time": "2011-04-18T14:29:56Z", "author": "jason.vas.dias@gmail.com", "count": 45, "is_private": false}, {"text": "(In reply to comment #44)\n> So if I run the autoconf-2.13 generated configure script WITH ARGUMENTS,\n> it will automatically create a .mozconfig to honor those arguments if\n> one does not exist ?\n\nNo, it doesn't create a .mozconfig, but it will honour them for that build/objdir.\n\n\n> What about '--enable-application=xulrunner' ?\n\nIf that's passed as an argument to a configure, it will be used in the objdir.", "creator": "paul.biggar@gmail.com", "raw_text": "(In reply to comment #44)\n> So if I run the autoconf-2.13 generated configure script WITH ARGUMENTS,\n> it will automatically create a .mozconfig to honor those arguments if\n> one does not exist ?\n\nNo, it doesn't create a .mozconfig, but it will honour them for that build/objdir.\n\n\n> What about '--enable-application=xulrunner' ?\n\nIf that's passed as an argument to a configure, it will be used in the objdir.", "count": 46, "time": "2011-04-18T14:35:06Z", "bug_id": 648701, "attachment_id": null, "creation_time": "2011-04-18T14:35:06Z", "tags": [], "id": 5415632, "is_private": false, "author": "paul.biggar@gmail.com"}, {"time": "2011-04-18T14:39:27Z", "author": "paul.biggar@gmail.com", "count": 47, "is_private": false, "id": 5415640, "raw_text": "(In reply to comment #45)\n> RE: >  Then it can be the more idiomatic:\n> \n>     > ./configure && cd $OBJDIR && make\n> \n> My understanding of \"the idiom\" here is that if I want to build any autoconf\n> package in a separate OBJDIR, I simply do:\n> \n>    $ mkdir $my_build\n>    $ cd $my_build\n>    $ ${the_source_dir}/configure && make\n> \n> NOTE: NO setting of $OBJDIR .\n> \n> Perhaps the one change I'd make to the autogen.script I submitted would be\n> to make the \"default $OBJDIR\" setting if one is not set be the initial `pwd` .\n\n\nYes, your understanding of the idiom is correct.\n\nWe have a subtle change though, which is that when a user wants to do a srcdir build, we dont want to support that. So instead we want to automatically convert it into an objdir build.\n\n\nNote that things like generating the configure file, regenerating the configure file upon changes to configure.in, regenerating Makefiles upon changes to makefile.in, and the default name of the objdir, are all already handled in client.mk. So if possible, we should either:\n\n- make helper scripts defer back to `make -f client.mk`\n\nor\n\n- factor the work from client.mk into a different script, and make sure that its use in client.mk still works.", "creator": "paul.biggar@gmail.com", "tags": [], "creation_time": "2011-04-18T14:39:27Z", "attachment_id": null, "text": "(In reply to comment #45)\n> RE: >  Then it can be the more idiomatic:\n> \n>     > ./configure && cd $OBJDIR && make\n> \n> My understanding of \"the idiom\" here is that if I want to build any autoconf\n> package in a separate OBJDIR, I simply do:\n> \n>    $ mkdir $my_build\n>    $ cd $my_build\n>    $ ${the_source_dir}/configure && make\n> \n> NOTE: NO setting of $OBJDIR .\n> \n> Perhaps the one change I'd make to the autogen.script I submitted would be\n> to make the \"default $OBJDIR\" setting if one is not set be the initial `pwd` .\n\n\nYes, your understanding of the idiom is correct.\n\nWe have a subtle change though, which is that when a user wants to do a srcdir build, we dont want to support that. So instead we want to automatically convert it into an objdir build.\n\n\nNote that things like generating the configure file, regenerating the configure file upon changes to configure.in, regenerating Makefiles upon changes to makefile.in, and the default name of the objdir, are all already handled in client.mk. So if possible, we should either:\n\n- make helper scripts defer back to `make -f client.mk`\n\nor\n\n- factor the work from client.mk into a different script, and make sure that its use in client.mk still works.", "bug_id": 648701}, {"count": 48, "time": "2011-04-18T17:17:22Z", "creator": "jason.vas.dias@gmail.com", "raw_text": "Hi -\nRE: > We have a subtle change though, which is that when a user wants to do a \n    > srcdir build, we dont want to support that. So instead we want to  \n    > automatically convert it into an objdir build.\n\nThe autogen.sh script already does that ;  but I'm going to add a flag \nMOZ_BUILD_HERE=1  so that instead of the default $OBJDIR being \n$SRC/`uname -m` it will be `pwd` IFF  [ \"$MOZ_BUILD_HERE\" -eq 1 ] && [ \"`pwd`\" != \"$SRC\" ].\n\nRE: > we should - make helper scripts defer back to `make -f client.mk`\n\nYes, that is what autogen.sh is doing, but there has to be something\nthat actually does this with some sensible and user-configurable\ndefault settings ; there needs to be some \"first command to enter\" -\nI think running one shell script with no arguments is the only\nsafe method to expect average users to perform reliably .\n\nI think autogen.sh, if no .mozconfig exists and \"echo $* | grep '^--'\" is empty, should refuse to proceed if no '--enable-application' argument is given,\nand if it is, should load a default .mozconfig into $SRC/.mozconfig : \n case ${*//*--enable-application=/}\n browser*)\n\n\nMy understanding is that CURRENTLY, AS-IS , client.mk can't quite handle\nrelocating to a new OBJDIR and operating without ANY .mozconfig straight\nout-of-the-box ;  why make .client.mk any more complicated when what\nis required can be acheived with use of a well-know autoconf step\nlike running autogen.sh ?", "text": "Hi -\nRE: > We have a subtle change though, which is that when a user wants to do a \n    > srcdir build, we dont want to support that. So instead we want to  \n    > automatically convert it into an objdir build.\n\nThe autogen.sh script already does that ;  but I'm going to add a flag \nMOZ_BUILD_HERE=1  so that instead of the default $OBJDIR being \n$SRC/`uname -m` it will be `pwd` IFF  [ \"$MOZ_BUILD_HERE\" -eq 1 ] && [ \"`pwd`\" != \"$SRC\" ].\n\nRE: > we should - make helper scripts defer back to `make -f client.mk`\n\nYes, that is what autogen.sh is doing, but there has to be something\nthat actually does this with some sensible and user-configurable\ndefault settings ; there needs to be some \"first command to enter\" -\nI think running one shell script with no arguments is the only\nsafe method to expect average users to perform reliably .\n\nI think autogen.sh, if no .mozconfig exists and \"echo $* | grep '^--'\" is empty, should refuse to proceed if no '--enable-application' argument is given,\nand if it is, should load a default .mozconfig into $SRC/.mozconfig : \n case ${*//*--enable-application=/}\n browser*)\n\n\nMy understanding is that CURRENTLY, AS-IS , client.mk can't quite handle\nrelocating to a new OBJDIR and operating without ANY .mozconfig straight\nout-of-the-box ;  why make .client.mk any more complicated when what\nis required can be acheived with use of a well-know autoconf step\nlike running autogen.sh ?", "author": "jason.vas.dias@gmail.com", "is_private": false, "id": 5416056, "attachment_id": null, "creation_time": "2011-04-18T17:17:22Z", "tags": [], "bug_id": 648701}, {"id": 5416118, "time": "2011-04-18T17:31:12Z", "author": "jason.vas.dias@gmail.com", "count": 49, "is_private": false, "text": "The way distro maintainer builds work is that they create some temporary\ndirectory ( eg. /var/rpm/build/XXXXXX-$rpm_version-$rpm_release ) ,\nunpack the source to a SOURCE directory ( eg. /var/rpm/src/XXXXXX/ ) ,\nand run $SRCDIR/configure - ( I know a bit about this because I used\nto be a redhat package maintainer ) - having ensured that all package\ndependencies have been built and installed in a unique chroot directory\nfor each build. Wouldn't it be great if distro maintainers did not have\nto build the complete libxul et al @ 4 times over for:\n  o the /usr/lib/{libnspr,nspr,libnss3,nss3}/* directories\n  o firefox \n  o xulrunner\nand could depend on your build to generate all the ${PKG}-devel and /usr/lib/lib*.so links required for all the above packages in one build ?\n\nIt is very easy to incorporate a run of \"autogen.sh\" into a \"%prep\" RPM spec\nfile section so that the \"%build\" section can just do \"%configure\" .", "bug_id": 648701, "raw_text": "The way distro maintainer builds work is that they create some temporary\ndirectory ( eg. /var/rpm/build/XXXXXX-$rpm_version-$rpm_release ) ,\nunpack the source to a SOURCE directory ( eg. /var/rpm/src/XXXXXX/ ) ,\nand run $SRCDIR/configure - ( I know a bit about this because I used\nto be a redhat package maintainer ) - having ensured that all package\ndependencies have been built and installed in a unique chroot directory\nfor each build. Wouldn't it be great if distro maintainers did not have\nto build the complete libxul et al @ 4 times over for:\n  o the /usr/lib/{libnspr,nspr,libnss3,nss3}/* directories\n  o firefox \n  o xulrunner\nand could depend on your build to generate all the ${PKG}-devel and /usr/lib/lib*.so links required for all the above packages in one build ?\n\nIt is very easy to incorporate a run of \"autogen.sh\" into a \"%prep\" RPM spec\nfile section so that the \"%build\" section can just do \"%configure\" .", "creator": "jason.vas.dias@gmail.com", "creation_time": "2011-04-18T17:31:12Z", "tags": [], "attachment_id": null}, {"attachment_id": null, "tags": [], "creation_time": "2011-04-18T17:41:27Z", "creator": "paul.biggar@gmail.com", "raw_text": "(In reply to comment #48)\n> Hi -\n> RE: > We have a subtle change though, which is that when a user wants to do a \n>     > srcdir build, we dont want to support that. So instead we want to  \n>     > automatically convert it into an objdir build.\n> \n> The autogen.sh script already does that ;  but I'm going to add a flag \n> MOZ_BUILD_HERE=1  so that instead of the default $OBJDIR being \n> $SRC/`uname -m` it will be `pwd` IFF  [ \"$MOZ_BUILD_HERE\" -eq 1 ] && [ \"`pwd`\"\n> != \"$SRC\" ].\n> \n> RE: > we should - make helper scripts defer back to `make -f client.mk`\n> \n> Yes, that is what autogen.sh is doing,\n\nautogen.sh should do nothing but call autoconf213, and then call configure $@. Whatever other logic there is needs to be in configure.\n\n> but there has to be something\n> that actually does this with some sensible and user-configurable\n> default settings ; there needs to be some \"first command to enter\" -\n\nI dont follow.\n\n> I think running one shell script with no arguments is the only\n> safe method to expect average users to perform reliably .\n\nI agree. The expected behaviour is that the user only knows to call configure and make.\n \n\n> I think autogen.sh, if no .mozconfig exists and \"echo $* | grep '^--'\" is\n> empty, should refuse to proceed if no '--enable-application' argument is given,\n> and if it is, should load a default .mozconfig into $SRC/.mozconfig : \n>  case ${*//*--enable-application=/}\n>  browser*)\n\nWhy? It no longer needs a --enable-application, or a .mozconfig, and has sensible defaults for everything.\n\n\n> My understanding is that CURRENTLY, AS-IS , client.mk can't quite handle\n> relocating to a new OBJDIR and operating without ANY .mozconfig straight\n> out-of-the-box ;  why make .client.mk any more complicated when what\n> is required can be acheived with use of a well-know autoconf step\n> like running autogen.sh ?\n\nAll of our other logic is in client.mk or configure.in, including generating the objdir and operating without any .mozconfig. What doesn't work is the relocating. That needs to go to the same place as our existing logic.\n\nautogen.sh needs to do almost nothing, just run autoconf213 (and use the existing client.mk target for it, so that it doesnt need to duplicate the \"is it called autoconf213 or autoconf-2.13\" logic). configure can handle the objdir relocation (this is what doesnt work now). If we left that to autogen.sh, then when we started shipping configure, we'd lose the objdir relocation.", "bug_id": 648701, "text": "(In reply to comment #48)\n> Hi -\n> RE: > We have a subtle change though, which is that when a user wants to do a \n>     > srcdir build, we dont want to support that. So instead we want to  \n>     > automatically convert it into an objdir build.\n> \n> The autogen.sh script already does that ;  but I'm going to add a flag \n> MOZ_BUILD_HERE=1  so that instead of the default $OBJDIR being \n> $SRC/`uname -m` it will be `pwd` IFF  [ \"$MOZ_BUILD_HERE\" -eq 1 ] && [ \"`pwd`\"\n> != \"$SRC\" ].\n> \n> RE: > we should - make helper scripts defer back to `make -f client.mk`\n> \n> Yes, that is what autogen.sh is doing,\n\nautogen.sh should do nothing but call autoconf213, and then call configure $@. Whatever other logic there is needs to be in configure.\n\n> but there has to be something\n> that actually does this with some sensible and user-configurable\n> default settings ; there needs to be some \"first command to enter\" -\n\nI dont follow.\n\n> I think running one shell script with no arguments is the only\n> safe method to expect average users to perform reliably .\n\nI agree. The expected behaviour is that the user only knows to call configure and make.\n \n\n> I think autogen.sh, if no .mozconfig exists and \"echo $* | grep '^--'\" is\n> empty, should refuse to proceed if no '--enable-application' argument is given,\n> and if it is, should load a default .mozconfig into $SRC/.mozconfig : \n>  case ${*//*--enable-application=/}\n>  browser*)\n\nWhy? It no longer needs a --enable-application, or a .mozconfig, and has sensible defaults for everything.\n\n\n> My understanding is that CURRENTLY, AS-IS , client.mk can't quite handle\n> relocating to a new OBJDIR and operating without ANY .mozconfig straight\n> out-of-the-box ;  why make .client.mk any more complicated when what\n> is required can be acheived with use of a well-know autoconf step\n> like running autogen.sh ?\n\nAll of our other logic is in client.mk or configure.in, including generating the objdir and operating without any .mozconfig. What doesn't work is the relocating. That needs to go to the same place as our existing logic.\n\nautogen.sh needs to do almost nothing, just run autoconf213 (and use the existing client.mk target for it, so that it doesnt need to duplicate the \"is it called autoconf213 or autoconf-2.13\" logic). configure can handle the objdir relocation (this is what doesnt work now). If we left that to autogen.sh, then when we started shipping configure, we'd lose the objdir relocation.", "is_private": false, "count": 50, "time": "2011-04-18T17:41:27Z", "author": "paul.biggar@gmail.com", "id": 5416152}, {"text": "(In reply to comment #49)\n> Wouldn't it be great if distro maintainers did not have\n\nSure, but we should do one bug at a time :)", "creator": "paul.biggar@gmail.com", "raw_text": "(In reply to comment #49)\n> Wouldn't it be great if distro maintainers did not have\n\nSure, but we should do one bug at a time :)", "count": 51, "time": "2011-04-18T17:42:39Z", "bug_id": 648701, "attachment_id": null, "creation_time": "2011-04-18T17:42:39Z", "tags": [], "id": 5416160, "author": "paul.biggar@gmail.com", "is_private": false}, {"count": 52, "time": "2011-04-18T17:42:49Z", "creator": "ted@mielczarek.org", "raw_text": "AFAIK, the way distributions build Firefox nowadays is:\n1) Build XULRunner --with-system-{nspr,nss,...}, which builds a libxul+xulrunner, but not the other system libraries.\n2) Build Firefox --with-libxul-sdk to make it use the existing libxul from the XULRunner build, which just builds Firefox and not all the other bits.\n\nBut I don't really see how any of this is relevant to this bug. Normal users probably don't care about any of this.", "text": "AFAIK, the way distributions build Firefox nowadays is:\n1) Build XULRunner --with-system-{nspr,nss,...}, which builds a libxul+xulrunner, but not the other system libraries.\n2) Build Firefox --with-libxul-sdk to make it use the existing libxul from the XULRunner build, which just builds Firefox and not all the other bits.\n\nBut I don't really see how any of this is relevant to this bug. Normal users probably don't care about any of this.", "author": "ted@mielczarek.org", "is_private": false, "id": 5416161, "attachment_id": null, "tags": [], "creation_time": "2011-04-18T17:42:49Z", "bug_id": 648701}, {"id": 5416184, "author": "jason.vas.dias@gmail.com", "time": "2011-04-18T17:51:32Z", "count": 53, "is_private": false, "text": "One other thing: the great thing about all \"autogen.sh\" scripts is that they\ncause a \"config.cache\" to be created in the SOURCE directory; the \nconfigure arguments you supply to them are meant to be \"cached\" as\nthe defaults to use if new args are not supplied - so by providing\nan autogen.sh like the one I attached to this bug, that accepts\narguments and writes them to a .mozconfig file, you're doing\nexactly that, via the .mozconfig file ; and it works as expected;\nusers then don't have to enter ANY arguments to configure and the\nones given to \"autogen.sh\" will be used; but if they do give arguments,\nthey override the defaults, which is the job of your configure.in script.", "bug_id": 648701, "raw_text": "One other thing: the great thing about all \"autogen.sh\" scripts is that they\ncause a \"config.cache\" to be created in the SOURCE directory; the \nconfigure arguments you supply to them are meant to be \"cached\" as\nthe defaults to use if new args are not supplied - so by providing\nan autogen.sh like the one I attached to this bug, that accepts\narguments and writes them to a .mozconfig file, you're doing\nexactly that, via the .mozconfig file ; and it works as expected;\nusers then don't have to enter ANY arguments to configure and the\nones given to \"autogen.sh\" will be used; but if they do give arguments,\nthey override the defaults, which is the job of your configure.in script.", "creator": "jason.vas.dias@gmail.com", "creation_time": "2011-04-18T17:51:32Z", "tags": [], "attachment_id": null}, {"time": "2011-04-18T17:56:52Z", "count": 54, "raw_text": "RE:  Comment #50:  OK, so autogen.sh should be just:\n\n#/bin/bash\nexport SRCDIR=${0%/*}\nexport OBJDIR=`pwd`\npushd $SRCDIR && autoconf-2.13 && ${SRCDIR}/configure $* && popd\n\n??", "creator": "jason.vas.dias@gmail.com", "text": "RE:  Comment #50:  OK, so autogen.sh should be just:\n\n#/bin/bash\nexport SRCDIR=${0%/*}\nexport OBJDIR=`pwd`\npushd $SRCDIR && autoconf-2.13 && ${SRCDIR}/configure $* && popd\n\n??", "author": "jason.vas.dias@gmail.com", "is_private": false, "id": 5416207, "creation_time": "2011-04-18T17:56:52Z", "tags": [], "attachment_id": null, "bug_id": 648701}, {"text": "Nope, that doesn't work - it configures only in $SRCDIR, not $OBJDIR .", "bug_id": 648701, "creator": "jason.vas.dias@gmail.com", "raw_text": "Nope, that doesn't work - it configures only in $SRCDIR, not $OBJDIR .", "attachment_id": null, "tags": [], "creation_time": "2011-04-18T18:02:23Z", "id": 5416228, "count": 55, "author": "jason.vas.dias@gmail.com", "time": "2011-04-18T18:02:23Z", "is_private": false}, {"id": 5416243, "count": 56, "time": "2011-04-18T18:05:25Z", "author": "paul.biggar@gmail.com", "is_private": false, "text": "(In reply to comment #54)\n> RE:  Comment #50:  OK, so autogen.sh should be just:\n> \n> #/bin/bash\n> export SRCDIR=${0%/*}\n> export OBJDIR=`pwd`\n> pushd $SRCDIR && autoconf-2.13 && ${SRCDIR}/configure $* && popd\n> \n> ??\n\nI would use `make -f client.mk configure-files` instead of calling autoconf.\n\nAnd now I see why you wanted to create a .mozconfig file: so that `make -f client.mk configure` would get it's values from somewhere. Hmmm. Is it absolutely idiomatic that autogen.sh does the configure? It would be a lot simpler if not.", "bug_id": 648701, "creator": "paul.biggar@gmail.com", "raw_text": "(In reply to comment #54)\n> RE:  Comment #50:  OK, so autogen.sh should be just:\n> \n> #/bin/bash\n> export SRCDIR=${0%/*}\n> export OBJDIR=`pwd`\n> pushd $SRCDIR && autoconf-2.13 && ${SRCDIR}/configure $* && popd\n> \n> ??\n\nI would use `make -f client.mk configure-files` instead of calling autoconf.\n\nAnd now I see why you wanted to create a .mozconfig file: so that `make -f client.mk configure` would get it's values from somewhere. Hmmm. Is it absolutely idiomatic that autogen.sh does the configure? It would be a lot simpler if not.", "attachment_id": null, "creation_time": "2011-04-18T18:05:25Z", "tags": []}, {"text": "(In reply to comment #55)\n> Nope, that doesn't work - it configures only in $SRCDIR, not $OBJDIR .\n\nRight, because the logic to auto-relocate to OBJDIR doesnt exist yet, and needs to be added in this bug.", "creator": "paul.biggar@gmail.com", "raw_text": "(In reply to comment #55)\n> Nope, that doesn't work - it configures only in $SRCDIR, not $OBJDIR .\n\nRight, because the logic to auto-relocate to OBJDIR doesnt exist yet, and needs to be added in this bug.", "count": 57, "time": "2011-04-18T18:06:01Z", "bug_id": 648701, "attachment_id": null, "creation_time": "2011-04-18T18:06:01Z", "tags": [], "id": 5416248, "is_private": false, "author": "paul.biggar@gmail.com"}, {"count": 58, "time": "2011-04-18T19:21:43Z", "creator": "jason.vas.dias@gmail.com", "raw_text": "RE: Comment #52: \n > the way distributions build Firefox nowadays is:\n > 1) Build XULRunner --with-system-{nspr,nss,...}, which builds a\n > libxul+xulrunner, but not the other system libraries\n\nYes, but there are many packages involved here:\n - XULRunner + libnspr + libnss3 + firefox\neach of which many have both ${PKG} and ${PKG}-devel sub-packages,\nwith variants for each architecture.\n\nMost big packages such as xorg / glibc build their \"runtime\" libs -\nshipped in $PKG - in the same build as their $PKG-devel libs -\nbut the way mozilla does its install makes this very difficult.\nSo they probably do do complete separate builds to build each component -\nwhat a waste of time , when with a little tweaking, the mozilla build\ncould do it all for them.\n  \nAnd I think probably most \"users\" wouldn't go near any compiler and that\n\"users\" of the mozilla build system are PRIMARILY people like distro\nmaintainers - I just like maintaining my own distro.", "text": "RE: Comment #52: \n > the way distributions build Firefox nowadays is:\n > 1) Build XULRunner --with-system-{nspr,nss,...}, which builds a\n > libxul+xulrunner, but not the other system libraries\n\nYes, but there are many packages involved here:\n - XULRunner + libnspr + libnss3 + firefox\neach of which many have both ${PKG} and ${PKG}-devel sub-packages,\nwith variants for each architecture.\n\nMost big packages such as xorg / glibc build their \"runtime\" libs -\nshipped in $PKG - in the same build as their $PKG-devel libs -\nbut the way mozilla does its install makes this very difficult.\nSo they probably do do complete separate builds to build each component -\nwhat a waste of time , when with a little tweaking, the mozilla build\ncould do it all for them.\n  \nAnd I think probably most \"users\" wouldn't go near any compiler and that\n\"users\" of the mozilla build system are PRIMARILY people like distro\nmaintainers - I just like maintaining my own distro.", "is_private": false, "author": "jason.vas.dias@gmail.com", "id": 5416439, "attachment_id": null, "tags": [], "creation_time": "2011-04-18T19:21:43Z", "bug_id": 648701}, {"raw_text": "I disagree heartily with that last sentiment. We have lots of users who are developers who don't have experience developing with Mozilla. That does not mean they care one whit about system libraries vs. anything else, just that they want to build a working Firefox without much fuss. It may be well and good to make life easier for distro maintainers, but that is not this bug.\n\nIf I understand you correctly now, you're proposing that a simple Firefox build should produce results that are installable as if you separately built and installed NSPR, NSS, etc as system libraries. Is that correct? That may be a useful goal (but I would want to hear feedback from current distro packagers), but it is not this bug.", "creator": "ted@mielczarek.org", "tags": [], "creation_time": "2011-04-18T19:27:22Z", "attachment_id": null, "text": "I disagree heartily with that last sentiment. We have lots of users who are developers who don't have experience developing with Mozilla. That does not mean they care one whit about system libraries vs. anything else, just that they want to build a working Firefox without much fuss. It may be well and good to make life easier for distro maintainers, but that is not this bug.\n\nIf I understand you correctly now, you're proposing that a simple Firefox build should produce results that are installable as if you separately built and installed NSPR, NSS, etc as system libraries. Is that correct? That may be a useful goal (but I would want to hear feedback from current distro packagers), but it is not this bug.", "bug_id": 648701, "time": "2011-04-18T19:27:22Z", "author": "ted@mielczarek.org", "count": 59, "is_private": false, "id": 5416453}, {"attachment_id": null, "tags": [], "creation_time": "2011-04-18T19:29:54Z", "bug_id": 648701, "author": "jason.vas.dias@gmail.com", "is_private": false, "id": 5416456, "creator": "jason.vas.dias@gmail.com", "raw_text": "RE: Comment #55 - AHA ! NOW I GET IT !!\n\nYou want configure to enforce relocation into an $OBJDIR no matter what\narguments it is given or what $OBJDIR is set to , based on defaults \ncreated by client.mk .\n\nYes, but that is precisely what happens when you run the example autogen.sh\nand a .mozconfig is created for $OBJDIR -  why is more client.mk code required ?\n\nOnce you run the example autogen.sh (currently you must set $OBJDIR or $MOZ_OBJDIR, but this is easily rectified) ,  $SRC/config.cache and $SRC/.mozconfig are set up ONLY for building in $OBJDIR, and even\nif you 'cd $SRCDIR; make' the build will still take place in the\n$OBJDIR set during the autogen.sh run .\n\nSo why modify configure.in script / client.mk at all for this bug when it can\nbe handled entirely by something like autogen.sh ?", "text": "RE: Comment #55 - AHA ! NOW I GET IT !!\n\nYou want configure to enforce relocation into an $OBJDIR no matter what\narguments it is given or what $OBJDIR is set to , based on defaults \ncreated by client.mk .\n\nYes, but that is precisely what happens when you run the example autogen.sh\nand a .mozconfig is created for $OBJDIR -  why is more client.mk code required ?\n\nOnce you run the example autogen.sh (currently you must set $OBJDIR or $MOZ_OBJDIR, but this is easily rectified) ,  $SRC/config.cache and $SRC/.mozconfig are set up ONLY for building in $OBJDIR, and even\nif you 'cd $SRCDIR; make' the build will still take place in the\n$OBJDIR set during the autogen.sh run .\n\nSo why modify configure.in script / client.mk at all for this bug when it can\nbe handled entirely by something like autogen.sh ?", "count": 60, "time": "2011-04-18T19:29:54Z"}, {"id": 5416478, "count": 61, "author": "jason.vas.dias@gmail.com", "time": "2011-04-18T19:36:19Z", "is_private": false, "text": "Hi Ted -\n\nRE: Comment #59 :\n> I disagree heartily with that last sentiment. We have lots of users who are\n> developers who don't have experience developing with Mozilla.\n\nYes, but everyone would appreciate it if builds completed more quickly and\nused less disk space ?  And anyone who builds a package from source and\ninstalls it is by definition a \"distro maintainer\", whether they realize it\nor want to be one or not - that is the problem - mozilla installs really\nneed to maintain their distros more efficiently, and I think fixing this bug\nwould be part of doing so .\n\nBut yes, it is a digression from the specifics of this bug report.\n\nWhat would you recommend ?  autoconf.sh or configure.in / client.mk script ?", "bug_id": 648701, "creator": "jason.vas.dias@gmail.com", "raw_text": "Hi Ted -\n\nRE: Comment #59 :\n> I disagree heartily with that last sentiment. We have lots of users who are\n> developers who don't have experience developing with Mozilla.\n\nYes, but everyone would appreciate it if builds completed more quickly and\nused less disk space ?  And anyone who builds a package from source and\ninstalls it is by definition a \"distro maintainer\", whether they realize it\nor want to be one or not - that is the problem - mozilla installs really\nneed to maintain their distros more efficiently, and I think fixing this bug\nwould be part of doing so .\n\nBut yes, it is a digression from the specifics of this bug report.\n\nWhat would you recommend ?  autoconf.sh or configure.in / client.mk script ?", "attachment_id": null, "tags": [], "creation_time": "2011-04-18T19:36:19Z"}, {"is_private": false, "time": "2011-04-18T19:39:14Z", "author": "jason.vas.dias@gmail.com", "count": 62, "id": 5416481, "creation_time": "2011-04-18T19:39:14Z", "tags": [], "attachment_id": null, "raw_text": "sorry: last line should read: autogen.sh or configure.in / client.mk ?\n\nI've satisfied the needs of my build system with autogen.sh - maybe\nsomeone else could put in needed changes to configure.in for this\nbug, because I guess I still don't understand at the moment exactly what\nthese should be ?", "creator": "jason.vas.dias@gmail.com", "bug_id": 648701, "text": "sorry: last line should read: autogen.sh or configure.in / client.mk ?\n\nI've satisfied the needs of my build system with autogen.sh - maybe\nsomeone else could put in needed changes to configure.in for this\nbug, because I guess I still don't understand at the moment exactly what\nthese should be ?"}, {"text": "Created attachment 526815\nSetup default OBJDIR , potentially default .mozconfig from arguments & make -f client.mk\n\nThis version now honors a MOZ_BUILD_HERE=1 setting, so if $OBJDIR is NOT set,\n$OBJDIR and $MOZ_OBJDIR are set to `pwd` :\n\n $ mkdir /tmp/my_build; cd /tmp/my_build; \n $ MOZ_BUILD_HERE=1 $MOZILLA_SRC/autogen.sh\n\nOTHERWISE, if NO OBJDIR or $MOZ_OBJDIR setting exists, and NO $MOZCONFIG exists,\nthen creates a ${SRC}/.mozconfig file with 'MOZ_OBJDIR='$OBJDIR which is set to $MOZILLA_SRC/`uname -m` if nothing else is specified.", "raw_text": "This version now honors a MOZ_BUILD_HERE=1 setting, so if $OBJDIR is NOT set,\n$OBJDIR and $MOZ_OBJDIR are set to `pwd` :\n\n $ mkdir /tmp/my_build; cd /tmp/my_build; \n $ MOZ_BUILD_HERE=1 $MOZILLA_SRC/autogen.sh\n\nOTHERWISE, if NO OBJDIR or $MOZ_OBJDIR setting exists, and NO $MOZCONFIG exists,\nthen creates a ${SRC}/.mozconfig file with 'MOZ_OBJDIR='$OBJDIR which is set to $MOZILLA_SRC/`uname -m` if nothing else is specified.", "creator": "jason.vas.dias@gmail.com", "time": "2011-04-18T20:50:42Z", "count": 63, "bug_id": 648701, "creation_time": "2011-04-18T20:50:42Z", "tags": [], "attachment_id": 526815, "id": 5416708, "author": "jason.vas.dias@gmail.com", "is_private": false}, {"count": 64, "time": "2011-04-18T21:06:27Z", "text": "$ MOZ_BUILD_HERE=1 bash -xf ~/src/autogen.sh                                                           \n+ ME=/home/firefox/src/autogen.sh                                                                      \n+ ME=autogen.sh                                                                                        \n+ SRC=/home/firefox/src/                                                                               \n++ cd /home/firefox/src/                                                                               \n++ pwd                                                                                                 \n+ SRC=/home/firefox/src                                                                                \n++ tr -d '\\n'                                                                                          \n++ pwd                                                                                                 \n+ XDIR=/tmp/ff_build                                                                                   \n+ cd /home/firefox/src                                                                                 \n+ HOME=/home/firefox                                                                                   \n++ which autoconf-2.13                                                                                 \n+ AUTOCONF213=/usr/bin/autoconf-2.13                                                                   \n+ '[' '!' -x /usr/bin/autoconf-2.13 ']'                                                                \n+ egrep -q '2\\.13'\n+ /usr/bin/autoconf-2.13 --version\n+ MOZCONFIG=/home/firefox/src/.mozconfig\n+ '[' x/tmp/ff_build = x ']'\n+ MOZ_OBJDIR=/tmp/ff_build\n+ export MOZ_OBJDIR\n+ '[' '!' -d /tmp/ff_build ']'\n+ '[' -r /home/firefox/src/.mozconfig ']'\n+ MOZCONFIG=/home/firefox/.mozconfig\n+ '[' -r /home/firefox/.mozconfig ']'\n+ MOZCONFIG=/home/firefox/src/.mozconfig\n+ echo 'Creating default .mozconfig: /home/firefox/src/.mozconfig'\nCreating default .mozconfig: /home/firefox/src/.mozconfig\n++ to_mozconfig\n+++ tr ' ' '\\n'\n+++ sed 's,^,ac_add_options ,;s/$/\\\\n/'\n+++ grep '^--'\n+++ echo\n++ echo\n+ echo -e 'MOZ_OBJDIR=/tmp/ff_build\\n' 'AUTOCONF=/usr/bin/autoconf-2.13\\n' ''\n+ export MOZCONFIG\n+ make -f client.mk\nmake[1]: Entering directory `/home/firefox/src'\ncd /tmp/ff_build\n/home/firefox/src/configure\ncreating cache ./config.cache\nchecking host system type... x86_64-unknown-linux-gnu\nchecking target system type... x86_64-unknown-linux-gnu\nchecking build system type... x86_64-unknown-linux-gnu", "creator": "jason.vas.dias@gmail.com", "raw_text": "$ MOZ_BUILD_HERE=1 bash -xf ~/src/autogen.sh                                                           \n+ ME=/home/firefox/src/autogen.sh                                                                      \n+ ME=autogen.sh                                                                                        \n+ SRC=/home/firefox/src/                                                                               \n++ cd /home/firefox/src/                                                                               \n++ pwd                                                                                                 \n+ SRC=/home/firefox/src                                                                                \n++ tr -d '\\n'                                                                                          \n++ pwd                                                                                                 \n+ XDIR=/tmp/ff_build                                                                                   \n+ cd /home/firefox/src                                                                                 \n+ HOME=/home/firefox                                                                                   \n++ which autoconf-2.13                                                                                 \n+ AUTOCONF213=/usr/bin/autoconf-2.13                                                                   \n+ '[' '!' -x /usr/bin/autoconf-2.13 ']'                                                                \n+ egrep -q '2\\.13'\n+ /usr/bin/autoconf-2.13 --version\n+ MOZCONFIG=/home/firefox/src/.mozconfig\n+ '[' x/tmp/ff_build = x ']'\n+ MOZ_OBJDIR=/tmp/ff_build\n+ export MOZ_OBJDIR\n+ '[' '!' -d /tmp/ff_build ']'\n+ '[' -r /home/firefox/src/.mozconfig ']'\n+ MOZCONFIG=/home/firefox/.mozconfig\n+ '[' -r /home/firefox/.mozconfig ']'\n+ MOZCONFIG=/home/firefox/src/.mozconfig\n+ echo 'Creating default .mozconfig: /home/firefox/src/.mozconfig'\nCreating default .mozconfig: /home/firefox/src/.mozconfig\n++ to_mozconfig\n+++ tr ' ' '\\n'\n+++ sed 's,^,ac_add_options ,;s/$/\\\\n/'\n+++ grep '^--'\n+++ echo\n++ echo\n+ echo -e 'MOZ_OBJDIR=/tmp/ff_build\\n' 'AUTOCONF=/usr/bin/autoconf-2.13\\n' ''\n+ export MOZCONFIG\n+ make -f client.mk\nmake[1]: Entering directory `/home/firefox/src'\ncd /tmp/ff_build\n/home/firefox/src/configure\ncreating cache ./config.cache\nchecking host system type... x86_64-unknown-linux-gnu\nchecking target system type... x86_64-unknown-linux-gnu\nchecking build system type... x86_64-unknown-linux-gnu", "id": 5416747, "is_private": false, "author": "jason.vas.dias@gmail.com", "bug_id": 648701, "attachment_id": null, "creation_time": "2011-04-18T21:06:27Z", "tags": []}, {"is_private": false, "time": "2011-04-18T21:12:46Z", "author": "jason.vas.dias@gmail.com", "count": 65, "id": 5416775, "tags": [], "creation_time": "2011-04-18T21:12:46Z", "attachment_id": null, "raw_text": "I'm now working exclusively on bug #650756 .", "creator": "jason.vas.dias@gmail.com", "bug_id": 648701, "text": "I'm now working exclusively on bug #650756 ."}, {"time": "2011-04-26T14:56:56Z", "count": 66, "raw_text": "OK, well I guess bug #650756 is a total non-starter from mozilla's perspective -\nI'll keep this as \"my private mozilla installer patch\" .\n\nI'm still happy to work on this bug, which, AFAICS , is:\n\n1. The command:\n\n   $ mkdir $OBJDIR; export OBJDIR; 'make -f client.mk $OBJDIR/configure'\n    \n   should ONLY run autoconf-2.13 to create the $OBJDIR/configure script,\n   which should then require NO $MOZCONFIG or $HOME/.mozconfig, but\n   should handle default argument setting and any default .mozconfig\n   creation itself.\n\n2. Provide an autogen.sh which does the above \n   'make -f client.mk ${OBJDIR:-`./new_objdir.sh`}/configure'\n   command.\n\nI can do this now if you want.", "creator": "jason.vas.dias@gmail.com", "text": "OK, well I guess bug #650756 is a total non-starter from mozilla's perspective -\nI'll keep this as \"my private mozilla installer patch\" .\n\nI'm still happy to work on this bug, which, AFAICS , is:\n\n1. The command:\n\n   $ mkdir $OBJDIR; export OBJDIR; 'make -f client.mk $OBJDIR/configure'\n    \n   should ONLY run autoconf-2.13 to create the $OBJDIR/configure script,\n   which should then require NO $MOZCONFIG or $HOME/.mozconfig, but\n   should handle default argument setting and any default .mozconfig\n   creation itself.\n\n2. Provide an autogen.sh which does the above \n   'make -f client.mk ${OBJDIR:-`./new_objdir.sh`}/configure'\n   command.\n\nI can do this now if you want.", "author": "jason.vas.dias@gmail.com", "is_private": false, "id": 5431782, "tags": [], "creation_time": "2011-04-26T14:56:56Z", "attachment_id": null, "bug_id": 648701}, {"id": 5431828, "time": "2011-04-26T15:19:36Z", "author": "benjamin@smedbergs.us", "count": 67, "is_private": false, "text": "I don't think we need that complexity: as noted earlier, we should just:\n\n* check in configure, add hg hooks to make sure it is always the \"right one\"\n* if you try to configure a srcdir build, use a default objdir\n\nThen we don't need/shouldn't have client.mk at all, except for the tinderboxes which continue to use it. (I haven't used client.mk in years.)", "bug_id": 648701, "raw_text": "I don't think we need that complexity: as noted earlier, we should just:\n\n* check in configure, add hg hooks to make sure it is always the \"right one\"\n* if you try to configure a srcdir build, use a default objdir\n\nThen we don't need/shouldn't have client.mk at all, except for the tinderboxes which continue to use it. (I haven't used client.mk in years.)", "creator": "benjamin@smedbergs.us", "creation_time": "2011-04-26T15:19:36Z", "tags": [], "attachment_id": null}, {"is_private": false, "count": 68, "time": "2011-04-26T23:43:23Z", "author": "ted@mielczarek.org", "id": 5433567, "attachment_id": null, "tags": [], "creation_time": "2011-04-26T23:43:23Z", "creator": "ted@mielczarek.org", "raw_text": "We'll continue to use client.mk since it handles our Universal Mac builds and PGO builds, but we could certainly fix those in other ways and deprecate it in the future.", "bug_id": 648701, "text": "We'll continue to use client.mk since it handles our Universal Mac builds and PGO builds, but we could certainly fix those in other ways and deprecate it in the future."}, {"id": 5433692, "count": 69, "author": "jason.vas.dias@gmail.com", "time": "2011-04-27T00:39:22Z", "is_private": false, "text": "So do you want me to have a look at testing / developing client.mk + configure.in\npatch for this or not ? \nNOTE: please have a look at bug #652807 - I think many configure affecting\nenvironment variables, such as $CXX and $OBJDIR, are NOT being correctly\ninherited by the make environment, which is why just doing :\n   $ autoconf-2.13 && ( export OBJDIR=$my_objdir; ./configure )\ndoes NOT pick up or use $OBJDIR .", "bug_id": 648701, "creator": "jason.vas.dias@gmail.com", "raw_text": "So do you want me to have a look at testing / developing client.mk + configure.in\npatch for this or not ? \nNOTE: please have a look at bug #652807 - I think many configure affecting\nenvironment variables, such as $CXX and $OBJDIR, are NOT being correctly\ninherited by the make environment, which is why just doing :\n   $ autoconf-2.13 && ( export OBJDIR=$my_objdir; ./configure )\ndoes NOT pick up or use $OBJDIR .", "attachment_id": null, "tags": [], "creation_time": "2011-04-27T00:39:22Z"}, {"id": 5453886, "is_private": false, "count": 70, "time": "2011-05-06T18:03:53Z", "author": "ted@mielczarek.org", "bug_id": 648701, "text": "Er, OBJDIR is not a variable that configure uses currently.\n\nI think we should do what bsmedberg suggests in comment 67. We've had a bug on committing the generated configure file for a while now, we should just do it. The desired build process should just be:\n\"./configure && make\"\n\nThe only tricky bit is that we would like configure to create an objdir instead of configuring in the srcdir, which means that we need to do something to cause \"make\" in the srcdir to work.", "attachment_id": null, "tags": [], "creation_time": "2011-05-06T18:03:53Z", "creator": "ted@mielczarek.org", "raw_text": "Er, OBJDIR is not a variable that configure uses currently.\n\nI think we should do what bsmedberg suggests in comment 67. We've had a bug on committing the generated configure file for a while now, we should just do it. The desired build process should just be:\n\"./configure && make\"\n\nThe only tricky bit is that we would like configure to create an objdir instead of configuring in the srcdir, which means that we need to do something to cause \"make\" in the srcdir to work."}, {"time": "2011-05-06T18:04:39Z", "count": 71, "raw_text": "Thanks for looking at this, but I don't think this is the approach we want.", "creator": "ted@mielczarek.org", "text": "Comment on attachment 526815\nSetup default OBJDIR , potentially default .mozconfig from arguments & make -f client.mk\n\nThanks for looking at this, but I don't think this is the approach we want.", "is_private": false, "author": "ted@mielczarek.org", "id": 5453888, "creation_time": "2011-05-06T18:04:39Z", "tags": [], "attachment_id": 526815, "bug_id": 648701}]}}, "comments": {}}