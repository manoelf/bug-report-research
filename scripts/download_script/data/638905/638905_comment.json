{"bugs": {"638905": {"comments": [{"id": 5322583, "is_private": false, "author": "brian@briansmith.org", "bug_id": 638905, "attachment_id": null, "creation_time": "2011-03-04T20:28:07Z", "tags": [], "count": 0, "time": "2011-03-04T20:28:07Z", "text": "Every client that accesses/modifies records for a given sync account has the user's password and their sync key. Right now, only the password is used to authenticate the user. The sync key could be used to additionally authenticate the user. That way, an attacker that knows the user's username/password would still not be able to add/modifiy/delete records for that user's account, without also stealing the sync key. Also, this might help in detecting sync key related errors (e.g. typos in entering a sync key manually).\n\nOne possible approach (not thoroughly analyzed):\n\nFrom the Sync key, derive (using HKDF) an additional \"proof of identity\" (PID) HMAC key (in addition to the master encryption and HMAC keys). This key must be shared with the server whenever the sync key changes. Each request that adds/modifies/deletes records on the sync server must signed with the POD key. The server will verify the signature using its copy of the HMAC key. If the signature doesn't match, then the request fails.", "creator": "brian@briansmith.org", "raw_text": "Every client that accesses/modifies records for a given sync account has the user's password and their sync key. Right now, only the password is used to authenticate the user. The sync key could be used to additionally authenticate the user. That way, an attacker that knows the user's username/password would still not be able to add/modifiy/delete records for that user's account, without also stealing the sync key. Also, this might help in detecting sync key related errors (e.g. typos in entering a sync key manually).\n\nOne possible approach (not thoroughly analyzed):\n\nFrom the Sync key, derive (using HKDF) an additional \"proof of identity\" (PID) HMAC key (in addition to the master encryption and HMAC keys). This key must be shared with the server whenever the sync key changes. Each request that adds/modifies/deletes records on the sync server must signed with the POD key. The server will verify the signature using its copy of the HMAC key. If the signature doesn't match, then the request fails."}, {"text": "So, offhand, this would break the account portal, which allows users to purge their sync data (which is useful in a future world where Sync is just one of many services using this user/pass).  Also, this would make \"reset sync key\" impossible, if _all_ delete requests much have this PID.\n\nI don't really think this really adds security, though some of the ancilliary benefits are nice.", "bug_id": 638905, "creator": "mconnor@mozilla.com", "raw_text": "So, offhand, this would break the account portal, which allows users to purge their sync data (which is useful in a future world where Sync is just one of many services using this user/pass).  Also, this would make \"reset sync key\" impossible, if _all_ delete requests much have this PID.\n\nI don't really think this really adds security, though some of the ancilliary benefits are nice.", "attachment_id": null, "creation_time": "2011-03-07T23:09:43Z", "tags": [], "id": 5328585, "count": 1, "time": "2011-03-07T23:09:43Z", "author": "mconnor@mozilla.com", "is_private": false}, {"tags": [], "creation_time": "2011-03-08T01:59:44Z", "attachment_id": null, "bug_id": 638905, "author": "brian@briansmith.org", "is_private": false, "id": 5329093, "raw_text": "I think it is OK to handle deletion of data differently than a regular delete and/or require the PID only for add/modify operations. Clients already must operate under the assumption that they might not have received all the records that other clients have uploaded because the server can lose/delete any records it wants without any client noticing.", "creator": "brian@briansmith.org", "text": "I think it is OK to handle deletion of data differently than a regular delete and/or require the PID only for add/modify operations. Clients already must operate under the assumption that they might not have received all the records that other clients have uploaded because the server can lose/delete any records it wants without any client noticing.", "time": "2011-03-08T01:59:44Z", "count": 2}, {"time": "2011-03-08T16:19:29Z", "count": 3, "text": "So, I don't know if I'd require this on GETs and the like, which makes this not really an \"auth\" solution.\n\nHowever, I think this would be a really useful feature, because it would be pretty good for eliminating race conditions around key changes/storage version changes.  Basically, as soon as the key changes, all other clients are locked out from writing to the server (I'd do this even before we did deletes) until they have the new key.\n\nBasically:\n* prevents cases of content from different keys being present on the server\n* not a security feature, but a data integrity feature (all data on the server should be obtainable from the same key)\n* doesn't prevent \"dataloss\" from an attacker trying to nuke your stuff, but as Sync isn't considered a backup, that's ok.", "raw_text": "So, I don't know if I'd require this on GETs and the like, which makes this not really an \"auth\" solution.\n\nHowever, I think this would be a really useful feature, because it would be pretty good for eliminating race conditions around key changes/storage version changes.  Basically, as soon as the key changes, all other clients are locked out from writing to the server (I'd do this even before we did deletes) until they have the new key.\n\nBasically:\n* prevents cases of content from different keys being present on the server\n* not a security feature, but a data integrity feature (all data on the server should be obtainable from the same key)\n* doesn't prevent \"dataloss\" from an attacker trying to nuke your stuff, but as Sync isn't considered a backup, that's ok.", "creator": "mconnor@mozilla.com", "id": 5330249, "author": "mconnor@mozilla.com", "is_private": false, "bug_id": 638905, "creation_time": "2011-03-08T16:19:29Z", "tags": [], "attachment_id": null}, {"id": 6936433, "author": "bugzilla@twinql.com", "is_private": false, "bug_id": 638905, "attachment_id": null, "tags": [], "creation_time": "2012-12-21T07:47:32Z", "count": 4, "time": "2012-12-21T07:47:32Z", "text": "I think we're going to end up in a place where even clients don't have your raw password, and we'll be doing something a little more complex with keys. nalexander, take a look.", "creator": "bugzilla@twinql.com", "raw_text": "I think we're going to end up in a place where even clients don't have your raw password, and we'll be doing something a little more complex with keys. nalexander, take a look."}, {"is_private": false, "author": "nalexander@mozilla.com", "time": "2012-12-21T18:49:30Z", "count": 5, "id": 6938250, "tags": [], "creation_time": "2012-12-21T18:49:30Z", "attachment_id": null, "raw_text": "(In reply to Richard Newman [:rnewman] from comment #4)\n> I think we're going to end up in a place where even clients don't have your\n> raw password, and we'll be doing something a little more complex with keys.\n> nalexander, take a look.\n\nYes, that's correct.  The scheme we're pondering would have clients not have your PW except for a short set up window.\n\nClients would use your PW to get long-term tokens to access different services (like Sync).  (This is very much work in progress, but maybe something like http://people.mozilla.com/~nalexander/fxa/fxa-tokenflows1.pdf).\n\nClients would also use your PW to decrypt a full-strength \"User key\" stored on remote (Mozilla) servers; see https://wiki.mozilla.org/BrowserID_Key_Wrapping.  The Sync key itself would be stored on the Sync server, wrapped in this User key.\n\nComing to two-factor auth: an attacker that knows your password has access to all your sync data -- this is the scenario we are designing for.  We think it will be possible to support strong two factor auth by giving advanced users tools to manage their full-strength \"User key\" themselves, without ever storing them remotely or wrapping them in less than full-strength keys.  With a user managed \"User key\", an attacker needs your password to authenticate to the server, and then your \"User key\" to access your data.  We are still considering whether password alone is enough to delete your data and the multitude of lost password/lost user key/lost sync key possibilities.\n\nFeedback welcome; this is hardly a full account of things we've been thinking about!", "creator": "nalexander@mozilla.com", "bug_id": 638905, "text": "(In reply to Richard Newman [:rnewman] from comment #4)\n> I think we're going to end up in a place where even clients don't have your\n> raw password, and we'll be doing something a little more complex with keys.\n> nalexander, take a look.\n\nYes, that's correct.  The scheme we're pondering would have clients not have your PW except for a short set up window.\n\nClients would use your PW to get long-term tokens to access different services (like Sync).  (This is very much work in progress, but maybe something like http://people.mozilla.com/~nalexander/fxa/fxa-tokenflows1.pdf).\n\nClients would also use your PW to decrypt a full-strength \"User key\" stored on remote (Mozilla) servers; see https://wiki.mozilla.org/BrowserID_Key_Wrapping.  The Sync key itself would be stored on the Sync server, wrapped in this User key.\n\nComing to two-factor auth: an attacker that knows your password has access to all your sync data -- this is the scenario we are designing for.  We think it will be possible to support strong two factor auth by giving advanced users tools to manage their full-strength \"User key\" themselves, without ever storing them remotely or wrapping them in less than full-strength keys.  With a user managed \"User key\", an attacker needs your password to authenticate to the server, and then your \"User key\" to access your data.  We are still considering whether password alone is enough to delete your data and the multitude of lost password/lost user key/lost sync key possibilities.\n\nFeedback welcome; this is hardly a full account of things we've been thinking about!"}]}}, "comments": {}}