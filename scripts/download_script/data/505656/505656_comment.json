{"bugs": {"505656": {"comments": [{"count": 0, "attachment_id": null, "creator": "aaronecay@gmail.com", "raw_text": "User-Agent:       Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.5; en-US; rv:1.9.2a1pre) Gecko/20090721 Minefield/3.6a1pre\nBuild Identifier: Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.5; en-US; rv:1.9.2a1pre) Gecko/20090721 Minefield/3.6a1pre\n\nThe bookmarks backup JSON file created daily in the profile directory is not valid JSON.  It contains a trailing comma, which makes JSON parsers barf, including http://code.google.com/p/json-framework/ (Mac OS X/Cocoa) and http://www.jsonlint.com/ (Web).  A similar bug was reported for the built-in JSON serialization facility: https://bugzilla.mozilla.org/show_bug.cgi?id=426718 .  That bug is no longer reproducible (i.e. fixed?) on the latest nightly.  However the bookmarks backup code still uses manual JSON generation.  \n\nThe problem function appears to be serializeNodeAsJSONToOutputStream at mozilla/toolkit/components/places/src/utils.js:1490 .  I believe that the offending comma is written by line 1626 of that file.\n\nReproducible: Always\n\nSteps to Reproduce:\n1. Create a new profile\n2. Remove all bookmarks via the bookmark manager\n3. Choose \"Backup\" from the bookmark manager toolbar\nActual Results:  \nAn invalid JSON file is produced.  I will attempt (as I've never used bugzilla before) to attache this file to this report\n\nExpected Results:  \nA valid JSON file is produced.", "is_private": false, "creation_time": "2009-07-22T04:17:43Z", "author": "aaronecay@gmail.com", "id": 4209555, "text": "User-Agent:       Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.5; en-US; rv:1.9.2a1pre) Gecko/20090721 Minefield/3.6a1pre\nBuild Identifier: Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.5; en-US; rv:1.9.2a1pre) Gecko/20090721 Minefield/3.6a1pre\n\nThe bookmarks backup JSON file created daily in the profile directory is not valid JSON.  It contains a trailing comma, which makes JSON parsers barf, including http://code.google.com/p/json-framework/ (Mac OS X/Cocoa) and http://www.jsonlint.com/ (Web).  A similar bug was reported for the built-in JSON serialization facility: https://bugzilla.mozilla.org/show_bug.cgi?id=426718 .  That bug is no longer reproducible (i.e. fixed?) on the latest nightly.  However the bookmarks backup code still uses manual JSON generation.  \n\nThe problem function appears to be serializeNodeAsJSONToOutputStream at mozilla/toolkit/components/places/src/utils.js:1490 .  I believe that the offending comma is written by line 1626 of that file.\n\nReproducible: Always\n\nSteps to Reproduce:\n1. Create a new profile\n2. Remove all bookmarks via the bookmark manager\n3. Choose \"Backup\" from the bookmark manager toolbar\nActual Results:  \nAn invalid JSON file is produced.  I will attempt (as I've never used bugzilla before) to attache this file to this report\n\nExpected Results:  \nA valid JSON file is produced.", "time": "2009-07-22T04:17:43Z", "tags": [], "bug_id": 505656}, {"author": "aaronecay@gmail.com", "creation_time": "2009-07-22T04:19:42Z", "is_private": false, "attachment_id": 389864, "count": 1, "bug_id": 505656, "tags": [], "time": "2009-07-22T04:19:42Z", "id": 4209560, "text": "Created attachment 389864\nThe invalid JSON bookmarks backup file\n\nNote the comma which is the third-from-last character in the file.", "raw_text": "Note the comma which is the third-from-last character in the file.", "creator": "aaronecay@gmail.com"}, {"raw_text": "Presumably the tail of the children are all in aExcludeItems.", "creator": "john.p.baker@bristol.ac.uk", "bug_id": 505656, "time": "2009-07-22T09:19:54Z", "tags": [], "text": "Presumably the tail of the children are all in aExcludeItems.", "id": 4209893, "creation_time": "2009-07-22T09:19:54Z", "author": "john.p.baker@bristol.ac.uk", "is_private": false, "count": 2, "attachment_id": null}, {"attachment_id": null, "count": 3, "is_private": false, "author": "gerv@mozilla.org", "creation_time": "2009-11-26T14:44:56Z", "creator": "gerv@mozilla.org", "raw_text": "Bug 451915 - move Firefox/Places bugs to Firefox/Bookmarks and History. Remove all bugspam from this move by filtering for the string \"places-to-b-and-h\".\n\nIn Thunderbird 3.0b, you do that as follows:\nTools | Message Filters\nMake sure the correct account is selected. Click \"New\"\nConditions: Body   contains   places-to-b-and-h\nChange the action to \"Delete Message\".\nSelect \"Manually Run\" from the dropdown at the top.\nClick OK.\n\nSelect the filter in the list, make sure \"Inbox\" is selected at the bottom, and click \"Run Now\". This should delete all the bugspam. You can then delete the filter.\n\nGerv", "text": "Bug 451915 - move Firefox/Places bugs to Firefox/Bookmarks and History. Remove all bugspam from this move by filtering for the string \"places-to-b-and-h\".\n\nIn Thunderbird 3.0b, you do that as follows:\nTools | Message Filters\nMake sure the correct account is selected. Click \"New\"\nConditions: Body   contains   places-to-b-and-h\nChange the action to \"Delete Message\".\nSelect \"Manually Run\" from the dropdown at the top.\nClick OK.\n\nSelect the filter in the list, make sure \"Inbox\" is selected at the bottom, and click \"Run Now\". This should delete all the bugspam. You can then delete the filter.\n\nGerv", "id": 4422604, "tags": [], "time": "2009-11-26T14:44:56Z", "bug_id": 505656}, {"attachment_id": null, "count": 4, "creator": "gtdev@spearhead.de", "is_private": false, "raw_text": "This is still an issue in Firefox 3.5.5. Exporting my bookmarks will result in a JSON stream that ends in \"}]},]}\", which is clearly invalid since JSON does not permit trailing commas in arrays.", "author": "gtdev@spearhead.de", "creation_time": "2009-12-07T10:59:19Z", "text": "This is still an issue in Firefox 3.5.5. Exporting my bookmarks will result in a JSON stream that ends in \"}]},]}\", which is clearly invalid since JSON does not permit trailing commas in arrays.", "id": 4438837, "tags": [], "time": "2009-12-07T10:59:19Z", "bug_id": 505656}, {"author": "jwalden@mit.edu", "creation_time": "2010-05-10T21:47:13Z", "is_private": false, "raw_text": "I'm looking to fix this error in JSON.parse, but this bug prevents that right now.", "creator": "jwalden@mit.edu", "attachment_id": null, "count": 5, "bug_id": 505656, "tags": [], "time": "2010-05-10T21:47:13Z", "text": "I'm looking to fix this error in JSON.parse, but this bug prevents that right now.", "id": 4686407}, {"bug_id": 505656, "tags": [], "time": "2010-05-10T22:42:54Z", "text": "This, once fixed, should be backported to 1.9.2, since otherwise when trunk bug 564621 will be fixed and users will upgrade, they will be without a valid backup. For the same reason this should probably land on trunk at least a week before bug 564621.", "id": 4686517, "author": "mak@mozilla.com", "creation_time": "2010-05-10T22:42:54Z", "is_private": false, "raw_text": "This, once fixed, should be backported to 1.9.2, since otherwise when trunk bug 564621 will be fixed and users will upgrade, they will be without a valid backup. For the same reason this should probably land on trunk at least a week before bug 564621.", "creator": "mak@mozilla.com", "attachment_id": null, "count": 6}, {"creator": "jwalden@mit.edu", "raw_text": "Tentatively taking, have written a strawman patch and pushed to try, will see how that goes...", "text": "Tentatively taking, have written a strawman patch and pushed to try, will see how that goes...", "id": 4686595, "tags": [], "time": "2010-05-10T23:14:40Z", "bug_id": 505656, "attachment_id": null, "count": 7, "is_private": false, "author": "jwalden@mit.edu", "creation_time": "2010-05-10T23:14:40Z"}, {"is_private": false, "author": "jwalden@mit.edu", "creation_time": "2010-05-11T01:55:30Z", "attachment_id": 444542, "count": 8, "raw_text": "This doesn't seem to fail any tinderbox tests, maybe, but this is against TM, which currently has some unrelated test bustage, so it's hard to say whether it's all good or not:\n\nhttp://tinderbox.mozilla.org/showlog.cgi?log=MozillaTry/1273533148.1273540606.12415.gz&fulltext=1\n\nOnce that bustage gets fixed I'll get back to this.  Also this may need some migration-adding code (or maybe JSON-strictifying patch needs it), haven't considered that yet.", "creator": "jwalden@mit.edu", "bug_id": 505656, "text": "Created attachment 444542\nProto-patch\n\nThis doesn't seem to fail any tinderbox tests, maybe, but this is against TM, which currently has some unrelated test bustage, so it's hard to say whether it's all good or not:\n\nhttp://tinderbox.mozilla.org/showlog.cgi?log=MozillaTry/1273533148.1273540606.12415.gz&fulltext=1\n\nOnce that bustage gets fixed I'll get back to this.  Also this may need some migration-adding code (or maybe JSON-strictifying patch needs it), haven't considered that yet.", "id": 4686837, "tags": [], "time": "2010-05-11T01:55:30Z"}, {"creator": "jwalden@mit.edu", "count": 9, "attachment_id": 444542, "creation_time": "2010-05-13T20:30:44Z", "author": "jwalden@mit.edu", "raw_text": "Try has nothing but love for this.\n\nI think this can go in without needing any extra migration code -- only the require-valid-JSON-input part may need some.  Please correct me if I'm mistaken.", "is_private": false, "time": "2010-05-13T20:30:44Z", "tags": [], "id": 4693321, "text": "Comment on attachment 444542\nProto-patch\n\nTry has nothing but love for this.\n\nI think this can go in without needing any extra migration code -- only the require-valid-JSON-input part may need some.  Please correct me if I'm mistaken.", "bug_id": 505656}, {"raw_text": ">diff --git a/toolkit/components/places/src/PlacesUtils.jsm b/toolkit/components/places/src/PlacesUtils.jsm\n>--- a/toolkit/components/places/src/PlacesUtils.jsm\n>+++ b/toolkit/components/places/src/PlacesUtils.jsm\n>@@ -1508,28 +1508,18 @@ var PlacesUtils = {\n>       }\n>     }\n> \n>-    function writeScalarNode(aStream, aNode) {\n>-      // serialize to json\n>-      var jstr = PlacesUtils.toJSONString(aNode);\n>-      // write to stream\n>-      aStream.write(jstr, jstr.length);\n>+    function translateScalarNode(aNode) {\n>+      return aNode;\n>     }\n\nI know you're not here to fix all of our crappy code (even if I'd actually appreciate that!), but this function is now pointless, can you just kill it and replace calls to it with just \"node\" please?\n\nIt looks good and is the same thing i was planning to do for this bug, before giving final review I just want to do a couple manual tests today.", "is_private": false, "creation_time": "2010-05-14T11:05:43Z", "author": "mak@mozilla.com", "count": 10, "attachment_id": 444542, "creator": "mak@mozilla.com", "bug_id": 505656, "text": "Comment on attachment 444542\nProto-patch\n\n>diff --git a/toolkit/components/places/src/PlacesUtils.jsm b/toolkit/components/places/src/PlacesUtils.jsm\n>--- a/toolkit/components/places/src/PlacesUtils.jsm\n>+++ b/toolkit/components/places/src/PlacesUtils.jsm\n>@@ -1508,28 +1508,18 @@ var PlacesUtils = {\n>       }\n>     }\n> \n>-    function writeScalarNode(aStream, aNode) {\n>-      // serialize to json\n>-      var jstr = PlacesUtils.toJSONString(aNode);\n>-      // write to stream\n>-      aStream.write(jstr, jstr.length);\n>+    function translateScalarNode(aNode) {\n>+      return aNode;\n>     }\n\nI know you're not here to fix all of our crappy code (even if I'd actually appreciate that!), but this function is now pointless, can you just kill it and replace calls to it with just \"node\" please?\n\nIt looks good and is the same thing i was planning to do for this bug, before giving final review I just want to do a couple manual tests today.", "id": 4694410, "time": "2010-05-14T11:05:43Z", "tags": []}, {"id": 4694412, "text": "regarding migration, the only thing I ask you is to land on 1.9.2, so that when we will upgrade in future users will have valid json backups.", "tags": [], "time": "2010-05-14T11:06:25Z", "bug_id": 505656, "attachment_id": null, "count": 11, "creator": "mak@mozilla.com", "is_private": false, "raw_text": "regarding migration, the only thing I ask you is to land on 1.9.2, so that when we will upgrade in future users will have valid json backups.", "author": "mak@mozilla.com", "creation_time": "2010-05-14T11:06:25Z"}, {"bug_id": 505656, "time": "2010-05-14T12:01:43Z", "tags": [], "text": "Comment on attachment 444542\nProto-patch\n\nok, works fine afaict. We have tests for bookmarks backup/restore, thus not requiring a new one.", "id": 4694454, "creation_time": "2010-05-14T12:01:43Z", "author": "mak@mozilla.com", "raw_text": "ok, works fine afaict. We have tests for bookmarks backup/restore, thus not requiring a new one.", "is_private": false, "creator": "mak@mozilla.com", "count": 12, "attachment_id": 444542}, {"time": "2010-05-18T22:27:41Z", "tags": [], "id": 4701316, "text": "Comment on attachment 444542\nProto-patch\n\n>diff --git a/toolkit/components/places/src/PlacesUtils.jsm b/toolkit/components/places\n\n>-    function serializeNodeToJSONStream(bNode, aIndex) {\n>+    function translateNodeToObject(bNode, aIndex) {\n>       var node = {};\n> \n>       // set index in order received\n>@@ -1597,14 +1584,14 @@ var PlacesUtils = {\n>       }\n> \n>       if (!node.feedURI && node.type == PlacesUtils.TYPE_X_MOZ_PLACE_CONTAINER)\n>-        writeComplexNode(aStream, node, bNode);\n>-      else\n>-        writeScalarNode(aStream, node);\n>-      return true;\n>+        return translateComplexNode(node, bNode);\n>+      return translateScalarNode(node);\n>     }\n\nSo...looking at this again during a 192 port, I'm wondering if this is quite what it should be.  Specifically, translateNodeToObject is used as though it always returns a node to add -- but in some cases, out of the context in the patch.  Here's full context:\n\n> -    function serializeNodeToJSONStream(bNode, aIndex) {\n> +    function translateNodeToObject(bNode, aIndex) {\n>        var node = {};\n>  \n>        // set index in order received\n>        // XXX handy shortcut, but are there cases where we don't want\n>        // to export using the sorting provided by the query?\n>        if (aIndex)\n>          node.index = aIndex;\n>  \n>        addGenericProperties(bNode, node);\n>  \n>        var parent = bNode.parent;\n>        var grandParent = parent ? parent.parent : null;\n>  \n>        if (PlacesUtils.nodeIsURI(bNode)) {\n>          // Tag root accept only folder nodes\n>          if (parent && parent.itemId == PlacesUtils.tagsFolderId)\n>            return false;\n>          // Check for url validity, since we can't halt while writing a backup.\n>          // This will throw if we try to serialize an invalid url and it does\n>          // not make sense saving a wrong or corrupt uri node.\n>          try {\n>            PlacesUtils._uri(bNode.uri);\n>          } catch (ex) {\n>            return false;\n>          }\n>          addURIProperties(bNode, node);\n>        }\n>        else if (PlacesUtils.nodeIsContainer(bNode)) {\n>          // Tag containers accept only uri nodes\n>          if (grandParent && grandParent.itemId == PlacesUtils.tagsFolderId)\n>            return false;\n>          addContainerProperties(bNode, node);\n>        }\n>        else if (PlacesUtils.nodeIsSeparator(bNode)) {\n>          // Tag root accept only folder nodes\n>          // Tag containers accept only uri nodes\n>          if ((parent && parent.itemId == PlacesUtils.tagsFolderId) ||\n>              (grandParent && grandParent.itemId == PlacesUtils.tagsFolderId))\n>            return false;\n>  \n>          addSeparatorProperties(bNode, node);\n>        }\n>  \n>        if (!node.feedURI && node.type == PlacesUtils.TYPE_X_MOZ_PLACE_CONTAINER)\n> -        writeComplexNode(aStream, node, bNode);\n> -      else\n> -        writeScalarNode(aStream, node);\n> -      return true;\n> +        return translateComplexNode(node, bNode);\n> +      return node;\n>      }\n>  \n>      // serialize to stream\n> -    serializeNodeToJSONStream(aNode, null);\n> +    var repr = translateNodeToObject(aNode, null);\n> +    var json = JSON.stringify(repr);\n> +    aStream.write(json, json.length);\n>    },\n\nSo right now, if we hit any of these return false statements, we'll insert some sort of property that's semi-bogus, with a \"random\" boolean value of false.  Maybe it makes more sense for translateNodeToObject to instead be:\n\n> function translateNodeToObject(bNode, aIndex, base, property) {\n>   if (shouldAddNode(bNode, aIndex))\n>     base[property] = node(bNode, aIndex);\n> }\n\n...assuming something like a shouldAddNode method that determines whether or not we'd hit a return-false case and a node that computes the node that would be assigned each exist.\n\nDoes this seem like a good change to make, perhaps in a patch atop the one here?  The falses seem worrisome to me at the very least from a code-structuring point of view, even if it might be the case that they won't usually be hit for some reason.", "bug_id": 505656, "creator": "jwalden@mit.edu", "count": 13, "attachment_id": 444542, "creation_time": "2010-05-18T22:27:41Z", "author": "jwalden@mit.edu", "raw_text": ">diff --git a/toolkit/components/places/src/PlacesUtils.jsm b/toolkit/components/places\n\n>-    function serializeNodeToJSONStream(bNode, aIndex) {\n>+    function translateNodeToObject(bNode, aIndex) {\n>       var node = {};\n> \n>       // set index in order received\n>@@ -1597,14 +1584,14 @@ var PlacesUtils = {\n>       }\n> \n>       if (!node.feedURI && node.type == PlacesUtils.TYPE_X_MOZ_PLACE_CONTAINER)\n>-        writeComplexNode(aStream, node, bNode);\n>-      else\n>-        writeScalarNode(aStream, node);\n>-      return true;\n>+        return translateComplexNode(node, bNode);\n>+      return translateScalarNode(node);\n>     }\n\nSo...looking at this again during a 192 port, I'm wondering if this is quite what it should be.  Specifically, translateNodeToObject is used as though it always returns a node to add -- but in some cases, out of the context in the patch.  Here's full context:\n\n> -    function serializeNodeToJSONStream(bNode, aIndex) {\n> +    function translateNodeToObject(bNode, aIndex) {\n>        var node = {};\n>  \n>        // set index in order received\n>        // XXX handy shortcut, but are there cases where we don't want\n>        // to export using the sorting provided by the query?\n>        if (aIndex)\n>          node.index = aIndex;\n>  \n>        addGenericProperties(bNode, node);\n>  \n>        var parent = bNode.parent;\n>        var grandParent = parent ? parent.parent : null;\n>  \n>        if (PlacesUtils.nodeIsURI(bNode)) {\n>          // Tag root accept only folder nodes\n>          if (parent && parent.itemId == PlacesUtils.tagsFolderId)\n>            return false;\n>          // Check for url validity, since we can't halt while writing a backup.\n>          // This will throw if we try to serialize an invalid url and it does\n>          // not make sense saving a wrong or corrupt uri node.\n>          try {\n>            PlacesUtils._uri(bNode.uri);\n>          } catch (ex) {\n>            return false;\n>          }\n>          addURIProperties(bNode, node);\n>        }\n>        else if (PlacesUtils.nodeIsContainer(bNode)) {\n>          // Tag containers accept only uri nodes\n>          if (grandParent && grandParent.itemId == PlacesUtils.tagsFolderId)\n>            return false;\n>          addContainerProperties(bNode, node);\n>        }\n>        else if (PlacesUtils.nodeIsSeparator(bNode)) {\n>          // Tag root accept only folder nodes\n>          // Tag containers accept only uri nodes\n>          if ((parent && parent.itemId == PlacesUtils.tagsFolderId) ||\n>              (grandParent && grandParent.itemId == PlacesUtils.tagsFolderId))\n>            return false;\n>  \n>          addSeparatorProperties(bNode, node);\n>        }\n>  \n>        if (!node.feedURI && node.type == PlacesUtils.TYPE_X_MOZ_PLACE_CONTAINER)\n> -        writeComplexNode(aStream, node, bNode);\n> -      else\n> -        writeScalarNode(aStream, node);\n> -      return true;\n> +        return translateComplexNode(node, bNode);\n> +      return node;\n>      }\n>  \n>      // serialize to stream\n> -    serializeNodeToJSONStream(aNode, null);\n> +    var repr = translateNodeToObject(aNode, null);\n> +    var json = JSON.stringify(repr);\n> +    aStream.write(json, json.length);\n>    },\n\nSo right now, if we hit any of these return false statements, we'll insert some sort of property that's semi-bogus, with a \"random\" boolean value of false.  Maybe it makes more sense for translateNodeToObject to instead be:\n\n> function translateNodeToObject(bNode, aIndex, base, property) {\n>   if (shouldAddNode(bNode, aIndex))\n>     base[property] = node(bNode, aIndex);\n> }\n\n...assuming something like a shouldAddNode method that determines whether or not we'd hit a return-false case and a node that computes the node that would be assigned each exist.\n\nDoes this seem like a good change to make, perhaps in a patch atop the one here?  The falses seem worrisome to me at the very least from a code-structuring point of view, even if it might be the case that they won't usually be hit for some reason.", "is_private": false}, {"attachment_id": null, "count": 14, "author": "mak@mozilla.com", "creation_time": "2010-05-28T10:14:58Z", "is_private": false, "creator": "mak@mozilla.com", "raw_text": "Yes, I guess it would be bad to have boolean values instead of expected objects, those return false things were put there because of corruptions we had in the past (that were interrupting restores). As of today I'd expect all bugs regarding that kind of things being fixed, but still having some sort of \"pass-check\" before adding a node sounds useful for future.\nI'd rename shouldAddNode to canAddNode, we want all nodes, but we could not be able to add some.\nAnd translateNodeToObject would now also set the node in the base object so the name is ambiguous, something like transplantNodeToObject, or if you have better ideas. Also the last assignment is var repr = translateNodeToObject(aNode, null); in this case there is no property, so I guess you should check if property === undefined then directly assign to the base object\n\nSo far canAddNode should check that:\n- if node is a uri node, uri should be a valid nsIURI\n- if node.parent is tags folder, node should be a folder node\nand in future we could add other checks.", "tags": [], "time": "2010-05-28T10:14:58Z", "id": 4717519, "text": "Yes, I guess it would be bad to have boolean values instead of expected objects, those return false things were put there because of corruptions we had in the past (that were interrupting restores). As of today I'd expect all bugs regarding that kind of things being fixed, but still having some sort of \"pass-check\" before adding a node sounds useful for future.\nI'd rename shouldAddNode to canAddNode, we want all nodes, but we could not be able to add some.\nAnd translateNodeToObject would now also set the node in the base object so the name is ambiguous, something like transplantNodeToObject, or if you have better ideas. Also the last assignment is var repr = translateNodeToObject(aNode, null); in this case there is no property, so I guess you should check if property === undefined then directly assign to the base object\n\nSo far canAddNode should check that:\n- if node is a uri node, uri should be a valid nsIURI\n- if node.parent is tags folder, node should be a folder node\nand in future we could add other checks.", "bug_id": 505656}, {"creator": "mak@mozilla.com", "attachment_id": null, "count": 15, "author": "mak@mozilla.com", "creation_time": "2010-05-28T10:20:09Z", "is_private": false, "raw_text": "hm actually the tags part is a bit more complex.\n- if (node.parent.itemId == PlacesUtils.tagsFolderId) then node must be a folder node\nif (node.parent.parent.itemId == PlacesUtils.tagsFolderId) then node must be a uri node\nthis is because tags root is a folder containing folders, and each of these can only be uris", "tags": [], "time": "2010-05-28T10:20:09Z", "text": "hm actually the tags part is a bit more complex.\n- if (node.parent.itemId == PlacesUtils.tagsFolderId) then node must be a folder node\nif (node.parent.parent.itemId == PlacesUtils.tagsFolderId) then node must be a uri node\nthis is because tags root is a folder containing folders, and each of these can only be uris", "id": 4717522, "bug_id": 505656}, {"attachment_id": null, "count": 16, "is_private": false, "author": "mak@mozilla.com", "creation_time": "2010-05-28T10:23:07Z", "id": 4717525, "text": "s/can only be uris/can only contain uris/", "tags": [], "time": "2010-05-28T10:23:07Z", "bug_id": 505656, "creator": "mak@mozilla.com", "raw_text": "s/can only be uris/can only contain uris/"}, {"is_private": false, "raw_text": "The strawman from comment 13 requires a weird disconnection of validity-checking and conversion code -- likely bug-prone, I think.  The current setup is much more natural.  A few tweaks to it, as done in this patch, produces a much more natural final result, and as a side bonus it makes the necessary changes much smaller.\n\nTry server still does well with this.", "author": "jwalden@mit.edu", "creation_time": "2010-06-04T21:34:07Z", "attachment_id": 449348, "count": 17, "creator": "jwalden@mit.edu", "bug_id": 505656, "text": "Created attachment 449348\nPatch atop previous: a (better, I think) way to cleanly omit unserializable nodes\n\nThe strawman from comment 13 requires a weird disconnection of validity-checking and conversion code -- likely bug-prone, I think.  The current setup is much more natural.  A few tweaks to it, as done in this patch, produces a much more natural final result, and as a side bonus it makes the necessary changes much smaller.\n\nTry server still does well with this.", "id": 4729057, "tags": [], "time": "2010-06-04T21:34:07Z"}, {"time": "2010-06-08T22:15:01Z", "tags": [], "id": 4734186, "text": "Comment on attachment 449348\nPatch atop previous: a (better, I think) way to cleanly omit unserializable nodes\n\n>diff --git a/toolkit/components/places/src/PlacesUtils.jsm b/toolkit/components/places/src/PlacesUtils.jsm\n\n>+    function appendConvertedComplexNode(aNode, aSourceNode, aArray) {\n>       var repr = {};\n> \n>       for (let [name, value] in Iterator(aNode))\n>@@ -1530,16 +1526,21 @@ var PlacesUtils = {\n>           var childNode = aSourceNode.getChild(i);\n>           if (aExcludeItems && aExcludeItems.indexOf(childNode.itemId) != -1)\n>             continue;\n>-          children.push(translateNodeToObject(aSourceNode.getChild(i), i));\n>+\n>+          // This conceivably might fail to append, but it shouldn't cause the\n>+          // overall conversion to fail.  Should we maybe record a failure here\n>+          // somehow, rather than just swallowing completely?\n>+          appendConvertedNode(aSourceNode.getChild(i), i, children);\n\nas I said, I expect this code to fail only in Firefox 3.0 alphas/betas. PlacesDBUtils is also taking care of many of these corruptions. Thus I think there is not even the need for a verbose comment, I'd remove the \"Should we maybe...\" part.\n\nIt's a bit hard to put toghether 2 patches and figure out the final result, but looks like this is mostly retaining the old behavior and let methods do the addition rather than doing it on return. Sounds fine.", "bug_id": 505656, "creator": "mak@mozilla.com", "count": 18, "attachment_id": 449348, "creation_time": "2010-06-08T22:15:01Z", "author": "mak@mozilla.com", "raw_text": ">diff --git a/toolkit/components/places/src/PlacesUtils.jsm b/toolkit/components/places/src/PlacesUtils.jsm\n\n>+    function appendConvertedComplexNode(aNode, aSourceNode, aArray) {\n>       var repr = {};\n> \n>       for (let [name, value] in Iterator(aNode))\n>@@ -1530,16 +1526,21 @@ var PlacesUtils = {\n>           var childNode = aSourceNode.getChild(i);\n>           if (aExcludeItems && aExcludeItems.indexOf(childNode.itemId) != -1)\n>             continue;\n>-          children.push(translateNodeToObject(aSourceNode.getChild(i), i));\n>+\n>+          // This conceivably might fail to append, but it shouldn't cause the\n>+          // overall conversion to fail.  Should we maybe record a failure here\n>+          // somehow, rather than just swallowing completely?\n>+          appendConvertedNode(aSourceNode.getChild(i), i, children);\n\nas I said, I expect this code to fail only in Firefox 3.0 alphas/betas. PlacesDBUtils is also taking care of many of these corruptions. Thus I think there is not even the need for a verbose comment, I'd remove the \"Should we maybe...\" part.\n\nIt's a bit hard to put toghether 2 patches and figure out the final result, but looks like this is mostly retaining the old behavior and let methods do the addition rather than doing it on return. Sounds fine.", "is_private": false}, {"creation_time": "2010-06-11T01:15:28Z", "author": "jwalden@mit.edu", "is_private": false, "count": 19, "attachment_id": null, "raw_text": "http://hg.mozilla.org/mozilla-central/rev/f21132993dc2\n\nThe 192 backport was straightforward; I'll post that patch for approval (after it's baked a bit, of course) in a second.", "creator": "jwalden@mit.edu", "bug_id": 505656, "time": "2010-06-11T01:15:28Z", "tags": [], "text": "http://hg.mozilla.org/mozilla-central/rev/f21132993dc2\n\nThe 192 backport was straightforward; I'll post that patch for approval (after it's baked a bit, of course) in a second.", "id": 4739092}, {"is_private": false, "author": "jwalden@mit.edu", "creation_time": "2010-06-11T01:16:04Z", "attachment_id": 450544, "count": 20, "bug_id": 505656, "text": "Created attachment 450544\n192 backport\n\nThe backport to 192 was pretty easy -- just deal with a different file name and manually, but straightforwardly, merge a few hunks around a little change at the edges.", "id": 4739093, "tags": [], "time": "2010-06-11T01:16:04Z", "raw_text": "The backport to 192 was pretty easy -- just deal with a different file name and manually, but straightforwardly, merge a few hunks around a little change at the edges.", "creator": "jwalden@mit.edu"}, {"creator": "jwalden@mit.edu", "count": 21, "attachment_id": 450544, "creation_time": "2010-06-11T20:54:24Z", "author": "jwalden@mit.edu", "raw_text": "The 192 patch also applies cleanly to 191.\n\nA small part of me wants to do a 190 patch, but 1) that involves cvs, and 2) sessionstore dropped 3.0 compatibility recently, so the ship has already sailed on not preserving compatibility with 3.0-era profiles.", "is_private": false, "time": "2010-06-11T20:54:24Z", "tags": [], "text": "Comment on attachment 450544\n192 backport\n\nThe 192 patch also applies cleanly to 191.\n\nA small part of me wants to do a 190 patch, but 1) that involves cvs, and 2) sessionstore dropped 3.0 compatibility recently, so the ship has already sailed on not preserving compatibility with 3.0-era profiles.", "id": 4740526, "bug_id": 505656}, {"raw_text": "I asked a comment about this via email. We likely won't be taking this for .6/.11", "is_private": false, "creation_time": "2010-06-24T20:50:09Z", "author": "christian@legnitto.com", "count": 22, "attachment_id": null, "creator": "christian@legnitto.com", "bug_id": 505656, "id": 4764462, "text": "I asked a comment about this via email. We likely won't be taking this for .6/.11", "time": "2010-06-24T20:50:09Z", "tags": []}, {"id": 4764486, "text": "I just got to responding to this email a few minutes ago.  :-)  I'm not worried about missing a particular very-soon point release, just that it not miss one without good cause.", "tags": [], "time": "2010-06-24T20:57:47Z", "bug_id": 505656, "attachment_id": null, "count": 23, "creator": "jwalden@mit.edu", "is_private": false, "raw_text": "I just got to responding to this email a few minutes ago.  :-)  I'm not worried about missing a particular very-soon point release, just that it not miss one without good cause.", "author": "jwalden@mit.edu", "creation_time": "2010-06-24T20:57:47Z"}, {"bug_id": 505656, "time": "2010-06-24T21:00:47Z", "tags": [], "text": "We'll take this next time rather than squeeze it in on top of a groaning QA team, setting to \"needed\" so we don't forget it.", "id": 4764501, "creation_time": "2010-06-24T21:00:47Z", "author": "dveditz@mozilla.com", "raw_text": "We'll take this next time rather than squeeze it in on top of a groaning QA team, setting to \"needed\" so we don't forget it.", "is_private": false, "creator": "dveditz@mozilla.com", "count": 24, "attachment_id": null}, {"bug_id": 505656, "text": "We need it on 1.9.2 for sure, I'm not worried about where, even if it could hit FX4.0beta1 users, but beta users should be ready to possible issues. Any release before FX4RC1 should work imo.", "id": 4764608, "time": "2010-06-24T21:45:49Z", "tags": [], "raw_text": "We need it on 1.9.2 for sure, I'm not worried about where, even if it could hit FX4.0beta1 users, but beta users should be ready to possible issues. Any release before FX4RC1 should work imo.", "is_private": false, "creation_time": "2010-06-24T21:45:49Z", "author": "mak@mozilla.com", "count": 25, "attachment_id": null, "creator": "mak@mozilla.com"}, {"is_private": false, "raw_text": "(If you got the previously-mentioned email, move along, nothing new in this comment...)\n\nFor purposes of *this* bug it's not too important when.  As I noted in that email, for the purposes of bug 564621 (which this blocks), it's important it get in sooner rather than later (to the extent feasible given schedule weirdness of 3.6.4 being super-long), because tightening the strictness/correctness of JSON.parse could very easily have an effect on websites.  It's more likely such effects will be discovered and fixed the longer that change is in mozilla-central.", "author": "jwalden@mit.edu", "creation_time": "2010-06-24T22:16:33Z", "attachment_id": null, "count": 26, "creator": "jwalden@mit.edu", "bug_id": 505656, "id": 4764699, "text": "(If you got the previously-mentioned email, move along, nothing new in this comment...)\n\nFor purposes of *this* bug it's not too important when.  As I noted in that email, for the purposes of bug 564621 (which this blocks), it's important it get in sooner rather than later (to the extent feasible given schedule weirdness of 3.6.4 being super-long), because tightening the strictness/correctness of JSON.parse could very easily have an effect on websites.  It's more likely such effects will be discovered and fixed the longer that change is in mozilla-central.", "tags": [], "time": "2010-06-24T22:16:33Z"}, {"attachment_id": null, "count": 27, "creator": "christian@legnitto.com", "is_private": false, "raw_text": "A couple of things:\n\n#1 - won't you have to support/munge trailing commas in 4.0 final anyway? What if a user is running 3.0-3.6.7 and then installs 4.0 on top? It seems like if you have to work around this in 4.0 anyway there is really no benefit to taking it\n\n#2 - There doesn't seem to be a test to make sure this does what it says or doesn't regress later", "author": "christian@legnitto.com", "creation_time": "2010-07-16T18:15:27Z", "text": "A couple of things:\n\n#1 - won't you have to support/munge trailing commas in 4.0 final anyway? What if a user is running 3.0-3.6.7 and then installs 4.0 on top? It seems like if you have to work around this in 4.0 anyway there is really no benefit to taking it\n\n#2 - There doesn't seem to be a test to make sure this does what it says or doesn't regress later", "id": 4799394, "tags": [], "time": "2010-07-16T18:15:27Z", "bug_id": 505656}, {"bug_id": 505656, "tags": [], "time": "2010-07-21T17:14:10Z", "id": 4808942, "text": "Upgrading from 3.0 to 4.0 is already unsupported, and other profile-format changes would make applying this fix there not fix all the possible problems they might encounter anyway.\n\nThe point of applying this to 3.5.x and 3.6.x, x being whichever release includes this change, is so that people upgrading from there to 4.0 will have their profiles adjusted properly.  People with 3.{5,6}.y installs where y < x are expected to upgrade through 3.{5,6}.z where z >= x, to get the fix this way.\n\nThe test is that JSON.parse will complain if it's given a bookmarks backup that includes a trailing comma.  Further, I was told in comment 12, we already have tests that exercise this code.", "author": "jwalden@mit.edu", "creation_time": "2010-07-21T17:14:10Z", "is_private": false, "raw_text": "Upgrading from 3.0 to 4.0 is already unsupported, and other profile-format changes would make applying this fix there not fix all the possible problems they might encounter anyway.\n\nThe point of applying this to 3.5.x and 3.6.x, x being whichever release includes this change, is so that people upgrading from there to 4.0 will have their profiles adjusted properly.  People with 3.{5,6}.y installs where y < x are expected to upgrade through 3.{5,6}.z where z >= x, to get the fix this way.\n\nThe test is that JSON.parse will complain if it's given a bookmarks backup that includes a trailing comma.  Further, I was told in comment 12, we already have tests that exercise this code.", "creator": "jwalden@mit.edu", "attachment_id": null, "count": 28}, {"creation_time": "2010-07-26T18:00:44Z", "author": "dveditz@mozilla.com", "is_private": false, "count": 29, "attachment_id": null, "raw_text": "(In reply to comment #28)\n> People with 3.{5,6}.y installs where y < x are expected to upgrade\n> through 3.{5,6}.z where z >= x, to get the fix this way.\n\nThat's certainly the normal path, but it's not universal. Right now we've still got ~10M Firefox 3.0.x users we're trying to upgrade to 3.6 (skipping 3.5). Someday it'll be roughly that many unsupported 3.5 users we'll be trying to move to 4.0 (rather than 3.6.x which by that time will be nearing EOL itself). Will we remember this bug and force them through multiple upgrade steps to avoid bookmark loss? I wouldn't count on it, and then it's a huge support headache.\n\nYou're going to have to handle upgrading both formats.", "creator": "dveditz@mozilla.com", "bug_id": 505656, "time": "2010-07-26T18:00:44Z", "tags": [], "id": 4818875, "text": "(In reply to comment #28)\n> People with 3.{5,6}.y installs where y < x are expected to upgrade\n> through 3.{5,6}.z where z >= x, to get the fix this way.\n\nThat's certainly the normal path, but it's not universal. Right now we've still got ~10M Firefox 3.0.x users we're trying to upgrade to 3.6 (skipping 3.5). Someday it'll be roughly that many unsupported 3.5 users we'll be trying to move to 4.0 (rather than 3.6.x which by that time will be nearing EOL itself). Will we remember this bug and force them through multiple upgrade steps to avoid bookmark loss? I wouldn't count on it, and then it's a huge support headache.\n\nYou're going to have to handle upgrading both formats."}, {"bug_id": 505656, "time": "2010-07-26T19:12:29Z", "tags": [], "text": "And, if you are handling upgrading with the trailing commas, isn't it easier to just assume everyone < 4.0 has the trailing commas instead of dealing with both cases?", "id": 4819063, "creation_time": "2010-07-26T19:12:29Z", "author": "christian@legnitto.com", "raw_text": "And, if you are handling upgrading with the trailing commas, isn't it easier to just assume everyone < 4.0 has the trailing commas instead of dealing with both cases?", "is_private": false, "creator": "christian@legnitto.com", "count": 30, "attachment_id": null}, {"attachment_id": null, "count": 31, "is_private": false, "author": "jwalden@mit.edu", "creation_time": "2010-07-26T20:59:34Z", "text": "Sigh.  I'll look into writing some sort of migration code, I guess, just let me gouge my eyes out first.  :-\\", "id": 4819341, "tags": [], "time": "2010-07-26T20:59:34Z", "bug_id": 505656, "creator": "jwalden@mit.edu", "raw_text": "Sigh.  I'll look into writing some sort of migration code, I guess, just let me gouge my eyes out first.  :-\\"}, {"author": "christian@legnitto.com", "creation_time": "2010-08-02T21:54:07Z", "is_private": false, "raw_text": "I understand it's not ideal, but I see no way around it as we do not require users to be on the latest security update before updating to a new major version :-/.\n\nAlso, if we did take this on the branch it would be a bit of a support nightmare, as most SUMO people will be on the latest (with the fix) and unable to reproduce. I have a feeling this would become a hard-to-reproduce \"phantom\" bug.", "creator": "christian@legnitto.com", "attachment_id": null, "count": 32, "bug_id": 505656, "tags": [], "time": "2010-08-02T21:54:07Z", "text": "I understand it's not ideal, but I see no way around it as we do not require users to be on the latest security update before updating to a new major version :-/.\n\nAlso, if we did take this on the branch it would be a bit of a support nightmare, as most SUMO people will be on the latest (with the fix) and unable to reproduce. I have a feeling this would become a hard-to-reproduce \"phantom\" bug.", "id": 4834235}, {"creator": "john.p.baker@bristol.ac.uk", "count": 33, "attachment_id": null, "creation_time": "2010-08-11T08:54:16Z", "author": "john.p.baker@bristol.ac.uk", "raw_text": "", "is_private": false, "time": "2010-08-11T08:54:16Z", "tags": [], "text": "*** Bug 586207 has been marked as a duplicate of this bug. ***", "id": 4854060, "bug_id": 505656}, {"text": "should I post a new bug? there is a different issue but related to the same subject.\n\nthe structure of the JSON is not valid in that the first entry's \"children\":[] doesn't have a close ]\n\nI was using notepad++'s JSON  Viewer's JSON Format to reformat the JSON file to a readable format.\nI also checked the non-formatted version and the end curly and square brackets have same problem.\nthe rest of the first/main JSON entry is missing from the JSON export.\n\nis there anything else missing after this truncated main entry? besides maybe \n    ]\n    }\n} \n?\n\nhow is this supposed to end?", "id": 7971236, "tags": [], "time": "2013-10-17T06:11:54Z", "bug_id": 505656, "attachment_id": null, "count": 34, "creator": "jmichae3@yahoo.com", "is_private": false, "raw_text": "should I post a new bug? there is a different issue but related to the same subject.\n\nthe structure of the JSON is not valid in that the first entry's \"children\":[] doesn't have a close ]\n\nI was using notepad++'s JSON  Viewer's JSON Format to reformat the JSON file to a readable format.\nI also checked the non-formatted version and the end curly and square brackets have same problem.\nthe rest of the first/main JSON entry is missing from the JSON export.\n\nis there anything else missing after this truncated main entry? besides maybe \n    ]\n    }\n} \n?\n\nhow is this supposed to end?", "author": "jmichae3@yahoo.com", "creation_time": "2013-10-17T06:11:54Z"}, {"bug_id": 505656, "tags": [], "time": "2013-10-17T06:30:37Z", "id": 7971258, "text": "my last comment is for 24.0.1", "author": "jmichae3@yahoo.com", "creation_time": "2013-10-17T06:30:37Z", "is_private": false, "raw_text": "my last comment is for 24.0.1", "creator": "jmichae3@yahoo.com", "attachment_id": null, "count": 35}, {"text": "excuse me, ff 24.0", "id": 7971261, "tags": [], "time": "2013-10-17T06:32:03Z", "bug_id": 505656, "attachment_id": null, "count": 36, "creator": "jmichae3@yahoo.com", "is_private": false, "raw_text": "excuse me, ff 24.0", "author": "jmichae3@yahoo.com", "creation_time": "2013-10-17T06:32:03Z"}, {"bug_id": 505656, "id": 7971266, "text": "Works for me. Anyway, please file a new bug.", "tags": [], "time": "2013-10-17T06:35:15Z", "is_private": false, "raw_text": "Works for me. Anyway, please file a new bug.", "author": "VYV03354@nifty.ne.jp", "creation_time": "2013-10-17T06:35:15Z", "attachment_id": null, "count": 37, "creator": "VYV03354@nifty.ne.jp"}, {"bug_id": 505656, "tags": [], "time": "2013-10-17T21:45:03Z", "text": "(In reply to Jim Michaels from comment #34)\n> should I post a new bug? there is a different issue but related to the same\n> subject.\n> \n> the structure of the JSON is not valid in that the first entry's\n> \"children\":[] doesn't have a close ]\n\nit's very likely unrelated to this bug, sounds more like a bug in the module that writes the file.", "id": 7974966, "author": "mak@mozilla.com", "creation_time": "2013-10-17T21:45:03Z", "is_private": false, "raw_text": "(In reply to Jim Michaels from comment #34)\n> should I post a new bug? there is a different issue but related to the same\n> subject.\n> \n> the structure of the JSON is not valid in that the first entry's\n> \"children\":[] doesn't have a close ]\n\nit's very likely unrelated to this bug, sounds more like a bug in the module that writes the file.", "creator": "mak@mozilla.com", "attachment_id": null, "count": 38}, {"bug_id": 505656, "time": "2013-10-23T03:20:05Z", "tags": [], "text": "I need to correct myself, it is missing at least ]} not ]}}", "id": 7992105, "creation_time": "2013-10-23T03:20:05Z", "author": "jmichae3@yahoo.com", "raw_text": "I need to correct myself, it is missing at least ]} not ]}}", "is_private": false, "creator": "jmichae3@yahoo.com", "count": 39, "attachment_id": null}, {"is_private": false, "author": "jmichae3@yahoo.com", "creation_time": "2013-10-23T03:33:16Z", "attachment_id": null, "count": 40, "raw_text": "the new bug report is at https://bugzilla.mozilla.org/show_bug.cgi?id=929861", "creator": "jmichae3@yahoo.com", "bug_id": 505656, "id": 7992137, "text": "the new bug report is at https://bugzilla.mozilla.org/show_bug.cgi?id=929861", "tags": [], "time": "2013-10-23T03:33:16Z"}]}}, "comments": {}}