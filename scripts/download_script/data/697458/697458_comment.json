{"comments": {}, "bugs": {"697458": {"comments": [{"creation_time": "2011-10-26T15:55:41Z", "raw_text": "Trying to figure why Google MapsGL, especially the new JS+WebGL-based StreetView, is slow.\n\nIn a build with the patch from bug 697450 applied, I get this profile:\n\n    11.64% perf-13012.map             [.] 0x7f160d71e9d8  \n    10.98% libnvidia-glcore.so.275.28 [.] 0x12e8423       \n     7.31% libGL.so.275.28            [.] 0x9c313         \n     1.91% libxul.so                  [.] js::Interpret(JSContext*, js::StackFrame*, js::InterpMode)\n     1.54% libxul.so                  [.] Atomize(JSContext*, unsigned short const**, unsigned long, js::InternBehavior, OwnCharsBehavior)\n     1.29% libxul.so                  [.] js::PropertyTable::search(long, bool)\n     0.91% libxul.so                  [.] js::types::TypeMonitorResult(JSContext*, JSScript*, unsigned char*, JS::Value const&)\n     0.90% [cryptd]                   [.] 0x5e5ab106      \n     0.73% [vdso]                     [.] 0x7fffa15497b8  \n     0.71% libxul.so                  [.] NameOp(js::VMFrame&, JSObject*, bool)\n     0.70% libc-2.13.so               [.] __memcpy_ssse3_back\n     0.64% libpthread-2.13.so         [.] pthread_mutex_lock\n     0.62% firefox                    [.] arena_malloc\n     0.54% libpthread-2.13.so         [.] pthread_self\n     0.53% libpthread-2.13.so         [.] __pthread_mutex_unlock_usercnt\n     0.51% libxul.so                  [.] mozilla::WebGLContext::ConvertImage(unsigned long, unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned char*, int, bool, int, bool, unsigned long)\n     0.50% gl9m4IT2 (deleted)         [.] 0x1e69          \n     0.49% libxul.so                  [.] SearchTable(PLDHashTable*, void const*, unsigned int, PLDHashOperator)\n     0.48% libxul.so                  [.] jpeg_idct_islow\n     0.46% [kernel.kallsyms]          [k] do_raw_spin_lock\n     0.46% firefox                    [.] arena_dalloc\n     0.45% [kernel.kallsyms]          [k] sys_sched_yield\n     0.44% libxul.so                  [.] js::mjit::stubs::GetElem(js::VMFrame&)\n     0.43% [kernel.kallsyms]          [k] system_call_after_swapgs\n     0.43% firefox                    [.] realloc\n     0.42% libxul.so                  [.] ycc_rgb_convert_argb\n     0.41% libxul.so                  [.] js_GetProperty(JSContext*, JSObject*, JSObject*, long, JS::Value*)\n\n\nDoes that suggest that something could be done at the level of the JS engine to make it faster?", "time": "2011-10-26T15:55:41Z", "attachment_id": null, "text": "Trying to figure why Google MapsGL, especially the new JS+WebGL-based StreetView, is slow.\n\nIn a build with the patch from bug 697450 applied, I get this profile:\n\n    11.64% perf-13012.map             [.] 0x7f160d71e9d8  \n    10.98% libnvidia-glcore.so.275.28 [.] 0x12e8423       \n     7.31% libGL.so.275.28            [.] 0x9c313         \n     1.91% libxul.so                  [.] js::Interpret(JSContext*, js::StackFrame*, js::InterpMode)\n     1.54% libxul.so                  [.] Atomize(JSContext*, unsigned short const**, unsigned long, js::InternBehavior, OwnCharsBehavior)\n     1.29% libxul.so                  [.] js::PropertyTable::search(long, bool)\n     0.91% libxul.so                  [.] js::types::TypeMonitorResult(JSContext*, JSScript*, unsigned char*, JS::Value const&)\n     0.90% [cryptd]                   [.] 0x5e5ab106      \n     0.73% [vdso]                     [.] 0x7fffa15497b8  \n     0.71% libxul.so                  [.] NameOp(js::VMFrame&, JSObject*, bool)\n     0.70% libc-2.13.so               [.] __memcpy_ssse3_back\n     0.64% libpthread-2.13.so         [.] pthread_mutex_lock\n     0.62% firefox                    [.] arena_malloc\n     0.54% libpthread-2.13.so         [.] pthread_self\n     0.53% libpthread-2.13.so         [.] __pthread_mutex_unlock_usercnt\n     0.51% libxul.so                  [.] mozilla::WebGLContext::ConvertImage(unsigned long, unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned char*, int, bool, int, bool, unsigned long)\n     0.50% gl9m4IT2 (deleted)         [.] 0x1e69          \n     0.49% libxul.so                  [.] SearchTable(PLDHashTable*, void const*, unsigned int, PLDHashOperator)\n     0.48% libxul.so                  [.] jpeg_idct_islow\n     0.46% [kernel.kallsyms]          [k] do_raw_spin_lock\n     0.46% firefox                    [.] arena_dalloc\n     0.45% [kernel.kallsyms]          [k] sys_sched_yield\n     0.44% libxul.so                  [.] js::mjit::stubs::GetElem(js::VMFrame&)\n     0.43% [kernel.kallsyms]          [k] system_call_after_swapgs\n     0.43% firefox                    [.] realloc\n     0.42% libxul.so                  [.] ycc_rgb_convert_argb\n     0.41% libxul.so                  [.] js_GetProperty(JSContext*, JSObject*, JSObject*, long, JS::Value*)\n\n\nDoes that suggest that something could be done at the level of the JS engine to make it faster?", "id": 5806308, "count": 0, "is_private": false, "tags": [], "bug_id": 697458, "author": "jacob.benoit.1@gmail.com", "creator": "jacob.benoit.1@gmail.com"}, {"bug_id": 697458, "count": 1, "is_private": false, "tags": [], "id": 5806345, "text": "Notes about that profile:\n\npthread_mutex_lock is primarily called by malloc, and my profile shows some JS-related stuff among the main callers there:\n    _ZN2js6VectorIN3JSC22AbstractMacroAssemblerINS1_12X86AssemblerEE4JumpELm0ENS_15TempAllocPolicyEE13growStorageByEm.constprop.570\nJSObject::allocSlots\nJSRope::flatten\njs::ArgumentsObject::create\n_ZN2js6VectorINS_5types13TypeNewScript11InitializerELm0ENS_15TempAllocPolicyEE13growStorageByEm.constprop.350", "attachment_id": null, "time": "2011-10-26T16:09:49Z", "raw_text": "Notes about that profile:\n\npthread_mutex_lock is primarily called by malloc, and my profile shows some JS-related stuff among the main callers there:\n    _ZN2js6VectorIN3JSC22AbstractMacroAssemblerINS1_12X86AssemblerEE4JumpELm0ENS_15TempAllocPolicyEE13growStorageByEm.constprop.570\nJSObject::allocSlots\nJSRope::flatten\njs::ArgumentsObject::create\n_ZN2js6VectorINS_5types13TypeNewScript11InitializerELm0ENS_15TempAllocPolicyEE13growStorageByEm.constprop.350", "creation_time": "2011-10-26T16:09:49Z", "creator": "jacob.benoit.1@gmail.com", "author": "jacob.benoit.1@gmail.com"}]}}}