{"bugs": {"683080": {"comments": [{"id": 5686829, "attachment_id": null, "raw_text": "That includes both in-use buffers and whatever has been recycled back to the recycling allocator, possibly as separate numbers.\n\nThis came up in bug 126212.\n\nI can especially see pipes and storage streams using a bunch of memory when extensions get involved.", "author": "bzbarsky@mit.edu", "creation_time": "2011-08-30T02:46:06Z", "bug_id": 683080, "time": "2011-08-30T02:46:06Z", "tags": [], "text": "That includes both in-use buffers and whatever has been recycled back to the recycling allocator, possibly as separate numbers.\n\nThis came up in bug 126212.\n\nI can especially see pipes and storage streams using a bunch of memory when extensions get involved.", "creator": "bzbarsky@mit.edu", "is_private": false, "count": 0}, {"text": "Here's some relevant output from DMD:\n\n Unreported: 24 block(s) in record 4 of 18137\n  884,736 bytes (786,624 requested / 98,112 slop)\n  0.78% of the heap (5.39% cumulative unreported)\n    at 0x402A063: malloc (vg_replace_malloc.c:263)\n    by 0x403C0A4: moz_malloc (mozalloc.cpp:113)\n    by 0x7A60AE4: nsRecyclingAllocator::Malloc(unsigned long, bool) (nsRecyclingAllocator.cpp:164)\n    by 0x7A60E15: nsRecyclingAllocatorImpl::Alloc(unsigned long) (nsRecyclingAllocator.cpp:295)\n    by 0x7A7E7A4: nsSegmentedBuffer::AppendNewSegment() (nsSegmentedBuffer.cpp:103)\n    by 0x7A79B13: nsPipe::GetWriteSegment(char*&, unsigned int&) (nsPipe3.cpp:488)\n    by 0x7A7B483: nsPipeOutputStream::WriteSegments(unsigned int (*)(nsIOutputStream*, void*, char*, unsigned int, unsigned int, unsigned int*)\n, void*, unsigned int, unsigned int*) (nsPipe3.cpp:1110)\n    by 0x7A7D6D3: nsStreamCopierOB::DoCopy(unsigned int*, unsigned int*) (nsStreamUtils.cpp:579)\n    by 0x7A7CAF2: nsAStreamCopier::Process() (nsStreamUtils.cpp:319)\n    by 0x7A7D094: nsAStreamCopier::Run() (nsStreamUtils.cpp:435)", "tags": [], "bug_id": 683080, "time": "2011-12-22T03:51:29Z", "creation_time": "2011-12-22T03:51:29Z", "author": "n.nethercote@gmail.com", "count": 1, "is_private": false, "creator": "n.nethercote@gmail.com", "id": 5934507, "raw_text": "Here's some relevant output from DMD:\n\n Unreported: 24 block(s) in record 4 of 18137\n  884,736 bytes (786,624 requested / 98,112 slop)\n  0.78% of the heap (5.39% cumulative unreported)\n    at 0x402A063: malloc (vg_replace_malloc.c:263)\n    by 0x403C0A4: moz_malloc (mozalloc.cpp:113)\n    by 0x7A60AE4: nsRecyclingAllocator::Malloc(unsigned long, bool) (nsRecyclingAllocator.cpp:164)\n    by 0x7A60E15: nsRecyclingAllocatorImpl::Alloc(unsigned long) (nsRecyclingAllocator.cpp:295)\n    by 0x7A7E7A4: nsSegmentedBuffer::AppendNewSegment() (nsSegmentedBuffer.cpp:103)\n    by 0x7A79B13: nsPipe::GetWriteSegment(char*&, unsigned int&) (nsPipe3.cpp:488)\n    by 0x7A7B483: nsPipeOutputStream::WriteSegments(unsigned int (*)(nsIOutputStream*, void*, char*, unsigned int, unsigned int, unsigned int*)\n, void*, unsigned int, unsigned int*) (nsPipe3.cpp:1110)\n    by 0x7A7D6D3: nsStreamCopierOB::DoCopy(unsigned int*, unsigned int*) (nsStreamUtils.cpp:579)\n    by 0x7A7CAF2: nsAStreamCopier::Process() (nsStreamUtils.cpp:319)\n    by 0x7A7D094: nsAStreamCopier::Run() (nsStreamUtils.cpp:435)", "attachment_id": null}, {"bug_id": 683080, "count": 2, "id": 5934512, "raw_text": "Pipe memory usage should be transitory (right?) so it may be worth investigating why these blocks haven't been deallocated.  I'd start with figuring out what's creating the nsPipe, and why it isn't dead.  (I'm assuming that there are 1 or some other small number of nsPipes here because there's only 24 blocks involved).", "attachment_id": null, "time": "2011-12-22T03:56:20Z", "tags": [], "text": "Pipe memory usage should be transitory (right?) so it may be worth investigating why these blocks haven't been deallocated.  I'd start with figuring out what's creating the nsPipe, and why it isn't dead.  (I'm assuming that there are 1 or some other small number of nsPipes here because there's only 24 blocks involved).", "author": "khuey@kylehuey.com", "creation_time": "2011-12-22T03:56:20Z", "creator": "khuey@kylehuey.com", "is_private": false}, {"is_private": false, "creator": "n.nethercote@gmail.com", "text": "(An edited IRC transcript relating to this...)\n\n<bz> nsSegmentedBuffer always uses nsMemory::GetGlobalMemoryService() as mSegAllocator,\n     Which returns NS_GetMemoryManager, which afaict does\n    \n      return sGlobalMemory.QueryInterface(NS_GET_IID(nsIMemory), (void**) result);\n\n     where sGlobalMemory is an nsMemoryImpl\n     how are we ending up in nsRecyclingAllocator?\n     ah\n     someone can pass an allocator to Init()!\n     and it looks like that allocator is the one that comes from nsPipe::Init\n     so this recycling allocator comes from net_GetSegmentAlloc\n\n<khuey> bz: so this is just the generic necko allocator?\n        that keeps chunks around?\n\n<bz>  yeah\n      it uses a 15 minute timer to discard the chunks\n\n<khuey> sounds like something that needs to listen for memory pressure!", "tags": [], "time": "2011-12-22T04:21:58Z", "creation_time": "2011-12-22T04:21:58Z", "author": "n.nethercote@gmail.com", "raw_text": "(An edited IRC transcript relating to this...)\n\n<bz> nsSegmentedBuffer always uses nsMemory::GetGlobalMemoryService() as mSegAllocator,\n     Which returns NS_GetMemoryManager, which afaict does\n    \n      return sGlobalMemory.QueryInterface(NS_GET_IID(nsIMemory), (void**) result);\n\n     where sGlobalMemory is an nsMemoryImpl\n     how are we ending up in nsRecyclingAllocator?\n     ah\n     someone can pass an allocator to Init()!\n     and it looks like that allocator is the one that comes from nsPipe::Init\n     so this recycling allocator comes from net_GetSegmentAlloc\n\n<khuey> bz: so this is just the generic necko allocator?\n        that keeps chunks around?\n\n<bz>  yeah\n      it uses a 15 minute timer to discard the chunks\n\n<khuey> sounds like something that needs to listen for memory pressure!", "attachment_id": null, "id": 5934530, "count": 3, "bug_id": 683080}, {"tags": [], "time": "2011-12-29T17:08:49Z", "bug_id": 683080, "text": "We have two uses of nsRecyclingAllocator, AFAICT:\n- One in nsIOService which has the 15 minute time-out.\n- One in nsZipArchive.cpp which has the default 10 second time-out.\n\nThe obvious thing to do here is to add a memory reporter to nsIOService.\n\nAnother possibility is to reduce the time-out on nsIOService.\n\nMy preferred option is to get rid of nsRecyclingAllocator altogether.  Given that a good allocator should handle this kind of allocation pattern well, it wouldn't surprise me at all if nsRecyclingAllocator isn't helping performance, and may even be hurting it.  Especially if we're doing stupid things like using 15 minute time-outs for large (800KB+) allocations.\n\n(Custom allocators often do make things worse, see http://www.mendeley.com/research/reconsidering-custom-memory-allocation/ for examples.)\n\nIf I were to remove nsRecyclingAllocator altogether, how would I determine if performance has improved/worsened?  Is just normal Talos good enough?\n\nThis stuff was last touched in bug 545869, though the 15 minute time-out predates that.  I've CC'd some mobile guys who were involved with that bug.", "author": "n.nethercote@gmail.com", "creation_time": "2011-12-29T17:08:49Z", "count": 4, "creator": "n.nethercote@gmail.com", "is_private": false, "id": 5945040, "raw_text": "We have two uses of nsRecyclingAllocator, AFAICT:\n- One in nsIOService which has the 15 minute time-out.\n- One in nsZipArchive.cpp which has the default 10 second time-out.\n\nThe obvious thing to do here is to add a memory reporter to nsIOService.\n\nAnother possibility is to reduce the time-out on nsIOService.\n\nMy preferred option is to get rid of nsRecyclingAllocator altogether.  Given that a good allocator should handle this kind of allocation pattern well, it wouldn't surprise me at all if nsRecyclingAllocator isn't helping performance, and may even be hurting it.  Especially if we're doing stupid things like using 15 minute time-outs for large (800KB+) allocations.\n\n(Custom allocators often do make things worse, see http://www.mendeley.com/research/reconsidering-custom-memory-allocation/ for examples.)\n\nIf I were to remove nsRecyclingAllocator altogether, how would I determine if performance has improved/worsened?  Is just normal Talos good enough?\n\nThis stuff was last touched in bug 545869, though the 15 minute time-out predates that.  I've CC'd some mobile guys who were involved with that bug.", "attachment_id": null}, {"bug_id": 683080, "count": 5, "id": 5945413, "raw_text": "Another downside of using nsRecyclingAllocator is that we allocate 32KB chunks, but nsRecyclingAllocator clownshoe-ishly adds an extra word, and so jemalloc rounds the request up to 36KB.  With 24 chunks in the necko cache this wastes almost 24*4KB == 96KB of memory.", "attachment_id": null, "text": "Another downside of using nsRecyclingAllocator is that we allocate 32KB chunks, but nsRecyclingAllocator clownshoe-ishly adds an extra word, and so jemalloc rounds the request up to 36KB.  With 24 chunks in the necko cache this wastes almost 24*4KB == 96KB of memory.", "tags": [], "time": "2011-12-29T19:40:23Z", "creation_time": "2011-12-29T19:40:23Z", "author": "n.nethercote@gmail.com", "is_private": false, "creator": "n.nethercote@gmail.com"}, {"bug_id": 683080, "count": 6, "id": 5958707, "raw_text": "> If I were to remove nsRecyclingAllocator altogether, how would I determine if performance has \n> improved/worsened?  Is just normal Talos good enough?\n\nIf you want to be really paranoid, you could run a microbenchmark which thrashes the cache.  The performance regression there (if any) should be an upper bound on the real-world perf regression.\n\nBut on IRC, njn mentioned that the number of allocations here when loading techcrunch and gmail is on the order of 1000.  In that case, it seems really unlikely switching to jemalloc would make things measurably slower.", "attachment_id": null, "text": "> If I were to remove nsRecyclingAllocator altogether, how would I determine if performance has \n> improved/worsened?  Is just normal Talos good enough?\n\nIf you want to be really paranoid, you could run a microbenchmark which thrashes the cache.  The performance regression there (if any) should be an upper bound on the real-world perf regression.\n\nBut on IRC, njn mentioned that the number of allocations here when loading techcrunch and gmail is on the order of 1000.  In that case, it seems really unlikely switching to jemalloc would make things measurably slower.", "time": "2012-01-05T22:15:44Z", "tags": [], "creation_time": "2012-01-05T22:15:44Z", "author": "justin.lebar+bug@gmail.com", "is_private": false, "creator": "justin.lebar+bug@gmail.com"}, {"creator": "n.nethercote@gmail.com", "is_private": false, "count": 7, "author": "n.nethercote@gmail.com", "creation_time": "2012-01-06T03:46:25Z", "tags": [], "time": "2012-01-06T03:46:25Z", "bug_id": 683080, "text": "I spun off bug 715770 for killing nsRecycleAllocator.", "attachment_id": null, "raw_text": "I spun off bug 715770 for killing nsRecycleAllocator.", "id": 5959577}, {"raw_text": "With bug 715770 fixed, nsRecyclingAllocator is gone, and this is no longer necessary.", "attachment_id": null, "id": 5988336, "count": 8, "is_private": false, "creator": "n.nethercote@gmail.com", "text": "With bug 715770 fixed, nsRecyclingAllocator is gone, and this is no longer necessary.", "tags": [], "bug_id": 683080, "time": "2012-01-18T11:23:48Z", "creation_time": "2012-01-18T11:23:48Z", "author": "n.nethercote@gmail.com"}, {"id": 5989035, "raw_text": "Wait, why?  This bug was about detecting and reporting long-lived full pipes and storage streams.  The recycling allocator bit was a sideline...  See comment 0.", "attachment_id": null, "text": "Wait, why?  This bug was about detecting and reporting long-lived full pipes and storage streams.  The recycling allocator bit was a sideline...  See comment 0.", "tags": [], "bug_id": 683080, "time": "2012-01-18T16:44:33Z", "creation_time": "2012-01-18T16:44:33Z", "author": "bzbarsky@mit.edu", "count": 9, "is_private": false, "creator": "bzbarsky@mit.edu"}, {"count": 10, "bug_id": 683080, "is_private": false, "creator": "khuey@kylehuey.com", "text": "I think njn's measurements showed that we don't have long-lived full pipes and storage streams in the browser during his workloads.", "time": "2012-01-18T16:51:55Z", "tags": [], "creation_time": "2012-01-18T16:51:55Z", "author": "khuey@kylehuey.com", "raw_text": "I think njn's measurements showed that we don't have long-lived full pipes and storage streams in the browser during his workloads.", "attachment_id": null, "id": 5989064}, {"attachment_id": null, "raw_text": "Was testing done on a vanilla install, or with extensions?\n\nIn a vanilla install, that shouldn't happen.  Again, see comment 0.", "id": 5989095, "is_private": false, "creator": "bzbarsky@mit.edu", "count": 11, "creation_time": "2012-01-18T16:58:24Z", "author": "bzbarsky@mit.edu", "text": "Was testing done on a vanilla install, or with extensions?\n\nIn a vanilla install, that shouldn't happen.  Again, see comment 0.", "bug_id": 683080, "time": "2012-01-18T16:58:24Z", "tags": []}, {"count": 12, "bug_id": 683080, "is_private": false, "creator": "n.nethercote@gmail.com", "creation_time": "2012-01-18T21:54:27Z", "author": "n.nethercote@gmail.com", "text": "(In reply to Boris Zbarsky (:bz) from comment #11)\n> Was testing done on a vanilla install, or with extensions?\n> \n> In a vanilla install, that shouldn't happen.  Again, see comment 0.\n\nMy testing was without any add-ons, where I haven't seen pipes outside the nsRecyclingAllocator being significant.\n\nIn comment 0 you said:\n\n> I can especially see pipes and storage streams using a bunch of memory\n> when extensions get involved.\n\nBy that do you mean \"I have seen this in profiles\" or \"I can imagine this happening\"?\n\nI went back to bug 126212, the only reference to pipes and storage streams I could see was bug 126212 comment 41, which said:\n\n> 7) We probably need a reporter for the pipe recycling allocator,\n> as well as for the segments of live pipes!\n\nSo the former is now moot and we're talking about the latter.  I didn't see any mention of add-ons in that bug.  If you tell me which add-on(s) I should test to see lots of live pipes I'm happy to do that.", "time": "2012-01-18T21:54:27Z", "tags": [], "attachment_id": null, "raw_text": "(In reply to Boris Zbarsky (:bz) from comment #11)\n> Was testing done on a vanilla install, or with extensions?\n> \n> In a vanilla install, that shouldn't happen.  Again, see comment 0.\n\nMy testing was without any add-ons, where I haven't seen pipes outside the nsRecyclingAllocator being significant.\n\nIn comment 0 you said:\n\n> I can especially see pipes and storage streams using a bunch of memory\n> when extensions get involved.\n\nBy that do you mean \"I have seen this in profiles\" or \"I can imagine this happening\"?\n\nI went back to bug 126212, the only reference to pipes and storage streams I could see was bug 126212 comment 41, which said:\n\n> 7) We probably need a reporter for the pipe recycling allocator,\n> as well as for the segments of live pipes!\n\nSo the former is now moot and we're talking about the latter.  I didn't see any mention of add-ons in that bug.  If you tell me which add-on(s) I should test to see lots of live pipes I'm happy to do that.", "id": 5990132}, {"raw_text": "> By that do you mean \"I have seen this in profiles\" or \"I can imagine this happening\"?\n\nMore like \"I've seen this in extension code, and I bet they don't clean up their stuff very well\".\n\nI'd start testing with Firebug.  And maybe any other extensions that try to show network data.  If it's not an issue with those, it's probably not an issue in general.\n\nSorry I didn't make this clear earlier.....", "attachment_id": null, "id": 5990884, "count": 13, "creator": "bzbarsky@mit.edu", "is_private": false, "bug_id": 683080, "time": "2012-01-19T01:22:41Z", "tags": [], "text": "> By that do you mean \"I have seen this in profiles\" or \"I can imagine this happening\"?\n\nMore like \"I've seen this in extension code, and I bet they don't clean up their stuff very well\".\n\nI'd start testing with Firebug.  And maybe any other extensions that try to show network data.  If it's not an issue with those, it's probably not an issue in general.\n\nSorry I didn't make this clear earlier.....", "author": "bzbarsky@mit.edu", "creation_time": "2012-01-19T01:22:41Z"}, {"count": 14, "creator": "bug-husbandry-bot@mozilla.bugs", "is_private": false, "time": "2017-09-13T18:35:34Z", "tags": [], "bug_id": 683080, "text": "Bulk change to priority: https://bugzilla.mozilla.org/show_bug.cgi?id=1399258", "author": "bug-husbandry-bot@mozilla.bugs", "creation_time": "2017-09-13T18:35:34Z", "raw_text": "Bulk change to priority: https://bugzilla.mozilla.org/show_bug.cgi?id=1399258", "attachment_id": null, "id": 12657953}, {"attachment_id": null, "raw_text": "Bulk change to priority: https://bugzilla.mozilla.org/show_bug.cgi?id=1399258", "id": 12659510, "creator": "bug-husbandry-bot@mozilla.bugs", "is_private": false, "count": 15, "author": "bug-husbandry-bot@mozilla.bugs", "creation_time": "2017-09-13T18:47:46Z", "tags": [], "bug_id": 683080, "time": "2017-09-13T18:47:46Z", "text": "Bulk change to priority: https://bugzilla.mozilla.org/show_bug.cgi?id=1399258"}, {"is_private": false, "creator": "jstutte@mozilla.com", "count": 16, "creation_time": "2020-12-14T17:07:17Z", "author": "jstutte@mozilla.com", "text": "Bulk-downgrade of unassigned, >=3 years untouched DOM/Storage bug's priority.\n\nIf you have reason to believe this is wrong, please write a comment and ni :jstutte.", "time": "2020-12-14T17:07:17Z", "tags": [], "bug_id": 683080, "attachment_id": null, "raw_text": "Bulk-downgrade of unassigned, >=3 years untouched DOM/Storage bug's priority.\n\nIf you have reason to believe this is wrong, please write a comment and ni :jstutte.", "id": 15174571}]}}, "comments": {}}