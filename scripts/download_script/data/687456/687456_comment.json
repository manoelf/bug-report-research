{"comments": {}, "bugs": {"687456": {"comments": [{"bug_id": 687456, "id": 5723014, "count": 0, "is_private": false, "tags": [], "attachment_id": null, "time": "2011-09-19T14:54:52Z", "author": "honzab.moz@firemni.cz", "creator": "honzab.moz@firemni.cz", "text": "- first, we post an event to distributor observers from the network thread (in nsHttpTransaction::OnTransportStatus)\n- second, we post an event to the channel (again, in nsHttpTransaction::OnTransportStatus)\n- if we reuse a connection for that channel, there is no STATUS_CONNECTED_TO sent to the channel\n- therefor the channel grabs addresses from the transport in STATUS_WAITING_FOR event first\n- this event is delivered to distributor observers sooner then to the channel -> when observers call on the channel it doesn't have the address yet\n\nI propose to reverse order of posts to distributor and to the channel (transport sink) from nsHttpTransaction::OnTransportStatus.", "raw_text": "- first, we post an event to distributor observers from the network thread (in nsHttpTransaction::OnTransportStatus)\n- second, we post an event to the channel (again, in nsHttpTransaction::OnTransportStatus)\n- if we reuse a connection for that channel, there is no STATUS_CONNECTED_TO sent to the channel\n- therefor the channel grabs addresses from the transport in STATUS_WAITING_FOR event first\n- this event is delivered to distributor observers sooner then to the channel -> when observers call on the channel it doesn't have the address yet\n\nI propose to reverse order of posts to distributor and to the channel (transport sink) from nsHttpTransaction::OnTransportStatus.", "creation_time": "2011-09-19T14:54:52Z"}, {"bug_id": 687456, "id": 6110016, "count": 1, "is_private": false, "tags": [], "attachment_id": null, "time": "2012-03-02T18:53:58Z", "text": "Fixed as part of bug 648878.\n\n*** This bug has been marked as a duplicate of bug 648878 ***", "creation_time": "2012-03-02T18:53:58Z", "raw_text": "Fixed as part of bug 648878.", "author": "honzab.moz@firemni.cz", "creator": "honzab.moz@firemni.cz"}, {"raw_text": "Honza, are you sure this is a dupe of 648878?  That bug was 1) fixed 3 months before you reported this, and 2) seems to be not something that would fix your issue here (it's a local/remote address bug, but only for e10s, and this sounds like a main process issue).\n\nOn the plus side, you've made me realize that we never closed up the followup to bug 648878--bug 664163. Thanks! :)", "creation_time": "2012-03-03T04:05:30Z", "time": "2012-03-03T04:05:30Z", "attachment_id": null, "text": "Honza, are you sure this is a dupe of 648878?  That bug was 1) fixed 3 months before you reported this, and 2) seems to be not something that would fix your issue here (it's a local/remote address bug, but only for e10s, and this sounds like a main process issue).\n\nOn the plus side, you've made me realize that we never closed up the followup to bug 648878--bug 664163. Thanks! :)", "id": 6111565, "tags": [], "count": 2, "is_private": false, "bug_id": 687456, "author": "jduell.mcbugs@gmail.com", "creator": "jduell.mcbugs@gmail.com"}, {"author": "honzab.moz@firemni.cz", "creator": "honzab.moz@firemni.cz", "id": 6144916, "tags": [], "is_private": false, "count": 3, "bug_id": 687456, "creation_time": "2012-03-16T00:48:45Z", "raw_text": "You are right, thanks.  I forgot the details of this bug.  The problem is elsewhere.", "time": "2012-03-16T00:48:45Z", "attachment_id": null, "text": "You are right, thanks.  I forgot the details of this bug.  The problem is elsewhere."}, {"author": "bug-husbandry-bot@mozilla.bugs", "creator": "bug-husbandry-bot@mozilla.bugs", "attachment_id": null, "time": "2017-09-13T18:38:19Z", "text": "Bulk change to priority: https://bugzilla.mozilla.org/show_bug.cgi?id=1399258", "creation_time": "2017-09-13T18:38:19Z", "raw_text": "Bulk change to priority: https://bugzilla.mozilla.org/show_bug.cgi?id=1399258", "bug_id": 687456, "id": 12658488, "tags": [], "is_private": false, "count": 4}, {"creator": "nilfalse@yandex.com", "author": "nilfalse@yandex.com", "bug_id": 687456, "count": 5, "is_private": false, "tags": [], "id": 15259579, "text": "I believe I may be encountering this issue in the WebExtensions API when utilizing `browser.webRequest.onResponseStarted.addListener()`.\n\nNot yet sure about a shorter way to reproduce, but here's how I've been consistently seeing an issue so far:\n- open about:debugging, load an addon which registers `onResponseStarted` listener to simply log the received parameters\n- open a second tab and load any website. For instance, https://hg.mozilla.org/mozilla-central/file/tip/toolkit/components/extensions/ext-toolkit.json -- in the logs you'll be able see the IP address in the `ip` field (as expected)\n- close the browser and reopen it so that it restores the previous browsing session and shows you about:debugging as an active tab\n- load the same addon again (since temporary addons are removed at the end of session)\n- ...\n\nNow go to the second tab, this will trigger its loading. After this in the addon logs you'll consistently see `ip` field represented as `null`.\nI was suspecting that it might be the case if the response was coming from cache, but I've noticed `fromCache` is usually set to `false` when `ip === null` in this case.\n\n This behaviour is inconsistent with the Chromium implementation at the moment where it always returns the IP address to `chrome.webRequest.onResponseStarted` and other `webRequest` listeners.\n\nIf my hunch is right and this issue is the root cause this bug may need a higher priority.", "attachment_id": null, "time": "2021-02-11T00:18:44Z", "raw_text": "I believe I may be encountering this issue in the WebExtensions API when utilizing `browser.webRequest.onResponseStarted.addListener()`.\n\nNot yet sure about a shorter way to reproduce, but here's how I've been consistently seeing an issue so far:\n- open about:debugging, load an addon which registers `onResponseStarted` listener to simply log the received parameters\n- open a second tab and load any website. For instance, https://hg.mozilla.org/mozilla-central/file/tip/toolkit/components/extensions/ext-toolkit.json -- in the logs you'll be able see the IP address in the `ip` field (as expected)\n- close the browser and reopen it so that it restores the previous browsing session and shows you about:debugging as an active tab\n- load the same addon again (since temporary addons are removed at the end of session)\n- ...\n\nNow go to the second tab, this will trigger its loading. After this in the addon logs you'll consistently see `ip` field represented as `null`.\nI was suspecting that it might be the case if the response was coming from cache, but I've noticed `fromCache` is usually set to `false` when `ip === null` in this case.\n\n This behaviour is inconsistent with the Chromium implementation at the moment where it always returns the IP address to `chrome.webRequest.onResponseStarted` and other `webRequest` listeners.\n\nIf my hunch is right and this issue is the root cause this bug may need a higher priority.", "creation_time": "2021-02-11T00:18:44Z"}]}}}