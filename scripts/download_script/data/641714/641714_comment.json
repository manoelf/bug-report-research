{"bugs": {"641714": {"comments": [{"creator": "bhackett1024@gmail.com", "attachment_id": null, "text": "With the various inference bugfixes and other changes over the last few months, the precision of the resulting type sets has degraded to 80% monomorphic on SS, 65% on V8, from a previous behavior of 90-95% on both.  For JIT optimizations to work on these benchmarks, the previous behavior needs to be restored.", "count": 0, "author": "bhackett1024@gmail.com", "tags": [], "bug_id": 641714, "creation_time": "2011-03-15T00:51:03Z", "raw_text": "With the various inference bugfixes and other changes over the last few months, the precision of the resulting type sets has degraded to 80% monomorphic on SS, 65% on V8, from a previous behavior of 90-95% on both.  For JIT optimizations to work on these benchmarks, the previous behavior needs to be restored.", "is_private": false, "id": 5344864, "time": "2011-03-15T00:51:03Z"}, {"is_private": false, "raw_text": "Use new type objects for calls to 'new' which are immediately assigned to a .prototype.  This catches things like:\n\n function Super() { ... }\n function Sub1() { ... }\n function Sub2() { ... }\n\n Sub1.prototype = new Super();\n Sub2.prototype = new Super();\n\nLetting us distinguish properties of the two prototypes (since they have different type objects) and the new objects created with them.  This will be important for v8-deltablue, which has a class hierarchy set up in a similar way to this, and several very hot call sites which could be calling one of a few prototype methods depending on the class.  We will probably want to inline all possible targets, and dispatch on the value of obj->type or obj->type->proto to figure out which to use.\n\nhttp://hg.mozilla.org/projects/jaegermonkey/rev/4cdb8e6b4391", "bug_id": 641714, "creation_time": "2011-03-15T07:24:08Z", "tags": [], "time": "2011-03-15T07:24:08Z", "id": 5345240, "attachment_id": null, "creator": "bhackett1024@gmail.com", "author": "bhackett1024@gmail.com", "text": "Use new type objects for calls to 'new' which are immediately assigned to a .prototype.  This catches things like:\n\n function Super() { ... }\n function Sub1() { ... }\n function Sub2() { ... }\n\n Sub1.prototype = new Super();\n Sub2.prototype = new Super();\n\nLetting us distinguish properties of the two prototypes (since they have different type objects) and the new objects created with them.  This will be important for v8-deltablue, which has a class hierarchy set up in a similar way to this, and several very hot call sites which could be calling one of a few prototype methods depending on the class.  We will probably want to inline all possible targets, and dispatch on the value of obj->type or obj->type->proto to figure out which to use.\n\nhttp://hg.mozilla.org/projects/jaegermonkey/rev/4cdb8e6b4391", "count": 1}, {"is_private": false, "attachment_id": null, "tags": [], "creator": "bhackett1024@gmail.com", "bug_id": 641714, "creation_time": "2011-03-15T22:41:03Z", "raw_text": "Fix FrameEntrys to remove their TypeSet pointer, and instead maintain the current stack of type sets in the FrameState.  Removes a lot of cruft when pushing values, and also lets us always know the type sets for stack entries (except those which were on the stack at the last join point).\n\nhttp://hg.mozilla.org/projects/jaegermonkey/rev/4b52e3738d21", "id": 5347016, "time": "2011-03-15T22:41:03Z", "author": "bhackett1024@gmail.com", "count": 2, "text": "Fix FrameEntrys to remove their TypeSet pointer, and instead maintain the current stack of type sets in the FrameState.  Removes a lot of cruft when pushing values, and also lets us always know the type sets for stack entries (except those which were on the stack at the last join point).\n\nhttp://hg.mozilla.org/projects/jaegermonkey/rev/4b52e3738d21"}, {"time": "2011-03-16T01:26:17Z", "id": 5347404, "bug_id": 641714, "creation_time": "2011-03-16T01:26:17Z", "raw_text": "Type check function this/arguments when a JITScript is invoked through invokeEntry (the entry point which does an arity check and assumes it can be called from anywhere).  Previously this/arguments were just marked as unknown if this entry point was ever used, even if inference understood the callsite but the call IC mechanism used the invokeEntry to handle argc mismatches or polymorphism.\n\nThis uses a new MIC, one per JITScript, which generates code to do the type checking as necessary (flushed on GC in case referenced type objects are collected).\n\nhttp://hg.mozilla.org/projects/jaegermonkey/rev/eb9047c955c8", "tags": [], "is_private": false, "text": "Type check function this/arguments when a JITScript is invoked through invokeEntry (the entry point which does an arity check and assumes it can be called from anywhere).  Previously this/arguments were just marked as unknown if this entry point was ever used, even if inference understood the callsite but the call IC mechanism used the invokeEntry to handle argc mismatches or polymorphism.\n\nThis uses a new MIC, one per JITScript, which generates code to do the type checking as necessary (flushed on GC in case referenced type objects are collected).\n\nhttp://hg.mozilla.org/projects/jaegermonkey/rev/eb9047c955c8", "count": 3, "author": "bhackett1024@gmail.com", "creator": "bhackett1024@gmail.com", "attachment_id": null}, {"time": "2011-03-16T19:12:17Z", "id": 5349075, "is_private": false, "creation_time": "2011-03-16T19:12:17Z", "bug_id": 641714, "raw_text": "Keep track of entire type sets when remembering the rhs of monitored setprop/setname and arguments to monitored calls. Previously we only remembered a single type, and if there were multiple possible types for the rhs (object or null, or one of several objects) then the property/arguments ended up getting marked as unknown.\n\nhttp://hg.mozilla.org/projects/jaegermonkey/rev/763f423cce2c", "tags": [], "author": "bhackett1024@gmail.com", "text": "Keep track of entire type sets when remembering the rhs of monitored setprop/setname and arguments to monitored calls. Previously we only remembered a single type, and if there were multiple possible types for the rhs (object or null, or one of several objects) then the property/arguments ended up getting marked as unknown.\n\nhttp://hg.mozilla.org/projects/jaegermonkey/rev/763f423cce2c", "count": 4, "attachment_id": null, "creator": "bhackett1024@gmail.com"}]}}, "comments": {}}