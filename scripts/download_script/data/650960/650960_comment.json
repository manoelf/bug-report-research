{"comments": {}, "bugs": {"650960": {"comments": [{"raw_text": "Bug 629500 expunges the old XUL print and page setup dialogs but leaves us with XUL, app-modal print progress dialog boxes.  The UX team is of the opinion that we don't need to show print progress at all.", "bug_id": 650960, "creation_time": "2011-04-18T22:52:55Z", "tags": [], "is_private": false, "time": "2011-04-18T22:52:55Z", "id": 5417059, "creator": "zackw@panix.com", "attachment_id": null, "count": 0, "text": "Bug 629500 expunges the old XUL print and page setup dialogs but leaves us with XUL, app-modal print progress dialog boxes.  The UX team is of the opinion that we don't need to show print progress at all.", "author": "zackw@panix.com"}, {"time": "2011-11-10T19:43:05Z", "author": "zackw@panix.com", "id": 5840822, "count": 1, "text": "It occurs to me now that I don't know whether printing a large document freezes the UI in general or even just the tab being printed.  If it does, we oughta keep the progress bars until that can be fixed.", "is_private": false, "attachment_id": null, "bug_id": 650960, "creation_time": "2011-11-10T19:43:05Z", "raw_text": "It occurs to me now that I don't know whether printing a large document freezes the UI in general or even just the tab being printed.  If it does, we oughta keep the progress bars until that can be fixed.", "tags": [], "creator": "zackw@panix.com"}, {"creator": "zackw@panix.com", "attachment_id": null, "text": "We discussed this a bit on dev.platform a couple months ago and I did some experiments.  I now think there _should_ be some indication that Firefox's piece of the print process is not yet finished, on a per-tab basis, if only so that users don't get confused when they can't close tabs being printed.  However, I still want to kill the app-modal print progress boxes, because app-modal is never the Right Thing nowadays.\n\nI think the right way to do this is to have the print engine fire chrome events at the tab being printed at approximately the same times it currently updates the existing print progress boxes (i.e. roughly after each page).  This gets the notifications into JS land, where we can use doorhangers.\n\nThe doorhanger I have in mind is just a printer icon by default, but if you click on it it tells you how many pages are left to go, and it pops up a full notification \"Page sent to printer\" (or something like that) when we're all done.  Or if there's a problem, that gets reported as a notification too, eliminating the app-modal prompt box that's currently used for that.\n\nFeedback most welcome.  Note that I do not plan to work on this until bug 629500 is done.", "count": 2, "author": "zackw@panix.com", "raw_text": "We discussed this a bit on dev.platform a couple months ago and I did some experiments.  I now think there _should_ be some indication that Firefox's piece of the print process is not yet finished, on a per-tab basis, if only so that users don't get confused when they can't close tabs being printed.  However, I still want to kill the app-modal print progress boxes, because app-modal is never the Right Thing nowadays.\n\nI think the right way to do this is to have the print engine fire chrome events at the tab being printed at approximately the same times it currently updates the existing print progress boxes (i.e. roughly after each page).  This gets the notifications into JS land, where we can use doorhangers.\n\nThe doorhanger I have in mind is just a printer icon by default, but if you click on it it tells you how many pages are left to go, and it pops up a full notification \"Page sent to printer\" (or something like that) when we're all done.  Or if there's a problem, that gets reported as a notification too, eliminating the app-modal prompt box that's currently used for that.\n\nFeedback most welcome.  Note that I do not plan to work on this until bug 629500 is done.", "creation_time": "2012-05-25T18:46:58Z", "bug_id": 650960, "tags": [], "is_private": false, "time": "2012-05-25T18:46:58Z", "id": 6339208}, {"is_private": false, "tags": [], "creation_time": "2012-05-27T19:58:57Z", "bug_id": 650960, "raw_text": "(In reply to Zack Weinberg (:zwol) from comment #2)\n> We discussed this a bit on dev.platform a couple months ago and I did some\n> experiments.  I now think there _should_ be some indication that Firefox's\n> piece of the print process is not yet finished, on a per-tab basis, if only\n> so that users don't get confused when they can't close tabs being printed. \nYes please. Printing pages like HTML5 spec takes a lot of time.\n\n> However, I still want to kill the app-modal print progress boxes, because\n> app-modal is never the Right Thing nowadays.\nSounds right.\n\n\n> I think the right way to do this is to have the print engine fire chrome\n> events at the tab being printed at approximately the same times it currently\n> updates the existing print progress boxes (i.e. roughly after each page). \n> This gets the notifications into JS land, where we can use doorhangers.\nSounds like a possible solution. Make sure you dispatch trusted event from printengine code,\nso that chrome listeners gets it by default.", "id": 6341676, "time": "2012-05-27T19:58:57Z", "attachment_id": null, "creator": "bugs@pettay.fi", "author": "bugs@pettay.fi", "count": 3, "text": "(In reply to Zack Weinberg (:zwol) from comment #2)\n> We discussed this a bit on dev.platform a couple months ago and I did some\n> experiments.  I now think there _should_ be some indication that Firefox's\n> piece of the print process is not yet finished, on a per-tab basis, if only\n> so that users don't get confused when they can't close tabs being printed. \nYes please. Printing pages like HTML5 spec takes a lot of time.\n\n> However, I still want to kill the app-modal print progress boxes, because\n> app-modal is never the Right Thing nowadays.\nSounds right.\n\n\n> I think the right way to do this is to have the print engine fire chrome\n> events at the tab being printed at approximately the same times it currently\n> updates the existing print progress boxes (i.e. roughly after each page). \n> This gets the notifications into JS land, where we can use doorhangers.\nSounds like a possible solution. Make sure you dispatch trusted event from printengine code,\nso that chrome listeners gets it by default."}, {"time": "2012-05-29T00:25:26Z", "id": 6343584, "is_private": false, "creation_time": "2012-05-29T00:25:26Z", "bug_id": 650960, "raw_text": "It occurred to me that this change doesn't need to wait for bug 629500, since there's nothing platform-specific about the print progress code, and in fact it would simplify the patch series in 629500 quite a bit, since it deletes a ton of code that I had to carefully preserve there.  So, here goes.\n\nThis works in my testing, modulo problems described below, but it touches quite a bit of code that I'm not fully up to speed on, and so I would appreciate careful review.  In particular this is the first time I've tried to add a DOM event or do anything in browser/.", "tags": [], "author": "zackw@panix.com", "count": 4, "text": "It occurred to me that this change doesn't need to wait for bug 629500, since there's nothing platform-specific about the print progress code, and in fact it would simplify the patch series in 629500 quite a bit, since it deletes a ton of code that I had to carefully preserve there.  So, here goes.\n\nThis works in my testing, modulo problems described below, but it touches quite a bit of code that I'm not fully up to speed on, and so I would appreciate careful review.  In particular this is the first time I've tried to add a DOM event or do anything in browser/.", "attachment_id": null, "creator": "zackw@panix.com"}, {"author": "zackw@panix.com", "text": "Created attachment 627821\n1/4: add new DOM event for print status\n\nThis is strictly the addition of the new DOM event that the new scheme will use.  Nothing uses it at this point.  Please review carefully, there is an excellent chance that I missed one of the many places that has to be updated for a new event type.", "count": 5, "attachment_id": 627821, "creator": "zackw@panix.com", "id": 6343585, "time": "2012-05-29T00:27:14Z", "is_private": false, "tags": [], "raw_text": "This is strictly the addition of the new DOM event that the new scheme will use.  Nothing uses it at this point.  Please review carefully, there is an excellent chance that I missed one of the many places that has to be updated for a new event type.", "bug_id": 650960, "creation_time": "2012-05-29T00:27:14Z"}, {"time": "2012-05-29T00:30:46Z", "id": 6343588, "creation_time": "2012-05-29T00:30:46Z", "bug_id": 650960, "raw_text": "This piece disconnects the print engine from the old print progress windows and wires it up to generate the new MozPrintStatus events instead.  Nothing is listening for those events yet; that will be part 3.\n\nI have fairly high confidence in this piece.", "tags": [], "is_private": false, "text": "Created attachment 627822\n2/4: change the print engine to generate the new events\n\nThis piece disconnects the print engine from the old print progress windows and wires it up to generate the new MozPrintStatus events instead.  Nothing is listening for those events yet; that will be part 3.\n\nI have fairly high confidence in this piece.", "count": 6, "author": "zackw@panix.com", "creator": "zackw@panix.com", "attachment_id": 627822}, {"id": 6343595, "time": "2012-05-29T00:42:48Z", "author": "zackw@panix.com", "text": "Created attachment 627824\n3/4: consume the new events in PrintUtils / browser.js\n\nAdd a new method to PrintUtils to consume the print status events and fly doorhanger notifications; wire that up in browser.js.\n\nA slight modification to PopupNotifications.jsm was required.  The print-progress doorhanger is dismissed by default, and repeatedly updated throughout the print job.  If the user clicks on the notification icon, the doorhanger should become visible and stay that way until they hide it again or cancel the job.  PopupNotifications was hiding the doorhanger as soon as the next update came in.  Besides being irritating this made it almost impossible to click the cancel button.  So I changed it so that if you replace a currently-visible doorhanger with a dismissed-by-default doorhanger, it stays visible.\n\nThis appears to work correctly for a regular print job.  However, for Print Preview, the doorhanger does not appear until *after* the print preview is dismissed, and it then claims that we are still preparing the print preview, and you can't get rid of it.  I do not know what is wrong here.  In extremis, perhaps we could just not do any notifications for print preview.\n\nIcons are acceptable for GTK, but moz-icon://stock/gtk-print?size=48 does not correctly pick up the 48x48 icon from the system theme, and I couldn't find the code for that, so instead I copied the icon that it should have used into gnomestripe.  It's CC-BY-SA3 or LGPL3.  I don't know if that's considered compatible with MPL2, but I figure we ought to fix the stock-icon handler anyway.\n\nI attempted to update the Mac and Windows themes as well, but I can't test the small icons (so they may not look quite right) and I could not find large printer icons consistent with the theme in general, so those are stubbed out.  I'm inclined to suggest that this be addressed in a follow-up bug assigned to someone who knows more about graphic design than me.  In any case it would be nice to have \"success\" and \"error\" variants of the base icon in all the stock themes, which is again not something I can easily do myself (except possibly if I can figure out how to persuade moz-icon: to support Gtk badged icons).", "count": 7, "is_private": false, "attachment_id": 627824, "tags": [], "creator": "zackw@panix.com", "bug_id": 650960, "creation_time": "2012-05-29T00:42:48Z", "raw_text": "Add a new method to PrintUtils to consume the print status events and fly doorhanger notifications; wire that up in browser.js.\n\nA slight modification to PopupNotifications.jsm was required.  The print-progress doorhanger is dismissed by default, and repeatedly updated throughout the print job.  If the user clicks on the notification icon, the doorhanger should become visible and stay that way until they hide it again or cancel the job.  PopupNotifications was hiding the doorhanger as soon as the next update came in.  Besides being irritating this made it almost impossible to click the cancel button.  So I changed it so that if you replace a currently-visible doorhanger with a dismissed-by-default doorhanger, it stays visible.\n\nThis appears to work correctly for a regular print job.  However, for Print Preview, the doorhanger does not appear until *after* the print preview is dismissed, and it then claims that we are still preparing the print preview, and you can't get rid of it.  I do not know what is wrong here.  In extremis, perhaps we could just not do any notifications for print preview.\n\nIcons are acceptable for GTK, but moz-icon://stock/gtk-print?size=48 does not correctly pick up the 48x48 icon from the system theme, and I couldn't find the code for that, so instead I copied the icon that it should have used into gnomestripe.  It's CC-BY-SA3 or LGPL3.  I don't know if that's considered compatible with MPL2, but I figure we ought to fix the stock-icon handler anyway.\n\nI attempted to update the Mac and Windows themes as well, but I can't test the small icons (so they may not look quite right) and I could not find large printer icons consistent with the theme in general, so those are stubbed out.  I'm inclined to suggest that this be addressed in a follow-up bug assigned to someone who knows more about graphic design than me.  In any case it would be nice to have \"success\" and \"error\" variants of the base icon in all the stock themes, which is again not something I can easily do myself (except possibly if I can figure out how to persuade moz-icon: to support Gtk badged icons)."}, {"text": "Created attachment 627827\n4/4: remove old print progress dialogs and related cruft\n\nFinally, here we get rid of the old print progress dialogs, and some related junk (e.g. nsIPrintStatusFeedback, nsIPrintingPrompt, and nsIContentViewerFile).\n\nBecause nsIPrintingPromptService is slated to be removed in bug 629500, I did not change its compile-time interface at all; I just gutted all the implementations of the methods that are no longer used.\n\nIn addition to the concerns described above re icons and print preview, this patchset may have consequences for comm-central applications.  They will, at a minimum, lose the old progress dialogs, need to connect up the new event to the new PrintUtils method to get the doorhangers, and provide appropriate graphic elements.  However, I don't even know whether Thunderbird, Seamonkey, et al *have* doorhangers at the moment.  I would appreciate advice on how to proceed.", "count": 8, "author": "zackw@panix.com", "creator": "zackw@panix.com", "attachment_id": 627827, "time": "2012-05-29T00:48:07Z", "id": 6343599, "bug_id": 650960, "creation_time": "2012-05-29T00:48:07Z", "raw_text": "Finally, here we get rid of the old print progress dialogs, and some related junk (e.g. nsIPrintStatusFeedback, nsIPrintingPrompt, and nsIContentViewerFile).\n\nBecause nsIPrintingPromptService is slated to be removed in bug 629500, I did not change its compile-time interface at all; I just gutted all the implementations of the methods that are no longer used.\n\nIn addition to the concerns described above re icons and print preview, this patchset may have consequences for comm-central applications.  They will, at a minimum, lose the old progress dialogs, need to connect up the new event to the new PrintUtils method to get the doorhangers, and provide appropriate graphic elements.  However, I don't even know whether Thunderbird, Seamonkey, et al *have* doorhangers at the moment.  I would appreciate advice on how to proceed.", "tags": [], "is_private": false}, {"text": "Comment on attachment 627821\n1/4: add new DOM event for print status\n\nReview of attachment 627821:\n-----------------------------------------------------------------\n\n::: dom/interfaces/events/nsIDOMPrintStatusEvent.idl\n@@ +62,5 @@\n> +  /**\n> +   * Details of the error.\n> +   * Only accessible when |status| == |ERROR|.\n> +   */\n> +  readonly attribute DOMString      errorMessage;\n\nIs this localized?", "count": 9, "id": 6343647, "author": "roc@ocallahan.org", "time": "2012-05-29T01:36:15Z", "creator": "roc@ocallahan.org", "tags": [], "raw_text": "Review of attachment 627821:\n-----------------------------------------------------------------\n\n::: dom/interfaces/events/nsIDOMPrintStatusEvent.idl\n@@ +62,5 @@\n> +  /**\n> +   * Details of the error.\n> +   * Only accessible when |status| == |ERROR|.\n> +   */\n> +  readonly attribute DOMString      errorMessage;\n\nIs this localized?", "bug_id": 650960, "creation_time": "2012-05-29T01:36:15Z", "is_private": false, "attachment_id": 627821}, {"creator": "roc@ocallahan.org", "tags": [], "raw_text": "Review of attachment 627822:\n-----------------------------------------------------------------\n\nr+ on the non-toolkit code, with those fixed.\n\nSomeone else needs to review the toolkit changes.\n\n::: layout/printing/nsPrintEngine.cpp\n@@ +538,5 @@\n>      // Check prefs for a default setting as to whether we should print silently\n>      printSilently =\n>        Preferences::GetBool(\"print.always_print_silent\", printSilently);\n>  \n> +    // If not printing silently, fly the platform print dialog\n\n\"fly\"? I think \"show\"\n\n::: layout/printing/nsPrintEngine.h\n@@ +149,5 @@\n>                               PRUnichar**       aURLStr,\n>                               eDocTitleDefault  aDefType);\n> +\n> +  static void FirePrintStatusEvent(nsIDocument    *aDoc,\n> +                                   bool            aIsPrinting,\n\nUse a flags word instead of a bool parameter.\n\n@@ +152,5 @@\n> +  static void FirePrintStatusEvent(nsIDocument    *aDoc,\n> +                                   bool            aIsPrinting,\n> +                                   PRUint32        aStatus,\n> +                                   PRUint32        aPageNo     = 0,\n> +                                   PRUint32        aPageMax    = 0,\n\naPagesComplete, aPagesTotal to match the IDL", "creation_time": "2012-05-29T01:51:54Z", "bug_id": 650960, "attachment_id": 627822, "is_private": false, "count": 10, "text": "Comment on attachment 627822\n2/4: change the print engine to generate the new events\n\nReview of attachment 627822:\n-----------------------------------------------------------------\n\nr+ on the non-toolkit code, with those fixed.\n\nSomeone else needs to review the toolkit changes.\n\n::: layout/printing/nsPrintEngine.cpp\n@@ +538,5 @@\n>      // Check prefs for a default setting as to whether we should print silently\n>      printSilently =\n>        Preferences::GetBool(\"print.always_print_silent\", printSilently);\n>  \n> +    // If not printing silently, fly the platform print dialog\n\n\"fly\"? I think \"show\"\n\n::: layout/printing/nsPrintEngine.h\n@@ +149,5 @@\n>                               PRUnichar**       aURLStr,\n>                               eDocTitleDefault  aDefType);\n> +\n> +  static void FirePrintStatusEvent(nsIDocument    *aDoc,\n> +                                   bool            aIsPrinting,\n\nUse a flags word instead of a bool parameter.\n\n@@ +152,5 @@\n> +  static void FirePrintStatusEvent(nsIDocument    *aDoc,\n> +                                   bool            aIsPrinting,\n> +                                   PRUint32        aStatus,\n> +                                   PRUint32        aPageNo     = 0,\n> +                                   PRUint32        aPageMax    = 0,\n\naPagesComplete, aPagesTotal to match the IDL", "id": 6343652, "author": "roc@ocallahan.org", "time": "2012-05-29T01:51:54Z"}, {"author": "roc@ocallahan.org", "time": "2012-05-29T01:54:48Z", "id": 6343658, "text": "Comment on attachment 627827\n4/4: remove old print progress dialogs and related cruft\n\nReview of attachment 627827:\n-----------------------------------------------------------------\n\noooh so good!\n\n::: layout/tools/layout-debug/src/nsRegressionTester.cpp\n@@ +94,5 @@\n>      docShell->GetContentViewer(getter_AddRefs(viewer));\n>      if (viewer){\n> +      nsCOMPtr<nsIDocumentViewerPrint> viewerPrint = do_QueryInterface(viewer);\n> +      if (viewerPrint) {\n> +         viewerPrint->DebugPrint(fp);\n\nFix indent", "count": 11, "attachment_id": 627827, "is_private": false, "raw_text": "Review of attachment 627827:\n-----------------------------------------------------------------\n\noooh so good!\n\n::: layout/tools/layout-debug/src/nsRegressionTester.cpp\n@@ +94,5 @@\n>      docShell->GetContentViewer(getter_AddRefs(viewer));\n>      if (viewer){\n> +      nsCOMPtr<nsIDocumentViewerPrint> viewerPrint = do_QueryInterface(viewer);\n> +      if (viewerPrint) {\n> +         viewerPrint->DebugPrint(fp);\n\nFix indent", "creation_time": "2012-05-29T01:54:48Z", "bug_id": 650960, "creator": "roc@ocallahan.org", "tags": []}, {"creator": "zackw@panix.com", "tags": [], "raw_text": "(In reply to Robert O'Callahan (:roc) (Mozilla Corporation) from comment #9)\n> > +  /**\n> > +   * Details of the error.\n> > +   * Only accessible when |status| == |ERROR|.\n> > +   */\n> > +  readonly attribute DOMString      errorMessage;\n> \n> Is this localized?\n\nOoh, good catch.  It is *not* localized; it is the stringification of the NS_ERROR_whatever constant.  This is because printUtils.js needs to special-case NS_ERROR_ABORT.  (Originally it *was* localized; I didn't realize the implication of consolidating the NS_ERROR_ABORT special case into printUtils until later.)  I would actually like to expose this as an nsresult value and do the string conversion (which is necessary in order to look up the real error message in the string bundle) in JS instead, but I don't know how to check whether all the necessary constants are reflected into Components.results (the print engine has a lot of its own error codes).\n\n(In reply to Robert O'Callahan (:roc) (Mozilla Corporation) from comment #10)\n> > +    // If not printing silently, fly the platform print dialog\n> \n> \"fly\"? I think \"show\"\n\nPreexisting terminology in print-dialog-related code, but I will change it anyway; whoever wrote most of the comments in these files was not on good terms with the muse of language.\n\n> > +  static void FirePrintStatusEvent(nsIDocument    *aDoc,\n> > +                                   bool            aIsPrinting,\n> \n> Use a flags word instead of a bool parameter.\n\nWhat future flags do you think we will need to add?\n\n> aPagesComplete, aPagesTotal to match the IDL\n\nCheck.\n\n> > +      if (viewerPrint) {\n> >  +         viewerPrint->DebugPrint(fp);\n> Fix indent\n\nCheck.", "bug_id": 650960, "creation_time": "2012-05-29T02:35:56Z", "is_private": false, "attachment_id": null, "text": "(In reply to Robert O'Callahan (:roc) (Mozilla Corporation) from comment #9)\n> > +  /**\n> > +   * Details of the error.\n> > +   * Only accessible when |status| == |ERROR|.\n> > +   */\n> > +  readonly attribute DOMString      errorMessage;\n> \n> Is this localized?\n\nOoh, good catch.  It is *not* localized; it is the stringification of the NS_ERROR_whatever constant.  This is because printUtils.js needs to special-case NS_ERROR_ABORT.  (Originally it *was* localized; I didn't realize the implication of consolidating the NS_ERROR_ABORT special case into printUtils until later.)  I would actually like to expose this as an nsresult value and do the string conversion (which is necessary in order to look up the real error message in the string bundle) in JS instead, but I don't know how to check whether all the necessary constants are reflected into Components.results (the print engine has a lot of its own error codes).\n\n(In reply to Robert O'Callahan (:roc) (Mozilla Corporation) from comment #10)\n> > +    // If not printing silently, fly the platform print dialog\n> \n> \"fly\"? I think \"show\"\n\nPreexisting terminology in print-dialog-related code, but I will change it anyway; whoever wrote most of the comments in these files was not on good terms with the muse of language.\n\n> > +  static void FirePrintStatusEvent(nsIDocument    *aDoc,\n> > +                                   bool            aIsPrinting,\n> \n> Use a flags word instead of a bool parameter.\n\nWhat future flags do you think we will need to add?\n\n> aPagesComplete, aPagesTotal to match the IDL\n\nCheck.\n\n> > +      if (viewerPrint) {\n> >  +         viewerPrint->DebugPrint(fp);\n> Fix indent\n\nCheck.", "count": 12, "id": 6343695, "author": "zackw@panix.com", "time": "2012-05-29T02:35:56Z"}, {"attachment_id": null, "is_private": false, "creator": "roc@ocallahan.org", "tags": [], "raw_text": "(In reply to Zack Weinberg (:zwol) from comment #12)\n> Ooh, good catch.  It is *not* localized; it is the stringification of the\n> NS_ERROR_whatever constant.  This is because printUtils.js needs to\n> special-case NS_ERROR_ABORT.  (Originally it *was* localized; I didn't\n> realize the implication of consolidating the NS_ERROR_ABORT special case\n> into printUtils until later.)  I would actually like to expose this as an\n> nsresult value and do the string conversion (which is necessary in order to\n> look up the real error message in the string bundle) in JS instead, but I\n> don't know how to check whether all the necessary constants are reflected\n> into Components.results (the print engine has a lot of its own error codes).\n\nSeems to me exposing the numeric error code makes sense. If we need to add new constants to Components.results, then we should do that.\n\n> > > +  static void FirePrintStatusEvent(nsIDocument    *aDoc,\n> > > +                                   bool            aIsPrinting,\n> > \n> > Use a flags word instead of a bool parameter.\n> \n> What future flags do you think we will need to add?\n\nI don't know but even a single flag makes for more readable callers than passing true/false.", "creation_time": "2012-05-29T02:39:16Z", "bug_id": 650960, "id": 6343700, "author": "roc@ocallahan.org", "time": "2012-05-29T02:39:16Z", "count": 13, "text": "(In reply to Zack Weinberg (:zwol) from comment #12)\n> Ooh, good catch.  It is *not* localized; it is the stringification of the\n> NS_ERROR_whatever constant.  This is because printUtils.js needs to\n> special-case NS_ERROR_ABORT.  (Originally it *was* localized; I didn't\n> realize the implication of consolidating the NS_ERROR_ABORT special case\n> into printUtils until later.)  I would actually like to expose this as an\n> nsresult value and do the string conversion (which is necessary in order to\n> look up the real error message in the string bundle) in JS instead, but I\n> don't know how to check whether all the necessary constants are reflected\n> into Components.results (the print engine has a lot of its own error codes).\n\nSeems to me exposing the numeric error code makes sense. If we need to add new constants to Components.results, then we should do that.\n\n> > > +  static void FirePrintStatusEvent(nsIDocument    *aDoc,\n> > > +                                   bool            aIsPrinting,\n> > \n> > Use a flags word instead of a bool parameter.\n> \n> What future flags do you think we will need to add?\n\nI don't know but even a single flag makes for more readable callers than passing true/false."}, {"is_private": false, "attachment_id": null, "bug_id": 650960, "creation_time": "2012-05-29T03:20:08Z", "raw_text": "(In reply to Robert O'Callahan (:roc) (Mozilla Corporation) from comment #13)\n> \n> Seems to me exposing the numeric error code makes sense. If we need to add\n> new constants to Components.results, then we should do that.\n\nOK, I found xpc.msg and I'll see what I can do.\n\n> > What future flags do you think we will need to add?\n> \n> I don't know but even a single flag makes for more readable callers than\n> passing true/false.\n\nAll callers in this case have an \"is printing\" boolean, so having to write \"isPrinting ? FLAG_IS_PRINTING : FLAG_PRINT_PREVIEW\" would actually hurt readability.", "tags": [], "creator": "zackw@panix.com", "time": "2012-05-29T03:20:08Z", "author": "zackw@panix.com", "id": 6343746, "text": "(In reply to Robert O'Callahan (:roc) (Mozilla Corporation) from comment #13)\n> \n> Seems to me exposing the numeric error code makes sense. If we need to add\n> new constants to Components.results, then we should do that.\n\nOK, I found xpc.msg and I'll see what I can do.\n\n> > What future flags do you think we will need to add?\n> \n> I don't know but even a single flag makes for more readable callers than\n> passing true/false.\n\nAll callers in this case have an \"is printing\" boolean, so having to write \"isPrinting ? FLAG_IS_PRINTING : FLAG_PRINT_PREVIEW\" would actually hurt readability.", "count": 14}, {"text": "I saw at least one place you're passing false. But OK, I'll let it slide :-)", "count": 15, "time": "2012-05-29T03:41:43Z", "author": "roc@ocallahan.org", "id": 6343760, "creation_time": "2012-05-29T03:41:43Z", "bug_id": 650960, "raw_text": "I saw at least one place you're passing false. But OK, I'll let it slide :-)", "tags": [], "creator": "roc@ocallahan.org", "attachment_id": null, "is_private": false}, {"is_private": false, "raw_text": ">--- a/toolkit/components/printing/content/printUtils.js\n>+++ b/toolkit/components/printing/content/printUtils.js\n\n>+    PopupNotifications.show(browser, _id, message, _anchor,\n>+                            action, null,\n>+                            { persistence: 0,\n>+                              persistWhileVisible: false,\n>+                              dismissed: !done,\n>+                              removeOnDismissal: done });\n\nPopupNotifications isn't guaranteed to exist here. printUtils.js is used in way more contexts than just browser.xul.\n\nThis also needs UI review. I'm not convinced that this is going to provide a better user experience.", "bug_id": 650960, "creation_time": "2012-05-29T07:47:50Z", "tags": [], "time": "2012-05-29T07:47:50Z", "id": 6343966, "attachment_id": 627824, "creator": "dao+bmo@mozilla.com", "author": "dao+bmo@mozilla.com", "count": 16, "text": "Comment on attachment 627824\n3/4: consume the new events in PrintUtils / browser.js\n\n>--- a/toolkit/components/printing/content/printUtils.js\n>+++ b/toolkit/components/printing/content/printUtils.js\n\n>+    PopupNotifications.show(browser, _id, message, _anchor,\n>+                            action, null,\n>+                            { persistence: 0,\n>+                              persistWhileVisible: false,\n>+                              dismissed: !done,\n>+                              removeOnDismissal: done });\n\nPopupNotifications isn't guaranteed to exist here. printUtils.js is used in way more contexts than just browser.xul.\n\nThis also needs UI review. I'm not convinced that this is going to provide a better user experience."}, {"creator": "neil@httl.net", "attachment_id": null, "text": "(In reply to D\u00e3o Gottwald from comment #16)\n> (From update of attachment 627824)\n> PopupNotifications isn't guaranteed to exist here. printUtils.js is used in\n> way more contexts than just browser.xul.\nIn SeaMonkey alone for instance, I quickly found the following places:\n* In the browser, where popup notifications can be disabled (!)\n* In view source\n* In web composer\n* In the mail reader\n* In mail composition\n* In address book", "count": 17, "author": "neil@httl.net", "creation_time": "2012-05-29T08:20:01Z", "bug_id": 650960, "raw_text": "(In reply to D\u00e3o Gottwald from comment #16)\n> (From update of attachment 627824)\n> PopupNotifications isn't guaranteed to exist here. printUtils.js is used in\n> way more contexts than just browser.xul.\nIn SeaMonkey alone for instance, I quickly found the following places:\n* In the browser, where popup notifications can be disabled (!)\n* In view source\n* In web composer\n* In the mail reader\n* In mail composition\n* In address book", "tags": [], "is_private": false, "time": "2012-05-29T08:20:01Z", "id": 6344007}, {"creation_time": "2012-05-29T15:00:10Z", "bug_id": 650960, "raw_text": "PopupNotifications only gets used if you install printStatusEventsToPopups as a  listener for MozPrintStatus events.  Currently, the only place that does that is Firefox's browser.js.  The theory is that any other Gecko application that also had the PopupNotifications interface can also use printStatusEventsToPopups (which is why it's not in browser.js).\n\nApplications that don't have PopupNotifications need to write their own MozPrintStatus event listener, and (assuming this patch series lands) will lose print progress updates until they do.  But they won't crash.\n\nI am happy to discuss UI adjustments and to assist with the writing of appropriate event listeners for comm-central applications.", "tags": [], "creator": "zackw@panix.com", "attachment_id": 627824, "is_private": false, "text": "Comment on attachment 627824\n3/4: consume the new events in PrintUtils / browser.js\n\nPopupNotifications only gets used if you install printStatusEventsToPopups as a  listener for MozPrintStatus events.  Currently, the only place that does that is Firefox's browser.js.  The theory is that any other Gecko application that also had the PopupNotifications interface can also use printStatusEventsToPopups (which is why it's not in browser.js).\n\nApplications that don't have PopupNotifications need to write their own MozPrintStatus event listener, and (assuming this patch series lands) will lose print progress updates until they do.  But they won't crash.\n\nI am happy to discuss UI adjustments and to assist with the writing of appropriate event listeners for comm-central applications.", "count": 18, "time": "2012-05-29T15:00:10Z", "author": "zackw@panix.com", "id": 6344806}, {"bug_id": 650960, "creation_time": "2012-05-29T16:11:03Z", "raw_text": "(In reply to Zack Weinberg (:zwol) from comment #18)\n> The theory is that any other Gecko\n> application that also had the PopupNotifications interface can also use\n> printStatusEventsToPopups (which is why it's not in browser.js).\n\nPopupNotifications is a random variable in browser.js, not part of any interface.\nI'm also not sure that it's reasonable to expect windows without a tabbrowser to use PopupNotifications.jsm.\n\n> Applications that don't have PopupNotifications need to write their own MozPrintStatus\n> event listener, and (assuming this patch series lands) will lose print progress updates\n> until they do.\n\nThese alternatives don't seem reasonable, given that (1) writing custom UIs for this isn't trivial and (2) we've already determined that we don't want to remove progress updates as the printed documents need to remain open until the progress finished (which, by the way, your popup notification doesn't really ensure, does it?).\n\n> I am happy to discuss UI adjustments and to assist with the writing of appropriate\n> event listeners for comm-central applications.\n\nNote that this also affects features on mozilla-central and add-ons.", "tags": [], "creator": "dao+bmo@mozilla.com", "attachment_id": null, "is_private": false, "count": 19, "text": "(In reply to Zack Weinberg (:zwol) from comment #18)\n> The theory is that any other Gecko\n> application that also had the PopupNotifications interface can also use\n> printStatusEventsToPopups (which is why it's not in browser.js).\n\nPopupNotifications is a random variable in browser.js, not part of any interface.\nI'm also not sure that it's reasonable to expect windows without a tabbrowser to use PopupNotifications.jsm.\n\n> Applications that don't have PopupNotifications need to write their own MozPrintStatus\n> event listener, and (assuming this patch series lands) will lose print progress updates\n> until they do.\n\nThese alternatives don't seem reasonable, given that (1) writing custom UIs for this isn't trivial and (2) we've already determined that we don't want to remove progress updates as the printed documents need to remain open until the progress finished (which, by the way, your popup notification doesn't really ensure, does it?).\n\n> I am happy to discuss UI adjustments and to assist with the writing of appropriate\n> event listeners for comm-central applications.\n\nNote that this also affects features on mozilla-central and add-ons.", "time": "2012-05-29T16:11:03Z", "author": "dao+bmo@mozilla.com", "id": 6345071}, {"bug_id": 650960, "creation_time": "2012-05-29T16:23:51Z", "raw_text": "> Note that this also affects features on mozilla-central and add-ons.\nCC jorgev", "tags": [], "is_private": false, "time": "2012-05-29T16:23:51Z", "id": 6345129, "creator": "philip.chee@gmail.com", "attachment_id": null, "count": 20, "text": "> Note that this also affects features on mozilla-central and add-ons.\nCC jorgev", "author": "philip.chee@gmail.com"}, {"bug_id": 650960, "creation_time": "2012-05-29T16:37:56Z", "raw_text": "(In reply to D\u00e3o Gottwald [:dao] from comment #19)\n> (In reply to Zack Weinberg (:zwol) from comment #18)\n> > The theory is that any other Gecko\n> > application that also had the PopupNotifications interface can also use\n> > printStatusEventsToPopups (which is why it's not in browser.js).\n> \n> PopupNotifications is a random variable in browser.js, not part of any\n> interface.\n\nIs it?  The documentation on MDN ( https://developer.mozilla.org/en/Using_popup_notifications ) says \"[PopupNotifications.jsm] is imported by the browser, you don't have to do it yourself.\"  An earlier revision of this patch had a a Cu.import() call inside printStatusEventsToPopups, for great defensiveness, but that produced nonsense errors which went away when I removed it.\n\n> I'm also not sure that it's reasonable to expect windows without a\n> tabbrowser to use PopupNotifications.jsm.\n\nIndeed, there may be a problem even in Firefox with (at least) view source windows.  I am, however, inclined to fix this by making it work somehow and/or by finding an alternative to the use of PopupNotifications.jsm but preserving the architectural scheme of DOM events fired at the <browser> instead of this modal fake web progress listener crap that we have now.\n\n> > Applications that don't have PopupNotifications need to write their own MozPrintStatus\n> > event listener, and (assuming this patch series lands) will lose print progress updates\n> > until they do.\n> \n> These alternatives don't seem reasonable, given that (1) writing custom UIs\n> for this isn't trivial\n\nWhat would you suggest?  I do not want to give up on the architectural change (parts 1, 2, and 4).\n\n> and (2) we've already determined that we don't want\n> to remove progress updates as the printed documents need to remain open\n> until the progress finished (which, by the way, your popup notification\n> doesn't really ensure, does it?).\n\nI haven't looked into what (if anything) keeps the document open *now*, but I think that is properly the document viewer's job (or the docshell or something in the same general ballpark; the document viewer in particular is aware of when print operations begin and end), and affects the UI only insofar as a window/tab that cannot be closed right now needs to have some visible marker so the user doesn't get confused.  I will investigate and possibly file more bugs.\n \n> > I am happy to discuss UI adjustments and to assist with the writing of appropriate\n> > event listeners for comm-central applications.\n> \n> Note that this also affects features on mozilla-central and add-ons.\n\nAre we reaching the point where this needs to go back to the newsgroups?  Not that I got very far trying to discuss this on the newsgroups last time.  It is also possible for me to turn up at the MV office if we need to work out a plan in person.", "tags": [], "creator": "zackw@panix.com", "is_private": false, "attachment_id": null, "text": "(In reply to D\u00e3o Gottwald [:dao] from comment #19)\n> (In reply to Zack Weinberg (:zwol) from comment #18)\n> > The theory is that any other Gecko\n> > application that also had the PopupNotifications interface can also use\n> > printStatusEventsToPopups (which is why it's not in browser.js).\n> \n> PopupNotifications is a random variable in browser.js, not part of any\n> interface.\n\nIs it?  The documentation on MDN ( https://developer.mozilla.org/en/Using_popup_notifications ) says \"[PopupNotifications.jsm] is imported by the browser, you don't have to do it yourself.\"  An earlier revision of this patch had a a Cu.import() call inside printStatusEventsToPopups, for great defensiveness, but that produced nonsense errors which went away when I removed it.\n\n> I'm also not sure that it's reasonable to expect windows without a\n> tabbrowser to use PopupNotifications.jsm.\n\nIndeed, there may be a problem even in Firefox with (at least) view source windows.  I am, however, inclined to fix this by making it work somehow and/or by finding an alternative to the use of PopupNotifications.jsm but preserving the architectural scheme of DOM events fired at the <browser> instead of this modal fake web progress listener crap that we have now.\n\n> > Applications that don't have PopupNotifications need to write their own MozPrintStatus\n> > event listener, and (assuming this patch series lands) will lose print progress updates\n> > until they do.\n> \n> These alternatives don't seem reasonable, given that (1) writing custom UIs\n> for this isn't trivial\n\nWhat would you suggest?  I do not want to give up on the architectural change (parts 1, 2, and 4).\n\n> and (2) we've already determined that we don't want\n> to remove progress updates as the printed documents need to remain open\n> until the progress finished (which, by the way, your popup notification\n> doesn't really ensure, does it?).\n\nI haven't looked into what (if anything) keeps the document open *now*, but I think that is properly the document viewer's job (or the docshell or something in the same general ballpark; the document viewer in particular is aware of when print operations begin and end), and affects the UI only insofar as a window/tab that cannot be closed right now needs to have some visible marker so the user doesn't get confused.  I will investigate and possibly file more bugs.\n \n> > I am happy to discuss UI adjustments and to assist with the writing of appropriate\n> > event listeners for comm-central applications.\n> \n> Note that this also affects features on mozilla-central and add-ons.\n\nAre we reaching the point where this needs to go back to the newsgroups?  Not that I got very far trying to discuss this on the newsgroups last time.  It is also possible for me to turn up at the MV office if we need to work out a plan in person.", "count": 21, "time": "2012-05-29T16:37:56Z", "author": "zackw@panix.com", "id": 6345193}, {"attachment_id": null, "creator": "jorgev@fastmail.fm", "author": "jorgev@fastmail.fm", "text": "There are almost no add-ons related to printing, but it's still good to communicate this to add-on devs (specially theme devs) when it lands.", "count": 22, "is_private": false, "bug_id": 650960, "creation_time": "2012-05-29T20:16:08Z", "raw_text": "There are almost no add-ons related to printing, but it's still good to communicate this to add-on devs (specially theme devs) when it lands.", "tags": [], "time": "2012-05-29T20:16:08Z", "id": 6346214}, {"tags": [], "raw_text": "(In reply to Zack Weinberg (:zwol) from comment #21)\n> (In reply to D\u00e3o Gottwald [:dao] from comment #19)\n> > PopupNotifications is a random variable in browser.js, not part of any\n> > interface.\n> \n> Is it?  The documentation on MDN (\n> https://developer.mozilla.org/en/Using_popup_notifications ) says\n> \"[PopupNotifications.jsm] is imported by the browser, you don't have to do\n> it yourself.\"\n\n\"the browser\" means browser.js here, so this is more or less in line with what I said. browser.js imports PopupNotifications.jsm, creates a PopupNotifications instance and happens to name it PopupNotifications.\n\n> > I'm also not sure that it's reasonable to expect windows without a\n> > tabbrowser to use PopupNotifications.jsm.\n> \n> Indeed, there may be a problem even in Firefox with (at least) view source\n> windows.  I am, however, inclined to fix this by making it work somehow\n> and/or by finding an alternative to the use of PopupNotifications.jsm but\n> preserving the architectural scheme of DOM events fired at the <browser>\n> instead of this modal fake web progress listener crap that we have now.\n\nCan printPreviewProgress.js be changed to using an event listener?\n\n> > and (2) we've already determined that we don't want\n> > to remove progress updates as the printed documents need to remain open\n> > until the progress finished (which, by the way, your popup notification\n> > doesn't really ensure, does it?).\n> \n> I haven't looked into what (if anything) keeps the document open *now*, but\n> I think that is properly the document viewer's job (or the docshell or\n> something in the same general ballpark; the document viewer in particular is\n> aware of when print operations begin and end), and affects the UI only\n> insofar as a window/tab that cannot be closed right now needs to have some\n> visible marker so the user doesn't get confused.  I will investigate and\n> possibly file more bugs.\n\nAre you saying that the tab or window couldn't be closed even without the modal dialog? I was under the impression that it could be closed and that the print job would fail.\n\n> Are we reaching the point where this needs to go back to the newsgroups?\n\nI'll leave that to you. We can keep discussing here if you think it won't hinder the actual work too much.\n\n> It is also possible for me to turn up at the MV office if we need to work\n> out a plan in person.\n\nI'm in Germany...\n\n(In reply to Jorge Villalobos [:jorgev] from comment #22)\n> There are almost no add-ons related to printing, but it's still good to\n> communicate this to add-on devs (specially theme devs) when it lands.\n\nNot sure what you mean by \"related to printing\"; I was talking about add-ons that simply display stuff and allow the user to print it.", "creation_time": "2012-05-29T23:42:35Z", "bug_id": 650960, "is_private": false, "id": 6346982, "time": "2012-05-29T23:42:35Z", "creator": "dao+bmo@mozilla.com", "attachment_id": null, "count": 23, "text": "(In reply to Zack Weinberg (:zwol) from comment #21)\n> (In reply to D\u00e3o Gottwald [:dao] from comment #19)\n> > PopupNotifications is a random variable in browser.js, not part of any\n> > interface.\n> \n> Is it?  The documentation on MDN (\n> https://developer.mozilla.org/en/Using_popup_notifications ) says\n> \"[PopupNotifications.jsm] is imported by the browser, you don't have to do\n> it yourself.\"\n\n\"the browser\" means browser.js here, so this is more or less in line with what I said. browser.js imports PopupNotifications.jsm, creates a PopupNotifications instance and happens to name it PopupNotifications.\n\n> > I'm also not sure that it's reasonable to expect windows without a\n> > tabbrowser to use PopupNotifications.jsm.\n> \n> Indeed, there may be a problem even in Firefox with (at least) view source\n> windows.  I am, however, inclined to fix this by making it work somehow\n> and/or by finding an alternative to the use of PopupNotifications.jsm but\n> preserving the architectural scheme of DOM events fired at the <browser>\n> instead of this modal fake web progress listener crap that we have now.\n\nCan printPreviewProgress.js be changed to using an event listener?\n\n> > and (2) we've already determined that we don't want\n> > to remove progress updates as the printed documents need to remain open\n> > until the progress finished (which, by the way, your popup notification\n> > doesn't really ensure, does it?).\n> \n> I haven't looked into what (if anything) keeps the document open *now*, but\n> I think that is properly the document viewer's job (or the docshell or\n> something in the same general ballpark; the document viewer in particular is\n> aware of when print operations begin and end), and affects the UI only\n> insofar as a window/tab that cannot be closed right now needs to have some\n> visible marker so the user doesn't get confused.  I will investigate and\n> possibly file more bugs.\n\nAre you saying that the tab or window couldn't be closed even without the modal dialog? I was under the impression that it could be closed and that the print job would fail.\n\n> Are we reaching the point where this needs to go back to the newsgroups?\n\nI'll leave that to you. We can keep discussing here if you think it won't hinder the actual work too much.\n\n> It is also possible for me to turn up at the MV office if we need to work\n> out a plan in person.\n\nI'm in Germany...\n\n(In reply to Jorge Villalobos [:jorgev] from comment #22)\n> There are almost no add-ons related to printing, but it's still good to\n> communicate this to add-on devs (specially theme devs) when it lands.\n\nNot sure what you mean by \"related to printing\"; I was talking about add-ons that simply display stuff and allow the user to print it.", "author": "dao+bmo@mozilla.com"}, {"text": "(In reply to D\u00e3o Gottwald [:dao] from comment #23)\n> \"the browser\" means browser.js here, so this is more or less in line with\n> what I said. browser.js imports PopupNotifications.jsm, creates a\n> PopupNotifications instance and happens to name it PopupNotifications.\n\nThe documentation gives the strong and IMHO reasonable impression that code in Firefox can count on that instance being named PopupNotifications, i.e., it's not a \"just happens to\", it's part of browser.js's contract with extensions.\n\n> Can printPreviewProgress.js be changed to using an event listener?\n\nWell, it would amount to rewriting the thing from scratch, but I suppose we could have a stock event listener for MozPaintEvent that put up modal dialog boxes, but I would like to at least *try* to find an alternative non-modal presentation.  How ubiquitous are the slide-down notification bars?\n\n> > I haven't looked into what (if anything) keeps the document open *now*, but\n> > I think that is properly the document viewer's job (or the docshell or\n> > something in the same general ballpark...)\n> \n> Are you saying that the tab or window couldn't be closed even without the\n> modal dialog? I was under the impression that it could be closed and that\n> the print job would fail.\n\nI am saying that if the tab or window can be closed in the absence of the modal dialog, we should fix that rather than treating it as a reason to keep the modal dialog box around.\n\n> I'll leave that to you. We can keep discussing here if you think it won't\n> hinder the actual work too much.\n\nI'd actually prefer here...", "count": 24, "time": "2012-05-30T03:51:03Z", "author": "zackw@panix.com", "id": 6347430, "bug_id": 650960, "creation_time": "2012-05-30T03:51:03Z", "raw_text": "(In reply to D\u00e3o Gottwald [:dao] from comment #23)\n> \"the browser\" means browser.js here, so this is more or less in line with\n> what I said. browser.js imports PopupNotifications.jsm, creates a\n> PopupNotifications instance and happens to name it PopupNotifications.\n\nThe documentation gives the strong and IMHO reasonable impression that code in Firefox can count on that instance being named PopupNotifications, i.e., it's not a \"just happens to\", it's part of browser.js's contract with extensions.\n\n> Can printPreviewProgress.js be changed to using an event listener?\n\nWell, it would amount to rewriting the thing from scratch, but I suppose we could have a stock event listener for MozPaintEvent that put up modal dialog boxes, but I would like to at least *try* to find an alternative non-modal presentation.  How ubiquitous are the slide-down notification bars?\n\n> > I haven't looked into what (if anything) keeps the document open *now*, but\n> > I think that is properly the document viewer's job (or the docshell or\n> > something in the same general ballpark...)\n> \n> Are you saying that the tab or window couldn't be closed even without the\n> modal dialog? I was under the impression that it could be closed and that\n> the print job would fail.\n\nI am saying that if the tab or window can be closed in the absence of the modal dialog, we should fix that rather than treating it as a reason to keep the modal dialog box around.\n\n> I'll leave that to you. We can keep discussing here if you think it won't\n> hinder the actual work too much.\n\nI'd actually prefer here...", "tags": [], "creator": "zackw@panix.com", "is_private": false, "attachment_id": null}, {"tags": [], "raw_text": "A bit swamped right now, and Olli would make a better reviewer anyway.", "bug_id": 650960, "creation_time": "2012-05-30T08:41:57Z", "is_private": false, "id": 6347876, "time": "2012-05-30T08:41:57Z", "creator": "jonas@sicking.cc", "attachment_id": 627821, "count": 25, "text": "Comment on attachment 627821\n1/4: add new DOM event for print status\n\nA bit swamped right now, and Olli would make a better reviewer anyway.", "author": "jonas@sicking.cc"}, {"time": "2012-05-30T11:12:22Z", "author": "dao+bmo@mozilla.com", "id": 6348098, "count": 26, "text": "(In reply to Zack Weinberg (:zwol) from comment #24)\n> (In reply to D\u00e3o Gottwald [:dao] from comment #23)\n> > \"the browser\" means browser.js here, so this is more or less in line with\n> > what I said. browser.js imports PopupNotifications.jsm, creates a\n> > PopupNotifications instance and happens to name it PopupNotifications.\n> \n> The documentation gives the strong and IMHO reasonable impression that code\n> in Firefox can count on that instance being named PopupNotifications, i.e.,\n> it's not a \"just happens to\", it's part of browser.js's contract with\n> extensions.\n\nbrowser.js is one PopupNotifications.jsm consumer. It exposes its PopupNotifications instance with a certain name, which code living in the same window as browser.js can count on. This isn't according to any \"PopupNotifications interface\".\n\n> > Can printPreviewProgress.js be changed to using an event listener?\n> \n> Well, it would amount to rewriting the thing from scratch, but I suppose we\n> could have a stock event listener for MozPaintEvent that put up modal dialog\n> boxes, but I would like to at least *try* to find an alternative non-modal\n> presentation.  How ubiquitous are the slide-down notification bars?\n\nThey aren't ubiquitous, and they would have the same flaw as the popup notification:\n\n> I am saying that if the tab or window can be closed in the absence of the\n> modal dialog, we should fix that rather than treating it as a reason to keep\n> the modal dialog box around.\n\nFix it how? We shouldn't introduce footguns, so until we've found a better way, it's a reason to keep the modal dialog around. There's a good chance that users won't actually be interested in tracking the progress; just showing it somewhere isn't going to prevent them from thinking that they can close the document now that they've triggered the print job.", "is_private": false, "attachment_id": null, "creation_time": "2012-05-30T11:12:22Z", "bug_id": 650960, "raw_text": "(In reply to Zack Weinberg (:zwol) from comment #24)\n> (In reply to D\u00e3o Gottwald [:dao] from comment #23)\n> > \"the browser\" means browser.js here, so this is more or less in line with\n> > what I said. browser.js imports PopupNotifications.jsm, creates a\n> > PopupNotifications instance and happens to name it PopupNotifications.\n> \n> The documentation gives the strong and IMHO reasonable impression that code\n> in Firefox can count on that instance being named PopupNotifications, i.e.,\n> it's not a \"just happens to\", it's part of browser.js's contract with\n> extensions.\n\nbrowser.js is one PopupNotifications.jsm consumer. It exposes its PopupNotifications instance with a certain name, which code living in the same window as browser.js can count on. This isn't according to any \"PopupNotifications interface\".\n\n> > Can printPreviewProgress.js be changed to using an event listener?\n> \n> Well, it would amount to rewriting the thing from scratch, but I suppose we\n> could have a stock event listener for MozPaintEvent that put up modal dialog\n> boxes, but I would like to at least *try* to find an alternative non-modal\n> presentation.  How ubiquitous are the slide-down notification bars?\n\nThey aren't ubiquitous, and they would have the same flaw as the popup notification:\n\n> I am saying that if the tab or window can be closed in the absence of the\n> modal dialog, we should fix that rather than treating it as a reason to keep\n> the modal dialog box around.\n\nFix it how? We shouldn't introduce footguns, so until we've found a better way, it's a reason to keep the modal dialog around. There's a good chance that users won't actually be interested in tracking the progress; just showing it somewhere isn't going to prevent them from thinking that they can close the document now that they've triggered the print job.", "tags": [], "creator": "dao+bmo@mozilla.com"}, {"attachment_id": null, "creator": "zackw@panix.com", "author": "zackw@panix.com", "text": "(In reply to D\u00e3o Gottwald [:dao] from comment #26)\n> (In reply to Zack Weinberg (:zwol) from comment #24)\n> > The documentation gives the strong and IMHO reasonable impression that code\n> > in Firefox can count on that instance being named PopupNotifications, i.e.,\n> > it's not a \"just happens to\", it's part of browser.js's contract with\n> > extensions.\n> \n> browser.js is one PopupNotifications.jsm consumer. It exposes its\n> PopupNotifications instance with a certain name, which code living in the\n> same window as browser.js can count on. This isn't according to any\n> \"PopupNotifications interface\".\n\nI feel like we're talking past each other.  Are you trying to say that the code that's currently in printUtils.js needs to get at PopupNotifications.jsm some other way?  If so, how?\n\n> > I am saying that if the tab or window can be closed in the absence of the\n> > modal dialog, we should fix that rather than treating it as a reason to keep\n> > the modal dialog box around.\n> \n> Fix it how? We shouldn't introduce footguns, so until we've found a better\n> way, it's a reason to keep the modal dialog around.\n\nI won't have time to look into this properly in the next few days, but I suspect it is a matter of adding a few lines of code to the document viewer.  It is aware of when printing begins and ends, and it certainly ought to be in a position to cancel a window close.", "count": 27, "is_private": false, "tags": [], "raw_text": "(In reply to D\u00e3o Gottwald [:dao] from comment #26)\n> (In reply to Zack Weinberg (:zwol) from comment #24)\n> > The documentation gives the strong and IMHO reasonable impression that code\n> > in Firefox can count on that instance being named PopupNotifications, i.e.,\n> > it's not a \"just happens to\", it's part of browser.js's contract with\n> > extensions.\n> \n> browser.js is one PopupNotifications.jsm consumer. It exposes its\n> PopupNotifications instance with a certain name, which code living in the\n> same window as browser.js can count on. This isn't according to any\n> \"PopupNotifications interface\".\n\nI feel like we're talking past each other.  Are you trying to say that the code that's currently in printUtils.js needs to get at PopupNotifications.jsm some other way?  If so, how?\n\n> > I am saying that if the tab or window can be closed in the absence of the\n> > modal dialog, we should fix that rather than treating it as a reason to keep\n> > the modal dialog box around.\n> \n> Fix it how? We shouldn't introduce footguns, so until we've found a better\n> way, it's a reason to keep the modal dialog around.\n\nI won't have time to look into this properly in the next few days, but I suspect it is a matter of adding a few lines of code to the document viewer.  It is aware of when printing begins and ends, and it certainly ought to be in a position to cancel a window close.", "creation_time": "2012-05-30T15:07:29Z", "bug_id": 650960, "id": 6348623, "time": "2012-05-30T15:07:29Z"}, {"id": 6348771, "time": "2012-05-30T15:41:46Z", "tags": [], "bug_id": 650960, "creation_time": "2012-05-30T15:41:46Z", "raw_text": "(In reply to D\u00e3o Gottwald [:dao] from comment #23)\n> (In reply to Jorge Villalobos [:jorgev] from comment #22)\n> > There are almost no add-ons related to printing, but it's still good to\n> > communicate this to add-on devs (specially theme devs) when it lands.\n> \n> Not sure what you mean by \"related to printing\"; I was talking about add-ons\n> that simply display stuff and allow the user to print it.\n\nI was referring to add-ons that make changes to the print flow. I know of one that allows you to modify the webpage and remove some elements before the page is printed.\n\nI've never seen an add-on that gives users the possibility to print custom stuff it is displaying, but it's possible there are a few.", "is_private": false, "text": "(In reply to D\u00e3o Gottwald [:dao] from comment #23)\n> (In reply to Jorge Villalobos [:jorgev] from comment #22)\n> > There are almost no add-ons related to printing, but it's still good to\n> > communicate this to add-on devs (specially theme devs) when it lands.\n> \n> Not sure what you mean by \"related to printing\"; I was talking about add-ons\n> that simply display stuff and allow the user to print it.\n\nI was referring to add-ons that make changes to the print flow. I know of one that allows you to modify the webpage and remove some elements before the page is printed.\n\nI've never seen an add-on that gives users the possibility to print custom stuff it is displaying, but it's possible there are a few.", "count": 28, "author": "jorgev@fastmail.fm", "creator": "jorgev@fastmail.fm", "attachment_id": null}, {"time": "2012-06-04T09:15:33Z", "id": 6360591, "raw_text": ">+nsresult\n>+NS_NewDOMPrintStatusEvent(nsIDOMEvent** aInstancePtrResult,\n>+                          nsPresContext* aPresContext,\n>+                          bool     aIsPrinting,\n>+                          PRUint32 aStatus,\n>+                          PRUint32 aPagesComplete,\n>+                          PRUint32 aPagesTotal,\n>+                          nsresult aErrorCode)\n>+{\n>+  /* sanity checks */\n>+  if (aStatus == nsIDOMPrintStatusEvent::ERROR && NS_SUCCEEDED(aErrorCode))\n>+    return NS_ERROR_INVALID_ARG;\nif (expr) {\n  stmt;\n}\nsame also elsewhere.\n\n\n>+nsDOMPrintStatusEvent::GetIsPrinting(bool *aIsPrinting)\nNit, bool*\nSame also elsewhere\n\n\n>+/* readonly attribute unsigned long pagesComplete; */\n>+NS_IMETHODIMP\n>+nsDOMPrintStatusEvent::GetPagesComplete(PRUint32 *aPagesComplete)\n>+{\n>+  if (mStatus != nsIDOMPrintStatusEvent::PAGE_COMPLETE)\n>+    return NS_ERROR_NOT_AVAILABLE;\nAPIs which throw even in somewhat normal case are annoying.\nreturning 0 is cases we don't know the answer should be ok.\nSame also elsewhere.\n\n\n+\n>+/* readonly attribute DOMString errorMessage; */\n>+NS_IMETHODIMP\n>+nsDOMPrintStatusEvent::GetErrorMessage(nsAString &aErrorMessage)\n>+{\nSo this should return some error value, not string.", "creation_time": "2012-06-04T09:15:33Z", "bug_id": 650960, "tags": [], "is_private": false, "text": "Comment on attachment 627821\n1/4: add new DOM event for print status\n\n>+nsresult\n>+NS_NewDOMPrintStatusEvent(nsIDOMEvent** aInstancePtrResult,\n>+                          nsPresContext* aPresContext,\n>+                          bool     aIsPrinting,\n>+                          PRUint32 aStatus,\n>+                          PRUint32 aPagesComplete,\n>+                          PRUint32 aPagesTotal,\n>+                          nsresult aErrorCode)\n>+{\n>+  /* sanity checks */\n>+  if (aStatus == nsIDOMPrintStatusEvent::ERROR && NS_SUCCEEDED(aErrorCode))\n>+    return NS_ERROR_INVALID_ARG;\nif (expr) {\n  stmt;\n}\nsame also elsewhere.\n\n\n>+nsDOMPrintStatusEvent::GetIsPrinting(bool *aIsPrinting)\nNit, bool*\nSame also elsewhere\n\n\n>+/* readonly attribute unsigned long pagesComplete; */\n>+NS_IMETHODIMP\n>+nsDOMPrintStatusEvent::GetPagesComplete(PRUint32 *aPagesComplete)\n>+{\n>+  if (mStatus != nsIDOMPrintStatusEvent::PAGE_COMPLETE)\n>+    return NS_ERROR_NOT_AVAILABLE;\nAPIs which throw even in somewhat normal case are annoying.\nreturning 0 is cases we don't know the answer should be ok.\nSame also elsewhere.\n\n\n+\n>+/* readonly attribute DOMString errorMessage; */\n>+NS_IMETHODIMP\n>+nsDOMPrintStatusEvent::GetErrorMessage(nsAString &aErrorMessage)\n>+{\nSo this should return some error value, not string.", "count": 29, "author": "bugs@pettay.fi", "creator": "bugs@pettay.fi", "attachment_id": 627821}, {"text": "Created attachment 723258\npart 1a: new DOM events for print progress and error reporting\n\nI'm still tinkering with the code that will _use_ these events, but since events seem to be in flux, I thought it might be a good idea to post them for review now.\n\nMajor change from the previous iteration of this patch is that there are three event types instead of a primary status code.  This bakes a bunch of consistency checking into the type system -- all MozPrintErrorEvents, and only MozPrintErrorEvents, expose an .errorCode property, for instance.\n\nI'd appreciate particular attention by reviewers to", "count": 30, "author": "zackw@panix.com", "creator": "zackw@panix.com", "attachment_id": 723258, "time": "2013-03-10T20:27:20Z", "id": 7187053, "raw_text": "I'm still tinkering with the code that will _use_ these events, but since events seem to be in flux, I thought it might be a good idea to post them for review now.\n\nMajor change from the previous iteration of this patch is that there are three event types instead of a primary status code.  This bakes a bunch of consistency checking into the type system -- all MozPrintErrorEvents, and only MozPrintErrorEvents, expose an .errorCode property, for instance.\n\nI'd appreciate particular attention by reviewers to", "bug_id": 650960, "creation_time": "2013-03-10T20:27:20Z", "tags": [], "is_private": false}, {"id": 7187062, "author": "zackw@panix.com", "time": "2013-03-10T20:30:53Z", "text": "(Sorry about the truncated message, I hit return on the wrong field and bang.)\n\nOn attachment 723258, I'd appreciate particular attention by reviewers to details of the DOMClassInfo stuff, which I have not had to muck with to this extent before, and opinions as to whether the moz prefixes are actually necessary.  (Note that plain MozPrintEvent will be fired at content (as 'beforeprint'/'afterprint'), but the others will not; however, all three of them are exposed as global window properties, as all event prototypes are.)", "count": 31, "attachment_id": null, "is_private": false, "creator": "zackw@panix.com", "tags": [], "raw_text": "(Sorry about the truncated message, I hit return on the wrong field and bang.)\n\nOn attachment 723258, I'd appreciate particular attention by reviewers to details of the DOMClassInfo stuff, which I have not had to muck with to this extent before, and opinions as to whether the moz prefixes are actually necessary.  (Note that plain MozPrintEvent will be fired at content (as 'beforeprint'/'afterprint'), but the others will not; however, all three of them are exposed as global window properties, as all event prototypes are.)", "bug_id": 650960, "creation_time": "2013-03-10T20:30:53Z"}, {"attachment_id": 723265, "creator": "zackw@panix.com", "author": "zackw@panix.com", "count": 32, "text": "Created attachment 723265\npart 1b: generalize nsContentUtils::Dispatch*Event\n\nnsContentUtils::Dispatch*Event can't be used if you need a non-generic event type, which is exactly the situation part 2 will be in.  So, add overloads that allow you to create the event object yourself.  Seems straightforward enough, however I'd like to declare myself completely baffled as to why so many event constructors take *another* event as an argument; it's quite likely there is something subtle about event creation I do not understand, and that might affect this patch.", "is_private": false, "raw_text": "nsContentUtils::Dispatch*Event can't be used if you need a non-generic event type, which is exactly the situation part 2 will be in.  So, add overloads that allow you to create the event object yourself.  Seems straightforward enough, however I'd like to declare myself completely baffled as to why so many event constructors take *another* event as an argument; it's quite likely there is something subtle about event creation I do not understand, and that might affect this patch.", "bug_id": 650960, "creation_time": "2013-03-10T20:34:28Z", "tags": [], "time": "2013-03-10T20:34:28Z", "id": 7187078}, {"id": 7187082, "time": "2013-03-10T20:37:33Z", "tags": [], "bug_id": 650960, "creation_time": "2013-03-10T20:37:33Z", "raw_text": "This was originally another piece of bug 629500, and was r+ed over there by roc, but it dawned on me that part 2 of this bug presently touches nsIContentViewerFile methods, and if we just go ahead and zap it now, it won't have to.", "is_private": false, "count": 33, "text": "Created attachment 723266\npart 0: remove nsIContentViewerFile\n\nThis was originally another piece of bug 629500, and was r+ed over there by roc, but it dawned on me that part 2 of this bug presently touches nsIContentViewerFile methods, and if we just go ahead and zap it now, it won't have to.", "author": "zackw@panix.com", "creator": "zackw@panix.com", "attachment_id": 723266}, {"raw_text": "While I'm in here, lemme address a query from way back when:\n\n(In reply to Zack Weinberg (:zwol) from comment #21)\n> (In reply to D\u00e3o Gottwald [:dao] from comment #19)\n> > and (2) we've already determined that we don't want\n> > to remove progress updates as the printed documents need to remain open\n> > until the progress finished (which, by the way, your popup notification\n> > doesn't really ensure, does it?).\n> \n> I haven't looked into what (if anything) keeps the document open *now*, but\n> I think that is properly the document viewer's job (or the docshell or\n> something in the same general ballpark; the document viewer in particular is\n> aware of when print operations begin and end), and affects the UI only\n> insofar as a window/tab that cannot be closed right now needs to have some\n> visible marker so the user doesn't get confused.  I will investigate and\n> possibly file more bugs.\n\nIt turns out that nsDocumentViewer and nsGlobalWindow already contain code to prevent a window from being closed while it is being printed.  See nsGlobalWindow::Close, nsGlobalWindow::CanClose, \nnsDocumentViewer::RequestWindowClose, and the related nsDocumentViewer:PermitUnload.", "creation_time": "2013-03-10T20:43:49Z", "bug_id": 650960, "tags": [], "is_private": false, "time": "2013-03-10T20:43:49Z", "id": 7187089, "creator": "zackw@panix.com", "attachment_id": null, "count": 34, "text": "While I'm in here, lemme address a query from way back when:\n\n(In reply to Zack Weinberg (:zwol) from comment #21)\n> (In reply to D\u00e3o Gottwald [:dao] from comment #19)\n> > and (2) we've already determined that we don't want\n> > to remove progress updates as the printed documents need to remain open\n> > until the progress finished (which, by the way, your popup notification\n> > doesn't really ensure, does it?).\n> \n> I haven't looked into what (if anything) keeps the document open *now*, but\n> I think that is properly the document viewer's job (or the docshell or\n> something in the same general ballpark; the document viewer in particular is\n> aware of when print operations begin and end), and affects the UI only\n> insofar as a window/tab that cannot be closed right now needs to have some\n> visible marker so the user doesn't get confused.  I will investigate and\n> possibly file more bugs.\n\nIt turns out that nsDocumentViewer and nsGlobalWindow already contain code to prevent a window from being closed while it is being printed.  See nsGlobalWindow::Close, nsGlobalWindow::CanClose, \nnsDocumentViewer::RequestWindowClose, and the related nsDocumentViewer:PermitUnload.", "author": "zackw@panix.com"}, {"count": 35, "text": "Note, I have several huge patches in my review queue, so I can't promise very fast reviews here. Sorry.\nPing me if I haven't reviewed within a week.", "author": "bugs@pettay.fi", "creator": "bugs@pettay.fi", "attachment_id": null, "time": "2013-03-11T13:10:45Z", "id": 7188351, "bug_id": 650960, "creation_time": "2013-03-11T13:10:45Z", "raw_text": "Note, I have several huge patches in my review queue, so I can't promise very fast reviews here. Sorry.\nPing me if I haven't reviewed within a week.", "tags": [], "is_private": false}, {"is_private": false, "creation_time": "2013-03-13T00:32:39Z", "bug_id": 650960, "raw_text": "The event implementations should be autogenerated.\nJust have the .idl per event, each interface should have corrent [noscript] init*Event, add *EventInit and add the event name to\nhttp://mxr.mozilla.org/mozilla-central/source/js/xpconnect/src/event_impl_gen.conf.in\nThat will create the event implementation based on the .idl.", "tags": [], "time": "2013-03-13T00:32:39Z", "id": 7196308, "attachment_id": 723258, "creator": "bugs@pettay.fi", "author": "bugs@pettay.fi", "count": 36, "text": "Comment on attachment 723258\npart 1a: new DOM events for print progress and error reporting\n\nThe event implementations should be autogenerated.\nJust have the .idl per event, each interface should have corrent [noscript] init*Event, add *EventInit and add the event name to\nhttp://mxr.mozilla.org/mozilla-central/source/js/xpconnect/src/event_impl_gen.conf.in\nThat will create the event implementation based on the .idl."}, {"author": "bugs@pettay.fi", "count": 37, "text": "Comment on attachment 723265\npart 1b: generalize nsContentUtils::Dispatch*Event\n\n\n>   /**\n>-   * This method creates and dispatches a untrusted event.\n>+   * As above, but caller provides the event object.\n>+   *\n>+   * @param aDoc           The document containing the event target.\n>+   * @param aTarget        The target of the event, should be QIable to\n>+   *                       nsIDOMEventTarget.\n>+   * @param aEvent         The event object.  Should be fresh from\n>+   *                       NS_NewDOM*Event; do not call InitEvent.\n>+   * @param aEventName     The name of the event.\n>+   * @param aCanBubble     Whether the event can bubble.\n>+   * @param aCancelable    Is the event cancelable.\n>+   * @param aDefaultAction Set to true if default action should be taken,\n>+   *                       see nsIDOMEventTarget::DispatchEvent.\n>+   */\n>+  static nsresult DispatchTrustedEvent(nsIDocument* aDoc,\n>+                                       nsISupports* aTarget,\n>+                                       nsIDOMEvent* aEvent,\n>+                                       const nsAString& aEventName,\n>+                                       bool aCanBubble,\n>+                                       bool aCancelable,\n>+                                       bool *aDefaultAction = nullptr);\nMakes no sense to take aEvenName, aCanBubble, aCancelable params.\nThe event must be initialized before calling this\n\n\n>+   * @param aDoc           The document which will be used to create the event.\n>+   * @param aTarget        The target of the event, should be QIable to\n>+   *                       nsIDOMEventTarget.\n>+   * @param aEvent         The event object.  Should be fresh from\n>+   *                       NS_NewDOM*Event; do not call InitEvent.\n>+   * @param aEventName     The name of the event.\n>+   * @param aCanBubble     Whether the event can bubble.\n>+   * @param aCancelable    Is the event cancelable.\n>+   * @param aDefaultAction Set to true if default action should be taken,\n>+   *                       see nsIDOMEventTarget::DispatchEvent.\n>+   */\n>+  static nsresult DispatchUntrustedEvent(nsIDocument* aDoc,\n>+                                         nsISupports* aTarget,\n>+                                         nsIDOMEvent* aEvent,\n>+                                         const nsAString& aEventName,\n>+                                         bool aCanBubble,\n>+                                         bool aCancelable,\n>+                                         bool *aDefaultAction = nullptr);\nditto\n\n\n>+  static nsresult DispatchChromeEvent(nsIDocument* aDoc,\n>+                                      nsISupports* aTarget,\n>+                                      nsIDOMEvent* aEvent,\n>+                                      const nsAString& aEventName,\n>+                                      bool aCanBubble,\n>+                                      bool aCancelable,\n>+                                      bool *aDefaultAction = nullptr);\nditto", "attachment_id": 723265, "creator": "bugs@pettay.fi", "time": "2013-03-13T00:37:14Z", "id": 7196322, "is_private": false, "bug_id": 650960, "creation_time": "2013-03-13T00:37:14Z", "raw_text": "\n>   /**\n>-   * This method creates and dispatches a untrusted event.\n>+   * As above, but caller provides the event object.\n>+   *\n>+   * @param aDoc           The document containing the event target.\n>+   * @param aTarget        The target of the event, should be QIable to\n>+   *                       nsIDOMEventTarget.\n>+   * @param aEvent         The event object.  Should be fresh from\n>+   *                       NS_NewDOM*Event; do not call InitEvent.\n>+   * @param aEventName     The name of the event.\n>+   * @param aCanBubble     Whether the event can bubble.\n>+   * @param aCancelable    Is the event cancelable.\n>+   * @param aDefaultAction Set to true if default action should be taken,\n>+   *                       see nsIDOMEventTarget::DispatchEvent.\n>+   */\n>+  static nsresult DispatchTrustedEvent(nsIDocument* aDoc,\n>+                                       nsISupports* aTarget,\n>+                                       nsIDOMEvent* aEvent,\n>+                                       const nsAString& aEventName,\n>+                                       bool aCanBubble,\n>+                                       bool aCancelable,\n>+                                       bool *aDefaultAction = nullptr);\nMakes no sense to take aEvenName, aCanBubble, aCancelable params.\nThe event must be initialized before calling this\n\n\n>+   * @param aDoc           The document which will be used to create the event.\n>+   * @param aTarget        The target of the event, should be QIable to\n>+   *                       nsIDOMEventTarget.\n>+   * @param aEvent         The event object.  Should be fresh from\n>+   *                       NS_NewDOM*Event; do not call InitEvent.\n>+   * @param aEventName     The name of the event.\n>+   * @param aCanBubble     Whether the event can bubble.\n>+   * @param aCancelable    Is the event cancelable.\n>+   * @param aDefaultAction Set to true if default action should be taken,\n>+   *                       see nsIDOMEventTarget::DispatchEvent.\n>+   */\n>+  static nsresult DispatchUntrustedEvent(nsIDocument* aDoc,\n>+                                         nsISupports* aTarget,\n>+                                         nsIDOMEvent* aEvent,\n>+                                         const nsAString& aEventName,\n>+                                         bool aCanBubble,\n>+                                         bool aCancelable,\n>+                                         bool *aDefaultAction = nullptr);\nditto\n\n\n>+  static nsresult DispatchChromeEvent(nsIDocument* aDoc,\n>+                                      nsISupports* aTarget,\n>+                                      nsIDOMEvent* aEvent,\n>+                                      const nsAString& aEventName,\n>+                                      bool aCanBubble,\n>+                                      bool aCancelable,\n>+                                      bool *aDefaultAction = nullptr);\nditto", "tags": []}, {"attachment_id": null, "creator": "zackw@panix.com", "author": "zackw@panix.com", "text": "(In reply to Olli Pettay [:smaug] from comment #36)\n> Comment on attachment 723258\n> part 1a: new DOM events for print progress and error reporting\n> \n> The event implementations should be autogenerated.\n> Just have the .idl per event, each interface should have corrent [noscript]\n> init*Event, add *EventInit and add the event name to\n> http://mxr.mozilla.org/mozilla-central/source/js/xpconnect/src/\n> event_impl_gen.conf.in\n> That will create the event implementation based on the .idl.\n\nBlech, you want me to move event parameters from the constructor to the init method?  That's backwards.  We should be moving in the direction of eliminating init methods in favor of constructors.  But it does get me out of writing a bunch of glue, so I'll do it anyway.\n\n(In reply to Olli Pettay [:smaug] from comment #37)\n> >+   * As above, but caller provides the event object.\n> >+   *\n> >+   * @param aDoc           The document containing the event target.\n> >+   * @param aTarget        The target of the event, should be QIable to\n> >+   *                       nsIDOMEventTarget.\n> >+   * @param aEvent         The event object.  Should be fresh from\n> >+   *                       NS_NewDOM*Event; do not call InitEvent.\n> >+   * @param aEventName     The name of the event.\n> >+   * @param aCanBubble     Whether the event can bubble.\n> >+   * @param aCancelable    Is the event cancelable.\n> >+   * @param aDefaultAction Set to true if default action should be taken,\n> >+   *                       see nsIDOMEventTarget::DispatchEvent.\n> >+   */\n> >+  static nsresult DispatchTrustedEvent(nsIDocument* aDoc,\n> >+                                       nsISupports* aTarget,\n> >+                                       nsIDOMEvent* aEvent,\n> >+                                       const nsAString& aEventName,\n> >+                                       bool aCanBubble,\n> >+                                       bool aCancelable,\n> >+                                       bool *aDefaultAction = nullptr);\n> Makes no sense to take aEvenName, aCanBubble, aCancelable params.\n> The event must be initialized before calling this\n\nI think you missed the part of the docstring where it specifically says you do *not* call InitEvent before you call this method.  Intended use pattern is\n\n   nsCOMPtr<nsIDOMEvent> event;\n   if (NS_SUCCEEDED(NS_NewWhateverEvent(getter_AddRefs(event),\n                                        owner, ctxt, nullptr, \n                                        other arguments))\n     DispatchTrustedEvent(doc, target, event, \"name\", bubbles, cancelable);\n\nThat said, I'm just going to scrap this patch, it was less useful than I expected it to be and I think it won't work at all with your requested change to the new events.\n\nWhile you're here, quick question: What exactly is the difference between the \"owner\" of an event (as in the second argument to all NS_New*Event calls since bug 822399) and the \"target\" of an event (as in the second argument to nsContentUtils::Dispatch*Event)?", "count": 38, "is_private": false, "tags": [], "raw_text": "(In reply to Olli Pettay [:smaug] from comment #36)\n> Comment on attachment 723258\n> part 1a: new DOM events for print progress and error reporting\n> \n> The event implementations should be autogenerated.\n> Just have the .idl per event, each interface should have corrent [noscript]\n> init*Event, add *EventInit and add the event name to\n> http://mxr.mozilla.org/mozilla-central/source/js/xpconnect/src/\n> event_impl_gen.conf.in\n> That will create the event implementation based on the .idl.\n\nBlech, you want me to move event parameters from the constructor to the init method?  That's backwards.  We should be moving in the direction of eliminating init methods in favor of constructors.  But it does get me out of writing a bunch of glue, so I'll do it anyway.\n\n(In reply to Olli Pettay [:smaug] from comment #37)\n> >+   * As above, but caller provides the event object.\n> >+   *\n> >+   * @param aDoc           The document containing the event target.\n> >+   * @param aTarget        The target of the event, should be QIable to\n> >+   *                       nsIDOMEventTarget.\n> >+   * @param aEvent         The event object.  Should be fresh from\n> >+   *                       NS_NewDOM*Event; do not call InitEvent.\n> >+   * @param aEventName     The name of the event.\n> >+   * @param aCanBubble     Whether the event can bubble.\n> >+   * @param aCancelable    Is the event cancelable.\n> >+   * @param aDefaultAction Set to true if default action should be taken,\n> >+   *                       see nsIDOMEventTarget::DispatchEvent.\n> >+   */\n> >+  static nsresult DispatchTrustedEvent(nsIDocument* aDoc,\n> >+                                       nsISupports* aTarget,\n> >+                                       nsIDOMEvent* aEvent,\n> >+                                       const nsAString& aEventName,\n> >+                                       bool aCanBubble,\n> >+                                       bool aCancelable,\n> >+                                       bool *aDefaultAction = nullptr);\n> Makes no sense to take aEvenName, aCanBubble, aCancelable params.\n> The event must be initialized before calling this\n\nI think you missed the part of the docstring where it specifically says you do *not* call InitEvent before you call this method.  Intended use pattern is\n\n   nsCOMPtr<nsIDOMEvent> event;\n   if (NS_SUCCEEDED(NS_NewWhateverEvent(getter_AddRefs(event),\n                                        owner, ctxt, nullptr, \n                                        other arguments))\n     DispatchTrustedEvent(doc, target, event, \"name\", bubbles, cancelable);\n\nThat said, I'm just going to scrap this patch, it was less useful than I expected it to be and I think it won't work at all with your requested change to the new events.\n\nWhile you're here, quick question: What exactly is the difference between the \"owner\" of an event (as in the second argument to all NS_New*Event calls since bug 822399) and the \"target\" of an event (as in the second argument to nsContentUtils::Dispatch*Event)?", "creation_time": "2013-03-13T15:10:27Z", "bug_id": 650960, "id": 7198291, "time": "2013-03-13T15:10:27Z"}, {"author": "bugs@pettay.fi", "count": 39, "text": "From owner we get to the js global in which the event is wrapped.\nTarget can be technically in some other window, and before dispatching events don't have target at all.", "attachment_id": null, "creator": "bugs@pettay.fi", "id": 7198730, "time": "2013-03-13T16:50:32Z", "is_private": false, "tags": [], "raw_text": "From owner we get to the js global in which the event is wrapped.\nTarget can be technically in some other window, and before dispatching events don't have target at all.", "creation_time": "2013-03-13T16:50:32Z", "bug_id": 650960}, {"id": 7202907, "time": "2013-03-14T15:09:02Z", "tags": [], "raw_text": "Here's the new revision of the event-creation patch.  I'm impressed by how much less DOM glue I had to write.  (I did have to add support for \"attribute nsresult\" to a couple code generators, but that wasn't terribly hard.)\n\nI wonder, though, whether it's possible to make (nsIDOM|Moz)PrintErrorEvent and (nsIDOM|Moz)PrintProgressEvent inherit from (nsIDOM|Moz)PrintEvent.  There's three copies of all the isPrintPreview-related code in this iteration.\n\nAlso I'm not sure where if at all the NS_PRINTERROR and NS_PRINTPROGRESS constants will get used (see next patch).", "bug_id": 650960, "creation_time": "2013-03-14T15:09:02Z", "is_private": false, "count": 40, "text": "Created attachment 724921\npart 1: new DOM events for print status\n\nHere's the new revision of the event-creation patch.  I'm impressed by how much less DOM glue I had to write.  (I did have to add support for \"attribute nsresult\" to a couple code generators, but that wasn't terribly hard.)\n\nI wonder, though, whether it's possible to make (nsIDOM|Moz)PrintErrorEvent and (nsIDOM|Moz)PrintProgressEvent inherit from (nsIDOM|Moz)PrintEvent.  There's three copies of all the isPrintPreview-related code in this iteration.\n\nAlso I'm not sure where if at all the NS_PRINTERROR and NS_PRINTPROGRESS constants will get used (see next patch).", "author": "zackw@panix.com", "creator": "zackw@panix.com", "attachment_id": 724921}, {"id": 7202960, "time": "2013-03-14T15:24:17Z", "tags": [], "raw_text": "Here's where we generate the new events.  In addition to the new MozPrintError and MozPrintProgress events, which are chrome-only, the semi-standard \"beforeprint\" and \"afterprint\" events now get explicitly sent to the chrome event listener for the outermost window as well as the window tree, and have a .mozIsPrintPreview property.  I haven't yet revised part 3 so I don't know for sure whether this will be useful, but I suspect it will be.\n\nI am *not* impressed with the amount of code required to fire an event with attached data from C++ (compared to the nsContentUtils::Dispatch*Event API that I tried to augment last time) and the way the variable part lands right in the middle, making a helper function impractical.  Switching to generated event code actually makes it *worse*, because I have to call a special init method on the object returned from NS_NewDOMWhateverEvent, and I have to QI it back to its true type to do that.  I hope the \"Paris bindings\" plan for events will address this.\n\nThere is a subtle behavioral change in here: setting the showPrintProgress attribute on a print-settings object to false didn't actually do anything, to the chagrin of several tests.  Now it does.  (However, it only suppresses the per-page progress events, not the beforeprint, afterprint, or error events; the print-settings object is not reliably available when those events are triggered.  Changing that would require significant changes to the timing of the beforeprint event especially.  And the aforementioned tests do expect that beforeprint and afterprint events aren't affected.)", "creation_time": "2013-03-14T15:24:17Z", "bug_id": 650960, "is_private": false, "text": "Created attachment 724924\npart 2: generate new events from print engine\n\nHere's where we generate the new events.  In addition to the new MozPrintError and MozPrintProgress events, which are chrome-only, the semi-standard \"beforeprint\" and \"afterprint\" events now get explicitly sent to the chrome event listener for the outermost window as well as the window tree, and have a .mozIsPrintPreview property.  I haven't yet revised part 3 so I don't know for sure whether this will be useful, but I suspect it will be.\n\nI am *not* impressed with the amount of code required to fire an event with attached data from C++ (compared to the nsContentUtils::Dispatch*Event API that I tried to augment last time) and the way the variable part lands right in the middle, making a helper function impractical.  Switching to generated event code actually makes it *worse*, because I have to call a special init method on the object returned from NS_NewDOMWhateverEvent, and I have to QI it back to its true type to do that.  I hope the \"Paris bindings\" plan for events will address this.\n\nThere is a subtle behavioral change in here: setting the showPrintProgress attribute on a print-settings object to false didn't actually do anything, to the chagrin of several tests.  Now it does.  (However, it only suppresses the per-page progress events, not the beforeprint, afterprint, or error events; the print-settings object is not reliably available when those events are triggered.  Changing that would require significant changes to the timing of the beforeprint event especially.  And the aforementioned tests do expect that beforeprint and afterprint events aren't affected.)", "count": 41, "author": "zackw@panix.com", "creator": "zackw@panix.com", "attachment_id": 724924}, {"text": "beforeprint and afterprint are very much standard. Nothing \"semi\" there.\nhttp://www.whatwg.org/specs/web-apps/current-work/#dom-print\nDon't change how they work. If you want to add some new property to before/afterprint events, \nplease file a spec bug first.\n\nAnd Paris bindings don't affect how events are dispatched.\nI agree it would be nice to generate methods which\ncreate/initialize/dispatch events.", "count": 42, "id": 7202997, "author": "bugs@pettay.fi", "time": "2013-03-14T15:33:53Z", "creator": "bugs@pettay.fi", "tags": [], "raw_text": "beforeprint and afterprint are very much standard. Nothing \"semi\" there.\nhttp://www.whatwg.org/specs/web-apps/current-work/#dom-print\nDon't change how they work. If you want to add some new property to before/afterprint events, \nplease file a spec bug first.\n\nAnd Paris bindings don't affect how events are dispatched.\nI agree it would be nice to generate methods which\ncreate/initialize/dispatch events.", "creation_time": "2013-03-14T15:33:53Z", "bug_id": 650960, "attachment_id": null, "is_private": false}, {"attachment_id": 724921, "is_private": false, "creator": "bugs@pettay.fi", "tags": [], "raw_text": "># HG changeset patch\n># Parent de810bfae908b1944cd8dc0aa59a0ffd22e542a3\n># User Zack Weinberg <zackw@panix.com>\n>Bug 650960, part 1: Add DOM events for reporting print status.  r=smaug\n>\n>diff --git a/content/events/src/nsEventDispatcher.cpp b/content/events/src/nsEventDispatcher.cpp\n>--- a/content/events/src/nsEventDispatcher.cpp\n>+++ b/content/events/src/nsEventDispatcher.cpp\n>@@ -855,14 +855,19 @@ nsEventDispatcher::CreateEvent(mozilla::\n>       nsDOMTouchEvent::PrefEnabled())\n>     return NS_NewDOMTouchEvent(aDOMEvent, aOwner, aPresContext, nullptr);\n>   if (aEventType.LowerCaseEqualsLiteral(\"hashchangeevent\"))\n>     return NS_NewDOMHashChangeEvent(aDOMEvent, aOwner, aPresContext, nullptr);\n>   if (aEventType.LowerCaseEqualsLiteral(\"customevent\"))\n>     return NS_NewDOMCustomEvent(aDOMEvent, aOwner, aPresContext, nullptr);\n>   if (aEventType.LowerCaseEqualsLiteral(\"mozsmsevent\"))\n>     return NS_NewDOMMozSmsEvent(aDOMEvent, aOwner, aPresContext, nullptr);\n>-  if (aEventType.LowerCaseEqualsLiteral(\"storageevent\")) {\n>+  if (aEventType.LowerCaseEqualsLiteral(\"storageevent\"))\n>     return NS_NewDOMStorageEvent(aDOMEvent, aOwner, aPresContext, nullptr);\n>-  }\n>+  if (aEventType.LowerCaseEqualsLiteral(\"mozprintevent\"))\n>+    return NS_NewDOMMozPrintEvent(aDOMEvent, aOwner, aPresContext, nullptr);\n>+  if (aEventType.LowerCaseEqualsLiteral(\"mozprintprogressevent\"))\n>+    return NS_NewDOMMozPrintProgressEvent(aDOMEvent, aOwner, aPresContext, nullptr);\n>+  if (aEventType.LowerCaseEqualsLiteral(\"mozprinterrorevent\"))\n>+    return NS_NewDOMMozPrintErrorEvent(aDOMEvent, aOwner, aPresContext, nullptr);\n> \nDon't add support for document.createEvent(). That is for legacy events only.\n\n>+++ b/dom/tests/mochitest/general/test_interfaces.html\n>@@ -531,27 +531,37 @@ var interfaceNamesInGlobalScope =\n>     \"RTCIceCandidate\",\n>     \"RTCPeerConnection\",\n>     \"LocalMediaStream\",\n>     \"CSSConditionRule\",\n>     \"CSSGroupingRule\",\n>     \"AsyncScrollEventDetail\",\n>     \"MozSmsSegmentInfo\",\n>     \"DOMCursor\",\n>-    \"BlobEvent\"\n>+    \"BlobEvent\",\n>+    \"MozPrintEvent\",\n>+    \"MozPrintErrorEvent\",\n>+    \"MozPrintProgressEvent\",\n>+    \"MozActivity\",\n>+    \"MozActivityHandlerDescription\",\n>+    \"MozActivityOptions\",\n>+    \"MozActivityRequestHandler\",\n>+    \"MozNavigatorActivities\",\n>+    \"NavigatorSystemMessages\",\n>+    \"SystemMessageCallback\"\n>   ]\nWhy you add so many interfaces here?\n\n\nI think it is better to wait still few days so that event codegen can deal with webidl.\nThen we can implement new events without exposing them to web pages.", "bug_id": 650960, "creation_time": "2013-04-08T09:46:45Z", "id": 7288012, "author": "bugs@pettay.fi", "time": "2013-04-08T09:46:45Z", "text": "Comment on attachment 724921\npart 1: new DOM events for print status\n\n># HG changeset patch\n># Parent de810bfae908b1944cd8dc0aa59a0ffd22e542a3\n># User Zack Weinberg <zackw@panix.com>\n>Bug 650960, part 1: Add DOM events for reporting print status.  r=smaug\n>\n>diff --git a/content/events/src/nsEventDispatcher.cpp b/content/events/src/nsEventDispatcher.cpp\n>--- a/content/events/src/nsEventDispatcher.cpp\n>+++ b/content/events/src/nsEventDispatcher.cpp\n>@@ -855,14 +855,19 @@ nsEventDispatcher::CreateEvent(mozilla::\n>       nsDOMTouchEvent::PrefEnabled())\n>     return NS_NewDOMTouchEvent(aDOMEvent, aOwner, aPresContext, nullptr);\n>   if (aEventType.LowerCaseEqualsLiteral(\"hashchangeevent\"))\n>     return NS_NewDOMHashChangeEvent(aDOMEvent, aOwner, aPresContext, nullptr);\n>   if (aEventType.LowerCaseEqualsLiteral(\"customevent\"))\n>     return NS_NewDOMCustomEvent(aDOMEvent, aOwner, aPresContext, nullptr);\n>   if (aEventType.LowerCaseEqualsLiteral(\"mozsmsevent\"))\n>     return NS_NewDOMMozSmsEvent(aDOMEvent, aOwner, aPresContext, nullptr);\n>-  if (aEventType.LowerCaseEqualsLiteral(\"storageevent\")) {\n>+  if (aEventType.LowerCaseEqualsLiteral(\"storageevent\"))\n>     return NS_NewDOMStorageEvent(aDOMEvent, aOwner, aPresContext, nullptr);\n>-  }\n>+  if (aEventType.LowerCaseEqualsLiteral(\"mozprintevent\"))\n>+    return NS_NewDOMMozPrintEvent(aDOMEvent, aOwner, aPresContext, nullptr);\n>+  if (aEventType.LowerCaseEqualsLiteral(\"mozprintprogressevent\"))\n>+    return NS_NewDOMMozPrintProgressEvent(aDOMEvent, aOwner, aPresContext, nullptr);\n>+  if (aEventType.LowerCaseEqualsLiteral(\"mozprinterrorevent\"))\n>+    return NS_NewDOMMozPrintErrorEvent(aDOMEvent, aOwner, aPresContext, nullptr);\n> \nDon't add support for document.createEvent(). That is for legacy events only.\n\n>+++ b/dom/tests/mochitest/general/test_interfaces.html\n>@@ -531,27 +531,37 @@ var interfaceNamesInGlobalScope =\n>     \"RTCIceCandidate\",\n>     \"RTCPeerConnection\",\n>     \"LocalMediaStream\",\n>     \"CSSConditionRule\",\n>     \"CSSGroupingRule\",\n>     \"AsyncScrollEventDetail\",\n>     \"MozSmsSegmentInfo\",\n>     \"DOMCursor\",\n>-    \"BlobEvent\"\n>+    \"BlobEvent\",\n>+    \"MozPrintEvent\",\n>+    \"MozPrintErrorEvent\",\n>+    \"MozPrintProgressEvent\",\n>+    \"MozActivity\",\n>+    \"MozActivityHandlerDescription\",\n>+    \"MozActivityOptions\",\n>+    \"MozActivityRequestHandler\",\n>+    \"MozNavigatorActivities\",\n>+    \"NavigatorSystemMessages\",\n>+    \"SystemMessageCallback\"\n>   ]\nWhy you add so many interfaces here?\n\n\nI think it is better to wait still few days so that event codegen can deal with webidl.\nThen we can implement new events without exposing them to web pages.", "count": 43}, {"raw_text": "\n> \n>+static void\n>+DispatchSinglePrintEvent(nsIDocument *aDoc,\n>+                         nsString aEventName,\n>+                         bool aIsPrintPreview,\n>+                         bool aToChrome)\n>+{\n>+  nsIPresShell *shell = aDoc->GetShell();\n>+  nsPresContext *ctxt = shell ? shell->GetPresContext() : nullptr;\n>+  nsPIDOMWindow *wdow = aDoc->GetWindow();\n>+  nsCOMPtr<mozilla::dom::EventTarget> target = do_QueryInterface(wdow);\n>+  nsCOMPtr<mozilla::dom::EventTarget> owner =\n>+    aToChrome ? do_QueryInterface(wdow->GetParentTarget()) : target;\n>+\n>+  nsCOMPtr<nsIDOMEvent> event;\n>+  nsresult rv = NS_NewDOMMozPrintEvent(getter_AddRefs(event), owner, ctxt,\n>+                                       nullptr);\n>+  if (NS_FAILED(rv)) return;\n>+\n>+  nsCOMPtr<nsIDOMMozPrintEvent> pevent(do_QueryInterface(event));\n>+  rv = pevent->InitMozPrintEvent(aEventName, false, false, aIsPrintPreview);\n>+  if (NS_FAILED(rv)) return;\n>+\n>+  rv = event->SetTarget(target);\n>+  if (NS_FAILED(rv)) return;\n>+  event->SetTrusted(true);\n>+\n>+  bool dummy;\n>+  owner->DispatchEvent(event, &dummy);\n>+}\n>+\n> void\n>-nsDocumentViewer::DispatchEventToWindowTree(nsIDocument* aDoc,\n>-                                              const nsAString& aEvent)\n>+nsDocumentViewer::DispatchPrintEventToWindowTree(nsIDocument* aDoc,\n>+                                                 uint32_t aEventType,\n>+                                                 bool aIsPrintPreview)\n> {\n>+  MOZ_ASSERT(aEventType == NS_BEFOREPRINT || aEventType == NS_AFTERPRINT);\n>+\n>+  nsString eventName(aEventType == NS_BEFOREPRINT\n>+                     ? NS_LITERAL_STRING(\"beforeprint\")\n>+                     : NS_LITERAL_STRING(\"afterprint\"));\n>+\n>   nsCOMArray<nsIDocument> targets;\n>   CollectDocuments(aDoc, &targets);\n>   for (int32_t i = 0; i < targets.Count(); ++i) {\n>     nsIDocument* d = targets[i];\n>-    nsContentUtils::DispatchTrustedEvent(d, d->GetWindow(),\n>-                                         aEvent, false, false, nullptr);\n>+    DispatchSinglePrintEvent(d, eventName, aIsPrintPreview, false);\n>+\n>+    if (d == aDoc) {\n>+      // Also send it to the outermost window's chrome event handler.\n>+      // ??? May not be necessary.\nEvents propagate from content to chrome\n\n\n>+      DispatchSinglePrintEvent(d, eventName, aIsPrintPreview, true);\n>+    }\n>   }\n...but you end up dispatching wrong kind of before/afterprint events.\nbefore/afterprint are plain old Events\n>+  // The print settings can force-disable progress events for a particular\n>+  // job, but they can't do the opposite.\n>+  if (mShowPrintProgress)\n>+    mPrt->mPrintSettings->GetShowPrintProgress(&mShowPrintProgress);\nif (expr) {\n  stmt;\n}\n\n>-    // Ask dialog to be Print Shown via the Plugable Printing Dialog Service\n>-    // This service is for the Print Dialog and the Print Progress Dialog\n>-    // If printing silently or you can't get the service continue on\n>+    // The print settings can force a particular print job to be silent,\n>+    // but they can't do the opposite.\n>+    if (!printSilently)\n>+      mPrt->mPrintSettings->GetPrintSilent(&printSilently);\nditto\n\n>+    // NS_ERROR_ABORT here means the user cancelled printing from\n>+    // inside the print dialog.  Do not spam stderr in that case.\n>+    if (rv == NS_ERROR_ABORT)\n>       return rv;\nditto\n>+// We can't use nsAsyncDOMEvent for this because it doesn't support\n>+// firing preconstructed events at the chrome event handler.\n>+class AsyncChromeEvent : public nsRunnable {\n{ goes to the next line, but you really should just change nsAsyncDOMEvent.\nAnd I don't understand how this dispatching anything to chrome only.\n\n>+nsPrintEngine::FirePrintErrorEvent(nsIDocument *aDocument,\n>+                                   bool         aIsPrintPreview,\n>+                                   nsresult     aErrorCode)\n>+{\n>+  nsIPresShell *shell = aDocument->GetShell();\n>+  nsPresContext *ctxt = shell ? shell->GetPresContext() : nullptr;\n>+  nsPIDOMWindow *win = aDocument->GetWindow();\n* goes with type. nsIPresShell* shell etc.", "bug_id": 650960, "creation_time": "2013-04-08T10:03:47Z", "creator": "bugs@pettay.fi", "tags": [], "is_private": false, "attachment_id": 724924, "text": "Comment on attachment 724924\npart 2: generate new events from print engine\n\n\n> \n>+static void\n>+DispatchSinglePrintEvent(nsIDocument *aDoc,\n>+                         nsString aEventName,\n>+                         bool aIsPrintPreview,\n>+                         bool aToChrome)\n>+{\n>+  nsIPresShell *shell = aDoc->GetShell();\n>+  nsPresContext *ctxt = shell ? shell->GetPresContext() : nullptr;\n>+  nsPIDOMWindow *wdow = aDoc->GetWindow();\n>+  nsCOMPtr<mozilla::dom::EventTarget> target = do_QueryInterface(wdow);\n>+  nsCOMPtr<mozilla::dom::EventTarget> owner =\n>+    aToChrome ? do_QueryInterface(wdow->GetParentTarget()) : target;\n>+\n>+  nsCOMPtr<nsIDOMEvent> event;\n>+  nsresult rv = NS_NewDOMMozPrintEvent(getter_AddRefs(event), owner, ctxt,\n>+                                       nullptr);\n>+  if (NS_FAILED(rv)) return;\n>+\n>+  nsCOMPtr<nsIDOMMozPrintEvent> pevent(do_QueryInterface(event));\n>+  rv = pevent->InitMozPrintEvent(aEventName, false, false, aIsPrintPreview);\n>+  if (NS_FAILED(rv)) return;\n>+\n>+  rv = event->SetTarget(target);\n>+  if (NS_FAILED(rv)) return;\n>+  event->SetTrusted(true);\n>+\n>+  bool dummy;\n>+  owner->DispatchEvent(event, &dummy);\n>+}\n>+\n> void\n>-nsDocumentViewer::DispatchEventToWindowTree(nsIDocument* aDoc,\n>-                                              const nsAString& aEvent)\n>+nsDocumentViewer::DispatchPrintEventToWindowTree(nsIDocument* aDoc,\n>+                                                 uint32_t aEventType,\n>+                                                 bool aIsPrintPreview)\n> {\n>+  MOZ_ASSERT(aEventType == NS_BEFOREPRINT || aEventType == NS_AFTERPRINT);\n>+\n>+  nsString eventName(aEventType == NS_BEFOREPRINT\n>+                     ? NS_LITERAL_STRING(\"beforeprint\")\n>+                     : NS_LITERAL_STRING(\"afterprint\"));\n>+\n>   nsCOMArray<nsIDocument> targets;\n>   CollectDocuments(aDoc, &targets);\n>   for (int32_t i = 0; i < targets.Count(); ++i) {\n>     nsIDocument* d = targets[i];\n>-    nsContentUtils::DispatchTrustedEvent(d, d->GetWindow(),\n>-                                         aEvent, false, false, nullptr);\n>+    DispatchSinglePrintEvent(d, eventName, aIsPrintPreview, false);\n>+\n>+    if (d == aDoc) {\n>+      // Also send it to the outermost window's chrome event handler.\n>+      // ??? May not be necessary.\nEvents propagate from content to chrome\n\n\n>+      DispatchSinglePrintEvent(d, eventName, aIsPrintPreview, true);\n>+    }\n>   }\n...but you end up dispatching wrong kind of before/afterprint events.\nbefore/afterprint are plain old Events\n>+  // The print settings can force-disable progress events for a particular\n>+  // job, but they can't do the opposite.\n>+  if (mShowPrintProgress)\n>+    mPrt->mPrintSettings->GetShowPrintProgress(&mShowPrintProgress);\nif (expr) {\n  stmt;\n}\n\n>-    // Ask dialog to be Print Shown via the Plugable Printing Dialog Service\n>-    // This service is for the Print Dialog and the Print Progress Dialog\n>-    // If printing silently or you can't get the service continue on\n>+    // The print settings can force a particular print job to be silent,\n>+    // but they can't do the opposite.\n>+    if (!printSilently)\n>+      mPrt->mPrintSettings->GetPrintSilent(&printSilently);\nditto\n\n>+    // NS_ERROR_ABORT here means the user cancelled printing from\n>+    // inside the print dialog.  Do not spam stderr in that case.\n>+    if (rv == NS_ERROR_ABORT)\n>       return rv;\nditto\n>+// We can't use nsAsyncDOMEvent for this because it doesn't support\n>+// firing preconstructed events at the chrome event handler.\n>+class AsyncChromeEvent : public nsRunnable {\n{ goes to the next line, but you really should just change nsAsyncDOMEvent.\nAnd I don't understand how this dispatching anything to chrome only.\n\n>+nsPrintEngine::FirePrintErrorEvent(nsIDocument *aDocument,\n>+                                   bool         aIsPrintPreview,\n>+                                   nsresult     aErrorCode)\n>+{\n>+  nsIPresShell *shell = aDocument->GetShell();\n>+  nsPresContext *ctxt = shell ? shell->GetPresContext() : nullptr;\n>+  nsPIDOMWindow *win = aDocument->GetWindow();\n* goes with type. nsIPresShell* shell etc.", "count": 44, "author": "bugs@pettay.fi", "time": "2013-04-08T10:03:47Z", "id": 7288056}, {"creator": "zackw@panix.com", "attachment_id": null, "text": "(In reply to Olli Pettay [:smaug] from comment #43)\n>\n> Don't add support for document.createEvent(). That is for legacy events only.\n\nOh, is it?  I was under the impression this was the preferred way to create events (and that various other mechanisms, e.g. the nsContentUtils::Dispatch*Event stuff, ended up in here too).\n\nCan you comment on whether the constants added to widget/nsGUIEvent.h are necessary, and if so, for what?\n\n> >+++ b/dom/tests/mochitest/general/test_interfaces.html\n> >@@ -531,27 +531,37 @@ var interfaceNamesInGlobalScope =\n> >     \"RTCIceCandidate\",\n> >     \"RTCPeerConnection\",\n> >     \"LocalMediaStream\",\n> >     \"CSSConditionRule\",\n> >     \"CSSGroupingRule\",\n> >     \"AsyncScrollEventDetail\",\n> >     \"MozSmsSegmentInfo\",\n> >     \"DOMCursor\",\n> >-    \"BlobEvent\"\n> >+    \"BlobEvent\",\n> >+    \"MozPrintEvent\",\n> >+    \"MozPrintErrorEvent\",\n> >+    \"MozPrintProgressEvent\",\n> >+    \"MozActivity\",\n> >+    \"MozActivityHandlerDescription\",\n> >+    \"MozActivityOptions\",\n> >+    \"MozActivityRequestHandler\",\n> >+    \"MozNavigatorActivities\",\n> >+    \"NavigatorSystemMessages\",\n> >+    \"SystemMessageCallback\"\n> >   ]\n> Why you add so many interfaces here?\n\nThe test fails on my dev box if I don't also add the Activity and SystemMessages interfaces.  I don't know why it doesn't fail on the build farm; dom/activities and dom/messages appear to be built unconditionally.\n\n> I think it is better to wait still few days so that event codegen can deal\n> with webidl.\n> Then we can implement new events without exposing them to web pages.\n\nSure, I'm not going to have time to revise this stuff for maybe a week or two anyway.  (And I'd prefer to finish writing the code that *uses* these events first.)  What's the bug for those changes, so I can see what will have to change here?", "count": 45, "author": "zackw@panix.com", "creation_time": "2013-04-08T14:17:30Z", "bug_id": 650960, "raw_text": "(In reply to Olli Pettay [:smaug] from comment #43)\n>\n> Don't add support for document.createEvent(). That is for legacy events only.\n\nOh, is it?  I was under the impression this was the preferred way to create events (and that various other mechanisms, e.g. the nsContentUtils::Dispatch*Event stuff, ended up in here too).\n\nCan you comment on whether the constants added to widget/nsGUIEvent.h are necessary, and if so, for what?\n\n> >+++ b/dom/tests/mochitest/general/test_interfaces.html\n> >@@ -531,27 +531,37 @@ var interfaceNamesInGlobalScope =\n> >     \"RTCIceCandidate\",\n> >     \"RTCPeerConnection\",\n> >     \"LocalMediaStream\",\n> >     \"CSSConditionRule\",\n> >     \"CSSGroupingRule\",\n> >     \"AsyncScrollEventDetail\",\n> >     \"MozSmsSegmentInfo\",\n> >     \"DOMCursor\",\n> >-    \"BlobEvent\"\n> >+    \"BlobEvent\",\n> >+    \"MozPrintEvent\",\n> >+    \"MozPrintErrorEvent\",\n> >+    \"MozPrintProgressEvent\",\n> >+    \"MozActivity\",\n> >+    \"MozActivityHandlerDescription\",\n> >+    \"MozActivityOptions\",\n> >+    \"MozActivityRequestHandler\",\n> >+    \"MozNavigatorActivities\",\n> >+    \"NavigatorSystemMessages\",\n> >+    \"SystemMessageCallback\"\n> >   ]\n> Why you add so many interfaces here?\n\nThe test fails on my dev box if I don't also add the Activity and SystemMessages interfaces.  I don't know why it doesn't fail on the build farm; dom/activities and dom/messages appear to be built unconditionally.\n\n> I think it is better to wait still few days so that event codegen can deal\n> with webidl.\n> Then we can implement new events without exposing them to web pages.\n\nSure, I'm not going to have time to revise this stuff for maybe a week or two anyway.  (And I'd prefer to finish writing the code that *uses* these events first.)  What's the bug for those changes, so I can see what will have to change here?", "tags": [], "is_private": false, "time": "2013-04-08T14:17:30Z", "id": 7288796}, {"text": "(In reply to Olli Pettay [:smaug] from comment #44)\n> >+    if (d == aDoc) {\n> >+      // Also send it to the outermost window's chrome event handler.\n> >+      // ??? May not be necessary.\n> Events propagate from content to chrome\n\nThis could all stand to be better documented.  Is it possible for content to prevent chrome from seeing the event?\n\n> >+      DispatchSinglePrintEvent(d, eventName, aIsPrintPreview, true);\n> >+    }\n> >   }\n> ...but you end up dispatching wrong kind of before/afterprint events.\n> before/afterprint are plain old Events\n\nIntentional change which you already objected to (comment 42).  I think I have an alternative design which doesn't change that.\n\n> >+  // The print settings can force-disable progress events for a particular\n> >+  // job, but they can't do the opposite.\n> >+  if (mShowPrintProgress)\n> >+    mPrt->mPrintSettings->GetShowPrintProgress(&mShowPrintProgress);\n> if (expr) {\n>   stmt;\n> }\n\nWill change.\n\n> >+    // NS_ERROR_ABORT here means the user cancelled printing from\n> >+    // inside the print dialog.  Do not spam stderr in that case.\n> >+    if (rv == NS_ERROR_ABORT)\n> >       return rv;\n\nWill not change; file style is no braces for early returns.\n\n> ditto\n> >+// We can't use nsAsyncDOMEvent for this because it doesn't support\n> >+// firing preconstructed events at the chrome event handler.\n> >+class AsyncChromeEvent : public nsRunnable {\n> { goes to the next line, but you really should just change nsAsyncDOMEvent.\n> And I don't understand how this dispatching anything to chrome only.\n\nI suppose the name is a little misleading.  It dispatches to whatever it's given as the target, but it's always given a window's parent target by the users.  Anyway, happy to change nsAsyncDOMEvent, I just was trying to keep things local.\n\n> >+nsPrintEngine::FirePrintErrorEvent(nsIDocument *aDocument,\n> >+                                   bool         aIsPrintPreview,\n> >+                                   nsresult     aErrorCode)\n> >+{\n> >+  nsIPresShell *shell = aDocument->GetShell();\n> >+  nsPresContext *ctxt = shell ? shell->GetPresContext() : nullptr;\n> >+  nsPIDOMWindow *win = aDocument->GetWindow();\n> * goes with type. nsIPresShell* shell etc.\n\nThe file is not consistent on this one, and I feel *very strongly* that putting the asterisk with the type is *misleading*, since it actually binds to the right.", "count": 46, "author": "zackw@panix.com", "time": "2013-04-08T14:34:18Z", "id": 7288871, "raw_text": "(In reply to Olli Pettay [:smaug] from comment #44)\n> >+    if (d == aDoc) {\n> >+      // Also send it to the outermost window's chrome event handler.\n> >+      // ??? May not be necessary.\n> Events propagate from content to chrome\n\nThis could all stand to be better documented.  Is it possible for content to prevent chrome from seeing the event?\n\n> >+      DispatchSinglePrintEvent(d, eventName, aIsPrintPreview, true);\n> >+    }\n> >   }\n> ...but you end up dispatching wrong kind of before/afterprint events.\n> before/afterprint are plain old Events\n\nIntentional change which you already objected to (comment 42).  I think I have an alternative design which doesn't change that.\n\n> >+  // The print settings can force-disable progress events for a particular\n> >+  // job, but they can't do the opposite.\n> >+  if (mShowPrintProgress)\n> >+    mPrt->mPrintSettings->GetShowPrintProgress(&mShowPrintProgress);\n> if (expr) {\n>   stmt;\n> }\n\nWill change.\n\n> >+    // NS_ERROR_ABORT here means the user cancelled printing from\n> >+    // inside the print dialog.  Do not spam stderr in that case.\n> >+    if (rv == NS_ERROR_ABORT)\n> >       return rv;\n\nWill not change; file style is no braces for early returns.\n\n> ditto\n> >+// We can't use nsAsyncDOMEvent for this because it doesn't support\n> >+// firing preconstructed events at the chrome event handler.\n> >+class AsyncChromeEvent : public nsRunnable {\n> { goes to the next line, but you really should just change nsAsyncDOMEvent.\n> And I don't understand how this dispatching anything to chrome only.\n\nI suppose the name is a little misleading.  It dispatches to whatever it's given as the target, but it's always given a window's parent target by the users.  Anyway, happy to change nsAsyncDOMEvent, I just was trying to keep things local.\n\n> >+nsPrintEngine::FirePrintErrorEvent(nsIDocument *aDocument,\n> >+                                   bool         aIsPrintPreview,\n> >+                                   nsresult     aErrorCode)\n> >+{\n> >+  nsIPresShell *shell = aDocument->GetShell();\n> >+  nsPresContext *ctxt = shell ? shell->GetPresContext() : nullptr;\n> >+  nsPIDOMWindow *win = aDocument->GetWindow();\n> * goes with type. nsIPresShell* shell etc.\n\nThe file is not consistent on this one, and I feel *very strongly* that putting the asterisk with the type is *misleading*, since it actually binds to the right.", "bug_id": 650960, "creation_time": "2013-04-08T14:34:18Z", "creator": "zackw@panix.com", "tags": [], "attachment_id": null, "is_private": false}, {"tags": [], "raw_text": "(In reply to Zack Weinberg (:zwol) from comment #46)\n> This could all stand to be better documented.  Is it possible for content to\n> prevent chrome from seeing the event?\nIf chrome adds listener to capture phase, or system group, then the event is guaranteed to end up to chrome", "creation_time": "2013-04-08T14:39:08Z", "bug_id": 650960, "is_private": false, "id": 7288889, "time": "2013-04-08T14:39:08Z", "creator": "bugs@pettay.fi", "attachment_id": null, "text": "(In reply to Zack Weinberg (:zwol) from comment #46)\n> This could all stand to be better documented.  Is it possible for content to\n> prevent chrome from seeing the event?\nIf chrome adds listener to capture phase, or system group, then the event is guaranteed to end up to chrome", "count": 47, "author": "bugs@pettay.fi"}, {"count": 48, "text": "Philipp, Guillaume, I'd like to bring this bug to the fx team's attention.  This is currently *the* blocker for further progress on print subsystem modernization.  It's a big mess of poorly worked out DOM-level, chrome-level, and UI-level design decisions and I would love some help from people who understand the latter two better than I do (which is to say, better than hardly at all).", "time": "2014-01-22T14:20:27Z", "author": "zackw@panix.com", "id": 8319673, "bug_id": 650960, "creation_time": "2014-01-22T14:20:27Z", "raw_text": "Philipp, Guillaume, I'd like to bring this bug to the fx team's attention.  This is currently *the* blocker for further progress on print subsystem modernization.  It's a big mess of poorly worked out DOM-level, chrome-level, and UI-level design decisions and I would love some help from people who understand the latter two better than I do (which is to say, better than hardly at all).", "tags": [], "creator": "zackw@panix.com", "is_private": false, "attachment_id": null}, {"time": "2014-01-22T15:04:06Z", "author": "philipp@mozilla.com", "id": 8319856, "count": 49, "text": "As this is too technical for me to really grasp, I put it up on the backlog for triage by people who have a better understanding of the matter.", "attachment_id": null, "is_private": false, "bug_id": 650960, "creation_time": "2014-01-22T15:04:06Z", "raw_text": "As this is too technical for me to really grasp, I put it up on the backlog for triage by people who have a better understanding of the matter.", "tags": [], "creator": "philipp@mozilla.com"}, {"attachment_id": null, "is_private": false, "bug_id": 650960, "creation_time": "2016-06-27T20:14:25Z", "raw_text": "Resetting owner to default per Zack's request.", "tags": [], "creator": "benjamin@smedbergs.us", "time": "2016-06-27T20:14:25Z", "author": "benjamin@smedbergs.us", "id": 11505675, "count": 50, "text": "Resetting owner to default per Zack's request."}]}}}