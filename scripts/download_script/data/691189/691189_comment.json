{"bugs": {"691189": {"comments": [{"creator": "justin.lebar+bug@gmail.com", "is_private": false, "count": 0, "author": "justin.lebar+bug@gmail.com", "creation_time": "2011-10-02T19:58:12Z", "tags": [], "bug_id": 691189, "time": "2011-10-02T19:58:12Z", "text": "According to my preliminary measurements from bug 688979, nsCSSSelectorList::AddSelector can be responsible for up to 2% of all mallocs in the browser.  This makes it one of the five or so most malloc-y callsites (falling after nsTArray, strings, hunspell, and glib).\n\nI'm not familiar with this code, but it looks like it stores nsCSSRules as a linked list.  I wonder if we could use an nsAutoTArray here instead.", "attachment_id": null, "raw_text": "According to my preliminary measurements from bug 688979, nsCSSSelectorList::AddSelector can be responsible for up to 2% of all mallocs in the browser.  This makes it one of the five or so most malloc-y callsites (falling after nsTArray, strings, hunspell, and glib).\n\nI'm not familiar with this code, but it looks like it stores nsCSSRules as a linked list.  I wonder if we could use an nsAutoTArray here instead.", "id": 5752994}, {"creator": "justin.lebar+bug@gmail.com", "is_private": false, "tags": [], "time": "2011-10-02T20:14:09Z", "text": "41718 malloc's ( 2%):\n  malloc at src/memory/jemalloc/jemalloc.c:6075\n  moz_xmalloc at src/memory/mozalloc/mozalloc.cpp:104\n  nsCSSSelectorList::AddSelector(unsigned short) at src/layout/style/StyleRule.cpp:833\n\n33171 malloc's ( 1%):\n  malloc at src/memory/jemalloc/jemalloc.c:6075\n  moz_xmalloc at src/memory/mozalloc/mozalloc.cpp:104\n  nsCSSSelector::AddClass(nsString const&) at src/layout/style/StyleRule.cpp:407\n\nTo put this in perspective, these two sites together are about 75,000 malloc's, while nsCStrings are responsible for about 98,000 malloc's.", "author": "justin.lebar+bug@gmail.com", "creation_time": "2011-10-02T20:14:09Z", "raw_text": "41718 malloc's ( 2%):\n  malloc at src/memory/jemalloc/jemalloc.c:6075\n  moz_xmalloc at src/memory/mozalloc/mozalloc.cpp:104\n  nsCSSSelectorList::AddSelector(unsigned short) at src/layout/style/StyleRule.cpp:833\n\n33171 malloc's ( 1%):\n  malloc at src/memory/jemalloc/jemalloc.c:6075\n  moz_xmalloc at src/memory/mozalloc/mozalloc.cpp:104\n  nsCSSSelector::AddClass(nsString const&) at src/layout/style/StyleRule.cpp:407\n\nTo put this in perspective, these two sites together are about 75,000 malloc's, while nsCStrings are responsible for about 98,000 malloc's.", "attachment_id": null, "id": 5753009, "count": 1, "bug_id": 691189}, {"raw_text": "I could have sworn we had existing mail threads and maybe even bugs on this, but I can't locate them...", "attachment_id": null, "id": 5753053, "count": 2, "creator": "bzbarsky@mit.edu", "is_private": false, "bug_id": 691189, "time": "2011-10-02T20:53:46Z", "tags": [], "text": "I could have sworn we had existing mail threads and maybe even bugs on this, but I can't locate them...", "author": "bzbarsky@mit.edu", "creation_time": "2011-10-02T20:53:46Z"}, {"count": 3, "bug_id": 691189, "is_private": false, "creator": "bzbarsky@mit.edu", "text": "Ah, there was data in bug 551477 and I had a note-to-self mail.  I know dbaron has some concrete thoughts here, though.", "time": "2011-10-02T20:57:19Z", "tags": [], "creation_time": "2011-10-02T20:57:19Z", "author": "bzbarsky@mit.edu", "raw_text": "Ah, there was data in bug 551477 and I had a note-to-self mail.  I know dbaron has some concrete thoughts here, though.", "attachment_id": null, "id": 5753060}, {"count": 4, "creator": "dbaron@dbaron.org", "is_private": false, "tags": [], "bug_id": 691189, "time": "2011-10-02T23:45:25Z", "text": "Not all that concrete, but more along the lines that we should consider draining the swamp instead of swatting the mosquitoes with flyswatters.", "author": "dbaron@dbaron.org", "creation_time": "2011-10-02T23:45:25Z", "raw_text": "Not all that concrete, but more along the lines that we should consider draining the swamp instead of swatting the mosquitoes with flyswatters.", "attachment_id": null, "id": 5753218}, {"tags": [], "time": "2011-10-02T23:55:34Z", "text": "FWIW, the two callsites in comment 1 are the only sites in StyleRule.cpp which show up in the top 100 malloc sites.", "author": "justin.lebar+bug@gmail.com", "creation_time": "2011-10-02T23:55:34Z", "creator": "justin.lebar+bug@gmail.com", "is_private": false, "id": 5753227, "raw_text": "FWIW, the two callsites in comment 1 are the only sites in StyleRule.cpp which show up in the top 100 malloc sites.", "attachment_id": null, "bug_id": 691189, "count": 5}, {"bug_id": 691189, "count": 6, "id": 5753231, "raw_text": "Most of the selector allocation probably comes from sites in the CSS parser; it's only this piece where the parser happens to do the allocation by calling a method that's implemented in a different file.\n\nAnd, to be clear, in comment 4, what I meant is that we should consider, without reference to the current code, how one ought to implement a space-efficient representation of CSS selectors such that the things we need to do with them are still fast (and hopefully faster).  I tend to think a member per thing-we-might-have is the wrong approach, and we could have a fused-allocation structure with parts of the fused allocation indicating what's coming next, and perhaps a few things that make it easy to skip around (in particular, the size of each compound selector (in selectors4 terminology) / sequence of simple selectors (in css3-selectors terminology) / simple selector (in CSS1/CSS2.1 terminology)).", "attachment_id": null, "text": "Most of the selector allocation probably comes from sites in the CSS parser; it's only this piece where the parser happens to do the allocation by calling a method that's implemented in a different file.\n\nAnd, to be clear, in comment 4, what I meant is that we should consider, without reference to the current code, how one ought to implement a space-efficient representation of CSS selectors such that the things we need to do with them are still fast (and hopefully faster).  I tend to think a member per thing-we-might-have is the wrong approach, and we could have a fused-allocation structure with parts of the fused allocation indicating what's coming next, and perhaps a few things that make it easy to skip around (in particular, the size of each compound selector (in selectors4 terminology) / sequence of simple selectors (in css3-selectors terminology) / simple selector (in CSS1/CSS2.1 terminology)).", "time": "2011-10-03T00:02:03Z", "tags": [], "creation_time": "2011-10-03T00:02:03Z", "author": "dbaron@dbaron.org", "is_private": false, "creator": "dbaron@dbaron.org"}]}}, "comments": {}}