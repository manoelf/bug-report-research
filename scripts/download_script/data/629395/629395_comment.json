{"bugs": {"629395": {"comments": [{"is_private": false, "text": "(Marking secure just in case).\n\nWe don't filter the \"title\" attribute in header.html.tmpl. This may have been a questionable design decision; it means that every call site has to filter the passed value instead (and there are a large number). Fortunately, often we do it as:\n\n[% title = BLOCK %]\n...\n[% END %]\n\n[% PROCESS global/header.html.tmpl title = title %]\n\nwhich means that 008filter.t will catch any unfiltered directives. But if you do directly:\n\n[% PROCESS global/header.html.tmpl title = \"Something About $variable\" %]\n\nthen it won't get picked up by that test.\n\nI did a quick audit and only found a couple of places where a value is used in this interpolated way without escaping:\n\n      [% title = \"User $loginold updated\" %]\n      [% title = \"User $otheruser.login not changed\" %]\n      [% title = \"User $otheruser.login deleted\" %]\n(all from global/messages.html.tmpl).\n\nNow I think that's a validated user object and so it can only contain email characters and so we are safe... but a) I want confirmation, b) my check wasn't very rigorous and c) perhaps others can think of ways we need to audit the code based on the above analysis.\n\nGerv", "id": 5232214, "time": "2011-01-27T16:49:09Z", "creation_time": "2011-01-27T16:49:09Z", "creator": "gerv@mozilla.org", "count": 0, "raw_text": "(Marking secure just in case).\n\nWe don't filter the \"title\" attribute in header.html.tmpl. This may have been a questionable design decision; it means that every call site has to filter the passed value instead (and there are a large number). Fortunately, often we do it as:\n\n[% title = BLOCK %]\n...\n[% END %]\n\n[% PROCESS global/header.html.tmpl title = title %]\n\nwhich means that 008filter.t will catch any unfiltered directives. But if you do directly:\n\n[% PROCESS global/header.html.tmpl title = \"Something About $variable\" %]\n\nthen it won't get picked up by that test.\n\nI did a quick audit and only found a couple of places where a value is used in this interpolated way without escaping:\n\n      [% title = \"User $loginold updated\" %]\n      [% title = \"User $otheruser.login not changed\" %]\n      [% title = \"User $otheruser.login deleted\" %]\n(all from global/messages.html.tmpl).\n\nNow I think that's a validated user object and so it can only contain email characters and so we are safe... but a) I want confirmation, b) my check wasn't very rigorous and c) perhaps others can think of ways we need to audit the code based on the above analysis.\n\nGerv", "attachment_id": null, "bug_id": 629395, "tags": [], "author": "gerv@mozilla.org"}, {"creation_time": "2011-01-27T16:50:20Z", "creator": "gerv@mozilla.org", "time": "2011-01-27T16:50:20Z", "id": 5232222, "text": "Also, we should probably document somewhere that when people are making page.cgi pages, passing unescaped values to header.html.tmpl in 'title' is a no-no. (That's how I found this.)\n\nGerv", "is_private": false, "bug_id": 629395, "attachment_id": null, "author": "gerv@mozilla.org", "tags": [], "count": 1, "raw_text": "Also, we should probably document somewhere that when people are making page.cgi pages, passing unescaped values to header.html.tmpl in 'title' is a no-no. (That's how I found this.)\n\nGerv"}, {"count": 2, "raw_text": "'title' being unfiltered is per design, see bug 330555. So this is intentional. The three titles you list in comment 0 all come from bug 119485, which landed in Bugzilla 2.20. But the login name cannot contain dangerous stuff. validate_email_syntax() excludes all these characters:\n\n  $addr !~ /[\\\\\\(\\)<>&,;:\"\\[\\] \\t\\r\\n]/\n\nSo this is not a security bug. What we should do, though, is to forbid $variables in quotes, to force us to correctly escape them (or explicitly use FILTER none). The only allowed $variables should be $terms.foo, as those are controlled by the maintainer only.\n\nSo we should morphe this bug into \"Add a test which catches $variables in quotes\".", "attachment_id": null, "bug_id": 629395, "tags": [], "author": "LpSolit@gmail.com", "is_private": false, "id": 5232335, "text": "'title' being unfiltered is per design, see bug 330555. So this is intentional. The three titles you list in comment 0 all come from bug 119485, which landed in Bugzilla 2.20. But the login name cannot contain dangerous stuff. validate_email_syntax() excludes all these characters:\n\n  $addr !~ /[\\\\\\(\\)<>&,;:\"\\[\\] \\t\\r\\n]/\n\nSo this is not a security bug. What we should do, though, is to forbid $variables in quotes, to force us to correctly escape them (or explicitly use FILTER none). The only allowed $variables should be $terms.foo, as those are controlled by the maintainer only.\n\nSo we should morphe this bug into \"Add a test which catches $variables in quotes\".", "time": "2011-01-27T17:19:36Z", "creation_time": "2011-01-27T17:19:36Z", "creator": "LpSolit@gmail.com"}, {"creator": "gerv@mozilla.org", "tags": [], "author": "gerv@mozilla.org", "creation_time": "2011-01-27T17:24:51Z", "attachment_id": null, "bug_id": 629395, "is_private": false, "text": "LpSolit: I seem to remember us deciding to do it, but couldn't remember why; your memory is better than mine :-) I still think the use case for HTML in <title> is very weak, and we would have been better off filtering it in header.html.tmpl. Still, you are right - the right thing to do now is to have a test to catch $ usage in titles. But given that someone could do:\n\n[% title = BLOCK %]\n  \"Title is \" _ [% something FILTER html %] _ 'More\n   string' _ \"A \\'string\\'\"\n   ... <arbitrary complexity>\n   \"\\'$Foo'\" _ \" Bar\"\n[% END %]\n\nis it actually possible to do that using a regexp?\n\nGerv", "id": 5232352, "raw_text": "LpSolit: I seem to remember us deciding to do it, but couldn't remember why; your memory is better than mine :-) I still think the use case for HTML in <title> is very weak, and we would have been better off filtering it in header.html.tmpl. Still, you are right - the right thing to do now is to have a test to catch $ usage in titles. But given that someone could do:\n\n[% title = BLOCK %]\n  \"Title is \" _ [% something FILTER html %] _ 'More\n   string' _ \"A \\'string\\'\"\n   ... <arbitrary complexity>\n   \"\\'$Foo'\" _ \" Bar\"\n[% END %]\n\nis it actually possible to do that using a regexp?\n\nGerv", "time": "2011-01-27T17:24:51Z", "count": 3}, {"tags": [], "author": "LpSolit@gmail.com", "attachment_id": null, "bug_id": 629395, "raw_text": "If someone is crazy enough to write such an unreadable string, reviewers won't let this go through. Note that what I said in comment 2 is not limited to titles, but to all variables used in quotes, being for titles or not.", "count": 4, "creator": "LpSolit@gmail.com", "creation_time": "2011-01-27T17:31:59Z", "is_private": false, "text": "If someone is crazy enough to write such an unreadable string, reviewers won't let this go through. Note that what I said in comment 2 is not limited to titles, but to all variables used in quotes, being for titles or not.", "id": 5232380, "time": "2011-01-27T17:31:59Z"}, {"raw_text": "(In reply to comment #2)\n> So this is not a security bug. What we should do, though, is to forbid\n> $variables in quotes, \n\n  Ah, no, that's an important functionality.\n\n> So we should morphe this bug into \"Add a test which catches $variables in\n> quotes\".\n\n  Well, or some better code in the filter.t test that makes sure that those variables are actually being filtered properly (or being added to filterexceptions).", "count": 5, "tags": [], "author": "mkanat@bugzilla.org", "attachment_id": null, "bug_id": 629395, "id": 5233333, "text": "(In reply to comment #2)\n> So this is not a security bug. What we should do, though, is to forbid\n> $variables in quotes, \n\n  Ah, no, that's an important functionality.\n\n> So we should morphe this bug into \"Add a test which catches $variables in\n> quotes\".\n\n  Well, or some better code in the filter.t test that makes sure that those variables are actually being filtered properly (or being added to filterexceptions).", "time": "2011-01-27T21:33:58Z", "is_private": false, "creator": "mkanat@bugzilla.org", "creation_time": "2011-01-27T21:33:58Z"}]}}, "comments": {}}