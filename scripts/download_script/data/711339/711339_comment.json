{"comments": {}, "bugs": {"711339": {"comments": [{"id": 5921243, "attachment_id": null, "raw_text": "When you're futzing with binary data using Typed Arrays, it's not uncommon that one may want to extract strings from that data. Right now one would have to manually construct this string in a for-loop using String.fromCharCode().\n\nIt would be nice if I could walk up to an ArrayBufferView and ask it it to give me a subset of its data as a string. In a similar fashion, it should also be able to set data in the ArrayBuffer by passing it a string:\n\n    DOMString getString(long begin, optional long end);\n    void setString(long offset, DOMString value);\n\nThe character interpretation would depend on the ArrayBufferView's type. If it's an Int8/Uint8Array, it'd be a regular C-type string, an Int16/Uint16Array would yield a nice JS-type UCS-2 type string. For Int32/Uint32Array I propose padding with two zero bytes, and the float arrays should raise an exception.\n\n\nAlternatively, instead of adding this capability to ArrayBufferView, it could also be added to DataView (bug 575688). In that case I propose the following methods:\n\n  DOMString getString(unsigned long byteOffset,\n                      unsigned short bytesPerChar,\n                      optional boolean littleEndian);\n\n  void setString(unsigned long byteOffset,\n                 DOMString value,\n                 unsigned short bytesPerChar,\n                 optional boolean littleEndian);\n\n\nGiven consensus over the API and whether this is actually a Good Idea(tm), I would be willing to give the implementation a shot. This would make some of the B2G low level code a bit more elegant and possibly also faster/less allocation hungry.\n\nP.S.: Bug 687418 seems related.", "author": "philipp@weitershausen.de", "creation_time": "2011-12-16T08:01:30Z", "time": "2011-12-16T08:01:30Z", "bug_id": 711339, "tags": [], "text": "When you're futzing with binary data using Typed Arrays, it's not uncommon that one may want to extract strings from that data. Right now one would have to manually construct this string in a for-loop using String.fromCharCode().\n\nIt would be nice if I could walk up to an ArrayBufferView and ask it it to give me a subset of its data as a string. In a similar fashion, it should also be able to set data in the ArrayBuffer by passing it a string:\n\n    DOMString getString(long begin, optional long end);\n    void setString(long offset, DOMString value);\n\nThe character interpretation would depend on the ArrayBufferView's type. If it's an Int8/Uint8Array, it'd be a regular C-type string, an Int16/Uint16Array would yield a nice JS-type UCS-2 type string. For Int32/Uint32Array I propose padding with two zero bytes, and the float arrays should raise an exception.\n\n\nAlternatively, instead of adding this capability to ArrayBufferView, it could also be added to DataView (bug 575688). In that case I propose the following methods:\n\n  DOMString getString(unsigned long byteOffset,\n                      unsigned short bytesPerChar,\n                      optional boolean littleEndian);\n\n  void setString(unsigned long byteOffset,\n                 DOMString value,\n                 unsigned short bytesPerChar,\n                 optional boolean littleEndian);\n\n\nGiven consensus over the API and whether this is actually a Good Idea(tm), I would be willing to give the implementation a shot. This would make some of the B2G low level code a bit more elegant and possibly also faster/less allocation hungry.\n\nP.S.: Bug 687418 seems related.", "creator": "philipp@weitershausen.de", "is_private": false, "count": 0}]}}}