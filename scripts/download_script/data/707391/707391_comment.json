{"comments": {}, "bugs": {"707391": {"comments": [{"is_private": false, "count": 0, "id": 5890116, "author": "taras.mozilla@glek.net", "creator": "taras.mozilla@glek.net", "creation_time": "2011-12-03T02:05:55Z", "time": "2011-12-03T02:05:55Z", "raw_text": "It is not useful to know that we are spending a lot of time in event loop unless know where that time is going. Would be great to be able to generate telemetry data to report proportion of time spent in selector-matching, reflows, js execution, other blocking APIs. \nThis would help us justify invasive solutions like js green threads(bug 384412).\n\nWill Benoit's profiler be sufficient for this? My goal would be to get an about:memory style report of exactly where time was spent(except snappy would need a temporal dimension).", "attachment_id": null, "tags": [], "text": "It is not useful to know that we are spending a lot of time in event loop unless know where that time is going. Would be great to be able to generate telemetry data to report proportion of time spent in selector-matching, reflows, js execution, other blocking APIs. \nThis would help us justify invasive solutions like js green threads(bug 384412).\n\nWill Benoit's profiler be sufficient for this? My goal would be to get an about:memory style report of exactly where time was spent(except snappy would need a temporal dimension).", "bug_id": 707391}, {"raw_text": "Broken record: with the circular-queue support now in jprof, it's fairly easy to trigger it on \"long\" event-loop instances and save the samples from the firing of the event until when it comes back to the loop (as an example).  \n\nThen when about:snappy (or whatever) is (re)loaded, spawn jprof to process the data thus far and dump it to an HTML file, and then it can be loaded into a tab, or what have you.  The downside is that it's a profile - you have to be able to read profiles to use it.  This might be of more use for the equivalent to an \"about:snappy?profile\" link off about:snappy.  \n\nWith minor mods, jprof could select out individual instances for profiling - i.e. if about:snappy is showing you data (such as a histogram), you could select a bin of the histogram and pull up profiling data for just those instances (jprof can filter which sets of samples are included, and could easily be extended to include that).  Or if it's showing a timeline, it could profil a specific event-loop instance.", "attachment_id": null, "tags": [], "bug_id": 707391, "text": "Broken record: with the circular-queue support now in jprof, it's fairly easy to trigger it on \"long\" event-loop instances and save the samples from the firing of the event until when it comes back to the loop (as an example).  \n\nThen when about:snappy (or whatever) is (re)loaded, spawn jprof to process the data thus far and dump it to an HTML file, and then it can be loaded into a tab, or what have you.  The downside is that it's a profile - you have to be able to read profiles to use it.  This might be of more use for the equivalent to an \"about:snappy?profile\" link off about:snappy.  \n\nWith minor mods, jprof could select out individual instances for profiling - i.e. if about:snappy is showing you data (such as a histogram), you could select a bin of the histogram and pull up profiling data for just those instances (jprof can filter which sets of samples are included, and could easily be extended to include that).  Or if it's showing a timeline, it could profil a specific event-loop instance.", "is_private": false, "count": 1, "id": 5927999, "author": "rjesup@jesup.org", "creator": "rjesup@jesup.org", "creation_time": "2011-12-19T22:27:11Z", "time": "2011-12-19T22:27:11Z"}, {"attachment_id": null, "raw_text": "It's not a matter of using a specific backend, it's the outcome I'm interested in. If we can categorize where our event loop time is spent via telemetry in the wild with jprof, that's good.", "tags": [], "text": "It's not a matter of using a specific backend, it's the outcome I'm interested in. If we can categorize where our event loop time is spent via telemetry in the wild with jprof, that's good.", "bug_id": 707391, "is_private": false, "count": 2, "id": 5928522, "creator": "taras.mozilla@glek.net", "time": "2011-12-20T01:28:13Z", "creation_time": "2011-12-20T01:28:13Z", "author": "taras.mozilla@glek.net"}, {"attachment_id": null, "raw_text": "This sounds like exactly what BenWa is working on in bug 653703.", "tags": [], "bug_id": 707391, "text": "This sounds like exactly what BenWa is working on in bug 653703.", "is_private": false, "count": 3, "id": 5929764, "creator": "ted@mielczarek.org", "time": "2011-12-20T16:17:27Z", "creation_time": "2011-12-20T16:17:27Z", "author": "ted@mielczarek.org"}, {"bug_id": 707391, "text": "(In reply to Ted Mielczarek [:ted, :luser] from comment #3)\n> This sounds like exactly what BenWa is working on in bug 653703.\n\nJeff proposed using that as a backend. This needs to be coarse grained so we can telemetry it.", "tags": [], "attachment_id": null, "raw_text": "(In reply to Ted Mielczarek [:ted, :luser] from comment #3)\n> This sounds like exactly what BenWa is working on in bug 653703.\n\nJeff proposed using that as a backend. This needs to be coarse grained so we can telemetry it.", "time": "2011-12-20T18:05:58Z", "creation_time": "2011-12-20T18:05:58Z", "creator": "taras.mozilla@glek.net", "author": "taras.mozilla@glek.net", "id": 5930180, "count": 4, "is_private": false}, {"author": "rjesup@jesup.org", "creation_time": "2011-12-20T18:15:50Z", "time": "2011-12-20T18:15:50Z", "creator": "rjesup@jesup.org", "count": 5, "id": 5930226, "is_private": false, "tags": [], "text": "FYI, in bug 712224 I have patches for jprof that make it generate \"cleopatra\" output that BenWa's visualization tool can process.", "bug_id": 707391, "raw_text": "FYI, in bug 712224 I have patches for jprof that make it generate \"cleopatra\" output that BenWa's visualization tool can process.", "attachment_id": null}]}}}