{"bugs": {"1631713": {"comments": [{"raw_text": "It's _way_ too low for real-world usage, 32MB: https://searchfox.org/mozilla-central/source/dom/worklet/WorkletThread.cpp#24.\n\nThis is making https://gogins.github.io/csound-extended/html/examples/instr.csd.html error out with OOM.\n\nThis is port of [csound](https://en.wikipedia.org/wiki/Csound) to the web using emscripten, upstream is https://github.com/gogins/csound-extended.\n\nBumping this to 64MB makes the worklet thread GC continuously, but 128MB makes it work.\n\n(note that this page has a few of other issues that makes it not work, I'm attaching a patched copy. I'll file those upstream)", "text": "It's _way_ too low for real-world usage, 32MB: https://searchfox.org/mozilla-central/source/dom/worklet/WorkletThread.cpp#24.\n\nThis is making https://gogins.github.io/csound-extended/html/examples/instr.csd.html error out with OOM.\n\nThis is port of [csound](https://en.wikipedia.org/wiki/Csound) to the web using emscripten, upstream is https://github.com/gogins/csound-extended.\n\nBumping this to 64MB makes the worklet thread GC continuously, but 128MB makes it work.\n\n(note that this page has a few of other issues that makes it not work, I'm attaching a patched copy. I'll file those upstream)", "is_private": false, "creator": "padenot@mozilla.com", "id": 14768499, "author": "padenot@mozilla.com", "creation_time": "2020-04-21T08:48:30Z", "count": 0, "bug_id": 1631713, "tags": [], "time": "2020-04-21T08:48:30Z", "attachment_id": null}, {"text": "Created attachment 9141986\ncsound-patched.tar.xz\n\nHad to compress heavily to not make it too big, included is the (hacked up) modifications I had to make. It looks like another instance of not having input arrays. I'm getting increasingly nervous about this, it's happening way too often.", "raw_text": "Had to compress heavily to not make it too big, included is the (hacked up) modifications I had to make. It looks like another instance of not having input arrays. I'm getting increasingly nervous about this, it's happening way too often.", "is_private": false, "id": 14768521, "author": "padenot@mozilla.com", "bug_id": 1631713, "attachment_id": 9141986, "creator": "padenot@mozilla.com", "creation_time": "2020-04-21T09:03:20Z", "count": 1, "tags": [], "time": "2020-04-21T09:03:20Z"}, {"creator": "padenot@mozilla.com", "creation_time": "2020-04-21T10:42:17Z", "count": 2, "tags": [], "time": "2020-04-21T10:42:17Z", "raw_text": "Jandem advises us to use the same mechanism as Workers for this: https://searchfox.org/mozilla-central/rev/d2cec90777d573585f8477d5170892e5dcdfb0ab/dom/workers/RuntimeService.cpp#181-541\n\nIdeally we'd factor this out.\n\nI'd like to land something simple before that, possibly in beta, and then do this properly.", "text": "Jandem advises us to use the same mechanism as Workers for this: https://searchfox.org/mozilla-central/rev/d2cec90777d573585f8477d5170892e5dcdfb0ab/dom/workers/RuntimeService.cpp#181-541\n\nIdeally we'd factor this out.\n\nI'd like to land something simple before that, possibly in beta, and then do this properly.", "is_private": false, "id": 14768689, "author": "padenot@mozilla.com", "bug_id": 1631713, "attachment_id": null}, {"bug_id": 1631713, "attachment_id": null, "is_private": false, "raw_text": "It seems worker code essentially [does](https://searchfox.org/mozilla-central/rev/3446310d6cc5c85cde16a82eccf560e9b71a3d44/dom/workers/RuntimeService.cpp#752) `JS_SetGCParameter(cx, JSGC_MAX_BYTES, uint32_t(-1))`, where `-1` [comes from](https://searchfox.org/mozilla-central/rev/3446310d6cc5c85cde16a82eccf560e9b71a3d44/dom/workers/RuntimeService.cpp#418) [\"javascript.options.mem.max\"](https://searchfox.org/mozilla-central/rev/3446310d6cc5c85cde16a82eccf560e9b71a3d44/modules/libpref/init/all.js#1153)\n\nThere may be [some hints](https://hg.mozilla.org/mozilla-central/rev/0d140d36f2e0dd09959376e1ae8dc2669ef389ed#l3.31) as to why context is initialized with 32MB then unconstrained.", "text": "It seems worker code essentially [does](https://searchfox.org/mozilla-central/rev/3446310d6cc5c85cde16a82eccf560e9b71a3d44/dom/workers/RuntimeService.cpp#752) `JS_SetGCParameter(cx, JSGC_MAX_BYTES, uint32_t(-1))`, where `-1` [comes from](https://searchfox.org/mozilla-central/rev/3446310d6cc5c85cde16a82eccf560e9b71a3d44/dom/workers/RuntimeService.cpp#418) [\"javascript.options.mem.max\"](https://searchfox.org/mozilla-central/rev/3446310d6cc5c85cde16a82eccf560e9b71a3d44/modules/libpref/init/all.js#1153)\n\nThere may be [some hints](https://hg.mozilla.org/mozilla-central/rev/0d140d36f2e0dd09959376e1ae8dc2669ef389ed#l3.31) as to why context is initialized with 32MB then unconstrained.", "id": 14770559, "author": "karlt@mozbugz.karlt.net", "tags": [], "count": 3, "time": "2020-04-21T23:58:35Z", "creation_time": "2020-04-21T23:58:35Z", "creator": "karlt@mozbugz.karlt.net"}, {"is_private": false, "raw_text": "Upstream PR: https://github.com/gogins/csound-extended/pull/134", "text": "Upstream PR: https://github.com/gogins/csound-extended/pull/134", "author": "padenot@mozilla.com", "id": 14771726, "bug_id": 1631713, "attachment_id": null, "creation_time": "2020-04-22T14:18:54Z", "creator": "padenot@mozilla.com", "tags": [], "count": 4, "time": "2020-04-22T14:18:54Z"}, {"tags": [], "count": 5, "time": "2020-04-22T14:33:35Z", "creation_time": "2020-04-22T14:33:35Z", "creator": "padenot@mozilla.com", "bug_id": 1631713, "attachment_id": 9142406, "is_private": false, "text": "Created attachment 9142406\nBug 1631713 - Align the maximum memory usage of worklets on workers. r?karlt", "raw_text": "", "author": "padenot@mozilla.com", "id": 14771766}, {"bug_id": 1631713, "attachment_id": null, "is_private": false, "text": "This may be what was triggering bug 1628842.", "raw_text": "This may be what was triggering bug 1628842.", "author": "karlt@mozbugz.karlt.net", "id": 14773215, "tags": [], "count": 6, "time": "2020-04-23T05:18:34Z", "creation_time": "2020-04-23T05:18:34Z", "creator": "karlt@mozbugz.karlt.net"}, {"time": "2020-04-23T06:12:54Z", "count": 7, "tags": [], "creator": "pulsebot@bots.tld", "creation_time": "2020-04-23T06:12:54Z", "attachment_id": null, "bug_id": 1631713, "id": 14773257, "author": "pulsebot@bots.tld", "raw_text": "Pushed by padenot@mozilla.com:\nhttps://hg.mozilla.org/integration/autoland/rev/47426d145e24\nAlign the maximum memory usage of worklets on workers. r=karlt", "text": "Pushed by padenot@mozilla.com:\nhttps://hg.mozilla.org/integration/autoland/rev/47426d145e24\nAlign the maximum memory usage of worklets on workers. r=karlt", "is_private": false}, {"tags": ["bugherder"], "count": 8, "time": "2020-04-23T10:06:53Z", "creation_time": "2020-04-23T10:06:53Z", "creator": "nerli@mozilla.com", "bug_id": 1631713, "attachment_id": null, "is_private": false, "text": "https://hg.mozilla.org/mozilla-central/rev/47426d145e24", "raw_text": "https://hg.mozilla.org/mozilla-central/rev/47426d145e24", "author": "nerli@mozilla.com", "id": 14773530}, {"creation_time": "2020-04-23T12:30:37Z", "creator": "padenot@mozilla.com", "time": "2020-04-23T12:30:37Z", "tags": [], "count": 9, "author": "padenot@mozilla.com", "id": 14773759, "is_private": false, "raw_text": "### Beta/Release Uplift Approval Request\n* **User impact if declined**: Website don't work with AudioWorklet, if the page allocates to many JS objects in the AudioWorkletGlobalScope. Unfortunately emscripten has a mode that triggers this very easily (where it inlines the binary WASM code as an array literal in the js file), and I've seen it happen in the wild, the original native code only needs to have a certain size.\n* **Is this code covered by automated tests?**: No\n* **Has the fix been verified in Nightly?**: Yes\n* **Needs manual test from QE?**: No\n* **If yes, steps to reproduce**: \n* **List of other uplifts needed**: None\n* **Risk to taking this patch**: Low\n* **Why is the change risky/not risky? (and alternatives if risky)**: This aligns the Worklet JS runtime on Worker JS runtime, instead of being different (we're copying the line of code added here from the web worker code, we'll fix in a way that is more configurable later).\n* **String changes made/needed**: none", "text": "Comment on attachment 9142406\nBug 1631713 - Align the maximum memory usage of worklets on workers. r?karlt\n\n### Beta/Release Uplift Approval Request\n* **User impact if declined**: Website don't work with AudioWorklet, if the page allocates to many JS objects in the AudioWorkletGlobalScope. Unfortunately emscripten has a mode that triggers this very easily (where it inlines the binary WASM code as an array literal in the js file), and I've seen it happen in the wild, the original native code only needs to have a certain size.\n* **Is this code covered by automated tests?**: No\n* **Has the fix been verified in Nightly?**: Yes\n* **Needs manual test from QE?**: No\n* **If yes, steps to reproduce**: \n* **List of other uplifts needed**: None\n* **Risk to taking this patch**: Low\n* **Why is the change risky/not risky? (and alternatives if risky)**: This aligns the Worklet JS runtime on Worker JS runtime, instead of being different (we're copying the line of code added here from the web worker code, we'll fix in a way that is more configurable later).\n* **String changes made/needed**: none", "attachment_id": 9142406, "bug_id": 1631713}, {"id": 14774792, "author": "ryanvm@gmail.com", "is_private": false, "raw_text": "Better aligns worklet memory caps with workers to avoid running out of memory in some cases. Approved for 76.0b8.", "text": "Comment on attachment 9142406\nBug 1631713 - Align the maximum memory usage of worklets on workers. r?karlt\n\nBetter aligns worklet memory caps with workers to avoid running out of memory in some cases. Approved for 76.0b8.", "attachment_id": 9142406, "bug_id": 1631713, "creation_time": "2020-04-23T20:07:03Z", "creator": "ryanvm@gmail.com", "time": "2020-04-23T20:07:03Z", "tags": [], "count": 10}, {"time": "2020-04-23T20:11:01Z", "count": 11, "tags": ["bugherder", "uplift"], "creator": "ryanvm@gmail.com", "creation_time": "2020-04-23T20:11:01Z", "attachment_id": null, "bug_id": 1631713, "author": "ryanvm@gmail.com", "id": 14774808, "text": "https://hg.mozilla.org/releases/mozilla-beta/rev/5fa0030af293", "raw_text": "https://hg.mozilla.org/releases/mozilla-beta/rev/5fa0030af293", "is_private": false}]}}, "comments": {}}