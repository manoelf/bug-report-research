{"bugs": {"631632": {"comments": [{"text": "User-Agent:       Mozilla/5.0 (Windows NT 6.1; WOW64; rv:2.0b10) Gecko/20100101 Firefox/4.0b10\nBuild Identifier: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:2.0b10) Gecko/20100101 Firefox/4.0b10\n\nAs seen on the test URL, Firefox 3.6 was able to put 83k pixels per second (on my machine) when using putImageData() for a single pixel, and 64k fillRect() per second. In FF 4.0b10 the fillRect() rate has nearly doubled (yay!) but the putImageData() performance is now 80x slower.\n\nReproducible: Always\n\nSteps to Reproduce:\n1. Visit http://jsperf.com/setting-canvas-pixel\n2. Press \"Run tests\" button\n3. Observe the test results shown under the \"Compare results of other browsers\" section at the bottom of the page.\nActual Results:  \nThe performance of the \"1x1 image data\" test is roughly two orders of magnitude worse than the performance of the \"fillRect\" test.\n\nExpected Results:  \nThe performance of the \"1x1 image data\" test should be comparable to--or slightly better then--the performance of fillRect. It should be no slower than the results of running the same test on the same machine for a build of Firefox v3.6\n\nNote that the results at the bottom of the page are averaged across all browsers and machines that have been tested; look at the result in the \"Run tests\" column for the same machine to compare between different browsers.", "count": 0, "id": 5256074, "author": "phrogz@me.com", "time": "2011-02-04T20:30:49Z", "creator": "phrogz@me.com", "tags": [], "raw_text": "User-Agent:       Mozilla/5.0 (Windows NT 6.1; WOW64; rv:2.0b10) Gecko/20100101 Firefox/4.0b10\nBuild Identifier: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:2.0b10) Gecko/20100101 Firefox/4.0b10\n\nAs seen on the test URL, Firefox 3.6 was able to put 83k pixels per second (on my machine) when using putImageData() for a single pixel, and 64k fillRect() per second. In FF 4.0b10 the fillRect() rate has nearly doubled (yay!) but the putImageData() performance is now 80x slower.\n\nReproducible: Always\n\nSteps to Reproduce:\n1. Visit http://jsperf.com/setting-canvas-pixel\n2. Press \"Run tests\" button\n3. Observe the test results shown under the \"Compare results of other browsers\" section at the bottom of the page.\nActual Results:  \nThe performance of the \"1x1 image data\" test is roughly two orders of magnitude worse than the performance of the \"fillRect\" test.\n\nExpected Results:  \nThe performance of the \"1x1 image data\" test should be comparable to--or slightly better then--the performance of fillRect. It should be no slower than the results of running the same test on the same machine for a build of Firefox v3.6\n\nNote that the results at the bottom of the page are averaged across all browsers and machines that have been tested; look at the result in the \"Run tests\" column for the same machine to compare between different browsers.", "creation_time": "2011-02-04T20:30:49Z", "bug_id": 631632, "is_private": false, "attachment_id": null}, {"author": "bzbarsky@mit.edu", "count": 1, "text": "What do the numbers look like if you disable hardware acceleration?  The two operations you're describing interact _very_ differently with the GPU.\n\nFor what it's worth, on a Mac (so canvas is not GPU-accelerated), I see both operations double in speed from 3.6 to current 4.0 betas.", "attachment_id": null, "creator": "bzbarsky@mit.edu", "time": "2011-02-04T21:02:14Z", "id": 5256160, "is_private": false, "raw_text": "What do the numbers look like if you disable hardware acceleration?  The two operations you're describing interact _very_ differently with the GPU.\n\nFor what it's worth, on a Mac (so canvas is not GPU-accelerated), I see both operations double in speed from 3.6 to current 4.0 betas.", "bug_id": 631632, "creation_time": "2011-02-04T21:02:14Z", "tags": []}, {"count": 2, "text": "Note that this test is doing 1x1 putImages; basically, it's testing overhead of doing that operation, and is generally uninteresting otherwise.  The overhead absolutely increased for D2D on Windows, but a more interesting test would be > 1x1, maybe 400x400 or similar.  But maybe the \"get/putImageData\" test is doing that?  Not sure.\n\nAlso, see bug 625267 and bug 631640.", "id": 5256176, "time": "2011-02-04T21:08:15Z", "author": "vladimir@pobox.com", "tags": [], "creator": "vladimir@pobox.com", "creation_time": "2011-02-04T21:08:15Z", "bug_id": 631632, "raw_text": "Note that this test is doing 1x1 putImages; basically, it's testing overhead of doing that operation, and is generally uninteresting otherwise.  The overhead absolutely increased for D2D on Windows, but a more interesting test would be > 1x1, maybe 400x400 or similar.  But maybe the \"get/putImageData\" test is doing that?  Not sure.\n\nAlso, see bug 625267 and bug 631640.", "attachment_id": null, "is_private": false}, {"author": "bzbarsky@mit.edu", "count": 3, "text": "Vlad, the test is testing a way to color an individual canvas pixel.  I have no idea why one would want to do such a thing, but apparently people do...\n\nIf turning off D2D improves this, then this is probably dependent on bug 625267.  But note that on Linux getImageData is slow as hell (for the obvious reasons), but the 1x1 put is actually fast.  So I wonder whether we can make the put at least faster on Windows too.\n\nWhat the get/put test does is for each pixel it gets the whole 800x300 imagedata, changes that one pixel, then puts it.  We can do that about 200 times per second on the reporter's machine, apparently.  Just putting a single pixel we can do 1500 times or so.  In other words, the overhead is about 15% of even the 800x300 putImageData call.", "attachment_id": null, "creator": "bzbarsky@mit.edu", "id": 5256226, "time": "2011-02-04T21:24:13Z", "is_private": false, "tags": [], "raw_text": "Vlad, the test is testing a way to color an individual canvas pixel.  I have no idea why one would want to do such a thing, but apparently people do...\n\nIf turning off D2D improves this, then this is probably dependent on bug 625267.  But note that on Linux getImageData is slow as hell (for the obvious reasons), but the 1x1 put is actually fast.  So I wonder whether we can make the put at least faster on Windows too.\n\nWhat the get/put test does is for each pixel it gets the whole 800x300 imagedata, changes that one pixel, then puts it.  We can do that about 200 times per second on the reporter's machine, apparently.  Just putting a single pixel we can do 1500 times or so.  In other words, the overhead is about 15% of even the 800x300 putImageData call.", "bug_id": 631632, "creation_time": "2011-02-04T21:24:13Z"}, {"creator": "phrogz@me.com", "attachment_id": null, "count": 4, "text": "If I uncheck the \"Use Hardware Acceleration when Available\" option in the Advanced section of Options I get 102k for fillRect and 145k for 1x1 on my machine. When I enable it, quit and restart Firefox and run the tests again I get 106k for fillRect and 1.7k for 1x1. It definitely seems to be related to the hardware acceleration.", "author": "phrogz@me.com", "tags": [], "creation_time": "2011-02-04T21:37:29Z", "bug_id": 631632, "raw_text": "If I uncheck the \"Use Hardware Acceleration when Available\" option in the Advanced section of Options I get 102k for fillRect and 145k for 1x1 on my machine. When I enable it, quit and restart Firefox and run the tests again I get 106k for fillRect and 1.7k for 1x1. It definitely seems to be related to the hardware acceleration.", "is_private": false, "id": 5256281, "time": "2011-02-04T21:37:29Z"}, {"tags": [], "creation_time": "2011-02-04T21:50:08Z", "bug_id": 631632, "raw_text": "Yeah, that seems pretty unfortunate.  Bas, any ideas?  Are we ending up reading stuff from the GPU for a putImageData call?  Or is any SOURCE operation just really slow?", "is_private": false, "id": 5256348, "time": "2011-02-04T21:50:08Z", "creator": "bzbarsky@mit.edu", "attachment_id": null, "text": "Yeah, that seems pretty unfortunate.  Bas, any ideas?  Are we ending up reading stuff from the GPU for a putImageData call?  Or is any SOURCE operation just really slow?", "count": 5, "author": "bzbarsky@mit.edu"}, {"is_private": false, "raw_text": "I updated the give cpp source,\nso now, when a small piece of canvas is supposed to be drawn, the called putImageData function does not process the whole canvas anymore, and then just draws the requested part because that was making it slow.\nI will upload a small file which shows the speed gain for a drawing of a 100x100 rectangle which is around 50 faster than without .", "bug_id": 631632, "creation_time": "2015-03-18T13:43:15Z", "tags": [], "time": "2015-03-18T13:43:15Z", "id": 10045044, "attachment_id": 8579341, "creator": "christos.alewa@hob.de", "author": "christos.alewa@hob.de", "count": 6, "text": "Created attachment 8579341\nAn updated source of CanvasRenderingContext2D.cpp.\n\nI updated the give cpp source,\nso now, when a small piece of canvas is supposed to be drawn, the called putImageData function does not process the whole canvas anymore, and then just draws the requested part because that was making it slow.\nI will upload a small file which shows the speed gain for a drawing of a 100x100 rectangle which is around 50 faster than without ."}, {"raw_text": "Christos, would you mind attaching a diff instead of the entire file?\n\nAlso, you probably want to request review on the diff, not mark it review+.", "bug_id": 631632, "creation_time": "2015-03-18T13:47:27Z", "tags": [], "is_private": false, "time": "2015-03-18T13:47:27Z", "id": 10045061, "creator": "bzbarsky@mit.edu", "attachment_id": null, "text": "Christos, would you mind attaching a diff instead of the entire file?\n\nAlso, you probably want to request review on the diff, not mark it review+.", "count": 7, "author": "bzbarsky@mit.edu"}, {"time": "2015-03-18T13:47:29Z", "id": 10045062, "is_private": false, "creation_time": "2015-03-18T13:47:29Z", "bug_id": 631632, "raw_text": "This file shows like I said before the time needed (and the eventual speed gain) to draw the rectangle (100x100) on the given canvas (1600x800).\nFor given size, it needs around 1 second, with the updated source it is around 20-30ms for the same drawing.", "tags": [], "author": "christos.alewa@hob.de", "count": 8, "text": "Created attachment 8579343\nCanvas-putImageData.html\n\nThis file shows like I said before the time needed (and the eventual speed gain) to draw the rectangle (100x100) on the given canvas (1600x800).\nFor given size, it needs around 1 second, with the updated source it is around 20-30ms for the same drawing.", "attachment_id": 8579343, "creator": "christos.alewa@hob.de"}, {"creator": "bzbarsky@mit.edu", "attachment_id": null, "text": "One other thing.  That testcase has nothing to do with this bug as originally filed, since it's specifically about a case in which the dirty rect is smaller than the entire imagedata, while this bug was filed on a 1x1 imagedata.\n\nPlease spin off the small-dirty-rect case to a separate bug?", "count": 9, "author": "bzbarsky@mit.edu", "tags": [], "creation_time": "2015-03-18T13:50:01Z", "bug_id": 631632, "raw_text": "One other thing.  That testcase has nothing to do with this bug as originally filed, since it's specifically about a case in which the dirty rect is smaller than the entire imagedata, while this bug was filed on a 1x1 imagedata.\n\nPlease spin off the small-dirty-rect case to a separate bug?", "is_private": false, "id": 10045068, "time": "2015-03-18T13:50:01Z"}, {"attachment_id": null, "creator": "christos.alewa@hob.de", "author": "christos.alewa@hob.de", "text": "(In reply to Not doing reviews right now from comment #7)\n> Christos, would you mind attaching a diff instead of the entire file?\n> \n> Also, you probably want to request review on the diff, not mark it review+.\n\nOk sorry, i will fix that right away..", "count": 10, "is_private": false, "raw_text": "(In reply to Not doing reviews right now from comment #7)\n> Christos, would you mind attaching a diff instead of the entire file?\n> \n> Also, you probably want to request review on the diff, not mark it review+.\n\nOk sorry, i will fix that right away..", "bug_id": 631632, "creation_time": "2015-03-18T13:55:05Z", "tags": [], "time": "2015-03-18T13:55:05Z", "id": 10045090}, {"id": 10045288, "time": "2015-03-18T14:32:23Z", "is_private": false, "tags": [], "raw_text": "", "bug_id": 631632, "creation_time": "2015-03-18T14:32:23Z", "author": "christos.alewa@hob.de", "count": 11, "text": "Created attachment 8579356\nThese are the changes", "attachment_id": 8579356, "creator": "christos.alewa@hob.de"}, {"attachment_id": 8579356, "creator": "christos.alewa@hob.de", "author": "christos.alewa@hob.de", "count": 12, "text": "Comment on attachment 8579356\nThese are the changes\n\nSorry..but how do i mark it as to be reviewed?", "is_private": false, "bug_id": 631632, "creation_time": "2015-03-18T14:34:28Z", "raw_text": "Sorry..but how do i mark it as to be reviewed?", "tags": [], "time": "2015-03-18T14:34:28Z", "id": 10045297}, {"attachment_id": null, "creator": "bzbarsky@mit.edu", "author": "bzbarsky@mit.edu", "text": "You set the review flag to \"?\" and put in the name of a module owner or peer for this code in the textbox (the textbox should offer some suggestions).\n\nBut again, you want to do this in a new bug, not this one.", "count": 13, "is_private": false, "tags": [], "creation_time": "2015-03-18T14:38:13Z", "bug_id": 631632, "raw_text": "You set the review flag to \"?\" and put in the name of a module owner or peer for this code in the textbox (the textbox should offer some suggestions).\n\nBut again, you want to do this in a new bug, not this one.", "id": 10045326, "time": "2015-03-18T14:38:13Z"}, {"time": "2015-03-18T15:51:18Z", "author": "christos.alewa@hob.de", "id": 10045779, "count": 14, "text": "Ok,thanks.\nThough it seemed to me that it's relevant (at least, more relevant than to other, existing bugs)\nto this bug i will probably file a new one, then.", "attachment_id": null, "is_private": false, "creation_time": "2015-03-18T15:51:18Z", "bug_id": 631632, "raw_text": "Ok,thanks.\nThough it seemed to me that it's relevant (at least, more relevant than to other, existing bugs)\nto this bug i will probably file a new one, then.", "tags": [], "creator": "christos.alewa@hob.de"}]}}, "comments": {}}