{"comments": {}, "bugs": {"656971": {"comments": [{"creation_time": "2011-05-13T18:29:01Z", "author": "kg@luminance.org", "text": "The Aero Peek Thumbnail implementation in WindowsPreviewPerTab.jsm subscribes to the MozAfterPaint event so that it can update webpage thumbnails when the visible contents of a webpage have changed. As an optimization, instead of invalidating the entire thumbnail on a repaint, it maintains a list of dirty rectangles (using the clientRects attribute of the MozAfterPaint event) so that it only has to repaint the portions of a thumbnail that have changed.\n\nThe problem is that this event handler is always subscribed to all open pages, even if the aero peek feature is currently not being used. Any paint event triggered in any page causes this event handler to run and retrieve the dirty rectangles from that paint event, and attempt to update the internal 'dirty region' of that tab in the thumbnail engine, even if it doesn't have a cached thumbnail to store dirty rectangles for.\n\nFor webpages that repaint often while idle (like the BBC news website) this allocates a lot of garbage (partly due to the clientRects attribute's implementation being somewhat wasteful), and needlessly wastes CPU cycles.\n\nIn my opinion we should only subscribe to MozAfterPaint on a given page if we currently have a cached thumbnail for it and are maintaining the thumbnail. We should ensure that we time out those thumbnails after a reasonable period of time (say, 60 seconds) so that we are not soaking up CPU and triggering repeated garbage collections in the background for every page a user has open.\n\nI'm pretty sure this bug means that any multimedia app in the browser running on Win7 will suffer from periodic GC pauses no matter what because we're creating JS garbage in MozAfterPaint. That's unfortunate.", "creator": "kg@luminance.org", "attachment_id": null, "id": 5468711, "count": 0, "bug_id": 656971, "raw_text": "The Aero Peek Thumbnail implementation in WindowsPreviewPerTab.jsm subscribes to the MozAfterPaint event so that it can update webpage thumbnails when the visible contents of a webpage have changed. As an optimization, instead of invalidating the entire thumbnail on a repaint, it maintains a list of dirty rectangles (using the clientRects attribute of the MozAfterPaint event) so that it only has to repaint the portions of a thumbnail that have changed.\n\nThe problem is that this event handler is always subscribed to all open pages, even if the aero peek feature is currently not being used. Any paint event triggered in any page causes this event handler to run and retrieve the dirty rectangles from that paint event, and attempt to update the internal 'dirty region' of that tab in the thumbnail engine, even if it doesn't have a cached thumbnail to store dirty rectangles for.\n\nFor webpages that repaint often while idle (like the BBC news website) this allocates a lot of garbage (partly due to the clientRects attribute's implementation being somewhat wasteful), and needlessly wastes CPU cycles.\n\nIn my opinion we should only subscribe to MozAfterPaint on a given page if we currently have a cached thumbnail for it and are maintaining the thumbnail. We should ensure that we time out those thumbnails after a reasonable period of time (say, 60 seconds) so that we are not soaking up CPU and triggering repeated garbage collections in the background for every page a user has open.\n\nI'm pretty sure this bug means that any multimedia app in the browser running on Win7 will suffer from periodic GC pauses no matter what because we're creating JS garbage in MozAfterPaint. That's unfortunate.", "tags": [], "is_private": false, "time": "2011-05-13T18:29:01Z"}]}}}