{"bugs": {"627206": {"comments": [{"count": 0, "id": 5211934, "text": "Created attachment 505212\nAdd tip jemalloc\n\nRecent versions of jemalloc support heap profiling, which should be useful to njn during his crusade on memory usage. (We can't simply upgrade the tree to the latest version, since that relies on getting lots of build configury right, this is the simplest thing that will work on Linux only).\n\nBefore compiling, run jemalloc_autoconf.sh from js/src, which handles the autoconf changes needed to link in jemalloc.\n\nTo get a profile, run like so:\n\n  MALLOC_CONF=prof:true objdir/js perfect.js\n\nThis creates a .heap file in your cwd.\n Analyze the heap using jemalloc/bin/pprof. --help will show you how.\n\nOther MALLOC_CONF options are available: http://www.canonware.com/download/jemalloc/jemalloc-latest/doc/jemalloc.html#opt.prof\n\n\nThis doesn't work on Mac (ironic, right) or windows.", "is_private": false, "tags": [], "creation_time": "2011-01-19T22:45:12Z", "raw_text": "Recent versions of jemalloc support heap profiling, which should be useful to njn during his crusade on memory usage. (We can't simply upgrade the tree to the latest version, since that relies on getting lots of build configury right, this is the simplest thing that will work on Linux only).\n\nBefore compiling, run jemalloc_autoconf.sh from js/src, which handles the autoconf changes needed to link in jemalloc.\n\nTo get a profile, run like so:\n\n  MALLOC_CONF=prof:true objdir/js perfect.js\n\nThis creates a .heap file in your cwd.\n Analyze the heap using jemalloc/bin/pprof. --help will show you how.\n\nOther MALLOC_CONF options are available: http://www.canonware.com/download/jemalloc/jemalloc-latest/doc/jemalloc.html#opt.prof\n\n\nThis doesn't work on Mac (ironic, right) or windows.", "bug_id": 627206, "author": "paul.biggar@gmail.com", "attachment_id": 505212, "creator": "paul.biggar@gmail.com", "time": "2011-01-19T22:45:12Z"}, {"time": "2011-01-20T03:32:57Z", "creator": "n.nethercote@gmail.com", "attachment_id": null, "author": "n.nethercote@gmail.com", "bug_id": 627206, "raw_text": "Did you forgot to add jemalloc_autoconf.sh to the patch?", "creation_time": "2011-01-20T03:32:57Z", "tags": [], "is_private": false, "text": "Did you forgot to add jemalloc_autoconf.sh to the patch?", "id": 5212679, "count": 1}, {"text": "(In reply to comment #1)\n> Did you forgot to add jemalloc_autoconf.sh to the patch?\n\nI did, but actually it's not necessary; I included the generated files in the patch. Just run autoconf213 in js/src as normal.", "is_private": false, "count": 2, "id": 5212704, "creation_time": "2011-01-20T03:57:18Z", "tags": [], "bug_id": 627206, "raw_text": "(In reply to comment #1)\n> Did you forgot to add jemalloc_autoconf.sh to the patch?\n\nI did, but actually it's not necessary; I included the generated files in the patch. Just run autoconf213 in js/src as normal.", "time": "2011-01-20T03:57:18Z", "creator": "paul.biggar@gmail.com", "author": "paul.biggar@gmail.com", "attachment_id": null}, {"time": "2011-01-20T04:49:16Z", "author": "n.nethercote@gmail.com", "attachment_id": null, "creator": "n.nethercote@gmail.com", "tags": [], "creation_time": "2011-01-20T04:49:16Z", "is_private": false, "text": "For my own assistance, here are the instructions pbiggar and I hammered out on IRC for my Ubuntu 10.04 machine:\n\n- apply patch\n- in js/src/:\n\n    cd jemalloc\n    autoconf2.50\n    touch config.stamp.in\n    cd ..\n    autoconf2.13\n    mkdir debug64\n    cd debug64\n    ../configure --enable-debug --disable-optimize --enable-valgrind\n    make --quiet -j 2\n\nThe output of pprof is surprising, though:\n\n[ocean:~/moz/ws3/js/src] perl jemalloc/bin/pprof --text debug64/js jeprof.4557.\n0.f.heap\nUsing local file debug64/js.\nUsing local file jeprof.4557.0.f.heap.\nTotal: 0.0 MB\n     0.0  61.1%  61.1%      0.0  61.1% _nl_make_l10nflist\n     0.0  18.3%  79.4%      0.0  18.3% _nl_intern_locale_data\n     0.0   9.9%  89.4%      0.0   9.9% read_alias_file\n     0.0   8.7%  98.1%      0.0   8.7% extend_alias_table\n     0.0   0.9%  99.0%      0.0   0.9% *__GI___strdup\n     0.0   0.9%  99.9%      0.0   0.9% *__GI___strndup\n     0.0   0.1% 100.0%      0.0   0.1% new_composite_name\n     0.0   0.0% 100.0%      0.0 100.0% *__GI_setlocale\n     0.0   0.0% 100.0%      0.0 100.0% __libc_start_main\n     0.0   0.0% 100.0%      0.0  18.6% _nl_expand_alias\n     0.0   0.0% 100.0%      0.0  99.0% _nl_find_locale\n     0.0   0.0% 100.0%      0.0  18.3% _nl_load_locale\n     0.0   0.0% 100.0%      0.0 100.0% _start\n     0.0   0.0% 100.0%      0.0 100.0% main\n\nThat's it.  Looks like it's not hooking into the JS shell properly somehow.  pbiggar is looking into it.", "bug_id": 627206, "raw_text": "For my own assistance, here are the instructions pbiggar and I hammered out on IRC for my Ubuntu 10.04 machine:\n\n- apply patch\n- in js/src/:\n\n    cd jemalloc\n    autoconf2.50\n    touch config.stamp.in\n    cd ..\n    autoconf2.13\n    mkdir debug64\n    cd debug64\n    ../configure --enable-debug --disable-optimize --enable-valgrind\n    make --quiet -j 2\n\nThe output of pprof is surprising, though:\n\n[ocean:~/moz/ws3/js/src] perl jemalloc/bin/pprof --text debug64/js jeprof.4557.\n0.f.heap\nUsing local file debug64/js.\nUsing local file jeprof.4557.0.f.heap.\nTotal: 0.0 MB\n     0.0  61.1%  61.1%      0.0  61.1% _nl_make_l10nflist\n     0.0  18.3%  79.4%      0.0  18.3% _nl_intern_locale_data\n     0.0   9.9%  89.4%      0.0   9.9% read_alias_file\n     0.0   8.7%  98.1%      0.0   8.7% extend_alias_table\n     0.0   0.9%  99.0%      0.0   0.9% *__GI___strdup\n     0.0   0.9%  99.9%      0.0   0.9% *__GI___strndup\n     0.0   0.1% 100.0%      0.0   0.1% new_composite_name\n     0.0   0.0% 100.0%      0.0 100.0% *__GI_setlocale\n     0.0   0.0% 100.0%      0.0 100.0% __libc_start_main\n     0.0   0.0% 100.0%      0.0  18.6% _nl_expand_alias\n     0.0   0.0% 100.0%      0.0  99.0% _nl_find_locale\n     0.0   0.0% 100.0%      0.0  18.3% _nl_load_locale\n     0.0   0.0% 100.0%      0.0 100.0% _start\n     0.0   0.0% 100.0%      0.0 100.0% main\n\nThat's it.  Looks like it's not hooking into the JS shell properly somehow.  pbiggar is looking into it.", "count": 3, "id": 5212750}, {"attachment_id": null, "author": "jasone@canonware.com", "creator": "jasone@canonware.com", "time": "2011-01-21T03:11:52Z", "raw_text": "The patch is pretty big and I may have missed something, but it looks like you might be building in both the memory/jemalloc version of jemalloc and the version included in the patch.", "bug_id": 627206, "creation_time": "2011-01-21T03:11:52Z", "tags": [], "id": 5215841, "count": 4, "text": "The patch is pretty big and I may have missed something, but it looks like you might be building in both the memory/jemalloc version of jemalloc and the version included in the patch.", "is_private": false}, {"bug_id": 627206, "raw_text": "(In reply to comment #4)\n> The patch is pretty big and I may have missed something, but it looks like you\n> might be building in both the memory/jemalloc version of jemalloc and the\n> version included in the patch.\n\nThe js shell doesn't build with mozalloc/jemalloc (see bug 580409), so there can't be a conflict.\n\n(The patch is mostly the jemalloc directory, which is just a direct import from the canonware repo).", "time": "2011-01-21T03:33:24Z", "creator": "paul.biggar@gmail.com", "attachment_id": null, "author": "paul.biggar@gmail.com", "text": "(In reply to comment #4)\n> The patch is pretty big and I may have missed something, but it looks like you\n> might be building in both the memory/jemalloc version of jemalloc and the\n> version included in the patch.\n\nThe js shell doesn't build with mozalloc/jemalloc (see bug 580409), so there can't be a conflict.\n\n(The patch is mostly the jemalloc directory, which is just a direct import from the canonware repo).", "is_private": false, "id": 5215875, "count": 5, "tags": [], "creation_time": "2011-01-21T03:33:24Z"}, {"creation_time": "2011-02-11T00:36:49Z", "tags": [], "text": "I wrote a simple test case and linked in jemalloc, and got nothing. I tried using tcmalloc instead, and got proper results in the heap profiles. So either I'm doing the jemalloc part wrong, or there's a bug in jemalloc. Working on it.", "is_private": false, "id": 5271305, "count": 6, "time": "2011-02-11T00:36:49Z", "author": "paul.biggar@gmail.com", "attachment_id": null, "creator": "paul.biggar@gmail.com", "bug_id": 627206, "raw_text": "I wrote a simple test case and linked in jemalloc, and got nothing. I tried using tcmalloc instead, and got proper results in the heap profiles. So either I'm doing the jemalloc part wrong, or there's a bug in jemalloc. Working on it."}, {"id": 5330314, "count": 7, "text": "Created attachment 517759\nChange profiling library\n\njasone suggested there were problems on 32 bit linux, but that --disable-prof-libgcc might work. It does give profiling info for a small test program, but when I run spidermonkey I don't get any useful profiling data.\n\nI suggest that anyone wanting to use this should try on a different platform, probably 64-bit.\n\n\nI've included jasone's response below for posterity:\n\n> I reproduced your results on a 32-bit Ubuntu system this morning.  In looking\n> back through my development notes, I found this from October 2, 2010:\n> \n> ---\n> On my 32-bit Ubuntu 10.04 system, I have to specify --disable-prof-libgcc.\n> This is perplexing, because it works on a similar VMWare guest on my work\n> laptop.  I see that google-perftools only uses libgcc for x64, but I suspect\n> that's just because they already had a hand-coded backtrace implementation for\n> 32-bit systems.\n> ---\n> \n> My guess is that when I wrote that, I was mistaken about the jemalloc\n> configuration for the VMWare guest, and that it was actually using libunwind.\n> I just verified that backtracing works with --disable-prof-libgcc, and with\n> --enable-prof-libunwind (assuming libunwind is found by the configure script).\n> \n> I added some debug spew for the libgcc-based backtracing code in jemalloc, and\n> it looks to me like libgcc is simply failing.  Visual inspection of the related\n> code in gcc convinces me that jemalloc is using the API correctly.  The next\n> debugging step would be to use a libgcc with debug symbols/source and trace \n> through backtracing with gdb.", "is_private": false, "tags": [], "creation_time": "2011-03-08T16:50:33Z", "raw_text": "jasone suggested there were problems on 32 bit linux, but that --disable-prof-libgcc might work. It does give profiling info for a small test program, but when I run spidermonkey I don't get any useful profiling data.\n\nI suggest that anyone wanting to use this should try on a different platform, probably 64-bit.\n\n\nI've included jasone's response below for posterity:\n\n> I reproduced your results on a 32-bit Ubuntu system this morning.  In looking\n> back through my development notes, I found this from October 2, 2010:\n> \n> ---\n> On my 32-bit Ubuntu 10.04 system, I have to specify --disable-prof-libgcc.\n> This is perplexing, because it works on a similar VMWare guest on my work\n> laptop.  I see that google-perftools only uses libgcc for x64, but I suspect\n> that's just because they already had a hand-coded backtrace implementation for\n> 32-bit systems.\n> ---\n> \n> My guess is that when I wrote that, I was mistaken about the jemalloc\n> configuration for the VMWare guest, and that it was actually using libunwind.\n> I just verified that backtracing works with --disable-prof-libgcc, and with\n> --enable-prof-libunwind (assuming libunwind is found by the configure script).\n> \n> I added some debug spew for the libgcc-based backtracing code in jemalloc, and\n> it looks to me like libgcc is simply failing.  Visual inspection of the related\n> code in gcc convinces me that jemalloc is using the API correctly.  The next\n> debugging step would be to use a libgcc with debug symbols/source and trace \n> through backtracing with gdb.", "bug_id": 627206, "creator": "paul.biggar@gmail.com", "attachment_id": 517759, "author": "paul.biggar@gmail.com", "time": "2011-03-08T16:50:33Z"}]}}, "comments": {}}