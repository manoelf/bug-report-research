{"bugs": {"1636245": {"comments": [{"author": "coopcoopbware@gmail.com", "id": 14803278, "is_private": false, "text": "As part of the current cost reduction efforts, we're trying to reduce the number of cloud providers we support, specifically by exiting packet.net. Over in bug 1632599, we're trying to move Mozilla CI workloads out of packet.net and into AWS now that Amazon supports bare metal instance types. There is currently a [single, statically-provisioned ARM machine](https://firefox-ci-tc.services.mozilla.com/provisioners/localprovisioner/worker-types/nss-aarch64) that was setup for NSS testing that is the last machine we have running in packet.net.\n\nAmazon has a [variety of ARM options now](https://aws.amazon.com/ec2/instance-types/a1/). We'd like to transition NSS to AWS from packet.net.\n\nHere are the specs for the current machine in packet.net:\n* PROC: 2 x Cavium ThunderX CN8890 @2GHz\n* RAM: 128GB\n* DISK: 1 x 340GB SSD\n* NIC: 2 x 10Gbps Bonded Ports\n\nI'd would humbly suggest that this is over-provisioned for running a single CI worker. I think an a1.large instance in AWS would be sufficient for the new pool. I also think that we can get away with a very small pool here, capping the max # of instances at 5 (or less) given that check-ins are infrequent and a single worker is keeping up just fine right now.\n\nNote: I've cc-ed some Taskcluster folks here because I'm unsure about the vintage of docker-worker that's running on ARM in packet.net. We may need to engage with releng to get something running on ARM in AWS.\n\nSee also bug 1594891 where releng inherited many of the other NSS worker pools.", "raw_text": "As part of the current cost reduction efforts, we're trying to reduce the number of cloud providers we support, specifically by exiting packet.net. Over in bug 1632599, we're trying to move Mozilla CI workloads out of packet.net and into AWS now that Amazon supports bare metal instance types. There is currently a [single, statically-provisioned ARM machine](https://firefox-ci-tc.services.mozilla.com/provisioners/localprovisioner/worker-types/nss-aarch64) that was setup for NSS testing that is the last machine we have running in packet.net.\n\nAmazon has a [variety of ARM options now](https://aws.amazon.com/ec2/instance-types/a1/). We'd like to transition NSS to AWS from packet.net.\n\nHere are the specs for the current machine in packet.net:\n* PROC: 2 x Cavium ThunderX CN8890 @2GHz\n* RAM: 128GB\n* DISK: 1 x 340GB SSD\n* NIC: 2 x 10Gbps Bonded Ports\n\nI'd would humbly suggest that this is over-provisioned for running a single CI worker. I think an a1.large instance in AWS would be sufficient for the new pool. I also think that we can get away with a very small pool here, capping the max # of instances at 5 (or less) given that check-ins are infrequent and a single worker is keeping up just fine right now.\n\nNote: I've cc-ed some Taskcluster folks here because I'm unsure about the vintage of docker-worker that's running on ARM in packet.net. We may need to engage with releng to get something running on ARM in AWS.\n\nSee also bug 1594891 where releng inherited many of the other NSS worker pools.", "attachment_id": null, "bug_id": 1636245, "creation_time": "2020-05-07T19:11:53Z", "creator": "coopcoopbware@gmail.com", "time": "2020-05-07T19:11:53Z", "tags": [], "count": 0}, {"author": "coopcoopbware@gmail.com", "id": 14803335, "is_private": false, "raw_text": "(In reply to Chris Cooper [:coop] pronoun: he from comment #0) \n> I'd would humbly suggest that this is over-provisioned for running a single CI worker. I think an a1.large instance in AWS would be sufficient for the new pool. I also think that we can get away with a very small pool here, capping the max # of instances at 5 (or less) given that check-ins are infrequent and a single worker is keeping up just fine right now.\n\nHaving now verified that I can connect to the NSS machine in packet.net, I can see that it's actually running with capacity=20 which makes more sense given the beefiness of the machine.\n\nI'd suggest stepping down to a a1.medium instance in AWS, but having a max pool size of 20 and running 1 worker per instance.", "text": "(In reply to Chris Cooper [:coop] pronoun: he from comment #0) \n> I'd would humbly suggest that this is over-provisioned for running a single CI worker. I think an a1.large instance in AWS would be sufficient for the new pool. I also think that we can get away with a very small pool here, capping the max # of instances at 5 (or less) given that check-ins are infrequent and a single worker is keeping up just fine right now.\n\nHaving now verified that I can connect to the NSS machine in packet.net, I can see that it's actually running with capacity=20 which makes more sense given the beefiness of the machine.\n\nI'd suggest stepping down to a a1.medium instance in AWS, but having a max pool size of 20 and running 1 worker per instance.", "attachment_id": null, "bug_id": 1636245, "creation_time": "2020-05-07T19:33:21Z", "creator": "coopcoopbware@gmail.com", "time": "2020-05-07T19:33:21Z", "tags": [], "count": 1}, {"time": "2020-06-10T18:21:24Z", "count": 2, "tags": [], "creator": "coopcoopbware@gmail.com", "creation_time": "2020-06-10T18:21:24Z", "attachment_id": null, "bug_id": 1636245, "author": "coopcoopbware@gmail.com", "id": 14874688, "text": ":miles is looking to get an ARM64 docker-worker image running in AWS. Once that's in place we can figure out next steps. \n\nIIRC docker-worker needed some code tweaks to work on ARM and I'm not sure those were ever landed. I guess we'll find out soon.", "raw_text": ":miles is looking to get an ARM64 docker-worker image running in AWS. Once that's in place we can figure out next steps. \n\nIIRC docker-worker needed some code tweaks to work on ARM and I'm not sure those were ever landed. I guess we'll find out soon.", "is_private": false}, {"time": "2020-06-10T21:41:59Z", "attachment_id": null, "count": 3, "bug_id": 1636245, "tags": [], "creator": "coopcoopbware@gmail.com", "creation_time": "2020-06-10T21:41:59Z", "author": "coopcoopbware@gmail.com", "id": 14875076, "text": "(In reply to Chris Cooper [:coop] pronoun: he from comment #2)\n> IIRC docker-worker needed some code tweaks to work on ARM and I'm not sure those were ever landed. I guess we'll find out soon.\n\nFound a branch that may help with this: https://github.com/taskcluster/docker-worker/compare/packet-net", "raw_text": "(In reply to Chris Cooper [:coop] pronoun: he from comment #2)\n> IIRC docker-worker needed some code tweaks to work on ARM and I'm not sure those were ever landed. I guess we'll find out soon.\n\nFound a branch that may help with this: https://github.com/taskcluster/docker-worker/compare/packet-net", "is_private": false}, {"creator": "miles@milescrabill.com", "creation_time": "2020-06-11T20:07:52Z", "time": "2020-06-11T20:07:52Z", "count": 4, "tags": [], "id": 14877043, "author": "miles@milescrabill.com", "text": "I did some hacking on this, here's some of that state:\n\n- Used a test version of docker, see here: https://www.docker.com/blog/getting-started-with-docker-for-arm-on-linux/\n- Compiled worker-runner start-worker on my test box because our releases don't include arm64\n- Installed docker-worker dependencies, was able to run docker-worker independently and via worker-runner\n\nI have some WIP scripts for this / modifications to monopacker and some notes to pick this back up after the current sprint.\n\nI wasn't able to claim tasks in my dev environment due to docker-worker reporting `capacity: 0`, this is something we should be able to work around with some small code edits as NSS doesn't use video / audio loopbacks.", "raw_text": "I did some hacking on this, here's some of that state:\n\n- Used a test version of docker, see here: https://www.docker.com/blog/getting-started-with-docker-for-arm-on-linux/\n- Compiled worker-runner start-worker on my test box because our releases don't include arm64\n- Installed docker-worker dependencies, was able to run docker-worker independently and via worker-runner\n\nI have some WIP scripts for this / modifications to monopacker and some notes to pick this back up after the current sprint.\n\nI wasn't able to claim tasks in my dev environment due to docker-worker reporting `capacity: 0`, this is something we should be able to work around with some small code edits as NSS doesn't use video / audio loopbacks.", "is_private": false, "attachment_id": null, "bug_id": 1636245}, {"bug_id": 1636245, "attachment_id": null, "is_private": false, "raw_text": "(In reply to Miles Crabill [:miles] [also mcrabill@mozilla.com] from comment #4)\n> I wasn't able to claim tasks in my dev environment due to docker-worker reporting `capacity: 0`, this is something we should be able to work around with some small code edits as NSS doesn't use video / audio loopbacks.\n\n:kjacobs - I think this is an important point to clarify. Do any of the NSS workloads that would be running on these workers require either the audio and/or video loopback devices that we create for Firefox testing? If we don't need to customize a kernel to add these devices on ARM, our path gets a lot simpler (and quicker), but I'd like confirmation before we proceed.", "text": "(In reply to Miles Crabill [:miles] [also mcrabill@mozilla.com] from comment #4)\n> I wasn't able to claim tasks in my dev environment due to docker-worker reporting `capacity: 0`, this is something we should be able to work around with some small code edits as NSS doesn't use video / audio loopbacks.\n\n:kjacobs - I think this is an important point to clarify. Do any of the NSS workloads that would be running on these workers require either the audio and/or video loopback devices that we create for Firefox testing? If we don't need to customize a kernel to add these devices on ARM, our path gets a lot simpler (and quicker), but I'd like confirmation before we proceed.", "id": 14877072, "author": "coopcoopbware@gmail.com", "tags": [], "count": 5, "time": "2020-06-11T20:19:51Z", "creation_time": "2020-06-11T20:19:51Z", "creator": "coopcoopbware@gmail.com"}, {"text": "That's correct - NSS has no need for these devices. Thanks for checking.", "raw_text": "That's correct - NSS has no need for these devices. Thanks for checking.", "is_private": false, "author": "kjacobs.bugzilla@gmail.com", "id": 14877086, "bug_id": 1636245, "attachment_id": null, "creator": "kjacobs.bugzilla@gmail.com", "creation_time": "2020-06-11T20:23:24Z", "count": 6, "tags": [], "time": "2020-06-11T20:23:24Z"}, {"creator": "orangefactor@bots.tld", "creation_time": "2020-06-15T06:27:31Z", "time": "2020-06-15T06:27:31Z", "count": 7, "tags": [], "id": 14881814, "author": "orangefactor@bots.tld", "raw_text": "6 failures in 5211 pushes (0.001 failures/push) were associated with this bug in the last 7 days.\n\nRepository breakdown:\n* nss: 6\n\nPlatform breakdown:\n* aarch64: 6\n\nFor more details, see:\nhttps://treeherder.mozilla.org/intermittent-failures.html#/bugdetails?bug=1636245&startday=2020-06-08&endday=2020-06-14&tree=all", "text": "6 failures in 5211 pushes (0.001 failures/push) were associated with this bug in the last 7 days.\n\nRepository breakdown:\n* nss: 6\n\nPlatform breakdown:\n* aarch64: 6\n\nFor more details, see:\nhttps://treeherder.mozilla.org/intermittent-failures.html#/bugdetails?bug=1636245&startday=2020-06-08&endday=2020-06-14&tree=all", "is_private": false, "attachment_id": null, "bug_id": 1636245}, {"creation_time": "2020-06-15T16:21:51Z", "creator": "kjacobs.bugzilla@gmail.com", "tags": [], "count": 8, "time": "2020-06-15T16:21:51Z", "is_private": false, "raw_text": ":coop or :miles, is there any updated ETA on worker availability?", "text": ":coop or :miles, is there any updated ETA on worker availability?", "author": "kjacobs.bugzilla@gmail.com", "id": 14883190, "bug_id": 1636245, "attachment_id": null}, {"tags": [], "count": 9, "bug_id": 1636245, "time": "2020-06-15T21:44:33Z", "attachment_id": null, "is_private": false, "text": "(In reply to Kevin Jacobs [:kjacobs] from comment #8)\n> :coop or :miles, is there any updated ETA on worker availability?\n\nSorry, I should have updated. :miles will be back to this tomorrow. With the streamlined kernel requirements we should have something for validation shortly (1-2 days).", "raw_text": "(In reply to Kevin Jacobs [:kjacobs] from comment #8)\n> :coop or :miles, is there any updated ETA on worker availability?\n\nSorry, I should have updated. :miles will be back to this tomorrow. With the streamlined kernel requirements we should have something for validation shortly (1-2 days).", "creation_time": "2020-06-15T21:44:33Z", "id": 14883711, "author": "coopcoopbware@gmail.com", "creator": "coopcoopbware@gmail.com"}, {"is_private": false, "raw_text": "I've been working on this a bit more, shooting to have a working instance to test on by EOD tomorrow and will test manually baking an AMI from that instance so that we have replacement strategy should it fail.\n\nDue to the level of customizations / hackery I haven't built an entirely new set of scripts to automate creating the image, I've taken notes on the changes I've made so we can adapt from there.", "text": "I've been working on this a bit more, shooting to have a working instance to test on by EOD tomorrow and will test manually baking an AMI from that instance so that we have replacement strategy should it fail.\n\nDue to the level of customizations / hackery I haven't built an entirely new set of scripts to automate creating the image, I've taken notes on the changes I've made so we can adapt from there.", "author": "miles@milescrabill.com", "id": 14886128, "bug_id": 1636245, "attachment_id": null, "creation_time": "2020-06-16T23:35:34Z", "creator": "miles@milescrabill.com", "tags": [], "count": 10, "time": "2020-06-16T23:35:34Z"}, {"is_private": false, "raw_text": "I have an arm64 instance that I've claimed some tasks on [0] in stage, so I'm going to create a worker in production now. That should make it easier to test for NSS because of the lack of convenient ways to trigger pushes in stage.\n\nThe instance is configured as a static worker using the static provisioner and a test worker-pool / worker-type that I've configured.\n\n[0] https://stage.taskcluster.nonprod.cloudops.mozgcp.net/tasks/OHdGKi-8TN-ufvKvHLnJ_Q", "text": "I have an arm64 instance that I've claimed some tasks on [0] in stage, so I'm going to create a worker in production now. That should make it easier to test for NSS because of the lack of convenient ways to trigger pushes in stage.\n\nThe instance is configured as a static worker using the static provisioner and a test worker-pool / worker-type that I've configured.\n\n[0] https://stage.taskcluster.nonprod.cloudops.mozgcp.net/tasks/OHdGKi-8TN-ufvKvHLnJ_Q", "id": 14888147, "creation_time": "2020-06-17T23:14:20Z", "author": "miles@milescrabill.com", "creator": "miles@milescrabill.com", "tags": [], "bug_id": 1636245, "count": 11, "attachment_id": null, "time": "2020-06-17T23:14:20Z"}, {"attachment_id": null, "bug_id": 1636245, "id": 14890122, "author": "miles@milescrabill.com", "is_private": false, "text": "I duplicated my test worker in production but need the credentials to the client reset as they were lost on the old machine.\n\nTom, could you please reset the static secret for https://firefox-ci-tc.services.mozilla.com/auth/clients/project%2Fnss-nspr%2Faarch64 and send it to me? Not sure if you're most applicable, but I figured you would have access.", "raw_text": "I duplicated my test worker in production but need the credentials to the client reset as they were lost on the old machine.\n\nTom, could you please reset the static secret for https://firefox-ci-tc.services.mozilla.com/auth/clients/project%2Fnss-nspr%2Faarch64 and send it to me? Not sure if you're most applicable, but I figured you would have access.", "time": "2020-06-18T22:47:14Z", "tags": [], "count": 12, "creation_time": "2020-06-18T22:47:14Z", "creator": "miles@milescrabill.com"}, {"tags": [], "count": 13, "time": "2020-06-20T23:54:06Z", "creation_time": "2020-06-20T23:54:06Z", "creator": "coopcoopbware@gmail.com", "bug_id": 1636245, "attachment_id": null, "is_private": false, "text": "(In reply to Miles Crabill [:miles] [also mcrabill@mozilla.com] from comment #12)\n> I duplicated my test worker in production but need the credentials to the client reset as they were lost on the old machine.\n\nNone of them are in our password repo?", "raw_text": "(In reply to Miles Crabill [:miles] [also mcrabill@mozilla.com] from comment #12)\n> I duplicated my test worker in production but need the credentials to the client reset as they were lost on the old machine.\n\nNone of them are in our password repo?", "id": 14891529, "author": "coopcoopbware@gmail.com"}, {"creator": "mozilla@hocat.ca", "creation_time": "2020-06-21T19:46:57Z", "time": "2020-06-21T19:46:57Z", "count": 14, "tags": [], "id": 14891791, "author": "mozilla@hocat.ca", "raw_text": "This also removes the scopes need to create the client. The clients already exist,\nand will be managed automatically once Bug 1632009 lands.", "text": "Created attachment 9158060\nBug 1636245: Grant taskcluster team permission to reset NSS worker access tokens; r?Callek\n\nThis also removes the scopes need to create the client. The clients already exist,\nand will be managed automatically once Bug 1632009 lands.", "is_private": false, "attachment_id": 9158060, "bug_id": 1636245}, {"bug_id": 1636245, "attachment_id": null, "is_private": false, "raw_text": "I've granted the taskcluster team permissions to reset the access token.\n\n> None of them are in our password repo?\n\nI'd generally opt to regenerate access tokens, rather than store than store them separately from the deployment infrastructure for them.", "text": "I've granted the taskcluster team permissions to reset the access token.\n\n> None of them are in our password repo?\n\nI'd generally opt to regenerate access tokens, rather than store than store them separately from the deployment infrastructure for them.", "id": 14891817, "author": "mozilla@hocat.ca", "tags": [], "count": 15, "time": "2020-06-21T21:25:07Z", "creation_time": "2020-06-21T21:25:07Z", "creator": "mozilla@hocat.ca"}, {"bug_id": 1636245, "attachment_id": null, "raw_text": "Pushed by mozilla@hocat.ca:\nhttps://hg.mozilla.org/ci/ci-configuration/rev/db8d027d3fbd\nGrant taskcluster team permission to reset NSS worker access tokens; r=Callek", "text": "Pushed by mozilla@hocat.ca:\nhttps://hg.mozilla.org/ci/ci-configuration/rev/db8d027d3fbd\nGrant taskcluster team permission to reset NSS worker access tokens; r=Callek", "is_private": false, "author": "pulsebot@bots.tld", "id": 14891938, "count": 16, "tags": [], "time": "2020-06-22T04:05:28Z", "creator": "pulsebot@bots.tld", "creation_time": "2020-06-22T04:05:28Z"}, {"text": "The production worker is up and running, the worker-pool matches the one that the client had access to, `localprovisioner/nss-aarch64`. It looks like there is a different naming scheme for the other `nss` related worker-pools in Firefox CI, they are prefixed with `nss/`.\n\nBecause of the client structure I configured the worker as `standalone` rather than `static`, which should be fine but means that credentials are long-lived and tied to the client.\n\nWho should be given access to the box? Is there a meaningful distinction between L1 and L3 for this worker as in other `nss` worker types?", "raw_text": "The production worker is up and running, the worker-pool matches the one that the client had access to, `localprovisioner/nss-aarch64`. It looks like there is a different naming scheme for the other `nss` related worker-pools in Firefox CI, they are prefixed with `nss/`.\n\nBecause of the client structure I configured the worker as `standalone` rather than `static`, which should be fine but means that credentials are long-lived and tied to the client.\n\nWho should be given access to the box? Is there a meaningful distinction between L1 and L3 for this worker as in other `nss` worker types?", "is_private": false, "id": 14897917, "author": "miles@milescrabill.com", "bug_id": 1636245, "attachment_id": null, "creator": "miles@milescrabill.com", "creation_time": "2020-06-23T21:59:22Z", "count": 17, "tags": [], "time": "2020-06-23T21:59:22Z"}, {"creation_time": "2020-06-23T23:45:22Z", "creator": "kjacobs.bugzilla@gmail.com", "tags": [], "count": 18, "time": "2020-06-23T23:45:22Z", "is_private": false, "text": "I can confirm that the new worker is functioning as expected. Thanks!\n\nI'm not sure what \"L1\" and \"L3\" refer t. Can you give a little more information (or point to where these are used in the other workers)?\n\nI believe all of the current NSS team (myself, :jcj, and :beurdouche) had SSH access on the old machine. It would be good if we can restore that.", "raw_text": "I can confirm that the new worker is functioning as expected. Thanks!\n\nI'm not sure what \"L1\" and \"L3\" refer t. Can you give a little more information (or point to where these are used in the other workers)?\n\nI believe all of the current NSS team (myself, :jcj, and :beurdouche) had SSH access on the old machine. It would be good if we can restore that.", "id": 14898091, "author": "kjacobs.bugzilla@gmail.com", "bug_id": 1636245, "attachment_id": null}, {"creation_time": "2020-06-24T13:03:18Z", "creator": "coopcoopbware@gmail.com", "tags": [], "count": 19, "time": "2020-06-24T13:03:18Z", "is_private": false, "text": "(In reply to Miles Crabill [:miles] [also mcrabill@mozilla.com] from comment #17)\n> The production worker is up and running, the worker-pool matches the one that the client had access to, `localprovisioner/nss-aarch64`. It looks like there is a different naming scheme for the other `nss` related worker-pools in Firefox CI, they are prefixed with `nss/`.\n> \n> Because of the client structure I configured the worker as `standalone` rather than `static`, which should be fine but means that credentials are long-lived and tied to the client. \n> \n> Who should be given access to the box? Is there a meaningful distinction between L1 and L3 for this worker as in other `nss` worker types?\n\nThanks for this, Miles. I'm sure NSS is glad to get their ARM coverage back.\n\nNow that we're on AWS, we do have the opportunity to make these pools flexible, i.e. livestock not pets. The frequency of check-ins on NSS is much lower, so we will absolutely spend less money if we can spin the pool down when there are no jobs pending. It may also depend on whether the NSS team still needs direct access to the worker (see below). I'll file a follow-up bug for that. \n\n(In reply to Kevin Jacobs [:kjacobs] from comment #18)\n> I'm not sure what \"L1\" and \"L3\" refer t. Can you give a little more information (or point to where these are used in the other workers)?\n\nThe level maps to the trust level of machine. For NSS, the L1 machines would map to the [nss-try](https://treeherder.mozilla.org/#/jobs?repo=nss-try) tree and L3 would map to the [nss](https://treeherder.mozilla.org/#/jobs?repo=nss-try) tree. The distinction exists because (at least in the Firefox case), the restrictions around who can push to Try are much lower, and you don't want random jobs from Try poisoning future nightly/release builds.\n\nIf you're not expecting to have Try coverage for ARM, then we can eliminate the need for L1 builders. However, it looks like the task list is the same on Try.\n \n> I believe all of the current NSS team (myself, :jcj, and :beurdouche) had SSH access on the old machine. It would be good if we can restore that.\n\nWhat's the use-case here? Ideally releng will manage these pools for you going forward and you shouldn't need to access them directly.", "raw_text": "(In reply to Miles Crabill [:miles] [also mcrabill@mozilla.com] from comment #17)\n> The production worker is up and running, the worker-pool matches the one that the client had access to, `localprovisioner/nss-aarch64`. It looks like there is a different naming scheme for the other `nss` related worker-pools in Firefox CI, they are prefixed with `nss/`.\n> \n> Because of the client structure I configured the worker as `standalone` rather than `static`, which should be fine but means that credentials are long-lived and tied to the client. \n> \n> Who should be given access to the box? Is there a meaningful distinction between L1 and L3 for this worker as in other `nss` worker types?\n\nThanks for this, Miles. I'm sure NSS is glad to get their ARM coverage back.\n\nNow that we're on AWS, we do have the opportunity to make these pools flexible, i.e. livestock not pets. The frequency of check-ins on NSS is much lower, so we will absolutely spend less money if we can spin the pool down when there are no jobs pending. It may also depend on whether the NSS team still needs direct access to the worker (see below). I'll file a follow-up bug for that. \n\n(In reply to Kevin Jacobs [:kjacobs] from comment #18)\n> I'm not sure what \"L1\" and \"L3\" refer t. Can you give a little more information (or point to where these are used in the other workers)?\n\nThe level maps to the trust level of machine. For NSS, the L1 machines would map to the [nss-try](https://treeherder.mozilla.org/#/jobs?repo=nss-try) tree and L3 would map to the [nss](https://treeherder.mozilla.org/#/jobs?repo=nss-try) tree. The distinction exists because (at least in the Firefox case), the restrictions around who can push to Try are much lower, and you don't want random jobs from Try poisoning future nightly/release builds.\n\nIf you're not expecting to have Try coverage for ARM, then we can eliminate the need for L1 builders. However, it looks like the task list is the same on Try.\n \n> I believe all of the current NSS team (myself, :jcj, and :beurdouche) had SSH access on the old machine. It would be good if we can restore that.\n\nWhat's the use-case here? Ideally releng will manage these pools for you going forward and you shouldn't need to access them directly.", "author": "coopcoopbware@gmail.com", "id": 14898926, "bug_id": 1636245, "attachment_id": null}, {"creator": "coopcoopbware@gmail.com", "creation_time": "2020-06-24T13:04:10Z", "time": "2020-06-24T13:04:10Z", "count": 20, "tags": [], "id": 14898931, "author": "coopcoopbware@gmail.com", "text": "(In reply to Chris Cooper [:coop] pronoun: he from comment #19)\n> What's the use-case here? Ideally releng will manage these pools for you going forward and you shouldn't need to access them directly.\n\nPinging :kjacobs ^^", "raw_text": "(In reply to Chris Cooper [:coop] pronoun: he from comment #19)\n> What's the use-case here? Ideally releng will manage these pools for you going forward and you shouldn't need to access them directly.\n\nPinging :kjacobs ^^", "is_private": false, "attachment_id": null, "bug_id": 1636245}, {"creation_time": "2020-06-24T13:10:50Z", "creator": "coopcoopbware@gmail.com", "tags": [], "count": 21, "time": "2020-06-24T13:10:50Z", "is_private": false, "text": "(In reply to Chris Cooper [:coop] pronoun: he from comment #19)\n> I'll file a follow-up bug for that. \n\nBug 1648080", "raw_text": "(In reply to Chris Cooper [:coop] pronoun: he from comment #19)\n> I'll file a follow-up bug for that. \n\nBug 1648080", "id": 14898948, "author": "coopcoopbware@gmail.com", "bug_id": 1636245, "attachment_id": null}, {"creation_time": "2020-06-24T14:35:44Z", "creator": "kjacobs.bugzilla@gmail.com", "tags": [], "count": 22, "time": "2020-06-24T14:35:44Z", "is_private": false, "raw_text": "(In reply to Chris Cooper [:coop] pronoun: he from comment #19)\n> (In reply to Miles Crabill [:miles] [also mcrabill@mozilla.com] from comment #17)\n> > The production worker is up and running, the worker-pool matches the one that the client had access to, `localprovisioner/nss-aarch64`. It looks like there is a different naming scheme for the other `nss` related worker-pools in Firefox CI, they are prefixed with `nss/`.\n> > \n> > Because of the client structure I configured the worker as `standalone` rather than `static`, which should be fine but means that credentials are long-lived and tied to the client. \n> > \n> > Who should be given access to the box? Is there a meaningful distinction between L1 and L3 for this worker as in other `nss` worker types?\n> \n> Thanks for this, Miles. I'm sure NSS is glad to get their ARM coverage back.\n> \n> Now that we're on AWS, we do have the opportunity to make these pools flexible, i.e. livestock not pets. The frequency of check-ins on NSS is much lower, so we will absolutely spend less money if we can spin the pool down when there are no jobs pending. It may also depend on whether the NSS team still needs direct access to the worker (see below). I'll file a follow-up bug for that. \n> \n> (In reply to Kevin Jacobs [:kjacobs] from comment #18)\n> > I'm not sure what \"L1\" and \"L3\" refer t. Can you give a little more information (or point to where these are used in the other workers)?\n> \n> The level maps to the trust level of machine. For NSS, the L1 machines would map to the [nss-try](https://treeherder.mozilla.org/#/jobs?repo=nss-try) tree and L3 would map to the [nss](https://treeherder.mozilla.org/#/jobs?repo=nss-try) tree. The distinction exists because (at least in the Firefox case), the restrictions around who can push to Try are much lower, and you don't want random jobs from Try poisoning future nightly/release builds.\n> \n> If you're not expecting to have Try coverage for ARM, then we can eliminate the need for L1 builders. However, it looks like the task list is the same on Try.\n\nYes, sounds like we'll want to keep both.\n\n> > I believe all of the current NSS team (myself, :jcj, and :beurdouche) had SSH access on the old machine. It would be good if we can restore that.\n> \n> What's the use-case here? Ideally releng will manage these pools for you going forward and you shouldn't need to access them directly.\n\nPrimarily testing security patches, which become public once pushed to nss-try. Having access to the box allows spinning up a local docker container and testing the patch manually. Maybe there's some alternative that would still enable that use case?", "text": "(In reply to Chris Cooper [:coop] pronoun: he from comment #19)\n> (In reply to Miles Crabill [:miles] [also mcrabill@mozilla.com] from comment #17)\n> > The production worker is up and running, the worker-pool matches the one that the client had access to, `localprovisioner/nss-aarch64`. It looks like there is a different naming scheme for the other `nss` related worker-pools in Firefox CI, they are prefixed with `nss/`.\n> > \n> > Because of the client structure I configured the worker as `standalone` rather than `static`, which should be fine but means that credentials are long-lived and tied to the client. \n> > \n> > Who should be given access to the box? Is there a meaningful distinction between L1 and L3 for this worker as in other `nss` worker types?\n> \n> Thanks for this, Miles. I'm sure NSS is glad to get their ARM coverage back.\n> \n> Now that we're on AWS, we do have the opportunity to make these pools flexible, i.e. livestock not pets. The frequency of check-ins on NSS is much lower, so we will absolutely spend less money if we can spin the pool down when there are no jobs pending. It may also depend on whether the NSS team still needs direct access to the worker (see below). I'll file a follow-up bug for that. \n> \n> (In reply to Kevin Jacobs [:kjacobs] from comment #18)\n> > I'm not sure what \"L1\" and \"L3\" refer t. Can you give a little more information (or point to where these are used in the other workers)?\n> \n> The level maps to the trust level of machine. For NSS, the L1 machines would map to the [nss-try](https://treeherder.mozilla.org/#/jobs?repo=nss-try) tree and L3 would map to the [nss](https://treeherder.mozilla.org/#/jobs?repo=nss-try) tree. The distinction exists because (at least in the Firefox case), the restrictions around who can push to Try are much lower, and you don't want random jobs from Try poisoning future nightly/release builds.\n> \n> If you're not expecting to have Try coverage for ARM, then we can eliminate the need for L1 builders. However, it looks like the task list is the same on Try.\n\nYes, sounds like we'll want to keep both.\n\n> > I believe all of the current NSS team (myself, :jcj, and :beurdouche) had SSH access on the old machine. It would be good if we can restore that.\n> \n> What's the use-case here? Ideally releng will manage these pools for you going forward and you shouldn't need to access them directly.\n\nPrimarily testing security patches, which become public once pushed to nss-try. Having access to the box allows spinning up a local docker container and testing the patch manually. Maybe there's some alternative that would still enable that use case?", "author": "kjacobs.bugzilla@gmail.com", "id": 14899162, "bug_id": 1636245, "attachment_id": null}, {"raw_text": "(In reply to Kevin Jacobs [:kjacobs] from comment #22)\n> > What's the use-case here? Ideally releng will manage these pools for you going forward and you shouldn't need to access them directly.\n> \n> Primarily testing security patches, which become public once pushed to nss-try. Having access to the box allows spinning up a local docker container and testing the patch manually. Maybe there's some alternative that would still enable that use case?\n\nDo you need access to a worker explicitly, or would access to any arm machine worker? Given that AWS has arm machines, would having access to a different EC2 arm machine (either always on, or on demand) in a different account work for manual testing?", "text": "(In reply to Kevin Jacobs [:kjacobs] from comment #22)\n> > What's the use-case here? Ideally releng will manage these pools for you going forward and you shouldn't need to access them directly.\n> \n> Primarily testing security patches, which become public once pushed to nss-try. Having access to the box allows spinning up a local docker container and testing the patch manually. Maybe there's some alternative that would still enable that use case?\n\nDo you need access to a worker explicitly, or would access to any arm machine worker? Given that AWS has arm machines, would having access to a different EC2 arm machine (either always on, or on demand) in a different account work for manual testing?", "is_private": false, "author": "mozilla@hocat.ca", "id": 14900447, "bug_id": 1636245, "attachment_id": null, "creator": "mozilla@hocat.ca", "creation_time": "2020-06-24T22:45:14Z", "count": 23, "tags": [], "time": "2020-06-24T22:45:14Z"}, {"is_private": false, "text": "(In reply to Tom Prince [:tomprince] from comment #23)\n> (In reply to Kevin Jacobs [:kjacobs] from comment #22)\n> > > What's the use-case here? Ideally releng will manage these pools for you going forward and you shouldn't need to access them directly.\n> > \n> > Primarily testing security patches, which become public once pushed to nss-try. Having access to the box allows spinning up a local docker container and testing the patch manually. Maybe there's some alternative that would still enable that use case?\n> \n> Do you need access to a worker explicitly, or would access to any arm machine worker? Given that AWS has arm machines, would having access to a different EC2 arm machine (either always on, or on demand) in a different account work for manual testing?\n\nNo, any aarch64 machine should do the trick. The worker was just convenient and available.", "raw_text": "(In reply to Tom Prince [:tomprince] from comment #23)\n> (In reply to Kevin Jacobs [:kjacobs] from comment #22)\n> > > What's the use-case here? Ideally releng will manage these pools for you going forward and you shouldn't need to access them directly.\n> > \n> > Primarily testing security patches, which become public once pushed to nss-try. Having access to the box allows spinning up a local docker container and testing the patch manually. Maybe there's some alternative that would still enable that use case?\n> \n> Do you need access to a worker explicitly, or would access to any arm machine worker? Given that AWS has arm machines, would having access to a different EC2 arm machine (either always on, or on demand) in a different account work for manual testing?\n\nNo, any aarch64 machine should do the trick. The worker was just convenient and available.", "author": "kjacobs.bugzilla@gmail.com", "id": 14900467, "bug_id": 1636245, "attachment_id": null, "creation_time": "2020-06-24T22:59:35Z", "creator": "kjacobs.bugzilla@gmail.com", "tags": [], "count": 24, "time": "2020-06-24T22:59:35Z"}, {"count": 25, "tags": [], "time": "2020-07-07T15:01:19Z", "creator": "kjacobs.bugzilla@gmail.com", "creation_time": "2020-07-07T15:01:19Z", "bug_id": 1636245, "attachment_id": null, "raw_text": "Tom, is there a process that we should go through in order to get access to one of these arm machines for testing?", "text": "Tom, is there a process that we should go through in order to get access to one of these arm machines for testing?", "is_private": false, "author": "kjacobs.bugzilla@gmail.com", "id": 14923074}, {"tags": [], "count": 26, "bug_id": 1636245, "time": "2020-07-07T15:38:57Z", "attachment_id": null, "is_private": false, "raw_text": "This would probably make the most sense outside of taskcluster, so redirecting to :fubar, who I think manages our AWS accounts.", "text": "This would probably make the most sense outside of taskcluster, so redirecting to :fubar, who I think manages our AWS accounts.", "creation_time": "2020-07-07T15:38:57Z", "author": "mozilla@hocat.ca", "id": 14923131, "creator": "mozilla@hocat.ca"}, {"attachment_id": null, "bug_id": 1636245, "author": "jc@insufficient.coffee", "id": 14923182, "is_private": false, "text": "I think we can do this inside the NSS team ourselves, actually. I'll DM you klibby if we encounter issues.", "raw_text": "I think we can do this inside the NSS team ourselves, actually. I'll DM you klibby if we encounter issues.", "time": "2020-07-07T16:07:48Z", "tags": [], "count": 27, "creation_time": "2020-07-07T16:07:48Z", "creator": "jc@insufficient.coffee"}, {"creator": "coopcoopbware@gmail.com", "creation_time": "2020-08-06T13:47:34Z", "time": "2020-08-06T13:47:34Z", "count": 28, "tags": [], "id": 14975524, "author": "coopcoopbware@gmail.com", "text": ":miles - what are the next steps here? Are we converting this to a managed pool, or leaving it in localprovisioner?", "raw_text": ":miles - what are the next steps here? Are we converting this to a managed pool, or leaving it in localprovisioner?", "is_private": false, "attachment_id": null, "bug_id": 1636245}, {"creation_time": "2020-08-06T13:53:33Z", "creator": "choller@mozilla.com", "tags": [], "count": 29, "time": "2020-08-06T13:53:33Z", "is_private": false, "raw_text": "This worker type has lots of potential beyond NSS. In particular the JS team would be interested in having native AArch64 builds and tests on such machines, at least for the JS shell.", "text": "This worker type has lots of potential beyond NSS. In particular the JS team would be interested in having native AArch64 builds and tests on such machines, at least for the JS shell.", "author": "choller@mozilla.com", "id": 14975533, "bug_id": 1636245, "attachment_id": null}, {"bug_id": 1636245, "attachment_id": null, "is_private": false, "text": "(In reply to Miles Crabill [:miles] [also mcrabill@mozilla.com] from comment #10)\n\n> Due to the level of customizations / hackery I haven't built an entirely new set of scripts to automate creating the image, I've taken notes on the changes I've made so we can adapt from there.\n\nHey Miles, could you put a copy of the notes (or a link to them) in this bug? Thanks!", "raw_text": "(In reply to Miles Crabill [:miles] [also mcrabill@mozilla.com] from comment #10)\n\n> Due to the level of customizations / hackery I haven't built an entirely new set of scripts to automate creating the image, I've taken notes on the changes I've made so we can adapt from there.\n\nHey Miles, could you put a copy of the notes (or a link to them) in this bug? Thanks!", "author": "pmoore@mozilla.com", "id": 14975566, "tags": [], "count": 30, "time": "2020-08-06T14:05:42Z", "creation_time": "2020-08-06T14:05:42Z", "creator": "pmoore@mozilla.com"}, {"creator": "pmoore@mozilla.com", "creation_time": "2020-09-25T13:50:10Z", "time": "2020-09-25T13:50:10Z", "count": 31, "tags": [], "id": 15054086, "author": "pmoore@mozilla.com", "text": "(In reply to Pete Moore [:pmoore][:pete] from comment #30)\n> Hey Miles, could you put a copy of the notes (or a link to them) in this bug? Thanks!\n\nNotes from Miles: https://github.com/taskcluster/taskcluster/issues/3524#issue-703707552", "raw_text": "(In reply to Pete Moore [:pmoore][:pete] from comment #30)\n> Hey Miles, could you put a copy of the notes (or a link to them) in this bug? Thanks!\n\nNotes from Miles: https://github.com/taskcluster/taskcluster/issues/3524#issue-703707552", "is_private": false, "attachment_id": null, "bug_id": 1636245}, {"creator": "pmoore@mozilla.com", "creation_time": "2020-09-25T13:52:26Z", "count": 32, "tags": [], "time": "2020-09-25T13:52:26Z", "raw_text": "Coop, should we close this?\n\nI believe the workers are running, and the only caveat is that the machine images were manually created, bug issue 3524 (see comment 31) tracks automating this process for future linux/aarch64 workers.", "text": "Coop, should we close this?\n\nI believe the workers are running, and the only caveat is that the machine images were manually created, bug issue 3524 (see comment 31) tracks automating this process for future linux/aarch64 workers.", "is_private": false, "author": "pmoore@mozilla.com", "id": 15054092, "bug_id": 1636245, "attachment_id": null}, {"attachment_id": null, "bug_id": 1636245, "id": 15054157, "author": "miles@milescrabill.com", "is_private": false, "text": "\ud83d\udc4b!\n\nThe important piece is that because that instance was manually created if it is deleted the data is lost. Two good steps to take to make things more recoverable/durable would be 1. disable volume deletion on instance termination so that the root volume can be reused on another instance 2. take a snapshot of the current instance state (or for bonus points make an AMI out if it, note that if you make an AMI you should verify the docker-worker relevant services are set to start on boot).", "raw_text": "\ud83d\udc4b!\n\nThe important piece is that because that instance was manually created if it is deleted the data is lost. Two good steps to take to make things more recoverable/durable would be 1. disable volume deletion on instance termination so that the root volume can be reused on another instance 2. take a snapshot of the current instance state (or for bonus points make an AMI out if it, note that if you make an AMI you should verify the docker-worker relevant services are set to start on boot).", "time": "2020-09-25T14:31:42Z", "tags": [], "count": 33, "creation_time": "2020-09-25T14:31:42Z", "creator": "miles@milescrabill.com"}, {"creator": "coopcoopbware@gmail.com", "creation_time": "2020-09-28T18:49:36Z", "time": "2020-09-28T18:49:36Z", "count": 34, "tags": [], "id": 15058305, "author": "coopcoopbware@gmail.com", "text": "(In reply to Pete Moore [:pmoore][:pete] from comment #32)\n> Coop, should we close this?\n\nSure, we can close this. I'll file follow-up issues for Miles' call-outs in comment #33.", "raw_text": "(In reply to Pete Moore [:pmoore][:pete] from comment #32)\n> Coop, should we close this?\n\nSure, we can close this. I'll file follow-up issues for Miles' call-outs in comment #33.", "is_private": false, "attachment_id": null, "bug_id": 1636245}, {"creator": "coopcoopbware@gmail.com", "creation_time": "2020-10-05T21:11:27Z", "count": 35, "tags": [], "time": "2020-10-05T21:11:27Z", "text": "(In reply to Miles Crabill [:miles] from comment #33)\n2. take a snapshot of the current instance state (or for bonus points make an AMI out if it, note that if you make an AMI you should verify the docker-worker relevant services are set to start on boot).\n\nI took a snapshot of the running instance. The snapshot is in us-west-2: snap-0a41f3f82635cd474.", "raw_text": "(In reply to Miles Crabill [:miles] from comment #33)\n2. take a snapshot of the current instance state (or for bonus points make an AMI out if it, note that if you make an AMI you should verify the docker-worker relevant services are set to start on boot).\n\nI took a snapshot of the running instance. The snapshot is in us-west-2: snap-0a41f3f82635cd474.", "is_private": false, "author": "coopcoopbware@gmail.com", "id": 15069636, "bug_id": 1636245, "attachment_id": null}]}}, "comments": {}}