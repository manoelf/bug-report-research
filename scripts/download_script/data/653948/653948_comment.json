{"comments": {}, "bugs": {"653948": {"comments": [{"is_private": false, "tags": [], "time": "2011-04-30T21:59:14Z", "count": 0, "raw_text": "Can we kill the current ContentInserted/ContentAppended duality that we have? And instead have a single notification but which supports a range. Something like:\n\nContentInserted(nsIDocument *aDocument,\n                nsIContent* aContainer,\n                nsIContent* aStartChild,\n                nsIContent* aEndChild,\n                PRInt32 aIndexInContainer)\n\n(where aIndexInContainer should eventually go away).\n\naEndChild is the first node that is *not* newly inserted.\n\nCode that want to optimize for append operations can just check if aEndChild is false.\n\nThe advantage here is two-fold. First of all all listeners would only have to handle a single notification. Second, we can likely optimize things like range-insertions in the middle of a node.\n\nThe latter can happen with insertAdjecentHTML (which is likely to become more common once it becomes cross-browser) and XBL.\n\nI saw that the layout code has been moving in this direction, though I'm not sure if it takes advantage of range insertions in the middle of a node yet.", "bug_id": 653948, "author": "jonas@sicking.cc", "attachment_id": null, "id": 5441501, "text": "Can we kill the current ContentInserted/ContentAppended duality that we have? And instead have a single notification but which supports a range. Something like:\n\nContentInserted(nsIDocument *aDocument,\n                nsIContent* aContainer,\n                nsIContent* aStartChild,\n                nsIContent* aEndChild,\n                PRInt32 aIndexInContainer)\n\n(where aIndexInContainer should eventually go away).\n\naEndChild is the first node that is *not* newly inserted.\n\nCode that want to optimize for append operations can just check if aEndChild is false.\n\nThe advantage here is two-fold. First of all all listeners would only have to handle a single notification. Second, we can likely optimize things like range-insertions in the middle of a node.\n\nThe latter can happen with insertAdjecentHTML (which is likely to become more common once it becomes cross-browser) and XBL.\n\nI saw that the layout code has been moving in this direction, though I'm not sure if it takes advantage of range insertions in the middle of a node yet.", "creator": "jonas@sicking.cc", "creation_time": "2011-04-30T21:59:14Z"}, {"count": 1, "raw_text": "(In reply to comment #0)\n> I saw that the layout code has been moving in this direction, though I'm not\n> sure if it takes advantage of range insertions in the middle of a node yet.\n\nLayout will already convert multiple ContentInserted calls that are adjacent into a range insertion and perform it all in one batch (lazily).", "bug_id": 653948, "is_private": false, "tags": [], "time": "2011-05-02T22:55:21Z", "creation_time": "2011-05-02T22:55:21Z", "author": "tnikkel@gmail.com", "id": 5444438, "attachment_id": null, "creator": "tnikkel@gmail.com", "text": "(In reply to comment #0)\n> I saw that the layout code has been moving in this direction, though I'm not\n> sure if it takes advantage of range insertions in the middle of a node yet.\n\nLayout will already convert multiple ContentInserted calls that are adjacent into a range insertion and perform it all in one batch (lazily)."}, {"creator": "jonas@sicking.cc", "text": "Mounir said he'd take a stab at this.", "attachment_id": null, "id": 5444521, "author": "jonas@sicking.cc", "creation_time": "2011-05-02T23:20:53Z", "time": "2011-05-02T23:20:53Z", "tags": [], "is_private": false, "bug_id": 653948, "raw_text": "Mounir said he'd take a stab at this.", "count": 2}, {"bug_id": 653948, "raw_text": "In general, I'm fine with this.  That said, there's one case where ContentAppended is faster: it knows that aContainer is non-null.  Unfortunately, for insertion as document kids we'd need to pass a null aContainer to the new method (or make aContainer an nsINode and add some AsContent() in places).\n\nIn the frame constructor, I wonder why ContentAppended doesn't just call ContentRangeInserted now...  Timothy, was there a reason for that other than just not wanting to rejigger the code too much?\n\nWhoever works on this, I'd really appreciate a patch queue, esp if you want me to review the frame constructor changes.  ;)", "count": 3, "time": "2011-05-03T01:12:35Z", "tags": [], "is_private": false, "creation_time": "2011-05-03T01:12:35Z", "text": "In general, I'm fine with this.  That said, there's one case where ContentAppended is faster: it knows that aContainer is non-null.  Unfortunately, for insertion as document kids we'd need to pass a null aContainer to the new method (or make aContainer an nsINode and add some AsContent() in places).\n\nIn the frame constructor, I wonder why ContentAppended doesn't just call ContentRangeInserted now...  Timothy, was there a reason for that other than just not wanting to rejigger the code too much?\n\nWhoever works on this, I'd really appreciate a patch queue, esp if you want me to review the frame constructor changes.  ;)", "creator": "bzbarsky@mit.edu", "id": 5444787, "attachment_id": null, "author": "bzbarsky@mit.edu"}, {"time": "2011-05-03T02:02:44Z", "tags": [], "is_private": false, "bug_id": 653948, "raw_text": "There were some non-trivial differences in how appends and inserts were handled.", "count": 4, "creator": "tnikkel@gmail.com", "text": "There were some non-trivial differences in how appends and inserts were handled.", "attachment_id": null, "id": 5444861, "author": "tnikkel@gmail.com", "creation_time": "2011-05-03T02:02:44Z"}, {"count": 5, "raw_text": "I guess we should sort those out, then...", "bug_id": 653948, "is_private": false, "tags": [], "time": "2011-05-03T02:10:32Z", "creation_time": "2011-05-03T02:10:32Z", "author": "bzbarsky@mit.edu", "id": 5444877, "attachment_id": null, "creator": "bzbarsky@mit.edu", "text": "I guess we should sort those out, then..."}]}}}