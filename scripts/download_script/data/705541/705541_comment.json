{"comments": {}, "bugs": {"705541": {"comments": [{"tags": [], "time": "2011-11-27T14:58:17Z", "attachment_id": null, "raw_text": "If all the event targets would inherit nsIDOMEventTarget first, we could\npush nsCycleCollectingAutoRefCnt mRefCnt; to there and add non-virtual\nversions of AddRef/Release and perhaps implement FastRef<class>.", "bug_id": 705541, "id": 5874240, "creation_time": "2011-11-27T14:58:17Z", "is_private": false, "creator": "bugs@pettay.fi", "author": "bugs@pettay.fi", "count": 0, "text": "If all the event targets would inherit nsIDOMEventTarget first, we could\npush nsCycleCollectingAutoRefCnt mRefCnt; to there and add non-virtual\nversions of AddRef/Release and perhaps implement FastRef<class>."}, {"time": "2011-11-27T14:59:39Z", "raw_text": "I _think_ using non-virtual addref/release could improve for example event handling speed.", "author": "bugs@pettay.fi", "text": "I _think_ using non-virtual addref/release could improve for example event handling speed.", "count": 1, "id": 5874243, "bug_id": 705541, "attachment_id": null, "tags": [], "creator": "bugs@pettay.fi", "is_private": false, "creation_time": "2011-11-27T14:59:39Z"}, {"attachment_id": null, "tags": [], "creator": "khuey@kylehuey.com", "creation_time": "2011-11-27T15:02:48Z", "is_private": false, "raw_text": "Is the virtual call overhead noticeable compared to the cost of doing cycle-collected AddRef/Release?", "time": "2011-11-27T15:02:48Z", "count": 2, "text": "Is the virtual call overhead noticeable compared to the cost of doing cycle-collected AddRef/Release?", "author": "khuey@kylehuey.com", "id": 5874245, "bug_id": 705541}, {"tags": [], "attachment_id": null, "is_private": false, "creation_time": "2011-11-27T15:04:13Z", "creator": "khuey@kylehuey.com", "raw_text": "(especially after PGO/etc)", "time": "2011-11-27T15:04:13Z", "bug_id": 705541, "id": 5874249, "author": "khuey@kylehuey.com", "text": "(especially after PGO/etc)", "count": 3}, {"creation_time": "2011-11-27T16:11:29Z", "is_private": false, "creator": "bugs@pettay.fi", "tags": [], "attachment_id": null, "id": 5874295, "bug_id": 705541, "text": "In general virtual calls are slow, but need to profile.", "count": 4, "author": "bugs@pettay.fi", "raw_text": "In general virtual calls are slow, but need to profile.", "time": "2011-11-27T16:11:29Z"}, {"raw_text": "and even if addref/release itself wouldn't be faster, having mRefCnt available in nsINode\nmethods would allow some optimizations to CC handling, I hope.", "time": "2011-11-27T16:21:59Z", "author": "bugs@pettay.fi", "text": "and even if addref/release itself wouldn't be faster, having mRefCnt available in nsINode\nmethods would allow some optimizations to CC handling, I hope.", "count": 5, "id": 5874302, "bug_id": 705541, "attachment_id": null, "tags": [], "creator": "bugs@pettay.fi", "is_private": false, "creation_time": "2011-11-27T16:21:59Z"}, {"author": "roc@ocallahan.org", "count": 6, "text": "Ehsan, this is more or less what I was thinking of.\n\nI think it would be safe to at least make NS_DECL_ISUPPORTS and NS_DECL_CYCLE_COLLECTING_ISUPPORTS declare AddRef and Release \"final\". We probably don't override those implementations anywhere. That alone should remove some virtual addrefs/releases.\n\nThen in this bug, we could put NS_DECL_CYCLE_COLLECTING_ISUPPORTS in nsIDOMEventTarget, and use NS_IMPL_CYCLE_COLLECTING_ADDREF and NS_IMPL_CYCLE_COLLECTING_RELEASE_WITH_DESTROY for nsIDOMEventTarget. We need to do something to make sure nsNodeUtils::LastRelease gets called for nodes --- maybe just declare a virtual LastRelease method in nsIDOMEventTarget.\n\n(In reply to Kyle Huey [:khuey] (khuey@mozilla.com) from comment #2)\n> Is the virtual call overhead noticeable compared to the cost of doing\n> cycle-collected AddRef/Release?\n\nIt's hard to measure. For example, frequent virtual AddRef/Release calls could pollute the branch target buffer and slow down other virtual calls.\n\nNot only could we reduce the cost of virtual calls, nonvirtual calls also require less generated code, and we'd have fewer implementations of the AddRef/Release methods generated. Anyway, doing this would reduce source code complexity (by reducing the number of classes needing NS_DECL_CYCLE_COLLECTING_ISUPPORTS) so even if the performance win turns out to be small, it's still a good thing to do.", "creator": "roc@ocallahan.org", "is_private": false, "creation_time": "2012-06-19T04:08:12Z", "bug_id": 705541, "id": 6402065, "attachment_id": null, "raw_text": "Ehsan, this is more or less what I was thinking of.\n\nI think it would be safe to at least make NS_DECL_ISUPPORTS and NS_DECL_CYCLE_COLLECTING_ISUPPORTS declare AddRef and Release \"final\". We probably don't override those implementations anywhere. That alone should remove some virtual addrefs/releases.\n\nThen in this bug, we could put NS_DECL_CYCLE_COLLECTING_ISUPPORTS in nsIDOMEventTarget, and use NS_IMPL_CYCLE_COLLECTING_ADDREF and NS_IMPL_CYCLE_COLLECTING_RELEASE_WITH_DESTROY for nsIDOMEventTarget. We need to do something to make sure nsNodeUtils::LastRelease gets called for nodes --- maybe just declare a virtual LastRelease method in nsIDOMEventTarget.\n\n(In reply to Kyle Huey [:khuey] (khuey@mozilla.com) from comment #2)\n> Is the virtual call overhead noticeable compared to the cost of doing\n> cycle-collected AddRef/Release?\n\nIt's hard to measure. For example, frequent virtual AddRef/Release calls could pollute the branch target buffer and slow down other virtual calls.\n\nNot only could we reduce the cost of virtual calls, nonvirtual calls also require less generated code, and we'd have fewer implementations of the AddRef/Release methods generated. Anyway, doing this would reduce source code complexity (by reducing the number of classes needing NS_DECL_CYCLE_COLLECTING_ISUPPORTS) so even if the performance win turns out to be small, it's still a good thing to do.", "time": "2012-06-19T04:08:12Z", "tags": []}, {"id": 6405028, "bug_id": 705541, "is_private": false, "creation_time": "2012-06-19T22:04:09Z", "creator": "ehsan.akhgari@gmail.com", "author": "ehsan.akhgari@gmail.com", "text": "(In reply to Robert O'Callahan (:roc) (Mozilla Corporation) from comment #6)\n> Ehsan, this is more or less what I was thinking of.\n> \n> I think it would be safe to at least make NS_DECL_ISUPPORTS and\n> NS_DECL_CYCLE_COLLECTING_ISUPPORTS declare AddRef and Release \"final\". We\n> probably don't override those implementations anywhere. That alone should\n> remove some virtual addrefs/releases.\n\nI spent a few minutes to get something like this working.  A WIP patch is here: <http://pastebin.mozilla.org/1668112>  Basically the remaining work for that would be to work through the compiler errors and fix them all up to use the _OVERRIDABLE macros.  Do you think it's valuable for me to pursue this?\n\n> Then in this bug, we could put NS_DECL_CYCLE_COLLECTING_ISUPPORTS in\n> nsIDOMEventTarget, and use NS_IMPL_CYCLE_COLLECTING_ADDREF and\n> NS_IMPL_CYCLE_COLLECTING_RELEASE_WITH_DESTROY for nsIDOMEventTarget. We need\n> to do something to make sure nsNodeUtils::LastRelease gets called for nodes\n> --- maybe just declare a virtual LastRelease method in nsIDOMEventTarget.\n\nThat would be a problem if we have classes inheriting from multiple interfaces including nsIDOMEventTarget.  This will compile fine with virtual inheritance (see http://pastebin.mozilla.org/1668127) but I'm not sure if we can use that with XPCOM.", "count": 7, "tags": [], "time": "2012-06-19T22:04:09Z", "attachment_id": null, "raw_text": "(In reply to Robert O'Callahan (:roc) (Mozilla Corporation) from comment #6)\n> Ehsan, this is more or less what I was thinking of.\n> \n> I think it would be safe to at least make NS_DECL_ISUPPORTS and\n> NS_DECL_CYCLE_COLLECTING_ISUPPORTS declare AddRef and Release \"final\". We\n> probably don't override those implementations anywhere. That alone should\n> remove some virtual addrefs/releases.\n\nI spent a few minutes to get something like this working.  A WIP patch is here: <http://pastebin.mozilla.org/1668112>  Basically the remaining work for that would be to work through the compiler errors and fix them all up to use the _OVERRIDABLE macros.  Do you think it's valuable for me to pursue this?\n\n> Then in this bug, we could put NS_DECL_CYCLE_COLLECTING_ISUPPORTS in\n> nsIDOMEventTarget, and use NS_IMPL_CYCLE_COLLECTING_ADDREF and\n> NS_IMPL_CYCLE_COLLECTING_RELEASE_WITH_DESTROY for nsIDOMEventTarget. We need\n> to do something to make sure nsNodeUtils::LastRelease gets called for nodes\n> --- maybe just declare a virtual LastRelease method in nsIDOMEventTarget.\n\nThat would be a problem if we have classes inheriting from multiple interfaces including nsIDOMEventTarget.  This will compile fine with virtual inheritance (see http://pastebin.mozilla.org/1668127) but I'm not sure if we can use that with XPCOM."}, {"tags": [], "attachment_id": null, "is_private": false, "creation_time": "2012-06-21T03:08:19Z", "creator": "roc@ocallahan.org", "raw_text": "(In reply to Ehsan Akhgari [:ehsan] from comment #7)\n> (In reply to Robert O'Callahan (:roc) (Mozilla Corporation) from comment #6)\n> > I think it would be safe to at least make NS_DECL_ISUPPORTS and\n> > NS_DECL_CYCLE_COLLECTING_ISUPPORTS declare AddRef and Release \"final\". We\n> > probably don't override those implementations anywhere. That alone should\n> > remove some virtual addrefs/releases.\n> \n> I spent a few minutes to get something like this working.  A WIP patch is\n> here: <http://pastebin.mozilla.org/1668112>  Basically the remaining work\n> for that would be to work through the compiler errors and fix them all up to\n> use the _OVERRIDABLE macros.  Do you think it's valuable for me to pursue\n> this?\n\nI don't know. It's probably worthwhile for *someone* to pursue this.\n\n> > Then in this bug, we could put NS_DECL_CYCLE_COLLECTING_ISUPPORTS in\n> > nsIDOMEventTarget, and use NS_IMPL_CYCLE_COLLECTING_ADDREF and\n> > NS_IMPL_CYCLE_COLLECTING_RELEASE_WITH_DESTROY for nsIDOMEventTarget. We need\n> > to do something to make sure nsNodeUtils::LastRelease gets called for nodes\n> > --- maybe just declare a virtual LastRelease method in nsIDOMEventTarget.\n> \n> That would be a problem if we have classes inheriting from multiple\n> interfaces including nsIDOMEventTarget.  This will compile fine with virtual\n> inheritance (see http://pastebin.mozilla.org/1668127) but I'm not sure if we\n> can use that with XPCOM.\n\nvirtual inheritance is often really bad for performance, we shouldn't use it even if we could.\n\nI sort of hope nothing is implementing nsIDOMEventTarget twice, but who knows...", "time": "2012-06-21T03:08:19Z", "id": 6409526, "bug_id": 705541, "author": "roc@ocallahan.org", "count": 8, "text": "(In reply to Ehsan Akhgari [:ehsan] from comment #7)\n> (In reply to Robert O'Callahan (:roc) (Mozilla Corporation) from comment #6)\n> > I think it would be safe to at least make NS_DECL_ISUPPORTS and\n> > NS_DECL_CYCLE_COLLECTING_ISUPPORTS declare AddRef and Release \"final\". We\n> > probably don't override those implementations anywhere. That alone should\n> > remove some virtual addrefs/releases.\n> \n> I spent a few minutes to get something like this working.  A WIP patch is\n> here: <http://pastebin.mozilla.org/1668112>  Basically the remaining work\n> for that would be to work through the compiler errors and fix them all up to\n> use the _OVERRIDABLE macros.  Do you think it's valuable for me to pursue\n> this?\n\nI don't know. It's probably worthwhile for *someone* to pursue this.\n\n> > Then in this bug, we could put NS_DECL_CYCLE_COLLECTING_ISUPPORTS in\n> > nsIDOMEventTarget, and use NS_IMPL_CYCLE_COLLECTING_ADDREF and\n> > NS_IMPL_CYCLE_COLLECTING_RELEASE_WITH_DESTROY for nsIDOMEventTarget. We need\n> > to do something to make sure nsNodeUtils::LastRelease gets called for nodes\n> > --- maybe just declare a virtual LastRelease method in nsIDOMEventTarget.\n> \n> That would be a problem if we have classes inheriting from multiple\n> interfaces including nsIDOMEventTarget.  This will compile fine with virtual\n> inheritance (see http://pastebin.mozilla.org/1668127) but I'm not sure if we\n> can use that with XPCOM.\n\nvirtual inheritance is often really bad for performance, we shouldn't use it even if we could.\n\nI sort of hope nothing is implementing nsIDOMEventTarget twice, but who knows..."}, {"tags": [], "raw_text": "(In reply to Robert O'Callahan (:roc) (Mozilla Corporation) from comment #8)\n> > > Then in this bug, we could put NS_DECL_CYCLE_COLLECTING_ISUPPORTS in\n> > > nsIDOMEventTarget, and use NS_IMPL_CYCLE_COLLECTING_ADDREF and\n> > > NS_IMPL_CYCLE_COLLECTING_RELEASE_WITH_DESTROY for nsIDOMEventTarget. We need\n> > > to do something to make sure nsNodeUtils::LastRelease gets called for nodes\n> > > --- maybe just declare a virtual LastRelease method in nsIDOMEventTarget.\n> > \n> > That would be a problem if we have classes inheriting from multiple\n> > interfaces including nsIDOMEventTarget.  This will compile fine with virtual\n> > inheritance (see http://pastebin.mozilla.org/1668127) but I'm not sure if we\n> > can use that with XPCOM.\n> \n> virtual inheritance is often really bad for performance, we shouldn't use it\n> even if we could.\n> \n> I sort of hope nothing is implementing nsIDOMEventTarget twice, but who\n> knows...\n\nIt's not a question of someone implementing nsIDOMEventTarget twice, I was talking about implementing nsISupports twice (i.e., inheriting from nsIDOMEventTarget and any other interface.)", "attachment_id": null, "time": "2012-06-27T18:54:09Z", "creation_time": "2012-06-27T18:54:09Z", "is_private": false, "bug_id": 705541, "id": 6428032, "count": 9, "text": "(In reply to Robert O'Callahan (:roc) (Mozilla Corporation) from comment #8)\n> > > Then in this bug, we could put NS_DECL_CYCLE_COLLECTING_ISUPPORTS in\n> > > nsIDOMEventTarget, and use NS_IMPL_CYCLE_COLLECTING_ADDREF and\n> > > NS_IMPL_CYCLE_COLLECTING_RELEASE_WITH_DESTROY for nsIDOMEventTarget. We need\n> > > to do something to make sure nsNodeUtils::LastRelease gets called for nodes\n> > > --- maybe just declare a virtual LastRelease method in nsIDOMEventTarget.\n> > \n> > That would be a problem if we have classes inheriting from multiple\n> > interfaces including nsIDOMEventTarget.  This will compile fine with virtual\n> > inheritance (see http://pastebin.mozilla.org/1668127) but I'm not sure if we\n> > can use that with XPCOM.\n> \n> virtual inheritance is often really bad for performance, we shouldn't use it\n> even if we could.\n> \n> I sort of hope nothing is implementing nsIDOMEventTarget twice, but who\n> knows...\n\nIt's not a question of someone implementing nsIDOMEventTarget twice, I was talking about implementing nsISupports twice (i.e., inheriting from nsIDOMEventTarget and any other interface.)", "author": "ehsan.akhgari@gmail.com", "creator": "ehsan.akhgari@gmail.com"}, {"id": 6429007, "bug_id": 705541, "is_private": false, "creation_time": "2012-06-27T23:44:58Z", "creator": "roc@ocallahan.org", "author": "roc@ocallahan.org", "text": "That should be OK if we use \"using\" in derived classes to ensure that the implementation of all virtual AddRef/Release methods is the one from nsIDOMEventTarget.", "count": 10, "tags": [], "time": "2012-06-27T23:44:58Z", "attachment_id": null, "raw_text": "That should be OK if we use \"using\" in derived classes to ensure that the implementation of all virtual AddRef/Release methods is the one from nsIDOMEventTarget."}, {"author": "jonas@sicking.cc", "count": 11, "text": "FWIW, there's definitely classes implementing nsIDOMEventTarget twice. IIRC GlobalWindow and/or XMLHttpRequest does this. The reason is that we inherit it once internally in a EventTargetHelper and then the leaf interface inherits it as well.", "creator": "jonas@sicking.cc", "creation_time": "2012-06-29T00:53:31Z", "is_private": false, "id": 6432446, "bug_id": 705541, "attachment_id": null, "raw_text": "FWIW, there's definitely classes implementing nsIDOMEventTarget twice. IIRC GlobalWindow and/or XMLHttpRequest does this. The reason is that we inherit it once internally in a EventTargetHelper and then the leaf interface inherits it as well.", "time": "2012-06-29T00:53:31Z", "tags": []}, {"raw_text": "(In reply to Robert O'Callahan (:roc) (Mozilla Corporation) from comment #10)\n> That should be OK if we use \"using\" in derived classes to ensure that the\n> implementation of all virtual AddRef/Release methods is the one from\n> nsIDOMEventTarget.\n\nAFAIK \"using\" doesn't eliminate the double implementation of virtual functions.  It just tells the compiler to bring the base class member names into the static scope of the derived class.  Really, I don't think there is any way to do what we want in C++.  :(", "attachment_id": null, "time": "2012-06-29T17:13:18Z", "tags": [], "text": "(In reply to Robert O'Callahan (:roc) (Mozilla Corporation) from comment #10)\n> That should be OK if we use \"using\" in derived classes to ensure that the\n> implementation of all virtual AddRef/Release methods is the one from\n> nsIDOMEventTarget.\n\nAFAIK \"using\" doesn't eliminate the double implementation of virtual functions.  It just tells the compiler to bring the base class member names into the static scope of the derived class.  Really, I don't think there is any way to do what we want in C++.  :(", "count": 12, "author": "ehsan.akhgari@gmail.com", "creator": "ehsan.akhgari@gmail.com", "creation_time": "2012-06-29T17:13:18Z", "is_private": false, "id": 6434068, "bug_id": 705541}, {"creation_time": "2018-01-11T20:46:03Z", "is_private": false, "creator": "bzbarsky@mit.edu", "tags": [], "attachment_id": null, "bug_id": 705541, "id": 12962478, "text": "Still likely worth doing, albeit with EventTarget.  At this point all DOM classes _do_ in fact inherit EventTarget first.\n\nMight be simpler to wait for bug 1429903 to be fixed to simplify things a bit.", "count": 13, "author": "bzbarsky@mit.edu", "time": "2018-01-11T20:46:03Z", "raw_text": "Still likely worth doing, albeit with EventTarget.  At this point all DOM classes _do_ in fact inherit EventTarget first.\n\nMight be simpler to wait for bug 1429903 to be fixed to simplify things a bit."}, {"id": 13223068, "bug_id": 705541, "author": "bzbarsky@mit.edu", "text": "nsIDOMEventTarget is gone, but we may still want to do this with EventTarget.", "count": 14, "time": "2018-04-21T03:13:25Z", "raw_text": "nsIDOMEventTarget is gone, but we may still want to do this with EventTarget.", "is_private": false, "creation_time": "2018-04-21T03:13:25Z", "creator": "bzbarsky@mit.edu", "tags": [], "attachment_id": null}]}}}