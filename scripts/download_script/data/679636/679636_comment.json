{"bugs": {"679636": {"comments": [{"creation_time": "2011-08-17T08:53:34Z", "raw_text": "Users reported that blocking a Flash embed on some sites unexpectedly messes up page layout. Turns out that the size of the embed is set to 0x18 despite width and height attributes being specified - it is treated as an inline element without content rather than an inline block. After looking into this, the problem appears to be that nsObjectLoadingContent::HandleBeingBlockedByContentPolicy() calls UnloadContent() which will not only cancel the load but also reset mType - so the embed is treated like one without a type, not like one where the load failed.\n\nAttaching a testcase with two embeds: one loading from example.com and the other loading from example.info. You should install the test content policy (next attachment) which will block the first embed while the other simply fails to load. Note that the latter keeps its size while the former doesn't.\n\nTested in Firefox 3.6, 4 and 2011-08-16 nightly build.", "creator": "ecfbugzilla@palant.de", "text": "Created attachment 553699\nTestcase\n\nUsers reported that blocking a Flash embed on some sites unexpectedly messes up page layout. Turns out that the size of the embed is set to 0x18 despite width and height attributes being specified - it is treated as an inline element without content rather than an inline block. After looking into this, the problem appears to be that nsObjectLoadingContent::HandleBeingBlockedByContentPolicy() calls UnloadContent() which will not only cancel the load but also reset mType - so the embed is treated like one without a type, not like one where the load failed.\n\nAttaching a testcase with two embeds: one loading from example.com and the other loading from example.info. You should install the test content policy (next attachment) which will block the first embed while the other simply fails to load. Note that the latter keeps its size while the former doesn't.\n\nTested in Firefox 3.6, 4 and 2011-08-16 nightly build.", "attachment_id": 553699, "time": "2011-08-17T08:53:34Z", "author": "ecfbugzilla@palant.de", "is_private": false, "count": 0, "tags": [], "id": 5659128, "bug_id": 679636}, {"creator": "ecfbugzilla@palant.de", "author": "ecfbugzilla@palant.de", "is_private": false, "count": 1, "tags": [], "id": 5659132, "bug_id": 679636, "creation_time": "2011-08-17T08:55:44Z", "raw_text": "This minimal extension should be installed before opening the testcase - all it does is blocking object requests going to http://example.com/ (this is easier than setting up Adblock Plus to test this issue).", "text": "Created attachment 553701\nMinimal content policy for testing\n\nThis minimal extension should be installed before opening the testcase - all it does is blocking object requests going to http://example.com/ (this is easier than setting up Adblock Plus to test this issue).", "time": "2011-08-17T08:55:44Z", "attachment_id": 553701}, {"raw_text": "> not like one where the load failed.\n\nThe difference is that for <embed> in particular we instantiate the plug-in and create an nsObjectFrame before we know whether the load fails, then the plugin code handles the load.  So we end up with an nsObjectFrame no matter what.\n\nCan an nsObjectFrame deal without a plug-in being instantiated and more importantly without _trying_ to instantiate it?  Alternately, I suppose we could treat TYPE_NULL the same as TYPE_LOADING for <embed> in some cases... except it might break the plugin-finder thing.\n\nThe simplest solution for this issue from your end is to simply style blocked embeds as inline-block in the UA stylesheet, I'd think, if you actually want to preserve their size in the layout.", "creation_time": "2011-08-26T02:32:53Z", "time": "2011-08-26T02:32:53Z", "attachment_id": null, "text": "> not like one where the load failed.\n\nThe difference is that for <embed> in particular we instantiate the plug-in and create an nsObjectFrame before we know whether the load fails, then the plugin code handles the load.  So we end up with an nsObjectFrame no matter what.\n\nCan an nsObjectFrame deal without a plug-in being instantiated and more importantly without _trying_ to instantiate it?  Alternately, I suppose we could treat TYPE_NULL the same as TYPE_LOADING for <embed> in some cases... except it might break the plugin-finder thing.\n\nThe simplest solution for this issue from your end is to simply style blocked embeds as inline-block in the UA stylesheet, I'd think, if you actually want to preserve their size in the layout.", "id": 5679675, "tags": [], "count": 2, "is_private": false, "bug_id": 679636, "author": "bzbarsky@mit.edu", "creator": "bzbarsky@mit.edu"}, {"tags": [], "count": 3, "is_private": false, "id": 5679888, "bug_id": 679636, "creation_time": "2011-08-26T05:27:16Z", "raw_text": "(In reply to Boris Zbarsky (:bz) from comment #2)\n> The simplest solution for this issue from your end is to simply style\n> blocked embeds as inline-block in the UA stylesheet, I'd think, if you\n> actually want to preserve their size in the layout.\n\nThat isn't something that I can do because a rule like this would be easily detectable by any webpage. With an extension like Adblock Plus, changing the default behavior is not an option.", "creator": "ecfbugzilla@palant.de", "text": "(In reply to Boris Zbarsky (:bz) from comment #2)\n> The simplest solution for this issue from your end is to simply style\n> blocked embeds as inline-block in the UA stylesheet, I'd think, if you\n> actually want to preserve their size in the layout.\n\nThat isn't something that I can do because a rule like this would be easily detectable by any webpage. With an extension like Adblock Plus, changing the default behavior is not an option.", "author": "ecfbugzilla@palant.de", "attachment_id": null, "time": "2011-08-26T05:27:16Z"}, {"bug_id": 679636, "id": 5679910, "tags": [], "count": 4, "is_private": false, "time": "2011-08-26T05:58:25Z", "attachment_id": null, "text": "Web pages can already use CSS to detect whether the <embed> is blocked or not, no?", "raw_text": "Web pages can already use CSS to detect whether the <embed> is blocked or not, no?", "creation_time": "2011-08-26T05:58:25Z", "author": "bzbarsky@mit.edu", "creator": "bzbarsky@mit.edu"}, {"author": "ecfbugzilla@palant.de", "creator": "ecfbugzilla@palant.de", "creation_time": "2011-08-26T06:53:49Z", "raw_text": "No, if blocking reason is nsIContentPolicy.REJECT_REQUEST they cannot.", "time": "2011-08-26T06:53:49Z", "attachment_id": null, "text": "No, if blocking reason is nsIContentPolicy.REJECT_REQUEST they cannot.", "id": 5679954, "is_private": false, "count": 5, "tags": [], "bug_id": 679636}, {"attachment_id": null, "time": "2011-08-26T15:01:23Z", "author": "bzbarsky@mit.edu", "text": "Ah, indeed.\n\nSo is this something you just want for <embed> or for <object> too?  Presumably just the former?", "creator": "bzbarsky@mit.edu", "creation_time": "2011-08-26T15:01:23Z", "raw_text": "Ah, indeed.\n\nSo is this something you just want for <embed> or for <object> too?  Presumably just the former?", "bug_id": 679636, "id": 5680622, "count": 6, "is_private": false, "tags": []}, {"creation_time": "2011-08-26T15:08:43Z", "raw_text": "Yes, the behavior should be consistent of course.", "text": "Yes, the behavior should be consistent of course.", "attachment_id": null, "time": "2011-08-26T15:08:43Z", "count": 7, "is_private": false, "tags": [], "id": 5680636, "bug_id": 679636, "creator": "ecfbugzilla@palant.de", "author": "ecfbugzilla@palant.de"}]}}, "comments": {}}