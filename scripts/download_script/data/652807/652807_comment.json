{"bugs": {"652807": {"comments": [{"author": "jason.vas.dias@gmail.com", "creator": "jason.vas.dias@gmail.com", "tags": [], "count": 0, "bug_id": 652807, "id": 5431803, "raw_text": "User-Agent:       Mozilla/5.0 (X11; Linux x86_64; rv:2.0b13pre) Gecko/20110415 Firefox/4.0b13pre\nBuild Identifier: \n\nIn order to build the i686 version of the xulrunner application on an x86_64, one has to edit src/config/autoconf.mk.in \n:\n$  $ diff -U0 config/autoconf.mk.in.2.0b13pre config/autoconf.mk.in\n--- config/autoconf.mk.in.2.0b13pre     2011-04-26 16:01:25.000000000 +0100\n+++ config/autoconf.mk.in       2011-04-24 22:48:01.000000000 +0100\n@@ -307,3 +307,3 @@\n-OS_CFLAGS      = $(OS_CPPFLAGS) @CFLAGS@\n-OS_CXXFLAGS    = $(OS_CPPFLAGS) @CXXFLAGS@\n-OS_LDFLAGS     = @LDFLAGS@\n+OS_CFLAGS      := $(OS_CPPFLAGS) $(CFLAGS)   @CFLAGS@\n+OS_CXXFLAGS    := $(OS_CPPFLAGS) $(CXXFLAGS) @CXXFLAGS@\n+OS_LDFLAGS     := @LDFLAGS@ $(LDFLAGS)\n@@ -382,2 +382,2 @@\n-CC                 = @CC@\n-CXX                = @CXX@\n+CC                 := $(if $(CC),$(CC),gcc)\n+CXX                := $(if $(CXX),$(CXX),c++)\n\n\nReproducible: Always\n\nSteps to Reproduce:\n1. Try to build xulrunner with environment:\n\ndeclare -x AS=\"/usr/bin/as -32\"\ndeclare -x ASFLAGS=\"-Wa,-32\"\ndeclare -x CFLAGS=\"-march=i686 -mtune=generic -g -O2 -fPIC -DPIC -Wa,--compress-debug-sections\"\ndeclare -x LD=\"/usr/bin/ld -melf_i386\"\ndeclare -x LDFLAGS=\"-Wl,-L/usr/lib64/gcc/x86_64-pc-linux-gnu/4.6.0/32,-L/usr/lib64/gcc/x86_64-pc-linux-gnu/lib32,-L/usr/lib32,-L/lib32,-R/usr/lib64/gcc/x86_64-pc-linux-gnu/4.6.0/32:/usr/lib64/gcc/x86_64-pc-linux-gnu/4.6.0/lib32:/usr/lib32:/lib32,--dynamic-linker,/lib32/ld-linux.so.2\"\ndeclare -x PATH=\"/bin:/usr/bin:.\"\ndeclare -x PKG_CONFIG_PATH=\"/usr/lib32/pkgconfig/\"\n\nActual Results:  \nthe build tries to use 'c++' as $CXX , selecting native 64-bit operation when\nI'm trying to build for non-native 32-bit sub-architecture ; the build fails\nat the first link attempt.\n\n\nExpected Results:  \nMy $CXX, $CC, $CFLAGS, $CXXFLAGS, $LD, and $LDFLAG settings should have been used and written to $OBJDIR/config/autoconf.mk .", "creation_time": "2011-04-26T15:05:42Z", "text": "User-Agent:       Mozilla/5.0 (X11; Linux x86_64; rv:2.0b13pre) Gecko/20110415 Firefox/4.0b13pre\nBuild Identifier: \n\nIn order to build the i686 version of the xulrunner application on an x86_64, one has to edit src/config/autoconf.mk.in \n:\n$  $ diff -U0 config/autoconf.mk.in.2.0b13pre config/autoconf.mk.in\n--- config/autoconf.mk.in.2.0b13pre     2011-04-26 16:01:25.000000000 +0100\n+++ config/autoconf.mk.in       2011-04-24 22:48:01.000000000 +0100\n@@ -307,3 +307,3 @@\n-OS_CFLAGS      = $(OS_CPPFLAGS) @CFLAGS@\n-OS_CXXFLAGS    = $(OS_CPPFLAGS) @CXXFLAGS@\n-OS_LDFLAGS     = @LDFLAGS@\n+OS_CFLAGS      := $(OS_CPPFLAGS) $(CFLAGS)   @CFLAGS@\n+OS_CXXFLAGS    := $(OS_CPPFLAGS) $(CXXFLAGS) @CXXFLAGS@\n+OS_LDFLAGS     := @LDFLAGS@ $(LDFLAGS)\n@@ -382,2 +382,2 @@\n-CC                 = @CC@\n-CXX                = @CXX@\n+CC                 := $(if $(CC),$(CC),gcc)\n+CXX                := $(if $(CXX),$(CXX),c++)\n\n\nReproducible: Always\n\nSteps to Reproduce:\n1. Try to build xulrunner with environment:\n\ndeclare -x AS=\"/usr/bin/as -32\"\ndeclare -x ASFLAGS=\"-Wa,-32\"\ndeclare -x CFLAGS=\"-march=i686 -mtune=generic -g -O2 -fPIC -DPIC -Wa,--compress-debug-sections\"\ndeclare -x LD=\"/usr/bin/ld -melf_i386\"\ndeclare -x LDFLAGS=\"-Wl,-L/usr/lib64/gcc/x86_64-pc-linux-gnu/4.6.0/32,-L/usr/lib64/gcc/x86_64-pc-linux-gnu/lib32,-L/usr/lib32,-L/lib32,-R/usr/lib64/gcc/x86_64-pc-linux-gnu/4.6.0/32:/usr/lib64/gcc/x86_64-pc-linux-gnu/4.6.0/lib32:/usr/lib32:/lib32,--dynamic-linker,/lib32/ld-linux.so.2\"\ndeclare -x PATH=\"/bin:/usr/bin:.\"\ndeclare -x PKG_CONFIG_PATH=\"/usr/lib32/pkgconfig/\"\n\nActual Results:  \nthe build tries to use 'c++' as $CXX , selecting native 64-bit operation when\nI'm trying to build for non-native 32-bit sub-architecture ; the build fails\nat the first link attempt.\n\n\nExpected Results:  \nMy $CXX, $CC, $CFLAGS, $CXXFLAGS, $LD, and $LDFLAG settings should have been used and written to $OBJDIR/config/autoconf.mk .", "attachment_id": null, "time": "2011-04-26T15:05:42Z", "is_private": false}, {"bug_id": 652807, "tags": [], "count": 1, "creator": "benjamin@smedbergs.us", "raw_text": "configure should be reading the environment, not make: we don't want to pick up stuff from the environment after configure has been run.\n\nI don't think this bug is valid: could you please check whether this happens if you set up the environment properly before running configure?", "id": 5431821, "text": "configure should be reading the environment, not make: we don't want to pick up stuff from the environment after configure has been run.\n\nI don't think this bug is valid: could you please check whether this happens if you set up the environment properly before running configure?", "creation_time": "2011-04-26T15:16:11Z", "author": "benjamin@smedbergs.us", "time": "2011-04-26T15:16:11Z", "is_private": false, "attachment_id": null}, {"creation_time": "2011-04-26T15:40:14Z", "text": "Hi Ben - thanks for responding so quickly !\n\nRE: > configure should be reading the environment, not make: \n    > we don't want to pick up stuff from the environment\n    > after configure has been run.\n\nI do :\n\n1. Set up 32-bit build environment:\n\n $ . ~root/32.bit.env\n\n which is the 'declare -x' statements above -\n\n$ export -p | egrep 'CC|CXX|LD|AS|FLAG'\ndeclare -x AS=\"/usr/bin/as -32\"\ndeclare -x ASFLAGS=\"-Wa,-32\"\ndeclare -x CC=\"/usr/bin/gcc -m32\"\ndeclare -x CFLAGS=\"-m32 -march=i686 -mtune=generic -g -O2 -fPIC -DPIC -Wa,--compress-debug-sections\"\ndeclare -x CXX=\"/usr/bin/g++ -m32\"\ndeclare -x CXXFLAGS=\"-m32 -march=i686 -mtune=generic -g -O2 -fPIC -DPIC -Wa,--compress-debug-sections\"\ndeclare -x LD=\"/usr/bin/ld -melf_i386\"\ndeclare -x LDFLAGS=\"-m32 -Wl,-L/usr/lib64/gcc/x86_64-pc-linux-gnu/4.6.0/32,-L/usr/lib64/gcc/x86_64-pc-linux-gnu/lib32,-L/usr/lib32,-L/lib32,-R/usr/lib64/gcc/x86_64-pc-linux-gnu/4.6.0/32:/usr/lib64/gcc/x86_64-pc-linux-gnu/4.6.0/lib32:/usr/lib32:/lib32,--dynamic-linker,/lib32/ld-linux.so.2\"\ndeclare -x LD_RUN_PATH=\"/usr/lib64/gcc/x86_64-pc-linux-gnu/4.6.0/32:/usr/lib64/gcc/x86_64-pc-linux-gnu/4.6.0/lib32:/usr/lib32:/lib32:.\"\n\n\n2. I edit my mozconfig :\n\n$ cat ~/.mozconfig\nmk_add_options AUTOCONF=autoconf-2.13\nmk_add_options MOZ_OBJDIR=/home/firefox/x86\nac_add_options --enable-application=xulrunner\nac_add_options --prefix=/usr\nac_add_options --libdir=/usr/lib32\nac_add_options --disable-static\nac_add_options --enable-shared\nac_add_options --with-pic\nac_add_options --enable-debug\nac_add_options --enable-default-toolkit=cairo-gtk2\nac_add_options --enable-plugins\nac_add_options --with-pthreads\nac_add_options --with-system-libevent=/usr\nac_add_options --with-system-jpeg=/usr\nac_add_options --with-system-zlib=/usr\nac_add_options --with-system-bz2=/usr\nac_add_options --enable-system-cairo\nac_add_options --enable-system-lcms\nac_add_options --with-ft-prefix=/usr\nac_add_options --with-glib-prefix=/usr\nac_add_options --with-libIDL-prefix=/usr\nac_add_options --with-java-bin-path=/usr/java/bin\nac_add_options --with-java-include-path=/usr/java/include\nac_add_options --disable-strip\nac_add_options --disable-install-strip\nac_add_options --with-branding=unofficial\nac_add_options --disable-official-branding\n\n3. I chdir to the mozilla source directory and run 'make -f client.mk' :\n\n   $ cd ~firefox/src\n   $ make -f client.mk\n\nNOTE : $MOZ_OBJDIR == ~/x86 is a newly created, EMPTY directory !\n\nThat is all I do - no separate 'configure' step - and then my $CXX and $CXXFLAGS\nsettings are not used, unless I edit $topsrcdir/config/autoconf.mk.in to include\nmy $CC, $CXX, $CFLAGS, $CXXFLAGS, $LDFLAGS settings .\n\nRE: > could you please check whether this happens if you set up the \n    > environment properly before running configure?\n\nPlease define \"properly\" here. And it is your client.mk script that is\nresponsible for setting up the environment in which configure is run, not me.", "id": 5431878, "raw_text": "Hi Ben - thanks for responding so quickly !\n\nRE: > configure should be reading the environment, not make: \n    > we don't want to pick up stuff from the environment\n    > after configure has been run.\n\nI do :\n\n1. Set up 32-bit build environment:\n\n $ . ~root/32.bit.env\n\n which is the 'declare -x' statements above -\n\n$ export -p | egrep 'CC|CXX|LD|AS|FLAG'\ndeclare -x AS=\"/usr/bin/as -32\"\ndeclare -x ASFLAGS=\"-Wa,-32\"\ndeclare -x CC=\"/usr/bin/gcc -m32\"\ndeclare -x CFLAGS=\"-m32 -march=i686 -mtune=generic -g -O2 -fPIC -DPIC -Wa,--compress-debug-sections\"\ndeclare -x CXX=\"/usr/bin/g++ -m32\"\ndeclare -x CXXFLAGS=\"-m32 -march=i686 -mtune=generic -g -O2 -fPIC -DPIC -Wa,--compress-debug-sections\"\ndeclare -x LD=\"/usr/bin/ld -melf_i386\"\ndeclare -x LDFLAGS=\"-m32 -Wl,-L/usr/lib64/gcc/x86_64-pc-linux-gnu/4.6.0/32,-L/usr/lib64/gcc/x86_64-pc-linux-gnu/lib32,-L/usr/lib32,-L/lib32,-R/usr/lib64/gcc/x86_64-pc-linux-gnu/4.6.0/32:/usr/lib64/gcc/x86_64-pc-linux-gnu/4.6.0/lib32:/usr/lib32:/lib32,--dynamic-linker,/lib32/ld-linux.so.2\"\ndeclare -x LD_RUN_PATH=\"/usr/lib64/gcc/x86_64-pc-linux-gnu/4.6.0/32:/usr/lib64/gcc/x86_64-pc-linux-gnu/4.6.0/lib32:/usr/lib32:/lib32:.\"\n\n\n2. I edit my mozconfig :\n\n$ cat ~/.mozconfig\nmk_add_options AUTOCONF=autoconf-2.13\nmk_add_options MOZ_OBJDIR=/home/firefox/x86\nac_add_options --enable-application=xulrunner\nac_add_options --prefix=/usr\nac_add_options --libdir=/usr/lib32\nac_add_options --disable-static\nac_add_options --enable-shared\nac_add_options --with-pic\nac_add_options --enable-debug\nac_add_options --enable-default-toolkit=cairo-gtk2\nac_add_options --enable-plugins\nac_add_options --with-pthreads\nac_add_options --with-system-libevent=/usr\nac_add_options --with-system-jpeg=/usr\nac_add_options --with-system-zlib=/usr\nac_add_options --with-system-bz2=/usr\nac_add_options --enable-system-cairo\nac_add_options --enable-system-lcms\nac_add_options --with-ft-prefix=/usr\nac_add_options --with-glib-prefix=/usr\nac_add_options --with-libIDL-prefix=/usr\nac_add_options --with-java-bin-path=/usr/java/bin\nac_add_options --with-java-include-path=/usr/java/include\nac_add_options --disable-strip\nac_add_options --disable-install-strip\nac_add_options --with-branding=unofficial\nac_add_options --disable-official-branding\n\n3. I chdir to the mozilla source directory and run 'make -f client.mk' :\n\n   $ cd ~firefox/src\n   $ make -f client.mk\n\nNOTE : $MOZ_OBJDIR == ~/x86 is a newly created, EMPTY directory !\n\nThat is all I do - no separate 'configure' step - and then my $CXX and $CXXFLAGS\nsettings are not used, unless I edit $topsrcdir/config/autoconf.mk.in to include\nmy $CC, $CXX, $CFLAGS, $CXXFLAGS, $LDFLAGS settings .\n\nRE: > could you please check whether this happens if you set up the \n    > environment properly before running configure?\n\nPlease define \"properly\" here. And it is your client.mk script that is\nresponsible for setting up the environment in which configure is run, not me.", "count": 2, "creator": "jason.vas.dias@gmail.com", "tags": [], "bug_id": 652807, "author": "jason.vas.dias@gmail.com", "is_private": false, "time": "2011-04-26T15:40:14Z", "attachment_id": null}, {"attachment_id": null, "is_private": false, "time": "2011-04-26T15:47:02Z", "author": "jason.vas.dias@gmail.com", "text": "Sorry, missed out mentioning 'setarch i686':\n\n   \n\n3. I chdir to the mozilla source directory and run 'make -f client.mk' :\n   \n$ uname -a\nLinux jvdspc 2.6.38.2-jvd #1 SMP Sun Apr 3 00:55:29 BST 2011 x86_64 GNU/Linux\n\n   $ setarch i686\n\n$ uname -a\nLinux jvdspc 2.6.38.2-jvd #1 SMP Sun Apr 3 00:55:29 BST 2011 i686 GNU/Linux\n\n   $ . ~root/32.bit.env\n   $ cd ~firefox/src\n   $ make -f client.mk", "creation_time": "2011-04-26T15:47:02Z", "raw_text": "Sorry, missed out mentioning 'setarch i686':\n\n   \n\n3. I chdir to the mozilla source directory and run 'make -f client.mk' :\n   \n$ uname -a\nLinux jvdspc 2.6.38.2-jvd #1 SMP Sun Apr 3 00:55:29 BST 2011 x86_64 GNU/Linux\n\n   $ setarch i686\n\n$ uname -a\nLinux jvdspc 2.6.38.2-jvd #1 SMP Sun Apr 3 00:55:29 BST 2011 i686 GNU/Linux\n\n   $ . ~root/32.bit.env\n   $ cd ~firefox/src\n   $ make -f client.mk", "id": 5431900, "bug_id": 652807, "count": 3, "creator": "jason.vas.dias@gmail.com", "tags": []}, {"author": "jason.vas.dias@gmail.com", "bug_id": 652807, "count": 4, "tags": [], "creator": "jason.vas.dias@gmail.com", "text": "Also, your C++ code requires the '-fpermissive' option to compile under gcc-4.6.0 - I can raise a new bug on this if you like.", "creation_time": "2011-04-26T15:49:33Z", "raw_text": "Also, your C++ code requires the '-fpermissive' option to compile under gcc-4.6.0 - I can raise a new bug on this if you like.", "id": 5431907, "attachment_id": null, "time": "2011-04-26T15:49:33Z", "is_private": false}, {"attachment_id": null, "time": "2011-04-26T15:50:48Z", "is_private": false, "author": "benjamin@smedbergs.us", "tags": [], "count": 5, "creator": "benjamin@smedbergs.us", "bug_id": 652807, "creation_time": "2011-04-26T15:50:48Z", "text": "The environment is read here:\nhttp://mxr.mozilla.org/mozilla-central/source/configure.in#83\n\nand then substituted here:\nhttp://mxr.mozilla.org/mozilla-central/source/configure.in#8920\n\nSince this works in general, you probably need to add some echoes to the configure script to figure out where your values are being lost.\n\nI typically configure like this for a linux cross-compile:\n\nexport PKG_CONFIG_LIBDIR=/usr/lib/pkgconfig:/usr/share/pkgconfig\nexport CC=\"${CC:-gcc} -m32\"\nexport CXX=\"${CXX:-g++} -m32\"\nexport AR=\"ar\"\n\nconfigure_flags=\"$configure_flags --x-libraries=/usr/lib --target=i686-pc-linux\"\n\nexport CROSS_COMPILE=1\n\n$srcdir/configure $configure_flags \"$@\"", "id": 5431913, "raw_text": "The environment is read here:\nhttp://mxr.mozilla.org/mozilla-central/source/configure.in#83\n\nand then substituted here:\nhttp://mxr.mozilla.org/mozilla-central/source/configure.in#8920\n\nSince this works in general, you probably need to add some echoes to the configure script to figure out where your values are being lost.\n\nI typically configure like this for a linux cross-compile:\n\nexport PKG_CONFIG_LIBDIR=/usr/lib/pkgconfig:/usr/share/pkgconfig\nexport CC=\"${CC:-gcc} -m32\"\nexport CXX=\"${CXX:-g++} -m32\"\nexport AR=\"ar\"\n\nconfigure_flags=\"$configure_flags --x-libraries=/usr/lib --target=i686-pc-linux\"\n\nexport CROSS_COMPILE=1\n\n$srcdir/configure $configure_flags \"$@\""}, {"is_private": false, "time": "2011-04-26T16:00:33Z", "attachment_id": null, "text": "one way to work-around this bug might be to do :\n\n  $ make -f client.mk CC=/usr/bin/gcc' -m32' CXX=/usr/bin/g++' -m32' ...\n\netc. but I don't see why I should have to when these variables are \nalready exported in my environment ;  to me, this would be part of \nfixing bug #648701 : 'Make the build steps familiar to new contributors' .", "creation_time": "2011-04-26T16:00:33Z", "raw_text": "one way to work-around this bug might be to do :\n\n  $ make -f client.mk CC=/usr/bin/gcc' -m32' CXX=/usr/bin/g++' -m32' ...\n\netc. but I don't see why I should have to when these variables are \nalready exported in my environment ;  to me, this would be part of \nfixing bug #648701 : 'Make the build steps familiar to new contributors' .", "id": 5431930, "bug_id": 652807, "count": 6, "tags": [], "creator": "jason.vas.dias@gmail.com", "author": "jason.vas.dias@gmail.com"}, {"attachment_id": null, "is_private": false, "time": "2011-04-26T16:03:38Z", "author": "jason.vas.dias@gmail.com", "creation_time": "2011-04-26T16:03:38Z", "text": "Aha ! I think I found the fix : \nin client.mk, you need to :\n\n   'export CC CXX CFLAGS CXXFLAGS LDFLAGS LD AS AR\n   '\n\notherwise, these variables are NOT exported to commands run in rules , \nUNLESS you specify them on the make command line.", "id": 5431936, "raw_text": "Aha ! I think I found the fix : \nin client.mk, you need to :\n\n   'export CC CXX CFLAGS CXXFLAGS LDFLAGS LD AS AR\n   '\n\notherwise, these variables are NOT exported to commands run in rules , \nUNLESS you specify them on the make command line.", "creator": "jason.vas.dias@gmail.com", "count": 7, "tags": [], "bug_id": 652807}, {"attachment_id": null, "is_private": false, "time": "2011-04-26T16:04:08Z", "author": "benjamin@smedbergs.us", "id": 5431939, "raw_text": "make -f client.mk CC=/usr/bin/gcc' -m32' CXX=/usr/bin/g++' -m32' sets Makefile variables, but not environment variables, so those won't end up affecting configure at all.\n\nYou could do CC=/usr/bin/gcc' -m32' CXX=/usr/bin/g++' -m32' make -f client.mk and that should work, I think. Like I said in the other bug, I haven't used client.mk in a long time, and it doesn't make much sense to use a mozconfig *and* environment variables separately. People normally use one or the other (if you're using mozconfig, just put the settings directly in your mozconfig file).", "creation_time": "2011-04-26T16:04:08Z", "text": "make -f client.mk CC=/usr/bin/gcc' -m32' CXX=/usr/bin/g++' -m32' sets Makefile variables, but not environment variables, so those won't end up affecting configure at all.\n\nYou could do CC=/usr/bin/gcc' -m32' CXX=/usr/bin/g++' -m32' make -f client.mk and that should work, I think. Like I said in the other bug, I haven't used client.mk in a long time, and it doesn't make much sense to use a mozconfig *and* environment variables separately. People normally use one or the other (if you're using mozconfig, just put the settings directly in your mozconfig file).", "count": 8, "creator": "benjamin@smedbergs.us", "tags": [], "bug_id": 652807}, {"attachment_id": null, "time": "2011-04-26T16:06:14Z", "is_private": false, "author": "jason.vas.dias@gmail.com", "count": 9, "creator": "jason.vas.dias@gmail.com", "tags": [], "bug_id": 652807, "creation_time": "2011-04-26T16:06:14Z", "text": "RE: Comment #5:\n > I typically configure like this for a linux cross-compile\n\nthis is NOT a \"cross-compile\" - this is for a bi-arch build -\nx86_64 is natively both 64-bit and 32-bit ; or I look at it\nlike 'the i686 architecture is a sub-architecture of x86_64' .", "id": 5431948, "raw_text": "RE: Comment #5:\n > I typically configure like this for a linux cross-compile\n\nthis is NOT a \"cross-compile\" - this is for a bi-arch build -\nx86_64 is natively both 64-bit and 32-bit ; or I look at it\nlike 'the i686 architecture is a sub-architecture of x86_64' ."}, {"bug_id": 652807, "time": "2011-04-26T16:11:53Z", "count": 10, "tags": [], "creator": "jason.vas.dias@gmail.com", "text": "re: Comment #8: see  $ info make \n\n\n5.7.2 Communicating Variables to a Sub-`make'\n---------------------------------------------\n\nVariable values of the top-level `make' can be passed to the sub-`make'\nthrough the environment by explicit request.  These variables are\ndefined in the sub-`make' as defaults, but do not override what is\nspecified in the makefile used by the sub-`make' makefile unless you\nuse the `-e' switch (*note Summary of Options: Options Summary.).\n\n   To pass down, or \"export\", a variable, `make' adds the variable and\nits value to the environment for running each line of the recipe.  The\nsub-`make', in turn, uses the environment to initialize its table of\nvariable values.  *Note Variables from the Environment: Environment.\n\n   Except by explicit request, `make' exports a variable only if it is\neither defined in the environment initially or set on the command line,\nand if its name consists only of letters, numbers, and underscores.\nSome shells cannot cope with environment variable names consisting of\ncharacters other than letters, numbers, and underscores.\n\n\nSo you need to either explicitly export CC, CXX, CXXFLAGS , LD, LDFLAGS etc.\nby 'export ...' statement(s) in client.mk or set them on the make command\nline for them to be used in either a sub-make OR exported to the environment\nof make rule commands.", "is_private": false, "creation_time": "2011-04-26T16:11:53Z", "raw_text": "re: Comment #8: see  $ info make \n\n\n5.7.2 Communicating Variables to a Sub-`make'\n---------------------------------------------\n\nVariable values of the top-level `make' can be passed to the sub-`make'\nthrough the environment by explicit request.  These variables are\ndefined in the sub-`make' as defaults, but do not override what is\nspecified in the makefile used by the sub-`make' makefile unless you\nuse the `-e' switch (*note Summary of Options: Options Summary.).\n\n   To pass down, or \"export\", a variable, `make' adds the variable and\nits value to the environment for running each line of the recipe.  The\nsub-`make', in turn, uses the environment to initialize its table of\nvariable values.  *Note Variables from the Environment: Environment.\n\n   Except by explicit request, `make' exports a variable only if it is\neither defined in the environment initially or set on the command line,\nand if its name consists only of letters, numbers, and underscores.\nSome shells cannot cope with environment variable names consisting of\ncharacters other than letters, numbers, and underscores.\n\n\nSo you need to either explicitly export CC, CXX, CXXFLAGS , LD, LDFLAGS etc.\nby 'export ...' statement(s) in client.mk or set them on the make command\nline for them to be used in either a sub-make OR exported to the environment\nof make rule commands.", "id": 5431957, "author": "jason.vas.dias@gmail.com", "attachment_id": null}, {"creator": "jason.vas.dias@gmail.com", "tags": [], "count": 11, "bug_id": 652807, "id": 5432005, "raw_text": "RE: \n  > if you're using mozconfig, just put the settings directly in \n  > your mozconfig file\n\nThis doesn't work:\n\n  $ more ~/.mozconfig\n  CXX=${CXX:=/usr/bin/g++ -m32}\n  ...\n\nThen client.mk barfs at the '{' character.", "creation_time": "2011-04-26T16:28:25Z", "text": "RE: \n  > if you're using mozconfig, just put the settings directly in \n  > your mozconfig file\n\nThis doesn't work:\n\n  $ more ~/.mozconfig\n  CXX=${CXX:=/usr/bin/g++ -m32}\n  ...\n\nThen client.mk barfs at the '{' character.", "author": "jason.vas.dias@gmail.com", "time": "2011-04-26T16:28:25Z", "is_private": false, "attachment_id": null}, {"is_private": false, "time": "2011-04-26T16:29:43Z", "attachment_id": null, "text": "typo in last comment:\n  $ more ~/.mozconfig\n  CXX=${CXX:-/usr/bin/g++ -m32}\n  ...\n( \"=\" -> '-' !)", "creation_time": "2011-04-26T16:29:43Z", "raw_text": "typo in last comment:\n  $ more ~/.mozconfig\n  CXX=${CXX:-/usr/bin/g++ -m32}\n  ...\n( \"=\" -> '-' !)", "id": 5432017, "bug_id": 652807, "creator": "jason.vas.dias@gmail.com", "count": 12, "tags": [], "author": "jason.vas.dias@gmail.com"}, {"is_private": false, "time": "2011-04-26T16:35:13Z", "attachment_id": null, "text": "actually, I did try this :\n\n $ more ~/.mozconfig\nmk_add_options CC:=$(if $(CC),$(CC),/usr/bin/gcc -m32)\nmk_add_options CXX:=$(if $(CXX),$(CXX),/usr/bin/g++ -m32)\n\nBut then generated autoconf.mk gets \"missing separator\" errors .\n\nAnd if these variables are not exported in client.mk it is in any case broken,\nand how can you expect to fix bug #648701 if client.mk does not export them ?", "creation_time": "2011-04-26T16:35:13Z", "raw_text": "actually, I did try this :\n\n $ more ~/.mozconfig\nmk_add_options CC:=$(if $(CC),$(CC),/usr/bin/gcc -m32)\nmk_add_options CXX:=$(if $(CXX),$(CXX),/usr/bin/g++ -m32)\n\nBut then generated autoconf.mk gets \"missing separator\" errors .\n\nAnd if these variables are not exported in client.mk it is in any case broken,\nand how can you expect to fix bug #648701 if client.mk does not export them ?", "id": 5432045, "bug_id": 652807, "count": 13, "tags": [], "creator": "jason.vas.dias@gmail.com", "author": "jason.vas.dias@gmail.com"}, {"bug_id": 652807, "tags": [], "count": 14, "creator": "jason.vas.dias@gmail.com", "raw_text": "Suggested patch:\n$ diff -U0  src/client.mk /tmp/client.mk\n--- src/client.mk       2011-04-14 21:27:19.000000000 +0100\n+++ /tmp/client.mk      2011-04-26 19:05:25.580642770 +0100\n@@ -98 +98 @@\n-AUTOCONF=$(error Couldn't find autoconf 2.13)\n+AUTOCONF=$(error Could not find autoconf 2.13)\n@@ -168,0 +169,34 @@\n+# export every variable you want configure or sub-make scripts to pick up :\n+export CC:=$(if $(CC),$(CC),cc)\n+export CXX:=$(if $(CXX),$(CXX),c++)\n+export CFLAGS:=$(if $(CFLAGS),$(CFLAGS))\n+export CXXFLAGS:=$(if $(CXXFLAGS),$(CXXFLAGS))\n+export LD:=$(if $(LD),$(LD))\n+export LDFLAGS:=$(if $(LDFLAGS),$(LDFLAGS))\n+export AS:=$(if $(AS),$(AS))\n+export ASFLAGS:=$(if $(ASFLAGS),$(ASFLAGS))\n+export PATH:=$(if $(PATH),$(PATH))\n+export LD_LIBRARY_PATH:=$(if $(LD_LIBRARY_PATH),$(LD_LIBRARY_PATH))\n+export LD_RUN_PATH:=$(if $(LD_RUN_PATH),$(LD_RUN_PATH))\n+export LD_PRELOAD:=$(if $(LD_PRELOAD),$(LD_PRELOAD))\n+export PREFIX:=$(if $(PREFIX),$(PREFIX),/usr)\n+export DESTDIR:=$(if $(DESTDIR),$(DESTDIR))\n+export BINDIR:=$(if $(BINDIR),$(BINDIR),$(DESTDIR)/$(PREFIX)/bin)\n+export SBINDIR:=$(if $(SBINDIR),$(SBINDIR),$(DESTDIR)/$(PREFIX)/sbin)\n+is_native_64_bit:=$(if $(filter -m32 -m64,$(CFLAGS)),$(filter -m64,$(CFLAGS)),$(strip $(shell f=$$(mktemp XXXXX); echo 'int f(){ return(sizeof(void*)==8)?0:1;} int main(){ return f();}' > $${f}.c; gcc $(CFLAGS) -o $$f $${f}.c && $$f && echo 1)))\n+is_native_32_bit:=$(if $(filter -m32 -m64,$(CFLAGS)),$(filter -m32,$(CFLAGS)),$(strip $(shell f=$$(mktemp XXXXX); echo 'int f(){ return(sizeof(void*)==4)?0:1;} int main(){ return f();}' > $${f}.c; gcc $(CFLAGS) -o $$f $${f}.c && $$f && echo 1)))\n+cc_v:=$(strip $(shell $(CC) --version))\n+gcc_version:=$(strip $(shell echo '$(cc_v)' | sed -n '/[\\(]GCC[\\)]/{s/^.*[\\ ]\\([0-9]\\.[0-9]\\.[0-9]\\)[\\ ].*$$/\\1/g;p}'))\n+export LIBDIR:=$(strip \\\n+               $(if $(gcc_version),\\\n+                 $(if $(is_native_64_bit),$(shell cd $(DESTDIR)/$(PREFIX)/$(if $(LIBDIR),$(LIBDIR),/lib)/$$($(CC) -m64 -print-multi-os-directory);pwd),\\\n+                 $(if $(is_native_32_bit),$(shell cd $(DESTDIR)/$(PREFIX)/$(if $(LIBDIR),$(LIBDIR),/lib)/$$($(CC) -m32 -print-multi-os-directory);pwd),$(LIBDIR))\\\n+                  )\\\n+                )\\\n+               )\n+export SYSCONFDIR:=$(if $(SYSCONFDIR),$(SYSCONFDIR),$(DESTDIR)/$(PREFIX)/../etc)\n+export DATAROOTDIR:=$(if $(DATAROOTDIR),$(DATAROOTDIR),$(DESTDIR)/$(PREFIX)/share)\n+export LIBEXECDIR:=$(if $(LIBEXECDIR),$(LIBEXECDIR),$(DESTDIR)/$(PREFIX)/libexec)\n+export MANDIR:=$(if $(MANDIR),$(MANDIR),$(DATAROOTDIR)/man)\n+export INFODIR:=$(if $(INFODIR),$(INFODIR),$(DATAROOTDIR)/info)\n+", "id": 5432378, "text": "Suggested patch:\n$ diff -U0  src/client.mk /tmp/client.mk\n--- src/client.mk       2011-04-14 21:27:19.000000000 +0100\n+++ /tmp/client.mk      2011-04-26 19:05:25.580642770 +0100\n@@ -98 +98 @@\n-AUTOCONF=$(error Couldn't find autoconf 2.13)\n+AUTOCONF=$(error Could not find autoconf 2.13)\n@@ -168,0 +169,34 @@\n+# export every variable you want configure or sub-make scripts to pick up :\n+export CC:=$(if $(CC),$(CC),cc)\n+export CXX:=$(if $(CXX),$(CXX),c++)\n+export CFLAGS:=$(if $(CFLAGS),$(CFLAGS))\n+export CXXFLAGS:=$(if $(CXXFLAGS),$(CXXFLAGS))\n+export LD:=$(if $(LD),$(LD))\n+export LDFLAGS:=$(if $(LDFLAGS),$(LDFLAGS))\n+export AS:=$(if $(AS),$(AS))\n+export ASFLAGS:=$(if $(ASFLAGS),$(ASFLAGS))\n+export PATH:=$(if $(PATH),$(PATH))\n+export LD_LIBRARY_PATH:=$(if $(LD_LIBRARY_PATH),$(LD_LIBRARY_PATH))\n+export LD_RUN_PATH:=$(if $(LD_RUN_PATH),$(LD_RUN_PATH))\n+export LD_PRELOAD:=$(if $(LD_PRELOAD),$(LD_PRELOAD))\n+export PREFIX:=$(if $(PREFIX),$(PREFIX),/usr)\n+export DESTDIR:=$(if $(DESTDIR),$(DESTDIR))\n+export BINDIR:=$(if $(BINDIR),$(BINDIR),$(DESTDIR)/$(PREFIX)/bin)\n+export SBINDIR:=$(if $(SBINDIR),$(SBINDIR),$(DESTDIR)/$(PREFIX)/sbin)\n+is_native_64_bit:=$(if $(filter -m32 -m64,$(CFLAGS)),$(filter -m64,$(CFLAGS)),$(strip $(shell f=$$(mktemp XXXXX); echo 'int f(){ return(sizeof(void*)==8)?0:1;} int main(){ return f();}' > $${f}.c; gcc $(CFLAGS) -o $$f $${f}.c && $$f && echo 1)))\n+is_native_32_bit:=$(if $(filter -m32 -m64,$(CFLAGS)),$(filter -m32,$(CFLAGS)),$(strip $(shell f=$$(mktemp XXXXX); echo 'int f(){ return(sizeof(void*)==4)?0:1;} int main(){ return f();}' > $${f}.c; gcc $(CFLAGS) -o $$f $${f}.c && $$f && echo 1)))\n+cc_v:=$(strip $(shell $(CC) --version))\n+gcc_version:=$(strip $(shell echo '$(cc_v)' | sed -n '/[\\(]GCC[\\)]/{s/^.*[\\ ]\\([0-9]\\.[0-9]\\.[0-9]\\)[\\ ].*$$/\\1/g;p}'))\n+export LIBDIR:=$(strip \\\n+               $(if $(gcc_version),\\\n+                 $(if $(is_native_64_bit),$(shell cd $(DESTDIR)/$(PREFIX)/$(if $(LIBDIR),$(LIBDIR),/lib)/$$($(CC) -m64 -print-multi-os-directory);pwd),\\\n+                 $(if $(is_native_32_bit),$(shell cd $(DESTDIR)/$(PREFIX)/$(if $(LIBDIR),$(LIBDIR),/lib)/$$($(CC) -m32 -print-multi-os-directory);pwd),$(LIBDIR))\\\n+                  )\\\n+                )\\\n+               )\n+export SYSCONFDIR:=$(if $(SYSCONFDIR),$(SYSCONFDIR),$(DESTDIR)/$(PREFIX)/../etc)\n+export DATAROOTDIR:=$(if $(DATAROOTDIR),$(DATAROOTDIR),$(DESTDIR)/$(PREFIX)/share)\n+export LIBEXECDIR:=$(if $(LIBEXECDIR),$(LIBEXECDIR),$(DESTDIR)/$(PREFIX)/libexec)\n+export MANDIR:=$(if $(MANDIR),$(MANDIR),$(DATAROOTDIR)/man)\n+export INFODIR:=$(if $(INFODIR),$(INFODIR),$(DATAROOTDIR)/info)\n+", "creation_time": "2011-04-26T18:06:23Z", "author": "jason.vas.dias@gmail.com", "time": "2011-04-26T18:06:23Z", "is_private": false, "attachment_id": null}, {"time": "2011-04-26T18:07:59Z", "is_private": false, "attachment_id": 528357, "creator": "jason.vas.dias@gmail.com", "tags": [], "count": 15, "bug_id": 652807, "id": 5432382, "raw_text": "", "creation_time": "2011-04-26T18:07:59Z", "text": "Created attachment 528357\npatch against src/client.mk to export configure environment", "author": "jason.vas.dias@gmail.com"}, {"attachment_id": null, "author": "benjamin@smedbergs.us", "id": 5432390, "raw_text": "If you exported the variables into the make environment, they would still be exported. This patch doesn't solve your problem, from what I can tell.", "is_private": false, "creation_time": "2011-04-26T18:11:52Z", "text": "If you exported the variables into the make environment, they would still be exported. This patch doesn't solve your problem, from what I can tell.", "tags": [], "count": 16, "time": "2011-04-26T18:11:52Z", "creator": "benjamin@smedbergs.us", "bug_id": 652807}, {"author": "jason.vas.dias@gmail.com", "attachment_id": 528361, "bug_id": 652807, "time": "2011-04-26T18:15:31Z", "tags": [], "count": 17, "creator": "jason.vas.dias@gmail.com", "raw_text": "better version: only set libdir to multi-os-directory if actually using gcc", "id": 5432406, "text": "Created attachment 528361\npatch against src/client.mk to export configure environment\n\nbetter version: only set libdir to multi-os-directory if actually using gcc", "is_private": false, "creation_time": "2011-04-26T18:15:31Z"}, {"author": "jason.vas.dias@gmail.com", "raw_text": "RE: comment #16 : \nbut one cannot have \n  'exported the variables into the make environment'\nwithout some kind of patch unless you use 'make -e' .\nI cannot fully test this yet as the firefox build\n(with my modified autoconf.mk.in and packager.mk)\nis still in progress, but I believe the latest version\nof the patch would solve this problem.", "id": 5432419, "text": "RE: comment #16 : \nbut one cannot have \n  'exported the variables into the make environment'\nwithout some kind of patch unless you use 'make -e' .\nI cannot fully test this yet as the firefox build\n(with my modified autoconf.mk.in and packager.mk)\nis still in progress, but I believe the latest version\nof the patch would solve this problem.", "creation_time": "2011-04-26T18:19:04Z", "bug_id": 652807, "count": 18, "creator": "jason.vas.dias@gmail.com", "tags": [], "attachment_id": null, "is_private": false, "time": "2011-04-26T18:19:04Z"}, {"author": "benjamin@smedbergs.us", "bug_id": 652807, "tags": [], "creator": "benjamin@smedbergs.us", "count": 19, "raw_text": "Your shell exports them (that's what you said in comment 0). They should still be present in configure without make being involved.", "id": 5432466, "text": "Your shell exports them (that's what you said in comment 0). They should still be present in configure without make being involved.", "creation_time": "2011-04-26T18:30:26Z", "attachment_id": null, "time": "2011-04-26T18:30:26Z", "is_private": false}, {"time": "2011-04-26T22:05:00Z", "is_private": false, "attachment_id": null, "bug_id": 652807, "count": 20, "creator": "jason.vas.dias@gmail.com", "tags": [], "text": "$ echo -e 'CXX=c++\\nall:\\n\\tCXX is: $$CXX\\n' > t652807.mk\n$ CXX=g++ make -f t652807.mk\necho CXX is: $CXX\nCXX is: c++\n\n$ echo -e 'export CXX:=$(if $(CXX),$(CXX),c++)\\nall:\\n\\techo CXX is: $$CXX\\n' > t652807-2.mk\n$ CXX=g++ make -f t652807-2.mk\necho CXX is: $CXX\nCXX is: g++\n\nQED", "creation_time": "2011-04-26T22:05:00Z", "raw_text": "$ echo -e 'CXX=c++\\nall:\\n\\tCXX is: $$CXX\\n' > t652807.mk\n$ CXX=g++ make -f t652807.mk\necho CXX is: $CXX\nCXX is: c++\n\n$ echo -e 'export CXX:=$(if $(CXX),$(CXX),c++)\\nall:\\n\\techo CXX is: $$CXX\\n' > t652807-2.mk\n$ CXX=g++ make -f t652807-2.mk\necho CXX is: $CXX\nCXX is: g++\n\nQED", "id": 5433197, "author": "jason.vas.dias@gmail.com"}, {"attachment_id": null, "author": "jason.vas.dias@gmail.com", "time": "2011-04-26T22:06:36Z", "count": 21, "tags": [], "creator": "jason.vas.dias@gmail.com", "bug_id": 652807, "id": 5433202, "raw_text": "oops:\n$ echo -e 'CXX=c++\\nall:\\n\\techo CXX is: $$CXX\\n' > t652807.mk\n$ CXX=g++ make -f t652807.mk\necho CXX is: $CXX\nCXX is: c++\n\n$ echo -e 'export CXX:=$(if $(CXX),$(CXX),c++)\\nall:\\n\\techo CXX is: $$CXX\\n' >\nt652807-2.mk\n$ CXX=g++ make -f t652807-2.mk\necho CXX is: $CXX\nCXX is: g++\n\nQED", "creation_time": "2011-04-26T22:06:36Z", "is_private": false, "text": "oops:\n$ echo -e 'CXX=c++\\nall:\\n\\techo CXX is: $$CXX\\n' > t652807.mk\n$ CXX=g++ make -f t652807.mk\necho CXX is: $CXX\nCXX is: c++\n\n$ echo -e 'export CXX:=$(if $(CXX),$(CXX),c++)\\nall:\\n\\techo CXX is: $$CXX\\n' >\nt652807-2.mk\n$ CXX=g++ make -f t652807-2.mk\necho CXX is: $CXX\nCXX is: g++\n\nQED"}, {"attachment_id": null, "author": "jason.vas.dias@gmail.com", "tags": [], "creator": "jason.vas.dias@gmail.com", "time": "2011-04-26T22:21:16Z", "count": 22, "bug_id": 652807, "is_private": false, "creation_time": "2011-04-26T22:21:16Z", "text": "see, $CXX is defined as a 'deferred evaluation' variable by the\ndefault autoconf.mk.in to be 'c++' ; either autoconf.mk.in must\nbe changed to 'export CXX:=$(if $(CXX),$(CXX),c++)' OR\nclient.mk must be changed to do the same for $CXX to\nbe inherited from the external shell environment of\n\"make -f client.mk\", which runs \"configure\".", "id": 5433271, "raw_text": "see, $CXX is defined as a 'deferred evaluation' variable by the\ndefault autoconf.mk.in to be 'c++' ; either autoconf.mk.in must\nbe changed to 'export CXX:=$(if $(CXX),$(CXX),c++)' OR\nclient.mk must be changed to do the same for $CXX to\nbe inherited from the external shell environment of\n\"make -f client.mk\", which runs \"configure\"."}, {"time": "2011-04-26T22:32:52Z", "is_private": false, "attachment_id": null, "bug_id": 652807, "creator": "jason.vas.dias@gmail.com", "tags": [], "count": 23, "raw_text": "incidentally, I think this is also why $OBJDIR is not being inherited from\nthe environment either, as for bug #648701 :\n[reply] [-] Comment 56 Paul Biggar 2011-04-18 11:05:25 PDT\n\n(In reply to comment #54)\n> RE:  Comment #50:  OK, so autogen.sh should be just:\n> \n> #/bin/bash\n> export SRCDIR=${0%/*}\n> export OBJDIR=`pwd`\n> pushd $SRCDIR && autoconf-2.13 && ${SRCDIR}/configure $* && popd\n> \n> ??\n\nI would use `make -f client.mk configure-files` instead of calling autoconf.\n\nAnd now I see why you wanted to create a .mozconfig file: so that `make -f\nclient.mk configure` would get it's values from somewhere. Hmmm. Is it\nabsolutely idiomatic that autogen.sh does the configure? It would be a lot\nsimpler if not.\n\n\n\nSee, the \"simplest form of autogen.sh\", ie. just :\n\n   #  autoconf-2.13; ./configure\n\ndoes NOT inherit $OBJDIR into client.mk and does NOT 'mkdir $OBJDIR; cd $OBJDIR'.\n\nI think if $OBJDIR was correctly inherited from the external environment\ninto client.mk then configure would work as expected here.", "id": 5433317, "text": "incidentally, I think this is also why $OBJDIR is not being inherited from\nthe environment either, as for bug #648701 :\n[reply] [-] Comment 56 Paul Biggar 2011-04-18 11:05:25 PDT\n\n(In reply to comment #54)\n> RE:  Comment #50:  OK, so autogen.sh should be just:\n> \n> #/bin/bash\n> export SRCDIR=${0%/*}\n> export OBJDIR=`pwd`\n> pushd $SRCDIR && autoconf-2.13 && ${SRCDIR}/configure $* && popd\n> \n> ??\n\nI would use `make -f client.mk configure-files` instead of calling autoconf.\n\nAnd now I see why you wanted to create a .mozconfig file: so that `make -f\nclient.mk configure` would get it's values from somewhere. Hmmm. Is it\nabsolutely idiomatic that autogen.sh does the configure? It would be a lot\nsimpler if not.\n\n\n\nSee, the \"simplest form of autogen.sh\", ie. just :\n\n   #  autoconf-2.13; ./configure\n\ndoes NOT inherit $OBJDIR into client.mk and does NOT 'mkdir $OBJDIR; cd $OBJDIR'.\n\nI think if $OBJDIR was correctly inherited from the external environment\ninto client.mk then configure would work as expected here.", "creation_time": "2011-04-26T22:32:52Z", "author": "jason.vas.dias@gmail.com"}, {"author": "benjamin@smedbergs.us", "bug_id": 652807, "count": 24, "creator": "benjamin@smedbergs.us", "tags": [], "raw_text": "OBJDIR is not a configure variable (at least currently), so that is entirely unrelated.\n\nThis discussion has totally run off the rails, because you're mixing up makefile variables in client.mk, environment variables in configure, and makefile variables in the build (autoconf.mk/rules.mk).\n\nconfigure should (and I believe it already does) honor environment variables for CC/CXX/CFLAGS/etc. If it doesn't, that's a bug we should fix. If you think there's a bug in this regard, please provide very specific STR.\n\nclient.mk also happens to honor environment variables because it doesn't mess with the environment, so they should just end up in configure by default.\n\nThe main build (make, after configure has run) should *not* honor environment variables except those stored in autoconf.mk by configure, which is why the patch in comment 0 is incorrect.", "id": 5434595, "text": "OBJDIR is not a configure variable (at least currently), so that is entirely unrelated.\n\nThis discussion has totally run off the rails, because you're mixing up makefile variables in client.mk, environment variables in configure, and makefile variables in the build (autoconf.mk/rules.mk).\n\nconfigure should (and I believe it already does) honor environment variables for CC/CXX/CFLAGS/etc. If it doesn't, that's a bug we should fix. If you think there's a bug in this regard, please provide very specific STR.\n\nclient.mk also happens to honor environment variables because it doesn't mess with the environment, so they should just end up in configure by default.\n\nThe main build (make, after configure has run) should *not* honor environment variables except those stored in autoconf.mk by configure, which is why the patch in comment 0 is incorrect.", "creation_time": "2011-04-27T14:07:03Z", "attachment_id": null, "time": "2011-04-27T14:07:03Z", "is_private": false}, {"time": "2011-04-27T16:19:36Z", "is_private": false, "attachment_id": null, "creator": "jason.vas.dias@gmail.com", "tags": [], "count": 25, "bug_id": 652807, "id": 5434861, "raw_text": "\n\nRE: > configure should (and I believe it already does) honor environment \n    > variables for CC/CXX/CFLAGS/etc. If it doesn't, that's a bug we should \n    > fix. If you think there's a bug in this regard, please provide very\n    > specific STR.\n\nYes, neither configure nor client.mk honor $CC, $CXX or $CXXFLAGS, or $LDFLAGS -\n -  that is all this bug is about and has been the subject of every comment -\ndon't see what is \"off the rails\" about anything here - bug #648701 is about\nuser confusion caused by the configure and client.mk scripts to honor\nautoconf variables such as $OBJDIR in the expected way, so I believe that\nis relevant to this bug too.\n\nWhat is \"STR\" -  the strings in the source files that need changing ? \nthose are shown in the patches above, but I'll explain why again,\nwith, for instance \"CXX\" .\n\nNeither configure nor client.mk can pass the value of the environment variable\n\"CXX\" from the external invoking shell to a sub-make or rule command, because\n\"CXX\" is defined to be a deferred evaluation variable at autoconf.mk.in \n@ line 377 :\n\"\n# Temp hack.  It is not my intention to leave this crap in here for ever.\n# Im talking to fur right now to solve the problem without introducing \n# NS_USE_NATIVE to the build system -ramiro.\nNS_USE_NATIVE = @NS_USE_NATIVE@\n\nCC\t\t    = @CC@\nCXX\t\t    = @CXX@\n\nCC_VERSION\t= @CC_VERSION@\nCXX_VERSION\t= @CXX_VERSION@\n\nGNU_AS\t\t= @GNU_AS@\nGNU_LD\t\t= @GNU_LD@\nGNU_CC\t\t= @GNU_CC@\nGNU_CXX\t\t= @GNU_CXX@\n\"\n\nwhat gets substituted for \"@CXX@\" here is \"c++\" , NOT the \"/usr/bin/g++ -m32\"\nI had defined in the environment of the shell from which I ran \n\"make -f client.mk\" .\n\nSo currently EVERY setting for $VAR that you want to differ from the default\n@VAR@ value written to autoconf.mk must be a make override on the command line.\n\nAll I'm suggesting is allowing users to specify values for variables that\nget written to autoconf.mk in the environment of the invoking shell, \nas configure does when run outside the client.mk environment, writing\nvalues of variables such as $CC, $CXX, $CFLAGS, $CXXFLAGS, and $LDFLAGS\nto config.sh .\n\nSo either the first patch must be applied :\no autoconf.mk.in must read values to be written to autoconf.mk from the \n  environment\nor something like the second patch must be applied:\no if the user has specified a value for one of the autoconf inherited\n  variables, export that value to sub-makes and rule commands so\n  that , in this case, when \"configure\" is run those values are \n  in the environment and override default settings for \"@VAR@\" variables\n  so would also get written to autoconf.mk\n\nNowhere above did I suggest that after configure, the external shell environment should have any effect on anything. There just needs to\nbe a way of getting values such as \"$CXX\" and \"$CC\" from the\nshell running \"make -f client.mk\" into $OBJDIR/config/autoconf.mk - there\nisn't currently.", "creation_time": "2011-04-27T16:19:36Z", "text": "\n\nRE: > configure should (and I believe it already does) honor environment \n    > variables for CC/CXX/CFLAGS/etc. If it doesn't, that's a bug we should \n    > fix. If you think there's a bug in this regard, please provide very\n    > specific STR.\n\nYes, neither configure nor client.mk honor $CC, $CXX or $CXXFLAGS, or $LDFLAGS -\n -  that is all this bug is about and has been the subject of every comment -\ndon't see what is \"off the rails\" about anything here - bug #648701 is about\nuser confusion caused by the configure and client.mk scripts to honor\nautoconf variables such as $OBJDIR in the expected way, so I believe that\nis relevant to this bug too.\n\nWhat is \"STR\" -  the strings in the source files that need changing ? \nthose are shown in the patches above, but I'll explain why again,\nwith, for instance \"CXX\" .\n\nNeither configure nor client.mk can pass the value of the environment variable\n\"CXX\" from the external invoking shell to a sub-make or rule command, because\n\"CXX\" is defined to be a deferred evaluation variable at autoconf.mk.in \n@ line 377 :\n\"\n# Temp hack.  It is not my intention to leave this crap in here for ever.\n# Im talking to fur right now to solve the problem without introducing \n# NS_USE_NATIVE to the build system -ramiro.\nNS_USE_NATIVE = @NS_USE_NATIVE@\n\nCC\t\t    = @CC@\nCXX\t\t    = @CXX@\n\nCC_VERSION\t= @CC_VERSION@\nCXX_VERSION\t= @CXX_VERSION@\n\nGNU_AS\t\t= @GNU_AS@\nGNU_LD\t\t= @GNU_LD@\nGNU_CC\t\t= @GNU_CC@\nGNU_CXX\t\t= @GNU_CXX@\n\"\n\nwhat gets substituted for \"@CXX@\" here is \"c++\" , NOT the \"/usr/bin/g++ -m32\"\nI had defined in the environment of the shell from which I ran \n\"make -f client.mk\" .\n\nSo currently EVERY setting for $VAR that you want to differ from the default\n@VAR@ value written to autoconf.mk must be a make override on the command line.\n\nAll I'm suggesting is allowing users to specify values for variables that\nget written to autoconf.mk in the environment of the invoking shell, \nas configure does when run outside the client.mk environment, writing\nvalues of variables such as $CC, $CXX, $CFLAGS, $CXXFLAGS, and $LDFLAGS\nto config.sh .\n\nSo either the first patch must be applied :\no autoconf.mk.in must read values to be written to autoconf.mk from the \n  environment\nor something like the second patch must be applied:\no if the user has specified a value for one of the autoconf inherited\n  variables, export that value to sub-makes and rule commands so\n  that , in this case, when \"configure\" is run those values are \n  in the environment and override default settings for \"@VAR@\" variables\n  so would also get written to autoconf.mk\n\nNowhere above did I suggest that after configure, the external shell environment should have any effect on anything. There just needs to\nbe a way of getting values such as \"$CXX\" and \"$CC\" from the\nshell running \"make -f client.mk\" into $OBJDIR/config/autoconf.mk - there\nisn't currently.", "author": "jason.vas.dias@gmail.com"}, {"is_private": false, "time": "2011-04-27T16:29:26Z", "attachment_id": null, "creation_time": "2011-04-27T16:29:26Z", "text": "Jason, configure is what generates autoconf.mk. It has rules which set CXX based on the environment. I need you to add debugging printfs to configure to figure out why CXX isn't getting the value you expect. It works for most people.\n\n(STR means \"steps to reproduce\").", "id": 5434890, "raw_text": "Jason, configure is what generates autoconf.mk. It has rules which set CXX based on the environment. I need you to add debugging printfs to configure to figure out why CXX isn't getting the value you expect. It works for most people.\n\n(STR means \"steps to reproduce\").", "creator": "benjamin@smedbergs.us", "count": 26, "tags": [], "bug_id": 652807, "author": "benjamin@smedbergs.us"}, {"author": "jason.vas.dias@gmail.com", "text": "Sorry I can't fully test or investigate this right now -\nafter resolving various difficulties with the 32-bit\ninstallations of openssl, openssh, curl, libssh2 and dbus that\ncaused my 32-bit xulrunner build to bomb out, it is now \nproceeding again . Once complete, I'll run 'bash -xf' / strace\nto pin down exactly why variables such as $CXX are not being \ninherited by the client.mk environment, but I'm pretty certain\nit is because they are not declared as 'export ' variables in client.mk.", "creation_time": "2011-04-27T17:13:47Z", "raw_text": "Sorry I can't fully test or investigate this right now -\nafter resolving various difficulties with the 32-bit\ninstallations of openssl, openssh, curl, libssh2 and dbus that\ncaused my 32-bit xulrunner build to bomb out, it is now \nproceeding again . Once complete, I'll run 'bash -xf' / strace\nto pin down exactly why variables such as $CXX are not being \ninherited by the client.mk environment, but I'm pretty certain\nit is because they are not declared as 'export ' variables in client.mk.", "id": 5435026, "bug_id": 652807, "creator": "jason.vas.dias@gmail.com", "count": 27, "tags": [], "attachment_id": null, "is_private": false, "time": "2011-04-27T17:13:47Z"}, {"author": "bique.alexandre@gmail.com", "count": 28, "tags": [], "creator": "bique.alexandre@gmail.com", "bug_id": 652807, "creation_time": "2014-12-16T15:44:54Z", "text": "I can confirm that a lot of targets do not honor LDFLAGS.", "id": 9699722, "raw_text": "I can confirm that a lot of targets do not honor LDFLAGS.", "attachment_id": null, "time": "2014-12-16T15:44:54Z", "is_private": false}]}}, "comments": {}}