{"comments": {}, "bugs": {"638235": {"comments": [{"creator": "dmandelin@mozilla.com", "author": "dmandelin@mozilla.com", "time": "2011-03-02T22:11:40Z", "bug_id": 638235, "count": 0, "text": "There are currently 7 tests. Compared to Chrome 10, we are faster on test 5, but slower on the rest (times in seconds):\n\n test    Fx4      Cr10\n 1     2.009     0.794\n 2     7.989     3.198\n 3     5.722     3.716\n 4     0.199     0.088\n 5     0.1       0.351\n 6     0.821     0.771\n 7     0.201     0.057\n\n      17.04      8.98\n\nAggregation is by sum, so test 2 is the biggest problem right now.", "id": 5316581, "attachment_id": null, "creation_time": "2011-03-02T22:11:40Z", "tags": [], "is_private": false, "raw_text": "There are currently 7 tests. Compared to Chrome 10, we are faster on test 5, but slower on the rest (times in seconds):\n\n test    Fx4      Cr10\n 1     2.009     0.794\n 2     7.989     3.198\n 3     5.722     3.716\n 4     0.199     0.088\n 5     0.1       0.351\n 6     0.821     0.771\n 7     0.201     0.057\n\n      17.04      8.98\n\nAggregation is by sum, so test 2 is the biggest problem right now."}, {"text": "For what it's worth, I've run this test before (in an earlier incarnation that included window.open and window.status).  Except for maybe test 7, it's not js-bound as I recall.\n\nIn particular, test 1 and test 2 are measuring across timeouts; simply dropping my timeout clamp from 10ms to 4ms drops my runtimes by a factor of 2.5, to basically the same as Chrome.  Dropping it to 1ms drops them by another factor of 3.  So these tests are completely useless and I wouldn't worry about them too much.\n\nTest 3, as I recall, is a more or less fair DOM + painting test, sorta, testing an operation whose performance doesn't matter much.\n\nTest 4 might need measuring.\n\nTest 5 is all DOM and CSS, last I checked.  So is test 6.  Can't hurt to double-check, I guess.", "attachment_id": null, "id": 5316628, "creation_time": "2011-03-02T22:24:00Z", "tags": [], "is_private": false, "raw_text": "For what it's worth, I've run this test before (in an earlier incarnation that included window.open and window.status).  Except for maybe test 7, it's not js-bound as I recall.\n\nIn particular, test 1 and test 2 are measuring across timeouts; simply dropping my timeout clamp from 10ms to 4ms drops my runtimes by a factor of 2.5, to basically the same as Chrome.  Dropping it to 1ms drops them by another factor of 3.  So these tests are completely useless and I wouldn't worry about them too much.\n\nTest 3, as I recall, is a more or less fair DOM + painting test, sorta, testing an operation whose performance doesn't matter much.\n\nTest 4 might need measuring.\n\nTest 5 is all DOM and CSS, last I checked.  So is test 6.  Can't hurt to double-check, I guess.", "creator": "bzbarsky@mit.edu", "author": "bzbarsky@mit.edu", "time": "2011-03-02T22:24:00Z", "bug_id": 638235, "count": 1}, {"raw_text": "That was quick. :-) Do you think it's worth getting in touch with the creators about the timeout issue, or should we just wait until ours gets fixed?", "tags": [], "is_private": false, "creation_time": "2011-03-02T22:26:02Z", "text": "That was quick. :-) Do you think it's worth getting in touch with the creators about the timeout issue, or should we just wait until ours gets fixed?", "id": 5316641, "attachment_id": null, "count": 2, "bug_id": 638235, "time": "2011-03-02T22:26:02Z", "author": "dmandelin@mozilla.com", "creator": "dmandelin@mozilla.com"}, {"creator": "bzbarsky@mit.edu", "author": "bzbarsky@mit.edu", "bug_id": 638235, "count": 3, "time": "2011-03-02T22:42:24Z", "creation_time": "2011-03-02T22:42:24Z", "attachment_id": null, "id": 5316698, "text": "I mailed whoever was maintaining this test about some issues back in 2003 several times, and was summarily ignored...\n\nWe could try contacting these people, especially if they're different.  For the sake of all the wasted CPU cycles if nothing else. ;)", "raw_text": "I mailed whoever was maintaining this test about some issues back in 2003 several times, and was summarily ignored...\n\nWe could try contacting these people, especially if they're different.  For the sake of all the wasted CPU cycles if nothing else. ;)", "is_private": false, "tags": []}, {"author": "bzbarsky@mit.edu", "attachment_id": 519964, "id": 5351290, "text": "Created attachment 519964\nLocally runnable version with no cleanup for your delectation", "creator": "bzbarsky@mit.edu", "creation_time": "2011-03-17T18:20:48Z", "is_private": false, "tags": [], "time": "2011-03-17T18:20:48Z", "count": 4, "raw_text": "", "bug_id": 638235}, {"author": "bzbarsky@mit.edu", "text": "Created attachment 519967\nBetter locally runnable", "creator": "bzbarsky@mit.edu", "id": 5351302, "attachment_id": 519967, "creation_time": "2011-03-17T18:25:56Z", "tags": [], "is_private": false, "time": "2011-03-17T18:25:56Z", "count": 5, "bug_id": 638235, "raw_text": ""}, {"bug_id": 638235, "raw_text": "OK, so comparing times for Firefox with timeout clamp at 4ms and Chrome 10:\n \n Test      Fx        Chrome\n   1     1.052       0.948\n   2     3.856       3.535\n   3    10.378       4.299\n   4     0.239       0.15\n   5     0.16        0.395\n   6     0.909       0.888\n   7     0.055       0.056\n\nSome data on tests 1, 2, 3, 4, 6.", "count": 6, "time": "2011-03-17T18:31:21Z", "tags": [], "is_private": false, "creation_time": "2011-03-17T18:31:21Z", "text": "OK, so comparing times for Firefox with timeout clamp at 4ms and Chrome 10:\n \n Test      Fx        Chrome\n   1     1.052       0.948\n   2     3.856       3.535\n   3    10.378       4.299\n   4     0.239       0.15\n   5     0.16        0.395\n   6     0.909       0.888\n   7     0.055       0.056\n\nSome data on tests 1, 2, 3, 4, 6.", "creator": "bzbarsky@mit.edu", "attachment_id": null, "id": 5351321, "author": "bzbarsky@mit.edu"}, {"time": "2011-03-17T18:31:30Z", "count": 7, "bug_id": 638235, "author": "bzbarsky@mit.edu", "creator": "bzbarsky@mit.edu", "is_private": false, "tags": [], "raw_text": "Er, some data coming up.", "attachment_id": null, "id": 5351322, "text": "Er, some data coming up.", "creation_time": "2011-03-17T18:31:30Z"}, {"creation_time": "2011-03-17T18:53:54Z", "text": "test 1:\n\n30% of the time is running the script that's triggered by the timer firing on the string (!) that was passed to setTimeout.  The time there is almost entirely under js::mjit::stubs::SetName calling js::proxy_SetProperty, calling JSWrapper::set, etc.  The vast majority of this is ending up under xpconnect, so this is the window.status set the page does.  I wonder whether we should quickstub that.. ;)\n\n65% of the time is painting.  Some of this will get better with painting/invalidation off the refresh driver, but I don't quite understand why we end up with the ridiculously deep stacks we get here for BildDisplayListForStackingContext, with lots of scrollframes and table stuff on the stack.  :(", "id": 5351416, "attachment_id": null, "raw_text": "test 1:\n\n30% of the time is running the script that's triggered by the timer firing on the string (!) that was passed to setTimeout.  The time there is almost entirely under js::mjit::stubs::SetName calling js::proxy_SetProperty, calling JSWrapper::set, etc.  The vast majority of this is ending up under xpconnect, so this is the window.status set the page does.  I wonder whether we should quickstub that.. ;)\n\n65% of the time is painting.  Some of this will get better with painting/invalidation off the refresh driver, but I don't quite understand why we end up with the ridiculously deep stacks we get here for BildDisplayListForStackingContext, with lots of scrollframes and table stuff on the stack.  :(", "tags": [], "is_private": false, "author": "bzbarsky@mit.edu", "creator": "bzbarsky@mit.edu", "count": 8, "bug_id": 638235, "time": "2011-03-17T18:53:54Z"}, {"count": 9, "bug_id": 638235, "raw_text": "Test 2:\n\n35% reflow before painting \n39% painting\n 5% running the script it's ostensibly testing\n\nlots of event loop overhead here.\n\nAgain, this will be helped by invalidation off the refresh driver.", "tags": [], "is_private": false, "time": "2011-03-17T18:59:59Z", "creation_time": "2011-03-17T18:59:59Z", "author": "bzbarsky@mit.edu", "creator": "bzbarsky@mit.edu", "text": "Test 2:\n\n35% reflow before painting \n39% painting\n 5% running the script it's ostensibly testing\n\nlots of event loop overhead here.\n\nAgain, this will be helped by invalidation off the refresh driver.", "attachment_id": null, "id": 5351438}, {"text": "Test 3:\n\n17% painting\n16% event loop gunk\n 3% running JS\n 6% attribute-setting code in DOM\n 3% CanLoadImage security check\n 5% Converting strings to nsIURI objects\n 8% imgLoader::LoadImage gunk\n13% imgRequestProxy::OnStopRequest calling nsDocLoader::OnStopRequest which does\n    stupid stuff.  Bug 642551 filed.\n16% image loads completing and calling Invalidate() from\n    nsImageFrame::OnStopDecode.  Again, bug 598482 might help.\n 6% dispatching image load events.", "creator": "bzbarsky@mit.edu", "id": 5351541, "attachment_id": null, "author": "bzbarsky@mit.edu", "creation_time": "2011-03-17T19:28:16Z", "time": "2011-03-17T19:28:16Z", "tags": [], "is_private": false, "bug_id": 638235, "raw_text": "Test 3:\n\n17% painting\n16% event loop gunk\n 3% running JS\n 6% attribute-setting code in DOM\n 3% CanLoadImage security check\n 5% Converting strings to nsIURI objects\n 8% imgLoader::LoadImage gunk\n13% imgRequestProxy::OnStopRequest calling nsDocLoader::OnStopRequest which does\n    stupid stuff.  Bug 642551 filed.\n16% image loads completing and calling Invalidate() from\n    nsImageFrame::OnStopDecode.  Again, bug 598482 might help.\n 6% dispatching image load events.", "count": 10}, {"count": 11, "bug_id": 638235, "time": "2011-03-17T19:47:44Z", "author": "bzbarsky@mit.edu", "creator": "bzbarsky@mit.edu", "raw_text": "Test 4:\n\n12% reflow before painting\n24% painting\n41% spellchecking (which chrome may or may not be running on this text before the\n    test finishes, depending on their setup)\n 8% what looks like a timer triggering the session save part of session restore\n 6% GC\n 3% running the JS, setting the values of the textareas, etc.", "tags": [], "is_private": false, "creation_time": "2011-03-17T19:47:44Z", "text": "Test 4:\n\n12% reflow before painting\n24% painting\n41% spellchecking (which chrome may or may not be running on this text before the\n    test finishes, depending on their setup)\n 8% what looks like a timer triggering the session save part of session restore\n 6% GC\n 3% running the JS, setting the values of the textareas, etc.", "id": 5351613, "attachment_id": null}, {"time": "2011-03-18T01:38:48Z", "bug_id": 638235, "count": 12, "creator": "bzbarsky@mit.edu", "author": "bzbarsky@mit.edu", "tags": [], "is_private": false, "raw_text": "Test 6:\n\n38% painting\n 3% cycle collection\n 3% session restore stuff\n15% restyle processing (ReResolveStyleContext, CalcStyleDifference,\n    ResolveStyleFor, etc)\n 7% reflow\n10% setting inline style.\n 5% getting inline style\n 3% eval() crud (more on this below).\n 3% other JS\n\nThe eval comes from this gem:\n\n  var thisspan=eval(\"document.getElementById('span'+i).style\")\n\nthat runs for every piece of text for every move.\n\nI looked at tests 5 and 7 briefly too.  Test 5 performance is dominated by the innerHTML setter actually parsing the HTML for us, and a bit of GC.  Test 7 seems to be 31% session restore saving the session, 12% GC, and most of the remainder js_Date, date_getDay, js_ConcatStrings, js_StringToNumber, that sort of thing.", "text": "Test 6:\n\n38% painting\n 3% cycle collection\n 3% session restore stuff\n15% restyle processing (ReResolveStyleContext, CalcStyleDifference,\n    ResolveStyleFor, etc)\n 7% reflow\n10% setting inline style.\n 5% getting inline style\n 3% eval() crud (more on this below).\n 3% other JS\n\nThe eval comes from this gem:\n\n  var thisspan=eval(\"document.getElementById('span'+i).style\")\n\nthat runs for every piece of text for every move.\n\nI looked at tests 5 and 7 briefly too.  Test 5 performance is dominated by the innerHTML setter actually parsing the HTML for us, and a bit of GC.  Test 7 seems to be 31% session restore saving the session, 12% GC, and most of the remainder js_Date, date_getDay, js_ConcatStrings, js_StringToNumber, that sort of thing.", "attachment_id": null, "id": 5352530, "creation_time": "2011-03-18T01:38:48Z"}, {"raw_text": "Test 3 is ridiculously slow on Nightly!\nThe others are fine.", "is_private": false, "tags": [], "creation_time": "2013-11-12T16:05:29Z", "attachment_id": null, "id": 8071048, "text": "Test 3 is ridiculously slow on Nightly!\nThe others are fine.", "count": 13, "bug_id": 638235, "time": "2013-11-12T16:05:29Z", "author": "guijoselito@gmail.com", "creator": "guijoselito@gmail.com"}, {"tags": [], "is_private": false, "time": "2013-11-12T17:33:32Z", "count": 14, "bug_id": 638235, "raw_text": "Ok, tested correctly after the results from others on Mozillazine Forums.\nTEST 3 68.514 sec. (adblock plus + noscript)\nTEST 3 32.135 sec. (only noscript)\nTEST 3 9.216 sec. (without both)\n\nChrome: TEST 3 4.443 sec.", "author": "guijoselito@gmail.com", "creator": "guijoselito@gmail.com", "text": "Ok, tested correctly after the results from others on Mozillazine Forums.\nTEST 3 68.514 sec. (adblock plus + noscript)\nTEST 3 32.135 sec. (only noscript)\nTEST 3 9.216 sec. (without both)\n\nChrome: TEST 3 4.443 sec.", "attachment_id": null, "id": 8071508, "creation_time": "2013-11-12T17:33:32Z"}, {"creation_time": "2013-11-12T19:47:49Z", "attachment_id": null, "id": 8072270, "text": "(In reply to Guilherme Lima from comment #14)\n\n> TEST 3 68.514 sec. (adblock plus + noscript)\n> TEST 3 32.135 sec. (only noscript)\n> TEST 3 9.216 sec. (without both)\n\nAlmost the only thing NoScript and Adblock Plus have in common about this test is being called by CanLoadImage(), with NoScript's implementation usually slightly faster especially for images.\n\n\"Test 3 replaces 1500 images as fast as possible. It repeats the procedure 60 times.\"\n\nThe result of turning an exclusively C++ almost NOP into a full fledged XPCOM->JavaScript call possibly doing a lot of regular expressions matching, and repeating this call 90000 times, is surprisingly fast IMHO.", "creator": "g.maone@informaction.com", "author": "g.maone@informaction.com", "raw_text": "(In reply to Guilherme Lima from comment #14)\n\n> TEST 3 68.514 sec. (adblock plus + noscript)\n> TEST 3 32.135 sec. (only noscript)\n> TEST 3 9.216 sec. (without both)\n\nAlmost the only thing NoScript and Adblock Plus have in common about this test is being called by CanLoadImage(), with NoScript's implementation usually slightly faster especially for images.\n\n\"Test 3 replaces 1500 images as fast as possible. It repeats the procedure 60 times.\"\n\nThe result of turning an exclusively C++ almost NOP into a full fledged XPCOM->JavaScript call possibly doing a lot of regular expressions matching, and repeating this call 90000 times, is surprisingly fast IMHO.", "bug_id": 638235, "count": 15, "time": "2013-11-12T19:47:49Z", "is_private": false, "tags": []}, {"raw_text": "Thanks Maone. Probably there's nothing useful to be done here, as it's not something we see on regular websites?\nI see the problem with ABP was filled last year - bug 756805, so I'm removing the needinfo, sorry for bothering.", "is_private": false, "tags": [], "creation_time": "2013-11-12T19:56:42Z", "id": 8072321, "attachment_id": null, "text": "Thanks Maone. Probably there's nothing useful to be done here, as it's not something we see on regular websites?\nI see the problem with ABP was filled last year - bug 756805, so I'm removing the needinfo, sorry for bothering.", "count": 16, "bug_id": 638235, "time": "2013-11-12T19:56:42Z", "author": "guijoselito@gmail.com", "creator": "guijoselito@gmail.com"}]}}}