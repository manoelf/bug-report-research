{"comments": {}, "bugs": {"639485": {"comments": [{"is_private": false, "time": "2011-03-07T15:09:32Z", "author": "cedric@gn.apc.org", "count": 0, "id": 5327120, "creation_time": "2011-03-07T15:09:32Z", "tags": [], "attachment_id": null, "raw_text": "Occasional situations can cause prefs.js to be corrupted or disappear, such as perhaps bug 597329.  In my case, I had a profile stored on a vfat (FAT32) partition, and was performing a folder operation when the OS crashed.  A Windows chkdsk removed an IMAP folder (no loss), and prefs.js, and unfortunately I had set up a few miscellaneous mail and news accounts since the last backup (and restoring the prefs.js on the same profile has caused Thunderbird hanfs).\n\nGiven that so much information that is time-consuming and tedious to recover is stored in a file that's rarely more than 100K, how about storing a copy of the last good prefs.js in the profile folder, and ideally recovering automatically if needed?  Bug 487368 and for Firefox during discussion of bug 364440, but not carried forward.", "creator": "cedric@gn.apc.org", "bug_id": 639485, "text": "Occasional situations can cause prefs.js to be corrupted or disappear, such as perhaps bug 597329.  In my case, I had a profile stored on a vfat (FAT32) partition, and was performing a folder operation when the OS crashed.  A Windows chkdsk removed an IMAP folder (no loss), and prefs.js, and unfortunately I had set up a few miscellaneous mail and news accounts since the last backup (and restoring the prefs.js on the same profile has caused Thunderbird hanfs).\n\nGiven that so much information that is time-consuming and tedious to recover is stored in a file that's rarely more than 100K, how about storing a copy of the last good prefs.js in the profile folder, and ideally recovering automatically if needed?  Bug 487368 and for Firefox during discussion of bug 364440, but not carried forward."}, {"creator": "m-wada@usa.com", "raw_text": "See dependency tree for meta bug 193638 for prefs.js corruption issues.\nSee dependency tree for meta bug 123929 for requests of protection from prefs.js corruption.", "text": "See dependency tree for meta bug 193638 for prefs.js corruption issues.\nSee dependency tree for meta bug 123929 for requests of protection from prefs.js corruption.", "count": 1, "time": "2011-03-07T22:41:52Z", "attachment_id": null, "tags": [], "creation_time": "2011-03-07T22:41:52Z", "bug_id": 639485, "is_private": false, "author": "m-wada@usa.com", "id": 5328493}, {"is_private": false, "time": "2011-03-08T00:09:00Z", "author": "m-wada@usa.com", "count": 2, "id": 5328779, "tags": [], "creation_time": "2011-03-08T00:09:00Z", "attachment_id": null, "raw_text": "I also experienced prefs.js loss due to crash of SeaMonkey or Thunderbird a few times during my Win 98/Win-2K era. And, I saw next once on NTFS/Win-XP last year.\n  Close SeaMonkey window. During Seamonkey is executing shutdown process,\n  just after close of SeaMonkey window, I pushed down power-key long time.\n  (i.e. I forced immediate power off of PC, instead of suspend of Win.    )\n  (As I set config.trim_on_minimize=true for Sm, shutdown of SM takes long.)\n  Upon next power on, CHKDSK process run, and prefs.js was removed from\n  Tb's profile directory once, and prefs.js was recovered.\nIt indicates that prefs.js was generated by rename, but it was incomplete.\n\nThis is very normal phenomenon, because current prefs.js writing is like next;\n  (i)   write data to prefs-1.js\n  (ii)  delete prefs.js\n  (iii) rename prefs-1.js to prefs.js  \n  Above process is called \"safe file writing\" by developers of Mozilla.\nPower failure during (iii) can cause prefs.js loss or corruption. \n\nOn Linux, cache is aggressively used for file writing, then prefs.js corruption frequently occurred during step (i), so FLUSH was issued after (i) to avoid corruption.\nHowever, because (iii) consists of many internal steps of OS's action on file system, power failure, crash of OS etc. during (iii) may produce loss of prefs.js.\nFurther, characteristics of some HDDs for PC like next may produce prefs.js corruption upon power failure.\n  Some HDDs for PC return \"write complete\" when data is written to HDS's\n  write cache, before data is physically written to hard disk platter.\n\nAs seen in meta bug 193638(see dependency tree with \"Show Resolved\"), \"Safe file writing\" drastically reduced prefs.js loss/corruption problem.\nHowever, no one can perfectly protect from prefs.js loss/corruption due to power failure during (iii).\n\nIn Firefox, main problem due to loss/corruption of file was loss of bookmarks.html. So, after transfer of bookmark data to SQLite DB, loss/corruption of file is not so big issue in Firefox.\n\n\"ideally recovering automatically\" is better but I think backup of prefs.js is sufficient for simple PC's application.\n(A) Manual backup by script/batch.\n  Delete prefs.js.bkup-10; \n  Do MM=1 to 9; NN=MM+1; Rename prefs.js.bkup-MM prefs.js.bkup-NN\n  Copy prefs.js prefs.js.bkup-1;\n  Start thunderbird.exe \n(B) Automatic backup by Thunderbird himself.\n  See bug 246722 comment #2, please.\n  The reason of WONTFIX of the bug was \"there is no need for the backups\n  anymore because Bug 250092(=the safe file writing) was fixed\".\n\nPrimitive \"ideally recovering automatically\" example.\n(C) Safer file writing than current.\n(C-1) Write process\n  indicate prefs-new.js is BAD (for example, write 0x00 at offset=0)\n  write data to prefs-new.js, with 0x00 as first byte\n  indicate prefs-new.js is GOOD (for example, replace 0x00 by correct byte)\n  rename prefs.js to prefs-old.js\n  rename prefs-new.js to prefs.js\n  delete prefs-old.js\n(C-2) Restart process\n  If prefs.js only, continue.\n  If prefs-new.js is GOOD, rename prefs-new.js prefs.js, delete prefs-old.js.\n  If prefs-old.js only, rename prefs-old.js prefs.js.\n\ncedric@gn.apc.org, what do you think about best solution for us?", "creator": "m-wada@usa.com", "bug_id": 639485, "text": "I also experienced prefs.js loss due to crash of SeaMonkey or Thunderbird a few times during my Win 98/Win-2K era. And, I saw next once on NTFS/Win-XP last year.\n  Close SeaMonkey window. During Seamonkey is executing shutdown process,\n  just after close of SeaMonkey window, I pushed down power-key long time.\n  (i.e. I forced immediate power off of PC, instead of suspend of Win.    )\n  (As I set config.trim_on_minimize=true for Sm, shutdown of SM takes long.)\n  Upon next power on, CHKDSK process run, and prefs.js was removed from\n  Tb's profile directory once, and prefs.js was recovered.\nIt indicates that prefs.js was generated by rename, but it was incomplete.\n\nThis is very normal phenomenon, because current prefs.js writing is like next;\n  (i)   write data to prefs-1.js\n  (ii)  delete prefs.js\n  (iii) rename prefs-1.js to prefs.js  \n  Above process is called \"safe file writing\" by developers of Mozilla.\nPower failure during (iii) can cause prefs.js loss or corruption. \n\nOn Linux, cache is aggressively used for file writing, then prefs.js corruption frequently occurred during step (i), so FLUSH was issued after (i) to avoid corruption.\nHowever, because (iii) consists of many internal steps of OS's action on file system, power failure, crash of OS etc. during (iii) may produce loss of prefs.js.\nFurther, characteristics of some HDDs for PC like next may produce prefs.js corruption upon power failure.\n  Some HDDs for PC return \"write complete\" when data is written to HDS's\n  write cache, before data is physically written to hard disk platter.\n\nAs seen in meta bug 193638(see dependency tree with \"Show Resolved\"), \"Safe file writing\" drastically reduced prefs.js loss/corruption problem.\nHowever, no one can perfectly protect from prefs.js loss/corruption due to power failure during (iii).\n\nIn Firefox, main problem due to loss/corruption of file was loss of bookmarks.html. So, after transfer of bookmark data to SQLite DB, loss/corruption of file is not so big issue in Firefox.\n\n\"ideally recovering automatically\" is better but I think backup of prefs.js is sufficient for simple PC's application.\n(A) Manual backup by script/batch.\n  Delete prefs.js.bkup-10; \n  Do MM=1 to 9; NN=MM+1; Rename prefs.js.bkup-MM prefs.js.bkup-NN\n  Copy prefs.js prefs.js.bkup-1;\n  Start thunderbird.exe \n(B) Automatic backup by Thunderbird himself.\n  See bug 246722 comment #2, please.\n  The reason of WONTFIX of the bug was \"there is no need for the backups\n  anymore because Bug 250092(=the safe file writing) was fixed\".\n\nPrimitive \"ideally recovering automatically\" example.\n(C) Safer file writing than current.\n(C-1) Write process\n  indicate prefs-new.js is BAD (for example, write 0x00 at offset=0)\n  write data to prefs-new.js, with 0x00 as first byte\n  indicate prefs-new.js is GOOD (for example, replace 0x00 by correct byte)\n  rename prefs.js to prefs-old.js\n  rename prefs-new.js to prefs.js\n  delete prefs-old.js\n(C-2) Restart process\n  If prefs.js only, continue.\n  If prefs-new.js is GOOD, rename prefs-new.js prefs.js, delete prefs-old.js.\n  If prefs-old.js only, rename prefs-old.js prefs.js.\n\ncedric@gn.apc.org, what do you think about best solution for us?"}, {"attachment_id": null, "tags": [], "creation_time": "2011-04-19T21:23:15Z", "bug_id": 639485, "author": "cedric@gn.apc.org", "is_private": false, "id": 5419675, "creator": "cedric@gn.apc.org", "raw_text": "Thanks for the detailed explanation.  I didn't realise there had been so much work on it already.  On the machine I'm using now (the same as with the problems described above), Firefox has a prefs-1.js over a month old as has Thunderbird, presumably from a crash.  How does that affect the safe writing?\n\nI would favour solution (C), as it includes the case I describe, where for whatever reason prefs.js is accidentally deleted or corrupted through a file system error outside Thunderbird.  Provided the delay between (ii) and (iii) is only momentary, I would not think that power loss should cause many failures, but again (c) could recover if there is no prefs.js found.  \n\nLosing a single session's changes is not as bad as losing the file altogether, so I was initially thinking:\n(D) \nOn exit or prefs save:\n(i) copy existing prefs.js to prefs-1.js (possibly repeating for 1..3, possibly depending on timestamp)\n(ii) overwrite prefs.js\nOn launch:\n(i) attempt to load pref.js\n(ii) if file is absent or any syntax error, attempt to load prefs-1.js (or higher number if present)\n\nGiven the existing process and suggestions, however, how about something like:\n(E)\nOn exit or prefs save:\n(i) move prefs-old.js (if present) to prefs-older.js (warn on any disk error)\n(ii) copy prefs.js to prefs-old.js (and ensure file handles are closed and then copy timestamp)\ncontinue as at present:\n(iii) write out to prefs-new.js (with some marker at the end that confirms it is complete).  (truncate it if it is already present)\n(iv) delete prefs.js\n(v) move prefs-new.js to prefs.js\n\nOn launch:\n(i) attempt to load pref.js\n(ii) if file is absent or any syntax error or final marker is not present, attempt to load prefs-old.js in the same way", "text": "Thanks for the detailed explanation.  I didn't realise there had been so much work on it already.  On the machine I'm using now (the same as with the problems described above), Firefox has a prefs-1.js over a month old as has Thunderbird, presumably from a crash.  How does that affect the safe writing?\n\nI would favour solution (C), as it includes the case I describe, where for whatever reason prefs.js is accidentally deleted or corrupted through a file system error outside Thunderbird.  Provided the delay between (ii) and (iii) is only momentary, I would not think that power loss should cause many failures, but again (c) could recover if there is no prefs.js found.  \n\nLosing a single session's changes is not as bad as losing the file altogether, so I was initially thinking:\n(D) \nOn exit or prefs save:\n(i) copy existing prefs.js to prefs-1.js (possibly repeating for 1..3, possibly depending on timestamp)\n(ii) overwrite prefs.js\nOn launch:\n(i) attempt to load pref.js\n(ii) if file is absent or any syntax error, attempt to load prefs-1.js (or higher number if present)\n\nGiven the existing process and suggestions, however, how about something like:\n(E)\nOn exit or prefs save:\n(i) move prefs-old.js (if present) to prefs-older.js (warn on any disk error)\n(ii) copy prefs.js to prefs-old.js (and ensure file handles are closed and then copy timestamp)\ncontinue as at present:\n(iii) write out to prefs-new.js (with some marker at the end that confirms it is complete).  (truncate it if it is already present)\n(iv) delete prefs.js\n(v) move prefs-new.js to prefs.js\n\nOn launch:\n(i) attempt to load pref.js\n(ii) if file is absent or any syntax error or final marker is not present, attempt to load prefs-old.js in the same way", "count": 3, "time": "2011-04-19T21:23:15Z"}, {"tags": [], "creation_time": "2012-02-02T00:51:28Z", "attachment_id": null, "raw_text": "My GOD! This bug (in various forms for different Mozilla products, including Thunderbird) dates back to 2004 at least! What is so freaking hard about simply backing up a file before making a change to it? Any freshman computer science student knows how to encapsulate writes to a file so that it is backed up safely before making changes to it, and how to restore it if and when necessary! How many annoyed users does it take before this bug gets fixed? This should NOT be an enhancement request, this is a serious problem that can lead to major data loss and therefore it is critical that it gets fixed ASAP. Please upgrade the priority on this to Major or Critical.", "creator": "marc@marcchamberlin.com", "bug_id": 639485, "text": "My GOD! This bug (in various forms for different Mozilla products, including Thunderbird) dates back to 2004 at least! What is so freaking hard about simply backing up a file before making a change to it? Any freshman computer science student knows how to encapsulate writes to a file so that it is backed up safely before making changes to it, and how to restore it if and when necessary! How many annoyed users does it take before this bug gets fixed? This should NOT be an enhancement request, this is a serious problem that can lead to major data loss and therefore it is critical that it gets fixed ASAP. Please upgrade the priority on this to Major or Critical.", "is_private": false, "time": "2012-02-02T00:51:28Z", "author": "marc@marcchamberlin.com", "count": 4, "id": 6027530}, {"id": 7134461, "author": "m-wada@usa.com", "is_private": false, "bug_id": 639485, "creation_time": "2013-02-23T02:52:36Z", "tags": [], "attachment_id": null, "time": "2013-02-23T02:52:36Z", "count": 5, "text": "(In reply to Marc Chamberlin from comment #4)\n> My GOD! (snip)\n> this is a serious problem that can lead to major data loss\n> and therefore it is critical that it gets fixed ASAP.\n\nSigh... Shouting by looking string of \"data loss\"...\n\nTry following.\n(1) While Tb is running, \"open prefs.js with write exclusive mode\" by other\n    program such as text editor(except notepad.exe because notepad.exe doesn't\n    lock).\n(2) Do something on Tb\n    => upon each trial of prefs.js update by Tb, prefs-N.js is created.\nThis is because \"prefs.js writing\" currently consists of;\n  (a) write data to prefs-N.js\n  (b) rename prefs-N.js to prefs.js, with requesting to OS \"replace if exists\"\n  Note: Old one was \"open prefs.js with replace mode\", \"write data\", \"close\".\nAnd, on MS Win, (b) is requested to MS Win via single API call.\nSo, potential data loss of prefs.js currently exists only in the single API call execution by OS.\nThe \"single API call\" is pretty popular one and normal request on a file.\n\nBecause \"rename file A to B with replacing A by B if A already exists by OS\" consists of many updates of many directory entries on HDD, problem such as power failure can cause inconsistency among the many many directory entries on HDD.\nSo, \"absolute data loss of a file\" can occur when both \"file related directory data for A on HDD\" and \"file related directory data for B\" are lost or corrupted at mid of OS's updating of many directory entries on HDD.\nThe \"absolute data loss of a file\" can occur on any file if such problem occurs on the file. \n\nBecause probability of such problem is never ZERO or negative value, is surely greater than 1/(+Infinity), problem of \"potential data loss of prefs.js\" surely exists.\nAnd, because (i) (importance of prefs.js)*(probability of such problem on prefs.js) is far greater than (ii) (importance of other than prefs.js)*(probability of such problem on a non-prefs.js file), I also think (i) is never negligible.\n\nHowever, Thunderbird is not a software used on Space Shuttle.\nI believe priority of this bug is far low than other important bugs.", "raw_text": "(In reply to Marc Chamberlin from comment #4)\n> My GOD! (snip)\n> this is a serious problem that can lead to major data loss\n> and therefore it is critical that it gets fixed ASAP.\n\nSigh... Shouting by looking string of \"data loss\"...\n\nTry following.\n(1) While Tb is running, \"open prefs.js with write exclusive mode\" by other\n    program such as text editor(except notepad.exe because notepad.exe doesn't\n    lock).\n(2) Do something on Tb\n    => upon each trial of prefs.js update by Tb, prefs-N.js is created.\nThis is because \"prefs.js writing\" currently consists of;\n  (a) write data to prefs-N.js\n  (b) rename prefs-N.js to prefs.js, with requesting to OS \"replace if exists\"\n  Note: Old one was \"open prefs.js with replace mode\", \"write data\", \"close\".\nAnd, on MS Win, (b) is requested to MS Win via single API call.\nSo, potential data loss of prefs.js currently exists only in the single API call execution by OS.\nThe \"single API call\" is pretty popular one and normal request on a file.\n\nBecause \"rename file A to B with replacing A by B if A already exists by OS\" consists of many updates of many directory entries on HDD, problem such as power failure can cause inconsistency among the many many directory entries on HDD.\nSo, \"absolute data loss of a file\" can occur when both \"file related directory data for A on HDD\" and \"file related directory data for B\" are lost or corrupted at mid of OS's updating of many directory entries on HDD.\nThe \"absolute data loss of a file\" can occur on any file if such problem occurs on the file. \n\nBecause probability of such problem is never ZERO or negative value, is surely greater than 1/(+Infinity), problem of \"potential data loss of prefs.js\" surely exists.\nAnd, because (i) (importance of prefs.js)*(probability of such problem on prefs.js) is far greater than (ii) (importance of other than prefs.js)*(probability of such problem on a non-prefs.js file), I also think (i) is never negligible.\n\nHowever, Thunderbird is not a software used on Space Shuttle.\nI believe priority of this bug is far low than other important bugs.", "creator": "m-wada@usa.com"}, {"attachment_id": null, "tags": [], "creation_time": "2013-02-23T09:54:03Z", "bug_id": 639485, "author": "m-wada@usa.com", "is_private": false, "id": 7134896, "creator": "m-wada@usa.com", "raw_text": "This bug is request of \"backup by Tb\" in case of \"prefs.js loss\" by Tb or someone, in case of \"logical data corruption\" by Tb or someone and so on. i.e. Enhancement request.\nChangigin back to Enhancement.", "text": "This bug is request of \"backup by Tb\" in case of \"prefs.js loss\" by Tb or someone, in case of \"logical data corruption\" by Tb or someone and so on. i.e. Enhancement request.\nChangigin back to Enhancement.", "count": 6, "time": "2013-02-23T09:54:03Z"}, {"count": 7, "time": "2015-06-22T16:37:53Z", "creator": "tylla_at_bugzilla.mozilla.org@tylla.hu", "raw_text": "As a small note I must mention, that while Firefox is really secured by using Mozilla Sync, Thunderbird is really at the mercy of the system running it.\n\nNot that it happens that frequently, but once a year I encounter a \"missing prefs.js\" error - be it Thunderbird or Firefox. And the worst thing is there is no way of finding out what caused the file loss. In a corporate environment you can count on the users using frequently their apps, and reporting every problem almost immediately. But home users tend to sit on the problem (\"it started with this error message for some months, but I thought it will go away with time\" approach) and by the time I get in front of the computer it is impossible to recover.\n\nI would suggest the easiest and almost perfect solution would be - as mentioned above - to rename and keep the old prefs.js file, possibly deleting everything older than the last 10.\nThe automatic detection and recovery of a lost prefs.js situation is not needed - the machine would need some attention anyway if it keeps losing files.", "text": "As a small note I must mention, that while Firefox is really secured by using Mozilla Sync, Thunderbird is really at the mercy of the system running it.\n\nNot that it happens that frequently, but once a year I encounter a \"missing prefs.js\" error - be it Thunderbird or Firefox. And the worst thing is there is no way of finding out what caused the file loss. In a corporate environment you can count on the users using frequently their apps, and reporting every problem almost immediately. But home users tend to sit on the problem (\"it started with this error message for some months, but I thought it will go away with time\" approach) and by the time I get in front of the computer it is impossible to recover.\n\nI would suggest the easiest and almost perfect solution would be - as mentioned above - to rename and keep the old prefs.js file, possibly deleting everything older than the last 10.\nThe automatic detection and recovery of a lost prefs.js situation is not needed - the machine would need some attention anyway if it keeps losing files.", "author": "tylla_at_bugzilla.mozilla.org@tylla.hu", "is_private": false, "id": 10414417, "attachment_id": null, "creation_time": "2015-06-22T16:37:53Z", "tags": [], "bug_id": 639485}, {"text": "Magnus,  this is a very old request for enhancement that seriously affects the product and usability for enough users that it needs a response.  Can it, or some other data integrity/ preservation approach be prioritised for inclusion into Thunderbird next?  Wada's comments from 8 years ago would indicate that a fix the created a backup in case of failure would be achieved with only a modification to the rename and replace if exists API call.", "creator": "unicorn.consulting@gmail.com", "raw_text": "Magnus,  this is a very old request for enhancement that seriously affects the product and usability for enough users that it needs a response.  Can it, or some other data integrity/ preservation approach be prioritised for inclusion into Thunderbird next?  Wada's comments from 8 years ago would indicate that a fix the created a backup in case of failure would be achieved with only a modification to the rename and replace if exists API call.", "count": 8, "time": "2021-03-07T00:55:00Z", "bug_id": 639485, "attachment_id": null, "tags": [], "creation_time": "2021-03-07T00:55:00Z", "id": 15296377, "is_private": false, "author": "unicorn.consulting@gmail.com"}, {"is_private": false, "count": 9, "time": "2021-03-17T13:00:40Z", "author": "mkmelin+mozilla@iki.fi", "id": 15315195, "attachment_id": null, "tags": [], "creation_time": "2021-03-17T13:00:40Z", "creator": "mkmelin+mozilla@iki.fi", "raw_text": "Problems with the pref file doesn't seem all the common. I think the code is around here: https://searchfox.org/mozilla-central/rev/1a47a74bd5ba89f2474aa27c40bd478e853f3276/modules/libpref/Preferences.cpp#2943\nAlso, just creating a backup file doesn't really help too much, since very very few users would find that and know what to do.", "bug_id": 639485, "text": "Problems with the pref file doesn't seem all the common. I think the code is around here: https://searchfox.org/mozilla-central/rev/1a47a74bd5ba89f2474aa27c40bd478e853f3276/modules/libpref/Preferences.cpp#2943\nAlso, just creating a backup file doesn't really help too much, since very very few users would find that and know what to do."}, {"time": "2021-03-19T01:38:03Z", "count": 10, "text": "Who said the user needs to find it... if the last loaded profile is not able to load because of issues with the prefs.js the application should just load it,  or offer the user the option to restore their settings from a last known good backup.\n\nIt is not common, except it is.  Usually it is caused by network issues, remote storage of the profile or even cloud storage of the profile data.  What is being seen in support is ever-increasing levels of users losing data because of either lose of their profile (profile per install is still not right) or loss of/ corruption of the last prefs.js.  All it takes is a power loss while the file is being rewritten.  But if firefox can make and restore a tabs backup,  surely in the absence of sync that might restore the file we need to be proactive in maintaining data integrity and accessibility.", "raw_text": "Who said the user needs to find it... if the last loaded profile is not able to load because of issues with the prefs.js the application should just load it,  or offer the user the option to restore their settings from a last known good backup.\n\nIt is not common, except it is.  Usually it is caused by network issues, remote storage of the profile or even cloud storage of the profile data.  What is being seen in support is ever-increasing levels of users losing data because of either lose of their profile (profile per install is still not right) or loss of/ corruption of the last prefs.js.  All it takes is a power loss while the file is being rewritten.  But if firefox can make and restore a tabs backup,  surely in the absence of sync that might restore the file we need to be proactive in maintaining data integrity and accessibility.", "creator": "unicorn.consulting@gmail.com", "id": 15318229, "is_private": false, "author": "unicorn.consulting@gmail.com", "bug_id": 639485, "creation_time": "2021-03-19T01:38:03Z", "tags": [], "attachment_id": null}, {"text": "Feedback Information\nThe numerous prefs files cause various problems.  \nThere are regular Support Forum requests for help with various issues which turned out to be due to prefs.js - sometimes manually replacing with a prefs-n.js - sometimes needing to just delete the massive numbers to prevent crash like shut downs.\n\nSome examples of Issues reported in the Support Forum:\nhttps://support.mozilla.org/en-US/questions/1319877\nhttps://support.mozilla.org/en-US/questions/1331108\nhttps://support.mozilla.org/en-US/questions/1293933\nhttps://support.mozilla.org/en-US/questions/1324156\nhttps://support.mozilla.org/en-US/questions/1324267\nhttps://support.mozilla.org/en-US/questions/1280774\n\nPerhaps the worst case of large numbers of prefs files:\n\"I discovered I had 10,001 files called prefs-xx.js. \"\nhttps://support.mozilla.org/en-US/questions/1296150    \n\n\"Oh my goodness.  There are is a pref.js file and 9999 pref-nnnn.js files.\"\nhttps://support.mozilla.org/en-US/questions/1304651\n\nprefs-1.js to prefs-9999.js\nhttps://support.mozilla.org/en-US/questions/1357069\n\nI periodically check profile name folder for excessive prefs files - few have a zero zize - sometimes more than one created in same day, but I remove older ones when it gets to double numbers and rename newest to prefs-1.js - you never know when you might need it.\nIt's not an area people tend to check, but I suspect there are plenty of people with several copies of prefs, but they are unaware of it.", "creator": "anjeyelf@btinternet.com", "raw_text": "Feedback Information\nThe numerous prefs files cause various problems.  \nThere are regular Support Forum requests for help with various issues which turned out to be due to prefs.js - sometimes manually replacing with a prefs-n.js - sometimes needing to just delete the massive numbers to prevent crash like shut downs.\n\nSome examples of Issues reported in the Support Forum:\nhttps://support.mozilla.org/en-US/questions/1319877\nhttps://support.mozilla.org/en-US/questions/1331108\nhttps://support.mozilla.org/en-US/questions/1293933\nhttps://support.mozilla.org/en-US/questions/1324156\nhttps://support.mozilla.org/en-US/questions/1324267\nhttps://support.mozilla.org/en-US/questions/1280774\n\nPerhaps the worst case of large numbers of prefs files:\n\"I discovered I had 10,001 files called prefs-xx.js. \"\nhttps://support.mozilla.org/en-US/questions/1296150    \n\n\"Oh my goodness.  There are is a pref.js file and 9999 pref-nnnn.js files.\"\nhttps://support.mozilla.org/en-US/questions/1304651\n\nprefs-1.js to prefs-9999.js\nhttps://support.mozilla.org/en-US/questions/1357069\n\nI periodically check profile name folder for excessive prefs files - few have a zero zize - sometimes more than one created in same day, but I remove older ones when it gets to double numbers and rename newest to prefs-1.js - you never know when you might need it.\nIt's not an area people tend to check, but I suspect there are plenty of people with several copies of prefs, but they are unaware of it.", "count": 11, "time": "2021-11-21T14:27:32Z", "bug_id": 639485, "attachment_id": null, "tags": [], "creation_time": "2021-11-21T14:27:32Z", "id": 15665015, "is_private": false, "author": "anjeyelf@btinternet.com"}]}}}