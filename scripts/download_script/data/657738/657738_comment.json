{"bugs": {"657738": {"comments": [{"author": "mh+mozilla@glandium.org", "text": "Copy/pasted from http://glandium.org/blog/?p=1998:\nI think we lack one important information when we have a test failure: does it reliably happen with a given build? Chances are that most random oranges don\u2019t (like the two I mentioned further above), but those that do may point out subtle problems of compiler optimizations breaking some of our assumptions (though so far, most of the time, they just turn into permanent oranges). The self-serve API does help in that regard, allowing to re-trigger a given test suite on the same build, but I think we should enhance our test harnesses to automatically retry failing tests.\n\nWe should do that on all our harnesses (xpcshell, reftest, make check)", "count": 0, "attachment_id": null, "creator": "mh+mozilla@glandium.org", "id": 5475493, "time": "2011-05-17T19:45:34Z", "is_private": false, "tags": [], "raw_text": "Copy/pasted from http://glandium.org/blog/?p=1998:\nI think we lack one important information when we have a test failure: does it reliably happen with a given build? Chances are that most random oranges don\u2019t (like the two I mentioned further above), but those that do may point out subtle problems of compiler optimizations breaking some of our assumptions (though so far, most of the time, they just turn into permanent oranges). The self-serve API does help in that regard, allowing to re-trigger a given test suite on the same build, but I think we should enhance our test harnesses to automatically retry failing tests.\n\nWe should do that on all our harnesses (xpcshell, reftest, make check)", "creation_time": "2011-05-17T19:45:34Z", "bug_id": 657738}, {"creator": "mconnor@mozilla.com", "attachment_id": null, "count": 1, "text": "We'd probably need to add something to this to flag known random oranges as a test that may fail randomly, and possibly set a threshold (i.e. fails 1/25 times, more than that we should report failure).  Known random oranges would then avoid making the tree orange...", "author": "mconnor@mozilla.com", "tags": [], "creation_time": "2011-05-17T19:54:14Z", "bug_id": 657738, "raw_text": "We'd probably need to add something to this to flag known random oranges as a test that may fail randomly, and possibly set a threshold (i.e. fails 1/25 times, more than that we should report failure).  Known random oranges would then avoid making the tree orange...", "is_private": false, "id": 5475515, "time": "2011-05-17T19:54:14Z"}, {"creator": "ehsan.akhgari@gmail.com", "attachment_id": null, "text": "We have data on this in the OrangeFactor web tool <http://brasstacks.mozilla.com/orangefactor/>, so I'm not sure if we need to modify the harness to get that data (in fact, I'm pretty sure that we don't!).\n\nI don't get the rest of your proposal: what should we do with that data?  We don't have a reliable way to determine failure types for all of our intermittent oranges, and associating failures with test files is not correct.  I like the general idea, but I think it should be way more concrete before we can do anything useful with it.", "count": 2, "author": "ehsan.akhgari@gmail.com", "raw_text": "We have data on this in the OrangeFactor web tool <http://brasstacks.mozilla.com/orangefactor/>, so I'm not sure if we need to modify the harness to get that data (in fact, I'm pretty sure that we don't!).\n\nI don't get the rest of your proposal: what should we do with that data?  We don't have a reliable way to determine failure types for all of our intermittent oranges, and associating failures with test files is not correct.  I like the general idea, but I think it should be way more concrete before we can do anything useful with it.", "creation_time": "2011-05-17T20:11:04Z", "bug_id": 657738, "tags": [], "is_private": false, "time": "2011-05-17T20:11:04Z", "id": 5475539}, {"attachment_id": null, "creator": "jdinbox@gmail.com", "author": "jdinbox@gmail.com", "count": 3, "text": "OrangeFactor / Bugzilla + TBPL's tools are helpful for test that have been intermittently failing for a while.\n\nBut we're always going to have new tests added to the tree (one hopes ;), and new intermittent orange (either from new tests, or existing tests that start to go intermittent for one of a variety of reasons). Rerunning a failed test would be helpful the first few times something goes wonky.\n\nA concrete example: A change is pushed, and a new test goes orange. (Unexpectedly, since I have _of course_ passed on try!) I could immediately back out, but if I can't reproduce it what then? Try relanding later, and hope the I luck out and miss the new orange?\n\nIf the test boxes immediately reran the specific failed test a couple times, it would help people watching the tree to know that either (1) the test is intermittent, and someone needs to start looking at why or (2) the test is _not_ intermittent, and the committer should back out (or otherwise close the tree).\n\n[I wouldn't undersell #2 -- people don't like to think their change could have caused the problem, and having immediate data that it failed 3x would dash any hope that it might go green on the next cycle.]", "is_private": false, "raw_text": "OrangeFactor / Bugzilla + TBPL's tools are helpful for test that have been intermittently failing for a while.\n\nBut we're always going to have new tests added to the tree (one hopes ;), and new intermittent orange (either from new tests, or existing tests that start to go intermittent for one of a variety of reasons). Rerunning a failed test would be helpful the first few times something goes wonky.\n\nA concrete example: A change is pushed, and a new test goes orange. (Unexpectedly, since I have _of course_ passed on try!) I could immediately back out, but if I can't reproduce it what then? Try relanding later, and hope the I luck out and miss the new orange?\n\nIf the test boxes immediately reran the specific failed test a couple times, it would help people watching the tree to know that either (1) the test is intermittent, and someone needs to start looking at why or (2) the test is _not_ intermittent, and the committer should back out (or otherwise close the tree).\n\n[I wouldn't undersell #2 -- people don't like to think their change could have caused the problem, and having immediate data that it failed 3x would dash any hope that it might go green on the next cycle.]", "creation_time": "2011-05-18T03:09:12Z", "bug_id": 657738, "tags": [], "time": "2011-05-18T03:09:12Z", "id": 5476345}, {"id": 5476572, "time": "2011-05-18T07:16:31Z", "is_private": false, "tags": [], "creation_time": "2011-05-18T07:16:31Z", "bug_id": 657738, "raw_text": "Just a thought: why don't we also flag our known intermittent oranges in the test suites that allow such flagging (reftest and mochitest), such that instead of TEST-UNEXPECTED-FAIL, we'd get TEST-INTERMITTENT-FAIL + a bug number.\n\nThis would:\n- help tbpl for all the cases it can't find the corresponding bug (and seeing how much times I had to to some bugzilla search or tbpl digging to find a corresponding bug, that'd be a clear win)\n- help people that hit these intermittent failures on their local builds\n\nThe downside is that possibly, we may be getting a different failure from the one that is already known.", "author": "mh+mozilla@glandium.org", "count": 4, "text": "Just a thought: why don't we also flag our known intermittent oranges in the test suites that allow such flagging (reftest and mochitest), such that instead of TEST-UNEXPECTED-FAIL, we'd get TEST-INTERMITTENT-FAIL + a bug number.\n\nThis would:\n- help tbpl for all the cases it can't find the corresponding bug (and seeing how much times I had to to some bugzilla search or tbpl digging to find a corresponding bug, that'd be a clear win)\n- help people that hit these intermittent failures on their local builds\n\nThe downside is that possibly, we may be getting a different failure from the one that is already known.", "attachment_id": null, "creator": "mh+mozilla@glandium.org"}, {"is_private": false, "tags": [], "raw_text": "In conjunction with this approach, I think it's a great idea (if it's flagged as intermittent, and isn't, still fail).", "bug_id": 657738, "creation_time": "2011-05-18T19:05:32Z", "id": 5477878, "time": "2011-05-18T19:05:32Z", "attachment_id": null, "creator": "mconnor@mozilla.com", "author": "mconnor@mozilla.com", "count": 5, "text": "In conjunction with this approach, I think it's a great idea (if it's flagged as intermittent, and isn't, still fail)."}, {"text": "(In reply to comment #3)\n> OrangeFactor / Bugzilla + TBPL's tools are helpful for test that have been\n> intermittently failing for a while.\n> \n> But we're always going to have new tests added to the tree (one hopes ;), and\n> new intermittent orange (either from new tests, or existing tests that start to\n> go intermittent for one of a variety of reasons). Rerunning a failed test would\n> be helpful the first few times something goes wonky.\n> \n> A concrete example: A change is pushed, and a new test goes orange.\n> (Unexpectedly, since I have _of course_ passed on try!) I could immediately\n> back out, but if I can't reproduce it what then? Try relanding later, and hope\n> the I luck out and miss the new orange?\n> \n> If the test boxes immediately reran the specific failed test a couple times, it\n> would help people watching the tree to know that either (1) the test is\n> intermittent, and someone needs to start looking at why or (2) the test is\n> _not_ intermittent, and the committer should back out (or otherwise close the\n> tree).\n> \n> [I wouldn't undersell #2 -- people don't like to think their change could have\n> caused the problem, and having immediate data that it failed 3x would dash any\n> hope that it might go green on the next cycle.]\n\nOK, this proposal makes sense to me.  The only problem with it is that I don't necessarily think that we need additional test runs for intermittent oranges that TBPL knows about (which are the most common type of intermittent oranges).  I think for those cases, rerunning the tests just wastes everyone's time.\n\nAlso, right now, we're almost 99% there, with us being able to rerun a test job from TBPL.  I use this very technique quite often when I see a new orange.  So I guess this proposal is about making it automated, right?", "count": 6, "time": "2011-05-19T14:32:30Z", "author": "ehsan.akhgari@gmail.com", "id": 5479978, "creation_time": "2011-05-19T14:32:30Z", "bug_id": 657738, "raw_text": "(In reply to comment #3)\n> OrangeFactor / Bugzilla + TBPL's tools are helpful for test that have been\n> intermittently failing for a while.\n> \n> But we're always going to have new tests added to the tree (one hopes ;), and\n> new intermittent orange (either from new tests, or existing tests that start to\n> go intermittent for one of a variety of reasons). Rerunning a failed test would\n> be helpful the first few times something goes wonky.\n> \n> A concrete example: A change is pushed, and a new test goes orange.\n> (Unexpectedly, since I have _of course_ passed on try!) I could immediately\n> back out, but if I can't reproduce it what then? Try relanding later, and hope\n> the I luck out and miss the new orange?\n> \n> If the test boxes immediately reran the specific failed test a couple times, it\n> would help people watching the tree to know that either (1) the test is\n> intermittent, and someone needs to start looking at why or (2) the test is\n> _not_ intermittent, and the committer should back out (or otherwise close the\n> tree).\n> \n> [I wouldn't undersell #2 -- people don't like to think their change could have\n> caused the problem, and having immediate data that it failed 3x would dash any\n> hope that it might go green on the next cycle.]\n\nOK, this proposal makes sense to me.  The only problem with it is that I don't necessarily think that we need additional test runs for intermittent oranges that TBPL knows about (which are the most common type of intermittent oranges).  I think for those cases, rerunning the tests just wastes everyone's time.\n\nAlso, right now, we're almost 99% there, with us being able to rerun a test job from TBPL.  I use this very technique quite often when I see a new orange.  So I guess this proposal is about making it automated, right?", "tags": [], "creator": "ehsan.akhgari@gmail.com", "attachment_id": null, "is_private": false}, {"author": "ehsan.akhgari@gmail.com", "text": "(In reply to comment #4)\n> The downside is that possibly, we may be getting a different failure from the\n> one that is already known.\n\nWhich is pretty serious!\n\nAt least on  few occasions, I've come across test failures on my own patches which looked the same as an intermittent orange.  In one case it was my patch making an intermittent orange quite worse (nearly perma-orange), in another case I mistakenly pushed the patch to m-c without realizing that I'm actually seeing a perma-orange, and in the rest of cases, my patch was triggering similar failures for very different reasons (bugs in my patch).\n\nThis proposal makes detecting these cases before pushing to m-c nearly impossible.", "count": 7, "attachment_id": null, "creator": "ehsan.akhgari@gmail.com", "id": 5479982, "time": "2011-05-19T14:36:02Z", "is_private": false, "tags": [], "creation_time": "2011-05-19T14:36:02Z", "bug_id": 657738, "raw_text": "(In reply to comment #4)\n> The downside is that possibly, we may be getting a different failure from the\n> one that is already known.\n\nWhich is pretty serious!\n\nAt least on  few occasions, I've come across test failures on my own patches which looked the same as an intermittent orange.  In one case it was my patch making an intermittent orange quite worse (nearly perma-orange), in another case I mistakenly pushed the patch to m-c without realizing that I'm actually seeing a perma-orange, and in the rest of cases, my patch was triggering similar failures for very different reasons (bugs in my patch).\n\nThis proposal makes detecting these cases before pushing to m-c nearly impossible."}, {"author": "mh+mozilla@glandium.org", "count": 8, "text": "(In reply to comment #7)\n> This proposal makes detecting these cases before pushing to m-c nearly\n> impossible.\n\nI'm not saying they shouldn't be orange. I'm saying it might help to have them tagged somehow.", "attachment_id": null, "creator": "mh+mozilla@glandium.org", "id": 5479989, "time": "2011-05-19T14:39:47Z", "is_private": false, "tags": [], "creation_time": "2011-05-19T14:39:47Z", "bug_id": 657738, "raw_text": "(In reply to comment #7)\n> This proposal makes detecting these cases before pushing to m-c nearly\n> impossible.\n\nI'm not saying they shouldn't be orange. I'm saying it might help to have them tagged somehow."}, {"raw_text": "I hinted at this a year ago in a blog post:\nhttps://elvis314.wordpress.com/2010/07/05/improving-personal-hygiene-by-adjusting-mochitests/\n\nbasically if we had meta data for each test we could know the history and report it as an orange or some other color.  this meta data could come from a webservice (think query orangefactor database) to determine if this is a known failure for that given platform.\n\nIn the past I have had test harnesses rerun a single test case (not test suite) if it fails to verify it reproduces.  I saw about 75% of the noise removed from my automation by doing that.  Almost every test file will run in seconds and having the harness rerun it to verify it fails could save us a lot of time.  Having to rerun the whole test suite could be time consuming and add more burden to our already backlogged machine pool.", "creation_time": "2011-05-24T00:45:01Z", "bug_id": 657738, "creator": "jmaher@mozilla.com", "tags": [], "is_private": false, "attachment_id": null, "text": "I hinted at this a year ago in a blog post:\nhttps://elvis314.wordpress.com/2010/07/05/improving-personal-hygiene-by-adjusting-mochitests/\n\nbasically if we had meta data for each test we could know the history and report it as an orange or some other color.  this meta data could come from a webservice (think query orangefactor database) to determine if this is a known failure for that given platform.\n\nIn the past I have had test harnesses rerun a single test case (not test suite) if it fails to verify it reproduces.  I saw about 75% of the noise removed from my automation by doing that.  Almost every test file will run in seconds and having the harness rerun it to verify it fails could save us a lot of time.  Having to rerun the whole test suite could be time consuming and add more burden to our already backlogged machine pool.", "count": 9, "author": "jmaher@mozilla.com", "time": "2011-05-24T00:45:01Z", "id": 5488164}]}}, "comments": {}}