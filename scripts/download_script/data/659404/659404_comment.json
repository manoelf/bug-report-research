{"bugs": {"659404": {"comments": [{"bug_id": 659404, "raw_text": "(Spun off from bug 659241 comment 8.)\n\nWe keep talking about using TLS for JSContexts or other things, and the perf question keeps coming up. It would be nice to know what the cost of actually is. Let's do a round of measurements of TLS on at least x86/x64 MSVC and x64/ARM GCC. Basic things we want to know:\n\n- How long does it take to access something from TLS in cycles? It seems OK to do a hot-cache experiment, because JSContext and anything needed to get to it should stay in good caches most of the time.\n\n- How many loads or other slow ops need to run? I.e., a brief summary of how TLS is actually accessed, to enhance understanding.\n\n- Ultimately, we'd like an estimator of how much it will affect us in practice; some estimate of how many times cx gets accessed per million cycles run or something like that.", "count": 0, "time": "2011-05-24T19:00:19Z", "tags": [], "is_private": false, "creation_time": "2011-05-24T19:00:19Z", "creator": "dmandelin@mozilla.com", "text": "(Spun off from bug 659241 comment 8.)\n\nWe keep talking about using TLS for JSContexts or other things, and the perf question keeps coming up. It would be nice to know what the cost of actually is. Let's do a round of measurements of TLS on at least x86/x64 MSVC and x64/ARM GCC. Basic things we want to know:\n\n- How long does it take to access something from TLS in cycles? It seems OK to do a hot-cache experiment, because JSContext and anything needed to get to it should stay in good caches most of the time.\n\n- How many loads or other slow ops need to run? I.e., a brief summary of how TLS is actually accessed, to enhance understanding.\n\n- Ultimately, we'd like an estimator of how much it will affect us in practice; some estimate of how many times cx gets accessed per million cycles run or something like that.", "id": 5490115, "attachment_id": null, "author": "dmandelin@mozilla.com"}, {"raw_text": "We need to measure the cost of the NSPR call on Mac, Linux, and Windows, not the compiler intrinsics. The GCC intrinsics aren't always available (they're not on Mac) and the Windows ones are basically broken except on Windows 7 - though we might be able to deal with it based on how we load the XUL library. Mac has some \"fast\" pthread variant but it's not clear that you can use this outside of the Kits, since it requires a hardcoded constant and Apple has reserved one for each place they need it.\n\nv8, FWIW, does not use intrinsics.\n\nFor IonMonkey we mostly want to use TLS to get at the allocation pool. For vector resizes this should be somewhat rare, but not for instruction allocation, so it's worth measuring.", "is_private": false, "tags": [], "creation_time": "2011-05-24T19:37:39Z", "id": 5490240, "attachment_id": null, "text": "We need to measure the cost of the NSPR call on Mac, Linux, and Windows, not the compiler intrinsics. The GCC intrinsics aren't always available (they're not on Mac) and the Windows ones are basically broken except on Windows 7 - though we might be able to deal with it based on how we load the XUL library. Mac has some \"fast\" pthread variant but it's not clear that you can use this outside of the Kits, since it requires a hardcoded constant and Apple has reserved one for each place they need it.\n\nv8, FWIW, does not use intrinsics.\n\nFor IonMonkey we mostly want to use TLS to get at the allocation pool. For vector resizes this should be somewhat rare, but not for instruction allocation, so it's worth measuring.", "count": 1, "bug_id": 659404, "time": "2011-05-24T19:37:39Z", "author": "dvander@alliedmods.net", "creator": "dvander@alliedmods.net"}, {"time": "2011-05-24T23:23:40Z", "count": 2, "bug_id": 659404, "author": "adrake@adrake.org", "creator": "adrake@adrake.org", "tags": [], "is_private": false, "raw_text": "", "text": "Created attachment 534934\nPreliminary TLS Benchmark", "id": 5490991, "attachment_id": 534934, "creation_time": "2011-05-24T23:23:40Z"}, {"text": "Created attachment 534935\nPreliminary Control Benchmark", "id": 5490993, "attachment_id": 534935, "creation_time": "2011-05-24T23:24:15Z", "tags": [], "is_private": false, "raw_text": "", "creator": "adrake@adrake.org", "author": "adrake@adrake.org", "time": "2011-05-24T23:24:15Z", "bug_id": 659404, "count": 3}, {"time": "2011-05-24T23:24:42Z", "tags": [], "is_private": false, "bug_id": 659404, "raw_text": "", "count": 4, "creator": "adrake@adrake.org", "text": "Created attachment 534936\nPreliminary Benchmark Makefile", "id": 5490994, "attachment_id": 534936, "author": "adrake@adrake.org", "creation_time": "2011-05-24T23:24:42Z"}, {"bug_id": 659404, "count": 5, "time": "2011-05-24T23:25:39Z", "creator": "adrake@adrake.org", "author": "adrake@adrake.org", "raw_text": "On latest OS X, 2.66 GHz Core i7.\n\nadrake@charon:~/prbench$ ./glbench \n1000000000 rounds in 4 seconds, ~250000000.000 rounds/sec\nadrake@charon:~/prbench$ ./prbench \n1000000000 rounds in 17 seconds, ~58823528.000 rounds/sec", "tags": [], "is_private": false, "creation_time": "2011-05-24T23:25:39Z", "text": "On latest OS X, 2.66 GHz Core i7.\n\nadrake@charon:~/prbench$ ./glbench \n1000000000 rounds in 4 seconds, ~250000000.000 rounds/sec\nadrake@charon:~/prbench$ ./prbench \n1000000000 rounds in 17 seconds, ~58823528.000 rounds/sec", "id": 5490996, "attachment_id": null}, {"attachment_id": null, "id": 5491010, "creator": "adrake@adrake.org", "text": "On Fedora 15, x86_64, 2.66 Ghz Core i7 (same machine).\n\n[adrake@charon prbench]$ ./glbench \n1000000000 rounds in 4 seconds, ~250000000.000 rounds/sec\n[adrake@charon prbench]$ ./prbench \n1000000000 rounds in 23 seconds, ~43478260.000 rounds/sec", "author": "adrake@adrake.org", "creation_time": "2011-05-24T23:33:49Z", "time": "2011-05-24T23:33:49Z", "is_private": false, "tags": [], "raw_text": "On Fedora 15, x86_64, 2.66 Ghz Core i7 (same machine).\n\n[adrake@charon prbench]$ ./glbench \n1000000000 rounds in 4 seconds, ~250000000.000 rounds/sec\n[adrake@charon prbench]$ ./prbench \n1000000000 rounds in 23 seconds, ~43478260.000 rounds/sec", "bug_id": 659404, "count": 6}, {"raw_text": "On Windows 7, x86_64, 2.66 GHz Core i7 (same machine).\n\nadrake@CHARON ~/Desktop/prbench\n$ glbench.exe\n1000000000 rounds in 5 seconds, ~200000000.000 rounds/sec\n\nadrake@CHARON ~/Desktop/prbench\n$ prbench\n1000000000 rounds in 19 seconds, ~52631580.000 rounds/sec\n\nOn Windows 7, x86, 2.66 GHz Core i7 (same machine).\n\nadrake@CHARON ~/Desktop/prbench\n$ glbench.exe\n1000000000 rounds in 4 seconds, ~0.000 rounds/sec\n\nadrake@CHARON ~/Desktop/prbench\n$ prbench\n1000000000 rounds in 20 seconds, ~0.000 rounds/sec\n\nYes, I screwed up the rounds/sec on 32-bit. The time numbers are still good, though.\n\nSome additional notes: there wasn't any detectable change in performance with different sorts of threads. The results were quite reproducible on all platforms of ~4x slower to do a full NSPR TLS read/write cycle than to do two movs (they were not optimized away) in the same place.\n\nI don't think this will noticeably slow down the engine by adding a few nanoseconds on top of every temporary allocation -- I suspect it will get lost in the noise. It may even end up being a win due to not needing a register or space in structures to pass around the generator or context, but I suspect the effect is likely to be very small.", "bug_id": 659404, "count": 7, "time": "2011-05-25T00:34:13Z", "is_private": false, "tags": [], "creation_time": "2011-05-25T00:34:13Z", "id": 5491147, "attachment_id": null, "text": "On Windows 7, x86_64, 2.66 GHz Core i7 (same machine).\n\nadrake@CHARON ~/Desktop/prbench\n$ glbench.exe\n1000000000 rounds in 5 seconds, ~200000000.000 rounds/sec\n\nadrake@CHARON ~/Desktop/prbench\n$ prbench\n1000000000 rounds in 19 seconds, ~52631580.000 rounds/sec\n\nOn Windows 7, x86, 2.66 GHz Core i7 (same machine).\n\nadrake@CHARON ~/Desktop/prbench\n$ glbench.exe\n1000000000 rounds in 4 seconds, ~0.000 rounds/sec\n\nadrake@CHARON ~/Desktop/prbench\n$ prbench\n1000000000 rounds in 20 seconds, ~0.000 rounds/sec\n\nYes, I screwed up the rounds/sec on 32-bit. The time numbers are still good, though.\n\nSome additional notes: there wasn't any detectable change in performance with different sorts of threads. The results were quite reproducible on all platforms of ~4x slower to do a full NSPR TLS read/write cycle than to do two movs (they were not optimized away) in the same place.\n\nI don't think this will noticeably slow down the engine by adding a few nanoseconds on top of every temporary allocation -- I suspect it will get lost in the noise. It may even end up being a win due to not needing a register or space in structures to pass around the generator or context, but I suspect the effect is likely to be very small.", "creator": "adrake@adrake.org", "author": "adrake@adrake.org"}, {"time": "2011-05-25T01:09:24Z", "is_private": false, "tags": [], "raw_text": "(In reply to comment #7)\n> I don't think this will noticeably slow down the engine by adding a few\n> nanoseconds on top of every temporary allocation -- I suspect it will get\n> lost in the noise. It may even end up being a win due to not needing a\n> register or space in structures to pass around the generator or context, but\n> I suspect the effect is likely to be very small.\n\nMy rough estimate is the same. So let's try this in IonMonkey, benchmarking compilation performance before and after the change. If it doesn't slow anything down, we can consider doing it for the rest of the engine.", "bug_id": 659404, "count": 8, "attachment_id": null, "id": 5491213, "creator": "dmandelin@mozilla.com", "text": "(In reply to comment #7)\n> I don't think this will noticeably slow down the engine by adding a few\n> nanoseconds on top of every temporary allocation -- I suspect it will get\n> lost in the noise. It may even end up being a win due to not needing a\n> register or space in structures to pass around the generator or context, but\n> I suspect the effect is likely to be very small.\n\nMy rough estimate is the same. So let's try this in IonMonkey, benchmarking compilation performance before and after the change. If it doesn't slow anything down, we can consider doing it for the rest of the engine.", "author": "dmandelin@mozilla.com", "creation_time": "2011-05-25T01:09:24Z"}, {"creation_time": "2011-05-25T17:31:07Z", "author": "benjamin@smedbergs.us", "id": 5492698, "attachment_id": null, "creator": "benjamin@smedbergs.us", "text": "On Windows, don't use the NSPR functions, just use TlsAlloc directly: it's somewhat faster and less overhead. Just note that there are a limited number (256) of TLS allocations, so you should really just have one for all of spidermonkey.", "count": 9, "raw_text": "On Windows, don't use the NSPR functions, just use TlsAlloc directly: it's somewhat faster and less overhead. Just note that there are a limited number (256) of TLS allocations, so you should really just have one for all of spidermonkey.", "bug_id": 659404, "is_private": false, "tags": [], "time": "2011-05-25T17:31:07Z"}, {"creation_time": "2018-10-15T08:44:34Z", "attachment_id": null, "id": 13686270, "creator": "sledru@mozilla.com", "text": "No assignee, updating the status.", "author": "sledru@mozilla.com", "raw_text": "No assignee, updating the status.", "bug_id": 659404, "count": 10, "time": "2018-10-15T08:44:34Z", "is_private": false, "tags": []}, {"creation_time": "2021-07-12T08:50:21Z", "text": "Description:\nPlease provide an explanation of the feature or change. Include a description of the user scenario in which it would be used and how the user would complete the task(s).\nScreenshots and visual UI specs are welcome, but please include sufficient accompanying explanation so that blind members of the accessibility team are able to understand the feature/change.\n\nHow do we test this?\nIf there is an implementation to test, please provide instructions for testing it; e.g. setting preferences, other preparation, how to trigger the UI, etc.\n\nWhen will this ship?\nTracking bug/issue:\nDesign documents (e.g. Product Requirements Document, UI spec):\nEngineering lead:\nProduct manager:\n\nThe accessibility team has developed the Mozilla Accessibility Release Guidelines which outline what is needed to make user interfaces accessible:\nhttps://wiki.mozilla.org/Accessibility/Guidelines\nPlease describe the accessibility guidelines you considered and what steps you've taken to address them:\n\nDescribe any areas of concern to which you want the accessibility team to give special attention:\n\n[Tracking Requested - why for this release]:", "creator": "k2212631@gmail.com", "attachment_id": null, "id": 15481831, "author": "k2212631@gmail.com", "bug_id": 659404, "raw_text": "Description:\nPlease provide an explanation of the feature or change. Include a description of the user scenario in which it would be used and how the user would complete the task(s).\nScreenshots and visual UI specs are welcome, but please include sufficient accompanying explanation so that blind members of the accessibility team are able to understand the feature/change.\n\nHow do we test this?\nIf there is an implementation to test, please provide instructions for testing it; e.g. setting preferences, other preparation, how to trigger the UI, etc.\n\nWhen will this ship?\nTracking bug/issue:\nDesign documents (e.g. Product Requirements Document, UI spec):\nEngineering lead:\nProduct manager:\n\nThe accessibility team has developed the Mozilla Accessibility Release Guidelines which outline what is needed to make user interfaces accessible:\nhttps://wiki.mozilla.org/Accessibility/Guidelines\nPlease describe the accessibility guidelines you considered and what steps you've taken to address them:\n\nDescribe any areas of concern to which you want the accessibility team to give special attention:\n\n[Tracking Requested - why for this release]:", "count": 11, "time": "2021-07-12T08:50:21Z", "tags": ["spam"], "is_private": false}]}}, "comments": {}}