{"comments": {}, "bugs": {"682614": {"comments": [{"count": 0, "bug_id": 682614, "raw_text": "Currently, dereferencing a null refptr, like a nsRefPtr, by default only prints a warning on standard error, because it uses a NS_PRECONDITION.\n\nhttp://hg.mozilla.org/mozilla-central/file/6c8a909977d3/xpcom/base/nsAutoPtr.h#l180\n\nIt should probably use a hard assertion, like MOZ_ASSERT, instead. Unless the plan is to turn NS_PRECONDITION into a fatal assertion.\n\nThe tracking bug for issues like this is bug 682609", "attachment_id": null, "id": 5682898, "creator": "jacob.benoit.1@gmail.com", "is_private": false, "tags": [], "time": "2011-08-27T21:25:57Z", "text": "Currently, dereferencing a null refptr, like a nsRefPtr, by default only prints a warning on standard error, because it uses a NS_PRECONDITION.\n\nhttp://hg.mozilla.org/mozilla-central/file/6c8a909977d3/xpcom/base/nsAutoPtr.h#l180\n\nIt should probably use a hard assertion, like MOZ_ASSERT, instead. Unless the plan is to turn NS_PRECONDITION into a fatal assertion.\n\nThe tracking bug for issues like this is bug 682609", "author": "jacob.benoit.1@gmail.com", "creation_time": "2011-08-27T21:25:57Z"}, {"author": "khuey@kylehuey.com", "creation_time": "2011-08-27T21:31:10Z", "time": "2011-08-27T21:31:10Z", "tags": [], "text": "Why?  You crash immediately after, in a completely obvious way.", "creator": "khuey@kylehuey.com", "is_private": false, "id": 5682903, "attachment_id": null, "raw_text": "Why?  You crash immediately after, in a completely obvious way.", "bug_id": 682614, "count": 1}, {"author": "jacob.benoit.1@gmail.com", "creation_time": "2011-08-27T21:46:05Z", "time": "2011-08-27T21:46:05Z", "tags": [], "bug_id": 682614, "text": "Not necessarily. For example:\n\n some_null_refptr->some_non_virtual_method()\n\nFurthermore, following your argument, we would not even want the NS_PRECONDITION we currently have.", "creator": "jacob.benoit.1@gmail.com", "is_private": false, "count": 2, "id": 5682921, "attachment_id": null, "raw_text": "Not necessarily. For example:\n\n some_null_refptr->some_non_virtual_method()\n\nFurthermore, following your argument, we would not even want the NS_PRECONDITION we currently have."}, {"id": 5682927, "raw_text": "(In reply to Benoit Jacob [:bjacob] from comment #2)\n> Not necessarily. For example:\n> \n>  some_null_refptr->some_non_virtual_method()\n\nSure, but you can usually tell pretty quickly in some_non_virtual_method what's going on.  You can also peek up the stack and see that the pointer is null.\n\n> Furthermore, following your argument, we would not even want the\n> NS_PRECONDITION we currently have.\n\nI've been told by reviewers generally not to bother asserting something that leads to an obvious, completely predictable crash in the past.\n\nI guess I don't really see the value in a hard, debug only assert, that guards against a crash that's easy to figure out the cause of.", "attachment_id": null, "text": "(In reply to Benoit Jacob [:bjacob] from comment #2)\n> Not necessarily. For example:\n> \n>  some_null_refptr->some_non_virtual_method()\n\nSure, but you can usually tell pretty quickly in some_non_virtual_method what's going on.  You can also peek up the stack and see that the pointer is null.\n\n> Furthermore, following your argument, we would not even want the\n> NS_PRECONDITION we currently have.\n\nI've been told by reviewers generally not to bother asserting something that leads to an obvious, completely predictable crash in the past.\n\nI guess I don't really see the value in a hard, debug only assert, that guards against a crash that's easy to figure out the cause of.", "time": "2011-08-27T21:51:31Z", "tags": [], "bug_id": 682614, "creation_time": "2011-08-27T21:51:31Z", "author": "khuey@kylehuey.com", "count": 3, "is_private": false, "creator": "khuey@kylehuey.com"}, {"author": "jacob.benoit.1@gmail.com", "creation_time": "2011-08-27T21:57:39Z", "bug_id": 682614, "tags": [], "time": "2011-08-27T21:57:39Z", "text": "(In reply to Kyle Huey [:khuey] (khuey@mozilla.com) from comment #3)\n> (In reply to Benoit Jacob [:bjacob] from comment #2)\n> > Not necessarily. For example:\n> > \n> >  some_null_refptr->some_non_virtual_method()\n> \n> Sure, but you can usually tell pretty quickly in some_non_virtual_method\n> what's going on.  You can also peek up the stack and see that the pointer is\n> null.\n\nThat's already, in some cases, complex enough that my debugging process has been like:\n 1) get a crash\n 2) notice the assertion message on stderr\n 3) rerun with XPCOM_DEBUG_BREAK=abort and try to reproduce the crash\n\nI could have had that for free if a hard assertion had been used here.\n\n> \n> > Furthermore, following your argument, we would not even want the\n> > NS_PRECONDITION we currently have.\n> \n> I've been told by reviewers generally not to bother asserting something that\n> leads to an obvious, completely predictable crash in the past.\n> \n> I guess I don't really see the value in a hard, debug only assert, that\n> guards against a crash that's easy to figure out the cause of.\n\nI think we have different views on the obviousness of these crashes. If there are several levels of function calls between the null refptr deref and the crash, it gets complex enough that rerunning with XPCOM_DEBUG_BREAK=abort is the quickest way for me to debug.", "creator": "jacob.benoit.1@gmail.com", "is_private": false, "count": 4, "id": 5682934, "attachment_id": null, "raw_text": "(In reply to Kyle Huey [:khuey] (khuey@mozilla.com) from comment #3)\n> (In reply to Benoit Jacob [:bjacob] from comment #2)\n> > Not necessarily. For example:\n> > \n> >  some_null_refptr->some_non_virtual_method()\n> \n> Sure, but you can usually tell pretty quickly in some_non_virtual_method\n> what's going on.  You can also peek up the stack and see that the pointer is\n> null.\n\nThat's already, in some cases, complex enough that my debugging process has been like:\n 1) get a crash\n 2) notice the assertion message on stderr\n 3) rerun with XPCOM_DEBUG_BREAK=abort and try to reproduce the crash\n\nI could have had that for free if a hard assertion had been used here.\n\n> \n> > Furthermore, following your argument, we would not even want the\n> > NS_PRECONDITION we currently have.\n> \n> I've been told by reviewers generally not to bother asserting something that\n> leads to an obvious, completely predictable crash in the past.\n> \n> I guess I don't really see the value in a hard, debug only assert, that\n> guards against a crash that's easy to figure out the cause of.\n\nI think we have different views on the obviousness of these crashes. If there are several levels of function calls between the null refptr deref and the crash, it gets complex enough that rerunning with XPCOM_DEBUG_BREAK=abort is the quickest way for me to debug."}, {"is_private": false, "creator": "khuey@kylehuey.com", "count": 5, "creation_time": "2011-08-27T22:07:21Z", "author": "khuey@kylehuey.com", "text": "(In reply to Benoit Jacob [:bjacob] from comment #4)\n> I think we have different views on the obviousness of these crashes. If\n> there are several levels of function calls between the null refptr deref and\n> the crash, it gets complex enough that rerunning with\n> XPCOM_DEBUG_BREAK=abort is the quickest way for me to debug.\n\nPerhaps.  I just don't see how this would help with, say, Bug 682610 comment 0.", "time": "2011-08-27T22:07:21Z", "tags": [], "bug_id": 682614, "attachment_id": null, "raw_text": "(In reply to Benoit Jacob [:bjacob] from comment #4)\n> I think we have different views on the obviousness of these crashes. If\n> there are several levels of function calls between the null refptr deref and\n> the crash, it gets complex enough that rerunning with\n> XPCOM_DEBUG_BREAK=abort is the quickest way for me to debug.\n\nPerhaps.  I just don't see how this would help with, say, Bug 682610 comment 0.", "id": 5682945}]}}}