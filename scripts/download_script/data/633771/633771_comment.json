{"bugs": {"633771": {"comments": [{"attachment_id": null, "tags": [], "creation_time": "2011-02-12T21:27:11Z", "bug_id": 633771, "author": "sommerfeld@alum.mit.edu", "is_private": false, "id": 5275164, "creator": "sommerfeld@alum.mit.edu", "raw_text": "User-Agent:       Mozilla/5.0 (X11; SunOS i86pc; rv:2.0b11) Gecko/20100101 Firefox/4.0b11\nBuild Identifier: Mozilla/5.0 (X11; SunOS i86pc; rv:2.0b11) Gecko/20100101 Firefox/4.0b11\n\nWith 4.0b10 and 4.0b11, I periodically see firefox start consuming significant cpu (on a dual-core system, it eats slightly more than one cpu).\n\npstack $(pgrep firefox-bin) | c++filt shows two threads with the following \ntrace:\n\n fe920e67 yield    (d7591ac0, f3bf21a0, f0affde8, 0, e7eea168, fea6d3dc) + 7\n fea4ae3a PR_Sleep (0) + a2\n fcfe4693 unsigned mozilla::storage::AsyncExecuteStatements::Run() (d4794290, 1, f0affed8, 0) + 2e3\n fd5fcf33 unsigned nsThread::ProcessNextEvent(int,int*) (e7efc880, 1, f0afff3c, fd57a580) + 22f\n fd57a5b5 int NS_ProcessNextEvent_P(nsIThread*,int) (e7efc880, 1, f0afff6c, fd5fbdd4) + 45\n fd5fbe48 void nsThread::ThreadFunc(void*) (e7efc880) + 94\n fea49be1 _pt_root (e7eed6a0, fe9ae000, f0afffe8, fe91c03e) + c9\n fe91c093 _thrp_setup (f9a75a40) + 9b\n fe91c320 _lwp_start (f9a75a40, 0, 0, 0, 0, 0)\n\nsingle-stepping showed that sqlite3_step() is returning SQLITE_BUSY, and the eventual caller is calling PR_Sleep(0) (which turns into a yield()) and is trying again.\n\ndigging further showed that control reaches\ndb/sqlite3/src/sqlite3.c::unixLock():\n\n  /* If some thread using this PID has a lock via a different unixFile*\n  ** handle that precludes the requested lock, return BUSY.\n  */\n  if( (pFile->eFileLock!=pInode->eFileLock && \n          (pInode->eFileLock>=PENDING_LOCK || eFileLock>SHARED_LOCK))\n  ){\n    rc = SQLITE_BUSY;\n    goto end_lock;\n  }\n\nhot-patching pInode->eFileLock to zero unwedges the URL bar and makes the symptoms go away.\n\nI have not yet caught the code responsible for abandoning the PENDING_LOCK state.\n\nOthers have seen this bug as well.  See:\n\nhttp://mail.opensolaris.org/pipermail/desktop-discuss/2011-February/016755.html\n\nfor one example.  This did not happen with b9.\n\n\nReproducible: Always\n\nSteps to Reproduce:\nUnclear.  Happens after a few minutes normal use of the browser.  notable sites visited include online.wsj.com, mail.google.com, ...\n\nwhen it happens, URL completion in the URL bar stops working and cpu usage spikes.  If I bind the firefox process to one cpu I see 400k system calls per second on that cpu.\n\n\n\nExpected Results:  \nI'd expect the system to eventually detect the failure to acquire the lock and crash.\n\n\n\"The definition of insanity is doing the same thing over and over again and expecting different results\".\n\nhot-patching the PR_Sleep(0) to the equivalent of PR_Sleep(1) reduces the impact on the rest of the system; the code should probably adaptively increase the sleep time if it gets repeated SQLITE_BUSY returns, and crash if it's locked out for \"too long\".  I leave deciding how much is \"too long\" to you.\n\nI'm suspicious of the sqlite upgrade to 3.7.4 in b10.\n\nI also wonder whether this is related to 593543 on MacOS which mentions \"60% under stepStmt, but more interesting 10% in kernel space messing with\nsemaphores.\" which sounds at least superficially similar to the path I caught looping on Solaris.", "text": "User-Agent:       Mozilla/5.0 (X11; SunOS i86pc; rv:2.0b11) Gecko/20100101 Firefox/4.0b11\nBuild Identifier: Mozilla/5.0 (X11; SunOS i86pc; rv:2.0b11) Gecko/20100101 Firefox/4.0b11\n\nWith 4.0b10 and 4.0b11, I periodically see firefox start consuming significant cpu (on a dual-core system, it eats slightly more than one cpu).\n\npstack $(pgrep firefox-bin) | c++filt shows two threads with the following \ntrace:\n\n fe920e67 yield    (d7591ac0, f3bf21a0, f0affde8, 0, e7eea168, fea6d3dc) + 7\n fea4ae3a PR_Sleep (0) + a2\n fcfe4693 unsigned mozilla::storage::AsyncExecuteStatements::Run() (d4794290, 1, f0affed8, 0) + 2e3\n fd5fcf33 unsigned nsThread::ProcessNextEvent(int,int*) (e7efc880, 1, f0afff3c, fd57a580) + 22f\n fd57a5b5 int NS_ProcessNextEvent_P(nsIThread*,int) (e7efc880, 1, f0afff6c, fd5fbdd4) + 45\n fd5fbe48 void nsThread::ThreadFunc(void*) (e7efc880) + 94\n fea49be1 _pt_root (e7eed6a0, fe9ae000, f0afffe8, fe91c03e) + c9\n fe91c093 _thrp_setup (f9a75a40) + 9b\n fe91c320 _lwp_start (f9a75a40, 0, 0, 0, 0, 0)\n\nsingle-stepping showed that sqlite3_step() is returning SQLITE_BUSY, and the eventual caller is calling PR_Sleep(0) (which turns into a yield()) and is trying again.\n\ndigging further showed that control reaches\ndb/sqlite3/src/sqlite3.c::unixLock():\n\n  /* If some thread using this PID has a lock via a different unixFile*\n  ** handle that precludes the requested lock, return BUSY.\n  */\n  if( (pFile->eFileLock!=pInode->eFileLock && \n          (pInode->eFileLock>=PENDING_LOCK || eFileLock>SHARED_LOCK))\n  ){\n    rc = SQLITE_BUSY;\n    goto end_lock;\n  }\n\nhot-patching pInode->eFileLock to zero unwedges the URL bar and makes the symptoms go away.\n\nI have not yet caught the code responsible for abandoning the PENDING_LOCK state.\n\nOthers have seen this bug as well.  See:\n\nhttp://mail.opensolaris.org/pipermail/desktop-discuss/2011-February/016755.html\n\nfor one example.  This did not happen with b9.\n\n\nReproducible: Always\n\nSteps to Reproduce:\nUnclear.  Happens after a few minutes normal use of the browser.  notable sites visited include online.wsj.com, mail.google.com, ...\n\nwhen it happens, URL completion in the URL bar stops working and cpu usage spikes.  If I bind the firefox process to one cpu I see 400k system calls per second on that cpu.\n\n\n\nExpected Results:  \nI'd expect the system to eventually detect the failure to acquire the lock and crash.\n\n\n\"The definition of insanity is doing the same thing over and over again and expecting different results\".\n\nhot-patching the PR_Sleep(0) to the equivalent of PR_Sleep(1) reduces the impact on the rest of the system; the code should probably adaptively increase the sleep time if it gets repeated SQLITE_BUSY returns, and crash if it's locked out for \"too long\".  I leave deciding how much is \"too long\" to you.\n\nI'm suspicious of the sqlite upgrade to 3.7.4 in b10.\n\nI also wonder whether this is related to 593543 on MacOS which mentions \"60% under stepStmt, but more interesting 10% in kernel space messing with\nsemaphores.\" which sounds at least superficially similar to the path I caught looping on Solaris.", "count": 0, "time": "2011-02-12T21:27:11Z"}, {"text": "Possible duplicate of bug 628921 (similar symptoms; the analysis in that bug doesn't dig inside sqlite3).", "bug_id": 633771, "creator": "sommerfeld@alum.mit.edu", "raw_text": "Possible duplicate of bug 628921 (similar symptoms; the analysis in that bug doesn't dig inside sqlite3).", "attachment_id": null, "creation_time": "2011-02-12T22:13:56Z", "tags": [], "id": 5275202, "count": 1, "time": "2011-02-12T22:13:56Z", "author": "sommerfeld@alum.mit.edu", "is_private": false}, {"id": 5276187, "author": "ginnchen+exoracle@gmail.com", "time": "2011-02-14T01:41:59Z", "count": 2, "is_private": false, "text": "In b10/b11 on Solaris, I comment out \"journalmode = WAL\" because it doesn't work with NFS on Solaris.\n\nReporter, if your profile is not on NFS,\ncan you please try builds at\nhttp://ftp.mozilla.org/pub/mozilla.org/firefox/nightly/contrib/latest-mozilla-central/\n\nThanks!", "bug_id": 633771, "raw_text": "In b10/b11 on Solaris, I comment out \"journalmode = WAL\" because it doesn't work with NFS on Solaris.\n\nReporter, if your profile is not on NFS,\ncan you please try builds at\nhttp://ftp.mozilla.org/pub/mozilla.org/firefox/nightly/contrib/latest-mozilla-central/\n\nThanks!", "creator": "ginnchen+exoracle@gmail.com", "creation_time": "2011-02-14T01:41:59Z", "tags": [], "attachment_id": null}, {"id": 5276217, "is_private": false, "count": 3, "time": "2011-02-14T02:08:33Z", "author": "sommerfeld@alum.mit.edu", "bug_id": 633771, "text": "Home directory & profile is in local ZFS.  Trying it now.  I'll update the bug if I see the symptom recurring.", "attachment_id": null, "creation_time": "2011-02-14T02:08:33Z", "tags": [], "creator": "sommerfeld@alum.mit.edu", "raw_text": "Home directory & profile is in local ZFS.  Trying it now.  I'll update the bug if I see the symptom recurring."}, {"bug_id": 633771, "text": "The 4.0b12 version is better than 4.0b11 - it only seizes control of one core rather than two on my dual-core dual-proc workstation.\n\nstacktrace to be attached shortly.", "attachment_id": null, "tags": [], "creation_time": "2011-02-15T05:39:38Z", "creator": "James.C.McPherson@gmail.com", "raw_text": "The 4.0b12 version is better than 4.0b11 - it only seizes control of one core rather than two on my dual-core dual-proc workstation.\n\nstacktrace to be attached shortly.", "id": 5279123, "is_private": false, "count": 4, "author": "James.C.McPherson@gmail.com", "time": "2011-02-15T05:39:38Z"}, {"bug_id": 633771, "tags": [], "creation_time": "2011-02-15T05:40:30Z", "attachment_id": 512400, "id": 5279129, "is_private": false, "author": "James.C.McPherson@gmail.com", "text": "Created attachment 512400\nstacktrace with 4.0b12", "raw_text": "", "creator": "James.C.McPherson@gmail.com", "time": "2011-02-15T05:40:30Z", "count": 5}, {"text": "I didn't see AsyncExecuteStatements in 4.0b12 stack.\n\nSo it might be bug 628921.", "creator": "ginnchen+exoracle@gmail.com", "raw_text": "I didn't see AsyncExecuteStatements in 4.0b12 stack.\n\nSo it might be bug 628921.", "count": 6, "time": "2011-02-17T06:37:57Z", "bug_id": 633771, "attachment_id": null, "tags": [], "creation_time": "2011-02-17T06:37:57Z", "id": 5285582, "author": "ginnchen+exoracle@gmail.com", "is_private": false}, {"id": 5297674, "count": 7, "time": "2011-02-23T02:34:09Z", "author": "ginnchen+exoracle@gmail.com", "is_private": false, "text": "With 4.0b11, I leave Firefox running overnight and I see 1 thread keep doing stepStmt(), and it returns BUSY for every time.\n\nThe SQL command is\nSELECT h.id FROM moz_places h WHERE url = ?1 AND EXISTS(SELECT id FROM moz_historyvisits WHERE place_id = h.id LIMIT 1) \n\nBTW: I comment out journal_mode = WAL for places in this build.", "bug_id": 633771, "creator": "ginnchen+exoracle@gmail.com", "raw_text": "With 4.0b11, I leave Firefox running overnight and I see 1 thread keep doing stepStmt(), and it returns BUSY for every time.\n\nThe SQL command is\nSELECT h.id FROM moz_places h WHERE url = ?1 AND EXISTS(SELECT id FROM moz_historyvisits WHERE place_id = h.id LIMIT 1) \n\nBTW: I comment out journal_mode = WAL for places in this build.", "attachment_id": null, "tags": [], "creation_time": "2011-02-23T02:34:09Z"}, {"text": "(In reply to comment #7)\n> BTW: I comment out journal_mode = WAL for places in this build.\n\nit's unclear to me if this was the only change, commenting it out won't change the journal mode of an existing db. So if you didn't fix the db manually or create a new one, you can still hit bug 628921.\nYou should comment out the journal_mode but also create a new database, or set a different journal mode on your test database through a third party app, then re-run the test with your custom build. This is because once we set a db to wal, it will stick to wal till something other changes its mode.", "creator": "mak@mozilla.com", "raw_text": "(In reply to comment #7)\n> BTW: I comment out journal_mode = WAL for places in this build.\n\nit's unclear to me if this was the only change, commenting it out won't change the journal mode of an existing db. So if you didn't fix the db manually or create a new one, you can still hit bug 628921.\nYou should comment out the journal_mode but also create a new database, or set a different journal mode on your test database through a third party app, then re-run the test with your custom build. This is because once we set a db to wal, it will stick to wal till something other changes its mode.", "count": 8, "time": "2011-02-23T02:42:53Z", "bug_id": 633771, "attachment_id": null, "creation_time": "2011-02-23T02:42:53Z", "tags": [], "id": 5297691, "author": "mak@mozilla.com", "is_private": false}, {"creation_time": "2011-02-23T02:54:43Z", "tags": [], "attachment_id": null, "raw_text": "The last vacuum is Jan 20, so it could be vacuum caused a lock on db.\n\nThe journal mode of my places.sqlite is not WAL when it happens.\nBut it is locked.\n\n(In reply to comment #8)\n\n> it's unclear to me if this was the only change, commenting it out won't change\n> the journal mode of an existing db. \n\nFor places.sqlite, it will set journal_mode to truncate if it cannot set journal_mode to WAL.\nSee nsNavHistory.cpp.\nI changed\nif (NS_SUCCEEDED(SetJournalMode(JOURNAL_WAL))) {\nto\nif (0 && NS_SUCCEEDED(SetJournalMode(JOURNAL_WAL))) {", "creator": "ginnchen+exoracle@gmail.com", "bug_id": 633771, "text": "The last vacuum is Jan 20, so it could be vacuum caused a lock on db.\n\nThe journal mode of my places.sqlite is not WAL when it happens.\nBut it is locked.\n\n(In reply to comment #8)\n\n> it's unclear to me if this was the only change, commenting it out won't change\n> the journal mode of an existing db. \n\nFor places.sqlite, it will set journal_mode to truncate if it cannot set journal_mode to WAL.\nSee nsNavHistory.cpp.\nI changed\nif (NS_SUCCEEDED(SetJournalMode(JOURNAL_WAL))) {\nto\nif (0 && NS_SUCCEEDED(SetJournalMode(JOURNAL_WAL))) {", "is_private": false, "time": "2011-02-23T02:54:43Z", "author": "ginnchen+exoracle@gmail.com", "count": 9, "id": 5297711}, {"id": 5297716, "author": "mak@mozilla.com", "is_private": false, "bug_id": 633771, "attachment_id": null, "tags": [], "creation_time": "2011-02-23T03:02:02Z", "count": 10, "time": "2011-02-23T03:02:02Z", "text": "ok, that works.\nVacuum is likely to cause a lock, but not along all the night.", "creator": "mak@mozilla.com", "raw_text": "ok, that works.\nVacuum is likely to cause a lock, but not along all the night."}, {"raw_text": "I copied places.sqlite to another place, the page size is 32768.\nVacuum will lock the db for about 3 seconds.\n\nI've no idea what is holding the lock.", "creator": "ginnchen+exoracle@gmail.com", "text": "I copied places.sqlite to another place, the page size is 32768.\nVacuum will lock the db for about 3 seconds.\n\nI've no idea what is holding the lock.", "time": "2011-02-23T04:18:07Z", "count": 11, "tags": [], "creation_time": "2011-02-23T04:18:07Z", "attachment_id": null, "bug_id": 633771, "is_private": false, "author": "ginnchen+exoracle@gmail.com", "id": 5297783}, {"id": 5300832, "count": 12, "author": "ginnchen+exoracle@gmail.com", "time": "2011-02-24T04:05:06Z", "is_private": false, "text": "This problem came back again today.\nI think I'm going to reproduce it for everyday.\n\nWhen it happens, I cannot search in URL bar, and this time I've 2 threads looping.\nUnfortunately, I clicked close by accident.\nRestarting Firefox, the lock of db was gone.\n\nHow can I know which operation is locking the db?", "bug_id": 633771, "creator": "ginnchen+exoracle@gmail.com", "raw_text": "This problem came back again today.\nI think I'm going to reproduce it for everyday.\n\nWhen it happens, I cannot search in URL bar, and this time I've 2 threads looping.\nUnfortunately, I clicked close by accident.\nRestarting Firefox, the lock of db was gone.\n\nHow can I know which operation is locking the db?", "attachment_id": null, "creation_time": "2011-02-24T04:05:06Z", "tags": []}, {"creation_time": "2011-02-24T06:06:53Z", "tags": [], "attachment_id": null, "raw_text": "It's unlikely a problem of vacuum.\n\nMy storage.vacuum.last.places.sqlite is Feb 09.\n\nI tried to trigger idle daily, but the problem was not reproduced.", "creator": "ginnchen+exoracle@gmail.com", "bug_id": 633771, "text": "It's unlikely a problem of vacuum.\n\nMy storage.vacuum.last.places.sqlite is Feb 09.\n\nI tried to trigger idle daily, but the problem was not reproduced.", "is_private": false, "time": "2011-02-24T06:06:53Z", "author": "ginnchen+exoracle@gmail.com", "count": 13, "id": 5300990}, {"text": "Just reproduced again\n2 threads\nthread 1 is doing\n369       \"/* do not warn (bug 487787) */ \"\n370     + \"SELECT \"\n371     +  \"(SELECT REPLACE(url, '%s', :query_string) FROM moz_places WHERE id = b.fk) \"\n372     +  \"AS search_url, h.title, \"\n373     +  \"IFNULL(f.url, (SELECT f.url \"\n374     +                 \"FROM moz_places \"\n375     +                 \"JOIN moz_favicons f ON f.id = favicon_id \"\n376     +                 \"WHERE rev_host = (SELECT rev_host FROM moz_places WHERE id = b.fk) \"\n377     +                 \"ORDER BY frecency DESC \"\n378     +                 \"LIMIT 1) \"\n379     + \"), b.parent, b.title, NULL, h.visit_count, h.typed, IFNULL(h.id, b.fk), \"\n380     +  \":query_type, t.open_count \"\n381     +  \"FROM moz_keywords k \"\n382     +  \"JOIN moz_bookmarks b ON b.keyword_id = k.id \"\n383     +  \"LEFT JOIN moz_places h ON h.url = search_url \"\n384     +  \"LEFT JOIN moz_favicons f ON f.id = h.favicon_id \"\n385     +  \"LEFT JOIN moz_openpages_temp t ON t.url = search_url \"\n386     +  \"WHERE LOWER(k.keyword) = LOWER(:keyword) \"\n387     +  \"ORDER BY h.frecency DESC \"\n\nthread 2 is doing\nSELECT h.id FROM moz_places h WHERE url = ?1 AND EXISTS(SELECT id FROM\nmoz_historyvisits WHERE place_id = h.id LIMIT 1)", "raw_text": "Just reproduced again\n2 threads\nthread 1 is doing\n369       \"/* do not warn (bug 487787) */ \"\n370     + \"SELECT \"\n371     +  \"(SELECT REPLACE(url, '%s', :query_string) FROM moz_places WHERE id = b.fk) \"\n372     +  \"AS search_url, h.title, \"\n373     +  \"IFNULL(f.url, (SELECT f.url \"\n374     +                 \"FROM moz_places \"\n375     +                 \"JOIN moz_favicons f ON f.id = favicon_id \"\n376     +                 \"WHERE rev_host = (SELECT rev_host FROM moz_places WHERE id = b.fk) \"\n377     +                 \"ORDER BY frecency DESC \"\n378     +                 \"LIMIT 1) \"\n379     + \"), b.parent, b.title, NULL, h.visit_count, h.typed, IFNULL(h.id, b.fk), \"\n380     +  \":query_type, t.open_count \"\n381     +  \"FROM moz_keywords k \"\n382     +  \"JOIN moz_bookmarks b ON b.keyword_id = k.id \"\n383     +  \"LEFT JOIN moz_places h ON h.url = search_url \"\n384     +  \"LEFT JOIN moz_favicons f ON f.id = h.favicon_id \"\n385     +  \"LEFT JOIN moz_openpages_temp t ON t.url = search_url \"\n386     +  \"WHERE LOWER(k.keyword) = LOWER(:keyword) \"\n387     +  \"ORDER BY h.frecency DESC \"\n\nthread 2 is doing\nSELECT h.id FROM moz_places h WHERE url = ?1 AND EXISTS(SELECT id FROM\nmoz_historyvisits WHERE place_id = h.id LIMIT 1)", "creator": "ginnchen+exoracle@gmail.com", "time": "2011-02-24T06:25:42Z", "count": 14, "bug_id": 633771, "tags": [], "creation_time": "2011-02-24T06:25:42Z", "attachment_id": null, "id": 5301018, "author": "ginnchen+exoracle@gmail.com", "is_private": false}, {"id": 5301285, "is_private": false, "count": 15, "author": "mak@mozilla.com", "time": "2011-02-24T12:41:20Z", "bug_id": 633771, "text": "the first one is autocomplete search by keyword, the second one seems a isvisited query.\nideally these should never lock with WAL, but since you disabled WAL a lock could happen, now if the second query is the async isvisited it should still NOT lock. I guess it must be the synchronous one. the synchronous IsVisited() call seems to be used only by download history and by Sync. Do you have Sync enabled?", "attachment_id": null, "tags": [], "creation_time": "2011-02-24T12:41:20Z", "creator": "mak@mozilla.com", "raw_text": "the first one is autocomplete search by keyword, the second one seems a isvisited query.\nideally these should never lock with WAL, but since you disabled WAL a lock could happen, now if the second query is the async isvisited it should still NOT lock. I guess it must be the synchronous one. the synchronous IsVisited() call seems to be used only by download history and by Sync. Do you have Sync enabled?"}, {"raw_text": "And since this is not due to vacuum. I'm moving the bug to Places.", "creator": "mak@mozilla.com", "creation_time": "2011-02-24T12:43:11Z", "tags": [], "attachment_id": null, "text": "And since this is not due to vacuum. I'm moving the bug to Places.", "bug_id": 633771, "author": "mak@mozilla.com", "time": "2011-02-24T12:43:11Z", "count": 16, "is_private": false, "id": 5301288}, {"tags": [], "creation_time": "2011-02-24T17:19:30Z", "attachment_id": null, "raw_text": "(In reply to comment #15)\n> ideally these should never lock with WAL, but since you disabled WAL a lock\n> could happen, now if the second query is the async isvisited it should still\n> NOT lock. I guess it must be the synchronous one. the synchronous IsVisited()\n> call seems to be used only by download history and by Sync. Do you have Sync\n> enabled?\nIt will still lock, just not on the main thread.", "creator": "sdwilsh@forerunnerdesigns.com", "bug_id": 633771, "text": "(In reply to comment #15)\n> ideally these should never lock with WAL, but since you disabled WAL a lock\n> could happen, now if the second query is the async isvisited it should still\n> NOT lock. I guess it must be the synchronous one. the synchronous IsVisited()\n> call seems to be used only by download history and by Sync. Do you have Sync\n> enabled?\nIt will still lock, just not on the main thread.", "is_private": false, "time": "2011-02-24T17:19:30Z", "author": "sdwilsh@forerunnerdesigns.com", "count": 17, "id": 5301742}, {"is_private": false, "author": "ginnchen+exoracle@gmail.com", "time": "2011-02-25T01:15:44Z", "count": 18, "id": 5303168, "tags": [], "creation_time": "2011-02-25T01:15:44Z", "attachment_id": null, "raw_text": "I don't think either the 2 queries caused a lock of db.\n\nI reproduced the problem twice yesterday with following steps.\n\n1) Change idle daily time stamp back to 1-2 days earlier.\n2) Keep the computer idle for about 30 minutes\n3) Try to browse some pages.\n4) URL bar will not search history now. Problem reproduced.", "creator": "ginnchen+exoracle@gmail.com", "bug_id": 633771, "text": "I don't think either the 2 queries caused a lock of db.\n\nI reproduced the problem twice yesterday with following steps.\n\n1) Change idle daily time stamp back to 1-2 days earlier.\n2) Keep the computer idle for about 30 minutes\n3) Try to browse some pages.\n4) URL bar will not search history now. Problem reproduced."}, {"count": 19, "time": "2011-02-25T01:26:20Z", "creator": "ginnchen+exoracle@gmail.com", "raw_text": "I suspect places maintenance is the cause.", "text": "I suspect places maintenance is the cause.", "is_private": false, "author": "ginnchen+exoracle@gmail.com", "id": 5303190, "attachment_id": null, "creation_time": "2011-02-25T01:26:20Z", "tags": [], "bug_id": 633771}, {"id": 5308084, "is_private": false, "author": "ginnchen+exoracle@gmail.com", "time": "2011-02-28T08:46:24Z", "count": 20, "bug_id": 633771, "text": "I still have this problem with latest mozilla-central.\nplaces maintenance should not be the cause.\n\nI can see 4 fd for places.sqlite, 1 is RDWR, the other 3 are RDONLY.\n\none of the fd held EXCLUSIVE_LOCK of places.sqlite.", "creation_time": "2011-02-28T08:46:24Z", "tags": [], "attachment_id": null, "raw_text": "I still have this problem with latest mozilla-central.\nplaces maintenance should not be the cause.\n\nI can see 4 fd for places.sqlite, 1 is RDWR, the other 3 are RDONLY.\n\none of the fd held EXCLUSIVE_LOCK of places.sqlite.", "creator": "ginnchen+exoracle@gmail.com"}, {"id": 5310947, "time": "2011-03-01T07:59:34Z", "author": "ginnchen+exoracle@gmail.com", "count": 21, "is_private": false, "text": "(In reply to comment #20)\n> one of the fd held EXCLUSIVE_LOCK of places.sqlite.\n\nI meant PENDING_LOCK.\n\nI think it happened in this way.\nThread 1 is busy doing\nSELECT h.id FROM moz_places h WHERE url = ?1 AND EXISTS(SELECT id FROM\nmoz_historyvisits WHERE place_id = h.id LIMIT 1)\nwhile loading a page.\n\nThread 2 is doing a transaction for frecency or favicon.\n\nNow, thread 2 reserved a lock and then ask for exclusive lock, because thread 1 is doing a select, it can't get the exclusive lock, thread 2 gets a pending lock and returns BUSY.\nWe give up \"COMMIT TRANSACTION\" because of BUSY error, and we leave places.sqlite a pending lock.\nthread 2 returns.\n\nThread 1 can't get SHARED lock now, and it keeps trying.\nOther threads may also keep trying to get SHARED lock. URL bar doesn't work now.\nAnd since we sleep(0); it takes a lot of CPU time.\n\nTo fix it I think we should do a loop on BUSY for COMMIT.\nWe do that for ROLLBACK. We should do the same thing for COMMIT.\n\nAlso we might want to change PR_Sleep(0); to PR_Sleep(10); to decrease the waste of switching context.\nIt is quite common that we have 2 threading waiting for SHARED lock while another thread is committing.\n\nThis bug happens to some users on Solaris because ZFS might be quite slow on fsync(), especially on heavy IO.", "bug_id": 633771, "raw_text": "(In reply to comment #20)\n> one of the fd held EXCLUSIVE_LOCK of places.sqlite.\n\nI meant PENDING_LOCK.\n\nI think it happened in this way.\nThread 1 is busy doing\nSELECT h.id FROM moz_places h WHERE url = ?1 AND EXISTS(SELECT id FROM\nmoz_historyvisits WHERE place_id = h.id LIMIT 1)\nwhile loading a page.\n\nThread 2 is doing a transaction for frecency or favicon.\n\nNow, thread 2 reserved a lock and then ask for exclusive lock, because thread 1 is doing a select, it can't get the exclusive lock, thread 2 gets a pending lock and returns BUSY.\nWe give up \"COMMIT TRANSACTION\" because of BUSY error, and we leave places.sqlite a pending lock.\nthread 2 returns.\n\nThread 1 can't get SHARED lock now, and it keeps trying.\nOther threads may also keep trying to get SHARED lock. URL bar doesn't work now.\nAnd since we sleep(0); it takes a lot of CPU time.\n\nTo fix it I think we should do a loop on BUSY for COMMIT.\nWe do that for ROLLBACK. We should do the same thing for COMMIT.\n\nAlso we might want to change PR_Sleep(0); to PR_Sleep(10); to decrease the waste of switching context.\nIt is quite common that we have 2 threading waiting for SHARED lock while another thread is committing.\n\nThis bug happens to some users on Solaris because ZFS might be quite slow on fsync(), especially on heavy IO.", "creator": "ginnchen+exoracle@gmail.com", "creation_time": "2011-03-01T07:59:34Z", "tags": [], "attachment_id": null}, {"bug_id": 633771, "creation_time": "2011-03-01T08:03:19Z", "tags": [], "attachment_id": 515856, "id": 5310951, "author": "ginnchen+exoracle@gmail.com", "is_private": false, "text": "Created attachment 515856\npatch", "raw_text": "", "creator": "ginnchen+exoracle@gmail.com", "time": "2011-03-01T08:03:19Z", "count": 22}, {"count": 23, "author": "sdwilsh@forerunnerdesigns.com", "time": "2011-03-08T16:56:16Z", "is_private": false, "id": 5330331, "creator": "sdwilsh@forerunnerdesigns.com", "raw_text": "(In reply to comment #21)\n> To fix it I think we should do a loop on BUSY for COMMIT.\n> We do that for ROLLBACK. We should do the same thing for COMMIT.\nBut per bug 462173 comment 10, commits should always succeed.  I'm loathe to do this for such a common operation as COMMIT, especially given how often we end up on the calling it on the GUI thread still.", "attachment_id": null, "creation_time": "2011-03-08T16:56:16Z", "tags": [], "text": "(In reply to comment #21)\n> To fix it I think we should do a loop on BUSY for COMMIT.\n> We do that for ROLLBACK. We should do the same thing for COMMIT.\nBut per bug 462173 comment 10, commits should always succeed.  I'm loathe to do this for such a common operation as COMMIT, especially given how often we end up on the calling it on the GUI thread still.", "bug_id": 633771}, {"bug_id": 633771, "text": "If you are running on Solaris, you should have DTrace and so it should be quite feasible to create probes that show exactly what is happening, rather than just relying on inspection.  You would likely want to use pid probes and perhaps speculation() and friends.", "attachment_id": null, "creation_time": "2011-03-08T17:17:56Z", "tags": [], "creator": "bugmail@asutherland.org", "raw_text": "If you are running on Solaris, you should have DTrace and so it should be quite feasible to create probes that show exactly what is happening, rather than just relying on inspection.  You would likely want to use pid probes and perhaps speculation() and friends.", "id": 5330411, "is_private": false, "count": 24, "time": "2011-03-08T17:17:56Z", "author": "bugmail@asutherland.org"}, {"creator": "ginnchen+exoracle@gmail.com", "raw_text": "(In reply to comment #23)\n> (In reply to comment #21)\n> > To fix it I think we should do a loop on BUSY for COMMIT.\n> > We do that for ROLLBACK. We should do the same thing for COMMIT.\n> But per bug 462173 comment 10, commits should always succeed.  I'm loathe to do\n> this for such a common operation as COMMIT, especially given how often we end\n> up on the calling it on the GUI thread still.\n\nhttp://www.sqlite.org/lang_transaction.html\n\nAn attempt to execute COMMIT might also result in an SQLITE_BUSY return code if an another thread or process has a shared lock on the database that prevented the database from being updated. When COMMIT fails in this way, the transaction remains active and the COMMIT can be retried later after the reader has had a chance to clear.\n\nIf we don't retry for COMMIT, the COMMIT thread will reserve the lock, and no new shared lock is allowed for the db.\n\n(In reply to comment #24)\n> If you are running on Solaris, you should have DTrace and so it should be quite\n> feasible to create probes that show exactly what is happening, rather than just\n> relying on inspection.  You would likely want to use pid probes and perhaps\n> speculation() and friends.\n\nThe only problem is I didn't find a reliable way to reproduce the problem.\nDTrace would not help on that.", "text": "(In reply to comment #23)\n> (In reply to comment #21)\n> > To fix it I think we should do a loop on BUSY for COMMIT.\n> > We do that for ROLLBACK. We should do the same thing for COMMIT.\n> But per bug 462173 comment 10, commits should always succeed.  I'm loathe to do\n> this for such a common operation as COMMIT, especially given how often we end\n> up on the calling it on the GUI thread still.\n\nhttp://www.sqlite.org/lang_transaction.html\n\nAn attempt to execute COMMIT might also result in an SQLITE_BUSY return code if an another thread or process has a shared lock on the database that prevented the database from being updated. When COMMIT fails in this way, the transaction remains active and the COMMIT can be retried later after the reader has had a chance to clear.\n\nIf we don't retry for COMMIT, the COMMIT thread will reserve the lock, and no new shared lock is allowed for the db.\n\n(In reply to comment #24)\n> If you are running on Solaris, you should have DTrace and so it should be quite\n> feasible to create probes that show exactly what is happening, rather than just\n> relying on inspection.  You would likely want to use pid probes and perhaps\n> speculation() and friends.\n\nThe only problem is I didn't find a reliable way to reproduce the problem.\nDTrace would not help on that.", "count": 25, "time": "2011-03-09T02:50:46Z", "attachment_id": null, "tags": [], "creation_time": "2011-03-09T02:50:46Z", "bug_id": 633771, "author": "ginnchen+exoracle@gmail.com", "is_private": false, "id": 5332201}, {"count": 26, "time": "2011-03-09T03:17:47Z", "creator": "bugmail@asutherland.org", "raw_text": "(In reply to comment #25)\n> > If you are running on Solaris, you should have DTrace and so it should be quite\n> > feasible to create probes that show exactly what is happening, rather than just\n> > relying on inspection.  You would likely want to use pid probes and perhaps\n> > speculation() and friends.\n> \n> The only problem is I didn't find a reliable way to reproduce the problem.\n> DTrace would not help on that.\n\nRight, the idea is that DTrace with probes operating in speculative mode should have a limited performance overhead impact and only produce output in interesting circumstances so the additional human effort (after authoring the probes, of course :) is limited.\n\nBut more specifically, the proposed change to the PR_Sleep invocation seems like the type of proposal that would benefit from the kind of data that DTrace could easily gather (although it would be partially scheduler dependent).", "text": "(In reply to comment #25)\n> > If you are running on Solaris, you should have DTrace and so it should be quite\n> > feasible to create probes that show exactly what is happening, rather than just\n> > relying on inspection.  You would likely want to use pid probes and perhaps\n> > speculation() and friends.\n> \n> The only problem is I didn't find a reliable way to reproduce the problem.\n> DTrace would not help on that.\n\nRight, the idea is that DTrace with probes operating in speculative mode should have a limited performance overhead impact and only produce output in interesting circumstances so the additional human effort (after authoring the probes, of course :) is limited.\n\nBut more specifically, the proposed change to the PR_Sleep invocation seems like the type of proposal that would benefit from the kind of data that DTrace could easily gather (although it would be partially scheduler dependent).", "is_private": false, "author": "bugmail@asutherland.org", "id": 5332236, "attachment_id": null, "tags": [], "creation_time": "2011-03-09T03:17:47Z", "bug_id": 633771}, {"text": "A COMMIT can generate SQLITE_BUSY in one of the rollback journal modes, but not\nin PRAGMA journal_mode=WAL.  I thought you were using journal_mode=WAL.  Am I mistaken about that?", "raw_text": "A COMMIT can generate SQLITE_BUSY in one of the rollback journal modes, but not\nin PRAGMA journal_mode=WAL.  I thought you were using journal_mode=WAL.  Am I mistaken about that?", "creator": "drh@sqlite.org", "time": "2011-03-09T03:19:40Z", "count": 27, "bug_id": 633771, "tags": [], "creation_time": "2011-03-09T03:19:40Z", "attachment_id": null, "id": 5332238, "is_private": false, "author": "drh@sqlite.org"}, {"is_private": false, "author": "sdwilsh@forerunnerdesigns.com", "id": 5332243, "attachment_id": null, "tags": [], "creation_time": "2011-03-09T03:26:13Z", "bug_id": 633771, "count": 28, "time": "2011-03-09T03:26:13Z", "creator": "sdwilsh@forerunnerdesigns.com", "raw_text": "(In reply to comment #27)\n> A COMMIT can generate SQLITE_BUSY in one of the rollback journal modes, but not\n> in PRAGMA journal_mode=WAL.  I thought you were using journal_mode=WAL.  Am I\n> mistaken about that?\nWe are (although I understand it to be broken in OS/2 due to no shared memory being available).  Does it also not work in Solaris Ginn?", "text": "(In reply to comment #27)\n> A COMMIT can generate SQLITE_BUSY in one of the rollback journal modes, but not\n> in PRAGMA journal_mode=WAL.  I thought you were using journal_mode=WAL.  Am I\n> mistaken about that?\nWe are (although I understand it to be broken in OS/2 due to no shared memory being available).  Does it also not work in Solaris Ginn?"}, {"author": "ginnchen+exoracle@gmail.com", "is_private": false, "id": 5332253, "attachment_id": null, "creation_time": "2011-03-09T03:33:00Z", "tags": [], "bug_id": 633771, "count": 29, "time": "2011-03-09T03:33:00Z", "creator": "ginnchen+exoracle@gmail.com", "raw_text": "We didn't use WAL on Solaris because it doesn't work with NFS on Solaris.\n\nSo I comment out setting WAL. See comment #9.", "text": "We didn't use WAL on Solaris because it doesn't work with NFS on Solaris.\n\nSo I comment out setting WAL. See comment #9."}, {"text": "(In reply to comment #29)\n> We didn't use WAL on Solaris because it doesn't work with NFS on Solaris.\nWhat doesn't work about it?  The problem here is that a number of the architectural changes we made for Firefox 4 depend on WAL working.", "creator": "sdwilsh@forerunnerdesigns.com", "raw_text": "(In reply to comment #29)\n> We didn't use WAL on Solaris because it doesn't work with NFS on Solaris.\nWhat doesn't work about it?  The problem here is that a number of the architectural changes we made for Firefox 4 depend on WAL working.", "count": 30, "time": "2011-03-09T04:24:25Z", "bug_id": 633771, "attachment_id": null, "creation_time": "2011-03-09T04:24:25Z", "tags": [], "id": 5332301, "is_private": false, "author": "sdwilsh@forerunnerdesigns.com"}, {"raw_text": "On NFS/Solaris, mmap() for -shm file failed if -shm file is partial locked by fcntl().\nSee Bug 629296.\n\nWhat change in Firefox 4 depends on WAL?\nWhat's the result if WAL is disabled, besides this bug?", "creator": "ginnchen+exoracle@gmail.com", "text": "On NFS/Solaris, mmap() for -shm file failed if -shm file is partial locked by fcntl().\nSee Bug 629296.\n\nWhat change in Firefox 4 depends on WAL?\nWhat's the result if WAL is disabled, besides this bug?", "time": "2011-03-09T04:55:54Z", "count": 31, "tags": [], "creation_time": "2011-03-09T04:55:54Z", "attachment_id": null, "bug_id": 633771, "is_private": false, "author": "ginnchen+exoracle@gmail.com", "id": 5332340}, {"id": 5332440, "author": "sdwilsh@forerunnerdesigns.com", "is_private": false, "bug_id": 633771, "attachment_id": null, "creation_time": "2011-03-09T06:41:50Z", "tags": [], "count": 32, "time": "2011-03-09T06:41:50Z", "text": "(In reply to comment #31)\n> On NFS/Solaris, mmap() for -shm file failed if -shm file is partial locked by\n> fcntl().\n> See Bug 629296.\nOh right, I had forgotten about this.\n\n> What change in Firefox 4 depends on WAL?\nNamely the fact that we now have three database connections for Places (cookies also uses two database connections during initialization).  OS/2 has been having breakage issues as well (like bug 637115).\n\n> What's the result if WAL is disabled, besides this bug?\nLot's of locking and busy notifications in places that aren't designed to handle it (any synchronous database call, essentially).  The async API is actually decent about handling it because it does wait until busy isn't returned (with the exception of this bug).\n\nI need to spend time thinking about solutions here...", "creator": "sdwilsh@forerunnerdesigns.com", "raw_text": "(In reply to comment #31)\n> On NFS/Solaris, mmap() for -shm file failed if -shm file is partial locked by\n> fcntl().\n> See Bug 629296.\nOh right, I had forgotten about this.\n\n> What change in Firefox 4 depends on WAL?\nNamely the fact that we now have three database connections for Places (cookies also uses two database connections during initialization).  OS/2 has been having breakage issues as well (like bug 637115).\n\n> What's the result if WAL is disabled, besides this bug?\nLot's of locking and busy notifications in places that aren't designed to handle it (any synchronous database call, essentially).  The async API is actually decent about handling it because it does wait until busy isn't returned (with the exception of this bug).\n\nI need to spend time thinking about solutions here..."}, {"count": 33, "time": "2011-03-09T11:16:50Z", "author": "drh@sqlite.org", "is_private": false, "id": 5332732, "creator": "drh@sqlite.org", "raw_text": "We (the SQLite team) have a note on our to-do list to provide a version of WAL that uses heap memory instead of shared memory.  Such a heap-memory WAL would only allow a single process to connect (obviously - since only a single process would be able to see the heap) but multiple connections within multiple threads would still work from within that process.  Is this an enhancement that we should accelerate?", "attachment_id": null, "tags": [], "creation_time": "2011-03-09T11:16:50Z", "text": "We (the SQLite team) have a note on our to-do list to provide a version of WAL that uses heap memory instead of shared memory.  Such a heap-memory WAL would only allow a single process to connect (obviously - since only a single process would be able to see the heap) but multiple connections within multiple threads would still work from within that process.  Is this an enhancement that we should accelerate?", "bug_id": 633771}, {"id": 5335051, "count": 34, "time": "2011-03-10T02:51:53Z", "author": "ginnchen+exoracle@gmail.com", "is_private": false, "text": "I think heap-memory WAL will work for NFS/Solaris case.\nThat will be helpful for the performance.", "bug_id": 633771, "creator": "ginnchen+exoracle@gmail.com", "raw_text": "I think heap-memory WAL will work for NFS/Solaris case.\nThat will be helpful for the performance.", "attachment_id": null, "creation_time": "2011-03-10T02:51:53Z", "tags": []}, {"count": 35, "time": "2011-03-11T02:08:27Z", "creator": "sdwilsh@forerunnerdesigns.com", "raw_text": "If someone is explicitly calling Commit, they should handle this themselves.  However, if they are using autocommit, we should do the busy waiting in the destructor.\n\nYes, this differs from Rollback, but rollbacks are far less common than commits, so I want to be more conservative here.", "text": "Comment on attachment 515856\npatch\n\nIf someone is explicitly calling Commit, they should handle this themselves.  However, if they are using autocommit, we should do the busy waiting in the destructor.\n\nYes, this differs from Rollback, but rollbacks are far less common than commits, so I want to be more conservative here.", "is_private": false, "author": "sdwilsh@forerunnerdesigns.com", "id": 5338120, "attachment_id": 515856, "tags": [], "creation_time": "2011-03-11T02:08:27Z", "bug_id": 633771}, {"raw_text": "If the BUSY error is not handled, it will leave the db unusable.\nThe error must be handled somewhere.\nWe'd better guarantee that it is handled in mozStorageTransaction.", "creator": "ginnchen+exoracle@gmail.com", "text": "If the BUSY error is not handled, it will leave the db unusable.\nThe error must be handled somewhere.\nWe'd better guarantee that it is handled in mozStorageTransaction.", "time": "2011-03-16T02:16:18Z", "count": 36, "creation_time": "2011-03-16T02:16:18Z", "tags": [], "attachment_id": null, "bug_id": 633771, "is_private": false, "author": "ginnchen+exoracle@gmail.com", "id": 5347457}, {"raw_text": "(In reply to comment #36)\n> If the BUSY error is not handled, it will leave the db unusable.\n> The error must be handled somewhere.\n> We'd better guarantee that it is handled in mozStorageTransaction.\nIf the consumer is relying on autocommit, I agree.  However, like I said in comment 35, if they call Commit explicitly, we need to not busy wait for them.", "creator": "sdwilsh@forerunnerdesigns.com", "tags": [], "creation_time": "2011-03-16T02:21:04Z", "attachment_id": null, "text": "(In reply to comment #36)\n> If the BUSY error is not handled, it will leave the db unusable.\n> The error must be handled somewhere.\n> We'd better guarantee that it is handled in mozStorageTransaction.\nIf the consumer is relying on autocommit, I agree.  However, like I said in comment 35, if they call Commit explicitly, we need to not busy wait for them.", "bug_id": 633771, "time": "2011-03-16T02:21:04Z", "author": "sdwilsh@forerunnerdesigns.com", "count": 37, "is_private": false, "id": 5347460}, {"raw_text": "(In reply to comment #37)\n> If the consumer is relying on autocommit, I agree.  However, like I said in\n> comment 35, if they call Commit explicitly, we need to not busy wait for them.\n\nThen probably we should set mCompleted to false for BUSY to make sure it is handled, right?", "creator": "ginnchen+exoracle@gmail.com", "creation_time": "2011-03-16T02:28:21Z", "tags": [], "attachment_id": null, "text": "(In reply to comment #37)\n> If the consumer is relying on autocommit, I agree.  However, like I said in\n> comment 35, if they call Commit explicitly, we need to not busy wait for them.\n\nThen probably we should set mCompleted to false for BUSY to make sure it is handled, right?", "bug_id": 633771, "author": "ginnchen+exoracle@gmail.com", "time": "2011-03-16T02:28:21Z", "count": 38, "is_private": false, "id": 5347468}, {"id": 5347527, "is_private": false, "time": "2011-03-16T03:50:25Z", "author": "sdwilsh@forerunnerdesigns.com", "count": 39, "bug_id": 633771, "text": "(In reply to comment #38)\n> Then probably we should set mCompleted to false for BUSY to make sure it is\n> handled, right?\nThere is most certainly a bug in how we use mCompleted now.  Please also add a test for this in https://mxr.mozilla.org/mozilla-central/source/storage/test/test_transaction_helper.cpp", "tags": [], "creation_time": "2011-03-16T03:50:25Z", "attachment_id": null, "raw_text": "(In reply to comment #38)\n> Then probably we should set mCompleted to false for BUSY to make sure it is\n> handled, right?\nThere is most certainly a bug in how we use mCompleted now.  Please also add a test for this in https://mxr.mozilla.org/mozilla-central/source/storage/test/test_transaction_helper.cpp", "creator": "sdwilsh@forerunnerdesigns.com"}]}}, "comments": {}}