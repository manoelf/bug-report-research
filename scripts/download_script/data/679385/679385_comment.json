{"comments": {}, "bugs": {"679385": {"comments": [{"id": 5657283, "bug_id": 679385, "creation_time": "2011-08-16T16:37:30Z", "is_private": false, "creator": "joey@mozilla.com", "count": 0, "text": "Several libs:: targets in config/rules.mk are using a shell for loop with embedded `basename` calls for iteration and target processing.\n\nA few edits made in libs:: and the Preprocessor.py script could reduce volume of commands that are being run:\n  o Replace `basename` with $(notdir) and declare new macros containing a list of targets to process in place of shel variable assignment\n  o Remove all '$$dest' files with a single command/remove loop.  If cmd line length is a problem use xargs or a response file.\n  o Modify Preprocessor.py\n    - iterate over a given list of files or contents of a response file\n    - have python delete detstionation file then regenerate\n    - optimal - preserve timestamps by not removing $$dest at all.  Preprocessor.py can generate content, compare and only overwrite when changes are detected.\n\n\nIf timestamps are preserved on generated files the next optimization can be only consider files { contents of the response file } when deps have changed or do not exist, else exclude as a nop.", "author": "joey@mozilla.com", "tags": [], "time": "2011-08-16T16:37:30Z", "raw_text": "Several libs:: targets in config/rules.mk are using a shell for loop with embedded `basename` calls for iteration and target processing.\n\nA few edits made in libs:: and the Preprocessor.py script could reduce volume of commands that are being run:\n  o Replace `basename` with $(notdir) and declare new macros containing a list of targets to process in place of shel variable assignment\n  o Remove all '$$dest' files with a single command/remove loop.  If cmd line length is a problem use xargs or a response file.\n  o Modify Preprocessor.py\n    - iterate over a given list of files or contents of a response file\n    - have python delete detstionation file then regenerate\n    - optimal - preserve timestamps by not removing $$dest at all.  Preprocessor.py can generate content, compare and only overwrite when changes are detected.\n\n\nIf timestamps are preserved on generated files the next optimization can be only consider files { contents of the response file } when deps have changed or do not exist, else exclude as a nop.", "attachment_id": null}]}}}