{"comments": {}, "bugs": {"683051": {"comments": [{"id": 5686650, "raw_text": "Cameron pointed out http://dev.w3.org/2006/webapi/WebIDL/#idl-sequence today, which forbids JS arrays as attributes.  mozCurrentTransform, mozCurrentTransformInverse, and mozDash are all JS-array attributes.  Whups!\n\nThe simplest fix here is probably to make explicit get/set functions.  I would rather not add an interface for the canvas transform or dash objects.\n\nThis needs to be fixed (and pdf.js!) before we pitch these for standardization.", "attachment_id": null, "text": "Cameron pointed out http://dev.w3.org/2006/webapi/WebIDL/#idl-sequence today, which forbids JS arrays as attributes.  mozCurrentTransform, mozCurrentTransformInverse, and mozDash are all JS-array attributes.  Whups!\n\nThe simplest fix here is probably to make explicit get/set functions.  I would rather not add an interface for the canvas transform or dash objects.\n\nThis needs to be fixed (and pdf.js!) before we pitch these for standardization.", "bug_id": 683051, "tags": [], "time": "2011-08-30T00:38:34Z", "creation_time": "2011-08-30T00:38:34Z", "author": "cjones.bugs@gmail.com", "count": 0, "is_private": false, "creator": "cjones.bugs@gmail.com"}, {"id": 5822724, "raw_text": "Howdy folks: these new canvas interfaces have gone too long without being proposed to whatwg.  I started to write the proposal today, but I forgot about this bug.  But question:\n\nfor what's currently implemented in Gecko as\n\n  attribute jsval fooArray;\n\nwhere getting |fooArray| returns a freshly-allocated array, is there a better pattern for fixing this than\n\n  jsval getFooArray();\n  void setFoorArray(jsval);\n\n?  That seems ugly to me, but definitely superior to defining a FooArray interface with a single instance as the mutable property |fooArray|.", "attachment_id": null, "tags": [], "bug_id": 683051, "time": "2011-11-03T02:16:53Z", "text": "Howdy folks: these new canvas interfaces have gone too long without being proposed to whatwg.  I started to write the proposal today, but I forgot about this bug.  But question:\n\nfor what's currently implemented in Gecko as\n\n  attribute jsval fooArray;\n\nwhere getting |fooArray| returns a freshly-allocated array, is there a better pattern for fixing this than\n\n  jsval getFooArray();\n  void setFoorArray(jsval);\n\n?  That seems ugly to me, but definitely superior to defining a FooArray interface with a single instance as the mutable property |fooArray|.", "author": "cjones.bugs@gmail.com", "creation_time": "2011-11-03T02:16:53Z", "count": 1, "creator": "cjones.bugs@gmail.com", "is_private": false}, {"count": 2, "bug_id": 683051, "attachment_id": null, "raw_text": "Yeah, if webidl won't allow array attributes, then having a getter and setter seems like the way to go....", "id": 5822735, "creator": "bzbarsky@mit.edu", "is_private": false, "author": "bzbarsky@mit.edu", "creation_time": "2011-11-03T02:20:56Z", "tags": [], "time": "2011-11-03T02:20:56Z", "text": "Yeah, if webidl won't allow array attributes, then having a getter and setter seems like the way to go...."}, {"author": "roc@ocallahan.org", "creation_time": "2011-11-03T02:32:08Z", "tags": [], "time": "2011-11-03T02:32:08Z", "bug_id": 683051, "text": "Given we've already got setTransform, what if we just added a getTransform that returns an SVGMatrix (DOMSVGMatrix in Gecko)?\n\nSVGMatrix has an inverse() method that returns the inverse so a separate getTransformInverse is probably not necessary.\n\nDo we set mozCurrentTransformInverse? If so, I'd just add a setTransform overload that takes an SVGMatrix and call setTransform(matrix.inverse()).\n\nIt might also make sense to have an SVGMatrix constructor that takes six float parameters.", "creator": "roc@ocallahan.org", "is_private": false, "count": 3, "id": 5822739, "attachment_id": null, "raw_text": "Given we've already got setTransform, what if we just added a getTransform that returns an SVGMatrix (DOMSVGMatrix in Gecko)?\n\nSVGMatrix has an inverse() method that returns the inverse so a separate getTransformInverse is probably not necessary.\n\nDo we set mozCurrentTransformInverse? If so, I'd just add a setTransform overload that takes an SVGMatrix and call setTransform(matrix.inverse()).\n\nIt might also make sense to have an SVGMatrix constructor that takes six float parameters."}, {"id": 5822740, "raw_text": "I guess I'm saying that using SVGMatrix instead of an array seems like a good solution, and the fact that it has an inverse() method means we probably don't need separate canvas methods for inverses.", "attachment_id": null, "text": "I guess I'm saying that using SVGMatrix instead of an array seems like a good solution, and the fact that it has an inverse() method means we probably don't need separate canvas methods for inverses.", "time": "2011-11-03T02:33:27Z", "bug_id": 683051, "tags": [], "creation_time": "2011-11-03T02:33:27Z", "author": "roc@ocallahan.org", "count": 4, "is_private": false, "creator": "roc@ocallahan.org"}, {"attachment_id": null, "raw_text": "It seems somewhat weird for canvas to use basic SVG datatypes.  I suspect that will be a bikeshedfest in standards bodies.\n\nDoesn't that also incompatibly change the definition of setTransform()?  Or do you have a magic-sauce API in mind that does the right thing with either variant.", "id": 5822742, "is_private": false, "creator": "cjones.bugs@gmail.com", "creation_time": "2011-11-03T02:37:44Z", "author": "cjones.bugs@gmail.com", "text": "It seems somewhat weird for canvas to use basic SVG datatypes.  I suspect that will be a bikeshedfest in standards bodies.\n\nDoesn't that also incompatibly change the definition of setTransform()?  Or do you have a magic-sauce API in mind that does the right thing with either variant.", "tags": [], "time": "2011-11-03T02:37:44Z", "count": 5, "bug_id": 683051}, {"id": 5822754, "attachment_id": null, "raw_text": "(In reply to Chris Jones [:cjones] [:warhammer] from comment #5)\n> It seems somewhat weird for canvas to use basic SVG datatypes.  I suspect\n> that will be a bikeshedfest in standards bodies.\n\nI don't think so. SVGMatrix already exists, the only question is whether to use it here or not, and I can't see the SVG WG objecting to that.\n\n> Doesn't that also incompatibly change the definition of setTransform()?  Or\n> do you have a magic-sauce API in mind that does the right thing with either\n> variant.\n\nI think we can overload setTransform here.", "creation_time": "2011-11-03T02:49:05Z", "author": "roc@ocallahan.org", "text": "(In reply to Chris Jones [:cjones] [:warhammer] from comment #5)\n> It seems somewhat weird for canvas to use basic SVG datatypes.  I suspect\n> that will be a bikeshedfest in standards bodies.\n\nI don't think so. SVGMatrix already exists, the only question is whether to use it here or not, and I can't see the SVG WG objecting to that.\n\n> Doesn't that also incompatibly change the definition of setTransform()?  Or\n> do you have a magic-sauce API in mind that does the right thing with either\n> variant.\n\nI think we can overload setTransform here.", "bug_id": 683051, "tags": [], "time": "2011-11-03T02:49:05Z", "is_private": false, "creator": "roc@ocallahan.org", "count": 6}, {"author": "cjones.bugs@gmail.com", "creation_time": "2011-11-03T07:33:18Z", "tags": [], "time": "2011-11-03T07:33:18Z", "text": "Proposals sent off to whatwg\n\nhttp://lists.whatwg.org/htdig.cgi/whatwg-whatwg.org/2011-November/033744.html\nhttp://lists.whatwg.org/htdig.cgi/whatwg-whatwg.org/2011-November/033745.html\n\nWill do follow-up cleanups here when those stabilize.", "creator": "cjones.bugs@gmail.com", "is_private": false, "id": 5823020, "attachment_id": null, "raw_text": "Proposals sent off to whatwg\n\nhttp://lists.whatwg.org/htdig.cgi/whatwg-whatwg.org/2011-November/033744.html\nhttp://lists.whatwg.org/htdig.cgi/whatwg-whatwg.org/2011-November/033745.html\n\nWill do follow-up cleanups here when those stabilize.", "bug_id": 683051, "count": 7}, {"creation_time": "2011-11-05T17:32:12Z", "author": "cam@mcc.id.au", "text": "BTW, we discussed during the FX taskforce meeting this week (the joint CSS/SVG group) merging SVGMatrix and CSSMatrix at some point soon (they are mostly compatible).  Dean Jackson is going to write up a proposal for doing so, but I'm not sure what the timeframe is there.  Either way, I think using SVGMatrix for currentTransform is fine.", "tags": [], "time": "2011-11-05T17:32:12Z", "is_private": false, "creator": "cam@mcc.id.au", "id": 5828606, "attachment_id": null, "raw_text": "BTW, we discussed during the FX taskforce meeting this week (the joint CSS/SVG group) merging SVGMatrix and CSSMatrix at some point soon (they are mostly compatible).  Dean Jackson is going to write up a proposal for doing so, but I'm not sure what the timeframe is there.  Either way, I think using SVGMatrix for currentTransform is fine.", "bug_id": 683051, "count": 8}]}}}