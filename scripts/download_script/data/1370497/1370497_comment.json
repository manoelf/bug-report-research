{"bugs": {"1370497": {"comments": [{"id": 12375146, "attachment_id": 8874786, "count": 0, "creator": "rayyanh12@gmail.com", "author": "rayyanh12@gmail.com", "raw_text": "User Agent: Mozilla/5.0 (Windows NT 6.3; WOW64; rv:53.0) Gecko/20100101 Firefox/53.0\nBuild ID: 20170518000419\nFirefox for Android\n\nSteps to reproduce:\n\nhttp://xn--google-yri.com/ \n\n\nActual results:\n\nBy adding this *\u0650* (notice the weird thing under asterisk) we can actually spoof the URL (espicially the inexperienced users)\n\nMore info:\nU+0650, ARABIC KASRA\n\n\nExpected results:\n\nThe URL should be shown in PunnyCode or these letters should be banned.", "is_private": false, "bug_id": 1370497, "tags": [], "time": "2017-06-06T10:56:57Z", "creation_time": "2017-06-06T10:56:57Z", "text": "Created attachment 8874786\nPoC.png\n\nUser Agent: Mozilla/5.0 (Windows NT 6.3; WOW64; rv:53.0) Gecko/20100101 Firefox/53.0\nBuild ID: 20170518000419\nFirefox for Android\n\nSteps to reproduce:\n\nhttp://xn--google-yri.com/ \n\n\nActual results:\n\nBy adding this *\u0650* (notice the weird thing under asterisk) we can actually spoof the URL (espicially the inexperienced users)\n\nMore info:\nU+0650, ARABIC KASRA\n\n\nExpected results:\n\nThe URL should be shown in PunnyCode or these letters should be banned."}, {"tags": [], "time": "2017-06-07T13:07:10Z", "text": "jfkthame: bug 1370504 is also related. \n\nSo presumably this is because we allow any single script plus Latin. This seems like the tip of the iceberg; various scripts are going to have all sorts of combining modifiers which one can match up with a Latin letter which happens to have pixels in the right place to hide it. \n\nCan we enforce that Arabic modifiers only go on Arabic letters, and so on?\n\nGerv", "attachment_id": null, "author": "gerv@mozilla.org", "is_private": false, "creation_time": "2017-06-07T13:07:10Z", "id": 12379087, "count": 1, "creator": "gerv@mozilla.org", "raw_text": "jfkthame: bug 1370504 is also related. \n\nSo presumably this is because we allow any single script plus Latin. This seems like the tip of the iceberg; various scripts are going to have all sorts of combining modifiers which one can match up with a Latin letter which happens to have pixels in the right place to hide it. \n\nCan we enforce that Arabic modifiers only go on Arabic letters, and so on?\n\nGerv", "bug_id": 1370497}, {"time": "2017-06-07T15:55:14Z", "tags": [], "creation_time": "2017-06-07T15:55:14Z", "text": "(In reply to Gervase Markham [:gerv] from comment #1)\n> jfkthame: bug 1370504 is also related. \n> \n> So presumably this is because we allow any single script plus Latin. This\n> seems like the tip of the iceberg; various scripts are going to have all\n> sorts of combining modifiers which one can match up with a Latin letter\n> which happens to have pixels in the right place to hide it. \n> \n> Can we enforce that Arabic modifiers only go on Arabic letters, and so on?\n\nPossibly, though it's not quite that simple (the Arabic vowel marks are also used in Syriac, for example).\n\nI'm not sure we even have to look at other scripts to find diacritic-based \"spoofs\"; there are small, easily-overlooked diacritics in the Combining Marks block at U+03xx that I suspect many users would miss. Consider something like https://www.xn--google-e4d.com/ ... this has a combining dot under the second \"g\", but it's hardly noticeable.\n\nAnd then there are delights such as https://www.xn--mozlla-r9a478a.com/. Do domain registrars have policies that disallow things like this? AFAICS the IDN rules would permit it...", "count": 2, "id": 12379622, "attachment_id": null, "raw_text": "(In reply to Gervase Markham [:gerv] from comment #1)\n> jfkthame: bug 1370504 is also related. \n> \n> So presumably this is because we allow any single script plus Latin. This\n> seems like the tip of the iceberg; various scripts are going to have all\n> sorts of combining modifiers which one can match up with a Latin letter\n> which happens to have pixels in the right place to hide it. \n> \n> Can we enforce that Arabic modifiers only go on Arabic letters, and so on?\n\nPossibly, though it's not quite that simple (the Arabic vowel marks are also used in Syriac, for example).\n\nI'm not sure we even have to look at other scripts to find diacritic-based \"spoofs\"; there are small, easily-overlooked diacritics in the Combining Marks block at U+03xx that I suspect many users would miss. Consider something like https://www.xn--google-e4d.com/ ... this has a combining dot under the second \"g\", but it's hardly noticeable.\n\nAnd then there are delights such as https://www.xn--mozlla-r9a478a.com/. Do domain registrars have policies that disallow things like this? AFAICS the IDN rules would permit it...", "author": "jfkthame@gmail.com", "creator": "jfkthame@gmail.com", "bug_id": 1370497, "is_private": false}, {"creation_time": "2017-06-09T10:03:28Z", "count": 3, "id": 12385579, "raw_text": "", "creator": "jfkthame@gmail.com", "bug_id": 1370497, "time": "2017-06-09T10:03:28Z", "tags": [], "text": "*** Bug 1366444 has been marked as a duplicate of this bug. ***", "attachment_id": null, "author": "jfkthame@gmail.com", "is_private": false}, {"tags": [], "time": "2017-06-09T13:52:29Z", "text": "Domain registrars should, and often do, have policies which check if a registration is homographic with another registration. But this is different - this is adding a tiny extra combining mark and hoping it doesn't get noticed. So they homographs are not exact in in that sense, and probably won't be detected by the standard algorithm. But visually, the results are still very similar.\n\nSo I think we have an issue that this is a form of spoofing which is not entirely addressed by the current algorithms. Now, my understanding is (correct me if I'm wrong) that these small dots and combining marks and so on are all allocated to one or more scripts in the Unicode Character Database. Is that right? If so, why doesn't our script mixing code detect this? Are some of these dots allocated to Latin? Or is it because we allow \"Latin plus one other\", and so \"Latin plus a random combining mark\" will always be allowed?\n\nGerv", "creation_time": "2017-06-09T13:52:29Z", "attachment_id": null, "id": 12386135, "count": 4, "is_private": false, "bug_id": 1370497, "creator": "gerv@mozilla.org", "author": "gerv@mozilla.org", "raw_text": "Domain registrars should, and often do, have policies which check if a registration is homographic with another registration. But this is different - this is adding a tiny extra combining mark and hoping it doesn't get noticed. So they homographs are not exact in in that sense, and probably won't be detected by the standard algorithm. But visually, the results are still very similar.\n\nSo I think we have an issue that this is a form of spoofing which is not entirely addressed by the current algorithms. Now, my understanding is (correct me if I'm wrong) that these small dots and combining marks and so on are all allocated to one or more scripts in the Unicode Character Database. Is that right? If so, why doesn't our script mixing code detect this? Are some of these dots allocated to Latin? Or is it because we allow \"Latin plus one other\", and so \"Latin plus a random combining mark\" will always be allowed?\n\nGerv"}, {"text": "Generally, combining marks are considered to \"inherit\" the script property of the base character to which they're applied, and can in principle be used with any script. There are some -- e.g. from Arabic and Indic scripts -- that have one or more specific scripts with which they're normally associated (listed in ScriptExtensions.txt), but the general Combining Marks block (at U+03xx) is for the most part entirely script-agnostic. Something like \"combining dot below\" certainly has legitimate usage in Latin script, so there's no expectation that script-mixing prohibitions would be relevant.\n\nThe original report here relates to an Arabic vowel mark, which is also used in Syriac, but arguably should not be combined with Latin letters (it's not \"wrong\" to do so, in strictly Unicode terms, but it's sufficiently implausible that IDN rules could reasonably block it). But the more general issue of small, easily-overlooked diacritics can't be fixed that way, as many of them are truly generic -- or even primarily (though not exclusively) used with Latin script.", "time": "2017-06-09T17:24:26Z", "tags": [], "is_private": false, "author": "jfkthame@gmail.com", "attachment_id": null, "creation_time": "2017-06-09T17:24:26Z", "bug_id": 1370497, "raw_text": "Generally, combining marks are considered to \"inherit\" the script property of the base character to which they're applied, and can in principle be used with any script. There are some -- e.g. from Arabic and Indic scripts -- that have one or more specific scripts with which they're normally associated (listed in ScriptExtensions.txt), but the general Combining Marks block (at U+03xx) is for the most part entirely script-agnostic. Something like \"combining dot below\" certainly has legitimate usage in Latin script, so there's no expectation that script-mixing prohibitions would be relevant.\n\nThe original report here relates to an Arabic vowel mark, which is also used in Syriac, but arguably should not be combined with Latin letters (it's not \"wrong\" to do so, in strictly Unicode terms, but it's sufficiently implausible that IDN rules could reasonably block it). But the more general issue of small, easily-overlooked diacritics can't be fixed that way, as many of them are truly generic -- or even primarily (though not exclusively) used with Latin script.", "creator": "jfkthame@gmail.com", "count": 5, "id": 12386842}, {"text": "Hmm.\n\nIt seems like there are a few ways we could go here.\n\nFirstly, we could try and improve font rendering technology in some way such that such marks were more obvious when used - e.g. if they overlapped an existing bit of a letter, they didn't just disappear. This would be a Firefox (or graphite2?) fix (and a complex one).\n\nSecondly, we could just disallow most combining marks, perhaps with a whitelist of those which were script-specific. People making domain names would need to use precomposed characters, or just not use the mark (just as e.g. English names can't have an apostrophe in LDH domain names). This has the risk of upsetting one or more language communities, particularly as ISTR that Unicode has gone backwards and forwards on whether scripts require precomposed versions of common letter+mark combos, and so some scripts may have them and others may not. \n\nThirdly, we could try and develop a set of rules about where combining marks were allowed. This would probably involve the Unicode Consortium, either by getting them to better classify the allowed scripts for the generic combining marks (perhaps in an advisory rather than a normative way), or even by enumerating the allowed letters for each mark. These rules could either be implemented in browsers (as they don't require knowledge of all existing domain names, as homograph algorithms do) or by registries. The risk here is ending up with a massive data table that you need to ship to solve a very niche problem.\n\nDo we need to consult the usual suspects at the Unicode Consortium to ask them for advice at this point?\n\nGerv", "time": "2017-06-12T16:05:41Z", "tags": [], "author": "gerv@mozilla.org", "is_private": false, "attachment_id": null, "creation_time": "2017-06-12T16:05:41Z", "raw_text": "Hmm.\n\nIt seems like there are a few ways we could go here.\n\nFirstly, we could try and improve font rendering technology in some way such that such marks were more obvious when used - e.g. if they overlapped an existing bit of a letter, they didn't just disappear. This would be a Firefox (or graphite2?) fix (and a complex one).\n\nSecondly, we could just disallow most combining marks, perhaps with a whitelist of those which were script-specific. People making domain names would need to use precomposed characters, or just not use the mark (just as e.g. English names can't have an apostrophe in LDH domain names). This has the risk of upsetting one or more language communities, particularly as ISTR that Unicode has gone backwards and forwards on whether scripts require precomposed versions of common letter+mark combos, and so some scripts may have them and others may not. \n\nThirdly, we could try and develop a set of rules about where combining marks were allowed. This would probably involve the Unicode Consortium, either by getting them to better classify the allowed scripts for the generic combining marks (perhaps in an advisory rather than a normative way), or even by enumerating the allowed letters for each mark. These rules could either be implemented in browsers (as they don't require knowledge of all existing domain names, as homograph algorithms do) or by registries. The risk here is ending up with a massive data table that you need to ship to solve a very niche problem.\n\nDo we need to consult the usual suspects at the Unicode Consortium to ask them for advice at this point?\n\nGerv", "creator": "gerv@mozilla.org", "bug_id": 1370497, "count": 6, "id": 12391059}, {"bug_id": 1370497, "is_private": false, "raw_text": "", "creator": "gijskruitbosch+bugs@gmail.com", "author": "gijskruitbosch+bugs@gmail.com", "count": 7, "attachment_id": null, "id": 12396787, "text": "*** Bug 1371812 has been marked as a duplicate of this bug. ***", "creation_time": "2017-06-14T08:48:02Z", "time": "2017-06-14T08:48:02Z", "tags": []}, {"count": 8, "id": 12400070, "attachment_id": null, "bug_id": 1370497, "is_private": false, "raw_text": "(In reply to Gervase Markham [:gerv] from comment #6)\n> Firstly, we could try and improve font rendering technology in some way such\n> that such marks were more obvious when used - e.g. if they overlapped an\n> existing bit of a letter, they didn't just disappear. This would be a\n> Firefox (or graphite2?) fix (and a complex one).\n\nIn the case of KASRA I don't see it at all in the URL bar on Mac: it seems to be below the visible area. If I click on http://xn--google-yri.com/ I see it in the body text of the Server Not Found page (almost looks like a spec of dust on my screen), but not where it matters in the address bar. The two examples in comment 2 are visible. Easy to miss for sure, but at least the differences are there for the eagle-eyed.\n\n> Do we need to consult the usual suspects at the Unicode Consortium to ask\n> them for advice at this point?\n\nProbably for the best.\n\nHow does the KASRA character look on Windows? Since that's where most people are that's probably the one the determines if we call this sec-moderate or sec-high.", "creator": "dveditz@mozilla.com", "author": "dveditz@mozilla.com", "time": "2017-06-15T07:41:59Z", "tags": [], "text": "(In reply to Gervase Markham [:gerv] from comment #6)\n> Firstly, we could try and improve font rendering technology in some way such\n> that such marks were more obvious when used - e.g. if they overlapped an\n> existing bit of a letter, they didn't just disappear. This would be a\n> Firefox (or graphite2?) fix (and a complex one).\n\nIn the case of KASRA I don't see it at all in the URL bar on Mac: it seems to be below the visible area. If I click on http://xn--google-yri.com/ I see it in the body text of the Server Not Found page (almost looks like a spec of dust on my screen), but not where it matters in the address bar. The two examples in comment 2 are visible. Easy to miss for sure, but at least the differences are there for the eagle-eyed.\n\n> Do we need to consult the usual suspects at the Unicode Consortium to ask\n> them for advice at this point?\n\nProbably for the best.\n\nHow does the KASRA character look on Windows? Since that's where most people are that's probably the one the determines if we call this sec-moderate or sec-high.", "creation_time": "2017-06-15T07:41:59Z"}, {"text": "*** Bug 1376242 has been marked as a duplicate of this bug. ***", "time": "2017-06-26T21:48:49Z", "tags": [], "author": "gerv@mozilla.org", "is_private": false, "attachment_id": null, "creation_time": "2017-06-26T21:48:49Z", "raw_text": "", "creator": "gerv@mozilla.org", "bug_id": 1370497, "count": 9, "id": 12430415}, {"tags": ["off-topic"], "time": "2017-08-09T14:06:53Z", "creation_time": "2017-08-09T14:06:53Z", "text": "Any update?", "attachment_id": null, "id": 12550431, "count": 10, "author": "rayyanh12@gmail.com", "creator": "rayyanh12@gmail.com", "raw_text": "Any update?", "is_private": false, "bug_id": 1370497}, {"raw_text": "", "author": "dveditz@mozilla.com", "creator": "dveditz@mozilla.com", "bug_id": 1370497, "is_private": false, "count": 11, "attachment_id": null, "id": 12596952, "creation_time": "2017-08-24T18:04:58Z", "text": "*** Bug 1392193 has been marked as a duplicate of this bug. ***", "time": "2017-08-24T18:04:58Z", "tags": []}, {"text": "*** Bug 1392188 has been marked as a duplicate of this bug. ***", "creation_time": "2017-08-24T18:08:40Z", "tags": [], "time": "2017-08-24T18:08:40Z", "is_private": false, "bug_id": 1370497, "creator": "dveditz@mozilla.com", "author": "dveditz@mozilla.com", "raw_text": "", "attachment_id": null, "id": 12596972, "count": 12}, {"text": "*** Bug 1397704 has been marked as a duplicate of this bug. ***", "creation_time": "2017-09-10T19:10:34Z", "time": "2017-09-10T19:10:34Z", "tags": [], "bug_id": 1370497, "is_private": false, "raw_text": "", "author": "jfkthame@gmail.com", "creator": "jfkthame@gmail.com", "count": 13, "attachment_id": null, "id": 12644664}, {"id": 12678636, "count": 14, "bug_id": 1370497, "creator": "jfkthame@gmail.com", "raw_text": "", "creation_time": "2017-09-18T20:11:25Z", "attachment_id": null, "is_private": false, "author": "jfkthame@gmail.com", "tags": [], "time": "2017-09-18T20:11:25Z", "text": "*** Bug 1400622 has been marked as a duplicate of this bug. ***"}, {"tags": [], "time": "2017-09-18T20:12:57Z", "creation_time": "2017-09-18T20:12:57Z", "text": "See https://bugs.chromium.org/p/chromium/issues/detail?id=729979 for some mitigation the Chromium folk have implemented, although AFAICT it's not a complete solution to the general issue.", "id": 12678644, "attachment_id": null, "count": 15, "creator": "jfkthame@gmail.com", "author": "jfkthame@gmail.com", "raw_text": "See https://bugs.chromium.org/p/chromium/issues/detail?id=729979 for some mitigation the Chromium folk have implemented, although AFAICT it's not a complete solution to the general issue.", "is_private": false, "bug_id": 1370497}, {"time": "2017-09-19T10:53:54Z", "tags": [], "creation_time": "2017-09-19T10:53:54Z", "text": "Yeah, seems to me that those mitigations are pretty specific. I'm not particularly interested in playing whack-a-mole such that what Firefox allows changes every release for the next 10 releases.\n\nGerv", "count": 16, "attachment_id": null, "id": 12680829, "raw_text": "Yeah, seems to me that those mitigations are pretty specific. I'm not particularly interested in playing whack-a-mole such that what Firefox allows changes every release for the next 10 releases.\n\nGerv", "creator": "gerv@mozilla.org", "author": "gerv@mozilla.org", "bug_id": 1370497, "is_private": false}, {"is_private": false, "bug_id": 1370497, "creator": "jfkthame@gmail.com", "author": "jfkthame@gmail.com", "raw_text": "Here's a patch that provides some mitigation, based on the Unicode ScriptExtensions property that identifies some combining marks as being used with particular script(s) even though they have Script=INHERITED as their primary property. This blocks things like the Arabic-vowel-on-Latin-letter example here.", "attachment_id": 8910325, "id": 12686163, "count": 17, "text": "Created attachment 8910325\nCheck ScriptExtensions property of combining marks when available\n\nHere's a patch that provides some mitigation, based on the Unicode ScriptExtensions property that identifies some combining marks as being used with particular script(s) even though they have Script=INHERITED as their primary property. This blocks things like the Arabic-vowel-on-Latin-letter example here.", "creation_time": "2017-09-20T15:22:19Z", "tags": [], "time": "2017-09-20T15:22:19Z"}, {"creation_time": "2017-09-21T17:32:20Z", "text": "Comment on attachment 8910325\nCheck ScriptExtensions property of combining marks when available\n\nThis seems a pretty sensible and general mitigation. We may also have to switch to strict as well, but this seems orthogonal to that.\n\nGerv", "tags": [], "time": "2017-09-21T17:32:20Z", "author": "gerv@mozilla.org", "creator": "gerv@mozilla.org", "raw_text": "This seems a pretty sensible and general mitigation. We may also have to switch to strict as well, but this seems orthogonal to that.\n\nGerv", "is_private": false, "bug_id": 1370497, "attachment_id": 8910325, "id": 12690380, "count": 18}, {"bug_id": 1370497, "is_private": false, "raw_text": "Review of attachment 8910325:\n-----------------------------------------------------------------\n\nThis is in netwerk and I'm not a peer for that module. I'm forwarding to jduell.\nThe code looks god afaict.", "creator": "mak@mozilla.com", "author": "mak@mozilla.com", "count": 19, "attachment_id": 8910325, "id": 12695464, "text": "Comment on attachment 8910325\nCheck ScriptExtensions property of combining marks when available\n\nReview of attachment 8910325:\n-----------------------------------------------------------------\n\nThis is in netwerk and I'm not a peer for that module. I'm forwarding to jduell.\nThe code looks god afaict.", "creation_time": "2017-09-23T09:58:15Z", "time": "2017-09-23T09:58:15Z", "tags": []}, {"count": 20, "id": 12695495, "attachment_id": null, "bug_id": 1370497, "is_private": false, "raw_text": "Just FTR, since bug 1402048 has just landed, I'll remove the #ifdef IDNA2008 from this patch as this is now unconditionally the way we build.", "creator": "jfkthame@gmail.com", "author": "jfkthame@gmail.com", "time": "2017-09-23T10:54:42Z", "tags": [], "text": "Just FTR, since bug 1402048 has just landed, I'll remove the #ifdef IDNA2008 from this patch as this is now unconditionally the way we build.", "creation_time": "2017-09-23T10:54:42Z"}, {"text": "Comment on attachment 8910325\nCheck ScriptExtensions property of combining marks when available\n\nReview of attachment 8910325:\n-----------------------------------------------------------------\n\nLooks good.", "creation_time": "2017-09-27T09:11:48Z", "tags": [], "time": "2017-09-27T09:11:48Z", "is_private": false, "bug_id": 1370497, "author": "valentin.gosu@gmail.com", "creator": "valentin.gosu@gmail.com", "raw_text": "Review of attachment 8910325:\n-----------------------------------------------------------------\n\nLooks good.", "id": 12705680, "attachment_id": 8910325, "count": 21}, {"creation_time": "2017-09-27T23:57:07Z", "text": "https://hg.mozilla.org/mozilla-central/rev/6bd2d96c0c3d", "tags": [], "time": "2017-09-27T23:57:07Z", "creator": "kwierso@gmail.com", "author": "kwierso@gmail.com", "raw_text": "https://hg.mozilla.org/mozilla-central/rev/6bd2d96c0c3d", "is_private": false, "bug_id": 1370497, "id": 12708604, "attachment_id": null, "count": 22}, {"attachment_id": null, "is_private": false, "author": "ryanvm@gmail.com", "tags": [], "time": "2017-10-04T01:27:23Z", "text": "Please request Beta approval on this when you get a chance. And maybe ESR52 as well?", "id": 12726859, "count": 23, "bug_id": 1370497, "creator": "ryanvm@gmail.com", "raw_text": "Please request Beta approval on this when you get a chance. And maybe ESR52 as well?", "creation_time": "2017-10-04T01:27:23Z"}, {"attachment_id": 8910325, "is_private": false, "author": "jfkthame@gmail.com", "time": "2017-10-04T08:42:52Z", "tags": [], "text": "Comment on attachment 8910325\nCheck ScriptExtensions property of combining marks when available\n\nApproval Request Comment\n[Feature/Bug causing the regression]: not a regression\n[User impact if declined]: potential for domain spoofing using diacritics that are invisible or near-invisible in the URL bar\n[Is this code covered by automated tests?]: yes\n[Has the fix been verified in Nightly?]: yes\n[Needs manual test from QE? If yes, steps to reproduce]: no\n[List of other uplifts needed for the feature/fix]: none\n[Is the change risky?]: not really\n[Why is the change risky/not risky?]: adds a new check in nsIDNService::isLabelSafe to detect unexpected diacritic usage; in case of bugs I guess it could cause legitimate domain labels to display as punycode, but otherwise shouldn't affect functionality\n[String changes made/needed]: none", "count": 24, "id": 12727322, "bug_id": 1370497, "raw_text": "Approval Request Comment\n[Feature/Bug causing the regression]: not a regression\n[User impact if declined]: potential for domain spoofing using diacritics that are invisible or near-invisible in the URL bar\n[Is this code covered by automated tests?]: yes\n[Has the fix been verified in Nightly?]: yes\n[Needs manual test from QE? If yes, steps to reproduce]: no\n[List of other uplifts needed for the feature/fix]: none\n[Is the change risky?]: not really\n[Why is the change risky/not risky?]: adds a new check in nsIDNService::isLabelSafe to detect unexpected diacritic usage; in case of bugs I guess it could cause legitimate domain labels to display as punycode, but otherwise shouldn't affect functionality\n[String changes made/needed]: none", "creator": "jfkthame@gmail.com", "creation_time": "2017-10-04T08:42:52Z"}, {"tags": [], "time": "2017-10-04T08:44:35Z", "creation_time": "2017-10-04T08:44:35Z", "text": "(In reply to Ryan VanderMeulen [:RyanVM] from comment #23)\n> Please request Beta approval on this when you get a chance. And maybe ESR52\n> as well?\n\nThis doesn't seem to me to really meet the ESR criteria, and I see we've marked other examples such as bug 1399540 as wontfix there. (Feel free to disagree if you think there's an ESR case to make.)", "id": 12727324, "attachment_id": null, "count": 25, "creator": "jfkthame@gmail.com", "author": "jfkthame@gmail.com", "raw_text": "(In reply to Ryan VanderMeulen [:RyanVM] from comment #23)\n> Please request Beta approval on this when you get a chance. And maybe ESR52\n> as well?\n\nThis doesn't seem to me to really meet the ESR criteria, and I see we've marked other examples such as bug 1399540 as wontfix there. (Feel free to disagree if you think there's an ESR case to make.)", "is_private": false, "bug_id": 1370497}, {"creation_time": "2017-10-04T13:11:38Z", "count": 26, "id": 12727855, "bug_id": 1370497, "raw_text": "No arguments here.", "creator": "ryanvm@gmail.com", "time": "2017-10-04T13:11:38Z", "tags": [], "text": "No arguments here.", "attachment_id": null, "is_private": false, "author": "ryanvm@gmail.com"}, {"author": "rkothari@mozilla.com", "is_private": false, "attachment_id": null, "text": "Hi Dan, given that this is a sec-mod and too many uplifts in beta57 already, I am leaning towards wontfix'ing this for 57. I'd like to get your opinion before making a final decision here. Thanks!", "time": "2017-10-04T19:57:09Z", "tags": [], "raw_text": "Hi Dan, given that this is a sec-mod and too many uplifts in beta57 already, I am leaning towards wontfix'ing this for 57. I'd like to get your opinion before making a final decision here. Thanks!", "creator": "rkothari@mozilla.com", "bug_id": 1370497, "count": 27, "id": 12729421, "creation_time": "2017-10-04T19:57:09Z"}, {"creator": "dveditz@mozilla.com", "author": "dveditz@mozilla.com", "raw_text": "We keep getting dinged for this so it'd be nice to fix sooner, and the patch isn't scary. But in practice real phishing sites are making enough money from non-spoofing domain names. I guess we could live without it in 57 :-(", "is_private": false, "bug_id": 1370497, "id": 12730228, "attachment_id": null, "count": 28, "creation_time": "2017-10-04T22:47:37Z", "text": "We keep getting dinged for this so it'd be nice to fix sooner, and the patch isn't scary. But in practice real phishing sites are making enough money from non-spoofing domain names. I guess we could live without it in 57 :-(", "tags": [], "time": "2017-10-04T22:47:37Z"}, {"tags": [], "time": "2017-10-04T22:53:48Z", "text": "Comment on attachment 8910325\nCheck ScriptExtensions property of combining marks when available\n\nThanks Dan. Sorry! :( 57 is getting an unusually large # of uplift requests. I'd like to keep our risks to quality and shipping on time to a minimal. I'd prefer to let this one ride the 58 train.", "attachment_id": 8910325, "is_private": false, "author": "rkothari@mozilla.com", "creation_time": "2017-10-04T22:53:48Z", "id": 12730241, "count": 29, "bug_id": 1370497, "creator": "rkothari@mozilla.com", "raw_text": "Thanks Dan. Sorry! :( 57 is getting an unusually large # of uplift requests. I'd like to keep our risks to quality and shipping on time to a minimal. I'd prefer to let this one ride the 58 train."}, {"count": 30, "attachment_id": null, "id": 12730270, "raw_text": "An argument in favor is that we're already fixing bug 1399939 in Firefox 57 and it'd be nice to change the IDN behavior all at once. But that's not the strongest argument", "author": "dveditz@mozilla.com", "creator": "dveditz@mozilla.com", "bug_id": 1370497, "is_private": false, "time": "2017-10-04T23:03:28Z", "tags": [], "creation_time": "2017-10-04T23:03:28Z", "text": "An argument in favor is that we're already fixing bug 1399939 in Firefox 57 and it'd be nice to change the IDN behavior all at once. But that's not the strongest argument"}, {"id": 12730313, "attachment_id": 8910325, "count": 31, "is_private": false, "bug_id": 1370497, "creator": "rkothari@mozilla.com", "author": "rkothari@mozilla.com", "raw_text": "Ok. Since this is still early beta, I'll take it. After a week, this uplift would be rejected.", "tags": [], "time": "2017-10-04T23:21:20Z", "text": "Comment on attachment 8910325\nCheck ScriptExtensions property of combining marks when available\n\nOk. Since this is still early beta, I'll take it. After a week, this uplift would be rejected.", "creation_time": "2017-10-04T23:21:20Z"}, {"time": "2017-10-05T00:28:42Z", "tags": ["uplift"], "text": "https://hg.mozilla.org/releases/mozilla-beta/rev/fd0f5f771d44", "creation_time": "2017-10-05T00:28:42Z", "count": 32, "id": 12730498, "attachment_id": null, "bug_id": 1370497, "is_private": false, "raw_text": "https://hg.mozilla.org/releases/mozilla-beta/rev/fd0f5f771d44", "creator": "ryanvm@gmail.com", "author": "ryanvm@gmail.com"}, {"creation_time": "2017-10-06T06:37:10Z", "raw_text": "(In reply to Jonathan Kew (:jfkthame) from comment #24)\n> [Is this code covered by automated tests?]: yes\n> [Has the fix been verified in Nightly?]: yes\n> [Needs manual test from QE? If yes, steps to reproduce]: no\n\nSetting qe-verify- based on Jonathan's assessment on manual testing needs and the fact that this fix has automated coverage.", "creator": "andrei.vaida@softvision.com", "bug_id": 1370497, "count": 33, "id": 12734299, "text": "(In reply to Jonathan Kew (:jfkthame) from comment #24)\n> [Is this code covered by automated tests?]: yes\n> [Has the fix been verified in Nightly?]: yes\n> [Needs manual test from QE? If yes, steps to reproduce]: no\n\nSetting qe-verify- based on Jonathan's assessment on manual testing needs and the fact that this fix has automated coverage.", "time": "2017-10-06T06:37:10Z", "tags": [], "author": "andrei.vaida@softvision.com", "is_private": false, "attachment_id": null}]}}, "comments": {}}