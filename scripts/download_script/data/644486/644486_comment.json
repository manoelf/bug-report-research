{"comments": {}, "bugs": {"644486": {"comments": [{"raw_text": "There is a lot of warning on win64 because sizeof(size_t) != sizeof(uintN).\n\nSo after landing bug 609532, it cannot compile js.exe", "creation_time": "2011-03-24T06:09:35Z", "bug_id": 644486, "tags": [], "is_private": false, "time": "2011-03-24T06:09:35Z", "id": 5365116, "creator": "m_kato@ga2.so-net.ne.jp", "attachment_id": null, "text": "There is a lot of warning on win64 because sizeof(size_t) != sizeof(uintN).\n\nSo after landing bug 609532, it cannot compile js.exe", "count": 0, "author": "m_kato@ga2.so-net.ne.jp"}, {"text": "Created attachment 521422\nfix", "count": 1, "time": "2011-03-24T06:13:27Z", "author": "m_kato@ga2.so-net.ne.jp", "id": 5365118, "creation_time": "2011-03-24T06:13:27Z", "bug_id": 644486, "raw_text": "", "tags": [], "creator": "m_kato@ga2.so-net.ne.jp", "attachment_id": 521422, "is_private": false}, {"time": "2011-03-24T06:36:10Z", "author": "n.nethercote@gmail.com", "id": 5365142, "count": 2, "text": "Comment on attachment 521422\nfix\n\nIt all looks ok except for the one in jsscopeinlines.h which I'm not sure about -- paging luke!", "is_private": false, "attachment_id": 521422, "bug_id": 644486, "creation_time": "2011-03-24T06:36:10Z", "raw_text": "It all looks ok except for the one in jsscopeinlines.h which I'm not sure about -- paging luke!", "tags": [], "creator": "n.nethercote@gmail.com"}, {"attachment_id": 521422, "is_private": false, "tags": [], "creator": "mail@lukewagner.name", "creation_time": "2011-03-24T07:06:49Z", "bug_id": 644486, "raw_text": "I would say that, on 64-bit arch uintN(JSID_BITS(id)) loses half the bits making for a worse hash distribution (and asking for something like Igor's PointerHasher in attachment 519881), but it seems like the rest of Shape::hash is already doing this.  I suppose this is ok b/c, as long as the heap is in a somewhat contiguous range of the address space, one wouldn't expect too useful much variation in the high 32-bits.", "id": 5365174, "time": "2011-03-24T07:06:49Z", "author": "mail@lukewagner.name", "count": 3, "text": "Comment on attachment 521422\nfix\n\nI would say that, on 64-bit arch uintN(JSID_BITS(id)) loses half the bits making for a worse hash distribution (and asking for something like Igor's PointerHasher in attachment 519881), but it seems like the rest of Shape::hash is already doing this.  I suppose this is ok b/c, as long as the heap is in a somewhat contiguous range of the address space, one wouldn't expect too useful much variation in the high 32-bits."}, {"is_private": false, "attachment_id": null, "tags": [], "creator": "m_kato@ga2.so-net.ne.jp", "bug_id": 644486, "creation_time": "2011-03-25T03:39:35Z", "raw_text": "(In reply to comment #3)\n> Comment on attachment 521422 [details]\n> fix\n> \n> I would say that, on 64-bit arch uintN(JSID_BITS(id)) loses half the bits\n> making for a worse hash distribution (and asking for something like Igor's\n> PointerHasher in attachment 519881 [details]), but it seems like the rest of Shape::hash\n> is already doing this.  I suppose this is ok b/c, as long as the heap is in a\n> somewhat contiguous range of the address space, one wouldn't expect too useful\n> much variation in the high 32-bits.\n\nJSDHashNumber is uint32 even if 64-bit platform.", "id": 5368342, "time": "2011-03-25T03:39:35Z", "author": "m_kato@ga2.so-net.ne.jp", "text": "(In reply to comment #3)\n> Comment on attachment 521422 [details]\n> fix\n> \n> I would say that, on 64-bit arch uintN(JSID_BITS(id)) loses half the bits\n> making for a worse hash distribution (and asking for something like Igor's\n> PointerHasher in attachment 519881 [details]), but it seems like the rest of Shape::hash\n> is already doing this.  I suppose this is ok b/c, as long as the heap is in a\n> somewhat contiguous range of the address space, one wouldn't expect too useful\n> much variation in the high 32-bits.\n\nJSDHashNumber is uint32 even if 64-bit platform.", "count": 4}]}}}