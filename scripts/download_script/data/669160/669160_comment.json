{"bugs": {"669160": {"comments": [{"attachment_id": null, "raw_text": "User Agent: Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.2.17) Gecko/20110428 Fedora/1.9.2.17-2.fc14 Firefox 3.6.3 (.NET CLR 3.5.30729)\nBuild ID: 20110428205629\n\nSteps to reproduce:\n\nAll emails to and from that address have been deleted. An address book entry for that address has been deleted from both collected addresses and personal address book.\nThunderbird has been closed and started again.\n\n\nActual results:\n\nEntered characters from an email address into the search and auto-complete had that address still remembered.\n\n\nExpected results:\n\nThere should not have been remembered email address after it and its emails have been deleted.", "tags": [], "bug_id": 669160, "text": "User Agent: Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.2.17) Gecko/20110428 Fedora/1.9.2.17-2.fc14 Firefox 3.6.3 (.NET CLR 3.5.30729)\nBuild ID: 20110428205629\n\nSteps to reproduce:\n\nAll emails to and from that address have been deleted. An address book entry for that address has been deleted from both collected addresses and personal address book.\nThunderbird has been closed and started again.\n\n\nActual results:\n\nEntered characters from an email address into the search and auto-complete had that address still remembered.\n\n\nExpected results:\n\nThere should not have been remembered email address after it and its emails have been deleted.", "is_private": false, "id": 5572582, "count": 0, "creator": "gobzo@aim.com", "creation_time": "2011-07-04T13:59:19Z", "time": "2011-07-04T13:59:19Z", "author": "gobzo@aim.com"}, {"is_private": false, "id": 5577728, "count": 1, "creator": "dveditz@mozilla.com", "creation_time": "2011-07-06T23:40:56Z", "time": "2011-07-06T23:40:56Z", "author": "dveditz@mozilla.com", "attachment_id": null, "raw_text": "more a privacy issue than a security one. Don't see any Thunderbird equivalent to Firefox's sanitization dialog but there may be some non-obvious way to purge things from the search database.", "text": "more a privacy issue than a security one. Don't see any Thunderbird equivalent to Firefox's sanitization dialog but there may be some non-obvious way to purge things from the search database.", "bug_id": 669160, "tags": []}, {"creator": "gobzo@aim.com", "time": "2011-07-07T03:15:19Z", "creation_time": "2011-07-07T03:15:19Z", "author": "gobzo@aim.com", "is_private": false, "id": 5577982, "count": 2, "text": "Trying to understand how that helps.", "bug_id": 669160, "tags": [], "attachment_id": null, "raw_text": "Trying to understand how that helps."}, {"text": "This probably the global database storing the email addresses.\n\nYou'll need to purge the database itself, I can't remember what the policies for retention are atm.\n\niirc you can do this by going into preferences (or options), selecting Advanced, then General, and uncheck \"Enable Global Search and Indexer\", then restart Thunderbird, and then you can re-check that box.", "bug_id": 669160, "tags": [], "raw_text": "This probably the global database storing the email addresses.\n\nYou'll need to purge the database itself, I can't remember what the policies for retention are atm.\n\niirc you can do this by going into preferences (or options), selecting Advanced, then General, and uncheck \"Enable Global Search and Indexer\", then restart Thunderbird, and then you can re-check that box.", "attachment_id": null, "author": "standard8@mozilla.com", "creator": "standard8@mozilla.com", "creation_time": "2011-07-07T08:10:20Z", "time": "2011-07-07T08:10:20Z", "is_private": false, "id": 5578195, "count": 3}, {"creator": "gobzo@aim.com", "creation_time": "2011-07-07T11:52:29Z", "time": "2011-07-07T11:52:29Z", "author": "gobzo@aim.com", "tags": [], "text": "did not work", "bug_id": 669160, "attachment_id": null, "is_private": false, "id": 5578368, "count": 4, "raw_text": "did not work"}, {"bug_id": 669160, "text": "(In reply to comment #4)\n> did not work\n\nSo gloda is off and your AB are empty and search still remembers the emails ?", "tags": [], "raw_text": "(In reply to comment #4)\n> did not work\n\nSo gloda is off and your AB are empty and search still remembers the emails ?", "attachment_id": null, "author": "ludovic@hirlimann.net", "time": "2011-07-07T12:19:18Z", "creation_time": "2011-07-07T12:19:18Z", "creator": "ludovic@hirlimann.net", "count": 5, "id": 5578384, "is_private": false}, {"bug_id": 669160, "text": "Turning off gloda does not purge the contents of the database.  It just stops gloda from initiating the indexing process.  Arguably this transition state should ask the user if they want to purge the database or keep it around because they are planning to turn indexing back on again soon.  The option really only works in an ideal form if it is set to the desired state when a profile is being created/upgraded from a pre-gloda version of Thunderbird.\n\nGloda never forgets e-mail addresses in its current state, even if the user deletes all the related e-mails and gloda purges them from its database.\n\nIt's probably important to note that if the sequence goes like this:\n- Gloda indexes a bunch of messages.\n- User turns off gloda (and reboots).\n- User deletes said bunch of messages.\nThen the messages will continue to exist in the gloda index.\n\nIt's worth noting that in general Thunderbird is not good at cleaning up data.  Apart from gloda issues, a user would need to force a compress commit of the address book mork db, .msf files, and trigger compaction of the (offline) mail stores to make sure stuff gets gone.  Gloda is slightly more troublesome because we never are able to trigger a VACUUM of the database and so unused pages or obsolete FTS sub-records can lie dormant with info in them.", "tags": [], "attachment_id": null, "raw_text": "Turning off gloda does not purge the contents of the database.  It just stops gloda from initiating the indexing process.  Arguably this transition state should ask the user if they want to purge the database or keep it around because they are planning to turn indexing back on again soon.  The option really only works in an ideal form if it is set to the desired state when a profile is being created/upgraded from a pre-gloda version of Thunderbird.\n\nGloda never forgets e-mail addresses in its current state, even if the user deletes all the related e-mails and gloda purges them from its database.\n\nIt's probably important to note that if the sequence goes like this:\n- Gloda indexes a bunch of messages.\n- User turns off gloda (and reboots).\n- User deletes said bunch of messages.\nThen the messages will continue to exist in the gloda index.\n\nIt's worth noting that in general Thunderbird is not good at cleaning up data.  Apart from gloda issues, a user would need to force a compress commit of the address book mork db, .msf files, and trigger compaction of the (offline) mail stores to make sure stuff gets gone.  Gloda is slightly more troublesome because we never are able to trigger a VACUUM of the database and so unused pages or obsolete FTS sub-records can lie dormant with info in them.", "time": "2011-07-07T21:10:20Z", "creation_time": "2011-07-07T21:10:20Z", "creator": "bugmail@asutherland.org", "author": "bugmail@asutherland.org", "id": 5579579, "count": 6, "is_private": false}, {"author": "gobzo@aim.com", "creator": "gobzo@aim.com", "creation_time": "2011-07-08T14:20:41Z", "time": "2011-07-08T14:20:41Z", "is_private": false, "count": 7, "id": 5580883, "text": "This way you may set some people in the 3d world dictatorships up for arrest and abuse, even for torture. Give your head a shake.", "bug_id": 669160, "tags": [], "raw_text": "This way you may set some people in the 3d world dictatorships up for arrest and abuse, even for torture. Give your head a shake.", "attachment_id": null}, {"tags": [], "bug_id": 669160, "text": "Because of the nature of how hard disks and file-systems work, Thunderbird deleting data does not reliably prevent it from being recovered either.  Anyone who needs to make sure the information is not read should never let it be written to their hard disk in the clear.\n\nThis suggests that Thunderbird's profile should be placed on an encrypted partition for those in such situations (or who want any guarantee of strong privacy should their machine/hard disk be stolen, etc.).  In the event deniability of the existence of the encrypted partition is required, deniable encryption should be used.  Various solutions exist to both ends on multiple platforms; truecrypt being an example of an implementation available across multiple platforms.", "raw_text": "Because of the nature of how hard disks and file-systems work, Thunderbird deleting data does not reliably prevent it from being recovered either.  Anyone who needs to make sure the information is not read should never let it be written to their hard disk in the clear.\n\nThis suggests that Thunderbird's profile should be placed on an encrypted partition for those in such situations (or who want any guarantee of strong privacy should their machine/hard disk be stolen, etc.).  In the event deniability of the existence of the encrypted partition is required, deniable encryption should be used.  Various solutions exist to both ends on multiple platforms; truecrypt being an example of an implementation available across multiple platforms.", "attachment_id": null, "author": "bugmail@asutherland.org", "time": "2011-07-08T20:47:15Z", "creation_time": "2011-07-08T20:47:15Z", "creator": "bugmail@asutherland.org", "id": 5581717, "count": 8, "is_private": false}, {"time": "2011-07-08T21:12:34Z", "creation_time": "2011-07-08T21:12:34Z", "creator": "gobzo@aim.com", "author": "gobzo@aim.com", "count": 9, "id": 5581768, "is_private": false, "tags": [], "bug_id": 669160, "text": "It is nice to debate this from the comfort of your house, but for some it may mean handing by the ankles from the ceiling being beaten with power cords.\nIt should still be fixed.", "attachment_id": null, "raw_text": "It is nice to debate this from the comfort of your house, but for some it may mean handing by the ankles from the ceiling being beaten with power cords.\nIt should still be fixed."}, {"author": "jporterbugs@gmail.com", "creation_time": "2011-07-08T21:32:10Z", "time": "2011-07-08T21:32:10Z", "creator": "jporterbugs@gmail.com", "id": 5581807, "count": 10, "is_private": false, "tags": [], "bug_id": 669160, "text": "(In reply to comment #9)\n> It is nice to debate this from the comfort of your house, but for some it\n> may mean handing by the ankles from the ceiling being beaten with power\n> cords.\n> It should still be fixed.\n\nEven if you're arguing for this purely from a security perspective, this is by no means the most vulnerable place for privacy violation. As asuth mentioned, local mail stores, address books, etc all keep data around, much of which would be more dangerous if they fell into the wrong hands.\n\nWhile this should be fixed, it would be more fruitful to address these other issues first. The only difference here is that the stale data here is more apparent when using Thunderbird.", "raw_text": "(In reply to comment #9)\n> It is nice to debate this from the comfort of your house, but for some it\n> may mean handing by the ankles from the ceiling being beaten with power\n> cords.\n> It should still be fixed.\n\nEven if you're arguing for this purely from a security perspective, this is by no means the most vulnerable place for privacy violation. As asuth mentioned, local mail stores, address books, etc all keep data around, much of which would be more dangerous if they fell into the wrong hands.\n\nWhile this should be fixed, it would be more fruitful to address these other issues first. The only difference here is that the stale data here is more apparent when using Thunderbird.", "attachment_id": null}, {"raw_text": "", "attachment_id": null, "bug_id": 669160, "text": "*** Bug 537368 has been marked as a duplicate of this bug. ***", "tags": [], "count": 11, "id": 6127102, "is_private": false, "author": "vseerror@lehigh.edu", "time": "2012-03-09T11:58:18Z", "creation_time": "2012-03-09T11:58:18Z", "creator": "vseerror@lehigh.edu"}, {"tags": [], "text": "*** Bug 533879 has been marked as a duplicate of this bug. ***", "bug_id": 669160, "raw_text": "", "attachment_id": null, "author": "vseerror@lehigh.edu", "creation_time": "2012-03-09T11:58:38Z", "time": "2012-03-09T11:58:38Z", "creator": "vseerror@lehigh.edu", "id": 6127104, "count": 12, "is_private": false}, {"text": "*** Bug 1318410 has been marked as a duplicate of this bug. ***", "bug_id": 669160, "tags": [], "attachment_id": null, "raw_text": "", "creation_time": "2018-09-21T03:44:52Z", "time": "2018-09-21T03:44:52Z", "creator": "vseerror@lehigh.edu", "author": "vseerror@lehigh.edu", "count": 13, "id": 13630779, "is_private": false}, {"tags": [], "bug_id": 669160, "text": "From bug 1318410 comment 1 Andrew writes:\n\n== context\n\nGloda Contact names are a best effort type of thing.  When an email address is first seen, an identity and its parent contact are created.  The display name parsed out at that time is set as the contact's name.  If no display name was present, the email address is used verbatim.  At the same time, an addressbook indexer job is queued.\n\nThe addressbook indexer logic at https://dxr.mozilla.org/comm-central/source/mailnews/db/gloda/modules/index_ab.js#264 is:\n  // update the name\n  if (card.displayName && card.displayName != aContact.name)\n    aContact.name = card.displayName;\n\nWhich is part of the problem here.  I believe the original rationale was that if the user isn't assigning a preferred name to the contact, then the originally scraped display name is probably best.  This code might pre-date the \"star an email address to quickly create a contact\" which automatically extracts-and-fills in the display name logic.  With that in place, it makes sense to treat an entry displayName as intent.\n\nThe second factor is that although a card indexing job is triggered when addressbook changes occur (https://dxr.mozilla.org/comm-central/source/mailnews/db/gloda/modules/index_ab.js#117), no job is scheduled on removal (https://dxr.mozilla.org/comm-central/source/mailnews/db/gloda/modules/index_ab.js#99).  This made sense in context because the indexing really only exists to scrape out explicitly set names and \"freetags\" (tagging support that never got meaningfully surfaced in the UI).\n\nAn overarching issue to be aware of is that the gloda DB representation is fully normalized but does not have reference counts on identity/contact usage.  The identity record and its owning contact can't be safely deleted without ensuring that all message/conversation/whatever references to them are gone.\n\nThe best thing that can be done is to reset the state of the contact back so it is as if the addressbook card had never existed.  The simplest action would be to reset the name to the email address of the first identity in question.  A more thorough approach would be to look up an email where the identity/contact is involved and scrape the display name back out from there.\n\n== fixing\n\nThere's a few options.  The simplest might be to:\n- Change the addressbook listener to queue a job that will cause the card to be re-indexed.  Since the indexer assumes the card exists, it might make sense to create a synthetic record that looks enough like an AB card to not blow everything up and also have a flag that indicates it's a deletion.\n- Change the card indexer to treat an empty displayName as a request to purge the existing displayName and replace it with the email address.\n\nThe existing addressbook tests at https://dxr.mozilla.org/comm-central/source/mailnews/db/gloda/test/unit/test_index_addressbook.js can be built on.  test_remove_card_cache_indication could be renamed and made to check that the display name gets reset to the email address.", "attachment_id": null, "raw_text": "From bug 1318410 comment 1 Andrew writes:\n\n== context\n\nGloda Contact names are a best effort type of thing.  When an email address is first seen, an identity and its parent contact are created.  The display name parsed out at that time is set as the contact's name.  If no display name was present, the email address is used verbatim.  At the same time, an addressbook indexer job is queued.\n\nThe addressbook indexer logic at https://dxr.mozilla.org/comm-central/source/mailnews/db/gloda/modules/index_ab.js#264 is:\n  // update the name\n  if (card.displayName && card.displayName != aContact.name)\n    aContact.name = card.displayName;\n\nWhich is part of the problem here.  I believe the original rationale was that if the user isn't assigning a preferred name to the contact, then the originally scraped display name is probably best.  This code might pre-date the \"star an email address to quickly create a contact\" which automatically extracts-and-fills in the display name logic.  With that in place, it makes sense to treat an entry displayName as intent.\n\nThe second factor is that although a card indexing job is triggered when addressbook changes occur (https://dxr.mozilla.org/comm-central/source/mailnews/db/gloda/modules/index_ab.js#117), no job is scheduled on removal (https://dxr.mozilla.org/comm-central/source/mailnews/db/gloda/modules/index_ab.js#99).  This made sense in context because the indexing really only exists to scrape out explicitly set names and \"freetags\" (tagging support that never got meaningfully surfaced in the UI).\n\nAn overarching issue to be aware of is that the gloda DB representation is fully normalized but does not have reference counts on identity/contact usage.  The identity record and its owning contact can't be safely deleted without ensuring that all message/conversation/whatever references to them are gone.\n\nThe best thing that can be done is to reset the state of the contact back so it is as if the addressbook card had never existed.  The simplest action would be to reset the name to the email address of the first identity in question.  A more thorough approach would be to look up an email where the identity/contact is involved and scrape the display name back out from there.\n\n== fixing\n\nThere's a few options.  The simplest might be to:\n- Change the addressbook listener to queue a job that will cause the card to be re-indexed.  Since the indexer assumes the card exists, it might make sense to create a synthetic record that looks enough like an AB card to not blow everything up and also have a flag that indicates it's a deletion.\n- Change the card indexer to treat an empty displayName as a request to purge the existing displayName and replace it with the email address.\n\nThe existing addressbook tests at https://dxr.mozilla.org/comm-central/source/mailnews/db/gloda/test/unit/test_index_addressbook.js can be built on.  test_remove_card_cache_indication could be renamed and made to check that the display name gets reset to the email address.", "time": "2018-09-21T03:46:14Z", "creation_time": "2018-09-21T03:46:14Z", "creator": "vseerror@lehigh.edu", "author": "vseerror@lehigh.edu", "id": 13630781, "count": 14, "is_private": false}]}}, "comments": {}}