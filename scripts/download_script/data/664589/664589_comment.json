{"bugs": {"664589": {"comments": [{"creator": "brandon@hackmill.com", "text": "There is some security risk to having Developer Tools like the Web Console available by default to all users.  We are seeing attacks in the wild where users have been convinced to paste malicious bookmarklets in their Location Bar:\nhttp://www.nytimes.com/2011/06/14/technology/14security.html?src=recg&pagewanted=all\n\nBug 656433 fixed the Location Bar vector, but we suspect that these social engineering attacks will move to the Web Console or similar.  We should consider hiding Developer Tools for this reason unless the user opts-in through a preference.", "attachment_id": null, "time": "2011-06-15T22:58:11Z", "author": "brandon@hackmill.com", "raw_text": "There is some security risk to having Developer Tools like the Web Console available by default to all users.  We are seeing attacks in the wild where users have been convinced to paste malicious bookmarklets in their Location Bar:\nhttp://www.nytimes.com/2011/06/14/technology/14security.html?src=recg&pagewanted=all\n\nBug 656433 fixed the Location Bar vector, but we suspect that these social engineering attacks will move to the Web Console or similar.  We should consider hiding Developer Tools for this reason unless the user opts-in through a preference.", "creation_time": "2011-06-15T22:58:11Z", "bug_id": 664589, "count": 0, "is_private": false, "tags": [], "id": 5535457}, {"raw_text": "\nSurely the Citi thing was an insecure direct object reference vuln, rather than a location bar problem?\n\nPreviously devtools argued that just pushing devtools to an Option/Preference, simply meant that Facebook scammers needed to add another couple of lines to their \"How to get more Farmville goods\" scam scripts.\n\nIn the GCLI review, the sec group argued (persuasively to me, at least) that simply dropping down the console and typing some gibberish, does feel like a way to get something cheap - it's not that dissimilar like an infinite lives hack on a computer game.\n\nOn the other hand instructions that involve naming web developer tools also help to point out that this affects the browser and not the website - this is especially true if we default to \"undocked\".\n\nAlso, with social attacks, we can never be 100% safe, this is about percentages, and this would probably help more innocent people than it hurts developers.", "creation_time": "2011-06-16T11:06:36Z", "attachment_id": null, "time": "2011-06-16T11:06:36Z", "text": "\nSurely the Citi thing was an insecure direct object reference vuln, rather than a location bar problem?\n\nPreviously devtools argued that just pushing devtools to an Option/Preference, simply meant that Facebook scammers needed to add another couple of lines to their \"How to get more Farmville goods\" scam scripts.\n\nIn the GCLI review, the sec group argued (persuasively to me, at least) that simply dropping down the console and typing some gibberish, does feel like a way to get something cheap - it's not that dissimilar like an infinite lives hack on a computer game.\n\nOn the other hand instructions that involve naming web developer tools also help to point out that this affects the browser and not the website - this is especially true if we default to \"undocked\".\n\nAlso, with social attacks, we can never be 100% safe, this is about percentages, and this would probably help more innocent people than it hurts developers.", "id": 5536344, "is_private": false, "count": 1, "tags": [], "bug_id": 664589, "author": "jwalker@mozilla.com", "creator": "jwalker@mozilla.com"}, {"author": "bugzilla@nulltxt.se", "creator": "bugzilla@nulltxt.se", "id": 5536759, "tags": [], "is_private": false, "count": 2, "bug_id": 664589, "raw_text": "I don think we should do this. There must be a middle ground here. Developer tools are the new \"View Source\" and hiding them will be detrimental to people experimenting and learning about what is happening in web pages.", "creation_time": "2011-06-16T15:50:55Z", "attachment_id": null, "time": "2011-06-16T15:50:55Z", "text": "I don think we should do this. There must be a middle ground here. Developer tools are the new \"View Source\" and hiding them will be detrimental to people experimenting and learning about what is happening in web pages."}, {"creator": "dveditz@mozilla.com", "author": "dveditz@mozilla.com", "tags": [], "is_private": false, "count": 3, "id": 5536866, "bug_id": 664589, "creation_time": "2011-06-16T16:43:43Z", "raw_text": "The article about Citi is a red herring. The copy/paste scams have been on social sites, primarily Twitter and especially Facebook. Here are two recent scams\n\n\"dislike button\"\nhttp://www.spamfighter.com/News-16216-%27Dislike%27-Button-Scam-Rapidly-Propagating-on-Facebook.htm\n\n\"see who's checking out your profile\"\nhttp://socialbarrel.com/check-out-your-profile-scam-spreads/8200/\n\n  -- Facebook clearly needs to add those features :-)\n\nThe tension is that developers who want to use these tools don't want to dig deep into menus every time, and naive users who have no idea what these windows are can be talked through simple keystrokes without raising their suspicions. The current attack instructions\n\n right-click-copy, Ctrl-L, Ctrl-V\n\neasily become\n\n right-click-copy, Ctrl-Shift-K, Ctrl-V\n\nThe only saving grace is that now you need \"in Firefox...\" instructions separate from other browser, but it's a small grace.\n\nSafari's approach is to hide the developer tools until the user enables them in preferences (actual pref UI, don't bury in about:config). The bonus is that the tools become more accessible for developers because they're top-level rather than buried on a sub-menu.\n\nAnother approach might be to disable the keyboard shortcuts until users have found the tools on the menu first, maybe with a doorhanger asking the user to turn on the shortcuts rather than just doing it.", "text": "The article about Citi is a red herring. The copy/paste scams have been on social sites, primarily Twitter and especially Facebook. Here are two recent scams\n\n\"dislike button\"\nhttp://www.spamfighter.com/News-16216-%27Dislike%27-Button-Scam-Rapidly-Propagating-on-Facebook.htm\n\n\"see who's checking out your profile\"\nhttp://socialbarrel.com/check-out-your-profile-scam-spreads/8200/\n\n  -- Facebook clearly needs to add those features :-)\n\nThe tension is that developers who want to use these tools don't want to dig deep into menus every time, and naive users who have no idea what these windows are can be talked through simple keystrokes without raising their suspicions. The current attack instructions\n\n right-click-copy, Ctrl-L, Ctrl-V\n\neasily become\n\n right-click-copy, Ctrl-Shift-K, Ctrl-V\n\nThe only saving grace is that now you need \"in Firefox...\" instructions separate from other browser, but it's a small grace.\n\nSafari's approach is to hide the developer tools until the user enables them in preferences (actual pref UI, don't bury in about:config). The bonus is that the tools become more accessible for developers because they're top-level rather than buried on a sub-menu.\n\nAnother approach might be to disable the keyboard shortcuts until users have found the tools on the menu first, maybe with a doorhanger asking the user to turn on the shortcuts rather than just doing it.", "time": "2011-06-16T16:43:43Z", "attachment_id": null}, {"text": "\nBrandon do we have any data about current misuse of the JS web-console? (as opposed to the location bar) I guess it's hard to know since bug 656433 hasn't been shipped yet?\n\nWe might also consider a range of UI options to mitigate this problem:\n\n- The developer tools menu starts out being called \"Enable Developer Tools\", and could begin with a warning like about:config does.\n\n- The web console (and other dev tools), when first opened, begins with a warning.\n\n- Developer tools default to opening in a separate window so they can't be confused with page content.\n\n- Hide all the dev tools until an option is clicked (as noted above).\n\n- etc", "creator": "jwalker@mozilla.com", "time": "2011-06-16T16:50:15Z", "attachment_id": null, "author": "jwalker@mozilla.com", "raw_text": "\nBrandon do we have any data about current misuse of the JS web-console? (as opposed to the location bar) I guess it's hard to know since bug 656433 hasn't been shipped yet?\n\nWe might also consider a range of UI options to mitigate this problem:\n\n- The developer tools menu starts out being called \"Enable Developer Tools\", and could begin with a warning like about:config does.\n\n- The web console (and other dev tools), when first opened, begins with a warning.\n\n- Developer tools default to opening in a separate window so they can't be confused with page content.\n\n- Hide all the dev tools until an option is clicked (as noted above).\n\n- etc", "creation_time": "2011-06-16T16:50:15Z", "bug_id": 664589, "is_private": false, "count": 4, "tags": [], "id": 5536881}, {"creator": "nfitzgerald@mozilla.com", "author": "nfitzgerald@mozilla.com", "raw_text": "I hesitate to use the term \"middle ground\" because that implies to me that the security and usability of developer tools are somewhat mutually exclusive or that if you have more of one, you get less of the other. In reality I don't think that is true; I think we can find a solution which can maximize both properties.\n\nWhat if we did something similar to what happens when you visit an encrypted page that contains unencrypted assets?\n\nThat is, when any developer tool is opened, display a pop up warning which asks the user if they know what they are doing and summarizes the risks. It would also include a \"never show me this warning again\" checkbox.\n\nThe advantages that I see with this approach are:\n\n  * Developer tools can still be easily accessible and discoverable, as they currently are. The spirit of \"view source\" lives on.\n\n  * \"Normal\" users get a pretty shocking warning when they open a tool that they could potentially be \"persuaded\" to shoot themselves in the foot with. Furthermore, it should be clear that the warning isn't just part of the webpage, but outside of that in browser land.\n\n  * Developers can check the box to hide the message in the future so that the usability of the tools is not negatively impacted in the future.\n\nThoughts?", "creation_time": "2011-06-16T17:06:42Z", "text": "I hesitate to use the term \"middle ground\" because that implies to me that the security and usability of developer tools are somewhat mutually exclusive or that if you have more of one, you get less of the other. In reality I don't think that is true; I think we can find a solution which can maximize both properties.\n\nWhat if we did something similar to what happens when you visit an encrypted page that contains unencrypted assets?\n\nThat is, when any developer tool is opened, display a pop up warning which asks the user if they know what they are doing and summarizes the risks. It would also include a \"never show me this warning again\" checkbox.\n\nThe advantages that I see with this approach are:\n\n  * Developer tools can still be easily accessible and discoverable, as they currently are. The spirit of \"view source\" lives on.\n\n  * \"Normal\" users get a pretty shocking warning when they open a tool that they could potentially be \"persuaded\" to shoot themselves in the foot with. Furthermore, it should be clear that the warning isn't just part of the webpage, but outside of that in browser land.\n\n  * Developers can check the box to hide the message in the future so that the usability of the tools is not negatively impacted in the future.\n\nThoughts?", "time": "2011-06-16T17:06:42Z", "attachment_id": null, "count": 5, "is_private": false, "tags": [], "id": 5536927, "bug_id": 664589}, {"creator": "jruderman@gmail.com", "author": "jruderman@gmail.com", "text": "I'm only worried about the aspects of developer tools that allow modifying the page, and in particular injecting script into the page.\n\n\"The spirit of View Source\" does not require being able to inject scripts into page.  Anyone who is far enough into web development to want to do that would be happy having a Develop menu instead of a submenu of Tools.\n\nBy the way, \"View Source\" itself may get some big improvements soon: https://wiki.mozilla.org/DevTools/Features/ViewSource.", "time": "2011-06-16T17:22:16Z", "attachment_id": null, "creation_time": "2011-06-16T17:22:16Z", "raw_text": "I'm only worried about the aspects of developer tools that allow modifying the page, and in particular injecting script into the page.\n\n\"The spirit of View Source\" does not require being able to inject scripts into page.  Anyone who is far enough into web development to want to do that would be happy having a Develop menu instead of a submenu of Tools.\n\nBy the way, \"View Source\" itself may get some big improvements soon: https://wiki.mozilla.org/DevTools/Features/ViewSource.", "bug_id": 664589, "tags": [], "count": 6, "is_private": false, "id": 5536973}, {"creator": "bugzilla@nulltxt.se", "author": "bugzilla@nulltxt.se", "bug_id": 664589, "is_private": false, "count": 7, "tags": [], "id": 5537158, "text": "(In reply to comment #6)\n> I'm only worried about the aspects of developer tools that allow modifying\n> the page, and in particular injecting script into the page.\n> \nindeed a concern\n\n> \"The spirit of View Source\" does not require being able to inject scripts\n> into page.  Anyone who is far enough into web development to want to do that\n> would be happy having a Develop menu instead of a submenu of Tools.\nOn Linux and Windows these tools are already in a submenu in the default toolbar configuration\n\nI was not comparing our tools to a benign 'view source', I meant that modern pages need to be understood as much as old-school static html. I'd hate to hide these from everyday people, and I'd not want to scare people too much about using them. I do agree we have a responsibility to protect the innocent as much as is reasonable.", "attachment_id": null, "time": "2011-06-16T18:20:23Z", "raw_text": "(In reply to comment #6)\n> I'm only worried about the aspects of developer tools that allow modifying\n> the page, and in particular injecting script into the page.\n> \nindeed a concern\n\n> \"The spirit of View Source\" does not require being able to inject scripts\n> into page.  Anyone who is far enough into web development to want to do that\n> would be happy having a Develop menu instead of a submenu of Tools.\nOn Linux and Windows these tools are already in a submenu in the default toolbar configuration\n\nI was not comparing our tools to a benign 'view source', I meant that modern pages need to be understood as much as old-school static html. I'd hate to hide these from everyday people, and I'd not want to scare people too much about using them. I do agree we have a responsibility to protect the innocent as much as is reasonable.", "creation_time": "2011-06-16T18:20:23Z"}, {"creator": "brandon@hackmill.com", "author": "brandon@hackmill.com", "text": "(In reply to comment #4)\n> Brandon do we have any data about current misuse of the JS web-console? (as\n> opposed to the location bar) I guess it's hard to know since bug 656433\n> hasn't been shipped yet?\n\nI don't for the reason you mentioned.\n\n> We might also consider a range of UI options to mitigate this problem:\n> <snip>\n\nOf the options you listed, I strongly favor:\n> - Hide all the dev tools until an option is clicked (as noted above).\n\nAny strategy that depends on a warning, a la about:config, is only likely to add another \"Enter\" to the \"Highlight, Ctrl+C, Ctrl+Shift+K, Ctrl+V, Enter\" sequence (the extra \"Enter\" dismissing the warning).\n\nI understand the discoverability issue, but do we really think there are users capable of understanding and utilizing Developer Tools who wouldn't be willing to first set a pref?", "time": "2011-06-16T20:15:49Z", "attachment_id": null, "raw_text": "(In reply to comment #4)\n> Brandon do we have any data about current misuse of the JS web-console? (as\n> opposed to the location bar) I guess it's hard to know since bug 656433\n> hasn't been shipped yet?\n\nI don't for the reason you mentioned.\n\n> We might also consider a range of UI options to mitigate this problem:\n> <snip>\n\nOf the options you listed, I strongly favor:\n> - Hide all the dev tools until an option is clicked (as noted above).\n\nAny strategy that depends on a warning, a la about:config, is only likely to add another \"Enter\" to the \"Highlight, Ctrl+C, Ctrl+Shift+K, Ctrl+V, Enter\" sequence (the extra \"Enter\" dismissing the warning).\n\nI understand the discoverability issue, but do we really think there are users capable of understanding and utilizing Developer Tools who wouldn't be willing to first set a pref?", "creation_time": "2011-06-16T20:15:49Z", "bug_id": 664589, "tags": [], "is_private": false, "count": 8, "id": 5537550}, {"creator": "jwalker@mozilla.com", "author": "jwalker@mozilla.com", "raw_text": "\nQuick review of what everyone else does.\n\nThis is the fastest route I could find to execute JavaScript in the clipboard on the various browsers, from default install:\n\n- Safari: CMD+,, click Advanced tab, click Show Develop menu, close dialog, OPT+CMD+C, CMD+V\n- Opera: OPT+CMD+I, ESC, CMD+V\n- Chrome: OPT+CMD+J, CMD+V\n- Firefox: CMD_SHIFT+K, CMD+V\n- IE (win): F12, click console, CTRL+V\n\nI strongly suspect that Safari are doing their thing not because of a Facebook scam, but because they think the Develop menu is ugly.\nI strongly suspect that Microsoft are doing their thing because they've not actively tried to make it easy (or make it easy for me to find the shortcut).\n\nSo maybe no-one else is trying to solve this problem.\n\nI wonder if we have contacts in Google that could answer the question about where the scammers go when they close the location bar hole - I see they already strip \"^javascript:\" off anything that is pasted in the url bar (which has the *very* nice side effect of searching for the script - which tells Google of the attack)", "creation_time": "2011-06-16T21:39:51Z", "text": "\nQuick review of what everyone else does.\n\nThis is the fastest route I could find to execute JavaScript in the clipboard on the various browsers, from default install:\n\n- Safari: CMD+,, click Advanced tab, click Show Develop menu, close dialog, OPT+CMD+C, CMD+V\n- Opera: OPT+CMD+I, ESC, CMD+V\n- Chrome: OPT+CMD+J, CMD+V\n- Firefox: CMD_SHIFT+K, CMD+V\n- IE (win): F12, click console, CTRL+V\n\nI strongly suspect that Safari are doing their thing not because of a Facebook scam, but because they think the Develop menu is ugly.\nI strongly suspect that Microsoft are doing their thing because they've not actively tried to make it easy (or make it easy for me to find the shortcut).\n\nSo maybe no-one else is trying to solve this problem.\n\nI wonder if we have contacts in Google that could answer the question about where the scammers go when they close the location bar hole - I see they already strip \"^javascript:\" off anything that is pasted in the url bar (which has the *very* nice side effect of searching for the script - which tells Google of the attack)", "time": "2011-06-16T21:39:51Z", "attachment_id": null, "is_private": false, "count": 9, "tags": [], "id": 5537832, "bug_id": 664589}, {"author": "rcampbell@mozilla.com", "creator": "rcampbell@mozilla.com", "raw_text": "A couple of thoughts, since I'm late to this party:\n\n1) an about:config preference is terrible UI. I think everybody here agrees with that.\n\n2) adding a preference UI to turn on the features is the least egregious solution to these problems, though an attacker will only have to convince a user to select that once and then we're back in the same boat.\n\n3) having to restart the browser to have developer tools access would suck.\n\nAssuming we were to implement 2 (and 3), we'll need to add a bunch of first-time-use startup code, some additional preference UI (probably to the already-busy Advanced pane, or create a new Developer Tools pane with one checkbox) and additionally, because of our focus on being able to turn off new features for rapid releases, provide an additional pref allowing the release gods to be able to turn off all of this new functionality.\n\nIn short, it's a surprising amount of work for something that is a fairly theoretical attack. Work that takes us away from actually implementing useful developer tools.", "creation_time": "2011-06-21T14:56:56Z", "time": "2011-06-21T14:56:56Z", "attachment_id": null, "text": "A couple of thoughts, since I'm late to this party:\n\n1) an about:config preference is terrible UI. I think everybody here agrees with that.\n\n2) adding a preference UI to turn on the features is the least egregious solution to these problems, though an attacker will only have to convince a user to select that once and then we're back in the same boat.\n\n3) having to restart the browser to have developer tools access would suck.\n\nAssuming we were to implement 2 (and 3), we'll need to add a bunch of first-time-use startup code, some additional preference UI (probably to the already-busy Advanced pane, or create a new Developer Tools pane with one checkbox) and additionally, because of our focus on being able to turn off new features for rapid releases, provide an additional pref allowing the release gods to be able to turn off all of this new functionality.\n\nIn short, it's a surprising amount of work for something that is a fairly theoretical attack. Work that takes us away from actually implementing useful developer tools.", "id": 5545416, "is_private": false, "count": 10, "tags": [], "bug_id": 664589}, {"author": "rcampbell@mozilla.com", "creator": "rcampbell@mozilla.com", "id": 5545440, "tags": [], "count": 11, "is_private": false, "bug_id": 664589, "raw_text": "oh, and to be clear, I'm not opposed to actually doing the work I mention in C10. I just want to emphasize that there is some cost.\n\nAnother possibility might be to disable the menu items (or some set of them) in the Web Developer submenus until a user selects an enable item.", "creation_time": "2011-06-21T15:05:20Z", "time": "2011-06-21T15:05:20Z", "attachment_id": null, "text": "oh, and to be clear, I'm not opposed to actually doing the work I mention in C10. I just want to emphasize that there is some cost.\n\nAnother possibility might be to disable the menu items (or some set of them) in the Web Developer submenus until a user selects an enable item."}, {"tags": [], "is_private": false, "count": 12, "id": 5757064, "bug_id": 664589, "raw_text": "In bug 691452, I was proposing:\n\n> The \"Web Developer\" menuitem could be a check box (<menuitem type=checkbox>), once activated, it becomes a nested submenu (the one we have right now), and the \"Inspect Element\" menuitem in the context menu appears. Then, the way to disable it could be an extra menuitem in the \"Web Developer\" menu, called \"disable developer tools\".", "creation_time": "2011-10-04T12:25:57Z", "text": "In bug 691452, I was proposing:\n\n> The \"Web Developer\" menuitem could be a check box (<menuitem type=checkbox>), once activated, it becomes a nested submenu (the one we have right now), and the \"Inspect Element\" menuitem in the context menu appears. Then, the way to disable it could be an extra menuitem in the \"Web Developer\" menu, called \"disable developer tools\".", "time": "2011-10-04T12:25:57Z", "attachment_id": null, "creator": "paul@mozilla.com", "author": "paul@mozilla.com"}, {"creator": "paul@mozilla.com", "author": "paul@mozilla.com", "tags": [], "count": 13, "is_private": false, "id": 5757070, "bug_id": 664589, "creation_time": "2011-10-04T12:28:04Z", "raw_text": "(sorry for the bad formatting)\n\nIn bug 691452, I was proposing:\n\n> The \"Web Developer\" menuitem could be a check box (<menuitem type=checkbox>), once\n> activated, it becomes a nested submenu (the one we have right now), and the \"Inspect\n> Element\" menuitem in the context menu appears. Then, the way to disable it could be an\n> extra menuitem in the \"Web Developer\" menu, called \"disable developer tools\".", "text": "(sorry for the bad formatting)\n\nIn bug 691452, I was proposing:\n\n> The \"Web Developer\" menuitem could be a check box (<menuitem type=checkbox>), once\n> activated, it becomes a nested submenu (the one we have right now), and the \"Inspect\n> Element\" menuitem in the context menu appears. Then, the way to disable it could be an\n> extra menuitem in the \"Web Developer\" menu, called \"disable developer tools\".", "time": "2011-10-04T12:28:04Z", "attachment_id": null}, {"author": "dangoor@gmail.com", "creator": "dangoor@gmail.com", "time": "2011-10-05T13:06:57Z", "attachment_id": null, "text": "(In reply to Paul Rouget [:paul] from comment #12)\n> In bug 691452, I was proposing:\n> \n> > The \"Web Developer\" menuitem could be a check box\n\nHow does this impact add-ons that put things in the Web Developer menu?", "creation_time": "2011-10-05T13:06:57Z", "raw_text": "(In reply to Paul Rouget [:paul] from comment #12)\n> In bug 691452, I was proposing:\n> \n> > The \"Web Developer\" menuitem could be a check box\n\nHow does this impact add-ons that put things in the Web Developer menu?", "bug_id": 664589, "id": 5760036, "tags": [], "is_private": false, "count": 14}, {"creator": "rcampbell@mozilla.com", "author": "rcampbell@mozilla.com", "bug_id": 664589, "tags": [], "count": 15, "is_private": false, "id": 5760050, "text": "How about leaving the items in the Web Developer menu but disable them? At the top of the menu, place a \"Enable Developer Tools\" menuitem checkbox that turns the whole thing on leaves the setting in place.\n\nTools\n-----\n  ...\n  Web Developer>\n  -------------\n    Enable Developer Tools \u2610\n    ------------------------  <- items below this are disabled.\n    Web Console\n    Inspect\n    Scratchpad\n    ...", "attachment_id": null, "time": "2011-10-05T13:15:36Z", "creation_time": "2011-10-05T13:15:36Z", "raw_text": "How about leaving the items in the Web Developer menu but disable them? At the top of the menu, place a \"Enable Developer Tools\" menuitem checkbox that turns the whole thing on leaves the setting in place.\n\nTools\n-----\n  ...\n  Web Developer>\n  -------------\n    Enable Developer Tools \u2610\n    ------------------------  <- items below this are disabled.\n    Web Console\n    Inspect\n    Scratchpad\n    ..."}, {"creator": "bugzilla@nulltxt.se", "author": "bugzilla@nulltxt.se", "bug_id": 664589, "tags": [], "is_private": false, "count": 16, "id": 5760063, "text": "(In reply to Rob Campbell [:rc] (robcee) from comment #15)\n> How about leaving the items in the Web Developer menu but disable them? At\n> the top of the menu, place a \"Enable Developer Tools\" menuitem checkbox that\n> turns the whole thing on leaves the setting in place.\n\nThis is the least ridiculous solution, however, I still feel like this is all so theoretical without a study and number of victims, cnn news footage, etc.", "attachment_id": null, "time": "2011-10-05T13:22:18Z", "creation_time": "2011-10-05T13:22:18Z", "raw_text": "(In reply to Rob Campbell [:rc] (robcee) from comment #15)\n> How about leaving the items in the Web Developer menu but disable them? At\n> the top of the menu, place a \"Enable Developer Tools\" menuitem checkbox that\n> turns the whole thing on leaves the setting in place.\n\nThis is the least ridiculous solution, however, I still feel like this is all so theoretical without a study and number of victims, cnn news footage, etc."}, {"author": "rcampbell@mozilla.com", "attachment_id": null, "time": "2011-10-05T13:26:44Z", "text": "(In reply to David Dahl :ddahl from comment #16)\n> (In reply to Rob Campbell [:rc] (robcee) from comment #15)\n> > How about leaving the items in the Web Developer menu but disable them? At\n> > the top of the menu, place a \"Enable Developer Tools\" menuitem checkbox that\n> > turns the whole thing on leaves the setting in place.\n> \n> This is the least ridiculous solution, however, I still feel like this is\n> all so theoretical without a study and number of victims, cnn news footage,\n> etc.\n\nagreed.", "creator": "rcampbell@mozilla.com", "creation_time": "2011-10-05T13:26:44Z", "raw_text": "(In reply to David Dahl :ddahl from comment #16)\n> (In reply to Rob Campbell [:rc] (robcee) from comment #15)\n> > How about leaving the items in the Web Developer menu but disable them? At\n> > the top of the menu, place a \"Enable Developer Tools\" menuitem checkbox that\n> > turns the whole thing on leaves the setting in place.\n> \n> This is the least ridiculous solution, however, I still feel like this is\n> all so theoretical without a study and number of victims, cnn news footage,\n> etc.\n\nagreed.", "bug_id": 664589, "id": 5760067, "tags": [], "is_private": false, "count": 17}, {"creator": "jwalker@mozilla.com", "author": "jwalker@mozilla.com", "raw_text": "(In reply to Kevin Dangoor from comment #14)\n> (In reply to Paul Rouget [:paul] from comment #12)\n> > In bug 691452, I was proposing:\n> > \n> > > The \"Web Developer\" menuitem could be a check box\n> \n> How does this impact add-ons that put things in the Web Developer menu?\n\nInstalling a web developer add-on is an indication that you are a web developer, and so the menu should be enabled automatically.", "creation_time": "2011-10-05T13:50:43Z", "text": "(In reply to Kevin Dangoor from comment #14)\n> (In reply to Paul Rouget [:paul] from comment #12)\n> > In bug 691452, I was proposing:\n> > \n> > > The \"Web Developer\" menuitem could be a check box\n> \n> How does this impact add-ons that put things in the Web Developer menu?\n\nInstalling a web developer add-on is an indication that you are a web developer, and so the menu should be enabled automatically.", "time": "2011-10-05T13:50:43Z", "attachment_id": null, "is_private": false, "count": 18, "tags": [], "id": 5760123, "bug_id": 664589}, {"raw_text": "(In reply to David Dahl :ddahl from comment #16)\n> (In reply to Rob Campbell [:rc] (robcee) from comment #15)\n> > How about leaving the items in the Web Developer menu but disable them? At\n> > the top of the menu, place a \"Enable Developer Tools\" menuitem checkbox that\n> > turns the whole thing on leaves the setting in place.\n> \n> This is the least ridiculous solution, however, I still feel like this is\n> all so theoretical without a study and number of victims, cnn news footage,\n> etc.\n\nIndeed (both on the solution and the theoretical nature of this bug). Perhaps this discussion better fits bug 691452.", "creation_time": "2011-10-05T14:06:04Z", "time": "2011-10-05T14:06:04Z", "attachment_id": null, "text": "(In reply to David Dahl :ddahl from comment #16)\n> (In reply to Rob Campbell [:rc] (robcee) from comment #15)\n> > How about leaving the items in the Web Developer menu but disable them? At\n> > the top of the menu, place a \"Enable Developer Tools\" menuitem checkbox that\n> > turns the whole thing on leaves the setting in place.\n> \n> This is the least ridiculous solution, however, I still feel like this is\n> all so theoretical without a study and number of victims, cnn news footage,\n> etc.\n\nIndeed (both on the solution and the theoretical nature of this bug). Perhaps this discussion better fits bug 691452.", "id": 5760155, "tags": [], "count": 19, "is_private": false, "bug_id": 664589, "author": "dangoor@gmail.com", "creator": "dangoor@gmail.com"}, {"is_private": false, "count": 20, "tags": [], "id": 5760485, "bug_id": 664589, "creation_time": "2011-10-05T16:11:58Z", "raw_text": "The attack that this bug was filed to mitigate is not theoretical at all.  See bug 527530 comment 70 for commentary from Facebook Security about how the malicious bookmarklet attack evolved after Chrome disabled _pasting_ of javascript: URLs in the location bar (you can still type them).\n\nThe attack morphed into copying a 'avascript:' URL and convincing the user to type 'j' then paste.  It is completely reasonable to expect attackers to go after Firefox users by saying type Ctrl+Shift+K then paste.  I fully expect this to happen now that we've fixed bug 656433.\n\nComment 15 sounds eminently reasonable.", "text": "The attack that this bug was filed to mitigate is not theoretical at all.  See bug 527530 comment 70 for commentary from Facebook Security about how the malicious bookmarklet attack evolved after Chrome disabled _pasting_ of javascript: URLs in the location bar (you can still type them).\n\nThe attack morphed into copying a 'avascript:' URL and convincing the user to type 'j' then paste.  It is completely reasonable to expect attackers to go after Firefox users by saying type Ctrl+Shift+K then paste.  I fully expect this to happen now that we've fixed bug 656433.\n\nComment 15 sounds eminently reasonable.", "time": "2011-10-05T16:11:58Z", "attachment_id": null, "creator": "brandon@hackmill.com", "author": "brandon@hackmill.com"}, {"is_private": false, "count": 21, "tags": [], "id": 5761576, "bug_id": 664589, "creation_time": "2011-10-05T21:09:11Z", "raw_text": "If we do need to mitigate this attack, I'd prefer to do it without wholesale declaration of developer tools as Dangerous.\n\nWhat if we started the web console, let people watch their page in action, but instead of a command line have a button of some sort saying \"Enable developer-only tools that might hurt my computer.\"  Same with any other place we allow code execution.", "text": "If we do need to mitigate this attack, I'd prefer to do it without wholesale declaration of developer tools as Dangerous.\n\nWhat if we started the web console, let people watch their page in action, but instead of a command line have a button of some sort saying \"Enable developer-only tools that might hurt my computer.\"  Same with any other place we allow code execution.", "attachment_id": null, "time": "2011-10-05T21:09:11Z", "creator": "dave.camp@gmail.com", "author": "dave.camp@gmail.com"}, {"raw_text": "That does add some implementation burden to developer tools hackers and reviewers, and adds a standard question to the security reviews of developer tools features.", "creation_time": "2011-10-05T21:10:20Z", "text": "That does add some implementation burden to developer tools hackers and reviewers, and adds a standard question to the security reviews of developer tools features.", "time": "2011-10-05T21:10:20Z", "attachment_id": null, "is_private": false, "count": 22, "tags": [], "id": 5761585, "bug_id": 664589, "creator": "dave.camp@gmail.com", "author": "dave.camp@gmail.com"}, {"is_private": false, "count": 23, "tags": [], "id": 5761631, "bug_id": 664589, "creation_time": "2011-10-05T21:20:11Z", "raw_text": "(In reply to Dave Camp (:dcamp) from comment #21)\n> What if we started the web console, let people watch their page in action,\n> but instead of a command line have a button of some sort saying \"Enable\n> developer-only tools that might hurt my computer.\"  Same with any other\n> place we allow code execution.\n\nI'm personally fine with this approach too.  In some ways, this is better than the simple pref or Dev-Tools-enabling checkbox, because it adds a cognitive barrier to users who wouldn't otherwise understand that they are about to run software in the context of the site they're viewing.  The former only makes the attack require more steps and thus raise the suspicion of potential victims.\n\nI could definitely accept a solution that exposes all of the more \"passive\" or \"introspective\" elements of our Dev Tools by default and hides the code executing functionality behind a sufficiently scary warning.", "text": "(In reply to Dave Camp (:dcamp) from comment #21)\n> What if we started the web console, let people watch their page in action,\n> but instead of a command line have a button of some sort saying \"Enable\n> developer-only tools that might hurt my computer.\"  Same with any other\n> place we allow code execution.\n\nI'm personally fine with this approach too.  In some ways, this is better than the simple pref or Dev-Tools-enabling checkbox, because it adds a cognitive barrier to users who wouldn't otherwise understand that they are about to run software in the context of the site they're viewing.  The former only makes the attack require more steps and thus raise the suspicion of potential victims.\n\nI could definitely accept a solution that exposes all of the more \"passive\" or \"introspective\" elements of our Dev Tools by default and hides the code executing functionality behind a sufficiently scary warning.", "attachment_id": null, "time": "2011-10-05T21:20:11Z", "creator": "brandon@hackmill.com", "author": "brandon@hackmill.com"}, {"author": "bugzilla@johnath.com", "creator": "bugzilla@johnath.com", "attachment_id": null, "time": "2011-11-17T21:46:02Z", "text": "It doesn't seem likely to me that this would mitigate the described threat. The victims of these scams are being told, essentially, \"There is valuable stuff hidden in facebook that you can only get by hacking on the site using this secret recipe - check it out!\" My sense is that while additional steps may cause some level of fall-off, a preference or an in-console prompt that says \"Enable developer tools\" will mostly just reinforce the notion that they are getting access to secret goodies.\n\nI appreciate that this is not a particularly constructive comment, since I haven't been clever enough yet to think of something that I *do* believe would prevent this attack. Nevertheless, I am concerned that we would harm the usability of a developer tool without concomitant user safety gained.", "raw_text": "It doesn't seem likely to me that this would mitigate the described threat. The victims of these scams are being told, essentially, \"There is valuable stuff hidden in facebook that you can only get by hacking on the site using this secret recipe - check it out!\" My sense is that while additional steps may cause some level of fall-off, a preference or an in-console prompt that says \"Enable developer tools\" will mostly just reinforce the notion that they are getting access to secret goodies.\n\nI appreciate that this is not a particularly constructive comment, since I haven't been clever enough yet to think of something that I *do* believe would prevent this attack. Nevertheless, I am concerned that we would harm the usability of a developer tool without concomitant user safety gained.", "creation_time": "2011-11-17T21:46:02Z", "bug_id": 664589, "id": 5856484, "tags": [], "is_private": false, "count": 24}, {"is_private": false, "count": 25, "tags": [], "id": 5856826, "bug_id": 664589, "creation_time": "2011-11-17T23:42:53Z", "raw_text": "(In reply to Johnathan Nightingale [:johnath] from comment #24)\n> .. My sense is that while additional steps\n> may cause some level of fall-off, a preference or an in-console prompt that\n> says \"Enable developer tools\" will mostly just reinforce the notion that\n> they are getting access to secret goodies.\n\nDave's example did have the phrase 'that might hurt my computer', which could indicate to some people that rather than attacking Facebook you're being duped into attacking yourself.\n\nSimply protecting the command line isn't enough (or at least won't be when we're allowing editing in all the places we have planned)\nThe correct solution might be a read-only mode which the whole of developer tools can be put into, I wonder how much work that would be.\n\nVarious barriers have been suggested - perhaps the people that don't overcome the suggested barriers are unlikely to learn anything useful about the web from our tools. So maybe humanity won't actually lose anything?", "text": "(In reply to Johnathan Nightingale [:johnath] from comment #24)\n> .. My sense is that while additional steps\n> may cause some level of fall-off, a preference or an in-console prompt that\n> says \"Enable developer tools\" will mostly just reinforce the notion that\n> they are getting access to secret goodies.\n\nDave's example did have the phrase 'that might hurt my computer', which could indicate to some people that rather than attacking Facebook you're being duped into attacking yourself.\n\nSimply protecting the command line isn't enough (or at least won't be when we're allowing editing in all the places we have planned)\nThe correct solution might be a read-only mode which the whole of developer tools can be put into, I wonder how much work that would be.\n\nVarious barriers have been suggested - perhaps the people that don't overcome the suggested barriers are unlikely to learn anything useful about the web from our tools. So maybe humanity won't actually lose anything?", "attachment_id": null, "time": "2011-11-17T23:42:53Z", "creator": "jwalker@mozilla.com", "author": "jwalker@mozilla.com"}, {"bug_id": 664589, "tags": [], "is_private": false, "count": 26, "id": 5863631, "text": "(In reply to Joe Walker from comment #25)\n> (In reply to Johnathan Nightingale [:johnath] from comment #24)\n> > .. My sense is that while additional steps\n> > may cause some level of fall-off, a preference or an in-console prompt that\n> > says \"Enable developer tools\" will mostly just reinforce the notion that\n> > they are getting access to secret goodies.\n> ...\n> \n> Various barriers have been suggested - perhaps the people that don't\n> overcome the suggested barriers are unlikely to learn anything useful about\n> the web from our tools. So maybe humanity won't actually lose anything?\n\nMy question is, are we actually keeping users safer by introducing this, or are we placating ourselves by having \"done something\" while, in point of fact, our users still get victimized?\n\nI don't have an alternate suggestion - I wish I did. Maybe a pref that says \"enable developer tools\" is good enough, though I don't think I love the scary language associated with it - keeping users safe is on-mission, but so is helping people take apart the web to understand how it works. I don't want to scare people off doing so.\n\nIt's not an easy problem to solve. We've got users blindly copy-pasting code they don't understand, but we want to build a UI that helps them understand the potential impacts. And we want to do it in tools expressly designed for a different set of users, who don't want or need to be nagged. Is that possible? Adding a swath of UX people to add clever ideas to the mix.\n\nI know no one's arguing that we should just Do Something in order to say that we've done something. I just don't see (and I admit that it's intuition, not data governing this) that an opt-in pref will do the thing we want for the audience we want, whereas it will add (albeit minor) nuisance to a segment we don't want to annoy.", "attachment_id": null, "time": "2011-11-21T22:04:41Z", "raw_text": "(In reply to Joe Walker from comment #25)\n> (In reply to Johnathan Nightingale [:johnath] from comment #24)\n> > .. My sense is that while additional steps\n> > may cause some level of fall-off, a preference or an in-console prompt that\n> > says \"Enable developer tools\" will mostly just reinforce the notion that\n> > they are getting access to secret goodies.\n> ...\n> \n> Various barriers have been suggested - perhaps the people that don't\n> overcome the suggested barriers are unlikely to learn anything useful about\n> the web from our tools. So maybe humanity won't actually lose anything?\n\nMy question is, are we actually keeping users safer by introducing this, or are we placating ourselves by having \"done something\" while, in point of fact, our users still get victimized?\n\nI don't have an alternate suggestion - I wish I did. Maybe a pref that says \"enable developer tools\" is good enough, though I don't think I love the scary language associated with it - keeping users safe is on-mission, but so is helping people take apart the web to understand how it works. I don't want to scare people off doing so.\n\nIt's not an easy problem to solve. We've got users blindly copy-pasting code they don't understand, but we want to build a UI that helps them understand the potential impacts. And we want to do it in tools expressly designed for a different set of users, who don't want or need to be nagged. Is that possible? Adding a swath of UX people to add clever ideas to the mix.\n\nI know no one's arguing that we should just Do Something in order to say that we've done something. I just don't see (and I admit that it's intuition, not data governing this) that an opt-in pref will do the thing we want for the audience we want, whereas it will add (albeit minor) nuisance to a segment we don't want to annoy.", "creation_time": "2011-11-21T22:04:41Z", "creator": "bugzilla@johnath.com", "author": "bugzilla@johnath.com"}, {"author": "rcampbell@mozilla.com", "creator": "rcampbell@mozilla.com", "bug_id": 664589, "id": 5865371, "count": 27, "is_private": false, "tags": [], "time": "2011-11-22T15:13:42Z", "attachment_id": null, "text": "Dave Camp, Dietrich and I discussed this a bit last week. Short tldr; pr\u00e9cis: We have no magic bullet for this.\n\nI don't like the scary language either, and anyone who's being told they are going to \"hack ${SOCIALNETWORK}\" already feel like they're doing something dangerous and sneaky. A warning dialog is probably not going to stop them.\n\nI don't like hiding the tools behind a preference for the reasons you mention. We want to give people tools to help them understand what's going on under the covers.\n\nPreventing pasting? Heuristics to determine where a user is trying to run code and preventing them from doing so on blacklisted pages seems error-prone and, frankly, a lot of work.\n\nI would love to have a solution that feels good, but my developer-tool-loving gut says, the best solution is to leave these on and available to everyone without scary language and hoops to jump through. I want people to feel good about learning how to hack the web. I don't want them to feel like what they're doing is dangerous or scary or creepy.", "creation_time": "2011-11-22T15:13:42Z", "raw_text": "Dave Camp, Dietrich and I discussed this a bit last week. Short tldr; pr\u00e9cis: We have no magic bullet for this.\n\nI don't like the scary language either, and anyone who's being told they are going to \"hack ${SOCIALNETWORK}\" already feel like they're doing something dangerous and sneaky. A warning dialog is probably not going to stop them.\n\nI don't like hiding the tools behind a preference for the reasons you mention. We want to give people tools to help them understand what's going on under the covers.\n\nPreventing pasting? Heuristics to determine where a user is trying to run code and preventing them from doing so on blacklisted pages seems error-prone and, frankly, a lot of work.\n\nI would love to have a solution that feels good, but my developer-tool-loving gut says, the best solution is to leave these on and available to everyone without scary language and hoops to jump through. I want people to feel good about learning how to hack the web. I don't want them to feel like what they're doing is dangerous or scary or creepy."}, {"creator": "jwalker@mozilla.com", "author": "jwalker@mozilla.com", "bug_id": 664589, "count": 28, "is_private": false, "tags": [], "id": 5865436, "text": "Personally, I don't think we can do nothing about comment 20.\n\nI also think that bugzilla is a terrible place to discuss this. We're losing ideas in the scroll, and in danger of going over the same ground over and over again.\nEven etherpad would be better.", "time": "2011-11-22T15:48:19Z", "attachment_id": null, "creation_time": "2011-11-22T15:48:19Z", "raw_text": "Personally, I don't think we can do nothing about comment 20.\n\nI also think that bugzilla is a terrible place to discuss this. We're losing ideas in the scroll, and in danger of going over the same ground over and over again.\nEven etherpad would be better."}, {"creator": "bugzilla@johnath.com", "author": "bugzilla@johnath.com", "text": "(In reply to Joe Walker from comment #28)\n> Personally, I don't think we can do nothing about comment 20.\n> \n> I also think that bugzilla is a terrible place to discuss this. We're losing\n> ideas in the scroll, and in danger of going over the same ground over and\n> over again.\n> Even etherpad would be better.\n\nWanting to do something about comment 20 is righteous, but I don't think the remedy suggested in the bug summary/comment 15 accomplishes that.\n\nYou could move it to a newsgroup or something if you like. I'm not actually sure where you'd get the discussion you want, tbh.", "time": "2011-11-22T15:51:01Z", "attachment_id": null, "creation_time": "2011-11-22T15:51:01Z", "raw_text": "(In reply to Joe Walker from comment #28)\n> Personally, I don't think we can do nothing about comment 20.\n> \n> I also think that bugzilla is a terrible place to discuss this. We're losing\n> ideas in the scroll, and in danger of going over the same ground over and\n> over again.\n> Even etherpad would be better.\n\nWanting to do something about comment 20 is righteous, but I don't think the remedy suggested in the bug summary/comment 15 accomplishes that.\n\nYou could move it to a newsgroup or something if you like. I'm not actually sure where you'd get the discussion you want, tbh.", "bug_id": 664589, "is_private": false, "count": 29, "tags": [], "id": 5865446}, {"id": 5865476, "tags": [], "is_private": false, "count": 30, "bug_id": 664589, "raw_text": "I suspect I was cc'd for a reason, and so I'll throw in my $0.02:\n\nWe've been fighting these attacks, which are essentially social hacking attacks, through many vectors as long as I've been involved with the project. It is essential that we all agree, up front, that complete elimination of the threat NOT be a goal: it's simply an impossible one. As Johnath states in comment 24, the true threat occurs when someone is able to convince a user that there is tasty cake to be eaten - once that metaphorical hunger digs in, the battle is almost certainly lost. The user will do whatever it takes to get at the cake, despite the cake being a lie[1].\n\nOur only defense is to make it *less* trivial for an attacker to be successful in their instruction to a cake-thirsty[2] user. We've done this various ways in the product, always resulting in the same problem where friction added to prevent trivially guided malice also added UX friction to those looking to use the feature in question. Sometimes this added friction has been reasonable (I think the javascript-in-URL-bar mentioned in comment 20 is a decent example) and other times it's ended up being a frequent PITA (the countdown timer used to defeat \"punch the monkey\" attacks, the unsigned add-on UI). Ultimately, though, and referring back to the previous paragraph, these additional frictions can be worked around by the clever attacker and cake-desiring user (again, see comment 20)\n\nAll that said, I think the Safari-style solution is probably best, and also serves to remove these features from the everyday user's face, which is a bit of a win-win. It won't solve the problem, but it adds a bit more friction to keep it from being entirely trivial/tweetable. We could also add a one-time transition in which the user is notified that they should be sure to trust whomever is telling them to turn on the tools, much like we do with \"This may void your warranty\".\n\nI tend to agree with Joe - it feels like discussion here has been exhausted and represents all available views. Now I would suggest that the product manager (Asa as of this writing) and feature owner (Rob, I believe?) confab with the security lead assigned (Brandon, I think?) and come to a plan of action, each acting as representative for their groups' concerns. That's the only way out of deadlock, IMO.\n\n[1]: hopefully you see what I did there\n[2]: and there", "creation_time": "2011-11-22T15:57:45Z", "time": "2011-11-22T15:57:45Z", "attachment_id": null, "text": "I suspect I was cc'd for a reason, and so I'll throw in my $0.02:\n\nWe've been fighting these attacks, which are essentially social hacking attacks, through many vectors as long as I've been involved with the project. It is essential that we all agree, up front, that complete elimination of the threat NOT be a goal: it's simply an impossible one. As Johnath states in comment 24, the true threat occurs when someone is able to convince a user that there is tasty cake to be eaten - once that metaphorical hunger digs in, the battle is almost certainly lost. The user will do whatever it takes to get at the cake, despite the cake being a lie[1].\n\nOur only defense is to make it *less* trivial for an attacker to be successful in their instruction to a cake-thirsty[2] user. We've done this various ways in the product, always resulting in the same problem where friction added to prevent trivially guided malice also added UX friction to those looking to use the feature in question. Sometimes this added friction has been reasonable (I think the javascript-in-URL-bar mentioned in comment 20 is a decent example) and other times it's ended up being a frequent PITA (the countdown timer used to defeat \"punch the monkey\" attacks, the unsigned add-on UI). Ultimately, though, and referring back to the previous paragraph, these additional frictions can be worked around by the clever attacker and cake-desiring user (again, see comment 20)\n\nAll that said, I think the Safari-style solution is probably best, and also serves to remove these features from the everyday user's face, which is a bit of a win-win. It won't solve the problem, but it adds a bit more friction to keep it from being entirely trivial/tweetable. We could also add a one-time transition in which the user is notified that they should be sure to trust whomever is telling them to turn on the tools, much like we do with \"This may void your warranty\".\n\nI tend to agree with Joe - it feels like discussion here has been exhausted and represents all available views. Now I would suggest that the product manager (Asa as of this writing) and feature owner (Rob, I believe?) confab with the security lead assigned (Brandon, I think?) and come to a plan of action, each acting as representative for their groups' concerns. That's the only way out of deadlock, IMO.\n\n[1]: hopefully you see what I did there\n[2]: and there", "author": "mbeltzner@gmail.com", "creator": "mbeltzner@gmail.com"}, {"raw_text": "(I have been told that Joe is the PM for DevTools, not Rob - sorry for that! I guess I meant that stakeholders from: DevTools, Firefox, Security all get their heads together on a plan, holding their respective stakes and representin' for their peeps.)", "creation_time": "2011-11-22T16:07:55Z", "text": "(I have been told that Joe is the PM for DevTools, not Rob - sorry for that! I guess I meant that stakeholders from: DevTools, Firefox, Security all get their heads together on a plan, holding their respective stakes and representin' for their peeps.)", "time": "2011-11-22T16:07:55Z", "attachment_id": null, "count": 31, "is_private": false, "tags": [], "id": 5865507, "bug_id": 664589, "creator": "mbeltzner@gmail.com", "author": "mbeltzner@gmail.com"}, {"creation_time": "2011-11-29T02:15:36Z", "raw_text": "Could we do something like autocomplete=off here? Give sites a way to say \"please don't execute client-supplied JS on me\"? meta tag, header, navigator.dontHurtMe(), something?\n\nThis preserves the value of the tools in the vast majority of cases, since tinkerers can still tinker unmolested with nearly every site on the web, and we can throw a descriptive error in the cases where the site has opted out. Actual site developers control the horizontal and vertical there so they can remove the opt-out during test/development. If we think that's compromising too much of our \"we answer to no one but you\" stance, we can allow disabling of respect for this guard in about config - which is already wrapped in warranty disclaimers, and we can even name the pref devtools.attackme.\n\nI don't know if that would meet facebook's needs (how easy is it for them to add header junk?) or if there is some other signal we can key off of (my first thought was https, but that throws out too much baby, I think, and anyhow co-opting one tech to serve as signal for another is peril-fraught.)\n\nAnyhow, trying to find solutions that don't pit security concerns directly against privacy.\n\n(And while I appreciate the suggestion in comment 30, I think the discussion needs to happen here because we're gonna do 30 laps on this now that script kiddies have added social-js to their arsenal. If we do reach a solution, I want the debate here so that other browsers can follow along at home.)", "text": "Could we do something like autocomplete=off here? Give sites a way to say \"please don't execute client-supplied JS on me\"? meta tag, header, navigator.dontHurtMe(), something?\n\nThis preserves the value of the tools in the vast majority of cases, since tinkerers can still tinker unmolested with nearly every site on the web, and we can throw a descriptive error in the cases where the site has opted out. Actual site developers control the horizontal and vertical there so they can remove the opt-out during test/development. If we think that's compromising too much of our \"we answer to no one but you\" stance, we can allow disabling of respect for this guard in about config - which is already wrapped in warranty disclaimers, and we can even name the pref devtools.attackme.\n\nI don't know if that would meet facebook's needs (how easy is it for them to add header junk?) or if there is some other signal we can key off of (my first thought was https, but that throws out too much baby, I think, and anyhow co-opting one tech to serve as signal for another is peril-fraught.)\n\nAnyhow, trying to find solutions that don't pit security concerns directly against privacy.\n\n(And while I appreciate the suggestion in comment 30, I think the discussion needs to happen here because we're gonna do 30 laps on this now that script kiddies have added social-js to their arsenal. If we do reach a solution, I want the debate here so that other browsers can follow along at home.)", "time": "2011-11-29T02:15:36Z", "attachment_id": null, "count": 32, "is_private": false, "tags": [], "id": 5877767, "bug_id": 664589, "creator": "bugzilla@johnath.com", "author": "bugzilla@johnath.com"}, {"author": "mbeltzner@gmail.com", "creator": "mbeltzner@gmail.com", "time": "2011-11-29T02:46:30Z", "attachment_id": null, "text": "> Could we do something like autocomplete=off here? Give sites a way to say\n> \"please don't execute client-supplied JS on me\"? meta tag, header,\n> navigator.dontHurtMe(), something?\n\nIs the attack we're concerned about in comment 0 limited to a strict subset of the web? Not that I think it's a bad idea, I just am not sure I understand why we'd want to respond to a specific location based attack. If we think that there are ways of clearly communicating \"you best know what you're doing\" to people, I'd rather we do it for all sites, not just the ones who are savvy enough to know that we may offer such protection.\n\n> (And while I appreciate the suggestion in comment 30, I think the discussion\n> needs to happen here because we're gonna do 30 laps on this now that script\n> kiddies have added social-js to their arsenal. If we do reach a solution, I\n> want the debate here so that other browsers can follow along at home.)\n\nI didn't mean to suggest a solution to be developed in private and thrown over the wall. I meant for that group to get together in a high-bandwidth communication channel and brainstorm up some solutions, then bring them back to the group along with estimates.", "raw_text": "> Could we do something like autocomplete=off here? Give sites a way to say\n> \"please don't execute client-supplied JS on me\"? meta tag, header,\n> navigator.dontHurtMe(), something?\n\nIs the attack we're concerned about in comment 0 limited to a strict subset of the web? Not that I think it's a bad idea, I just am not sure I understand why we'd want to respond to a specific location based attack. If we think that there are ways of clearly communicating \"you best know what you're doing\" to people, I'd rather we do it for all sites, not just the ones who are savvy enough to know that we may offer such protection.\n\n> (And while I appreciate the suggestion in comment 30, I think the discussion\n> needs to happen here because we're gonna do 30 laps on this now that script\n> kiddies have added social-js to their arsenal. If we do reach a solution, I\n> want the debate here so that other browsers can follow along at home.)\n\nI didn't mean to suggest a solution to be developed in private and thrown over the wall. I meant for that group to get together in a high-bandwidth communication channel and brainstorm up some solutions, then bring them back to the group along with estimates.", "creation_time": "2011-11-29T02:46:30Z", "bug_id": 664589, "id": 5877812, "is_private": false, "count": 33, "tags": []}, {"bug_id": 664589, "id": 5912654, "tags": [], "is_private": false, "count": 34, "time": "2011-12-13T18:27:42Z", "attachment_id": null, "text": "A handful of us (Brandon, Johnathan, Rob, Dave and Joe) just discussed this. The consensus formed around a solution along the lines of what johnath suggests in comment 32.\n\nThe general idea is to use Content Security Policy to allow sites to request that user run JavaScript not be allowed on that site. Users would be able to override this, using a simple about:config pref as the override mechanism to begin with.\n\nAn important part of this will be to provide the user with a link to documentation explaining why the JS cannot be executed.\n\nWe'll use this bug as a meta bug, because the implementation of this sort of plan would require several other bugs. Comments on the plan in general are welcome here!", "creation_time": "2011-12-13T18:27:42Z", "raw_text": "A handful of us (Brandon, Johnathan, Rob, Dave and Joe) just discussed this. The consensus formed around a solution along the lines of what johnath suggests in comment 32.\n\nThe general idea is to use Content Security Policy to allow sites to request that user run JavaScript not be allowed on that site. Users would be able to override this, using a simple about:config pref as the override mechanism to begin with.\n\nAn important part of this will be to provide the user with a link to documentation explaining why the JS cannot be executed.\n\nWe'll use this bug as a meta bug, because the implementation of this sort of plan would require several other bugs. Comments on the plan in general are welcome here!", "author": "dangoor@gmail.com", "creator": "dangoor@gmail.com"}, {"creator": "jwalker@mozilla.com", "author": "jwalker@mozilla.com", "text": "(In reply to Kevin Dangoor from comment #34)\n> An important part of this will be to provide the user with a link to\n> documentation explaining why the JS cannot be executed.\n\nAnd also to explain how to set the pref to turn this off.\n\nWe are keen that this doesn't come off as us conspiring with the big guys to shut off access to the little guys. We are conspiring with our broad user base against dr. evil.", "attachment_id": null, "time": "2011-12-13T18:54:37Z", "raw_text": "(In reply to Kevin Dangoor from comment #34)\n> An important part of this will be to provide the user with a link to\n> documentation explaining why the JS cannot be executed.\n\nAnd also to explain how to set the pref to turn this off.\n\nWe are keen that this doesn't come off as us conspiring with the big guys to shut off access to the little guys. We are conspiring with our broad user base against dr. evil.", "creation_time": "2011-12-13T18:54:37Z", "bug_id": 664589, "is_private": false, "count": 35, "tags": [], "id": 5912748}, {"author": "jwalker@mozilla.com", "creator": "jwalker@mozilla.com", "id": 5916375, "is_private": false, "count": 36, "tags": [], "bug_id": 664589, "raw_text": "\nCopying comments in from email:\n\nJohnath wrote:\n> On 2011-12-14, at 12:22 PM, Joe Walker wrote:\n> > Mike asked: What about bookmarklets? Since we're terming\n> > this 'no-user-js' then bookmarklets probably count.\n> >\n> > On the one hand this is a separate issue, however it's worth considering what\n> > our mitigation if any, against this would be before we invest too much in the\n> > devtools/csp solution.\n>\n> Don't make me hyperventilate with your subject lines, Joe.\n>\n> Personally, I think I'm fine with either stance:\n>\n> 1) Fail open: \"this is meant to mitigate an ease-of-user-victimization problem.\n> Getting people to create a bookmarklet and then execute it against the page is\n> not materially easier than just getting them to download an executable, so we'll\n> let bookmarklets through regardless because they're out of scope for this\n> feature\"\n>\n> 2) Fail closed: \"bookmarlets are user-supplied js. If you want to override CSP,\n> go flip the pref.\"\n>\n> I think I lean towards #2 - going to the trouble of adding a CSP rule is pretty\n> explicit and users still have ultimate control. I'd say CSP directive kills\n> bookmarklet execution, doorhanger with explanation when someone tries, voila.\n> But reasonable minds could differ and the work could still otherwise move\n> forward, I assert.\n\nThe trouble with #2 is that bookmarklets are usable by anyone that can drag a button, and our current re-enabler is only available to people who can edit about:config\n\nOn 14/12/2011 17:47, Brandon Sterne wrote:\n> It's a fair question.  My sense is that we should still allow bookmarklets under\n> no-user-js, since they require the extra step of the user creating the bookmark\n> before running it.  This is even harder now that we've removed the bookmarks\n> toolbar by default (before, you could create a <a href=javascript:...> element\n> and tell the user to drag it to the toolbar).\n>\n> If we later find that users are getting owned by bookmarking a malicious\n> javascript: URL, we could add a checkbox in the bookmark manager that says\n> something like \"Trust this bookmark to run software in my browser\", and we could\n> require that this option be checked before we run any script.\n\nSo importantly no-one is proposing anything that changes our solution to bug 664589. We can reasonably consider this separately. Breathe normally!", "creation_time": "2011-12-14T18:54:48Z", "attachment_id": null, "time": "2011-12-14T18:54:48Z", "text": "\nCopying comments in from email:\n\nJohnath wrote:\n> On 2011-12-14, at 12:22 PM, Joe Walker wrote:\n> > Mike asked: What about bookmarklets? Since we're terming\n> > this 'no-user-js' then bookmarklets probably count.\n> >\n> > On the one hand this is a separate issue, however it's worth considering what\n> > our mitigation if any, against this would be before we invest too much in the\n> > devtools/csp solution.\n>\n> Don't make me hyperventilate with your subject lines, Joe.\n>\n> Personally, I think I'm fine with either stance:\n>\n> 1) Fail open: \"this is meant to mitigate an ease-of-user-victimization problem.\n> Getting people to create a bookmarklet and then execute it against the page is\n> not materially easier than just getting them to download an executable, so we'll\n> let bookmarklets through regardless because they're out of scope for this\n> feature\"\n>\n> 2) Fail closed: \"bookmarlets are user-supplied js. If you want to override CSP,\n> go flip the pref.\"\n>\n> I think I lean towards #2 - going to the trouble of adding a CSP rule is pretty\n> explicit and users still have ultimate control. I'd say CSP directive kills\n> bookmarklet execution, doorhanger with explanation when someone tries, voila.\n> But reasonable minds could differ and the work could still otherwise move\n> forward, I assert.\n\nThe trouble with #2 is that bookmarklets are usable by anyone that can drag a button, and our current re-enabler is only available to people who can edit about:config\n\nOn 14/12/2011 17:47, Brandon Sterne wrote:\n> It's a fair question.  My sense is that we should still allow bookmarklets under\n> no-user-js, since they require the extra step of the user creating the bookmark\n> before running it.  This is even harder now that we've removed the bookmarks\n> toolbar by default (before, you could create a <a href=javascript:...> element\n> and tell the user to drag it to the toolbar).\n>\n> If we later find that users are getting owned by bookmarking a malicious\n> javascript: URL, we could add a checkbox in the bookmark manager that says\n> something like \"Trust this bookmark to run software in my browser\", and we could\n> require that this option be checked before we run any script.\n\nSo importantly no-one is proposing anything that changes our solution to bug 664589. We can reasonably consider this separately. Breathe normally!"}, {"author": "mardeg@inbox.ru", "creator": "mardeg@inbox.ru", "bug_id": 664589, "id": 5924784, "tags": [], "is_private": false, "count": 37, "time": "2011-12-17T21:25:22Z", "attachment_id": null, "text": "Should there be a bug that tracks endangering of bookmarklets? They always seem to be an afterthought to \"allow\" whenever new security measures are being implemented :(", "creation_time": "2011-12-17T21:25:22Z", "raw_text": "Should there be a bug that tracks endangering of bookmarklets? They always seem to be an afterthought to \"allow\" whenever new security measures are being implemented :("}, {"author": "jwalker@mozilla.com", "creator": "jwalker@mozilla.com", "attachment_id": null, "time": "2011-12-21T10:21:07Z", "text": "(In reply to Mardeg from comment #37)\n> Should there be a bug that tracks endangering of bookmarklets? They always\n> seem to be an afterthought to \"allow\" whenever new security measures are\n> being implemented :(\n\nIn this case we're actively planning on not touching bookmarklets. If we were to raise a bug, what would you like it to say?", "creation_time": "2011-12-21T10:21:07Z", "raw_text": "(In reply to Mardeg from comment #37)\n> Should there be a bug that tracks endangering of bookmarklets? They always\n> seem to be an afterthought to \"allow\" whenever new security measures are\n> being implemented :(\n\nIn this case we're actively planning on not touching bookmarklets. If we were to raise a bug, what would you like it to say?", "bug_id": 664589, "id": 5932115, "count": 38, "is_private": false, "tags": []}, {"creator": "rcampbell@mozilla.com", "author": "rcampbell@mozilla.com", "text": "(In reply to Mardeg from comment #37)\n> Should there be a bug that tracks endangering of bookmarklets? They always\n> seem to be an afterthought to \"allow\" whenever new security measures are\n> being implemented :(\n\nI don't think we need to create a speculative bug in case we break bookmarklets. As Joe says, we won't be affecting them by fixing this bug. I can personally guarantee I will continue using my bookmarklets when we have code for this feature and will raise bugs if I find them. :)", "attachment_id": null, "time": "2011-12-22T15:00:48Z", "creation_time": "2011-12-22T15:00:48Z", "raw_text": "(In reply to Mardeg from comment #37)\n> Should there be a bug that tracks endangering of bookmarklets? They always\n> seem to be an afterthought to \"allow\" whenever new security measures are\n> being implemented :(\n\nI don't think we need to create a speculative bug in case we break bookmarklets. As Joe says, we won't be affecting them by fixing this bug. I can personally guarantee I will continue using my bookmarklets when we have code for this feature and will raise bugs if I find them. :)", "bug_id": 664589, "is_private": false, "count": 39, "tags": [], "id": 5935144}, {"time": "2012-06-05T07:44:21Z", "attachment_id": null, "text": "I wish to negative vote this but don't see any option how to.", "creation_time": "2012-06-05T07:44:21Z", "raw_text": "I wish to negative vote this but don't see any option how to.", "bug_id": 664589, "id": 6363873, "tags": [], "is_private": false, "count": 40, "author": "andrew@joako.net", "creator": "andrew@joako.net"}, {"creator": "tanvi@mozilla.com", "author": "tanvi@mozilla.com", "text": "(In reply to Andreas van dem Helge from comment #40)\n> I wish to negative vote this but don't see any option how to.\n\nAndreas, do you have some feedback on why you don't like the no-user-js directive that sites could set if they are targeted by these types of social engineering attacks?", "time": "2012-06-05T18:16:16Z", "attachment_id": null, "raw_text": "(In reply to Andreas van dem Helge from comment #40)\n> I wish to negative vote this but don't see any option how to.\n\nAndreas, do you have some feedback on why you don't like the no-user-js directive that sites could set if they are targeted by these types of social engineering attacks?", "creation_time": "2012-06-05T18:16:16Z", "bug_id": 664589, "count": 41, "is_private": false, "tags": [], "id": 6365392}, {"time": "2012-08-08T14:18:49Z", "attachment_id": null, "author": "dangoor@gmail.com", "creator": "dangoor@gmail.com", "text": "*** Bug 779406 has been marked as a duplicate of this bug. ***", "raw_text": "", "creation_time": "2012-08-08T14:18:49Z", "bug_id": 664589, "id": 6540002, "is_private": false, "count": 42, "tags": []}, {"bug_id": 664589, "tags": [], "count": 43, "is_private": false, "id": 6595191, "creator": "tantek@cs.stanford.edu", "text": "(In reply to Brandon Sterne (:bsterne) from comment #0)\n> There is some security risk to having Developer Tools like the Web Console\n> available by default to all users.  We are seeing attacks in the wild where\n> users have been convinced to paste malicious bookmarklets in their Location\n> Bar:\n> http://www.nytimes.com/2011/06/14/technology/14security.\n> html?src=recg&pagewanted=all\n\nThere is no mention of javascript URLs in that nytimes article. Please explain how that citation substantiates any of the points made here. Or provide any other \"real world\" data/citations about how javascript: URLs in the URL bar have been exploited in actual sites (e.g. Facebook). All I've seen so far is hearsay.", "author": "tantek@cs.stanford.edu", "attachment_id": null, "time": "2012-08-29T23:46:32Z", "creation_time": "2012-08-29T23:46:32Z", "raw_text": "(In reply to Brandon Sterne (:bsterne) from comment #0)\n> There is some security risk to having Developer Tools like the Web Console\n> available by default to all users.  We are seeing attacks in the wild where\n> users have been convinced to paste malicious bookmarklets in their Location\n> Bar:\n> http://www.nytimes.com/2011/06/14/technology/14security.\n> html?src=recg&pagewanted=all\n\nThere is no mention of javascript URLs in that nytimes article. Please explain how that citation substantiates any of the points made here. Or provide any other \"real world\" data/citations about how javascript: URLs in the URL bar have been exploited in actual sites (e.g. Facebook). All I've seen so far is hearsay."}, {"author": "gavin.sharp@gmail.com", "creator": "gavin.sharp@gmail.com", "raw_text": "See related discussion in bug 527530 and bug 656433. In particular:\n\nhttp://nathanhammond.com/social-engineering-issue-with-javascript-urls\nbug 527530 comment 70\nhttp://nakedsecurity.sophos.com/2011/04/11/facebook-scam-social-tagging-worldwide/\nhttps://www.facebook.com/photo.php?v=956977232793\nhttps://www.google.com/search?q=self-xss", "creation_time": "2012-08-30T21:22:47Z", "attachment_id": null, "time": "2012-08-30T21:22:47Z", "text": "See related discussion in bug 527530 and bug 656433. In particular:\n\nhttp://nathanhammond.com/social-engineering-issue-with-javascript-urls\nbug 527530 comment 70\nhttp://nakedsecurity.sophos.com/2011/04/11/facebook-scam-social-tagging-worldwide/\nhttps://www.facebook.com/photo.php?v=956977232793\nhttps://www.google.com/search?q=self-xss", "id": 6598483, "is_private": false, "count": 44, "tags": [], "bug_id": 664589}, {"creator": "dveditz@mozilla.com", "author": "dveditz@mozilla.com", "text": "As was predicted earlier, scammers have now moved these scams to the various browser's dev tools\nhttp://webcache.googleusercontent.com/search?q=cache:-OBSVnTjcHUJ:iamshemul.com/facebook-new-spam-scripts-hack-fb-accounts-3-minutes/+&cd=1&hl=en&ct=clnk&gl=us&client=firefox-nightly\n\n(cache copy because the original appears overlimit)\n\nAccording to http://www.ultgate.com/3742/arabic-facebook-spam this has affected 1/2 million accounts.", "attachment_id": null, "time": "2014-02-13T04:40:24Z", "raw_text": "As was predicted earlier, scammers have now moved these scams to the various browser's dev tools\nhttp://webcache.googleusercontent.com/search?q=cache:-OBSVnTjcHUJ:iamshemul.com/facebook-new-spam-scripts-hack-fb-accounts-3-minutes/+&cd=1&hl=en&ct=clnk&gl=us&client=firefox-nightly\n\n(cache copy because the original appears overlimit)\n\nAccording to http://www.ultgate.com/3742/arabic-facebook-spam this has affected 1/2 million accounts.", "creation_time": "2014-02-13T04:40:24Z", "bug_id": 664589, "is_private": false, "count": 45, "tags": [], "id": 8414078}, {"raw_text": "", "creation_time": "2014-03-07T10:12:15Z", "author": "jwalker@mozilla.com", "time": "2014-03-07T10:12:15Z", "attachment_id": null, "creator": "jwalker@mozilla.com", "text": "*** Bug 971613 has been marked as a duplicate of this bug. ***", "id": 8504688, "tags": [], "is_private": false, "count": 46, "bug_id": 664589}, {"author": "jgriffiths@mozilla.com", "creator": "jgriffiths@mozilla.com", "bug_id": 664589, "id": 8695372, "is_private": false, "count": 47, "tags": [], "time": "2014-04-22T22:08:04Z", "attachment_id": null, "text": "I have a modest proposal:\n\n* implement something similar to chrome's 'warn if console history has less than ten entries'[1]\n* turn on the feature for only Release and Beta channels\n\nIMO chrome's approach would help us to, on release and beta. If we reduce the surface area for these scams to just the Aurora/Nightly populations, even if we grow those 10x to 2 million users I doubt a user base that size would be of much interest to scammers given my understanding of the relative sophistication of Aurora / Nightly users. \n\n[1] https://code.google.com/p/chromium/issues/detail?id=345205#c21", "creation_time": "2014-04-22T22:08:04Z", "raw_text": "I have a modest proposal:\n\n* implement something similar to chrome's 'warn if console history has less than ten entries'[1]\n* turn on the feature for only Release and Beta channels\n\nIMO chrome's approach would help us to, on release and beta. If we reduce the surface area for these scams to just the Aurora/Nightly populations, even if we grow those 10x to 2 million users I doubt a user base that size would be of much interest to scammers given my understanding of the relative sophistication of Aurora / Nightly users. \n\n[1] https://code.google.com/p/chromium/issues/detail?id=345205#c21"}, {"bug_id": 664589, "id": 8695508, "is_private": false, "count": 48, "tags": [], "attachment_id": null, "time": "2014-04-22T22:39:26Z", "author": "manishearth@gmail.com", "text": "@Jeff doing what Chrome does was agreed on by jruderman on bug 994134\n\n(Unfortunately the discussion for this isue is spread out across many bugs/metabugs)", "creator": "manishearth@gmail.com", "raw_text": "@Jeff doing what Chrome does was agreed on by jruderman on bug 994134\n\n(Unfortunately the discussion for this isue is spread out across many bugs/metabugs)", "creation_time": "2014-04-22T22:39:26Z"}]}}, "comments": {}}