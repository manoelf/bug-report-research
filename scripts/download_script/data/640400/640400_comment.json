{"bugs": {"640400": {"comments": [{"count": 0, "text": "User-Agent:       Mozilla/5.0 (Windows NT 6.1; rv:2.0) Gecko/20100101 Firefox/4.0\nBuild Identifier: Mozilla/5.0 (Windows NT 6.1; rv:2.0) Gecko/20100101 Firefox/4.0\n\nIt appears than HTML generated through XSLT is actually treated like XHTML with respect to treating initial blank lines in <pre>.\n\nReproducible: Always\n\nSteps to Reproduce:\n1. Visit http://greenbytes.de/tech/webdav/rfc5988.xml#rfc.section.5.5\n2. Compare to http://greenbytes.de/tech/webdav/rfc5988.html#rfc.section.5.5\n\nActual Results:  \nThe examples show up with a leading blank line.\n\nExpected Results:  \nThe examples shouldn't have a leading blank line (compare to static HTML output).", "time": "2011-03-10T00:17:45Z", "author": "julian.reschke@gmx.de", "id": 5334741, "creation_time": "2011-03-10T00:17:45Z", "bug_id": 640400, "raw_text": "User-Agent:       Mozilla/5.0 (Windows NT 6.1; rv:2.0) Gecko/20100101 Firefox/4.0\nBuild Identifier: Mozilla/5.0 (Windows NT 6.1; rv:2.0) Gecko/20100101 Firefox/4.0\n\nIt appears than HTML generated through XSLT is actually treated like XHTML with respect to treating initial blank lines in <pre>.\n\nReproducible: Always\n\nSteps to Reproduce:\n1. Visit http://greenbytes.de/tech/webdav/rfc5988.xml#rfc.section.5.5\n2. Compare to http://greenbytes.de/tech/webdav/rfc5988.html#rfc.section.5.5\n\nActual Results:  \nThe examples show up with a leading blank line.\n\nExpected Results:  \nThe examples shouldn't have a leading blank line (compare to static HTML output).", "tags": [], "creator": "julian.reschke@gmx.de", "is_private": false, "attachment_id": null}, {"id": 5335593, "time": "2011-03-10T10:32:04Z", "tags": [], "raw_text": "I can reproduce this bug on:\n Mozilla/5.0 (Windows NT 6.1; rv:2.0b13pre) Gecko/20110309 Firefox/4.0b13pre", "bug_id": 640400, "creation_time": "2011-03-10T10:32:04Z", "is_private": false, "count": 1, "text": "I can reproduce this bug on:\n Mozilla/5.0 (Windows NT 6.1; rv:2.0b13pre) Gecko/20110309 Firefox/4.0b13pre", "author": "andrei.domuta@softvision.ro", "creator": "andrei.domuta@softvision.ro", "attachment_id": null}, {"text": "When I raised this I assumed it was new behavior, but it seems 3.6.* behaves the same. (So no regression).", "count": 2, "author": "julian.reschke@gmx.de", "creator": "julian.reschke@gmx.de", "attachment_id": null, "id": 5335647, "time": "2011-03-10T11:09:45Z", "tags": [], "raw_text": "When I raised this I assumed it was new behavior, but it seems 3.6.* behaves the same. (So no regression).", "bug_id": 640400, "creation_time": "2011-03-10T11:09:45Z", "is_private": false}, {"creation_time": "2011-03-10T13:26:29Z", "bug_id": 640400, "raw_text": "Is this the same issue as in Bug 640390. Then please mark it as a duplicate", "tags": [], "creator": "andrei.domuta@softvision.ro", "attachment_id": null, "is_private": false, "count": 3, "text": "Is this the same issue as in Bug 640390. Then please mark it as a duplicate", "time": "2011-03-10T13:26:29Z", "author": "andrei.domuta@softvision.ro", "id": 5335866}, {"author": "julian.reschke@gmx.de", "count": 4, "text": "(In reply to comment #3)\n> Is this the same issue as in Bug 640390. Then please mark it as a duplicate\n\nNo, it's not.", "attachment_id": null, "creator": "julian.reschke@gmx.de", "id": 5335937, "time": "2011-03-10T13:56:48Z", "is_private": false, "tags": [], "raw_text": "(In reply to comment #3)\n> Is this the same issue as in Bug 640390. Then please mark it as a duplicate\n\nNo, it's not.", "bug_id": 640400, "creation_time": "2011-03-10T13:56:48Z"}, {"raw_text": "This is not a regression from any HTML5 work: This happens even in 3.5.17.\n\nThis is clearly a bug, though, since Firefox fails to emulate the \"html\" output mode and behaves differently from Chrome, Opera and IE.\n\nJulian, filing XSLT bugs in Core: XSLT has a higher probability of the right people seeing the bugs compared to Firefox: General.", "creation_time": "2011-03-10T14:11:24Z", "bug_id": 640400, "creator": "hsivonen@mozilla.com", "tags": [], "attachment_id": null, "is_private": false, "count": 5, "text": "This is not a regression from any HTML5 work: This happens even in 3.5.17.\n\nThis is clearly a bug, though, since Firefox fails to emulate the \"html\" output mode and behaves differently from Chrome, Opera and IE.\n\nJulian, filing XSLT bugs in Core: XSLT has a higher probability of the right people seeing the bugs compared to Firefox: General.", "author": "hsivonen@mozilla.com", "time": "2011-03-10T14:11:24Z", "id": 5335971}, {"id": 5336212, "time": "2011-03-10T15:49:21Z", "is_private": false, "tags": [], "raw_text": "Chrome, Opera, and IE all generate a string from XSLT and parse it, as I recall.\n\nGecko generates a DOM directly, so there's never an HTML parser involved here.\n\nAs far as I can tell, both behaviors are perfectly correct per the XSLT specs.  They do give different results in some cases, especially when the string is parsed with a non-XML parser or when the DOM that the XSLT creates can't be represented in serialized form.\n\nYou should be able to test this theory by creating HTML that has things like <table><form><tr></tr></form></table> in your XLST and seeing what the result looks like in the various browsers.\n\nWe don't particularly want to switch to the \"generate a string and parse\" approach here, last I checked.", "creation_time": "2011-03-10T15:49:21Z", "bug_id": 640400, "author": "bzbarsky@mit.edu", "text": "Chrome, Opera, and IE all generate a string from XSLT and parse it, as I recall.\n\nGecko generates a DOM directly, so there's never an HTML parser involved here.\n\nAs far as I can tell, both behaviors are perfectly correct per the XSLT specs.  They do give different results in some cases, especially when the string is parsed with a non-XML parser or when the DOM that the XSLT creates can't be represented in serialized form.\n\nYou should be able to test this theory by creating HTML that has things like <table><form><tr></tr></form></table> in your XLST and seeing what the result looks like in the various browsers.\n\nWe don't particularly want to switch to the \"generate a string and parse\" approach here, last I checked.", "count": 6, "attachment_id": null, "creator": "bzbarsky@mit.edu"}, {"count": 7, "text": "(In reply to comment #6)\n> Chrome, Opera, and IE all generate a string from XSLT and parse it, as I\n> recall.\n> ...\n\nI'm not sure this is correct for IE...\n\n> We don't particularly want to switch to the \"generate a string and parse\"\n> approach here, last I checked.\n\nUnderstood and agreed.\n\nNevertheless, in edge cases like this one, it does make a difference what the xslt:output method of the XSLT was. I assume when parsing HTML vs XHTML, the different behavior for <pre> happens at parse time, right? In that case it seems that the XSLT engine in Mozilla could special-case the creation of the <pre> node in the DOM based on the output method. (Just thinking load).", "time": "2011-03-10T15:59:04Z", "author": "julian.reschke@gmx.de", "id": 5336250, "creation_time": "2011-03-10T15:59:04Z", "bug_id": 640400, "raw_text": "(In reply to comment #6)\n> Chrome, Opera, and IE all generate a string from XSLT and parse it, as I\n> recall.\n> ...\n\nI'm not sure this is correct for IE...\n\n> We don't particularly want to switch to the \"generate a string and parse\"\n> approach here, last I checked.\n\nUnderstood and agreed.\n\nNevertheless, in edge cases like this one, it does make a difference what the xslt:output method of the XSLT was. I assume when parsing HTML vs XHTML, the different behavior for <pre> happens at parse time, right? In that case it seems that the XSLT engine in Mozilla could special-case the creation of the <pre> node in the DOM based on the output method. (Just thinking load).", "tags": [], "creator": "julian.reschke@gmx.de", "is_private": false, "attachment_id": null}, {"text": "So let me summarize to make sure I've understood things correctly:\n\nThe HTML parser (both old and new) drops the newline after the start <pre> tag (not element). Thus it never showed up in the DOM and never got rendered.\n\nWith XSLT generated pages, no parsing happens and so no newlines are dropped. Thus a newline in the beginning of a generated pre-element will appear in the DOM and will be rendered.\n\nDoes this sound correct?\n\n\nLike Boris says, there are lots and lots of cases when serializing and reparsing a document will yield a different result. So far the only case where we tweak the output to compensate for this difference is that we add a tbody-element around the tr-elements inside a table-element. We only do this for HTML output mode. We originally did this since back in the days the table rendering code would not work properly without such an element.\n\nHowever any time we do this it creates weird edge cases. What should happen if a page passes a HTML document through a identity-like transform using the XSLTProcessor DOM API? Should that drop any newlines appearing at the start of the contents of any pre-elements, even though the document had potentially already passed through a HTML parser and thus had the relevant newline removed? What if you do this repeatedly? Should that remove a newline every time?\n\nYes, this problem does exist with the tbody-insertion mentioned above. Though back in the day it fixed a bigger problem than it created. Possibly it's something we could remove now. And at least it doesn't produce progressively more mutated DOMs if you pass the same document through an identity transform multiple times.\n\n\nThough really, IMHO serializers should add a newline after an opening <pre> tag as to avoid round tripping issues. If they did, then this bug would be moot as safari et al. would produce the same result as firefox since the only newline they would drop during parsing would be the one added during \"output\" (i.e. serializing)", "count": 8, "author": "jonas@sicking.cc", "creator": "jonas@sicking.cc", "attachment_id": null, "time": "2011-03-11T18:01:09Z", "id": 5339369, "raw_text": "So let me summarize to make sure I've understood things correctly:\n\nThe HTML parser (both old and new) drops the newline after the start <pre> tag (not element). Thus it never showed up in the DOM and never got rendered.\n\nWith XSLT generated pages, no parsing happens and so no newlines are dropped. Thus a newline in the beginning of a generated pre-element will appear in the DOM and will be rendered.\n\nDoes this sound correct?\n\n\nLike Boris says, there are lots and lots of cases when serializing and reparsing a document will yield a different result. So far the only case where we tweak the output to compensate for this difference is that we add a tbody-element around the tr-elements inside a table-element. We only do this for HTML output mode. We originally did this since back in the days the table rendering code would not work properly without such an element.\n\nHowever any time we do this it creates weird edge cases. What should happen if a page passes a HTML document through a identity-like transform using the XSLTProcessor DOM API? Should that drop any newlines appearing at the start of the contents of any pre-elements, even though the document had potentially already passed through a HTML parser and thus had the relevant newline removed? What if you do this repeatedly? Should that remove a newline every time?\n\nYes, this problem does exist with the tbody-insertion mentioned above. Though back in the day it fixed a bigger problem than it created. Possibly it's something we could remove now. And at least it doesn't produce progressively more mutated DOMs if you pass the same document through an identity transform multiple times.\n\n\nThough really, IMHO serializers should add a newline after an opening <pre> tag as to avoid round tripping issues. If they did, then this bug would be moot as safari et al. would produce the same result as firefox since the only newline they would drop during parsing would be the one added during \"output\" (i.e. serializing)", "bug_id": 640400, "creation_time": "2011-03-11T18:01:09Z", "tags": [], "is_private": false}, {"tags": [], "creator": "julian.reschke@gmx.de", "bug_id": 640400, "creation_time": "2011-03-11T18:45:07Z", "raw_text": "(In reply to comment #8)\n> So let me summarize to make sure I've understood things correctly:\n> \n> The HTML parser (both old and new) drops the newline after the start <pre> tag\n> (not element). Thus it never showed up in the DOM and never got rendered.\n> \n> With XSLT generated pages, no parsing happens and so no newlines are dropped.\n> Thus a newline in the beginning of a generated pre-element will appear in the\n> DOM and will be rendered.\n> \n> Does this sound correct?\n\nI haven't looked at the code; just observing the behavior. What you say sounds plausible.\n\n> Like Boris says, there are lots and lots of cases when serializing and\n> reparsing a document will yield a different result. So far the only case where\n> we tweak the output to compensate for this difference is that we add a\n> tbody-element around the tr-elements inside a table-element. We only do this\n> for HTML output mode. We originally did this since back in the days the table\n> rendering code would not work properly without such an element.\n\nInteresting; wasn't aware of that.\n \n> However any time we do this it creates weird edge cases. What should happen if\n> a page passes a HTML document through a identity-like transform using the\n> XSLTProcessor DOM API? Should that drop any newlines appearing at the start of\n> the contents of any pre-elements, even though the document had potentially\n> already passed through a HTML parser and thus had the relevant newline removed?\n> What if you do this repeatedly? Should that remove a newline every time?\n\nThat's a good point; on the other hand, if a hack was added maybe it could detect that situation as well.\n\n> Yes, this problem does exist with the tbody-insertion mentioned above. Though\n> back in the day it fixed a bigger problem than it created. Possibly it's\n> something we could remove now. And at least it doesn't produce progressively\n> more mutated DOMs if you pass the same document through an identity transform\n> multiple times.\n> \n> \n> Though really, IMHO serializers should add a newline after an opening <pre> tag\n> as to avoid round tripping issues. If they did, then this bug would be moot as\n> safari et al. would produce the same result as firefox since the only newline\n> they would drop during parsing would be the one added during \"output\" (i.e.\n> serializing)\n\nIn retrospective, that probably would have been good. But I don't see XSLT *1* changing at this point.\n\nIf somebody defines a new HTML5 output method for XSLT, this probably should be added.", "attachment_id": null, "is_private": false, "count": 9, "text": "(In reply to comment #8)\n> So let me summarize to make sure I've understood things correctly:\n> \n> The HTML parser (both old and new) drops the newline after the start <pre> tag\n> (not element). Thus it never showed up in the DOM and never got rendered.\n> \n> With XSLT generated pages, no parsing happens and so no newlines are dropped.\n> Thus a newline in the beginning of a generated pre-element will appear in the\n> DOM and will be rendered.\n> \n> Does this sound correct?\n\nI haven't looked at the code; just observing the behavior. What you say sounds plausible.\n\n> Like Boris says, there are lots and lots of cases when serializing and\n> reparsing a document will yield a different result. So far the only case where\n> we tweak the output to compensate for this difference is that we add a\n> tbody-element around the tr-elements inside a table-element. We only do this\n> for HTML output mode. We originally did this since back in the days the table\n> rendering code would not work properly without such an element.\n\nInteresting; wasn't aware of that.\n \n> However any time we do this it creates weird edge cases. What should happen if\n> a page passes a HTML document through a identity-like transform using the\n> XSLTProcessor DOM API? Should that drop any newlines appearing at the start of\n> the contents of any pre-elements, even though the document had potentially\n> already passed through a HTML parser and thus had the relevant newline removed?\n> What if you do this repeatedly? Should that remove a newline every time?\n\nThat's a good point; on the other hand, if a hack was added maybe it could detect that situation as well.\n\n> Yes, this problem does exist with the tbody-insertion mentioned above. Though\n> back in the day it fixed a bigger problem than it created. Possibly it's\n> something we could remove now. And at least it doesn't produce progressively\n> more mutated DOMs if you pass the same document through an identity transform\n> multiple times.\n> \n> \n> Though really, IMHO serializers should add a newline after an opening <pre> tag\n> as to avoid round tripping issues. If they did, then this bug would be moot as\n> safari et al. would produce the same result as firefox since the only newline\n> they would drop during parsing would be the one added during \"output\" (i.e.\n> serializing)\n\nIn retrospective, that probably would have been good. But I don't see XSLT *1* changing at this point.\n\nIf somebody defines a new HTML5 output method for XSLT, this probably should be added.", "id": 5339493, "time": "2011-03-11T18:45:07Z", "author": "julian.reschke@gmx.de"}]}}, "comments": {}}