{"comments": {}, "bugs": {"704128": {"comments": [{"attachment_id": null, "raw_text": "Mail sent to dev-webapi...\n\nWhile working on gallery & camera apps for B2G I've come across the use case where the user wants to copy photos to another device.\n\nMost digital cameras and camera phones currently follow the DCF standard for the storage of photographs, which specifies a particular directory structure, file names and file formats for storage in a filesystem. When the user wants to copy their photos to another device they can usually just plug it in to a USB host and mount the file system via USB mass storage in order to copy or move files using a desktop file manager.\n\nCurrently the only option available in B2G for local storage of photographs is storing the base64 encoded in IndexedDB, although storing files in IndexedDB is coming. However, this does not make it possible to mount the files as a filesystem via USB so does not satisfy this use case in the usual way.\n\nThe W3C's File API: Writer specification is currently being implemented, but the use case described here is outside the scope of this spec. The W3C has a working draft of another specification called File API: Directories and System, which would enable use cases more similar to the one given here.\n\nShould File API: Directories and System be implemented, and implemented in such a way that files written via this API could be mounted as a filesystem over USB?\n\nAlternatively, should B2G provide some other mechanism for moving media to another device in a more web-like fashion over an IP network rather than USB?", "time": "2011-11-21T15:16:25Z", "tags": [], "author": "ben@tola.me.uk", "count": 0, "text": "Mail sent to dev-webapi...\n\nWhile working on gallery & camera apps for B2G I've come across the use case where the user wants to copy photos to another device.\n\nMost digital cameras and camera phones currently follow the DCF standard for the storage of photographs, which specifies a particular directory structure, file names and file formats for storage in a filesystem. When the user wants to copy their photos to another device they can usually just plug it in to a USB host and mount the file system via USB mass storage in order to copy or move files using a desktop file manager.\n\nCurrently the only option available in B2G for local storage of photographs is storing the base64 encoded in IndexedDB, although storing files in IndexedDB is coming. However, this does not make it possible to mount the files as a filesystem via USB so does not satisfy this use case in the usual way.\n\nThe W3C's File API: Writer specification is currently being implemented, but the use case described here is outside the scope of this spec. The W3C has a working draft of another specification called File API: Directories and System, which would enable use cases more similar to the one given here.\n\nShould File API: Directories and System be implemented, and implemented in such a way that files written via this API could be mounted as a filesystem over USB?\n\nAlternatively, should B2G provide some other mechanism for moving media to another device in a more web-like fashion over an IP network rather than USB?", "creator": "ben@tola.me.uk", "is_private": false, "creation_time": "2011-11-21T15:16:25Z", "id": 5862371, "bug_id": 704128}, {"tags": [], "attachment_id": null, "is_private": false, "creation_time": "2011-11-21T15:33:05Z", "creator": "bugs@pettay.fi", "time": "2011-11-21T15:33:05Z", "raw_text": "Last time I looked at File API:D&S it wasn't a very good API, but I didn't care too much about it\nsince it wasn't clear at all whether we would ever implement it.\nIf we now decide to implement it, better to make sure the API is reasonable.", "id": 5862417, "bug_id": 704128, "author": "bugs@pettay.fi", "text": "Last time I looked at File API:D&S it wasn't a very good API, but I didn't care too much about it\nsince it wasn't clear at all whether we would ever implement it.\nIf we now decide to implement it, better to make sure the API is reasonable.", "count": 1}, {"author": "khuey@kylehuey.com", "text": "I really don't want to implement D&S, and we should explore alternative solutions for B2G.", "count": 2, "id": 5862422, "bug_id": 704128, "time": "2011-11-21T15:34:10Z", "raw_text": "I really don't want to implement D&S, and we should explore alternative solutions for B2G.", "creator": "khuey@kylehuey.com", "creation_time": "2011-11-21T15:34:10Z", "is_private": false, "attachment_id": null, "tags": []}, {"bug_id": 704128, "id": 5956723, "author": "ben@tola.me.uk", "text": "Jonas,\n\nThis is the thread discussing a potential \"Gallery API\" we talked about in the B2G meeting https://groups.google.com/d/topic/mozilla.dev.webapi/ODGDpW8Rs6M/discussion but I'm still not sure that's the right direction, it might be better to have something lower level for general file access.", "count": 3, "time": "2012-01-05T11:47:08Z", "raw_text": "Jonas,\n\nThis is the thread discussing a potential \"Gallery API\" we talked about in the B2G meeting https://groups.google.com/d/topic/mozilla.dev.webapi/ODGDpW8Rs6M/discussion but I'm still not sure that's the right direction, it might be better to have something lower level for general file access.", "creation_time": "2012-01-05T11:47:08Z", "is_private": false, "creator": "ben@tola.me.uk", "tags": [], "attachment_id": null}, {"creator": "mcastelluccio@mozilla.com", "count": 4, "text": "If we don't want to use something like the filesystem (that could be a good idea, to get rid of this old way of managing files), we should investigate a way to let two devices share files.\nFor example give the possibility to (in some way) \"mount\" IndexedDB as a filesystem?\n\nI think we shouldn't create an API for each single application, but something more generally usable.", "author": "mcastelluccio@mozilla.com", "bug_id": 704128, "id": 5956749, "is_private": false, "creation_time": "2012-01-05T12:01:12Z", "time": "2012-01-05T12:01:12Z", "raw_text": "If we don't want to use something like the filesystem (that could be a good idea, to get rid of this old way of managing files), we should investigate a way to let two devices share files.\nFor example give the possibility to (in some way) \"mount\" IndexedDB as a filesystem?\n\nI think we shouldn't create an API for each single application, but something more generally usable.", "attachment_id": null, "tags": []}, {"creation_time": "2012-01-05T18:56:23Z", "is_private": false, "creator": "cjones.bugs@gmail.com", "tags": [], "attachment_id": null, "bug_id": 704128, "id": 5957862, "author": "cjones.bugs@gmail.com", "count": 5, "text": "We don't have all the generic platform pieces in place yet, but here's a way this could work in the future\n\n - a USB manager application registers itself as a mass storage device using WebUSB\n - the USB manager uses intents to query other applications and build a list of \"virtual files\" to offer\n - the host requests transfer of files, which the USB manager satisfies through by streaming them over postMessage channels from the hosting application\n\nWe don't have all the technology for that yet.  In the meantime, we should ask ourselves whether it's worth implementing an API of unclear utility, vs. relying on cloud photo managers like flickr as stopgaps.  (Or adding in other temporary hacks that are not intended to be on a standards track.)", "raw_text": "We don't have all the generic platform pieces in place yet, but here's a way this could work in the future\n\n - a USB manager application registers itself as a mass storage device using WebUSB\n - the USB manager uses intents to query other applications and build a list of \"virtual files\" to offer\n - the host requests transfer of files, which the USB manager satisfies through by streaming them over postMessage channels from the hosting application\n\nWe don't have all the technology for that yet.  In the meantime, we should ask ourselves whether it's worth implementing an API of unclear utility, vs. relying on cloud photo managers like flickr as stopgaps.  (Or adding in other temporary hacks that are not intended to be on a standards track.)", "time": "2012-01-05T18:56:23Z"}, {"attachment_id": null, "raw_text": "Although slightly complicated, that does sound like a good idea to me. Better than trying to standardise something very specialised like an API for browsing photos on a device or enforcing the concept of file systems on the web.\n\nIn the meantime I think a gallery app is still useful as long as you can capture an image using the camera and share that image with another app using web intents.\n\nA music player is less useful, unless you can download music from somewhere, but could be used via intents to play audio from another app.", "time": "2012-01-05T19:22:22Z", "tags": [], "author": "ben@tola.me.uk", "count": 6, "text": "Although slightly complicated, that does sound like a good idea to me. Better than trying to standardise something very specialised like an API for browsing photos on a device or enforcing the concept of file systems on the web.\n\nIn the meantime I think a gallery app is still useful as long as you can capture an image using the camera and share that image with another app using web intents.\n\nA music player is less useful, unless you can download music from somewhere, but could be used via intents to play audio from another app.", "creator": "ben@tola.me.uk", "creation_time": "2012-01-05T19:22:22Z", "is_private": false, "id": 5957973, "bug_id": 704128}, {"raw_text": "(In reply to Ben Francis from comment #6)\n> In the meantime I think a gallery app is still useful as long as you can\n> capture an image using the camera and share that image with another app\n> using web intents.\n> \n\nOf course!  The hypothetical USB \"fuse\" above would talk to a gallery app with intents.  And also flickr, etc.\n\n> A music player is less useful, unless you can download music from somewhere,\n> but could be used via intents to play audio from another app.\n\nI don't follow the logic here.", "time": "2012-01-05T20:06:00Z", "id": 5958189, "bug_id": 704128, "count": 7, "text": "(In reply to Ben Francis from comment #6)\n> In the meantime I think a gallery app is still useful as long as you can\n> capture an image using the camera and share that image with another app\n> using web intents.\n> \n\nOf course!  The hypothetical USB \"fuse\" above would talk to a gallery app with intents.  And also flickr, etc.\n\n> A music player is less useful, unless you can download music from somewhere,\n> but could be used via intents to play audio from another app.\n\nI don't follow the logic here.", "author": "cjones.bugs@gmail.com", "tags": [], "attachment_id": null, "is_private": false, "creation_time": "2012-01-05T20:06:00Z", "creator": "cjones.bugs@gmail.com"}, {"creation_time": "2012-01-06T01:18:01Z", "is_private": false, "creator": "philipp@weitershausen.de", "tags": [], "attachment_id": null, "bug_id": 704128, "id": 5959279, "author": "philipp@weitershausen.de", "text": "(In reply to Chris Jones [:cjones] [:warhammer] from comment #5)\n> We don't have all the generic platform pieces in place yet, but here's a way\n> this could work in the future\n> \n>  - a USB manager application registers itself as a mass storage device using\n> WebUSB\n\n... or as an MTP-capable device. MTP is the protocol that replaces mass storage capabilities on Honeycomb and later. The gallery, music player, etc. apps could interface with the MTP layer using intents, indeed.", "count": 8, "time": "2012-01-06T01:18:01Z", "raw_text": "(In reply to Chris Jones [:cjones] [:warhammer] from comment #5)\n> We don't have all the generic platform pieces in place yet, but here's a way\n> this could work in the future\n> \n>  - a USB manager application registers itself as a mass storage device using\n> WebUSB\n\n... or as an MTP-capable device. MTP is the protocol that replaces mass storage capabilities on Honeycomb and later. The gallery, music player, etc. apps could interface with the MTP layer using intents, indeed."}, {"is_private": false, "creation_time": "2012-01-06T01:23:25Z", "id": 5959298, "bug_id": 704128, "author": "cjones.bugs@gmail.com", "count": 9, "text": "Yes, without knowing that the USB broker is speaking MTP instead of usb-fuse.", "creator": "cjones.bugs@gmail.com", "tags": [], "attachment_id": null, "raw_text": "Yes, without knowing that the USB broker is speaking MTP instead of usb-fuse.", "time": "2012-01-06T01:23:25Z"}, {"bug_id": 704128, "id": 6240719, "author": "geoff.flarity@gmail.com", "text": "The WD was updated recently:\n\nhttp://www.w3.org/TR/file-system-api/\n\nJust because this isn't the right solution for B2G file sharing, doesn't mean it isn't useful or important. Being able to work in a sandboxed fs is important for the future of the Web Platform. Please, implement this.", "count": 10, "raw_text": "The WD was updated recently:\n\nhttp://www.w3.org/TR/file-system-api/\n\nJust because this isn't the right solution for B2G file sharing, doesn't mean it isn't useful or important. Being able to work in a sandboxed fs is important for the future of the Web Platform. Please, implement this.", "time": "2012-04-20T13:45:39Z", "creation_time": "2012-04-20T13:45:39Z", "is_private": false, "creator": "geoff.flarity@gmail.com", "tags": [], "attachment_id": null}, {"tags": [], "attachment_id": null, "raw_text": "The API is reasonable bad, so I would prefer implementing something better.", "time": "2012-04-20T15:18:25Z", "creation_time": "2012-04-20T15:18:25Z", "is_private": false, "id": 6240937, "bug_id": 704128, "author": "bugs@pettay.fi", "text": "The API is reasonable bad, so I would prefer implementing something better.", "count": 11, "creator": "bugs@pettay.fi"}, {"raw_text": "I'm developing applications against it right now in Chrome. I agree, it could definitely be better. \n\nHowever:\n\n\"It is intended to be minimal in extent, but sufficiently powerful that easy-to-use libraries may be built on top of it.\"\n\nSo far it is indeed \"sufficiently powerful\" and I am indeed building easy to use libraries on top of it.  This functionality was needed last year.", "time": "2012-04-20T15:40:31Z", "bug_id": 704128, "id": 6240991, "author": "geoff.flarity@gmail.com", "text": "I'm developing applications against it right now in Chrome. I agree, it could definitely be better. \n\nHowever:\n\n\"It is intended to be minimal in extent, but sufficiently powerful that easy-to-use libraries may be built on top of it.\"\n\nSo far it is indeed \"sufficiently powerful\" and I am indeed building easy to use libraries on top of it.  This functionality was needed last year.", "count": 12, "tags": [], "attachment_id": null, "creation_time": "2012-04-20T15:40:31Z", "is_private": false, "creator": "geoff.flarity@gmail.com"}, {"bug_id": 704128, "id": 6241706, "count": 13, "text": "What use case isn't covered by support for files in IndexedDB?\n\nA word of caution: at the last TPAC meeting none of the other browser vendors had plans to implement File Systems and Directories.", "author": "khuey@kylehuey.com", "time": "2012-04-20T18:55:44Z", "raw_text": "What use case isn't covered by support for files in IndexedDB?\n\nA word of caution: at the last TPAC meeting none of the other browser vendors had plans to implement File Systems and Directories.", "creation_time": "2012-04-20T18:55:44Z", "is_private": false, "creator": "khuey@kylehuey.com", "tags": [], "attachment_id": null}, {"time": "2012-04-20T19:11:08Z", "raw_text": "Thanks for the heads up regarding vendor plans. \n\nIs there a doc describing files support for IndexedDB would look like? The application is encrypting and storing (potentially large) files that are chosen from outside the sandbox into the sandbox. Then being able to upload the sandboxed encrypted file via a XHR. \n\nSo if I can read/write blobs from indexedDB *quickly* that should be enough.", "attachment_id": null, "tags": [], "creator": "geoff.flarity@gmail.com", "text": "Thanks for the heads up regarding vendor plans. \n\nIs there a doc describing files support for IndexedDB would look like? The application is encrypting and storing (potentially large) files that are chosen from outside the sandbox into the sandbox. Then being able to upload the sandboxed encrypted file via a XHR. \n\nSo if I can read/write blobs from indexedDB *quickly* that should be enough.", "count": 14, "author": "geoff.flarity@gmail.com", "id": 6241739, "bug_id": 704128, "creation_time": "2012-04-20T19:11:08Z", "is_private": false}, {"tags": [], "time": "2012-04-20T22:01:37Z", "raw_text": "> Is there a doc describing files support for IndexedDB would look like?\nThe IndexedDB specification?\n\n> So if I can read/write blobs from indexedDB *quickly* that should be enough.\nDepending on what you mean by \"quickly\", you already can.", "attachment_id": null, "bug_id": 704128, "id": 6242324, "creation_time": "2012-04-20T22:01:37Z", "is_private": false, "creator": "sonny.piers@gmail.com", "text": "> Is there a doc describing files support for IndexedDB would look like?\nThe IndexedDB specification?\n\n> So if I can read/write blobs from indexedDB *quickly* that should be enough.\nDepending on what you mean by \"quickly\", you already can.", "count": 15, "author": "sonny.piers@gmail.com"}, {"creator": "geoff.flarity@gmail.com", "author": "geoff.flarity@gmail.com", "count": 16, "text": ">The IndexedDB specification?\n\nI did check there. It's not obvious that 'any' value means a Blob will be stored as expected.  In fact, it doesn't work in Chrome, though it's been acknowledge as bug and assigned.\n\nThe Mozilla hacks blob was informative:\nhttp://hacks.mozilla.org/2012/02/storing-images-and-files-in-indexeddb/\n\n>Depending on what you mean by \"quickly\", you already can.\nI found the performance of Chrome's implementation to be surprisingly fast. I'll measure it as now I'm curious.", "bug_id": 704128, "id": 6242867, "is_private": false, "creation_time": "2012-04-21T03:08:58Z", "time": "2012-04-21T03:08:58Z", "attachment_id": null, "raw_text": ">The IndexedDB specification?\n\nI did check there. It's not obvious that 'any' value means a Blob will be stored as expected.  In fact, it doesn't work in Chrome, though it's been acknowledge as bug and assigned.\n\nThe Mozilla hacks blob was informative:\nhttp://hacks.mozilla.org/2012/02/storing-images-and-files-in-indexeddb/\n\n>Depending on what you mean by \"quickly\", you already can.\nI found the performance of Chrome's implementation to be surprisingly fast. I'll measure it as now I'm curious.", "tags": []}, {"id": 6242900, "bug_id": 704128, "count": 17, "text": "(In reply to Geoff Flarity from comment #16)\n> I found the performance of Chrome's implementation to be surprisingly fast.\n> I'll measure it as now I'm curious.\n\nThere's no real Chrome's implementation for storing blobs at the moment, they just store blob urls at the moment.", "author": "jvarga@mozilla.com", "time": "2012-04-21T04:04:55Z", "raw_text": "(In reply to Geoff Flarity from comment #16)\n> I found the performance of Chrome's implementation to be surprisingly fast.\n> I'll measure it as now I'm curious.\n\nThere's no real Chrome's implementation for storing blobs at the moment, they just store blob urls at the moment.", "is_private": false, "creation_time": "2012-04-21T04:04:55Z", "creator": "jvarga@mozilla.com", "tags": [], "attachment_id": null}, {"time": "2012-04-21T12:52:15Z", "raw_text": ">There's no real Chrome's implementation for storing blobs at the moment, they just store blob urls at the moment.\n\nThat may very well be, but I'm able to repeatedly save a 350MB file in about 12 seconds. I can't get a 480MB file to work without an 'ah snap' though. \n\nAssuming IndexedDB blob storage performs comparably (or better!), it should work fine for me.  Sadly, I won't be able to support FireFox until the FileSaver is implemented, but this is getting off topic enough already as it is. \n\nThanks for all the quick responses and helpful feedback.", "attachment_id": null, "tags": [], "creator": "geoff.flarity@gmail.com", "count": 18, "text": ">There's no real Chrome's implementation for storing blobs at the moment, they just store blob urls at the moment.\n\nThat may very well be, but I'm able to repeatedly save a 350MB file in about 12 seconds. I can't get a 480MB file to work without an 'ah snap' though. \n\nAssuming IndexedDB blob storage performs comparably (or better!), it should work fine for me.  Sadly, I won't be able to support FireFox until the FileSaver is implemented, but this is getting off topic enough already as it is. \n\nThanks for all the quick responses and helpful feedback.", "author": "geoff.flarity@gmail.com", "bug_id": 704128, "id": 6243226, "creation_time": "2012-04-21T12:52:15Z", "is_private": false}, {"creator": "bugs@pettay.fi", "author": "bugs@pettay.fi", "text": "Why dev-doc-needed?", "count": 19, "bug_id": 704128, "id": 6251992, "creation_time": "2012-04-25T05:36:06Z", "is_private": false, "time": "2012-04-25T05:36:06Z", "attachment_id": null, "raw_text": "Why dev-doc-needed?", "tags": []}, {"author": "jypenator@gmail.com", "count": 20, "text": "Olly: to track it. If the bug is R/Fixed in the future, we won't miss it. If it is R/Invalid or other, we will just remove the d-d-n at that point.\n\nD-d-N really means documentation will be need when/if fixed.", "creator": "jypenator@gmail.com", "creation_time": "2012-04-25T15:30:04Z", "is_private": false, "bug_id": 704128, "id": 6253143, "attachment_id": null, "raw_text": "Olly: to track it. If the bug is R/Fixed in the future, we won't miss it. If it is R/Invalid or other, we will just remove the d-d-n at that point.\n\nD-d-N really means documentation will be need when/if fixed.", "time": "2012-04-25T15:30:04Z", "tags": []}, {"creator": "cscott@cscott.net", "is_private": false, "creation_time": "2012-10-17T03:06:51Z", "attachment_id": null, "tags": [], "author": "cscott@cscott.net", "count": 21, "text": "Just FWIW: the lawnchair adapter supports both Firefox and Webkit IndexedDB, and the webkit implementation is noticibly faster on the testsuite.  10.637 seconds on Firefox,  2.963 seconds on webkit.\n\nThat probably just means that IndexedDB should be improved, not that the Filesystem API should be implemented, though.", "bug_id": 704128, "id": 6736294, "raw_text": "Just FWIW: the lawnchair adapter supports both Firefox and Webkit IndexedDB, and the webkit implementation is noticibly faster on the testsuite.  10.637 seconds on Firefox,  2.963 seconds on webkit.\n\nThat probably just means that IndexedDB should be improved, not that the Filesystem API should be implemented, though.", "time": "2012-10-17T03:06:51Z"}, {"creation_time": "2013-01-19T03:38:31Z", "is_private": false, "creator": "cajbir.bugzilla@cd.pn", "tags": [], "attachment_id": null, "bug_id": 704128, "id": 7018917, "author": "cajbir.bugzilla@cd.pn", "count": 22, "text": "It seems that \"Mega\", the new incarnation of the hugely popular \"Megaupload\", will be using the file-system-api. According to an Ars Technica article the site, which goes live in a day or so, is recommending Firefox uses use Chrome: http://arstechnica.com/business/2013/01/mega-arrives-ars-goes-hands-on-with-kim-dotcoms-cloud-storage-site:\n\n\"Once you create an account, the first thing the site does is generate that crypto key for you. As a Firefox user, Mega also warned me to switch to Google Chrome, as not doing so would \u201cadversely affect [my] file transfer performance.\" A browser switch later, and I was faced with a blank \u201cfile manager,\u201d which was practically begging me to upload files.\"\n\nI asked for more information from the developers of Mega and got referred to the file-system-api spec:\n\nhttps://twitter.com/bramosnl/status/292467486664839168\n\nI think it would be good to implement this spec given that it's getting usage.", "raw_text": "It seems that \"Mega\", the new incarnation of the hugely popular \"Megaupload\", will be using the file-system-api. According to an Ars Technica article the site, which goes live in a day or so, is recommending Firefox uses use Chrome: http://arstechnica.com/business/2013/01/mega-arrives-ars-goes-hands-on-with-kim-dotcoms-cloud-storage-site:\n\n\"Once you create an account, the first thing the site does is generate that crypto key for you. As a Firefox user, Mega also warned me to switch to Google Chrome, as not doing so would \u201cadversely affect [my] file transfer performance.\" A browser switch later, and I was faced with a blank \u201cfile manager,\u201d which was practically begging me to upload files.\"\n\nI asked for more information from the developers of Mega and got referred to the file-system-api spec:\n\nhttps://twitter.com/bramosnl/status/292467486664839168\n\nI think it would be good to implement this spec given that it's getting usage.", "time": "2013-01-19T03:38:31Z"}, {"raw_text": "http://ericbidelman.tumblr.com/post/21649963613/idb-filesystem-js-bringing-the-html5-filesystem-api\n\nI still think we should WONTFIX this.  There was some discussion of combining this spec and B2G's device storage and cutting down the complexity, but we can do that in another bug if/when we decide to.", "attachment_id": null, "time": "2013-01-19T04:04:02Z", "tags": [], "text": "http://ericbidelman.tumblr.com/post/21649963613/idb-filesystem-js-bringing-the-html5-filesystem-api\n\nI still think we should WONTFIX this.  There was some discussion of combining this spec and B2G's device storage and cutting down the complexity, but we can do that in another bug if/when we decide to.", "count": 23, "author": "khuey@kylehuey.com", "creator": "khuey@kylehuey.com", "creation_time": "2013-01-19T04:04:02Z", "is_private": false, "bug_id": 704128, "id": 7018935}, {"author": "bugs@pettay.fi", "count": 24, "text": "I wonder for what is Mega using Filesystem API. IndexDB should probably work just fine for them, unless\nour IDB implementation is too slow.", "creator": "bugs@pettay.fi", "creation_time": "2013-01-19T11:02:11Z", "is_private": false, "id": 7019203, "bug_id": 704128, "attachment_id": null, "raw_text": "I wonder for what is Mega using Filesystem API. IndexDB should probably work just fine for them, unless\nour IDB implementation is too slow.", "time": "2013-01-19T11:02:11Z", "tags": []}, {"bug_id": 704128, "id": 7019295, "is_private": false, "creation_time": "2013-01-19T13:47:14Z", "creator": "geoff.flarity@gmail.com", "author": "geoff.flarity@gmail.com", "count": 25, "text": "Meanwhile, back on earth...\n\nIf Mozilla's indexDB implementation is more than capable of handling gigabyte files efficiently, then I wish someone would just provide a mock around it that provides this interface FileSystem interface. Maybe run some tests that demonstrate it provides a comparable performance result...", "tags": [], "time": "2013-01-19T13:47:14Z", "attachment_id": null, "raw_text": "Meanwhile, back on earth...\n\nIf Mozilla's indexDB implementation is more than capable of handling gigabyte files efficiently, then I wish someone would just provide a mock around it that provides this interface FileSystem interface. Maybe run some tests that demonstrate it provides a comparable performance result..."}, {"creator": "gerv@mozilla.org", "is_private": false, "creation_time": "2013-01-19T15:19:26Z", "attachment_id": null, "tags": [], "count": 26, "text": "(In reply to Olli Pettay [:smaug] from comment #24)\n> I wonder for what is Mega using Filesystem API.\n\nPresumably, saving actual files to the user's actual disk?\nhttps://twitter.com/doublec/status/292466262049685504 and comments.\n\nGerv", "author": "gerv@mozilla.org", "bug_id": 704128, "id": 7019378, "time": "2013-01-19T15:19:26Z", "raw_text": "(In reply to Olli Pettay [:smaug] from comment #24)\n> I wonder for what is Mega using Filesystem API.\n\nPresumably, saving actual files to the user's actual disk?\nhttps://twitter.com/doublec/status/292466262049685504 and comments.\n\nGerv"}, {"tags": [], "attachment_id": 704284, "is_private": false, "creation_time": "2013-01-20T00:44:48Z", "creator": "mgtemp@mailinator.com", "time": "2013-01-20T00:44:48Z", "raw_text": "At this point this probably doesn't add anything you don't already know but this is what they internally say (since it's overwhelmed by traffic at the moment).\n\nIf I'm understanding this correctly other use cases could include for example a webcam capture app (or any app fetching a lot of data) that wants to sequentially write files that will eventually become too large to hold on RAM.\n\nThey also complain about being unable to fetch data over HTTP from HTTPS (a warning on Chrome and Firefox <= 17, an error since Firefox 18), since HTTPS is not needed for their data transfers.", "id": 7020358, "bug_id": 704128, "count": 27, "text": "Created attachment 704284\nMega's a word on browsers\n\nAt this point this probably doesn't add anything you don't already know but this is what they internally say (since it's overwhelmed by traffic at the moment).\n\nIf I'm understanding this correctly other use cases could include for example a webcam capture app (or any app fetching a lot of data) that wants to sequentially write files that will eventually become too large to hold on RAM.\n\nThey also complain about being unable to fetch data over HTTP from HTTPS (a warning on Chrome and Firefox <= 17, an error since Firefox 18), since HTTPS is not needed for their data transfers.", "author": "mgtemp@mailinator.com"}, {"id": 7020360, "bug_id": 704128, "author": "khuey@kylehuey.com", "text": "Firefox provides ways to store blobs outside of memory (put the blobs in IndexedDB).  AIUI they want to write to a specific file on the disk.", "count": 28, "raw_text": "Firefox provides ways to store blobs outside of memory (put the blobs in IndexedDB).  AIUI they want to write to a specific file on the disk.", "time": "2013-01-20T00:46:23Z", "creation_time": "2013-01-20T00:46:23Z", "is_private": false, "creator": "khuey@kylehuey.com", "tags": [], "attachment_id": null}, {"text": "But doesn't file system API use files in a sandbox. That at least used to be the case. Based on attachment 704284 they just want to store the data somewhere. With IE10 they talk about\ndisk-based Blobs, and we do have them.  And we have FileHandle for writing.", "count": 29, "author": "bugs@pettay.fi", "bug_id": 704128, "id": 7020702, "raw_text": "But doesn't file system API use files in a sandbox. That at least used to be the case. Based on attachment 704284 they just want to store the data somewhere. With IE10 they talk about\ndisk-based Blobs, and we do have them.  And we have FileHandle for writing.", "time": "2013-01-20T10:33:20Z", "creator": "bugs@pettay.fi", "is_private": false, "creation_time": "2013-01-20T10:33:20Z", "attachment_id": null, "tags": []}, {"text": "Ah, ok, it is not the kind of sandbox I expected. The files are there.", "count": 30, "author": "bugs@pettay.fi", "creator": "bugs@pettay.fi", "is_private": false, "creation_time": "2013-01-20T10:42:39Z", "bug_id": 704128, "id": 7020707, "raw_text": "Ah, ok, it is not the kind of sandbox I expected. The files are there.", "attachment_id": null, "time": "2013-01-20T10:42:39Z", "tags": []}, {"attachment_id": null, "tags": [], "creator": "bugs@pettay.fi", "is_private": false, "creation_time": "2013-01-20T10:58:44Z", "raw_text": "...but doesn't save the file using its name.", "time": "2013-01-20T10:58:44Z", "author": "bugs@pettay.fi", "text": "...but doesn't save the file using its name.", "count": 31, "id": 7020714, "bug_id": 704128}, {"id": 7020784, "bug_id": 704128, "count": 32, "text": "And IndexedDB stores files in local system too, at least on linux.", "author": "bugs@pettay.fi", "raw_text": "And IndexedDB stores files in local system too, at least on linux.", "time": "2013-01-20T12:38:21Z", "is_private": false, "creation_time": "2013-01-20T12:38:21Z", "creator": "bugs@pettay.fi", "tags": [], "attachment_id": null}, {"tags": [], "time": "2013-01-20T13:02:47Z", "raw_text": "\"Carefully avoids providing any API that would allow writing files from JavaScript\" - this is completely misleading. Firefox supports storing blobs/files in IndexedDB and they are stored as real files (on all platforms) on disk. AFAIK, chrome doesn't support it yet and IE10 stores them in a database. There's also support for (partial) writing to existing stored files using FileHandle API. So we actually have quite solid support for \"writing files from JavaScript\".\n\nI know, the current situation across browsers is not optimal, but stating that Firefox avoids to support it on purpose is a bit unprofessional.", "attachment_id": null, "id": 7020806, "bug_id": 704128, "is_private": false, "creation_time": "2013-01-20T13:02:47Z", "creator": "jvarga@mozilla.com", "text": "\"Carefully avoids providing any API that would allow writing files from JavaScript\" - this is completely misleading. Firefox supports storing blobs/files in IndexedDB and they are stored as real files (on all platforms) on disk. AFAIK, chrome doesn't support it yet and IE10 stores them in a database. There's also support for (partial) writing to existing stored files using FileHandle API. So we actually have quite solid support for \"writing files from JavaScript\".\n\nI know, the current situation across browsers is not optimal, but stating that Firefox avoids to support it on purpose is a bit unprofessional.", "count": 33, "author": "jvarga@mozilla.com"}, {"tags": [], "attachment_id": null, "is_private": false, "creation_time": "2013-01-20T17:25:47Z", "creator": "wjohnston2000@gmail.com", "raw_text": "I've seen Google demo a file system API polyfill that they themselves wrote:\n\nhttps://github.com/ebidel/idb.filesystem.js", "time": "2013-01-20T17:25:47Z", "bug_id": 704128, "id": 7021021, "text": "I've seen Google demo a file system API polyfill that they themselves wrote:\n\nhttps://github.com/ebidel/idb.filesystem.js", "count": 34, "author": "wjohnston2000@gmail.com"}, {"creation_time": "2013-01-20T21:07:31Z", "is_private": false, "id": 7021218, "bug_id": 704128, "author": "roc@ocallahan.org", "count": 35, "text": "Who's responsible for following this up with Mega?", "creator": "roc@ocallahan.org", "tags": [], "attachment_id": null, "raw_text": "Who's responsible for following this up with Mega?", "time": "2013-01-20T21:07:31Z"}, {"id": 7021219, "bug_id": 704128, "creation_time": "2013-01-20T21:09:52Z", "is_private": false, "creator": "roc@ocallahan.org", "author": "roc@ocallahan.org", "count": 36, "text": "http://lists.w3.org/Archives/Public/public-webapps/2012OctDec/0491.html is good ammunition for why the FileSaver spec shouldn't be implemented or used in its current form.", "tags": [], "time": "2013-01-20T21:09:52Z", "attachment_id": null, "raw_text": "http://lists.w3.org/Archives/Public/public-webapps/2012OctDec/0491.html is good ammunition for why the FileSaver spec shouldn't be implemented or used in its current form."}, {"is_private": false, "creation_time": "2013-01-20T21:12:29Z", "id": 7021221, "bug_id": 704128, "count": 37, "text": "But, do we have an API that lets you upload entire directory trees? Or is that not covered by any spec yet?", "author": "roc@ocallahan.org", "creator": "roc@ocallahan.org", "tags": [], "raw_text": "But, do we have an API that lets you upload entire directory trees? Or is that not covered by any spec yet?", "attachment_id": null, "time": "2013-01-20T21:12:29Z"}, {"tags": [], "attachment_id": null, "creation_time": "2013-01-20T21:36:50Z", "is_private": false, "creator": "khuey@kylehuey.com", "raw_text": "(In reply to Robert O'Callahan (:roc) (Mozilla Corporation) from comment #36)\n> http://lists.w3.org/Archives/Public/public-webapps/2012OctDec/0491.html is\n> good ammunition for why the FileSaver spec shouldn't be implemented or used\n> in its current form.\n\nFileSaver is something different from FileSystems.\n\n(In reply to Robert O'Callahan (:roc) (Mozilla Corporation) from comment #37)\n> But, do we have an API that lets you upload entire directory trees? Or is\n> that not covered by any spec yet?\n\nNo but Jonas has a plan for that.", "time": "2013-01-20T21:36:50Z", "id": 7021243, "bug_id": 704128, "author": "khuey@kylehuey.com", "text": "(In reply to Robert O'Callahan (:roc) (Mozilla Corporation) from comment #36)\n> http://lists.w3.org/Archives/Public/public-webapps/2012OctDec/0491.html is\n> good ammunition for why the FileSaver spec shouldn't be implemented or used\n> in its current form.\n\nFileSaver is something different from FileSystems.\n\n(In reply to Robert O'Callahan (:roc) (Mozilla Corporation) from comment #37)\n> But, do we have an API that lets you upload entire directory trees? Or is\n> that not covered by any spec yet?\n\nNo but Jonas has a plan for that.", "count": 38}, {"author": "cajbir.bugzilla@cd.pn", "count": 39, "text": "(In reply to Robert O'Callahan (:roc) (Mozilla Corporation) from comment #35)\n> Who's responsible for following this up with Mega?\n\nI've followed up with the Mega devs and will be getting more information on their API usage and needs.", "id": 7021332, "bug_id": 704128, "raw_text": "(In reply to Robert O'Callahan (:roc) (Mozilla Corporation) from comment #35)\n> Who's responsible for following this up with Mega?\n\nI've followed up with the Mega devs and will be getting more information on their API usage and needs.", "time": "2013-01-20T23:29:23Z", "creator": "cajbir.bugzilla@cd.pn", "is_private": false, "creation_time": "2013-01-20T23:29:23Z", "attachment_id": null, "tags": []}, {"tags": [], "raw_text": "", "attachment_id": null, "time": "2013-02-21T23:32:39Z", "is_private": false, "creation_time": "2013-02-21T23:32:39Z", "bug_id": 704128, "id": 7129562, "count": 40, "text": "*** Bug 843439 has been marked as a duplicate of this bug. ***", "author": "bugzilla@mversen.de", "creator": "bugzilla@mversen.de"}, {"creator": "phillipsm2@gmail.com", "is_private": false, "creation_time": "2013-03-14T17:53:59Z", "attachment_id": null, "tags": [], "text": "I'm a developer working on a programmer text editor that I would like to deploy as a packaged app. The user of a text editor expects to be able to open and save files in a directory of their choosing, not import files into a sandboxed directory that they need to export again to get back out.  Chrome provides this functionality currently: https://developer.chrome.com/beta/apps/fileSystem.html\n\nFirefox's packaged apps a bit \"nicer\" in my opinion, but I can't use it without allowing the user access to the file system.", "count": 41, "author": "phillipsm2@gmail.com", "bug_id": 704128, "id": 7203736, "raw_text": "I'm a developer working on a programmer text editor that I would like to deploy as a packaged app. The user of a text editor expects to be able to open and save files in a directory of their choosing, not import files into a sandboxed directory that they need to export again to get back out.  Chrome provides this functionality currently: https://developer.chrome.com/beta/apps/fileSystem.html\n\nFirefox's packaged apps a bit \"nicer\" in my opinion, but I can't use it without allowing the user access to the file system.", "time": "2013-03-14T17:53:59Z"}, {"author": "ben@tola.me.uk", "count": 42, "text": "Matthew, do you know about the Device Storage API https://wiki.mozilla.org/WebAPI/DeviceStorageAPI ? Perhaps it could be used or extended for your use cases?\n\nThe Device Storage API was intentionally designed without exposing the complex hierarchical structure of the file system to the web, but allows for the storage of files in a shared location.\n\nThere's also the option of storing the files as blobs in IndexedDB inside your app.", "id": 7204187, "bug_id": 704128, "time": "2013-03-14T19:30:08Z", "raw_text": "Matthew, do you know about the Device Storage API https://wiki.mozilla.org/WebAPI/DeviceStorageAPI ? Perhaps it could be used or extended for your use cases?\n\nThe Device Storage API was intentionally designed without exposing the complex hierarchical structure of the file system to the web, but allows for the storage of files in a shared location.\n\nThere's also the option of storing the files as blobs in IndexedDB inside your app.", "creator": "ben@tola.me.uk", "is_private": false, "creation_time": "2013-03-14T19:30:08Z", "attachment_id": null, "tags": []}, {"creator": "phillipsm2@gmail.com", "creation_time": "2013-03-14T19:35:51Z", "is_private": false, "attachment_id": null, "tags": [], "text": "Ben, my understanding of the Device Storage API (from reading the mailing list several months back, the documentation on MDN is lacking currently) was that it was a way to ask for storage space by media type (images, video, music, etc). This won't work for my purposes for the same reason IndexedDB won't work; it hides the actual location of the files from the user.\n\nThis is good for some scenarios but a programmer's text editor needs to share the files with other programs (git, vim).", "count": 43, "author": "phillipsm2@gmail.com", "id": 7204208, "bug_id": 704128, "raw_text": "Ben, my understanding of the Device Storage API (from reading the mailing list several months back, the documentation on MDN is lacking currently) was that it was a way to ask for storage space by media type (images, video, music, etc). This won't work for my purposes for the same reason IndexedDB won't work; it hides the actual location of the files from the user.\n\nThis is good for some scenarios but a programmer's text editor needs to share the files with other programs (git, vim).", "time": "2013-03-14T19:35:51Z"}, {"creation_time": "2013-03-14T20:16:22Z", "is_private": false, "creator": "bugs@pettay.fi", "tags": [], "attachment_id": null, "id": 7204389, "bug_id": 704128, "count": 44, "text": "File API: Directories and System hides the actual location of the file too.\nhttps://developer.chrome.com/beta/apps/fileSystem.html seems to be some Google only API.", "author": "bugs@pettay.fi", "time": "2013-03-14T20:16:22Z", "raw_text": "File API: Directories and System hides the actual location of the file too.\nhttps://developer.chrome.com/beta/apps/fileSystem.html seems to be some Google only API."}, {"attachment_id": null, "tags": [], "creator": "phillipsm2@gmail.com", "is_private": false, "creation_time": "2013-03-15T13:42:38Z", "time": "2013-03-15T13:42:38Z", "raw_text": "Olli, yes I'm not suggesting you implement a Chrome API, just pointing out a use case that Mozilla is not covering. \n\nI think you could extend the normal File API and that would be a fairly elegant solution. Possibly add a requestWriteAccess function to either File and/or FileList that prompts the user. Just one idea off the top of my head.", "author": "phillipsm2@gmail.com", "text": "Olli, yes I'm not suggesting you implement a Chrome API, just pointing out a use case that Mozilla is not covering. \n\nI think you could extend the normal File API and that would be a fairly elegant solution. Possibly add a requestWriteAccess function to either File and/or FileList that prompts the user. Just one idea off the top of my head.", "count": 45, "id": 7207531, "bug_id": 704128}, {"author": "jonas@sicking.cc", "count": 46, "text": "You should be able to use the DeviceStorage API to do the same thing in Firefox OS. It's not yet implemented on other platforms but we are working on it.", "creator": "jonas@sicking.cc", "is_private": false, "creation_time": "2013-03-16T12:18:39Z", "id": 7211117, "bug_id": 704128, "attachment_id": null, "raw_text": "You should be able to use the DeviceStorage API to do the same thing in Firefox OS. It's not yet implemented on other platforms but we are working on it.", "time": "2013-03-16T12:18:39Z", "tags": []}, {"attachment_id": null, "tags": [], "creator": "shacharz@gmail.com", "creation_time": "2013-04-07T18:16:59Z", "is_private": false, "raw_text": "Is there any verdict here? where does IDB falls short? is the polyfill by Eric has bad performance?", "time": "2013-04-07T18:16:59Z", "count": 47, "text": "Is there any verdict here? where does IDB falls short? is the polyfill by Eric has bad performance?", "author": "shacharz@gmail.com", "id": 7286782, "bug_id": 704128}, {"raw_text": "Reading these comments I suppose there are no plans to support in the near future something like this:\nAs a document writer I can select my XML file and upload this file together with all the parent folder content (containing resources - images or XIncluded XML parts).\nI want to select not individual files, not parent folder, just a single file (main XML) and the browser would copy the content of the parent folder somewhere to the server. The original hierarchy would be preserved. Then I could invoke XSLT transformation on the server and generate various outputs.\nNow I use Java client application that copies all the stuff into the shared folder on the server. Every app update needs to be applied on every user computer. Web app would be more handy here.", "time": "2013-10-02T22:35:45Z", "id": 7928061, "bug_id": 704128, "author": "j.tosovsky@email.cz", "text": "Reading these comments I suppose there are no plans to support in the near future something like this:\nAs a document writer I can select my XML file and upload this file together with all the parent folder content (containing resources - images or XIncluded XML parts).\nI want to select not individual files, not parent folder, just a single file (main XML) and the browser would copy the content of the parent folder somewhere to the server. The original hierarchy would be preserved. Then I could invoke XSLT transformation on the server and generate various outputs.\nNow I use Java client application that copies all the stuff into the shared folder on the server. Every app update needs to be applied on every user computer. Web app would be more handy here.", "count": 48, "tags": [], "attachment_id": null, "is_private": false, "creation_time": "2013-10-02T22:35:45Z", "creator": "j.tosovsky@email.cz"}, {"creator": "fb+mozdev@quantumedia.de", "text": "(In reply to Chris Double (:doublec) from comment #39)\n> I've followed up with the Mega devs and will be getting more information on\n> their API usage and needs.\n\nWhat was the outcome? \n\n\nI guess this bug should be WONTFIXed in favor of http://w3c.github.io/filesystem-api/Overview.html", "count": 49, "author": "fb+mozdev@quantumedia.de", "id": 7971631, "bug_id": 704128, "is_private": false, "creation_time": "2013-10-17T08:56:22Z", "time": "2013-10-17T08:56:22Z", "raw_text": "(In reply to Chris Double (:doublec) from comment #39)\n> I've followed up with the Mega devs and will be getting more information on\n> their API usage and needs.\n\nWhat was the outcome? \n\n\nI guess this bug should be WONTFIXed in favor of http://w3c.github.io/filesystem-api/Overview.html", "attachment_id": null, "tags": []}, {"count": 50, "text": "Bugzilla eating my ni?. :( \n\nChris, please see comment 49.", "author": "fb+mozdev@quantumedia.de", "id": 7971651, "bug_id": 704128, "raw_text": "Bugzilla eating my ni?. :( \n\nChris, please see comment 49.", "time": "2013-10-17T09:05:15Z", "creator": "fb+mozdev@quantumedia.de", "is_private": false, "creation_time": "2013-10-17T09:05:15Z", "attachment_id": null, "tags": []}, {"tags": [], "raw_text": "(In reply to Florian Bender from comment #50)\n> Bugzilla eating my ni?. :( \n> \n> Chris, please see comment 49.\n\nWe discussed what could be done with existing HTML APIs and what APIs they needed to be on par with Chrome. The result was they were able to do what they wanted without needing this API and Firefox support improved: https://mega.co.nz/#blog_12", "attachment_id": null, "time": "2013-10-18T02:51:25Z", "creation_time": "2013-10-18T02:51:25Z", "is_private": false, "id": 7975870, "bug_id": 704128, "text": "(In reply to Florian Bender from comment #50)\n> Bugzilla eating my ni?. :( \n> \n> Chris, please see comment 49.\n\nWe discussed what could be done with existing HTML APIs and what APIs they needed to be on par with Chrome. The result was they were able to do what they wanted without needing this API and Firefox support improved: https://mega.co.nz/#blog_12", "count": 51, "author": "cajbir.bugzilla@cd.pn", "creator": "cajbir.bugzilla@cd.pn"}, {"raw_text": "Thanks, that's good news! \n\nI think the correct bug to track is bug 910387, please mark this bug as WONTFIX or DUPE.", "attachment_id": null, "time": "2013-10-18T09:35:16Z", "tags": [], "text": "Thanks, that's good news! \n\nI think the correct bug to track is bug 910387, please mark this bug as WONTFIX or DUPE.", "count": 52, "author": "fb+mozdev@quantumedia.de", "creator": "fb+mozdev@quantumedia.de", "creation_time": "2013-10-18T09:35:16Z", "is_private": false, "bug_id": 704128, "id": 7976641}, {"creator": "bug-husbandry-bot@mozilla.bugs", "is_private": false, "creation_time": "2018-06-29T04:59:05Z", "attachment_id": null, "tags": [], "count": 53, "text": "https://bugzilla.mozilla.org/show_bug.cgi?id=1472046\n\nMove all DOM bugs that haven\u2019t been updated in more than 3 years and has no one currently assigned to P5.\n\nIf you have questions, please contact :mdaly.", "author": "bug-husbandry-bot@mozilla.bugs", "id": 13436840, "bug_id": 704128, "time": "2018-06-29T04:59:05Z", "raw_text": "https://bugzilla.mozilla.org/show_bug.cgi?id=1472046\n\nMove all DOM bugs that haven\u2019t been updated in more than 3 years and has no one currently assigned to P5.\n\nIf you have questions, please contact :mdaly."}]}}}