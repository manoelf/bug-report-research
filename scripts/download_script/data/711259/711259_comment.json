{"bugs": {"711259": {"comments": [{"tags": [], "time": "2011-12-15T23:17:54Z", "bug_id": 711259, "text": "Currently many of our ScaledFont implementations (read: The Skia ones) are backend specific.\n\nWithout getting a DrawTarget pointer/ backend type passed into CreateScaledFontForFont, we have no way of knowing which ScaledFont type to create.\n\nBas also tells me that ScaledFonts need to work across multiple DrawTargets of potentially different types. Is this a hard restriction, or can we work around this?\n\nIf not, then we need to change our existing ScaledFont implementations to be backend agnostic.\n\nThe best solution here seems to be to move GetPathForGlyphs onto the Native Font object, and then have a single ScaledFont implementation that wraps a native font object, and an array of backend data pointers.", "author": "matt.woodrow@gmail.com", "creation_time": "2011-12-15T23:17:54Z", "count": 0, "creator": "matt.woodrow@gmail.com", "is_private": false, "id": 5920452, "raw_text": "Currently many of our ScaledFont implementations (read: The Skia ones) are backend specific.\n\nWithout getting a DrawTarget pointer/ backend type passed into CreateScaledFontForFont, we have no way of knowing which ScaledFont type to create.\n\nBas also tells me that ScaledFonts need to work across multiple DrawTargets of potentially different types. Is this a hard restriction, or can we work around this?\n\nIf not, then we need to change our existing ScaledFont implementations to be backend agnostic.\n\nThe best solution here seems to be to move GetPathForGlyphs onto the Native Font object, and then have a single ScaledFont implementation that wraps a native font object, and an array of backend data pointers.", "attachment_id": null}, {"is_private": false, "creator": "bas@basschouten.com", "text": "(In reply to Matt Woodrow (:mattwoodrow) from comment #0)\n> Currently many of our ScaledFont implementations (read: The Skia ones) are\n> backend specific.\n> \n> Without getting a DrawTarget pointer/ backend type passed into\n> CreateScaledFontForFont, we have no way of knowing which ScaledFont type to\n> create.\n> \n> Bas also tells me that ScaledFonts need to work across multiple DrawTargets\n> of potentially different types. Is this a hard restriction, or can we work\n> around this?\n\nIt's pretty hard, a DWrite font, could for example go to a GDI(cairo?) target, PDF(cairo?), D2D or Skia(perhaps in the future?).\n\nMost others would at least have their platform's default, and some kind of printing backend (possibly cairo), etc.\n\nOn Mac I'd imagine it might go to CoreGraphics or Skia?\n\n\n> If not, then we need to change our existing ScaledFont implementations to be\n> backend agnostic.\n\nThe Windows ones are iirc.\n\n> \n> The best solution here seems to be to move GetPathForGlyphs onto the Native\n> Font object, and then have a single ScaledFont implementation that wraps a\n> native font object, and an array of backend data pointers.\n\nScaledFonts should be -font- system specific, just not DrawTarget specific. i.e. each font system should have its own ScaledFont implementation, just not for each DrawTarget type.", "tags": [], "time": "2011-12-16T00:52:18Z", "creation_time": "2011-12-16T00:52:18Z", "author": "bas@basschouten.com", "raw_text": "(In reply to Matt Woodrow (:mattwoodrow) from comment #0)\n> Currently many of our ScaledFont implementations (read: The Skia ones) are\n> backend specific.\n> \n> Without getting a DrawTarget pointer/ backend type passed into\n> CreateScaledFontForFont, we have no way of knowing which ScaledFont type to\n> create.\n> \n> Bas also tells me that ScaledFonts need to work across multiple DrawTargets\n> of potentially different types. Is this a hard restriction, or can we work\n> around this?\n\nIt's pretty hard, a DWrite font, could for example go to a GDI(cairo?) target, PDF(cairo?), D2D or Skia(perhaps in the future?).\n\nMost others would at least have their platform's default, and some kind of printing backend (possibly cairo), etc.\n\nOn Mac I'd imagine it might go to CoreGraphics or Skia?\n\n\n> If not, then we need to change our existing ScaledFont implementations to be\n> backend agnostic.\n\nThe Windows ones are iirc.\n\n> \n> The best solution here seems to be to move GetPathForGlyphs onto the Native\n> Font object, and then have a single ScaledFont implementation that wraps a\n> native font object, and an array of backend data pointers.\n\nScaledFonts should be -font- system specific, just not DrawTarget specific. i.e. each font system should have its own ScaledFont implementation, just not for each DrawTarget type.", "attachment_id": null, "id": 5920771, "count": 1, "bug_id": 711259}]}}, "comments": {}}