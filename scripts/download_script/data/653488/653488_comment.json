{"comments": {}, "bugs": {"653488": {"comments": [{"attachment_id": null, "is_private": false, "time": "2011-04-28T17:41:25Z", "author": "anygregor@gmail.com", "text": "", "creation_time": "2011-04-28T17:41:25Z", "raw_text": "", "id": 5437507, "bug_id": 653488, "tags": [], "count": 0, "creator": "anygregor@gmail.com"}, {"is_private": false, "time": "2011-04-28T17:54:43Z", "attachment_id": 528901, "text": "Created attachment 528901\npatch", "creation_time": "2011-04-28T17:54:43Z", "raw_text": "", "id": 5437536, "bug_id": 653488, "tags": [], "creator": "anygregor@gmail.com", "count": 1, "author": "anygregor@gmail.com"}, {"is_private": false, "time": "2011-06-10T05:38:17Z", "attachment_id": 538439, "creation_time": "2011-06-10T05:38:17Z", "text": "Created attachment 538439\npatch\n\nAdd about:config option to disable parallel marking and background finalize.", "id": 5524309, "raw_text": "Add about:config option to disable parallel marking and background finalize.", "tags": [], "creator": "anygregor@gmail.com", "count": 2, "bug_id": 653488, "author": "anygregor@gmail.com"}, {"author": "anygregor@gmail.com", "tags": [], "creator": "anygregor@gmail.com", "count": 3, "bug_id": 653488, "id": 5524314, "raw_text": "update", "creation_time": "2011-06-10T05:48:17Z", "text": "Created attachment 538441\npatch\n\nupdate", "attachment_id": 538441, "time": "2011-06-10T05:48:17Z", "is_private": false}, {"is_private": false, "time": "2011-06-10T06:47:27Z", "attachment_id": 538447, "text": "Created attachment 538447\npatch\n\nupdate.\nbased on bug 638660.", "creation_time": "2011-06-10T06:47:27Z", "raw_text": "update.\nbased on bug 638660.", "id": 5524366, "bug_id": 653488, "tags": [], "creator": "anygregor@gmail.com", "count": 4, "author": "anygregor@gmail.com"}, {"id": 5525416, "raw_text": "Fix Typo...", "creation_time": "2011-06-10T17:57:51Z", "text": "Created attachment 538556\npatch\n\nFix Typo...", "creator": "anygregor@gmail.com", "tags": [], "count": 5, "bug_id": 653488, "author": "anygregor@gmail.com", "is_private": false, "time": "2011-06-10T17:57:51Z", "attachment_id": 538556}, {"time": "2011-06-14T13:06:26Z", "is_private": false, "attachment_id": 538556, "bug_id": 653488, "count": 6, "tags": [], "creator": "igor@mir2.org", "text": "Comment on attachment 538556\npatch\n\nReview of attachment 538556:\n-----------------------------------------------------------------\n\nThe patch should update the shell gcparam function, http://hg.mozilla.org/tracemonkey/file/3acacde59381/js/src/shell/js.cpp#l1531 with the new constants. r+ with that and comments below fixed.\n\n::: js/src/jsapi.h\n@@ +1815,5 @@\n>  \n>      /* Select GC mode. */\n>      JSGC_MODE = 6,\n> +    JSGC_BACKGROUND_FINALIZE = 7,\n> +    JSGC_PARALLEL_MARKING = 8,\n\nNit: a blank line and comment before each constant.\n\n::: js/src/jscntxt.h\n@@ +425,5 @@\n>      JSObject           *gcWeakMapList;\n>  \n> +    JSGCMode               gcMode;\n> +    JSGCBackgroundFinalize gcBackgroundFinalize;\n> +    JSGCParallelMarking    gcParallelMarking;\n\nDefine the flags like:\n\nbool gcHasBackgroundFinalize;\nbool gcHasParallelMarking;\n\nand do the conversion from the enumeration type to the boolean in the API call. This way the flags usage in jsgc.cpp  would be less verbose and easier to follow.\n\n::: js/src/jsgc.cpp\n@@ +1246,5 @@\n>       */\n>      JS_ASSERT(backgroundFinalizeState == BFS_DONE ||\n>                backgroundFinalizeState == BFS_JUST_FINISHED);\n>  \n> +    if (cx->runtime->gcBackgroundFinalize == JSGC_BACKGROUND_FINALIZE_ENABLED &&\n\nWith the type changes this line becomes:\n\nif (cx->runtime->gcHasBackgroundFinalize &&", "creation_time": "2011-06-14T13:06:26Z", "raw_text": "Review of attachment 538556:\n-----------------------------------------------------------------\n\nThe patch should update the shell gcparam function, http://hg.mozilla.org/tracemonkey/file/3acacde59381/js/src/shell/js.cpp#l1531 with the new constants. r+ with that and comments below fixed.\n\n::: js/src/jsapi.h\n@@ +1815,5 @@\n>  \n>      /* Select GC mode. */\n>      JSGC_MODE = 6,\n> +    JSGC_BACKGROUND_FINALIZE = 7,\n> +    JSGC_PARALLEL_MARKING = 8,\n\nNit: a blank line and comment before each constant.\n\n::: js/src/jscntxt.h\n@@ +425,5 @@\n>      JSObject           *gcWeakMapList;\n>  \n> +    JSGCMode               gcMode;\n> +    JSGCBackgroundFinalize gcBackgroundFinalize;\n> +    JSGCParallelMarking    gcParallelMarking;\n\nDefine the flags like:\n\nbool gcHasBackgroundFinalize;\nbool gcHasParallelMarking;\n\nand do the conversion from the enumeration type to the boolean in the API call. This way the flags usage in jsgc.cpp  would be less verbose and easier to follow.\n\n::: js/src/jsgc.cpp\n@@ +1246,5 @@\n>       */\n>      JS_ASSERT(backgroundFinalizeState == BFS_DONE ||\n>                backgroundFinalizeState == BFS_JUST_FINISHED);\n>  \n> +    if (cx->runtime->gcBackgroundFinalize == JSGC_BACKGROUND_FINALIZE_ENABLED &&\n\nWith the type changes this line becomes:\n\nif (cx->runtime->gcHasBackgroundFinalize &&", "id": 5531182, "author": "igor@mir2.org"}, {"text": "Created attachment 539253\npatch\n\nYeah it's still pretty verbose but I didn't want to use short versions like BG for background because it's hard to read.\nThx!", "is_private": false, "creation_time": "2011-06-14T18:10:10Z", "raw_text": "Yeah it's still pretty verbose but I didn't want to use short versions like BG for background because it's hard to read.\nThx!", "id": 5531898, "bug_id": 653488, "creator": "anygregor@gmail.com", "time": "2011-06-14T18:10:10Z", "count": 7, "tags": [], "author": "anygregor@gmail.com", "attachment_id": 539253}, {"time": "2011-06-14T19:04:17Z", "tags": [], "count": 8, "creator": "igor@mir2.org", "bug_id": 653488, "creation_time": "2011-06-14T19:04:17Z", "is_private": false, "text": "Comment on attachment 539253\npatch\n\nReview of attachment 539253:\n-----------------------------------------------------------------\n\nFew more comments:\n\n::: js/src/jsapi.cpp\n@@ +2662,5 @@\n>          break;\n>        case JSGC_STACKPOOL_LIFESPAN:\n>          rt->gcEmptyArenaPoolLifespan = value;\n>          break;\n> +      case JSGC_BACKGROUND_FINALIZE:\n\nComment here that we do not disable/enable the background GC thread and for simplicity just set the flags that control how GC uses it.\n\nAfter the bug 649537 we may need to reconsider this, but this is for another patch.\n\n@@ +2664,5 @@\n>          rt->gcEmptyArenaPoolLifespan = value;\n>          break;\n> +      case JSGC_BACKGROUND_FINALIZE:\n> +        JS_ASSERT(JSGCBackgroundFinalize(value) == JSGC_BACKGROUND_FINALIZE_ENABLED ||\n> +                  JSGCBackgroundFinalize(value) == JSGC_BACKGROUND_FINALIZE_DISABLED);\n\nIIRC C/C++ allows for a compiler to assume that after JSGCBackgroundFinalize(value) the value fits the enum. So a smart compiler may eliminate the assert. So write here and similarly for another case:\n\nJS_ASSERT(value == JSGC_BACKGROUND_FINALIZE_ENABLED ||\nvalue == JSGC_BACKGROUND_FINALIZE_DISABLED);\n\n@@ +2668,5 @@\n> +                  JSGCBackgroundFinalize(value) == JSGC_BACKGROUND_FINALIZE_DISABLED);\n> +        if (JSGCBackgroundFinalize(value) == JSGC_BACKGROUND_FINALIZE_ENABLED)\n> +            rt->gcBackgroundFinalize = true;\n> +        else\n> +            rt->gcBackgroundFinalize = false;\n\nReplace the \"if\" with:\n\nrt->gcBackgroundFinalize = (value == JSGC_BACKGROUND_FINALIZE_ENABLED);\n\nand similarly for another flag.", "id": 5532055, "raw_text": "Review of attachment 539253:\n-----------------------------------------------------------------\n\nFew more comments:\n\n::: js/src/jsapi.cpp\n@@ +2662,5 @@\n>          break;\n>        case JSGC_STACKPOOL_LIFESPAN:\n>          rt->gcEmptyArenaPoolLifespan = value;\n>          break;\n> +      case JSGC_BACKGROUND_FINALIZE:\n\nComment here that we do not disable/enable the background GC thread and for simplicity just set the flags that control how GC uses it.\n\nAfter the bug 649537 we may need to reconsider this, but this is for another patch.\n\n@@ +2664,5 @@\n>          rt->gcEmptyArenaPoolLifespan = value;\n>          break;\n> +      case JSGC_BACKGROUND_FINALIZE:\n> +        JS_ASSERT(JSGCBackgroundFinalize(value) == JSGC_BACKGROUND_FINALIZE_ENABLED ||\n> +                  JSGCBackgroundFinalize(value) == JSGC_BACKGROUND_FINALIZE_DISABLED);\n\nIIRC C/C++ allows for a compiler to assume that after JSGCBackgroundFinalize(value) the value fits the enum. So a smart compiler may eliminate the assert. So write here and similarly for another case:\n\nJS_ASSERT(value == JSGC_BACKGROUND_FINALIZE_ENABLED ||\nvalue == JSGC_BACKGROUND_FINALIZE_DISABLED);\n\n@@ +2668,5 @@\n> +                  JSGCBackgroundFinalize(value) == JSGC_BACKGROUND_FINALIZE_DISABLED);\n> +        if (JSGCBackgroundFinalize(value) == JSGC_BACKGROUND_FINALIZE_ENABLED)\n> +            rt->gcBackgroundFinalize = true;\n> +        else\n> +            rt->gcBackgroundFinalize = false;\n\nReplace the \"if\" with:\n\nrt->gcBackgroundFinalize = (value == JSGC_BACKGROUND_FINALIZE_ENABLED);\n\nand similarly for another flag.", "attachment_id": 539253, "author": "igor@mir2.org"}, {"time": "2011-06-14T19:58:00Z", "is_private": false, "attachment_id": 539292, "count": 9, "tags": [], "creator": "anygregor@gmail.com", "bug_id": 653488, "id": 5532185, "raw_text": "addressing review comments.\nThis will land right after bug 638660.", "creation_time": "2011-06-14T19:58:00Z", "text": "Created attachment 539292\npatch\n\naddressing review comments.\nThis will land right after bug 638660.", "author": "anygregor@gmail.com"}]}}}