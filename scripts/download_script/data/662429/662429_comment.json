{"comments": {}, "bugs": {"662429": {"comments": [{"tags": [], "bug_id": 662429, "text": "EvalKernel currently has a heuristic for trying to compile a script as JSON if it is surrounded by parens. Could this be extended to handle \\w*\\(...\\) as well, for JSONP?\n\nSpecifically, you'd look for 0 or more word chars followed by an open paren and the whole string ended with a close paren. If the len(word)==0, you do what we do now. If len(word)>0 and word is not a keyword (is this check even necessary?), you try the JSON parse and if it succeeds, you construct a script that arranges for the decoded data structure to be passed into whatever word compiles to.\n\nI'm partly asking just out of curiosity: is there a reason why this wouldn't work? I recognize that it's quite a bit of noncritical complexity. And JSONP may be a little dated with the rise of JSON.parse. It seems like people really ought to start using \"JSONPQ\" (quoted padded JSON) callbacks that make the server return callbackFunc('...') instead of JSONP's callbackFunc(...).", "attachment_id": null, "raw_text": "EvalKernel currently has a heuristic for trying to compile a script as JSON if it is surrounded by parens. Could this be extended to handle \\w*\\(...\\) as well, for JSONP?\n\nSpecifically, you'd look for 0 or more word chars followed by an open paren and the whole string ended with a close paren. If the len(word)==0, you do what we do now. If len(word)>0 and word is not a keyword (is this check even necessary?), you try the JSON parse and if it succeeds, you construct a script that arranges for the decoded data structure to be passed into whatever word compiles to.\n\nI'm partly asking just out of curiosity: is there a reason why this wouldn't work? I recognize that it's quite a bit of noncritical complexity. And JSONP may be a little dated with the rise of JSON.parse. It seems like people really ought to start using \"JSONPQ\" (quoted padded JSON) callbacks that make the server return callbackFunc('...') instead of JSONP's callbackFunc(...).", "time": "2011-06-06T23:32:29Z", "creation_time": "2011-06-06T23:32:29Z", "creator": "sphink@gmail.com", "author": "sphink@gmail.com", "count": 0, "id": 5516438, "is_private": false}]}}}