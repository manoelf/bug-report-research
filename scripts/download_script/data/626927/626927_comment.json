{"bugs": {"626927": {"comments": [{"raw_text": "I am noticing a significant reduction in performance in the performance of DOM manipulation relative to Firefox 3.6 and significantly worse performance then Chrome or Safari.\n\nThis may be related to DOM layout events.  The example, which can be seen at http://sinz.org/Maze/ (and in the attached ZIP file - no server required), spends a lot of time changing element background color from black to white.  In other places it changes some black to blue.  In all cases it is just background color changes.\n\nNote that Firefox used to be close to Safari and Chrome, albeit lately Chrome has gotten faster.  The Firefox 4 betas run at 1/4 the speed of Firefox 3.6 and around 1/9th the speed of Chrome and Safari.\n\nExample numbers taken on my machine:\nFirefox 3.6.13:     448 tiles/second\nFirefox 4.0 b9:     121 tiles/second\nChrome 9.0.597.45: 1184 tiles/second\nSafari 5.0.3:       635 tiles/second\n\nNote that IE8 is so slow that it is not worth mentioning.\n\nUse the Table form of the layout to see these perf behaviors.  Other forms have slightly different characteristics, more so on FF than the Chrome or Safari.\n\nOnce the maze is rendered you can see the other color flipping perf regressions by typing \"O\" to clear the information DIV and then \"H\" to hint at the maze solution.  Press \"U\" to undo the hint.  These operations can be done in \"real time\" and produce an interesting visual effect and also clearly shows the perf differences (in addition to the initial maze generation)\n\nLarger window sizes have greater perf issues in all browsers - best to use large or full screen window to get the most perf/profiling information when testing.", "count": 0, "tags": [], "author": "mks@sinz.org", "attachment_id": 504946, "bug_id": 626927, "id": 5209504, "text": "Created attachment 504946\nZip file containing the HTML, CSS, and JS that shows the perf problem\n\nI am noticing a significant reduction in performance in the performance of DOM manipulation relative to Firefox 3.6 and significantly worse performance then Chrome or Safari.\n\nThis may be related to DOM layout events.  The example, which can be seen at http://sinz.org/Maze/ (and in the attached ZIP file - no server required), spends a lot of time changing element background color from black to white.  In other places it changes some black to blue.  In all cases it is just background color changes.\n\nNote that Firefox used to be close to Safari and Chrome, albeit lately Chrome has gotten faster.  The Firefox 4 betas run at 1/4 the speed of Firefox 3.6 and around 1/9th the speed of Chrome and Safari.\n\nExample numbers taken on my machine:\nFirefox 3.6.13:     448 tiles/second\nFirefox 4.0 b9:     121 tiles/second\nChrome 9.0.597.45: 1184 tiles/second\nSafari 5.0.3:       635 tiles/second\n\nNote that IE8 is so slow that it is not worth mentioning.\n\nUse the Table form of the layout to see these perf behaviors.  Other forms have slightly different characteristics, more so on FF than the Chrome or Safari.\n\nOnce the maze is rendered you can see the other color flipping perf regressions by typing \"O\" to clear the information DIV and then \"H\" to hint at the maze solution.  Press \"U\" to undo the hint.  These operations can be done in \"real time\" and produce an interesting visual effect and also clearly shows the perf differences (in addition to the initial maze generation)\n\nLarger window sizes have greater perf issues in all browsers - best to use large or full screen window to get the most perf/profiling information when testing.", "time": "2011-01-19T02:31:49Z", "is_private": false, "creator": "mks@sinz.org", "creation_time": "2011-01-19T02:31:49Z"}, {"is_private": false, "time": "2011-01-19T03:17:30Z", "text": "Michael, thanks for the bug report!\n\nThe regression range is http://hg.mozilla.org/mozilla-central/pushloghtml?fromchange=5fda39cd703c&tochange=96de199027d7 (at least on Mac) when running the \"table.html\" test.\n\nA profile shows that 97% of the time is spent painting.  About 19% is building the display list, about 22% under ComputeVisibilityForRoot, 19% is WillEndTransaction (enumerating over the hashtable calling UpdateDislayItemDataForFrame), 28% under BuildContainerLayerFor.\n\nSo presumably a regression from bug 564991.\n\nroc, the testcase just has a big table and then goes through and changes a bunch of classes on the cells that affect the background color.  But it sounds like for each paint we end up dealing with all the cells or something?  Memories of that raytracer testcase.  :(", "id": 5209563, "creator": "bzbarsky@mit.edu", "creation_time": "2011-01-19T03:17:30Z", "raw_text": "Michael, thanks for the bug report!\n\nThe regression range is http://hg.mozilla.org/mozilla-central/pushloghtml?fromchange=5fda39cd703c&tochange=96de199027d7 (at least on Mac) when running the \"table.html\" test.\n\nA profile shows that 97% of the time is spent painting.  About 19% is building the display list, about 22% under ComputeVisibilityForRoot, 19% is WillEndTransaction (enumerating over the hashtable calling UpdateDislayItemDataForFrame), 28% under BuildContainerLayerFor.\n\nSo presumably a regression from bug 564991.\n\nroc, the testcase just has a big table and then goes through and changes a bunch of classes on the cells that affect the background color.  But it sounds like for each paint we end up dealing with all the cells or something?  Memories of that raytracer testcase.  :(", "count": 1, "author": "bzbarsky@mit.edu", "tags": [], "bug_id": 626927, "attachment_id": null}, {"raw_text": "This is another example of using thousands of HTML elements instead of a graphics API. Much as I'd like to make this fast, we have higher priorities right now. We should revisit this stuff after we've implemented display-list-based-invalidation, because any approach to making this fast would involve incremental updates to the display items associated with a layer, and that's going to be intimately tied up with DLBI.", "count": 2, "author": "roc@ocallahan.org", "tags": [], "bug_id": 626927, "attachment_id": null, "is_private": false, "time": "2011-01-19T03:40:48Z", "id": 5209592, "text": "This is another example of using thousands of HTML elements instead of a graphics API. Much as I'd like to make this fast, we have higher priorities right now. We should revisit this stuff after we've implemented display-list-based-invalidation, because any approach to making this fast would involve incremental updates to the display items associated with a layer, and that's going to be intimately tied up with DLBI.", "creator": "roc@ocallahan.org", "creation_time": "2011-01-19T03:40:48Z"}, {"count": 3, "raw_text": "While I agree that the canvas API would be nice but the regression here is somewhat amazing.  To put the perf in perspective, my PalmPre cell phone running an ARM processor gets over 145 tiles/second on a screen with even more cells than the test case I ran on my 2.4GHz dual-core Mac.  (The Pre did 145 tiles/second on a 77x113 sized maze.)\n\nAnd while using thousands of elements may be over the top, it does show some algorithmic problems that may be harder to witness at smaller table sizes like what happens at the NASDAQ site or much less complex sites such as shopping sites, etc.\n\nFor me the bigger issue is that this will tend to make point out that HTML pages with any complexity will be ever so slightly (or significantly) slower.  (The account activity page at my bank produces a nice large table of activity details that really do not belong as graphics APIs.)\n\nPS - I had not intended this to be a benchmark until I ran into the problem of it running (or should I say not running) on IE.  To help diagnose things I added some information display to the program and restructured with different display layout mechanisms.  (Due to input from friends that worked on the IE team)", "bug_id": 626927, "attachment_id": null, "author": "mks@sinz.org", "tags": [], "is_private": false, "time": "2011-01-21T02:08:07Z", "text": "While I agree that the canvas API would be nice but the regression here is somewhat amazing.  To put the perf in perspective, my PalmPre cell phone running an ARM processor gets over 145 tiles/second on a screen with even more cells than the test case I ran on my 2.4GHz dual-core Mac.  (The Pre did 145 tiles/second on a 77x113 sized maze.)\n\nAnd while using thousands of elements may be over the top, it does show some algorithmic problems that may be harder to witness at smaller table sizes like what happens at the NASDAQ site or much less complex sites such as shopping sites, etc.\n\nFor me the bigger issue is that this will tend to make point out that HTML pages with any complexity will be ever so slightly (or significantly) slower.  (The account activity page at my bank produces a nice large table of activity details that really do not belong as graphics APIs.)\n\nPS - I had not intended this to be a benchmark until I ran into the problem of it running (or should I say not running) on IE.  To help diagnose things I added some information display to the program and restructured with different display layout mechanisms.  (Due to input from friends that worked on the IE team)", "id": 5215702, "creation_time": "2011-01-21T02:08:07Z", "creator": "mks@sinz.org"}, {"creator": "bzbarsky@mit.edu", "creation_time": "2011-01-21T02:35:27Z", "is_private": false, "text": "Michael, there is definitely a known algorithmic problem here: painting a table is O(N) in the number of the table's cells visible on screen, even if you only changed some of the cells.  This means that if you change the cells one at a time, with paints in between, the overall operation is O(N^2) in the number of cells.\n\nExcept for very large N (which don't happen in the layout table or NASDAQ cases) and high update rate (which also don't happen there) cases where the cells _are_ being updated a few at a time instead of all at once (also rare), it doesn't cause an issue...\n\nThe regression here is unfortunate, but the code that caused it is needed to make other, much more common, things paint significantly faster.\n\nWe do plan to work on a fix for this; as roc says we don't _want_ to be slow here.  It's just that the timeframe for Firefox 4 is too tight at this point to rearchitect the graphics subsystem around cases like this without breaking other things in the process....", "id": 5215757, "time": "2011-01-21T02:35:27Z", "tags": [], "author": "bzbarsky@mit.edu", "attachment_id": null, "bug_id": 626927, "raw_text": "Michael, there is definitely a known algorithmic problem here: painting a table is O(N) in the number of the table's cells visible on screen, even if you only changed some of the cells.  This means that if you change the cells one at a time, with paints in between, the overall operation is O(N^2) in the number of cells.\n\nExcept for very large N (which don't happen in the layout table or NASDAQ cases) and high update rate (which also don't happen there) cases where the cells _are_ being updated a few at a time instead of all at once (also rare), it doesn't cause an issue...\n\nThe regression here is unfortunate, but the code that caused it is needed to make other, much more common, things paint significantly faster.\n\nWe do plan to work on a fix for this; as roc says we don't _want_ to be slow here.  It's just that the timeframe for Firefox 4 is too tight at this point to rearchitect the graphics subsystem around cases like this without breaking other things in the process....", "count": 4}, {"creator": "mks@sinz.org", "creation_time": "2011-01-21T05:23:17Z", "is_private": false, "time": "2011-01-21T05:23:17Z", "id": 5216026, "text": "I do understand - I was just a bit surprised by the scale of the change.", "author": "mks@sinz.org", "tags": [], "bug_id": 626927, "attachment_id": null, "raw_text": "I do understand - I was just a bit surprised by the scale of the change.", "count": 5}, {"count": 6, "raw_text": "Your bank's account activity page is unlikely to have thousands of cells visible at once.", "attachment_id": null, "bug_id": 626927, "tags": [], "author": "roc@ocallahan.org", "id": 5220809, "text": "Your bank's account activity page is unlikely to have thousands of cells visible at once.", "time": "2011-01-23T23:06:07Z", "is_private": false, "creation_time": "2011-01-23T23:06:07Z", "creator": "roc@ocallahan.org"}, {"creation_time": "2012-07-02T16:11:09Z", "creator": "rjesup@jesup.org", "text": "With dlbi landed (see bug 770011), it's as fast as Chrome (even a little faster!) on my dev system, IF it can complete before some timer goes off (a few seconds).  After the timer goes off, it slows down by 6-12x.  Very encouraging, if we can resolve the timer issue!", "id": 6438506, "time": "2012-07-02T16:11:09Z", "is_private": false, "attachment_id": null, "bug_id": 626927, "tags": [], "author": "rjesup@jesup.org", "count": 7, "raw_text": "With dlbi landed (see bug 770011), it's as fast as Chrome (even a little faster!) on my dev system, IF it can complete before some timer goes off (a few seconds).  After the timer goes off, it slows down by 6-12x.  Very encouraging, if we can resolve the timer issue!"}, {"is_private": false, "id": 8204966, "text": "Maze Complete   (Table)   [Firefox 29]\nMaze size: 110 x 48 (5280 tiles)\n260 \tms in JavaScript \t0.049 \tms/tile\n24587 \tms not in JavaScript \t4.656 \tms/tile\n24847 \tms total time \t4.705 \tms/tile\n212.5 \ttiles per second \t11 \ttiles/step\n-----\n\nMaze Complete   (Table)   [Chrome 31]\nMaze size: 110 x 51 (5610 tiles)\n110\tms in JavaScript\t0.019\tms/tile\n3759\tms not in JavaScript\t0.67\tms/tile\n3869\tms total time\t0.689\tms/tile\n1449.98\ttiles per second\t11      tiles/step\n-----\n\nMaze Complete   (Table)   [Mozilla 11] - WHAT? Anyway, it's IE 11\nMaze size: 110 x 52 (5720 tiles)  \n613     ms in JavaScript        0.107 ms/tile \n17230   ms not in JavaScript    3.012 ms/tile \n17843   ms total time   3.119   ms/tile \n320.57  tiles per second        11      tiles/step", "time": "2013-12-17T12:23:19Z", "creation_time": "2013-12-17T12:23:19Z", "creator": "guijoselito@gmail.com", "count": 8, "raw_text": "Maze Complete   (Table)   [Firefox 29]\nMaze size: 110 x 48 (5280 tiles)\n260 \tms in JavaScript \t0.049 \tms/tile\n24587 \tms not in JavaScript \t4.656 \tms/tile\n24847 \tms total time \t4.705 \tms/tile\n212.5 \ttiles per second \t11 \ttiles/step\n-----\n\nMaze Complete   (Table)   [Chrome 31]\nMaze size: 110 x 51 (5610 tiles)\n110\tms in JavaScript\t0.019\tms/tile\n3759\tms not in JavaScript\t0.67\tms/tile\n3869\tms total time\t0.689\tms/tile\n1449.98\ttiles per second\t11      tiles/step\n-----\n\nMaze Complete   (Table)   [Mozilla 11] - WHAT? Anyway, it's IE 11\nMaze size: 110 x 52 (5720 tiles)  \n613     ms in JavaScript        0.107 ms/tile \n17230   ms not in JavaScript    3.012 ms/tile \n17843   ms total time   3.119   ms/tile \n320.57  tiles per second        11      tiles/step", "attachment_id": null, "bug_id": 626927, "tags": [], "author": "guijoselito@gmail.com"}, {"raw_text": "Update - on my MBP, these are the performance numbers - not looking good for Firefox.\n\n\nMaze Complete   (Table)   [Firefox 33]\nMaze size: 111 x 72 (7992 tiles)\n152 \tms in JavaScript \t0.019 \tms/tile\n37275 \tms not in JavaScript \t4.664 \tms/tile\n37427 \tms total time\t\t4.683 \tms/tile\n213.53 \ttiles per second \t11 \ttiles/step\n--------------------------------------------------\nMaze Complete   (Table)   [Chrome 40]\nMaze size: 111 x 72 (7992 tiles)\n114\tms in JavaScript\t\t0.014\tms/tile\n6400\tms not in JavaScript\t0.8\tms/tile\n6514\tms total time\t\t0.815\tms/tile\n1226.89\ttiles per second\t\t11\ttiles/step\n--------------------------------------------------\nMaze Complete   (Table)   [Safari 8]\nMaze size: 111 x 72 (7992 tiles)\n86\tms in JavaScript\t\t0.01\tms/tile\n5181\tms not in JavaScript\t0.648\tms/tile\n5267\tms total time\t\t0.659\tms/tile\n1517.37\ttiles per second\t\t11\ttiles/step", "count": 9, "tags": [], "author": "mks@sinz.org", "attachment_id": null, "bug_id": 626927, "is_private": false, "id": 9620130, "text": "Update - on my MBP, these are the performance numbers - not looking good for Firefox.\n\n\nMaze Complete   (Table)   [Firefox 33]\nMaze size: 111 x 72 (7992 tiles)\n152 \tms in JavaScript \t0.019 \tms/tile\n37275 \tms not in JavaScript \t4.664 \tms/tile\n37427 \tms total time\t\t4.683 \tms/tile\n213.53 \ttiles per second \t11 \ttiles/step\n--------------------------------------------------\nMaze Complete   (Table)   [Chrome 40]\nMaze size: 111 x 72 (7992 tiles)\n114\tms in JavaScript\t\t0.014\tms/tile\n6400\tms not in JavaScript\t0.8\tms/tile\n6514\tms total time\t\t0.815\tms/tile\n1226.89\ttiles per second\t\t11\ttiles/step\n--------------------------------------------------\nMaze Complete   (Table)   [Safari 8]\nMaze size: 111 x 72 (7992 tiles)\n86\tms in JavaScript\t\t0.01\tms/tile\n5181\tms not in JavaScript\t0.648\tms/tile\n5267\tms total time\t\t0.659\tms/tile\n1517.37\ttiles per second\t\t11\ttiles/step", "time": "2014-11-21T04:16:25Z", "creator": "mks@sinz.org", "creation_time": "2014-11-21T04:16:25Z"}, {"attachment_id": null, "bug_id": 626927, "tags": [], "author": "rjesup@jesup.org", "count": 10, "raw_text": "Linux64 Xeon\nAurora/35 local build (opt, --enable-profiling)\nfor a 30x30 maze (small), average perf on reloads is 880-1020 tiles/s (note: use Restart for more consistent results than reload).\nOn Chrome 40, it gets about 2000-2400 (typ. 2200-2300) tiles/s.\n\nAs size increases, it gets worse:\nAurora/35 125x77: 205 tiles/s\nChrome/40 110x71: 1319 tile/s\n\nOne thing I notice which might account to the slowdown and maybe the overall difference:\nPainting on larger mazes in FF is \"jumpy\" - most of the time you can see it go almost \"as it goes\", then suddenly a chunk of the maze will drop in all at once.  I suspect the \"chunks\" are going much faster, and we're simply painting more aggressively as cells change instead of chunking them.\n\nNote: We were as fast as Chrome after DLBI landed IF the maze was small (per my comment above).  Perhaps we were suppressing paint (or chunking more) for N ms after a user interaction or load.  In any case, the small-maze behavior seems to have regressed since then.  Not sure how much bug mazes have regressed.  comment 8 though would indicate it was similarly slow for large mazes last December.\n\nbz's comment about applicability still is true though.  For the Web, this is an edge-case.  Webby cases with large tables of small entries would be updating them all at once, or updating a one or a couple.  *Large* tables like this are generally rare outside of a few edge cases, and most \"large\" tables tend to be very wide or very long, not both.  Possible exception would be a google docs-like spreadsheet - but they likely don't use naive rendering, and even there likely don't hit corner cases like this.\n\nAmusing Side note: Careful resizing it in Chrome 40.  Resizing it larger (especially for larger sizes) will almost always hang the Chrome content process requiring me to close the tab.  We don't have that problem.\n\nLess amusing side note: while not likely a great JS benchmark, I notice Safari is faster than Chrome or FF in the JS portion, and on Mike's Mac, the difference is around 2x (~10ms vs ~19ms/tile)", "creation_time": "2014-11-21T09:26:50Z", "creator": "rjesup@jesup.org", "id": 9620886, "text": "Linux64 Xeon\nAurora/35 local build (opt, --enable-profiling)\nfor a 30x30 maze (small), average perf on reloads is 880-1020 tiles/s (note: use Restart for more consistent results than reload).\nOn Chrome 40, it gets about 2000-2400 (typ. 2200-2300) tiles/s.\n\nAs size increases, it gets worse:\nAurora/35 125x77: 205 tiles/s\nChrome/40 110x71: 1319 tile/s\n\nOne thing I notice which might account to the slowdown and maybe the overall difference:\nPainting on larger mazes in FF is \"jumpy\" - most of the time you can see it go almost \"as it goes\", then suddenly a chunk of the maze will drop in all at once.  I suspect the \"chunks\" are going much faster, and we're simply painting more aggressively as cells change instead of chunking them.\n\nNote: We were as fast as Chrome after DLBI landed IF the maze was small (per my comment above).  Perhaps we were suppressing paint (or chunking more) for N ms after a user interaction or load.  In any case, the small-maze behavior seems to have regressed since then.  Not sure how much bug mazes have regressed.  comment 8 though would indicate it was similarly slow for large mazes last December.\n\nbz's comment about applicability still is true though.  For the Web, this is an edge-case.  Webby cases with large tables of small entries would be updating them all at once, or updating a one or a couple.  *Large* tables like this are generally rare outside of a few edge cases, and most \"large\" tables tend to be very wide or very long, not both.  Possible exception would be a google docs-like spreadsheet - but they likely don't use naive rendering, and even there likely don't hit corner cases like this.\n\nAmusing Side note: Careful resizing it in Chrome 40.  Resizing it larger (especially for larger sizes) will almost always hang the Chrome content process requiring me to close the tab.  We don't have that problem.\n\nLess amusing side note: while not likely a great JS benchmark, I notice Safari is faster than Chrome or FF in the JS portion, and on Mike's Mac, the difference is around 2x (~10ms vs ~19ms/tile)", "time": "2014-11-21T09:26:50Z", "is_private": false}, {"creator": "mks@sinz.org", "creation_time": "2014-11-21T13:15:09Z", "text": "I agree that it is not a major case on the web, especially since the right way to do something like this (if that was even useful) would be via <canvas>.\n\nThings are changing but it is an interesting edge case test for an edge case that may not be interesting anymore.", "id": 9621552, "time": "2014-11-21T13:15:09Z", "is_private": false, "tags": [], "author": "mks@sinz.org", "attachment_id": null, "bug_id": 626927, "raw_text": "I agree that it is not a major case on the web, especially since the right way to do something like this (if that was even useful) would be via <canvas>.\n\nThings are changing but it is an interesting edge case test for an edge case that may not be interesting anymore.", "count": 11}, {"author": "mks@sinz.org", "tags": [], "creator": "mks@sinz.org", "bug_id": 626927, "attachment_id": null, "creation_time": "2017-10-16T15:31:59Z", "time": "2017-10-16T15:31:59Z", "raw_text": "Note that the regression has gotten worse and is now over 10x slower than Chrome for the Table version.", "id": 12763115, "text": "Note that the regression has gotten worse and is now over 10x slower than Chrome for the Table version.", "is_private": false, "count": 12}, {"bug_id": 626927, "attachment_id": null, "creation_time": "2017-10-16T17:07:54Z", "author": "bzbarsky@mit.edu", "tags": [], "creator": "bzbarsky@mit.edu", "count": 13, "time": "2017-10-16T17:07:54Z", "raw_text": "Bug 1409047 is tracking comment 12.", "id": 12763365, "text": "Bug 1409047 is tracking comment 12.", "is_private": false}]}}, "comments": {}}