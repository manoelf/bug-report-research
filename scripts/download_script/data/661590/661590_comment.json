{"bugs": {"661590": {"comments": [{"author": "scott@perturb.org", "creator": "scott@perturb.org", "creation_time": "2011-06-02T18:09:59Z", "time": "2011-06-02T18:09:59Z", "is_private": false, "id": 5509084, "count": 0, "text": "Created attachment 536936\nTest Case\n\nI had a application where I was calling location.hash in JavaScript repeatedly. Looking at some system monitoring at the time I see significant increases in disk activity at the time. Since we're not reloading the page, there should be no reason to hit the disk at all?\n\nI've tested in Opera and Chrome an didn't see any increased disk activity. I've attached a test case that makes this easily repeatable.", "bug_id": 661590, "tags": [], "raw_text": "I had a application where I was calling location.hash in JavaScript repeatedly. Looking at some system monitoring at the time I see significant increases in disk activity at the time. Since we're not reloading the page, there should be no reason to hit the disk at all?\n\nI've tested in Opera and Chrome an didn't see any increased disk activity. I've attached a test case that makes this easily repeatable.", "attachment_id": 536936}, {"author": "bzbarsky@mit.edu", "time": "2011-06-02T21:11:03Z", "creation_time": "2011-06-02T21:11:03Z", "creator": "bzbarsky@mit.edu", "id": 5509540, "count": 1, "is_private": false, "text": "There seems to be a bunch of fcntl() and write() and read() traffic on Mac when I click the buttons on that testcase... all of it under  mozilla::places::(anonymous namespace)::InsertVisitedURIs::Run to a first approximation.\n\nAnd that happens because nsDocShell::OnNewURI (which is fired for ref changes, even if the ref did not actually change) calls nsDocShell::AddURIVisit which calls mozilla::places::History::VisitURI.", "bug_id": 661590, "tags": [], "raw_text": "There seems to be a bunch of fcntl() and write() and read() traffic on Mac when I click the buttons on that testcase... all of it under  mozilla::places::(anonymous namespace)::InsertVisitedURIs::Run to a first approximation.\n\nAnd that happens because nsDocShell::OnNewURI (which is fired for ref changes, even if the ref did not actually change) calls nsDocShell::AddURIVisit which calls mozilla::places::History::VisitURI.", "attachment_id": null}, {"is_private": false, "count": 2, "id": 5509565, "creator": "justin.lebar+bug@gmail.com", "creation_time": "2011-06-02T21:18:24Z", "time": "2011-06-02T21:18:24Z", "author": "justin.lebar+bug@gmail.com", "attachment_id": null, "raw_text": "Are we OK if repeated calls to |location.hash = random()| causes large amounts of disk activity?", "tags": [], "bug_id": 661590, "text": "Are we OK if repeated calls to |location.hash = random()| causes large amounts of disk activity?"}, {"text": "As in, if we optimize out OnNewURI when the ref did not change?\n\n\"Maybe\".  I wonder what values Scott's application actually set location.hash to....", "bug_id": 661590, "tags": [], "attachment_id": null, "raw_text": "As in, if we optimize out OnNewURI when the ref did not change?\n\n\"Maybe\".  I wonder what values Scott's application actually set location.hash to....", "creator": "bzbarsky@mit.edu", "creation_time": "2011-06-02T21:24:21Z", "time": "2011-06-02T21:24:21Z", "author": "bzbarsky@mit.edu", "is_private": false, "id": 5509583, "count": 3}, {"creation_time": "2011-06-02T21:28:56Z", "time": "2011-06-02T21:28:56Z", "creator": "justin.lebar+bug@gmail.com", "author": "justin.lebar+bug@gmail.com", "id": 5509593, "count": 4, "is_private": false, "text": "I guess I mean: The problem here seems to be that a page can easily cause us to thrash the disk.  So do you think it's worth trying not to hit disk every time location.hash is set, regardless of whether it changes?\n\nNot hitting the disk only in the case when location.hash doesn't change doesn't seem to address the larger issue...", "bug_id": 661590, "tags": [], "attachment_id": null, "raw_text": "I guess I mean: The problem here seems to be that a page can easily cause us to thrash the disk.  So do you think it's worth trying not to hit disk every time location.hash is set, regardless of whether it changes?\n\nNot hitting the disk only in the case when location.hash doesn't change doesn't seem to address the larger issue..."}, {"attachment_id": null, "raw_text": "> So do you think it's worth trying not to hit disk every time location.hash is\n> set\n\nYes.\n\n> Not hitting the disk only in the case when location.hash doesn't change doesn't > seem to address the larger issue...\n\nIndeed.", "text": "> So do you think it's worth trying not to hit disk every time location.hash is\n> set\n\nYes.\n\n> Not hitting the disk only in the case when location.hash doesn't change doesn't > seem to address the larger issue...\n\nIndeed.", "bug_id": 661590, "tags": [], "count": 5, "id": 5509611, "is_private": false, "creation_time": "2011-06-02T21:35:20Z", "time": "2011-06-02T21:35:20Z", "creator": "bzbarsky@mit.edu", "author": "bzbarsky@mit.edu"}, {"creator": "scott@perturb.org", "time": "2011-06-02T21:35:52Z", "creation_time": "2011-06-02T21:35:52Z", "author": "scott@perturb.org", "is_private": false, "count": 6, "id": 5509613, "tags": [], "text": "My application had the user using up/down to navigate a table of data. When a row would get highlighted I called location.hash = $appropriate_hashtag to make sure the focus of the viewport was what the user was navigating to. Probably not the ideal use of this, but I certainly wasn't expecting it to thrash the disk.\n\nThe way I noticed it was that navigation was MUCH slower on Firefox than it was on Chrome/Opera. Some digging showed the increased disk usage.", "bug_id": 661590, "attachment_id": null, "raw_text": "My application had the user using up/down to navigate a table of data. When a row would get highlighted I called location.hash = $appropriate_hashtag to make sure the focus of the viewport was what the user was navigating to. Probably not the ideal use of this, but I certainly wasn't expecting it to thrash the disk.\n\nThe way I noticed it was that navigation was MUCH slower on Firefox than it was on Chrome/Opera. Some digging showed the increased disk usage."}, {"attachment_id": null, "raw_text": "So, I'm looking into bug 1478417, that is an actual case of this happening on what we could name a popular website.\n\nWe keep adding visits through onNewURI even if the ref didn't change, and we also call UpdateGlobalHistoryTitle even if the title didn't change. These 2 optimizations look harmless in general.\n\nClearly, it wouldn't address the case of the page continuously setting a different hash, but that's also less common, and for that we probably just need an anti flooding protection in history.\nNote, we currently already have a flooding protection in Places, but it relies on the aPreviousURI value passed to visitURI by the docshell. It looks like in this case there's no aPreviousURI, because we pass a null channel (shortcircuitload) and ExtractLastVisit returns early in that case. Though, this is the only case where there isn't a channel, and I wonder if we could just make ExtractLastVisit default to aPreviousURI = aURI when no channel is provided, that would trigger the history flooding protection (can store 1 visit to the same url every 6 minutes). Or we'll have to pass some new flag to onNewURI.\n\nWe could also make VisitURI return a flag stating whether the addition was skipped due to flooding, and use that flag to skip the next UpdateGlobalHistoryTitle call. We currently don't use the VisitURI return value.\n\nTo sum up:\n1. the docshell should probably not try to add to history if the hash is the same, nor store a title if it is the same\n2. the docshell should somehow pass aPreviousURI to history (or implement an anti flooding system itself)\n3. history should ignore fragments in its anti flooding protection. Note this means both android History and Places have to implement their own protection, while if this would be handled by the docshell, it would be centralized\n\nThoughts?\nWho is taking care of the docshell in modern days?", "text": "So, I'm looking into bug 1478417, that is an actual case of this happening on what we could name a popular website.\n\nWe keep adding visits through onNewURI even if the ref didn't change, and we also call UpdateGlobalHistoryTitle even if the title didn't change. These 2 optimizations look harmless in general.\n\nClearly, it wouldn't address the case of the page continuously setting a different hash, but that's also less common, and for that we probably just need an anti flooding protection in history.\nNote, we currently already have a flooding protection in Places, but it relies on the aPreviousURI value passed to visitURI by the docshell. It looks like in this case there's no aPreviousURI, because we pass a null channel (shortcircuitload) and ExtractLastVisit returns early in that case. Though, this is the only case where there isn't a channel, and I wonder if we could just make ExtractLastVisit default to aPreviousURI = aURI when no channel is provided, that would trigger the history flooding protection (can store 1 visit to the same url every 6 minutes). Or we'll have to pass some new flag to onNewURI.\n\nWe could also make VisitURI return a flag stating whether the addition was skipped due to flooding, and use that flag to skip the next UpdateGlobalHistoryTitle call. We currently don't use the VisitURI return value.\n\nTo sum up:\n1. the docshell should probably not try to add to history if the hash is the same, nor store a title if it is the same\n2. the docshell should somehow pass aPreviousURI to history (or implement an anti flooding system itself)\n3. history should ignore fragments in its anti flooding protection. Note this means both android History and Places have to implement their own protection, while if this would be handled by the docshell, it would be centralized\n\nThoughts?\nWho is taking care of the docshell in modern days?", "bug_id": 661590, "tags": [], "count": 7, "id": 13504913, "is_private": false, "creation_time": "2018-07-27T13:19:00Z", "time": "2018-07-27T13:19:00Z", "creator": "mak@mozilla.com", "author": "mak@mozilla.com"}, {"raw_text": "", "attachment_id": null, "text": "*** Bug 1478417 has been marked as a duplicate of this bug. ***", "bug_id": 661590, "tags": [], "is_private": false, "id": 13504926, "count": 8, "author": "mak@mozilla.com", "creator": "mak@mozilla.com", "time": "2018-07-27T13:24:24Z", "creation_time": "2018-07-27T13:24:24Z"}, {"author": "mak@mozilla.com", "creator": "mak@mozilla.com", "time": "2018-07-27T13:41:41Z", "creation_time": "2018-07-27T13:41:41Z", "is_private": false, "count": 9, "id": 13504965, "text": "One problem, is that if previousURI and URI are the same, History assumes it's a reload and give the visit a TRANSITION_RELOAD. That wouldn't be ok for this case. Maybe we should just pass an additional flag to VisitURI and have a TRANSITION_HASH or make it TRANSITION_EMBED (stored in memory, not on disk)", "bug_id": 661590, "tags": [], "raw_text": "One problem, is that if previousURI and URI are the same, History assumes it's a reload and give the visit a TRANSITION_RELOAD. That wouldn't be ok for this case. Maybe we should just pass an additional flag to VisitURI and have a TRANSITION_HASH or make it TRANSITION_EMBED (stored in memory, not on disk)", "attachment_id": null}, {"is_private": false, "id": 13519611, "count": 10, "creator": "bugs@pettay.fi", "creation_time": "2018-08-02T20:09:40Z", "time": "2018-08-02T20:09:40Z", "author": "bugs@pettay.fi", "attachment_id": null, "raw_text": "Docshell shouldn't have anti-flooding stuff, to API users should have, IMO.", "tags": [], "bug_id": 661590, "text": "Docshell shouldn't have anti-flooding stuff, to API users should have, IMO."}, {"text": "I think I agree with Olli.  We can skip UpdateGlobalHistoryTitle and pass false for the aAddToGlobalHistory arg of OnNewURI if the hash did not change.  But past that, I don't think docshell has the context to do anti-flooding stuff.  That said, if we can somehow pass more context to Places code we should certainly do that.", "bug_id": 661590, "tags": [], "attachment_id": null, "raw_text": "I think I agree with Olli.  We can skip UpdateGlobalHistoryTitle and pass false for the aAddToGlobalHistory arg of OnNewURI if the hash did not change.  But past that, I don't think docshell has the context to do anti-flooding stuff.  That said, if we can somehow pass more context to Places code we should certainly do that.", "creator": "bzbarsky@mit.edu", "time": "2018-08-03T00:17:07Z", "creation_time": "2018-08-03T00:17:07Z", "author": "bzbarsky@mit.edu", "is_private": false, "count": 11, "id": 13520250}, {"author": "mak@mozilla.com", "creator": "mak@mozilla.com", "creation_time": "2018-08-03T07:07:34Z", "time": "2018-08-03T07:07:34Z", "is_private": false, "id": 13520629, "count": 12, "tags": [], "text": "Thank you, then I'd say:\n1. the docshell should not try to add to history if the hash is the same, nor store a title if it is the same\n2. the docshell should pass a new flag to History for shortcircuitload\n3. history should ignore fragments and use the new flags in its anti flooding protection", "bug_id": 661590, "raw_text": "Thank you, then I'd say:\n1. the docshell should not try to add to history if the hash is the same, nor store a title if it is the same\n2. the docshell should pass a new flag to History for shortcircuitload\n3. history should ignore fragments and use the new flags in its anti flooding protection", "attachment_id": null}, {"raw_text": "FYI, I just encountered a site exploiting this (or perhaps a similar bug, I couldn't really tell because it froze the browser so I couldn't open Dev Tools to check) in the wild for phishing: https://i.imgur.com/jPjvCAV.png\n\nIt took me to that screen, then froze the browser so I couldn't close the site without using task manager.", "attachment_id": null, "bug_id": 661590, "text": "FYI, I just encountered a site exploiting this (or perhaps a similar bug, I couldn't really tell because it froze the browser so I couldn't open Dev Tools to check) in the wild for phishing: https://i.imgur.com/jPjvCAV.png\n\nIt took me to that screen, then froze the browser so I couldn't close the site without using task manager.", "tags": [], "count": 13, "id": 13765178, "is_private": false, "author": "andrewm.bpi@gmail.com", "creation_time": "2018-11-19T16:37:28Z", "time": "2018-11-19T16:37:28Z", "creator": "andrewm.bpi@gmail.com"}, {"tags": [], "bug_id": 661590, "text": "(not startup related: fxperf:p2 -> fxperf:p3)", "attachment_id": null, "raw_text": "(not startup related: fxperf:p2 -> fxperf:p3)", "creator": "felipc@gmail.com", "creation_time": "2018-12-18T15:08:30Z", "time": "2018-12-18T15:08:30Z", "author": "felipc@gmail.com", "is_private": false, "id": 13820742, "count": 14}]}}, "comments": {}}