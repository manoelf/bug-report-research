{"comments": {}, "bugs": {"675417": {"comments": [{"raw_text": "User Agent: Mozilla/5.0 (Windows NT 5.1; rv:5.0) Gecko/20100101 Firefox/5.0\nBuild ID: 20110615151330\n\nSteps to reproduce:\n\nI visited the web page at http://www.kansalliskirjasto.fi/extra/linnea2/kirjastotunnukset.htm\n\n\nActual results:\n\nFirefox became completely unresponsive to user input.\n\n\nExpected results:\n\nFirefox should let me go back to previous page or close Firefox.", "time": "2011-07-30T09:23:37Z", "bug_id": 675417, "id": 5623516, "text": "User Agent: Mozilla/5.0 (Windows NT 5.1; rv:5.0) Gecko/20100101 Firefox/5.0\nBuild ID: 20110615151330\n\nSteps to reproduce:\n\nI visited the web page at http://www.kansalliskirjasto.fi/extra/linnea2/kirjastotunnukset.htm\n\n\nActual results:\n\nFirefox became completely unresponsive to user input.\n\n\nExpected results:\n\nFirefox should let me go back to previous page or close Firefox.", "count": 0, "author": "esa.peuha@gmail.com", "tags": [], "attachment_id": null, "is_private": false, "creation_time": "2011-07-30T09:23:37Z", "creator": "esa.peuha@gmail.com"}, {"author": "mozilla@ahlblom.eu", "count": 1, "text": "Thanks for reporting!\n\nReproduced: (Hangs forever?)\nMozilla/5.0 (X11; Linux x86_64; rv:5.0.1) Gecko/20100101 Firefox/5.0.1\nMozilla/5.0 (X11; Linux x86_64; rv:6.0) Gecko/20100101 Firefox/6.0\nMozilla/5.0 (X11; Linux x86_64; rv:7.0a2) Gecko/20110729 Firefox/7.0a2\nMozilla/5.0 (X11; Linux x86_64; rv:8.0a1) Gecko/20110730 Firefox/8.0a1\n\nHangs initially, but releases after a while:\nMozilla/5.0 (X11; U; Linux i686 (x86_64); en-US; rv:1.9.2.19) Gecko/20110707 Firefox/3.6.19\nOpera/9.80 (X11; Linux x86_64; U; en) Presto/2.9.168 Version/11.50\n\nWFM (no hang at all):\nMozilla/5.0 (X11; Linux x86_64) AppleWebKit/534.30 (KHTML, like Gecko) Chrome/12.0.742.112 Safari/534.30\n\nIn Firefox it does not matter if I start in Safe Mode or if I disable JavaScript - it hangs anyway.", "creator": "mozilla@ahlblom.eu", "is_private": false, "creation_time": "2011-07-30T14:02:24Z", "id": 5623647, "bug_id": 675417, "attachment_id": null, "raw_text": "Thanks for reporting!\n\nReproduced: (Hangs forever?)\nMozilla/5.0 (X11; Linux x86_64; rv:5.0.1) Gecko/20100101 Firefox/5.0.1\nMozilla/5.0 (X11; Linux x86_64; rv:6.0) Gecko/20100101 Firefox/6.0\nMozilla/5.0 (X11; Linux x86_64; rv:7.0a2) Gecko/20110729 Firefox/7.0a2\nMozilla/5.0 (X11; Linux x86_64; rv:8.0a1) Gecko/20110730 Firefox/8.0a1\n\nHangs initially, but releases after a while:\nMozilla/5.0 (X11; U; Linux i686 (x86_64); en-US; rv:1.9.2.19) Gecko/20110707 Firefox/3.6.19\nOpera/9.80 (X11; Linux x86_64; U; en) Presto/2.9.168 Version/11.50\n\nWFM (no hang at all):\nMozilla/5.0 (X11; Linux x86_64) AppleWebKit/534.30 (KHTML, like Gecko) Chrome/12.0.742.112 Safari/534.30\n\nIn Firefox it does not matter if I start in Safe Mode or if I disable JavaScript - it hangs anyway.", "time": "2011-07-30T14:02:24Z", "tags": []}, {"time": "2011-07-30T15:04:31Z", "raw_text": "This frame file has 38053 lines of code:\nhttp://www.kansalliskirjasto.fi/extra/linnea2/kirjastotunnukset_files/sheet001.htm\n\n35898 of the lines contain '<td' and a huge number of them look like this one:\n<td width=64 style='width:48pt'></td>\nOr like this one:\n<td class=\"xl68\" width=\"64\" style=\"width:48pt\"></td>\n\n\nMaybe Firefox gets a little bit overwhelmed by the table?", "attachment_id": null, "tags": [], "creator": "mozilla@ahlblom.eu", "count": 2, "text": "This frame file has 38053 lines of code:\nhttp://www.kansalliskirjasto.fi/extra/linnea2/kirjastotunnukset_files/sheet001.htm\n\n35898 of the lines contain '<td' and a huge number of them look like this one:\n<td width=64 style='width:48pt'></td>\nOr like this one:\n<td class=\"xl68\" width=\"64\" style=\"width:48pt\"></td>\n\n\nMaybe Firefox gets a little bit overwhelmed by the table?", "author": "mozilla@ahlblom.eu", "bug_id": 675417, "id": 5623681, "creation_time": "2011-07-30T15:04:31Z", "is_private": false}, {"creation_time": "2011-07-30T18:25:00Z", "is_private": false, "creator": "mozilla@ahlblom.eu", "tags": [], "attachment_id": null, "id": 5623778, "bug_id": 675417, "author": "mozilla@ahlblom.eu", "count": 3, "text": "This is not an orthodox hang. Firefox is just a little bit slow. ;)\n\nFirefox 7 needs about 9 minutes to render the page on a fast computer and then gives the browser control back to the user.\n\nChromium gives the control back within a fraction of a second and renders the page in something like 9 seconds.\n\nSo Firefox is approximately 60 times slower than Chromium.", "raw_text": "This is not an orthodox hang. Firefox is just a little bit slow. ;)\n\nFirefox 7 needs about 9 minutes to render the page on a fast computer and then gives the browser control back to the user.\n\nChromium gives the control back within a fraction of a second and renders the page in something like 9 seconds.\n\nSo Firefox is approximately 60 times slower than Chromium.", "time": "2011-07-30T18:25:00Z"}, {"time": "2011-07-31T00:38:25Z", "raw_text": "It appears the slow path is:\n\nnsCellMap::AppendCell (..., aRowIndex=107 ...\nBCMapCellIterator::PeekBottom (...,, aColIndex=12880, ....\nnsTableFrame::CalcBCBorders\nnsTableFrame::GetIncludedOuterBCBorder\nnsCSSOffsetState::InitOffsets\nnsCSSOffsetState\nnsBlockFrame::WidthToClearPastFloats\nnsBlockReflowState::ComputeBlockAvailSpace\nnsBlockFrame::ReflowBlockFrame\n\nThe table has 706 <tr>s, 5 <td>s per row, the 5th <td> has colspan=16380.\n\nI suspect we do nsCellMap::AppendCell 16380 * 706 times...\n\nRelated to bug 357729?", "author": "MatsPalmgren_bugz@use.startmail.com", "text": "It appears the slow path is:\n\nnsCellMap::AppendCell (..., aRowIndex=107 ...\nBCMapCellIterator::PeekBottom (...,, aColIndex=12880, ....\nnsTableFrame::CalcBCBorders\nnsTableFrame::GetIncludedOuterBCBorder\nnsCSSOffsetState::InitOffsets\nnsCSSOffsetState\nnsBlockFrame::WidthToClearPastFloats\nnsBlockReflowState::ComputeBlockAvailSpace\nnsBlockFrame::ReflowBlockFrame\n\nThe table has 706 <tr>s, 5 <td>s per row, the 5th <td> has colspan=16380.\n\nI suspect we do nsCellMap::AppendCell 16380 * 706 times...\n\nRelated to bug 357729?", "count": 4, "bug_id": 675417, "id": 5623927, "attachment_id": null, "tags": [], "creator": "MatsPalmgren_bugz@use.startmail.com", "is_private": false, "creation_time": "2011-07-31T00:38:25Z"}, {"raw_text": "Zipped the file containing the table for posterity.  Original URL:\nhttp://www.kansalliskirjasto.fi/extra/linnea2/kirjastotunnukset_files/sheet001.htm", "time": "2011-07-31T00:45:24Z", "bug_id": 675417, "id": 5623931, "count": 5, "text": "Created attachment 549609\nzipped testcase\n\nZipped the file containing the table for posterity.  Original URL:\nhttp://www.kansalliskirjasto.fi/extra/linnea2/kirjastotunnukset_files/sheet001.htm", "author": "MatsPalmgren_bugz@use.startmail.com", "tags": [], "attachment_id": 549609, "creation_time": "2011-07-31T00:45:24Z", "is_private": false, "creator": "MatsPalmgren_bugz@use.startmail.com"}, {"creator": "MatsPalmgren_bugz@use.startmail.com", "creation_time": "2011-07-31T00:52:44Z", "is_private": false, "attachment_id": null, "tags": [], "text": "The table has style border-collapse:collapse; if I remove that then it renders\nin a couple of seconds.", "count": 6, "author": "MatsPalmgren_bugz@use.startmail.com", "bug_id": 675417, "id": 5623933, "raw_text": "The table has style border-collapse:collapse; if I remove that then it renders\nin a couple of seconds.", "time": "2011-07-31T00:52:44Z"}, {"attachment_id": null, "tags": [], "creator": "bzbarsky@mit.edu", "is_private": false, "creation_time": "2011-07-31T02:49:37Z", "time": "2011-07-31T02:49:37Z", "raw_text": "Right; that makes us not enter the BCMapCellIterator code....\n\nAnd yes, it sounds like we're appending a cell to the cellmap for each row*(logical column), which is generally correct conceptually.  Do we not end up appending those cells in the non-BC case at all?  Or is it just a matter of cellmap entries being much smaller and simpler when BC is not involved?", "text": "Right; that makes us not enter the BCMapCellIterator code....\n\nAnd yes, it sounds like we're appending a cell to the cellmap for each row*(logical column), which is generally correct conceptually.  Do we not end up appending those cells in the non-BC case at all?  Or is it just a matter of cellmap entries being much smaller and simpler when BC is not involved?", "count": 7, "author": "bzbarsky@mit.edu", "bug_id": 675417, "id": 5623972}, {"raw_text": "I guess here kicks the colspan limit in first, then the cell does not span enough cells, it creates cellmap holes from 1000 to 16380. Under separated mode this is not of importance but under BC we fill the cell with dead cell map entries 15380 roughly for every row and that is slow.", "time": "2011-07-31T10:30:51Z", "id": 5624155, "bug_id": 675417, "author": "bernd_mozilla@gmx.de", "count": 8, "text": "I guess here kicks the colspan limit in first, then the cell does not span enough cells, it creates cellmap holes from 1000 to 16380. Under separated mode this is not of importance but under BC we fill the cell with dead cell map entries 15380 roughly for every row and that is slow.", "tags": [], "attachment_id": null, "is_private": false, "creation_time": "2011-07-31T10:30:51Z", "creator": "bernd_mozilla@gmx.de"}, {"id": 5624220, "bug_id": 675417, "author": "bzbarsky@mit.edu", "text": "Oh, wait.  You mean we don't apply the colspan limit when deciding on the cellmap sizing???  That would be the bug, no?", "count": 9, "time": "2011-07-31T14:30:36Z", "raw_text": "Oh, wait.  You mean we don't apply the colspan limit when deciding on the cellmap sizing???  That would be the bug, no?", "creation_time": "2011-07-31T14:30:36Z", "is_private": false, "creator": "bzbarsky@mit.edu", "tags": [], "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "bernd_mozilla@gmx.de", "creation_time": "2011-07-31T15:34:57Z", "is_private": false, "raw_text": "we apply the colspan limit and that later causes the necessity of repair", "time": "2011-07-31T15:34:57Z", "count": 10, "text": "we apply the colspan limit and that later causes the necessity of repair", "author": "bernd_mozilla@gmx.de", "id": 5624251, "bug_id": 675417}, {"attachment_id": null, "tags": [], "creator": "bernd_mozilla@gmx.de", "is_private": false, "creation_time": "2011-07-31T15:37:22Z", "raw_text": "http://mxr.mozilla.org/mozilla-central/source/content/html/content/src/nsHTMLTableCellElement.cpp#283", "time": "2011-07-31T15:37:22Z", "count": 11, "text": "http://mxr.mozilla.org/mozilla-central/source/content/html/content/src/nsHTMLTableCellElement.cpp#283", "author": "bernd_mozilla@gmx.de", "id": 5624253, "bug_id": 675417}, {"is_private": false, "creation_time": "2011-08-01T14:31:40Z", "creator": "bzbarsky@mit.edu", "tags": [], "attachment_id": null, "bug_id": 675417, "id": 5625174, "author": "bzbarsky@mit.edu", "text": "I don't understand.  That code treats colspan=\"something really big\" as colspan=\"1\", right?  So why do we end up having to do cellmap repair or ending up with a big cellmap?", "count": 12, "time": "2011-08-01T14:31:40Z", "raw_text": "I don't understand.  That code treats colspan=\"something really big\" as colspan=\"1\", right?  So why do we end up having to do cellmap repair or ending up with a big cellmap?"}, {"tags": [], "time": "2011-08-02T05:53:11Z", "attachment_id": null, "raw_text": "ASCII paint\n\njust imagine that the last cell needs to look up its lower neighbour\n\nwithout  colspan clamp\n\ncell cell    cell     cell      ...16000 times ... cell\ncell colspan colspan  colspan   ...16000 times ... colspan\n\nit will see a colspan goes to the left and finds the originating cell with its style information\n\nwith colspan clamp\n\ncell cell    cell     cell      ...16000 times ... cell\ncell \n\nit will see nothing, hmmm this might be a zero colspan lets walk left\nit walks every entry until it finds that there is the first cell without a corresponding colspan\n\nafter BC repair\n\ncell cell    cell     cell      ...16000 times ... cell\ncell dead    dead     dead      ...16000 times ... dead      \n\nnow it will see a dead cell, OK, there is certainly no 0 colspan, lets do the computation without a neighbour.\n\nfrom the html 5 spec\n\n\"The td and th elements may have a colspan content attribute specified, whose value must be a valid non-negative integer greater than zero.\"\n\nso we might not need that repair mechanism anymore...", "bug_id": 675417, "id": 5627113, "creation_time": "2011-08-02T05:53:11Z", "is_private": false, "creator": "bernd_mozilla@gmx.de", "author": "bernd_mozilla@gmx.de", "count": 13, "text": "ASCII paint\n\njust imagine that the last cell needs to look up its lower neighbour\n\nwithout  colspan clamp\n\ncell cell    cell     cell      ...16000 times ... cell\ncell colspan colspan  colspan   ...16000 times ... colspan\n\nit will see a colspan goes to the left and finds the originating cell with its style information\n\nwith colspan clamp\n\ncell cell    cell     cell      ...16000 times ... cell\ncell \n\nit will see nothing, hmmm this might be a zero colspan lets walk left\nit walks every entry until it finds that there is the first cell without a corresponding colspan\n\nafter BC repair\n\ncell cell    cell     cell      ...16000 times ... cell\ncell dead    dead     dead      ...16000 times ... dead      \n\nnow it will see a dead cell, OK, there is certainly no 0 colspan, lets do the computation without a neighbour.\n\nfrom the html 5 spec\n\n\"The td and th elements may have a colspan content attribute specified, whose value must be a valid non-negative integer greater than zero.\"\n\nso we might not need that repair mechanism anymore..."}, {"creation_time": "2011-08-02T06:01:49Z", "is_private": false, "id": 5627117, "bug_id": 675417, "text": "I hadn't realized that the testcase actually had 16000-some cells in that first row.  That certainly explains the behavior!  That'll also teach me to actually look at the testcase.  So the colspan limit is actually breaking this layout (assuming it's not just broken to start with; it's trying to stick 16380 cells each one 48pt wide into a single <col> that's 48pt wide).  Fun.\n\nWe can certainly talk about removing zero colspans.  I'm not sure anyone else ever implemented them, and of course a browser that doesn't support zero colpans can do this particular testcase faster than we can.\n\nBernd, are you OK with getting rid of that feature, in general?  Seems like it would simplify things a bit.", "count": 14, "author": "bzbarsky@mit.edu", "creator": "bzbarsky@mit.edu", "tags": [], "raw_text": "I hadn't realized that the testcase actually had 16000-some cells in that first row.  That certainly explains the behavior!  That'll also teach me to actually look at the testcase.  So the colspan limit is actually breaking this layout (assuming it's not just broken to start with; it's trying to stick 16380 cells each one 48pt wide into a single <col> that's 48pt wide).  Fun.\n\nWe can certainly talk about removing zero colspans.  I'm not sure anyone else ever implemented them, and of course a browser that doesn't support zero colpans can do this particular testcase faster than we can.\n\nBernd, are you OK with getting rid of that feature, in general?  Seems like it would simplify things a bit.", "attachment_id": null, "time": "2011-08-02T06:01:49Z"}, {"text": "#define COL_SPAN_OFFSET  0xFFF80000 which is then shifted down\nshows that we in principle handle only 13 bits of colspan information, that is 8190, which is also the max row span that we do correctly. \n\nWhile it hurts to see code go where a lot of effort has been spent to get it working I have to admit that I haven't seen a new table fan, so any code simplification is a strong argument.\n\nTo my knowledge the 0 colspan is Gecko only (webkit opera and ie certainly don't do this). I believe this was the reason to remove it from the html5 spec.", "count": 15, "author": "bernd_mozilla@gmx.de", "bug_id": 675417, "id": 5629742, "raw_text": "#define COL_SPAN_OFFSET  0xFFF80000 which is then shifted down\nshows that we in principle handle only 13 bits of colspan information, that is 8190, which is also the max row span that we do correctly. \n\nWhile it hurts to see code go where a lot of effort has been spent to get it working I have to admit that I haven't seen a new table fan, so any code simplification is a strong argument.\n\nTo my knowledge the 0 colspan is Gecko only (webkit opera and ie certainly don't do this). I believe this was the reason to remove it from the html5 spec.", "time": "2011-08-03T05:50:42Z", "creator": "bernd_mozilla@gmx.de", "creation_time": "2011-08-03T05:50:42Z", "is_private": false, "attachment_id": null, "tags": []}, {"text": "The connection to 0 colspans is bogus. We need the dead cells because we might want to store BC information on them as those dead cells might border to real cells. We store only the left and upper border for each entry so a dead cell that is below a real cell will contain the information about the bottom border of the real cell above.", "count": 16, "author": "bernd_mozilla@gmx.de", "creator": "bernd_mozilla@gmx.de", "creation_time": "2011-08-22T06:14:14Z", "is_private": false, "bug_id": 675417, "id": 5668654, "raw_text": "The connection to 0 colspans is bogus. We need the dead cells because we might want to store BC information on them as those dead cells might border to real cells. We store only the left and upper border for each entry so a dead cell that is below a real cell will contain the information about the bottom border of the real cell above.", "attachment_id": null, "time": "2011-08-22T06:14:14Z", "tags": []}, {"creation_time": "2011-08-22T16:05:06Z", "is_private": false, "creator": "bzbarsky@mit.edu", "tags": [], "attachment_id": null, "bug_id": 675417, "id": 5669367, "author": "bzbarsky@mit.edu", "text": "Hmm.  I wonder whether we can somehow break up that colspan into individual cells lazily (i.e. if we discover that there are multiple cells that fall into the colspan in rows below) somehow...", "count": 17, "raw_text": "Hmm.  I wonder whether we can somehow break up that colspan into individual cells lazily (i.e. if we discover that there are multiple cells that fall into the colspan in rows below) somehow...", "time": "2011-08-22T16:05:06Z"}, {"raw_text": ">somehow break up\nI am not sure that putting a lot of effort into the current BC code is really a move in to the right direction, in principle the BC code needs a rewrite  but bug 452319 and bug 540256 haven't seen any real work other than my refactoring but a lot of broken promises.", "time": "2011-08-23T05:40:16Z", "text": ">somehow break up\nI am not sure that putting a lot of effort into the current BC code is really a move in to the right direction, in principle the BC code needs a rewrite  but bug 452319 and bug 540256 haven't seen any real work other than my refactoring but a lot of broken promises.", "count": 18, "author": "bernd_mozilla@gmx.de", "id": 5671278, "bug_id": 675417, "attachment_id": null, "tags": [], "creator": "bernd_mozilla@gmx.de", "creation_time": "2011-08-23T05:40:16Z", "is_private": false}, {"creator": "sebastianzartner@gmail.com", "author": "sebastianzartner@gmail.com", "count": 19, "text": "The test case in comment #0 renders in less than a second for me using Firefox 33.1.1 on Win7 64-bit.\nIs that still an issue?\n\nSebastian", "id": 9648159, "bug_id": 675417, "is_private": false, "creation_time": "2014-11-28T10:18:16Z", "time": "2014-11-28T10:18:16Z", "attachment_id": null, "raw_text": "The test case in comment #0 renders in less than a second for me using Firefox 33.1.1 on Win7 64-bit.\nIs that still an issue?\n\nSebastian", "tags": []}, {"time": "2014-11-28T10:27:56Z", "raw_text": "Nightly became completely unresponsive with Attachment of Comment #5", "author": "alice0775@gmail.com", "count": 20, "text": "Nightly became completely unresponsive with Attachment of Comment #5", "bug_id": 675417, "id": 9648170, "attachment_id": null, "tags": [], "creator": "alice0775@gmail.com", "is_private": false, "creation_time": "2014-11-28T10:27:56Z"}, {"time": "2014-11-28T11:00:12Z", "attachment_id": null, "raw_text": "You're right. That test case causes Firefox to hang. With e10s enabled the browser does not hang, though the page doesn't load.\nThough also Chrome has its trouble with displaying that huge table. It's taking ~20s seconds to display it.\n\nSebastian", "tags": [], "creator": "sebastianzartner@gmail.com", "author": "sebastianzartner@gmail.com", "text": "You're right. That test case causes Firefox to hang. With e10s enabled the browser does not hang, though the page doesn't load.\nThough also Chrome has its trouble with displaying that huge table. It's taking ~20s seconds to display it.\n\nSebastian", "count": 21, "bug_id": 675417, "id": 9648235, "creation_time": "2014-11-28T11:00:12Z", "is_private": false}, {"attachment_id": null, "tags": [], "creator": "sebastianzartner@gmail.com", "creation_time": "2017-08-24T22:16:20Z", "is_private": false, "raw_text": "[Tracking Requested - why for this release]:\n\nJust tested this with Nightly 57.0a1 (2017-08-24) with enabled Stylo and e10s and while the page doesn't hang the browser anymore, the page still doesn't load at all.\n\nI've also tested it in Chrome Canary 62.0 and there it is now loaded super fast (like half a second).\n\nSebastian", "time": "2017-08-24T22:16:20Z", "count": 22, "text": "[Tracking Requested - why for this release]:\n\nJust tested this with Nightly 57.0a1 (2017-08-24) with enabled Stylo and e10s and while the page doesn't hang the browser anymore, the page still doesn't load at all.\n\nI've also tested it in Chrome Canary 62.0 and there it is now loaded super fast (like half a second).\n\nSebastian", "author": "sebastianzartner@gmail.com", "id": 12597768, "bug_id": 675417}, {"creator": "jwatt@jwatt.org", "creation_time": "2018-05-02T15:42:00Z", "is_private": false, "attachment_id": null, "tags": [], "author": "jwatt@jwatt.org", "count": 23, "text": "Mass bug change to replace various 'parity' whiteboard flags with the new canonical keywords. (See bug 1443764 comment 13.)", "bug_id": 675417, "id": 13249224, "time": "2018-05-02T15:42:00Z", "raw_text": "Mass bug change to replace various 'parity' whiteboard flags with the new canonical keywords. (See bug 1443764 comment 13.)"}, {"attachment_id": null, "tags": [], "creator": "c.buhtz@posteo.jp", "is_private": false, "creation_time": "2021-08-27T11:28:06Z", "time": "2021-08-27T11:28:06Z", "raw_text": "I am wondering what the current with the current Firefox version and ESR version is.\n\nCan we close this?", "author": "c.buhtz@posteo.jp", "text": "I am wondering what the current with the current Firefox version and ESR version is.\n\nCan we close this?", "count": 24, "bug_id": 675417, "id": 15545398}, {"is_private": false, "creation_time": "2021-08-27T20:43:41Z", "creator": "sebastianzartner@gmail.com", "tags": [], "attachment_id": null, "id": 15545679, "bug_id": 675417, "text": "For me, the attached test case now needs two to three minutes to load in Firefox 91.0.2 while in Chrome 92.0.4515.159 it still loads very fast. I.e. the `DOMContentLoaded` event is fired after about 1.5 seconds in Chrome in comparison to about 120-170 seconds in Firefox. This is with WebRender enabled, btw. I've also tried it in Nightly 93.0a1 (2021-08-27) with Fission enabled with basically no difference.\n\nSo Firefox's UI doesn't hang anymore like earlier comments indicated, though the slowness is definitely still a big issue.\nI assume, this still waits for the rewrite of the related code mentioned in comment 18 / bug 540256.\n\nSebastian", "count": 25, "author": "sebastianzartner@gmail.com", "raw_text": "For me, the attached test case now needs two to three minutes to load in Firefox 91.0.2 while in Chrome 92.0.4515.159 it still loads very fast. I.e. the `DOMContentLoaded` event is fired after about 1.5 seconds in Chrome in comparison to about 120-170 seconds in Firefox. This is with WebRender enabled, btw. I've also tried it in Nightly 93.0a1 (2021-08-27) with Fission enabled with basically no difference.\n\nSo Firefox's UI doesn't hang anymore like earlier comments indicated, though the slowness is definitely still a big issue.\nI assume, this still waits for the rewrite of the related code mentioned in comment 18 / bug 540256.\n\nSebastian", "time": "2021-08-27T20:43:41Z"}, {"raw_text": "In the case that Firefox does not \"hang\" anymore I would take the bug as fixed recommend to close it.", "time": "2021-08-28T06:53:59Z", "text": "In the case that Firefox does not \"hang\" anymore I would take the bug as fixed recommend to close it.", "count": 26, "author": "c.buhtz@posteo.jp", "id": 15545824, "bug_id": 675417, "attachment_id": null, "tags": [], "creator": "c.buhtz@posteo.jp", "creation_time": "2021-08-28T06:53:59Z", "is_private": false}, {"is_private": false, "creation_time": "2021-09-02T19:41:45Z", "bug_id": 675417, "id": 15553365, "author": "bzbarsky@mit.edu", "count": 27, "text": "The UI process does not hang, but the renderer process still hangs, right?", "creator": "bzbarsky@mit.edu", "tags": [], "attachment_id": null, "raw_text": "The UI process does not hang, but the renderer process still hangs, right?", "time": "2021-09-02T19:41:45Z"}]}}}