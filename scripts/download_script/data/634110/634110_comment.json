{"bugs": {"634110": {"comments": [{"attachment_id": null, "is_private": false, "time": "2011-02-14T23:41:24Z", "author": "mbrubeck@limpet.net", "text": "http://html5test.com/ is very slow to render during panning, in Fennec on Android.  It takes several seconds to render each new region.\n\nAccording to Chris Jones, pixman's radial_compute_color was the top culprit when he profiled with this page.  It would be nice if we had a faster version of this for ARM.", "creation_time": "2011-02-14T23:41:24Z", "raw_text": "http://html5test.com/ is very slow to render during panning, in Fennec on Android.  It takes several seconds to render each new region.\n\nAccording to Chris Jones, pixman's radial_compute_color was the top culprit when he profiled with this page.  It would be nice if we had a faster version of this for ARM.", "id": 5278423, "bug_id": 634110, "tags": [], "creator": "mbrubeck@limpet.net", "count": 0}, {"attachment_id": null, "time": "2011-02-22T22:21:27Z", "is_private": false, "author": "siarhei.siamashka@gmail.com", "count": 1, "creator": "siarhei.siamashka@gmail.com", "tags": [], "bug_id": 634110, "creation_time": "2011-02-22T22:21:27Z", "text": "Yes, radial gradients is one of worse performing parts of pixman at the moment, and not only on ARM. The fact that their behaviour was recently changed (to match PDF specification [1]) and the absence of automatic tests is not helping much.\n\nThe biggest problem is the use of double precision floating point calculations. On ARM Cortex-A8 these are not pipelined and extremely slow. Single precision calculations are also slow with C code, but they can be optimized using NEON. And single precision should be enough in many or even most practical cases, but identifying the cases where lower precision would be sufficient is still a gray area.\n\nThere are two possible approaches:\na) Try to convert radial gradients code to single precision and NEON, with a hope that it would work correctly enough\nb) Try to add some automated tests evaluating differences between an optimized implementation and a reference full precision implementation, implement some heuristic switching logic between low and high precision at runtime depending on gradient properties, finally optimize low precision implementation using NEON and verifying it for conformance with these automated tests.\n\nWith some luck (a) may be a lot faster to get up and running than (b). But if it does not work good enough right from the start, then it may actually require more efforts in the long run for debugging and fixing bugs and inconsistencies. And if later it gets decided that radial gradients behaviour needs to be changed again, then the whole work may need to be redone.\n\n1. http://lists.freedesktop.org/archives/xorg-announce/2010-October/001441.html", "id": 5297073, "raw_text": "Yes, radial gradients is one of worse performing parts of pixman at the moment, and not only on ARM. The fact that their behaviour was recently changed (to match PDF specification [1]) and the absence of automatic tests is not helping much.\n\nThe biggest problem is the use of double precision floating point calculations. On ARM Cortex-A8 these are not pipelined and extremely slow. Single precision calculations are also slow with C code, but they can be optimized using NEON. And single precision should be enough in many or even most practical cases, but identifying the cases where lower precision would be sufficient is still a gray area.\n\nThere are two possible approaches:\na) Try to convert radial gradients code to single precision and NEON, with a hope that it would work correctly enough\nb) Try to add some automated tests evaluating differences between an optimized implementation and a reference full precision implementation, implement some heuristic switching logic between low and high precision at runtime depending on gradient properties, finally optimize low precision implementation using NEON and verifying it for conformance with these automated tests.\n\nWith some luck (a) may be a lot faster to get up and running than (b). But if it does not work good enough right from the start, then it may actually require more efforts in the long run for debugging and fixing bugs and inconsistencies. And if later it gets decided that radial gradients behaviour needs to be changed again, then the whole work may need to be redone.\n\n1. http://lists.freedesktop.org/archives/xorg-announce/2010-October/001441.html"}, {"attachment_id": 542865, "author": "ben@stechz.com", "id": 5564948, "raw_text": "", "creation_time": "2011-06-29T17:52:19Z", "is_private": false, "text": "Created attachment 542865\nradial_compute_color (-moz-radial-gradient) is slow on ARM", "time": "2011-06-29T17:52:19Z", "creator": "ben@stechz.com", "tags": [], "count": 2, "bug_id": 634110}, {"attachment_id": 542865, "time": "2011-06-29T18:05:22Z", "is_private": false, "author": "ben@stechz.com", "count": 3, "creator": "ben@stechz.com", "tags": [], "bug_id": 634110, "id": 5564978, "raw_text": "The problem is that html5test has a radial background on the body element, and we end up in our horribly slow pixman path for the entire background! roc, how about something like this approach?", "creation_time": "2011-06-29T18:05:22Z", "text": "Comment on attachment 542865\nradial_compute_color (-moz-radial-gradient) is slow on ARM\n\nThe problem is that html5test has a radial background on the body element, and we end up in our horribly slow pixman path for the entire background! roc, how about something like this approach?"}, {"is_private": false, "time": "2011-06-30T00:16:34Z", "attachment_id": null, "text": "Another thing we could do (which Webkit does) is cache gradient background images.", "creation_time": "2011-06-30T00:16:34Z", "raw_text": "Another thing we could do (which Webkit does) is cache gradient background images.", "id": 5566031, "bug_id": 634110, "tags": [], "count": 4, "creator": "roc@ocallahan.org", "author": "roc@ocallahan.org"}, {"attachment_id": 542865, "time": "2011-06-30T00:18:23Z", "is_private": false, "author": "roc@ocallahan.org", "bug_id": 634110, "tags": [], "count": 5, "creator": "roc@ocallahan.org", "raw_text": "Review of attachment 542865:\n-----------------------------------------------------------------\n\n::: layout/base/nsCSSRendering.cpp\n@@ +2180,5 @@\n>    gfxRect areaToFill =\n>      nsLayoutUtils::RectToGfxRect(aFillArea, appUnitsPerPixel);\n>    gfxMatrix ctm = ctx->CurrentMatrix();\n>  \n> +  if (!restrictTo.IsEmpty()) {\n\nInstead of making an empty rect \"special\", I suggest we set restrictTo to the dirty rect up above, and here test whether restrictTo does not contain the dirty rect.", "id": 5566033, "text": "Comment on attachment 542865\nradial_compute_color (-moz-radial-gradient) is slow on ARM\n\nReview of attachment 542865:\n-----------------------------------------------------------------\n\n::: layout/base/nsCSSRendering.cpp\n@@ +2180,5 @@\n>    gfxRect areaToFill =\n>      nsLayoutUtils::RectToGfxRect(aFillArea, appUnitsPerPixel);\n>    gfxMatrix ctm = ctx->CurrentMatrix();\n>  \n> +  if (!restrictTo.IsEmpty()) {\n\nInstead of making an empty rect \"special\", I suggest we set restrictTo to the dirty rect up above, and here test whether restrictTo does not contain the dirty rect.", "creation_time": "2011-06-30T00:18:23Z"}, {"attachment_id": 542865, "is_private": false, "time": "2011-06-30T00:26:26Z", "author": "roc@ocallahan.org", "raw_text": "Review of attachment 542865:\n-----------------------------------------------------------------\n\n::: layout/base/nsCSSRendering.cpp\n@@ +2180,5 @@\n>    gfxRect areaToFill =\n>      nsLayoutUtils::RectToGfxRect(aFillArea, appUnitsPerPixel);\n>    gfxMatrix ctm = ctx->CurrentMatrix();\n>  \n> +  if (!restrictTo.IsEmpty()) {\n\nIn fact, how about moving the block that handles restrictTo up into the radial gradient code where we set restrictTo? We can hoist areaToFill up above that conditional, and 'dirty' too.", "id": 5566050, "text": "Comment on attachment 542865\nradial_compute_color (-moz-radial-gradient) is slow on ARM\n\nReview of attachment 542865:\n-----------------------------------------------------------------\n\n::: layout/base/nsCSSRendering.cpp\n@@ +2180,5 @@\n>    gfxRect areaToFill =\n>      nsLayoutUtils::RectToGfxRect(aFillArea, appUnitsPerPixel);\n>    gfxMatrix ctm = ctx->CurrentMatrix();\n>  \n> +  if (!restrictTo.IsEmpty()) {\n\nIn fact, how about moving the block that handles restrictTo up into the radial gradient code where we set restrictTo? We can hoist areaToFill up above that conditional, and 'dirty' too.", "creation_time": "2011-06-30T00:26:26Z", "bug_id": 634110, "count": 6, "creator": "roc@ocallahan.org", "tags": []}, {"bug_id": 634110, "tags": [], "creator": "ben@stechz.com", "time": "2011-07-08T16:37:53Z", "count": 7, "raw_text": "roc: review ping?", "id": 5581150, "text": "roc: review ping?", "creation_time": "2011-07-08T16:37:53Z", "is_private": false, "author": "ben@stechz.com", "attachment_id": null}, {"attachment_id": null, "is_private": false, "time": "2011-07-08T23:53:12Z", "author": "roc@ocallahan.org", "creation_time": "2011-07-08T23:53:12Z", "text": "Can you address the comments?", "id": 5582077, "raw_text": "Can you address the comments?", "creator": "roc@ocallahan.org", "count": 8, "tags": [], "bug_id": 634110}, {"id": 5582083, "raw_text": "Sorry, not sure how I missed that...", "creation_time": "2011-07-08T23:56:09Z", "text": "Sorry, not sure how I missed that...", "tags": [], "count": 9, "creator": "ben@stechz.com", "bug_id": 634110, "author": "ben@stechz.com", "is_private": false, "time": "2011-07-08T23:56:09Z", "attachment_id": null}, {"author": "ben@stechz.com", "bug_id": 634110, "tags": [], "count": 10, "creator": "ben@stechz.com", "text": "Created attachment 546619\nradial_compute_color (-moz-radial-gradient) is slow on ARM\n\nI realized that I can't just paint the entire background a solid color, because\nthe gradient may not be opaque. Review comments addressed too.", "creation_time": "2011-07-18T20:37:58Z", "raw_text": "I realized that I can't just paint the entire background a solid color, because\nthe gradient may not be opaque. Review comments addressed too.", "id": 5597472, "attachment_id": 546619, "time": "2011-07-18T20:37:58Z", "is_private": false}, {"author": "roc@ocallahan.org", "tags": [], "creator": "roc@ocallahan.org", "count": 11, "bug_id": 634110, "creation_time": "2011-07-19T01:47:27Z", "text": "Comment on attachment 546619\nradial_compute_color (-moz-radial-gradient) is slow on ARM\n\nReview of attachment 546619:\n-----------------------------------------------------------------\n\n::: layout/base/nsCSSRendering.cpp\n@@ +2147,5 @@\n> +    // are completely disjoint since there is an alpha channel. Overpainting\n> +    // will result in incorrect painting.\n> +    gfxRect radialGfxRect = gfxRect(\n> +      lineStart.x - outerRadius, lineStart.y - outerRadius,\n> +      outerRadius * 2, outerRadius * 2) + areaToFill.TopLeft();\n\nI think this is incorrect actually. aOneCellArea is repeated over the fill area. lineStart.x is relative to aOneCellArea (and all the cells, actually), not the fill area.\n\nIn fact I think you need to restructure your patch to handle tiling. And make sure that's tested...", "id": 5598309, "raw_text": "Review of attachment 546619:\n-----------------------------------------------------------------\n\n::: layout/base/nsCSSRendering.cpp\n@@ +2147,5 @@\n> +    // are completely disjoint since there is an alpha channel. Overpainting\n> +    // will result in incorrect painting.\n> +    gfxRect radialGfxRect = gfxRect(\n> +      lineStart.x - outerRadius, lineStart.y - outerRadius,\n> +      outerRadius * 2, outerRadius * 2) + areaToFill.TopLeft();\n\nI think this is incorrect actually. aOneCellArea is repeated over the fill area. lineStart.x is relative to aOneCellArea (and all the cells, actually), not the fill area.\n\nIn fact I think you need to restructure your patch to handle tiling. And make sure that's tested...", "attachment_id": 546619, "time": "2011-07-19T01:47:27Z", "is_private": false}]}}, "comments": {}}