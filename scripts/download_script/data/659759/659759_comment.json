{"comments": {}, "bugs": {"659759": {"comments": [{"raw_text": "User-Agent:       Mozilla/5.0 (Macintosh; Intel Mac OS X 10.5; rv:2.0.1) Gecko/20100101 Firefox/4.0.1\nBuild Identifier: \n\nIf the signature file provided to the p7verify command contains a signature that was generated using a hash algorithm other than MD2, MD5, or SHA-1, then the output of the p7verify command is:\n\nshould never get here\nInvalid hash algorithmID\np7verify: problem decoding/verifying signature: Failure to load dynamic library.\n\nReproducible: Always\n\nSteps to Reproduce:\n1. Sign a message use SHA-224, SHA-256, SHA-384, or SHA-512\n2. Attempt to verify signature using p7verify\n\nActual Results:  \nshould never get here\nInvalid hash algorithmID\np7verify: problem decoding/verifying signature: Failure to load dynamic library.\n\nExpected Results:  \nSignature is valid.", "creation_time": "2011-05-25T21:12:30Z", "creator": "dcooper16@gmail.com", "text": "User-Agent:       Mozilla/5.0 (Macintosh; Intel Mac OS X 10.5; rv:2.0.1) Gecko/20100101 Firefox/4.0.1\nBuild Identifier: \n\nIf the signature file provided to the p7verify command contains a signature that was generated using a hash algorithm other than MD2, MD5, or SHA-1, then the output of the p7verify command is:\n\nshould never get here\nInvalid hash algorithmID\np7verify: problem decoding/verifying signature: Failure to load dynamic library.\n\nReproducible: Always\n\nSteps to Reproduce:\n1. Sign a message use SHA-224, SHA-256, SHA-384, or SHA-512\n2. Attempt to verify signature using p7verify\n\nActual Results:  \nshould never get here\nInvalid hash algorithmID\np7verify: problem decoding/verifying signature: Failure to load dynamic library.\n\nExpected Results:  \nSignature is valid.", "author": "dcooper16@gmail.com", "attachment_id": null, "time": "2011-05-25T21:12:30Z", "tags": [], "is_private": false, "count": 0, "id": 5493416, "bug_id": 659759}, {"bug_id": 659759, "id": 5493433, "is_private": false, "count": 1, "tags": [], "time": "2011-05-25T21:19:25Z", "attachment_id": 535183, "text": "Created attachment 535183\nPatch to allow p7verify to recognize SHA-2 hash algorithms\n\nThis patch was created against NSS CVS HEAD.  To use with NSS 3.12.10 the two lines in AlgorithmToHashType referring to SHA-224 need to be deleted.", "raw_text": "This patch was created against NSS CVS HEAD.  To use with NSS 3.12.10 the two lines in AlgorithmToHashType referring to SHA-224 need to be deleted.", "creation_time": "2011-05-25T21:19:25Z", "author": "dcooper16@gmail.com", "creator": "dcooper16@gmail.com"}, {"bug_id": 659759, "id": 5514743, "is_private": false, "count": 2, "tags": [], "time": "2011-06-06T09:54:04Z", "attachment_id": null, "author": "pka@datatech.ru", "creator": "pka@datatech.ru", "text": "Random notes for patch 535183\n\n-   the whole \"switch(SEC_OID_tag)\" inside AlgorithmToHashType() SHALL be eliminated. libnss provides HASH_GetHashTypeByOidTag() for this purpose.\n\n-   the two-step getting of SECHashObject (SECOID_GetAlgorithmTag/HASH_GetHashObject) MAY be eliminated. libnss provides HASH_GetHashObjectByOidTag() for this purpose.\n\n-   It is more reliable to use exact hash size SECHashObject::length instead of hardcoded MAX_HASH_LEN.", "raw_text": "Random notes for patch 535183\n\n-   the whole \"switch(SEC_OID_tag)\" inside AlgorithmToHashType() SHALL be eliminated. libnss provides HASH_GetHashTypeByOidTag() for this purpose.\n\n-   the two-step getting of SECHashObject (SECOID_GetAlgorithmTag/HASH_GetHashObject) MAY be eliminated. libnss provides HASH_GetHashObjectByOidTag() for this purpose.\n\n-   It is more reliable to use exact hash size SECHashObject::length instead of hardcoded MAX_HASH_LEN.", "creation_time": "2011-06-06T09:54:04Z"}, {"author": "dcooper16@gmail.com", "creator": "dcooper16@gmail.com", "time": "2011-06-07T16:53:08Z", "attachment_id": 537812, "text": "Created attachment 537812\nPatch to allow p7verify to recognize SHA-2 hash algorithms\n\nI believe that this patch addresses the notes in Comment 2.", "creation_time": "2011-06-07T16:53:08Z", "raw_text": "I believe that this patch addresses the notes in Comment 2.", "bug_id": 659759, "id": 5517654, "tags": [], "count": 3, "is_private": false}, {"author": "pka@datatech.ru", "creator": "pka@datatech.ru", "id": 5519740, "count": 4, "is_private": false, "tags": [], "bug_id": 659759, "creation_time": "2011-06-08T15:07:31Z", "raw_text": "(In reply to comment #3)\n> Created attachment 537812 [details] [review]\n\nNotes:\n\n-   use PORT_Alloc/PORT_Free instead of malloc/free\n\n-   DigestFile leaks allocated buffer on: i/o error, hash creation failure", "attachment_id": null, "time": "2011-06-08T15:07:31Z", "text": "(In reply to comment #3)\n> Created attachment 537812 [details] [review]\n\nNotes:\n\n-   use PORT_Alloc/PORT_Free instead of malloc/free\n\n-   DigestFile leaks allocated buffer on: i/o error, hash creation failure"}, {"tags": [], "count": 5, "is_private": false, "id": 5535324, "bug_id": 659759, "raw_text": "Sorry about the use of malloc/free rather than PORT_Alloc/PORT_Free.  I searched NSS for \"malloc\" and saw that it was used in several places and so thought that it was okay to use that function.\n\nI have now replaced malloc and free with PORT_Alloc and PORT_Free and I have added two lines to free the allocated memory if DigestFile returns an error after having allocated the buffer.  I added \"digest.data = NULL\" just before the call to DigestFile to ensure that there is no risk of a double-free error even if code is added to DigestFile in the future that checks for and returns from an error before the call to PORT_Alloc.", "creation_time": "2011-06-15T22:02:50Z", "text": "Created attachment 539667\nPatch to allow p7verify to recognize SHA-2 hash algorithms\n\nSorry about the use of malloc/free rather than PORT_Alloc/PORT_Free.  I searched NSS for \"malloc\" and saw that it was used in several places and so thought that it was okay to use that function.\n\nI have now replaced malloc and free with PORT_Alloc and PORT_Free and I have added two lines to free the allocated memory if DigestFile returns an error after having allocated the buffer.  I added \"digest.data = NULL\" just before the call to DigestFile to ensure that there is no risk of a double-free error even if code is added to DigestFile in the future that checks for and returns from an error before the call to PORT_Alloc.", "creator": "dcooper16@gmail.com", "author": "dcooper16@gmail.com", "attachment_id": 539667, "time": "2011-06-15T22:02:50Z"}, {"bug_id": 659759, "id": 5541096, "tags": [], "count": 6, "is_private": false, "time": "2011-06-18T22:36:52Z", "attachment_id": null, "text": "(In reply to comment #5)\n> Created attachment 539667\n> Patch to allow p7verify to recognize SHA-2 hash algorithms, v3\n\nCode issues:\n\n-  PORT_Alloc sets error code itself, do not bother to call PORT_SetError. /* Indeed, caller should never guess callee errors - it isn't his business */\n\n-  Never[, never[, ...]] do again what you did with digest buffer.\n\n   Any call must be atomic from resource reservation POV. If a call succeeds, the agreed (in advance) resources are reserved (here : buffer allocated). If a call fails, none of resources are reserved.\n\n   It would be real nightmare if a caller should inspect and clean up possibly (!) randomly (!) reserved resources after a callee.\n\n   In this particulare case (DigestFile) you have only one resource - digest buffer. Not so much code to inspect and clean up buffer after the callee. But what if callee would use ten resources during it's work ?\n\nOrganizational issues:\n\n   sechash.c fix is not directly related to this bug's topic, is applicable only to 3.13 branch, and fixes defect of bug 356713. So it should be filed separately, with target_mileston=3.13\n\n   p7verify.c fix is applicable to both 3.12 and 3.13 branches and should be targeted to some 3.12.X milestone.", "raw_text": "(In reply to comment #5)\n> Created attachment 539667\n> Patch to allow p7verify to recognize SHA-2 hash algorithms, v3\n\nCode issues:\n\n-  PORT_Alloc sets error code itself, do not bother to call PORT_SetError. /* Indeed, caller should never guess callee errors - it isn't his business */\n\n-  Never[, never[, ...]] do again what you did with digest buffer.\n\n   Any call must be atomic from resource reservation POV. If a call succeeds, the agreed (in advance) resources are reserved (here : buffer allocated). If a call fails, none of resources are reserved.\n\n   It would be real nightmare if a caller should inspect and clean up possibly (!) randomly (!) reserved resources after a callee.\n\n   In this particulare case (DigestFile) you have only one resource - digest buffer. Not so much code to inspect and clean up buffer after the callee. But what if callee would use ten resources during it's work ?\n\nOrganizational issues:\n\n   sechash.c fix is not directly related to this bug's topic, is applicable only to 3.13 branch, and fixes defect of bug 356713. So it should be filed separately, with target_mileston=3.13\n\n   p7verify.c fix is applicable to both 3.12 and 3.13 branches and should be targeted to some 3.12.X milestone.", "creation_time": "2011-06-18T22:36:52Z", "author": "pka@datatech.ru", "creator": "pka@datatech.ru"}]}}}