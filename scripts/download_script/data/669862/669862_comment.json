{"bugs": {"669862": {"comments": [{"text": "Created attachment 544451\ntop_offset_bug.html\n\nUser Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:5.0) Gecko/20100101 Firefox/5.0\nBuild ID: 20110615151330\n\nSteps to reproduce:\n\nSetting style.display = 'inline' for a <div> tag increments offsetTop by 1px (as for <span>-tags, I presume span-tags simply are inline div-tags?)\n\nTested same code in IE9, Chrome, Opera and Safari and they all acts as expected", "bug_id": 669862, "tags": [], "raw_text": "User Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:5.0) Gecko/20100101 Firefox/5.0\nBuild ID: 20110615151330\n\nSteps to reproduce:\n\nSetting style.display = 'inline' for a <div> tag increments offsetTop by 1px (as for <span>-tags, I presume span-tags simply are inline div-tags?)\n\nTested same code in IE9, Chrome, Opera and Safari and they all acts as expected", "attachment_id": 544451, "author": "terje.rosenlund@gmail.com", "time": "2011-07-07T12:59:18Z", "creation_time": "2011-07-07T12:59:18Z", "creator": "terje.rosenlund@gmail.com", "count": 0, "id": 5578448, "is_private": false}, {"attachment_id": null, "raw_text": "What does this have to do with the CSSOM?  The testcase doesn't even use offsetTop.", "bug_id": 669862, "text": "What does this have to do with the CSSOM?  The testcase doesn't even use offsetTop.", "tags": [], "id": 5578609, "count": 1, "is_private": false, "creation_time": "2011-07-07T14:36:42Z", "time": "2011-07-07T14:36:42Z", "creator": "bzbarsky@mit.edu", "author": "bzbarsky@mit.edu"}, {"author": "bzbarsky@mit.edu", "creator": "bzbarsky@mit.edu", "time": "2011-07-07T14:50:01Z", "creation_time": "2011-07-07T14:50:01Z", "is_private": false, "id": 5578633, "count": 2, "tags": [], "bug_id": 669862, "text": "So in this case, the default line-height is greater than 1.  So the leading is positive and the height of the line box is greater than the font size.  This latter height is what gets top-aligned.\n\nBut the height of the area where the background is drawn is NOT necessarily determined by the line-height.  CSS 2.1 section 10.6.1 says:\n\n  10.6 Calculating heights and margins\n    10.6.1 Inline, non-replaced elements\n      The 'height' property does not apply. The height of the content area\n      should be based on the font, but this specification does not specify how.\n      A UA may, e.g., use the em-box or the maximum ascender and descender of\n      the font. (The latter would ensure that glyphs with parts above or below\n      the em-box still fall within the content area, but leads to differently\n      sized boxes for different fonts; the former would ensure authors can\n      control background styling relative to the 'line-height', but leads to\n      glyphs painting outside their content area.) \n\nIn any case, setting \"line-height: 1\" makes the behavior interoperable across all browsers; setting \"line-height: 1.2\" (the recommended default if no other information is available) shows a gap in Gecko but not Presto or WebKit at this font size... if I increase the font size to 50px, the gap appears in those too, but is very small.  If I set \"line-height: 2\", I get a gap in all browsers.\n\nSo it sounds like browsers do in fact compute the content area of non-replaced inlines slightly differently, as allowed by the spec.  The rest of the behavior is a consequence of line-height:normal being bigger than 1 for a typical font.\n\nDavid, can you confirm that this is invalid?", "raw_text": "So in this case, the default line-height is greater than 1.  So the leading is positive and the height of the line box is greater than the font size.  This latter height is what gets top-aligned.\n\nBut the height of the area where the background is drawn is NOT necessarily determined by the line-height.  CSS 2.1 section 10.6.1 says:\n\n  10.6 Calculating heights and margins\n    10.6.1 Inline, non-replaced elements\n      The 'height' property does not apply. The height of the content area\n      should be based on the font, but this specification does not specify how.\n      A UA may, e.g., use the em-box or the maximum ascender and descender of\n      the font. (The latter would ensure that glyphs with parts above or below\n      the em-box still fall within the content area, but leads to differently\n      sized boxes for different fonts; the former would ensure authors can\n      control background styling relative to the 'line-height', but leads to\n      glyphs painting outside their content area.) \n\nIn any case, setting \"line-height: 1\" makes the behavior interoperable across all browsers; setting \"line-height: 1.2\" (the recommended default if no other information is available) shows a gap in Gecko but not Presto or WebKit at this font size... if I increase the font size to 50px, the gap appears in those too, but is very small.  If I set \"line-height: 2\", I get a gap in all browsers.\n\nSo it sounds like browsers do in fact compute the content area of non-replaced inlines slightly differently, as allowed by the spec.  The rest of the behavior is a consequence of line-height:normal being bigger than 1 for a typical font.\n\nDavid, can you confirm that this is invalid?", "attachment_id": null}]}}, "comments": {}}