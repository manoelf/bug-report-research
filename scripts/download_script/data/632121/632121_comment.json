{"comments": {}, "bugs": {"632121": {"comments": [{"time": "2011-02-07T19:36:18Z", "count": 0, "tags": [], "creator": "dtownsend@mozilla.com", "bug_id": 632121, "id": 5260822, "raw_text": "Because chrome: and about: don't support usernames the same origin URL checks fail if you try to push a state with a new URL.", "creation_time": "2011-02-07T19:36:18Z", "is_private": false, "text": "Because chrome: and about: don't support usernames the same origin URL checks fail if you try to push a state with a new URL.", "attachment_id": null, "author": "dtownsend@mozilla.com"}, {"bug_id": 632121, "count": 1, "creator": "bzbarsky@mit.edu", "tags": [], "raw_text": "pushState is really not designed to work for non-authority schemes....", "id": 5260872, "text": "pushState is really not designed to work for non-authority schemes....", "creation_time": "2011-02-07T19:49:23Z", "author": "bzbarsky@mit.edu", "time": "2011-02-07T19:49:23Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "author": "dtownsend@mozilla.com", "id": 5331982, "raw_text": "So there are three things going on here that cause problems:\n\nThe URL check takes two paths depending on whether it is a local file URL or not. Currently chrome and about go down the non-local path, if they went down the local path then it works.\n\nIn the non-local path it attempts to get the username and password from the old and new URLs. chrome and about return a failure there which causes the change to fail. Seems to me if both fail to return one then it might make sense to continue.\n\nAfter that in the non-local path we end up in NS_SecurityCompareURIs. The only problem in here is the checks added by bug 602780.", "is_private": false, "creation_time": "2011-03-09T00:56:17Z", "text": "So there are three things going on here that cause problems:\n\nThe URL check takes two paths depending on whether it is a local file URL or not. Currently chrome and about go down the non-local path, if they went down the local path then it works.\n\nIn the non-local path it attempts to get the username and password from the old and new URLs. chrome and about return a failure there which causes the change to fail. Seems to me if both fail to return one then it might make sense to continue.\n\nAfter that in the non-local path we end up in NS_SecurityCompareURIs. The only problem in here is the checks added by bug 602780.", "tags": [], "creator": "dtownsend@mozilla.com", "time": "2011-03-09T00:56:17Z", "count": 2, "bug_id": 632121}, {"attachment_id": null, "author": "bzbarsky@mit.edu", "id": 5332305, "raw_text": "> The URL check takes two paths depending on whether it is a local file URL\n\nHmm.  This is the URIIsLocalFile call in nsDocShell::AddState, which checks for the URI_IS_LOCAL_FILE bit?  It does seem like that should be checking the URI_IS_LOCAL_RESOURCE bit instead to me.  Why is it doing what it's doing right now?  I guess it's also not doing a real same-origin check; _that_ difference should probably be restricted to file://....\n\n> Seems to me if both fail to return one then it might make sense to continue.\n\nThe problem is that you can't tell whether they failed because they're not nsStandardURL or because they just failed to allocate the string or whatever.\n\nThe right way to handle this would be to QI to nsIURL and only worry about userpass if both are nsIURL, I think.", "creation_time": "2011-03-09T04:27:49Z", "is_private": false, "text": "> The URL check takes two paths depending on whether it is a local file URL\n\nHmm.  This is the URIIsLocalFile call in nsDocShell::AddState, which checks for the URI_IS_LOCAL_FILE bit?  It does seem like that should be checking the URI_IS_LOCAL_RESOURCE bit instead to me.  Why is it doing what it's doing right now?  I guess it's also not doing a real same-origin check; _that_ difference should probably be restricted to file://....\n\n> Seems to me if both fail to return one then it might make sense to continue.\n\nThe problem is that you can't tell whether they failed because they're not nsStandardURL or because they just failed to allocate the string or whatever.\n\nThe right way to handle this would be to QI to nsIURL and only worry about userpass if both are nsIURL, I think.", "count": 3, "time": "2011-03-09T04:27:49Z", "tags": [], "creator": "bzbarsky@mit.edu", "bug_id": 632121}, {"id": 5333692, "raw_text": "I guess I'm not sure of the best way to proceed here. chrome: protocol has URI_IS_LOCAL_RESOURCE so that change would help there but about: does not. However if we push about: down that path some other way then basically we're allowing only chrome privileged about: pages to change their url. That is certainly safe and good enough for my purposes.\n\nMaybe rather than messing about with either of the paths there should just be a new test that checks if the calling JS has chrome privs and if so just allows the new url regardless?", "creation_time": "2011-03-09T19:04:51Z", "text": "I guess I'm not sure of the best way to proceed here. chrome: protocol has URI_IS_LOCAL_RESOURCE so that change would help there but about: does not. However if we push about: down that path some other way then basically we're allowing only chrome privileged about: pages to change their url. That is certainly safe and good enough for my purposes.\n\nMaybe rather than messing about with either of the paths there should just be a new test that checks if the calling JS has chrome privs and if so just allows the new url regardless?", "count": 4, "tags": [], "creator": "dtownsend@mozilla.com", "bug_id": 632121, "author": "dtownsend@mozilla.com", "is_private": false, "time": "2011-03-09T19:04:51Z", "attachment_id": null}, {"text": "> but about: does not.\n\nI wonder why... I guess nothing prevents about: from redirecting to the network.\n\nI don't see why the \"calling JS\" (which is not a well-defined concept, by the way; we want to use it as little as possible) should matter here.", "is_private": false, "creation_time": "2011-03-09T20:49:48Z", "raw_text": "> but about: does not.\n\nI wonder why... I guess nothing prevents about: from redirecting to the network.\n\nI don't see why the \"calling JS\" (which is not a well-defined concept, by the way; we want to use it as little as possible) should matter here.", "id": 5334033, "bug_id": 632121, "time": "2011-03-09T20:49:48Z", "tags": [], "count": 5, "creator": "bzbarsky@mit.edu", "author": "bzbarsky@mit.edu", "attachment_id": null}, {"author": "dtownsend@mozilla.com", "attachment_id": null, "bug_id": 632121, "creator": "dtownsend@mozilla.com", "tags": [], "time": "2011-03-09T22:57:41Z", "count": 6, "text": "Well I guess I mean checking if the principal of the document is the system principal.", "is_private": false, "creation_time": "2011-03-09T22:57:41Z", "raw_text": "Well I guess I mean checking if the principal of the document is the system principal.", "id": 5334464}, {"attachment_id": null, "time": "2011-03-10T00:23:35Z", "is_private": false, "author": "dtownsend@mozilla.com", "creator": "dtownsend@mozilla.com", "tags": [], "count": 7, "bug_id": 632121, "creation_time": "2011-03-10T00:23:35Z", "text": "(In reply to comment #5)\n> > but about: does not.\n> \n> I wonder why... I guess nothing prevents about: from redirecting to the\n> network.\n\nIndeed, take about:credits f.e.", "id": 5334756, "raw_text": "(In reply to comment #5)\n> > but about: does not.\n> \n> I wonder why... I guess nothing prevents about: from redirecting to the\n> network.\n\nIndeed, take about:credits f.e."}, {"author": "dtownsend@mozilla.com", "count": 8, "creator": "dtownsend@mozilla.com", "tags": [], "bug_id": 632121, "id": 5337903, "raw_text": "So I guess this is my first pass at something that seems right with a testcase showing the matrix of what works.\n\nBasically when attempting to change the URI if the new URI is local or in the about protocol then we call CheckMayLoad for the current document principal. For other cases we do the same origin check.\n\nThe result is that chrome: and privileged about: gets to change its url to anything except http:. Unprivileged about: can't change its url to anything.\n\nThe http: and file: cases remain unchanged.\n\nThis seems reasonably safe and sane to me, what do you think?", "creation_time": "2011-03-11T00:35:27Z", "text": "Created attachment 518575\nUse principal.checkMayLoad for local and about: uris\n\nSo I guess this is my first pass at something that seems right with a testcase showing the matrix of what works.\n\nBasically when attempting to change the URI if the new URI is local or in the about protocol then we call CheckMayLoad for the current document principal. For other cases we do the same origin check.\n\nThe result is that chrome: and privileged about: gets to change its url to anything except http:. Unprivileged about: can't change its url to anything.\n\nThe http: and file: cases remain unchanged.\n\nThis seems reasonably safe and sane to me, what do you think?", "attachment_id": 518575, "time": "2011-03-11T00:35:27Z", "is_private": false}, {"author": "bzbarsky@mit.edu", "bug_id": 632121, "count": 9, "creator": "bzbarsky@mit.edu", "tags": [], "raw_text": "Why is about: special here?  I _really_ dislike scheme checks of various sorts.  This is what we have protocol flags for.\n\nSo what are we really trying to check for here?", "id": 5339572, "text": "Why is about: special here?  I _really_ dislike scheme checks of various sorts.  This is what we have protocol flags for.\n\nSo what are we really trying to check for here?", "creation_time": "2011-03-11T19:06:29Z", "attachment_id": null, "time": "2011-03-11T19:06:29Z", "is_private": false}, {"bug_id": 632121, "creator": "dtownsend@mozilla.com", "count": 10, "tags": [], "raw_text": "So in my opinion chrome: and privileged about: pages should just be allowed to change their URL pretty much as they want. This was the easiest change I could think of to do that. I would also be happy with just allowing them to amend the fragment on the end of the url but that is probably going to work out more complicated to test.", "id": 5339651, "text": "So in my opinion chrome: and privileged about: pages should just be allowed to change their URL pretty much as they want. This was the easiest change I could think of to do that. I would also be happy with just allowing them to amend the fragment on the end of the url but that is probably going to work out more complicated to test.", "creation_time": "2011-03-11T19:34:40Z", "author": "dtownsend@mozilla.com", "time": "2011-03-11T19:34:40Z", "is_private": false, "attachment_id": null}, {"is_private": false, "time": "2011-03-11T20:18:25Z", "attachment_id": null, "id": 5339784, "raw_text": "> So in my opinion chrome: and privileged about: pages should just be allowed to\n> change their URL pretty much as they want\n\nSo perhaps we should be doing a Subsumes() check here, not a same-origin check?\n\nAnd then fix the codepath that looks for userpass to deal correctly with URIs that don't have it?", "creation_time": "2011-03-11T20:18:25Z", "text": "> So in my opinion chrome: and privileged about: pages should just be allowed to\n> change their URL pretty much as they want\n\nSo perhaps we should be doing a Subsumes() check here, not a same-origin check?\n\nAnd then fix the codepath that looks for userpass to deal correctly with URIs that don't have it?", "creator": "bzbarsky@mit.edu", "tags": [], "count": 11, "bug_id": 632121, "author": "bzbarsky@mit.edu"}, {"id": 5348323, "raw_text": "I don't think this is the right approach.", "creation_time": "2011-03-16T15:31:38Z", "text": "Comment on attachment 518575\nUse principal.checkMayLoad for local and about: uris\n\nI don't think this is the right approach.", "tags": [], "count": 12, "creator": "bzbarsky@mit.edu", "bug_id": 632121, "author": "bzbarsky@mit.edu", "is_private": false, "time": "2011-03-16T15:31:38Z", "attachment_id": 518575}, {"author": "dtownsend@mozilla.com", "text": "I don't have the time for this anymore", "creation_time": "2011-11-21T19:27:30Z", "raw_text": "I don't have the time for this anymore", "id": 5863129, "bug_id": 632121, "creator": "dtownsend@mozilla.com", "tags": [], "count": 13, "attachment_id": null, "is_private": false, "time": "2011-11-21T19:27:30Z"}, {"attachment_id": null, "author": "sledru@mozilla.com", "id": 13685162, "raw_text": "No assignee, updating the status.", "creation_time": "2018-10-15T08:36:02Z", "is_private": false, "text": "No assignee, updating the status.", "count": 14, "tags": [], "time": "2018-10-15T08:36:02Z", "creator": "sledru@mozilla.com", "bug_id": 632121}, {"is_private": false, "time": "2018-10-15T08:40:27Z", "attachment_id": null, "id": 13685482, "raw_text": "No assignee, updating the status.", "creation_time": "2018-10-15T08:40:27Z", "text": "No assignee, updating the status.", "creator": "sledru@mozilla.com", "tags": [], "count": 15, "bug_id": 632121, "author": "sledru@mozilla.com"}, {"bug_id": 632121, "count": 16, "tags": [], "creator": "sledru@mozilla.com", "raw_text": "No assignee, updating the status.", "id": 13685842, "text": "No assignee, updating the status.", "creation_time": "2018-10-15T08:43:06Z", "author": "sledru@mozilla.com", "time": "2018-10-15T08:43:06Z", "is_private": false, "attachment_id": null}]}}}