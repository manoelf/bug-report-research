{"bugs": {"638403": {"comments": [{"bug_id": 638403, "creation_time": "2011-03-03T11:55:55Z", "tags": [], "attachment_id": null, "id": 5318099, "is_private": false, "author": "roc@ocallahan.org", "text": "nsTHashtable.h says\n *     // KeyToPointer(): Convert KeyType to KeyTypePointer\n *     static KeyTypePointer KeyToPointer(KeyType aKey);\n\nImplementations in nsHashKeys.h and elsewhere do:\n  static KeyTypePointer KeyToPointer(KeyType aKey) { return &aKey; }\n\nThis is bad, since if aKey is an object with a destructor we may return a pointer to an object that was copied and then destroyed. I actually hit this in debug builds with patches in bug 638241. I don't know why it isn't burning us everywhere.\n\nLooking at the usage in nsTHashtable, KeyToPointer should take a KeyType& to avoid this problem.", "raw_text": "nsTHashtable.h says\n *     // KeyToPointer(): Convert KeyType to KeyTypePointer\n *     static KeyTypePointer KeyToPointer(KeyType aKey);\n\nImplementations in nsHashKeys.h and elsewhere do:\n  static KeyTypePointer KeyToPointer(KeyType aKey) { return &aKey; }\n\nThis is bad, since if aKey is an object with a destructor we may return a pointer to an object that was copied and then destroyed. I actually hit this in debug builds with patches in bug 638241. I don't know why it isn't burning us everywhere.\n\nLooking at the usage in nsTHashtable, KeyToPointer should take a KeyType& to avoid this problem.", "creator": "roc@ocallahan.org", "time": "2011-03-03T11:55:55Z", "count": 0}, {"bug_id": 638403, "text": "Created attachment 516557\ntotally untested patch", "tags": [], "creation_time": "2011-03-03T12:03:35Z", "attachment_id": 516557, "raw_text": "", "creator": "roc@ocallahan.org", "id": 5318108, "is_private": false, "author": "roc@ocallahan.org", "time": "2011-03-03T12:03:35Z", "count": 1}, {"count": 2, "time": "2011-03-03T14:14:15Z", "creator": "benjamin@smedbergs.us", "raw_text": "In most case this is not necesary, because KeyType is already a reference, see nsStringHashKey. We should only make this change for the cases where KeyType is neither a reference nor a pointer. When it is a reference, things are already correct, and when it is a pointer, KeyToPointer is just a straight conversion.\n\nLooking through the things you've patched, I don't see any of them which is buggy.", "text": "In most case this is not necesary, because KeyType is already a reference, see nsStringHashKey. We should only make this change for the cases where KeyType is neither a reference nor a pointer. When it is a reference, things are already correct, and when it is a pointer, KeyToPointer is just a straight conversion.\n\nLooking through the things you've patched, I don't see any of them which is buggy.", "is_private": false, "author": "benjamin@smedbergs.us", "id": 5318299, "attachment_id": null, "tags": [], "creation_time": "2011-03-03T14:14:15Z", "bug_id": 638403}, {"count": 3, "time": "2011-03-03T21:42:08Z", "text": "(In reply to comment #2)\n> In most case this is not necesary, because KeyType is already a reference, see\n> nsStringHashKey. We should only make this change for the cases where KeyType is\n> neither a reference nor a pointer. When it is a reference, things are already\n> correct, and when it is a pointer, KeyToPointer is just a straight conversion.\n\nOK, but why not just make it a reference everywhere, so that people like me who copy and paste code don't get broken in very hard-to-debug ways?", "creator": "roc@ocallahan.org", "raw_text": "(In reply to comment #2)\n> In most case this is not necesary, because KeyType is already a reference, see\n> nsStringHashKey. We should only make this change for the cases where KeyType is\n> neither a reference nor a pointer. When it is a reference, things are already\n> correct, and when it is a pointer, KeyToPointer is just a straight conversion.\n\nOK, but why not just make it a reference everywhere, so that people like me who copy and paste code don't get broken in very hard-to-debug ways?", "id": 5319865, "is_private": false, "author": "roc@ocallahan.org", "bug_id": 638403, "attachment_id": null, "creation_time": "2011-03-03T21:42:08Z", "tags": []}, {"bug_id": 638403, "attachment_id": null, "tags": [], "creation_time": "2011-03-04T16:08:06Z", "id": 5321731, "author": "benjamin@smedbergs.us", "is_private": false, "text": "What happens when you pass a something&&? It just seems like extra indirection. I wonder if there's a template-magic way to enforce that KeyType is either a reference or a pointer.", "creator": "benjamin@smedbergs.us", "raw_text": "What happens when you pass a something&&? It just seems like extra indirection. I wonder if there's a template-magic way to enforce that KeyType is either a reference or a pointer.", "count": 4, "time": "2011-03-04T16:08:06Z"}, {"id": 5321864, "is_private": false, "time": "2011-03-04T16:52:53Z", "author": "bent.mozilla@gmail.com", "count": 5, "bug_id": 638403, "text": "&& is treated as a compiler error I'm pretty sure. And yes, there is easy template magic to make sure we always use a ref type (or a pointer, or a ref to a pointer, or whatever you decide).", "tags": [], "creation_time": "2011-03-04T16:52:53Z", "attachment_id": null, "raw_text": "&& is treated as a compiler error I'm pretty sure. And yes, there is easy template magic to make sure we always use a ref type (or a pointer, or a ref to a pointer, or whatever you decide).", "creator": "bent.mozilla@gmail.com"}, {"creator": "bent.mozilla@gmail.com", "raw_text": "Here's some sample template-y stuff to assert that a type is a reference or pointer.", "attachment_id": 516915, "tags": [], "creation_time": "2011-03-04T17:53:26Z", "text": "Created attachment 516915\nAssert reference types\n\nHere's some sample template-y stuff to assert that a type is a reference or pointer.", "bug_id": 638403, "count": 6, "author": "bent.mozilla@gmail.com", "time": "2011-03-04T17:53:26Z", "is_private": false, "id": 5322050}, {"text": "That is cool. And evil.", "bug_id": 638403, "creator": "roc@ocallahan.org", "raw_text": "That is cool. And evil.", "attachment_id": null, "tags": [], "creation_time": "2011-03-05T03:44:35Z", "id": 5323525, "count": 7, "author": "roc@ocallahan.org", "time": "2011-03-05T03:44:35Z", "is_private": false}, {"count": 8, "time": "2011-03-07T17:07:14Z", "creator": "benjamin@smedbergs.us", "raw_text": "In any case, we don't need to make any code changes (in the current code) to fix this bug: because it is a template, we'd only need to change the signature of KeyToPointer in those cases where it's unsafe.", "text": "Comment on attachment 516557\ntotally untested patch\n\nIn any case, we don't need to make any code changes (in the current code) to fix this bug: because it is a template, we'd only need to change the signature of KeyToPointer in those cases where it's unsafe.", "is_private": false, "author": "benjamin@smedbergs.us", "id": 5327389, "attachment_id": 516557, "tags": [], "creation_time": "2011-03-07T17:07:14Z", "bug_id": 638403}]}}, "comments": {}}