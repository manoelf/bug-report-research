{"comments": {}, "bugs": {"655208": {"comments": [{"is_private": false, "attachment_id": null, "tags": [], "creator": "sdwilsh@forerunnerdesigns.com", "bug_id": 655208, "creation_time": "2011-05-06T06:35:01Z", "raw_text": "To make external strings really fast, we really want to be able to take a char* and not have the JS engine do anything (like expand each char to fit in a jschar).  Brendan indicated that this should be doable, but that we should talk to Luke.  I'm filing this bug to track all this. :)", "id": 5452925, "time": "2011-05-06T06:35:01Z", "author": "sdwilsh@forerunnerdesigns.com", "count": 0, "text": "To make external strings really fast, we really want to be able to take a char* and not have the JS engine do anything (like expand each char to fit in a jschar).  Brendan indicated that this should be doable, but that we should talk to Luke.  I'm filing this bug to track all this. :)"}, {"attachment_id": null, "is_private": false, "creator": "bzbarsky@mit.edu", "tags": [], "raw_text": "Hmm.  Does V8 actually do that?", "creation_time": "2011-05-06T14:17:23Z", "bug_id": 655208, "id": 5453356, "author": "bzbarsky@mit.edu", "time": "2011-05-06T14:17:23Z", "count": 1, "text": "Hmm.  Does V8 actually do that?"}, {"tags": [], "raw_text": "It's unclear at this time, although they certainly have an API to make an external string from ascii data.\n\nFor the Node guys, the expanding and then shrinking back down when going from a syscall to JS and then back to a syscall is really expensive.  I suspect we have cases like this too where that'd help us in perf, although the node guys are likely using larger strings.", "creation_time": "2011-05-06T16:22:23Z", "bug_id": 655208, "is_private": false, "id": 5453602, "time": "2011-05-06T16:22:23Z", "creator": "sdwilsh@forerunnerdesigns.com", "attachment_id": null, "count": 2, "text": "It's unclear at this time, although they certainly have an API to make an external string from ascii data.\n\nFor the Node guys, the expanding and then shrinking back down when going from a syscall to JS and then back to a syscall is really expensive.  I suspect we have cases like this too where that'd help us in perf, although the node guys are likely using larger strings.", "author": "sdwilsh@forerunnerdesigns.com"}, {"attachment_id": null, "creator": "mail@lukewagner.name", "author": "mail@lukewagner.name", "text": "Here's an idea:\n\nAnalogous to JSRope representing a delayed concatenation, we could have a JSAsciiString which represents a delayed inflation to jschar by storing the char array.  We'd want to add a new JSAPI function that was able to return this char array directly when given an JSAsciiStrings.  This would only win if most JSAsciiStrings never have there jschars accessed in the JS engine.\n\nAnother possibility is that we lose by repeatedly asking for the char array of a string (which will inflate each time).  In this case, it would make sense to use JSFixedString's free word to cache the char array.  Merging these two ideas, we could have JSAsciiString transition to JSFixedString if it gets inflated thereby remembering its char array.\n\nShawn: do you know if the ASCII strings that get created by Node have their chars access from JS or are they primarily accessed via JSAPI to pull the ASCII chars out again?", "count": 3, "is_private": false, "tags": [], "raw_text": "Here's an idea:\n\nAnalogous to JSRope representing a delayed concatenation, we could have a JSAsciiString which represents a delayed inflation to jschar by storing the char array.  We'd want to add a new JSAPI function that was able to return this char array directly when given an JSAsciiStrings.  This would only win if most JSAsciiStrings never have there jschars accessed in the JS engine.\n\nAnother possibility is that we lose by repeatedly asking for the char array of a string (which will inflate each time).  In this case, it would make sense to use JSFixedString's free word to cache the char array.  Merging these two ideas, we could have JSAsciiString transition to JSFixedString if it gets inflated thereby remembering its char array.\n\nShawn: do you know if the ASCII strings that get created by Node have their chars access from JS or are they primarily accessed via JSAPI to pull the ASCII chars out again?", "bug_id": 655208, "creation_time": "2011-05-07T02:05:54Z", "id": 5454895, "time": "2011-05-07T02:05:54Z"}, {"time": "2011-05-14T23:20:15Z", "id": 5470652, "raw_text": "I poked the Node.js guys about this, but haven't gotten a response back.  I haven't forgotten about this bug! :D", "bug_id": 655208, "creation_time": "2011-05-14T23:20:15Z", "tags": [], "is_private": false, "text": "I poked the Node.js guys about this, but haven't gotten a response back.  I haven't forgotten about this bug! :D", "count": 4, "author": "sdwilsh@forerunnerdesigns.com", "creator": "sdwilsh@forerunnerdesigns.com", "attachment_id": null}, {"time": "2019-09-26T14:55:00Z", "id": 14385929, "is_private": false, "raw_text": "Bug 1576076 would presumably do this...", "bug_id": 655208, "creation_time": "2019-09-26T14:55:00Z", "tags": [], "author": "bzbarsky@mit.edu", "text": "Bug 1576076 would presumably do this...", "count": 5, "attachment_id": null, "creator": "bzbarsky@mit.edu"}]}}}