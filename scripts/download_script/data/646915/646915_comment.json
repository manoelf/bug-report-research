{"comments": {}, "bugs": {"646915": {"comments": [{"tags": [], "time": "2011-03-31T18:09:52Z", "count": 0, "creator": "wes@page.ca", "bug_id": 646915, "id": 5383778, "raw_text": "I'd like to improve the JS source release process.\n\nHistorical JSAPI releases have been\n - few\n - far in-between\n - one or two per JavaScript version\n - API compatible\n - ABI incompatible\n - versioned based on the JS language they implement with an optional -suffix\n\nI would like future JS releases to maintain most of these characteristics, however I would like to add the following properties\n - A version number which indicates API and ABI compatibility\n - A product name which identifies the version of JS we are implementing\n - Plays nicer (even if not nice) with OS distros and packaging systems\n\nTo that end, I've put together JS 1.8.5 with an experimental naming convention and versioning scheme, documented in the release's README.\n\nThe key idea is to produce a source release which satisfies the needs of the embedders and distro guys with the absolute minimum delta from a known-stable (i.e. Firefox-release) snapshot.\n\nHowever, some delta is required, as we don't want some of these changes in the Moz tree, and we may want to cherry-pick a patch or two from the Moz tree (say, for a trivial but critical bug) between Firefox releases.\n\nI'm volunteering to manage the source release (using JS 1.8.5 as the experimental proving ground with\n - super-review from JS peer\n - review for patches from the peer group { me + distro maintainers }\n\nNote that the point of this exercise isn't to place extra work on JS folks by maintaining multiple source releases, requiring API compatibility, or anything crazy like that.  The versioning scheme I have proposed is based on current reality.\n\nThis lets the embedder/distro community have better, more regular releases without polluting the tree or tying up resources -- while still providing an accountability mechanism in the form of super-review.", "is_private": false, "creation_time": "2011-03-31T18:09:52Z", "text": "I'd like to improve the JS source release process.\n\nHistorical JSAPI releases have been\n - few\n - far in-between\n - one or two per JavaScript version\n - API compatible\n - ABI incompatible\n - versioned based on the JS language they implement with an optional -suffix\n\nI would like future JS releases to maintain most of these characteristics, however I would like to add the following properties\n - A version number which indicates API and ABI compatibility\n - A product name which identifies the version of JS we are implementing\n - Plays nicer (even if not nice) with OS distros and packaging systems\n\nTo that end, I've put together JS 1.8.5 with an experimental naming convention and versioning scheme, documented in the release's README.\n\nThe key idea is to produce a source release which satisfies the needs of the embedders and distro guys with the absolute minimum delta from a known-stable (i.e. Firefox-release) snapshot.\n\nHowever, some delta is required, as we don't want some of these changes in the Moz tree, and we may want to cherry-pick a patch or two from the Moz tree (say, for a trivial but critical bug) between Firefox releases.\n\nI'm volunteering to manage the source release (using JS 1.8.5 as the experimental proving ground with\n - super-review from JS peer\n - review for patches from the peer group { me + distro maintainers }\n\nNote that the point of this exercise isn't to place extra work on JS folks by maintaining multiple source releases, requiring API compatibility, or anything crazy like that.  The versioning scheme I have proposed is based on current reality.\n\nThis lets the embedder/distro community have better, more regular releases without polluting the tree or tying up resources -- while still providing an accountability mechanism in the form of super-review.", "attachment_id": null, "author": "wes@page.ca"}, {"attachment_id": null, "time": "2011-04-01T02:12:54Z", "is_private": false, "author": "wes@page.ca", "bug_id": 646915, "count": 1, "tags": [], "creator": "wes@page.ca", "text": "http://www.mozilla.org/js/spidermonkey/release-notes/spidermonkey-releases.html\n\nneeds updating too", "creation_time": "2011-04-01T02:12:54Z", "raw_text": "http://www.mozilla.org/js/spidermonkey/release-notes/spidermonkey-releases.html\n\nneeds updating too", "id": 5385470}, {"text": "Can you explain why \"some delta is required\", as opposed to #define'd off with a --enable-source-release flag, or something. (I'm thinking in terms of having automated testing in the form of an SM flag on tbpl.)", "creation_time": "2011-04-01T17:15:03Z", "is_private": false, "raw_text": "Can you explain why \"some delta is required\", as opposed to #define'd off with a --enable-source-release flag, or something. (I'm thinking in terms of having automated testing in the form of an SM flag on tbpl.)", "id": 5386547, "bug_id": 646915, "count": 2, "tags": [], "time": "2011-04-01T17:15:03Z", "creator": "paul.biggar@gmail.com", "author": "paul.biggar@gmail.com", "attachment_id": null}, {"author": "wes@page.ca", "attachment_id": null, "text": "Delta is required for two reasons:\n 1. Some things, like the library versioning tweaks, will not be taken upstream (or so I have been told)\n\n 2. It is likely that if we need to pull a small/critical from the mainline into the source release that we will cherry-pick just that patch, rather than trying to capture, stabilize, discover, and document whatever API and ABI changes occurred between the source release and when that particular patch happened to land.\n\nTake a look at the patches/ subdir of the src release, all three are perfect examples.\n\n - One is embedder-only build system changes\n - One is a version stamp that can't land in the mainline and be correct (unless we make a new head, which is silly)\n - One is a cherry-picked patch that we wanted for the source release but which did not land in our sync-point, Firefox 4... and other patches landed on the mainline in the meantime", "creation_time": "2011-04-02T00:20:24Z", "is_private": false, "raw_text": "Delta is required for two reasons:\n 1. Some things, like the library versioning tweaks, will not be taken upstream (or so I have been told)\n\n 2. It is likely that if we need to pull a small/critical from the mainline into the source release that we will cherry-pick just that patch, rather than trying to capture, stabilize, discover, and document whatever API and ABI changes occurred between the source release and when that particular patch happened to land.\n\nTake a look at the patches/ subdir of the src release, all three are perfect examples.\n\n - One is embedder-only build system changes\n - One is a version stamp that can't land in the mainline and be correct (unless we make a new head, which is silly)\n - One is a cherry-picked patch that we wanted for the source release but which did not land in our sync-point, Firefox 4... and other patches landed on the mainline in the meantime", "id": 5387767, "bug_id": 646915, "time": "2011-04-02T00:20:24Z", "creator": "wes@page.ca", "tags": [], "count": 3}]}}}