{"comments": {}, "bugs": {"691216": {"comments": [{"id": 5753253, "tags": [], "is_private": false, "count": 0, "bug_id": 691216, "raw_text": "The data structures we currently use to represent CSS selectors use a lot of memory because:\n * we store them in lots of separate allocations, with pointers connecting them\n * the base nsCSSSelector class has a member variable for each thing it *might*\n   have\n\nAs I proposed in bug 691189 comment 6 and elsewhere in the past, we should consider, without reference to the current code, how one ought to implement a space-efficient representation of CSS selectors such that the things we need to do with them are still fast (and hopefully faster).\n\nMy initial inclination would be to have a fused-allocation structure with parts of the fused allocation indicating what's coming next, and perhaps a few things that make it easy to skip around (in particular, the size of each compound selector (in selectors4 terminology) / sequence of simple selectors (in css3-selectors terminology) / simple selector (in CSS1/CSS2.1 terminology)).  This would be somewhat like nsCSSCompressedDataBlock, particularly back when data blocks stored more than one type (prior to bug 576044).\n\n\nThis should probably wait until after bug 661746 and bug 631527 land.", "creation_time": "2011-10-03T00:53:07Z", "attachment_id": null, "time": "2011-10-03T00:53:07Z", "text": "The data structures we currently use to represent CSS selectors use a lot of memory because:\n * we store them in lots of separate allocations, with pointers connecting them\n * the base nsCSSSelector class has a member variable for each thing it *might*\n   have\n\nAs I proposed in bug 691189 comment 6 and elsewhere in the past, we should consider, without reference to the current code, how one ought to implement a space-efficient representation of CSS selectors such that the things we need to do with them are still fast (and hopefully faster).\n\nMy initial inclination would be to have a fused-allocation structure with parts of the fused allocation indicating what's coming next, and perhaps a few things that make it easy to skip around (in particular, the size of each compound selector (in selectors4 terminology) / sequence of simple selectors (in css3-selectors terminology) / simple selector (in CSS1/CSS2.1 terminology)).  This would be somewhat like nsCSSCompressedDataBlock, particularly back when data blocks stored more than one type (prior to bug 576044).\n\n\nThis should probably wait until after bug 661746 and bug 631527 land.", "author": "dbaron@dbaron.org", "creator": "dbaron@dbaron.org"}, {"creator": "dbaron@dbaron.org", "author": "dbaron@dbaron.org", "creation_time": "2011-10-03T19:19:18Z", "raw_text": "Of the allocations in bug 551477 comment 48, this bug is related to:\n> HEAPPROF 16701:    objects/bytes: 177885/18446274 in CH, \n>                                   155018/13662436 in CH-tagged\n> \n> RANK  OBJECTS/BYTES    ALLOCATED BY\n> \n>   1  19084 / 1374048   nsCSSSelector::nsCSSSelector()\n>  12  10306 / 247344    nsCSSSelectorList::nsCSSSelectorList()\n>  35   1156 / 36992     nsPseudoClassList::nsPseudoClassList(nsIAtom*,\n>                        nsCSSPseudoClasses::Type)\nand probably some additional ones not included in that comment.", "text": "Of the allocations in bug 551477 comment 48, this bug is related to:\n> HEAPPROF 16701:    objects/bytes: 177885/18446274 in CH, \n>                                   155018/13662436 in CH-tagged\n> \n> RANK  OBJECTS/BYTES    ALLOCATED BY\n> \n>   1  19084 / 1374048   nsCSSSelector::nsCSSSelector()\n>  12  10306 / 247344    nsCSSSelectorList::nsCSSSelectorList()\n>  35   1156 / 36992     nsPseudoClassList::nsPseudoClassList(nsIAtom*,\n>                        nsCSSPseudoClasses::Type)\nand probably some additional ones not included in that comment.", "time": "2011-10-03T19:19:18Z", "attachment_id": null, "tags": [], "is_private": false, "count": 1, "id": 5754893, "bug_id": 691216}, {"author": "n.nethercote@gmail.com", "creator": "n.nethercote@gmail.com", "time": "2014-05-27T03:31:26Z", "attachment_id": null, "text": "Random data-point: on 32-bit, sizeof(nsCSSSelector) is 40 bytes, which jemalloc rounds up to 48. On 64-bit, it's 72 bytes, which jemalloc rounds up to 80.", "raw_text": "Random data-point: on 32-bit, sizeof(nsCSSSelector) is 40 bytes, which jemalloc rounds up to 48. On 64-bit, it's 72 bytes, which jemalloc rounds up to 80.", "creation_time": "2014-05-27T03:31:26Z", "bug_id": 691216, "id": 8843143, "is_private": false, "count": 2, "tags": []}]}}}