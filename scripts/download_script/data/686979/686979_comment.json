{"comments": {}, "bugs": {"686979": {"comments": [{"attachment_id": 560470, "raw_text": "XPConnect sets a native setter on readonly attributes that throws a TypeError. I wasn't seeing the TypeError, so mrbkap and I dug in.\n\nWhen we have a JS getter but no JS setter, we throw an error in strict mode. However, this causes problems in two cases:\n1 - If we had a bonafide native setter, we'd throw an error when we shouldn't.\n2 - In non-strict mode, we bypass the XPConnect TypeError throw, causing foo.readOnlyProperty = bar to fail silently.\n\nFix attached. Flagging Waldo for review.", "id": 5719381, "is_private": false, "creator": "bholley@mozilla.com", "creation_time": "2011-09-15T22:33:12Z", "author": "bholley@mozilla.com", "text": "Created attachment 560470\npatch v1\n\nXPConnect sets a native setter on readonly attributes that throws a TypeError. I wasn't seeing the TypeError, so mrbkap and I dug in.\n\nWhen we have a JS getter but no JS setter, we throw an error in strict mode. However, this causes problems in two cases:\n1 - If we had a bonafide native setter, we'd throw an error when we shouldn't.\n2 - In non-strict mode, we bypass the XPConnect TypeError throw, causing foo.readOnlyProperty = bar to fail silently.\n\nFix attached. Flagging Waldo for review.", "time": "2011-09-15T22:33:12Z", "tags": [], "count": 0, "bug_id": 686979}, {"attachment_id": null, "raw_text": "Could you add a testcase to this, that fails before/passes after, so I have a better idea what exactly the problem is being fixed?  I feel like I'm guessing slightly to connect the dots based on comment 0 and the contents of the patch.  Plus, if you want a particular behavior here, you presumably want it to not break in the future, which a test will guarantee.", "id": 5724284, "creator": "jwalden@mit.edu", "is_private": false, "count": 1, "author": "jwalden@mit.edu", "creation_time": "2011-09-19T22:46:42Z", "time": "2011-09-19T22:46:42Z", "tags": [], "bug_id": 686979, "text": "Could you add a testcase to this, that fails before/passes after, so I have a better idea what exactly the problem is being fixed?  I feel like I'm guessing slightly to connect the dots based on comment 0 and the contents of the patch.  Plus, if you want a particular behavior here, you presumably want it to not break in the future, which a test will guarantee."}, {"bug_id": 686979, "count": 2, "creation_time": "2011-09-19T23:39:30Z", "author": "bholley@mozilla.com", "text": "The test coverage for this is up for review over at bug 684327.\n\nThis is where we'd like it to throw when we assign properties:\nhttps://github.com/bholley/mozilla-central/blob/xpc_test/js/src/xpconnect/tests/unit/test_attributes.js#L76\n\nThis is the relevant IDL:\nhttps://github.com/bholley/mozilla-central/blob/xpc_test/js/src/xpconnect/tests/idl/xpctest_attributes.idl#L48\n\nThis is the native setter we want to fire:\nhttp://mxr.mozilla.org/mozilla-central/source/js/src/xpconnect/src/xpcwrappednativejsops.cpp#497\n\nThis is the definition of the above:\nhttp://mxr.mozilla.org/mozilla-central/source/js/src/jsobj.cpp#7023", "time": "2011-09-19T23:39:30Z", "tags": [], "is_private": false, "creator": "bholley@mozilla.com", "id": 5724445, "attachment_id": null, "raw_text": "The test coverage for this is up for review over at bug 684327.\n\nThis is where we'd like it to throw when we assign properties:\nhttps://github.com/bholley/mozilla-central/blob/xpc_test/js/src/xpconnect/tests/unit/test_attributes.js#L76\n\nThis is the relevant IDL:\nhttps://github.com/bholley/mozilla-central/blob/xpc_test/js/src/xpconnect/tests/idl/xpctest_attributes.idl#L48\n\nThis is the native setter we want to fire:\nhttp://mxr.mozilla.org/mozilla-central/source/js/src/xpconnect/src/xpcwrappednativejsops.cpp#497\n\nThis is the definition of the above:\nhttp://mxr.mozilla.org/mozilla-central/source/js/src/jsobj.cpp#7023"}, {"count": 3, "is_private": false, "creator": "jwalden@mit.edu", "text": "I believe the relevant language in WebIDL for how to interpret |readonly attribute foo| is this:\n\nhttp://dev.w3.org/2006/webapi/WebIDL/#es-attributes\n\nAccording to this, the property will be represented by a property descriptor of the form { [[Get]]: G, [[Set]]: S, [[Enumerable]]: true, [[Configurable]]: configurable }.  G will be a function object performing get-functionality.  And regarding S, \"The attribute setter is undefined if the attribute is declared readonly and has neither a [PutForwards] nor a [Replaceable] extended attribute declared on it.\"  So I think we want to get rid of the XPConnect-specific hackery here and just use JS_PropertyStub in DefinePropertyIfFound, and kill js_GetterOnlyPropertyStub.  Or am I missing something here?", "tags": [], "time": "2011-09-20T01:52:13Z", "bug_id": 686979, "creation_time": "2011-09-20T01:52:13Z", "author": "jwalden@mit.edu", "raw_text": "I believe the relevant language in WebIDL for how to interpret |readonly attribute foo| is this:\n\nhttp://dev.w3.org/2006/webapi/WebIDL/#es-attributes\n\nAccording to this, the property will be represented by a property descriptor of the form { [[Get]]: G, [[Set]]: S, [[Enumerable]]: true, [[Configurable]]: configurable }.  G will be a function object performing get-functionality.  And regarding S, \"The attribute setter is undefined if the attribute is declared readonly and has neither a [PutForwards] nor a [Replaceable] extended attribute declared on it.\"  So I think we want to get rid of the XPConnect-specific hackery here and just use JS_PropertyStub in DefinePropertyIfFound, and kill js_GetterOnlyPropertyStub.  Or am I missing something here?", "attachment_id": null, "id": 5724671}, {"attachment_id": 560470, "raw_text": "Marking arr- partly because WebIDL wants different behavior, partly because it's TLAPD.", "id": 5724831, "is_private": false, "creator": "jwalden@mit.edu", "count": 4, "creation_time": "2011-09-20T04:14:03Z", "author": "jwalden@mit.edu", "text": "Comment on attachment 560470\npatch v1\n\nMarking arr- partly because WebIDL wants different behavior, partly because it's TLAPD.", "bug_id": 686979, "tags": [], "time": "2011-09-20T04:14:03Z"}, {"raw_text": "(In reply to Jeff Walden (remove +bmo to email) from comment #3)\n> Or am I missing something here?\n\nYou're correct. In fact, WebIDL is more specific about it below the section you quoted:\n\n> Note that attempting to assign to a property corresponding to a read only attribute\n> results in different behavior depending on whether the script doing so is in strict\n> mode. When in strict mode, such an assignment will result in a TypeError being\n> thrown. When not in strict mode, the assignment attempt will be ignored.\n\nI've filed bug 688017 to remove js_GetterOnlyPropertyStub. Patch for that coming right up.\n\nHowever, I believe that the patch in this bug is still correct. We may or may not want to use native property stubs in different places. But when we do, we want them to actually execute in consistent fashion. The current logic here for executing a native setter depends on whether a JS getter is defined, which seems wrong. Re-requesting review.", "attachment_id": null, "id": 5726858, "count": 5, "is_private": false, "creator": "bholley@mozilla.com", "text": "(In reply to Jeff Walden (remove +bmo to email) from comment #3)\n> Or am I missing something here?\n\nYou're correct. In fact, WebIDL is more specific about it below the section you quoted:\n\n> Note that attempting to assign to a property corresponding to a read only attribute\n> results in different behavior depending on whether the script doing so is in strict\n> mode. When in strict mode, such an assignment will result in a TypeError being\n> thrown. When not in strict mode, the assignment attempt will be ignored.\n\nI've filed bug 688017 to remove js_GetterOnlyPropertyStub. Patch for that coming right up.\n\nHowever, I believe that the patch in this bug is still correct. We may or may not want to use native property stubs in different places. But when we do, we want them to actually execute in consistent fashion. The current logic here for executing a native setter depends on whether a JS getter is defined, which seems wrong. Re-requesting review.", "tags": [], "bug_id": 686979, "time": "2011-09-20T21:48:22Z", "creation_time": "2011-09-20T21:48:22Z", "author": "bholley@mozilla.com"}, {"creation_time": "2011-09-27T02:08:58Z", "author": "jwalden@mit.edu", "text": "Comment on attachment 560470\npatch v1\n\nReview of attachment 560470:\n-----------------------------------------------------------------\n\nI am somewhat persuaded by what you say.  At the same time, I'm not completely certain this isn't intentional.  I half-remember a case recently that seems like it was similar to this (reported by a JSAPI user in IRC or a newsgroup?  ash maybe?  memory very hazy), where the semantics that seemed initially to make sense weren't the ones we wanted.  Hopefully Brendan will remember what I'm thinking of.  If not, I'm sure he can say whether the current semantics were intended better than I can.\n\n::: js/src/jsscopeinlines.h\n@@ +302,5 @@\n>          js::Value fval = setterValue();\n>          return js::InvokeGetterOrSetter(cx, obj, fval, 1, vp, vp);\n>      }\n>  \n> +    if (attrs & JSPROP_GETTER && setterOp() == NULL)\n\nhasDefaultSetter() rather than null-checking here, please.", "tags": [], "bug_id": 686979, "time": "2011-09-27T02:08:58Z", "is_private": false, "creator": "jwalden@mit.edu", "count": 6, "id": 5738985, "attachment_id": 560470, "raw_text": "Review of attachment 560470:\n-----------------------------------------------------------------\n\nI am somewhat persuaded by what you say.  At the same time, I'm not completely certain this isn't intentional.  I half-remember a case recently that seems like it was similar to this (reported by a JSAPI user in IRC or a newsgroup?  ash maybe?  memory very hazy), where the semantics that seemed initially to make sense weren't the ones we wanted.  Hopefully Brendan will remember what I'm thinking of.  If not, I'm sure he can say whether the current semantics were intended better than I can.\n\n::: js/src/jsscopeinlines.h\n@@ +302,5 @@\n>          js::Value fval = setterValue();\n>          return js::InvokeGetterOrSetter(cx, obj, fval, 1, vp, vp);\n>      }\n>  \n> +    if (attrs & JSPROP_GETTER && setterOp() == NULL)\n\nhasDefaultSetter() rather than null-checking here, please."}, {"id": 5797669, "raw_text": "So, the consensus on IRC seems to be that this patch is correct. However, if it lands, we'll start throwing in non-strict mode due to the use of js_GetterOnlyPropertyStub.\n\nWe want to remove that over in bug 688017, but it's not totally clear how it should look, because there's a pending rewrite to make everything work as JS getters/setters. So I'm going to stop driving these issues for now.", "attachment_id": null, "time": "2011-10-21T20:05:31Z", "tags": [], "text": "So, the consensus on IRC seems to be that this patch is correct. However, if it lands, we'll start throwing in non-strict mode due to the use of js_GetterOnlyPropertyStub.\n\nWe want to remove that over in bug 688017, but it's not totally clear how it should look, because there's a pending rewrite to make everything work as JS getters/setters. So I'm going to stop driving these issues for now.", "author": "bholley@mozilla.com", "creation_time": "2011-10-21T20:05:31Z", "creator": "bholley@mozilla.com", "is_private": false, "bug_id": 686979, "count": 7}, {"creator": "bholley@mozilla.com", "is_private": false, "tags": [], "time": "2011-10-21T20:06:08Z", "text": "Comment on attachment 560470\npatch v1\n\nBrendan didn't have an opinion, and Waldo said his r+ carried.", "author": "bholley@mozilla.com", "creation_time": "2011-10-21T20:06:08Z", "raw_text": "Brendan didn't have an opinion, and Waldo said his r+ carried.", "attachment_id": 560470, "id": 5797673, "count": 8, "bug_id": 686979}, {"count": 9, "creator": "evilpies@gmail.com", "is_private": false, "bug_id": 686979, "time": "2011-11-21T18:57:51Z", "tags": [], "text": "Comment on attachment 560470\npatch v1\n\nReview of attachment 560470:\n-----------------------------------------------------------------\n\n::: js/src/jsscopeinlines.h\n@@ +302,5 @@\n>          js::Value fval = setterValue();\n>          return js::InvokeGetterOrSetter(cx, obj, fval, 1, vp, vp);\n>      }\n>  \n> +    if (attrs & JSPROP_GETTER && setterOp() == NULL)\n\nI would usually write \n  if ((attrs & JSPROP_GETTER) && hasDefaultSetter())", "author": "evilpies@gmail.com", "creation_time": "2011-11-21T18:57:51Z", "raw_text": "Review of attachment 560470:\n-----------------------------------------------------------------\n\n::: js/src/jsscopeinlines.h\n@@ +302,5 @@\n>          js::Value fval = setterValue();\n>          return js::InvokeGetterOrSetter(cx, obj, fval, 1, vp, vp);\n>      }\n>  \n> +    if (attrs & JSPROP_GETTER && setterOp() == NULL)\n\nI would usually write \n  if ((attrs & JSPROP_GETTER) && hasDefaultSetter())", "attachment_id": 560470, "id": 5863033}]}}}