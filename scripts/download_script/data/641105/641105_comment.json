{"bugs": {"641105": {"comments": [{"attachment_id": 518842, "creator": "brandon@hackmill.com", "author": "brandon@hackmill.com", "text": "Created attachment 518842\ntestcase (crashes 1.9.2)\n\nThis was reported to security@m.o today by Dimitris Vlachos.  Keeping this security sensitive for now because the stack looks pretty strange:\nbp-287b313e-6fdc-452a-b3d9-688062110311 Firefox 3.6\n\nI couldn't get trunk to crash.\n\nI did get a bunch of these before the crash:\n\nfirefox-bin(1360,0xfcf81000) malloc: *** mmap(size=16777216) failed (error code=12)\n*** error: can't allocate region\n*** set a breakpoint in malloc_error_break to debug\n\n-----\n\nRe: The easiest way to crash firefox...\n\nThis is how (JS script):\n================\n    while(1)\n        window.location.reload();\n================\n\nWhich keeps FF busy without beeing able to even stop the script.Also the browser keeps allocating ram until the system 'explode'.\n\nJust try the attached demo and see it running....\n\n-----", "count": 0, "is_private": false, "raw_text": "This was reported to security@m.o today by Dimitris Vlachos.  Keeping this security sensitive for now because the stack looks pretty strange:\nbp-287b313e-6fdc-452a-b3d9-688062110311 Firefox 3.6\n\nI couldn't get trunk to crash.\n\nI did get a bunch of these before the crash:\n\nfirefox-bin(1360,0xfcf81000) malloc: *** mmap(size=16777216) failed (error code=12)\n*** error: can't allocate region\n*** set a breakpoint in malloc_error_break to debug\n\n-----\n\nRe: The easiest way to crash firefox...\n\nThis is how (JS script):\n================\n    while(1)\n        window.location.reload();\n================\n\nWhich keeps FF busy without beeing able to even stop the script.Also the browser keeps allocating ram until the system 'explode'.\n\nJust try the attached demo and see it running....\n\n-----", "bug_id": 641105, "creation_time": "2011-03-11T22:47:25Z", "tags": [], "time": "2011-03-11T22:47:25Z", "id": 5340246}, {"id": 5351719, "time": "2011-03-17T20:19:41Z", "tags": [], "raw_text": "mats: any ideas?", "bug_id": 641105, "creation_time": "2011-03-17T20:19:41Z", "is_private": false, "count": 2, "text": "mats: any ideas?", "author": "dveditz@mozilla.com", "creator": "dveditz@mozilla.com", "attachment_id": null}, {"id": 5356229, "author": "MatsPalmgren_bugz@use.startmail.com", "time": "2011-03-20T19:26:36Z", "text": "Firefox 1.9.2 (32 and 64-bit) debug Linux\nFirefox mozilla-central (32 and 64-bit) debug Linux\nFirefox 1.9.2 32-bit debug OSX 10.5.8\nFirefox mozilla-central 32-bit debug OSX 10.5.8\nFirefox 1.9.2 32-bit debug Windows XP\n\nAll the above builds results in intentional OOM abort for me.\nI do get a \"slow script\" dialog on all platforms with a clean profile\nbut it seems ineffective (the location.reload continues in the\nbackground replacing the page with the script that is to be stopped?)\nI don't think the OOM is due to a leak, just that GC/CC is starved\nfrom running.\n\nFirefox mozilla-central 32-bit debug Windows XP\n\nUnable to crash that one - after a while the allocated memory reported\nby Task Manager dropped down significantly so I assume GC/CC eventually\nkicked in somehow and reclaimed the memory.", "count": 3, "is_private": false, "attachment_id": null, "creator": "MatsPalmgren_bugz@use.startmail.com", "tags": [], "raw_text": "Firefox 1.9.2 (32 and 64-bit) debug Linux\nFirefox mozilla-central (32 and 64-bit) debug Linux\nFirefox 1.9.2 32-bit debug OSX 10.5.8\nFirefox mozilla-central 32-bit debug OSX 10.5.8\nFirefox 1.9.2 32-bit debug Windows XP\n\nAll the above builds results in intentional OOM abort for me.\nI do get a \"slow script\" dialog on all platforms with a clean profile\nbut it seems ineffective (the location.reload continues in the\nbackground replacing the page with the script that is to be stopped?)\nI don't think the OOM is due to a leak, just that GC/CC is starved\nfrom running.\n\nFirefox mozilla-central 32-bit debug Windows XP\n\nUnable to crash that one - after a while the allocated memory reported\nby Task Manager dropped down significantly so I assume GC/CC eventually\nkicked in somehow and reclaimed the memory.", "creation_time": "2011-03-20T19:26:36Z", "bug_id": 641105}, {"tags": [], "creator": "MatsPalmgren_bugz@use.startmail.com", "creation_time": "2011-03-20T20:56:10Z", "bug_id": 641105, "raw_text": "(In reply to comment #0)\nThe stack in bp-287b313e-6fdc-452a-b3d9-688062110311 looks normal to me.\nWhy do you find it strange?\n\n> malloc: *** mmap(size=16777216) failed\n\nI did catch this in a debugger, in malloc_error_break.\nIt's an allocation of a 22 byte string, everything in our code looks\nfine.  I think the reason for the huge mmap size is that system malloc\nallocates chunks of memory for the process to avoid system calls,\nmemory fragmentation etc.  16777216 == 0x1000000 which seems logical\nwith such allocation schemes.  AFAICT, the value is not a result of an\ninteger overflow or otherwise bogus value.", "is_private": false, "attachment_id": null, "count": 4, "text": "(In reply to comment #0)\nThe stack in bp-287b313e-6fdc-452a-b3d9-688062110311 looks normal to me.\nWhy do you find it strange?\n\n> malloc: *** mmap(size=16777216) failed\n\nI did catch this in a debugger, in malloc_error_break.\nIt's an allocation of a 22 byte string, everything in our code looks\nfine.  I think the reason for the huge mmap size is that system malloc\nallocates chunks of memory for the process to avoid system calls,\nmemory fragmentation etc.  16777216 == 0x1000000 which seems logical\nwith such allocation schemes.  AFAICT, the value is not a result of an\ninteger overflow or otherwise bogus value.", "id": 5356302, "time": "2011-03-20T20:56:10Z", "author": "MatsPalmgren_bugz@use.startmail.com"}, {"creator": "MatsPalmgren_bugz@use.startmail.com", "attachment_id": null, "text": "(Josh asked me to comment if we can make this bug public.)\n\nA safe out-of-memory abort is neither a bug nor security sensitive, but comment 3\nmentions that the \"slow script\" dialog doesn't help stopping the script so that makes\nit still sg:dos.  I think we should keep this bug closed until that part is fixed\n(maybe it already is, I haven't tested).", "count": 5, "author": "MatsPalmgren_bugz@use.startmail.com", "tags": [], "bug_id": 641105, "creation_time": "2012-03-07T16:18:50Z", "raw_text": "(Josh asked me to comment if we can make this bug public.)\n\nA safe out-of-memory abort is neither a bug nor security sensitive, but comment 3\nmentions that the \"slow script\" dialog doesn't help stopping the script so that makes\nit still sg:dos.  I think we should keep this bug closed until that part is fixed\n(maybe it already is, I haven't tested).", "is_private": false, "id": 6121368, "time": "2012-03-07T16:18:50Z"}, {"author": "MatsPalmgren_bugz@use.startmail.com", "text": "Not sure which component owns the \"slow script\" feature.", "count": 6, "attachment_id": null, "creator": "MatsPalmgren_bugz@use.startmail.com", "id": 6121381, "time": "2012-03-07T16:21:50Z", "is_private": false, "tags": [], "raw_text": "Not sure which component owns the \"slow script\" feature.", "creation_time": "2012-03-07T16:21:50Z", "bug_id": 641105}, {"creator": "vseerror@lehigh.edu", "attachment_id": null, "text": "(In reply to Mats Palmgren [:mats] (on vacation) from comment #6)\n> Not sure which component owns the \"slow script\" feature.\n\nDOM iirc", "count": 7, "author": "vseerror@lehigh.edu", "tags": [], "raw_text": "(In reply to Mats Palmgren [:mats] (on vacation) from comment #6)\n> Not sure which component owns the \"slow script\" feature.\n\nDOM iirc", "creation_time": "2012-07-01T16:07:44Z", "bug_id": 641105, "is_private": false, "id": 6436984, "time": "2012-07-01T16:07:44Z"}, {"id": 11736728, "time": "2016-09-26T09:19:24Z", "tags": [], "creation_time": "2016-09-26T09:19:24Z", "bug_id": 641105, "raw_text": "", "is_private": false, "text": "*** Bug 1305252 has been marked as a duplicate of this bug. ***", "count": 8, "author": "gijskruitbosch+bugs@gmail.com", "creator": "gijskruitbosch+bugs@gmail.com", "attachment_id": null}, {"is_private": false, "raw_text": "I think the problem here is, that the above script is an exponential call?\n\nToday I programmed a loop like this (which is, in fact very similar to the example):\n```\n    while (true) {\n        var foo = [];\n        for (var bar = 0; bar < 100; bar++) {\n            // Allocate some memory --> Makes the effect faster\n            foo[bar] = Math.random();\n        }\n        // Use something from the calculated (will it be optimized away otherwise?)\n        foo = (foo[Math.floor(Math.random() * Math.floor(99))]);\n\n        // Now do a reload\n        window.location.reload();\n\n        // Program is executed after the reload --> exponential\n        alert(\"Hello World!\");\n    }\n```\nIn my opinion, the execution of the programm should stop after the reload(). But it does not (the \"alert(..)\" will trigger), so for me is not clear when which of the scripts is running (the reloading should IMHO stop the old script completely and create a new instance, so the alert will never trigger).\n\nI cannot reproduce it for now, but not only the \"Stop\" button was unusable, also closing the tab didn't stop the allocation of new memory. Only killing firefox does help (but if you wait long enough, your OS will do that for you).", "bug_id": 641105, "creation_time": "2019-11-26T21:48:21Z", "tags": [], "time": "2019-11-26T21:48:21Z", "id": 14512833, "attachment_id": null, "creator": "bugz@retsifp.de", "author": "bugz@retsifp.de", "count": 9, "text": "I think the problem here is, that the above script is an exponential call?\n\nToday I programmed a loop like this (which is, in fact very similar to the example):\n```\n    while (true) {\n        var foo = [];\n        for (var bar = 0; bar < 100; bar++) {\n            // Allocate some memory --> Makes the effect faster\n            foo[bar] = Math.random();\n        }\n        // Use something from the calculated (will it be optimized away otherwise?)\n        foo = (foo[Math.floor(Math.random() * Math.floor(99))]);\n\n        // Now do a reload\n        window.location.reload();\n\n        // Program is executed after the reload --> exponential\n        alert(\"Hello World!\");\n    }\n```\nIn my opinion, the execution of the programm should stop after the reload(). But it does not (the \"alert(..)\" will trigger), so for me is not clear when which of the scripts is running (the reloading should IMHO stop the old script completely and create a new instance, so the alert will never trigger).\n\nI cannot reproduce it for now, but not only the \"Stop\" button was unusable, also closing the tab didn't stop the allocation of new memory. Only killing firefox does help (but if you wait long enough, your OS will do that for you)."}]}}, "comments": {}}