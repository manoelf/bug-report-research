{"comments": {}, "bugs": {"694839": {"comments": [{"count": 0, "id": 5785159, "is_private": false, "creation_time": "2011-10-16T13:00:52Z", "time": "2011-10-16T13:00:52Z", "creator": "linux.user.since.2002@gmail.com", "author": "linux.user.since.2002@gmail.com", "attachment_id": null, "raw_text": "IMG.complete must return false for images in the Broken state -- eg corrupted or truncated -- however, it returns true instead.\n\n\nHTML5 specifies [1] that IMG.complete must return true if any of the following are true:\n\n* The src attribute is omitted.\n* The src attribute's value is the empty string.\n* The final task that is queued by the networking task source once the resource has been fetched has been queued, but has not yet been run, and the img element is not in the broken state.\n* The img element is completely available.\n\nOtherwise, the attribute must return false.\n\n\nIMGs with specified src attributes, other than the empty string, that result in \"Image corrupt or truncated\" console errors, should be regarded as being in the Broken state.  As such, IMG.complete should then return false.\n\nHOWEVER, while Firefox logs \"Image corrupt or truncated\" errors, indicating that the image is regarded in the Broken state, Firefox (incorrectly) continues to return IMG.complete as true.\n\n\nVerified behavior is consistently incorrect.\nConverted a sample image to multiple filetypes:\nA AAI AI ART AVS B BGR BGRA BMP BMP2 BMP3 BRF C CAL CALS CIN CIP CMYK CMYKA CUR DCX DPX  EPDF EPI EPS EPS2 EPS3 EPSF EPSI EPT EPT2 EPT3 EXR FAX FITS FTS G G3 GIF GIF87 GRAY GROUP4 HDR HISTOGRAM HRZ HTM HTML ICB ICO ICON IPL ISOBRL J2C JNG JP2 JPC JPEG JPG K M MAT MATTE MIFF MNG MONO MPC MSVG MTV NULL O OTB PAL PALM PAM PBM PCD PCDS PCL PCT PCX PDB PDF PDFA PFM PGM PICON PICT PJPEG PNG PNG24 PNG32 PNG8 PNM PPM PREVIEW PS PS2 PS3 PSB PSD PTIF R RAS RGB RGBA RGBO SGI SHTML SUN SVG SVGZ TEXT TGA TIFF TXT UBRL UIL UYVY VDA VICAR VID VIFF VST WBMP X XBM XPM XV XWD Y YUV\n\nMade three copies of each for an original, a corrupted, and a truncated file.\nCorrupted files replacing content in the middle of the file with a random string.\nTruncated files by deleting from random locations in the files.\n\nCreated a html page with every image from all 3 sets and verified IMG.complete versus the HMTL5 specification, as above.\n\nDespite images being very evidently visually corrupted, and despite images being truncated to the point where they could not be decoded, EVERY SINGLE IMG RETURNED IMG.complete as TRUE!\n\n\nNaturally, the expectation was that IMG.complete would be:\n* true for the original set, IFF the format was supported by firefox\n* FALSE for the original set, IFF the format was not supported by firefox\n* true for the corrupted set, IFF the corruption happened to result in a valid image\n* FALSE for the corrupted set, IFF the corruption resulted in an invalid image\n* true for the truncated set, IFF the random deletions happened to result in a valid image\n* FALSE for the truncated set, IFF the deletions resulted in an invalid image\n\n\n[1] http://www.whatwg.org/specs/web-apps/current-work/multipage/embedded-content-1.html#dom-img-complete", "tags": [], "bug_id": 694839, "text": "IMG.complete must return false for images in the Broken state -- eg corrupted or truncated -- however, it returns true instead.\n\n\nHTML5 specifies [1] that IMG.complete must return true if any of the following are true:\n\n* The src attribute is omitted.\n* The src attribute's value is the empty string.\n* The final task that is queued by the networking task source once the resource has been fetched has been queued, but has not yet been run, and the img element is not in the broken state.\n* The img element is completely available.\n\nOtherwise, the attribute must return false.\n\n\nIMGs with specified src attributes, other than the empty string, that result in \"Image corrupt or truncated\" console errors, should be regarded as being in the Broken state.  As such, IMG.complete should then return false.\n\nHOWEVER, while Firefox logs \"Image corrupt or truncated\" errors, indicating that the image is regarded in the Broken state, Firefox (incorrectly) continues to return IMG.complete as true.\n\n\nVerified behavior is consistently incorrect.\nConverted a sample image to multiple filetypes:\nA AAI AI ART AVS B BGR BGRA BMP BMP2 BMP3 BRF C CAL CALS CIN CIP CMYK CMYKA CUR DCX DPX  EPDF EPI EPS EPS2 EPS3 EPSF EPSI EPT EPT2 EPT3 EXR FAX FITS FTS G G3 GIF GIF87 GRAY GROUP4 HDR HISTOGRAM HRZ HTM HTML ICB ICO ICON IPL ISOBRL J2C JNG JP2 JPC JPEG JPG K M MAT MATTE MIFF MNG MONO MPC MSVG MTV NULL O OTB PAL PALM PAM PBM PCD PCDS PCL PCT PCX PDB PDF PDFA PFM PGM PICON PICT PJPEG PNG PNG24 PNG32 PNG8 PNM PPM PREVIEW PS PS2 PS3 PSB PSD PTIF R RAS RGB RGBA RGBO SGI SHTML SUN SVG SVGZ TEXT TGA TIFF TXT UBRL UIL UYVY VDA VICAR VID VIFF VST WBMP X XBM XPM XV XWD Y YUV\n\nMade three copies of each for an original, a corrupted, and a truncated file.\nCorrupted files replacing content in the middle of the file with a random string.\nTruncated files by deleting from random locations in the files.\n\nCreated a html page with every image from all 3 sets and verified IMG.complete versus the HMTL5 specification, as above.\n\nDespite images being very evidently visually corrupted, and despite images being truncated to the point where they could not be decoded, EVERY SINGLE IMG RETURNED IMG.complete as TRUE!\n\n\nNaturally, the expectation was that IMG.complete would be:\n* true for the original set, IFF the format was supported by firefox\n* FALSE for the original set, IFF the format was not supported by firefox\n* true for the corrupted set, IFF the corruption happened to result in a valid image\n* FALSE for the corrupted set, IFF the corruption resulted in an invalid image\n* true for the truncated set, IFF the random deletions happened to result in a valid image\n* FALSE for the truncated set, IFF the deletions resulted in an invalid image\n\n\n[1] http://www.whatwg.org/specs/web-apps/current-work/multipage/embedded-content-1.html#dom-img-complete"}, {"text": "I think we have an existing bug on this.\n\nI'm also not sure that the DOM has the information to do this right given current imagelib APIs.  Again, the existing bug on this discusses that.", "bug_id": 694839, "tags": [], "raw_text": "I think we have an existing bug on this.\n\nI'm also not sure that the DOM has the information to do this right given current imagelib APIs.  Again, the existing bug on this discusses that.", "attachment_id": null, "author": "bzbarsky@mit.edu", "time": "2011-10-16T14:42:45Z", "creation_time": "2011-10-16T14:42:45Z", "creator": "bzbarsky@mit.edu", "id": 5785196, "count": 1, "is_private": false}, {"text": "(In reply to Boris Zbarsky (:bz) from comment #1)\n> I think we have an existing bug on this.\n\nIn the absence of a bug number, I'll respond here.\n\n> I'm also not sure that the DOM has the information to do this right given\n> current imagelib APIs.\n\n\n:-moz-broken matches IMGs showing the broken image placeholder, so that can be used as an interim means of 'format not supported' IFF network transfer was successful and the actual file is neither corrupt nor truncated.  Significantly corrupted IMGs in select formats (see below) will fallback to the broken image placeholder, and thereby match :-moz-broken.  Note that this does not work if the file is truncated.\n\n\n:-moz-loading matches SVG IMGs that are IMG.complete = true, but are corrupted or truncated, and as such show a loading image placeholder, so that can be used as an interim means of IMG.complete = false for SVG.\n\n\nHowever, partial (or attempted?) decoding does not show a broken image placeholder.  Every file type supported by firefox (as evidenced from the \"control\" original unaltered image) if truncated, does NOT show the broken image placeholder (although SVG does curiously show a loading image placeholder).\n\n\nMore detailed findings as follows:\n\n// CONTROL Group\nLoading Placeholder: SVG\nAs Decoded: BMP, BMP2, BMP3, CUR, GIF, GIF87, GROUP4, HISTOGRAM, ICO, ICON, JPEG, JPG, NULL, PCT, PJPEG, PNG, PNG24, PNG32, PNG8, PREVIEW, VID, X\nBroken Placeholder & Corrupt/Truncated Error: ICB, TGA, VDA, VST\nBroken Placeholder: (everything else)\n\n// CORRUPTED Group\nLoading Placeholder: SVG\nAs Decoded: CUR, ICO, ICON\nBroken Placeholder & Corrupt/Truncated Error: BMP, BMP2, BMP3, GIF, GIF87, GROUP4, HISTOGRAM, ICB, JPEG, JPG, NULL, PCT, PJPEG, PNG, PNG24, PNG32, PNG8, PREVIEW, TGA, VDA, VID, VST, X\nBroken Placeholder: (everything else)\n\n// TRUNCATED Group\nLoading Placeholder: SVG\nAs-Decoded: GROUP4, HISTOGRAM, JPEG, JPG, NULL, PCT, PJPEG, PNG, PNG24, PNG32, PNG8, PREVIEW, VID, X\nBroken Placeholder & Corrupt/Truncated Error: ICB, TGA, VDA, VST\nBroken Placeholder: (everything else)\n\n\nInterestingly, for the control files in the formats reported by Firefox as corrupted/truncated, ImageMagick display did not report errors for either the control or corrupted versions (although the corruption was visually evident).  It did confirm errors with the truncated versions of these files however.\n\nAlso note that the only attribute set on the IMG tags in this test was SRC.  Each file was saved with the extension matching the type as listed above.  Explicitly setting TYPE attribute may change some results...\n\n> Again, the existing bug on this discusses that.\n\nSounds like an interesting discussion.  Hopefully the bug number can be provided -- particularly as this bug is currently flagged as both DUPEME and Blocks.  Tried searching for such a bug prior to filing this one, but to no avail.", "bug_id": 694839, "tags": [], "attachment_id": null, "raw_text": "(In reply to Boris Zbarsky (:bz) from comment #1)\n> I think we have an existing bug on this.\n\nIn the absence of a bug number, I'll respond here.\n\n> I'm also not sure that the DOM has the information to do this right given\n> current imagelib APIs.\n\n\n:-moz-broken matches IMGs showing the broken image placeholder, so that can be used as an interim means of 'format not supported' IFF network transfer was successful and the actual file is neither corrupt nor truncated.  Significantly corrupted IMGs in select formats (see below) will fallback to the broken image placeholder, and thereby match :-moz-broken.  Note that this does not work if the file is truncated.\n\n\n:-moz-loading matches SVG IMGs that are IMG.complete = true, but are corrupted or truncated, and as such show a loading image placeholder, so that can be used as an interim means of IMG.complete = false for SVG.\n\n\nHowever, partial (or attempted?) decoding does not show a broken image placeholder.  Every file type supported by firefox (as evidenced from the \"control\" original unaltered image) if truncated, does NOT show the broken image placeholder (although SVG does curiously show a loading image placeholder).\n\n\nMore detailed findings as follows:\n\n// CONTROL Group\nLoading Placeholder: SVG\nAs Decoded: BMP, BMP2, BMP3, CUR, GIF, GIF87, GROUP4, HISTOGRAM, ICO, ICON, JPEG, JPG, NULL, PCT, PJPEG, PNG, PNG24, PNG32, PNG8, PREVIEW, VID, X\nBroken Placeholder & Corrupt/Truncated Error: ICB, TGA, VDA, VST\nBroken Placeholder: (everything else)\n\n// CORRUPTED Group\nLoading Placeholder: SVG\nAs Decoded: CUR, ICO, ICON\nBroken Placeholder & Corrupt/Truncated Error: BMP, BMP2, BMP3, GIF, GIF87, GROUP4, HISTOGRAM, ICB, JPEG, JPG, NULL, PCT, PJPEG, PNG, PNG24, PNG32, PNG8, PREVIEW, TGA, VDA, VID, VST, X\nBroken Placeholder: (everything else)\n\n// TRUNCATED Group\nLoading Placeholder: SVG\nAs-Decoded: GROUP4, HISTOGRAM, JPEG, JPG, NULL, PCT, PJPEG, PNG, PNG24, PNG32, PNG8, PREVIEW, VID, X\nBroken Placeholder & Corrupt/Truncated Error: ICB, TGA, VDA, VST\nBroken Placeholder: (everything else)\n\n\nInterestingly, for the control files in the formats reported by Firefox as corrupted/truncated, ImageMagick display did not report errors for either the control or corrupted versions (although the corruption was visually evident).  It did confirm errors with the truncated versions of these files however.\n\nAlso note that the only attribute set on the IMG tags in this test was SRC.  Each file was saved with the extension matching the type as listed above.  Explicitly setting TYPE attribute may change some results...\n\n> Again, the existing bug on this discusses that.\n\nSounds like an interesting discussion.  Hopefully the bug number can be provided -- particularly as this bug is currently flagged as both DUPEME and Blocks.  Tried searching for such a bug prior to filing this one, but to no avail.", "creator": "linux.user.since.2002@gmail.com", "time": "2011-10-17T04:15:03Z", "creation_time": "2011-10-17T04:15:03Z", "author": "linux.user.since.2002@gmail.com", "is_private": false, "count": 2, "id": 5785604}, {"raw_text": "Boris, did you perhaps mean bug 513541?", "attachment_id": null, "text": "Boris, did you perhaps mean bug 513541?", "bug_id": 694839, "tags": [], "id": 5820617, "count": 3, "is_private": false, "author": "Ms2ger@gmail.com", "creation_time": "2011-11-02T14:36:57Z", "time": "2011-11-02T14:36:57Z", "creator": "Ms2ger@gmail.com"}, {"raw_text": "Bz, see comment 3, please", "attachment_id": null, "bug_id": 694839, "text": "Bz, see comment 3, please", "tags": [], "count": 4, "id": 5820622, "is_private": false, "author": "Ms2ger@gmail.com", "creation_time": "2011-11-02T14:37:31Z", "time": "2011-11-02T14:37:31Z", "creator": "Ms2ger@gmail.com"}, {"tags": [], "text": "I actually meant the bug on setting complete=false for images where imagelib stops decoding partway through.... But this bug as originally filed does seem similar to bug 513541.", "bug_id": 694839, "author": "bzbarsky@mit.edu", "creation_time": "2011-11-02T17:11:51Z", "time": "2011-11-02T17:11:51Z", "creator": "bzbarsky@mit.edu", "raw_text": "I actually meant the bug on setting complete=false for images where imagelib stops decoding partway through.... But this bug as originally filed does seem similar to bug 513541.", "id": 5821154, "count": 5, "attachment_id": null, "is_private": false}, {"time": "2018-06-29T04:40:08Z", "creation_time": "2018-06-29T04:40:08Z", "creator": "bug-husbandry-bot@mozilla.bugs", "author": "bug-husbandry-bot@mozilla.bugs", "id": 13435311, "count": 6, "is_private": false, "bug_id": 694839, "text": "https://bugzilla.mozilla.org/show_bug.cgi?id=1472046\n\nMove all DOM bugs that haven't been updated in more than 3 years and has no one currently assigned to P5.\n\nIf you have questions, please contact :mdaly.", "tags": [], "attachment_id": null, "raw_text": "https://bugzilla.mozilla.org/show_bug.cgi?id=1472046\n\nMove all DOM bugs that haven't been updated in more than 3 years and has no one currently assigned to P5.\n\nIf you have questions, please contact :mdaly."}]}}}