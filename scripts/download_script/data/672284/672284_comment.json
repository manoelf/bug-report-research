{"bugs": {"672284": {"comments": [{"is_private": false, "creator": "gpascutto@mozilla.com", "text": "This is really a question about a potential optimization which we might want to investigate.\n\nRight now, the browser will block all URL loads until the site can be verified against the phishing protection. The current implementation needs to do some small disk probes to check this, which is usually fast. In bug 669410 and related ones, this might be replaced by more compact structures (but which might take longer to construct).\n\nRegardless of the technique being used, blocking the URL loading is potentially a clearly noticeable slowdown. I believe that if there is heavy disk I/O, this could be quite noticeable already with the current implementation.\n\nThe point where this is most critical is the browser start-up. I can see 3 situations there:\n\n1) We're being launched with a supplied URL. It might come from anywhere, so we must check.\n2) The initial page is about:home or about:blank. This should bypass phishing protection entirely (check that!).\n3) The user is restoring a session, potentially with many pages. \n4) The initial page is whatever the user set as his homepage.\n\nThe question is if we can *consider* bypassing the URL classifier for case 3 and/or case 4 to get faster startup performance.", "time": "2011-07-18T18:05:08Z", "tags": [], "creation_time": "2011-07-18T18:05:08Z", "author": "gpascutto@mozilla.com", "raw_text": "This is really a question about a potential optimization which we might want to investigate.\n\nRight now, the browser will block all URL loads until the site can be verified against the phishing protection. The current implementation needs to do some small disk probes to check this, which is usually fast. In bug 669410 and related ones, this might be replaced by more compact structures (but which might take longer to construct).\n\nRegardless of the technique being used, blocking the URL loading is potentially a clearly noticeable slowdown. I believe that if there is heavy disk I/O, this could be quite noticeable already with the current implementation.\n\nThe point where this is most critical is the browser start-up. I can see 3 situations there:\n\n1) We're being launched with a supplied URL. It might come from anywhere, so we must check.\n2) The initial page is about:home or about:blank. This should bypass phishing protection entirely (check that!).\n3) The user is restoring a session, potentially with many pages. \n4) The initial page is whatever the user set as his homepage.\n\nThe question is if we can *consider* bypassing the URL classifier for case 3 and/or case 4 to get faster startup performance.", "attachment_id": null, "id": 5596984, "count": 0, "bug_id": 672284}, {"creator": "mars.martian+bugmail@gmail.com", "is_private": false, "count": 1, "author": "mars.martian+bugmail@gmail.com", "creation_time": "2011-07-18T18:22:58Z", "time": "2011-07-18T18:22:58Z", "tags": [], "bug_id": 672284, "text": "I thought case 2 was covered, as there is some verification of the URL. (We don't check chrome:// URLs, for instance)\n\nAs for case 3: If we recheck a page that was previously open, we will only end up with a different answer if the page has been added to the database after it was last visited (assuming the user did not ignore the warning), since we do not update the database before checking pages from the last session.\nSo bypassing when restoring a session seems reasonable in most cases. We can mitigate the above problem by moving the lookup to the session save and use cached values when restoring a session. This could be pretty bad though, as session saves are somewhat frequent (every 2 minutes at the worst, I believe).\n\nCase 4 is beyond my scope, though it seems like a judgement call based on the likelihood of malware changing a user's homepage should be taken into account. (Technically that could affect case 3 too though :/)", "attachment_id": null, "raw_text": "I thought case 2 was covered, as there is some verification of the URL. (We don't check chrome:// URLs, for instance)\n\nAs for case 3: If we recheck a page that was previously open, we will only end up with a different answer if the page has been added to the database after it was last visited (assuming the user did not ignore the warning), since we do not update the database before checking pages from the last session.\nSo bypassing when restoring a session seems reasonable in most cases. We can mitigate the above problem by moving the lookup to the session save and use cached values when restoring a session. This could be pretty bad though, as session saves are somewhat frequent (every 2 minutes at the worst, I believe).\n\nCase 4 is beyond my scope, though it seems like a judgement call based on the likelihood of malware changing a user's homepage should be taken into account. (Technically that could affect case 3 too though :/)", "id": 5597037}, {"bug_id": 672284, "count": 2, "id": 5598329, "raw_text": "(In reply to comment #1)\n> Case 4 is beyond my scope, though it seems like a judgement call based on\n> the likelihood of malware changing a user's homepage should be taken into\n> account. (Technically that could affect case 3 too though :/)\n\nDo you mean malware already on the user's machine?  That could also just delete the safebrowsing db or turn off the pref if it wanted to...", "attachment_id": null, "text": "(In reply to comment #1)\n> Case 4 is beyond my scope, though it seems like a judgement call based on\n> the likelihood of malware changing a user's homepage should be taken into\n> account. (Technically that could affect case 3 too though :/)\n\nDo you mean malware already on the user's machine?  That could also just delete the safebrowsing db or turn off the pref if it wanted to...", "time": "2011-07-19T02:05:57Z", "tags": [], "creation_time": "2011-07-19T02:05:57Z", "author": "dave.camp@gmail.com", "is_private": false, "creator": "dave.camp@gmail.com"}, {"count": 3, "bug_id": 672284, "attachment_id": null, "raw_text": "(In reply to comment #2)\n> Do you mean malware already on the user's machine?  That could also just\n> delete the safebrowsing db or turn off the pref if it wanted to...\n\nOf course, I meant that the current prevalence of malware changing a user's homepage should be taken into account. I don't know why a malicious adversary wouldn't just turn off the pref either though :P", "id": 5598402, "is_private": false, "creator": "mars.martian+bugmail@gmail.com", "creation_time": "2011-07-19T03:47:13Z", "author": "mars.martian+bugmail@gmail.com", "text": "(In reply to comment #2)\n> Do you mean malware already on the user's machine?  That could also just\n> delete the safebrowsing db or turn off the pref if it wanted to...\n\nOf course, I meant that the current prevalence of malware changing a user's homepage should be taken into account. I don't know why a malicious adversary wouldn't just turn off the pref either though :P", "time": "2011-07-19T03:47:13Z", "tags": []}, {"raw_text": "I agree we could skip Safe Browsing checks for Case 3, but I disagree about Case 4.\n\nIf you set a site as your homepage, it's still possible that it could be compromised in the future and start to serve malware. For a session restore, the window of opportunity is much smaller so the risk is not as high IMHO.", "attachment_id": null, "id": 11300110, "count": 4, "creator": "francois@fmarier.org", "is_private": false, "time": "2016-04-04T22:19:25Z", "tags": [], "bug_id": 672284, "text": "I agree we could skip Safe Browsing checks for Case 3, but I disagree about Case 4.\n\nIf you set a site as your homepage, it's still possible that it could be compromised in the future and start to serve malware. For a session restore, the window of opportunity is much smaller so the risk is not as high IMHO.", "author": "francois@fmarier.org", "creation_time": "2016-04-04T22:19:25Z"}, {"is_private": false, "creator": "automation@bmo.tld", "count": 5, "creation_time": "2018-05-24T11:09:19Z", "author": "automation@bmo.tld", "text": "Per policy at https://wiki.mozilla.org/Bug_Triage/Projects/Bug_Handling/Bug_Husbandry#Inactive_Bugs. If this bug is not an enhancement request or a bug not present in a supported release of Firefox, then it may be reopened.", "tags": [], "bug_id": 672284, "time": "2018-05-24T11:09:19Z", "attachment_id": null, "raw_text": "Per policy at https://wiki.mozilla.org/Bug_Triage/Projects/Bug_Handling/Bug_Husbandry#Inactive_Bugs. If this bug is not an enhancement request or a bug not present in a supported release of Firefox, then it may be reopened.", "id": 13338847}, {"count": 6, "is_private": false, "creator": "gpascutto@mozilla.com", "text": "Unassigning myself, leaving it to Dimi to see how to proceed.", "bug_id": 672284, "tags": [], "time": "2019-06-13T15:18:34Z", "creation_time": "2019-06-13T15:18:34Z", "author": "gpascutto@mozilla.com", "raw_text": "Unassigning myself, leaving it to Dimi to see how to proceed.", "attachment_id": null, "id": 14179075}]}}, "comments": {}}