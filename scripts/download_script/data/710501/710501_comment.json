{"bugs": {"710501": {"comments": [{"author": "n.nethercote@gmail.com", "creation_time": "2011-12-14T02:39:56Z", "time": "2011-12-14T02:39:56Z", "creator": "n.nethercote@gmail.com", "id": 5914450, "count": 0, "is_private": false, "tags": [], "text": "I started an email thread on dev-platform a while back about handling memory pressure events more consistently and reliably:\nhttps://groups.google.com/d/topic/mozilla.dev.platform/RKDv7IozaGc/discussion\t\t \t \t\t\n\nThe most useful messages in the thread were these:\n\nhttps://groups.google.com/d/msg/mozilla.dev.platform/RKDv7IozaGc/jutUdRyl4lQJ\nhttps://groups.google.com/d/msg/mozilla.dev.platform/RKDv7IozaGc/lRuQzDa8tKsJ\nhttps://groups.google.com/d/msg/mozilla.dev.platform/RKDv7IozaGc/eOFV8FhBd90J\n\nthe rest were about low-level technical details.\n\nWhen a memory pressure event is triggered, sometimes it's not that urgent -- it'd be nice to release memory soon.  But sometimes it is urgent, and we can't afford to allocate any memory while freeing other memory.  (For example, running GC and CC requires allocating some memory, possible several MB, and so isn't suitable for the urgent case.)  We should probably distinguish these two cases.", "bug_id": 710501, "raw_text": "I started an email thread on dev-platform a while back about handling memory pressure events more consistently and reliably:\nhttps://groups.google.com/d/topic/mozilla.dev.platform/RKDv7IozaGc/discussion\t\t \t \t\t\n\nThe most useful messages in the thread were these:\n\nhttps://groups.google.com/d/msg/mozilla.dev.platform/RKDv7IozaGc/jutUdRyl4lQJ\nhttps://groups.google.com/d/msg/mozilla.dev.platform/RKDv7IozaGc/lRuQzDa8tKsJ\nhttps://groups.google.com/d/msg/mozilla.dev.platform/RKDv7IozaGc/eOFV8FhBd90J\n\nthe rest were about low-level technical details.\n\nWhen a memory pressure event is triggered, sometimes it's not that urgent -- it'd be nice to release memory soon.  But sometimes it is urgent, and we can't afford to allocate any memory while freeing other memory.  (For example, running GC and CC requires allocating some memory, possible several MB, and so isn't suitable for the urgent case.)  We should probably distinguish these two cases.", "attachment_id": null}, {"raw_text": "I wonder whether, rather than having separate memory-pressure events, we should have one event and then check how much free space we have.", "attachment_id": null, "text": "I wonder whether, rather than having separate memory-pressure events, we should have one event and then check how much free space we have.", "bug_id": 710501, "tags": [], "id": 5914722, "count": 1, "is_private": false, "author": "justin.lebar+bug@gmail.com", "time": "2011-12-14T06:21:41Z", "creation_time": "2011-12-14T06:21:41Z", "creator": "justin.lebar+bug@gmail.com"}, {"is_private": false, "count": 2, "id": 5914724, "author": "justin.lebar+bug@gmail.com", "creator": "justin.lebar+bug@gmail.com", "time": "2011-12-14T06:23:56Z", "creation_time": "2011-12-14T06:23:56Z", "raw_text": "On platforms where we have swap, this is just a virtual memory space check.  On platforms where we don't have swap, this is just an RSS check.", "attachment_id": null, "tags": [], "text": "On platforms where we have swap, this is just a virtual memory space check.  On platforms where we don't have swap, this is just an RSS check.", "bug_id": 710501}, {"author": "justin.lebar+bug@gmail.com", "creation_time": "2011-12-14T06:24:51Z", "time": "2011-12-14T06:24:51Z", "creator": "justin.lebar+bug@gmail.com", "count": 3, "id": 5914727, "is_private": false, "tags": [], "text": "> On platforms where we don't have swap, this is just an RSS check.\n\nOr rather, it's a matter of calling the equivalent of $ free.", "bug_id": 710501, "raw_text": "> On platforms where we don't have swap, this is just an RSS check.\n\nOr rather, it's a matter of calling the equivalent of $ free.", "attachment_id": null}, {"raw_text": "(In reply to Justin Lebar [:jlebar] from comment #2)\n> On platforms where we have swap, this is just a virtual memory space check. \nWell, min([available RAM + swap], [available address space]) to handle systems with either low RAM and swap or simply running 64-bit Firefox, I assume.", "attachment_id": null, "tags": [], "text": "(In reply to Justin Lebar [:jlebar] from comment #2)\n> On platforms where we have swap, this is just a virtual memory space check. \nWell, min([available RAM + swap], [available address space]) to handle systems with either low RAM and swap or simply running 64-bit Firefox, I assume.", "bug_id": 710501, "is_private": false, "count": 4, "id": 5918069, "author": "emanuel.hoogeveen@protonmail.com", "creator": "emanuel.hoogeveen@protonmail.com", "creation_time": "2011-12-15T06:51:13Z", "time": "2011-12-15T06:51:13Z"}, {"raw_text": "You're right, although this is a bit complicated.  Can't Windows dynamically expand the swap file?  There's a limit to how big it can get, certainly...", "attachment_id": null, "text": "You're right, although this is a bit complicated.  Can't Windows dynamically expand the swap file?  There's a limit to how big it can get, certainly...", "bug_id": 710501, "tags": [], "count": 5, "id": 5918675, "is_private": false, "author": "justin.lebar+bug@gmail.com", "time": "2011-12-15T14:32:00Z", "creation_time": "2011-12-15T14:32:00Z", "creator": "justin.lebar+bug@gmail.com"}, {"is_private": false, "count": 6, "id": 5919781, "author": "emanuel.hoogeveen@protonmail.com", "creator": "emanuel.hoogeveen@protonmail.com", "creation_time": "2011-12-15T19:37:10Z", "time": "2011-12-15T19:37:10Z", "raw_text": "Yes, the limit on Windows 2000/XP/2003 for one paging file appears to be 4095 MiB ([1]), though it is possible (through the registry) to assign several separate paging files. On Windows 7 the limit is considerably higher, though I haven't been able to find what it is: my paging file is 64 GiB for the occasional long rendering task. Unfortunately I haven't found any ways to query the maximum paging file size programmatically.\n\nIf the user has customized his or her paging file, the default/minimum and maximum sizes can be found in the PagingFiles REG_MULTI_SZ value in HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\SessionManager\\MemoryManagement - where the first column is the paging file location, the second column is the default/minimum size and the third column is the maximum size (there can be multiple rows for multiple paging files). If the paging file is set to a system managed size, the second and third columns will be set to 0 (unfortunately).\n\nThe main reason I brought it up is that the default paging file size is set to 1.5 times the system RAM or 2 GiB, whichever is smaller (at least on Windows 2000/XP/2003), which could be pretty small for some users. However I'm not sure how it sets the default maximum paging size - that might simply be the full 4 GiB, assuming enough hard drive space is left.\n\nAlternatively, I suppose it could be argued that any paging is a bad thing, so it would make more sense to fire a memory pressure event as soon as available physical RAM reaches a critical level. That would avoid this whole mess, but wouldn't cover the strict out of memory case.", "attachment_id": null, "bug_id": 710501, "text": "Yes, the limit on Windows 2000/XP/2003 for one paging file appears to be 4095 MiB ([1]), though it is possible (through the registry) to assign several separate paging files. On Windows 7 the limit is considerably higher, though I haven't been able to find what it is: my paging file is 64 GiB for the occasional long rendering task. Unfortunately I haven't found any ways to query the maximum paging file size programmatically.\n\nIf the user has customized his or her paging file, the default/minimum and maximum sizes can be found in the PagingFiles REG_MULTI_SZ value in HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\SessionManager\\MemoryManagement - where the first column is the paging file location, the second column is the default/minimum size and the third column is the maximum size (there can be multiple rows for multiple paging files). If the paging file is set to a system managed size, the second and third columns will be set to 0 (unfortunately).\n\nThe main reason I brought it up is that the default paging file size is set to 1.5 times the system RAM or 2 GiB, whichever is smaller (at least on Windows 2000/XP/2003), which could be pretty small for some users. However I'm not sure how it sets the default maximum paging size - that might simply be the full 4 GiB, assuming enough hard drive space is left.\n\nAlternatively, I suppose it could be argued that any paging is a bad thing, so it would make more sense to fire a memory pressure event as soon as available physical RAM reaches a critical level. That would avoid this whole mess, but wouldn't cover the strict out of memory case.", "tags": []}, {"id": 5919788, "count": 7, "is_private": false, "time": "2011-12-15T19:38:07Z", "creation_time": "2011-12-15T19:38:07Z", "creator": "emanuel.hoogeveen@protonmail.com", "author": "emanuel.hoogeveen@protonmail.com", "attachment_id": null, "raw_text": "Sorry, I forgot to link to [1] in my post above:\n\n[1] http://support.microsoft.com/kb/237740", "tags": [], "text": "Sorry, I forgot to link to [1] in my post above:\n\n[1] http://support.microsoft.com/kb/237740", "bug_id": 710501}, {"id": 5919820, "count": 8, "is_private": false, "author": "justin.lebar+bug@gmail.com", "time": "2011-12-15T19:44:22Z", "creation_time": "2011-12-15T19:44:22Z", "creator": "justin.lebar+bug@gmail.com", "raw_text": "Thanks for that investigation, Emanuel.\n\nI am, in general, wary of the idea that we should aggressively drop memory when the system starts running out of available physical memory -- it's not necessarily Firefox at fault!  A user could be on a 16gb system with Firefox using 200mb of RAM; if the system starts to page, should Firefox really take drastic action?\n\nBut preventing OOMs by monitoring available virtual address space is an easy place to start.", "attachment_id": null, "tags": [], "text": "Thanks for that investigation, Emanuel.\n\nI am, in general, wary of the idea that we should aggressively drop memory when the system starts running out of available physical memory -- it's not necessarily Firefox at fault!  A user could be on a 16gb system with Firefox using 200mb of RAM; if the system starts to page, should Firefox really take drastic action?\n\nBut preventing OOMs by monitoring available virtual address space is an easy place to start.", "bug_id": 710501}, {"is_private": false, "attachment_id": null, "count": 9, "id": 5931748, "raw_text": "Oh geez:\n\n    +pref(\"memory.low_virtual_memory_threshold_mb\", 128);\n    +pref(\"memory.low_physical_mem_threshold_mb\", 0);\n    +pref(\"memory.low_physical_memory_notification_interval_ms\", 10000);\n\nInconsistent use of \"memory\" vs. \"mem\"?  jlebar, can you please do a follow-up fix to make them all use \"memory\"?  Thanks.", "creator": "n.nethercote@gmail.com", "creation_time": "2011-12-21T03:58:26Z", "time": "2011-12-21T03:58:26Z", "author": "n.nethercote@gmail.com", "text": "Oh geez:\n\n    +pref(\"memory.low_virtual_memory_threshold_mb\", 128);\n    +pref(\"memory.low_physical_mem_threshold_mb\", 0);\n    +pref(\"memory.low_physical_memory_notification_interval_ms\", 10000);\n\nInconsistent use of \"memory\" vs. \"mem\"?  jlebar, can you please do a follow-up fix to make them all use \"memory\"?  Thanks.", "bug_id": 710501, "tags": []}, {"author": "n.nethercote@gmail.com", "tags": [], "bug_id": 710501, "text": "Whoops, comment 9 was supposed to go into bug 670967.", "creator": "n.nethercote@gmail.com", "time": "2011-12-21T03:59:09Z", "creation_time": "2011-12-21T03:59:09Z", "raw_text": "Whoops, comment 9 was supposed to go into bug 670967.", "attachment_id": null, "is_private": false, "id": 5931750, "count": 10}, {"text": "We talked about this bug in memshrink a bit today.\n\nIt looks like, unless we can reduce JS usage, we're not going to be able to make a big dent here.  And JS usage is hard to reduce without effectively unloading tabs, either by session restoring them, or by somehow serializing the compartment to disk.", "bug_id": 710501, "tags": [], "raw_text": "We talked about this bug in memshrink a bit today.\n\nIt looks like, unless we can reduce JS usage, we're not going to be able to make a big dent here.  And JS usage is hard to reduce without effectively unloading tabs, either by session restoring them, or by somehow serializing the compartment to disk.", "attachment_id": null, "author": "justin.lebar+bug@gmail.com", "creator": "justin.lebar+bug@gmail.com", "time": "2012-01-17T23:05:10Z", "creation_time": "2012-01-17T23:05:10Z", "is_private": false, "id": 5987045, "count": 11}, {"creator": "n.nethercote@gmail.com", "time": "2012-01-18T01:15:56Z", "creation_time": "2012-01-18T01:15:56Z", "author": "n.nethercote@gmail.com", "is_private": false, "count": 12, "id": 5987482, "tags": [], "text": "JS is big, but it isn't everything.  In my current session layout is 15%, and when the style sheet reporter lands (bug 671299) that'll probably jump to over 20%.\n\nAnd dropping bfcache will allow some JS compartments to be freed.  So I think we can make reasonable progress without having to do really big changes.", "bug_id": 710501, "attachment_id": null, "raw_text": "JS is big, but it isn't everything.  In my current session layout is 15%, and when the style sheet reporter lands (bug 671299) that'll probably jump to over 20%.\n\nAnd dropping bfcache will allow some JS compartments to be freed.  So I think we can make reasonable progress without having to do really big changes."}, {"id": 5987521, "count": 13, "is_private": false, "creation_time": "2012-01-18T01:28:41Z", "time": "2012-01-18T01:28:41Z", "creator": "justin.lebar+bug@gmail.com", "author": "justin.lebar+bug@gmail.com", "attachment_id": null, "raw_text": "We already drop bfcache on a timer and on memory pressure.  This bug would unify the mechanism with the other things we drop, which is virtuous, but that doesn't change the amount of memory which is eventually freed.\n\nI guess dropping 30% of our memory (layout plus sqlite) is good.  To some degree, the question is: What's our goal?", "text": "We already drop bfcache on a timer and on memory pressure.  This bug would unify the mechanism with the other things we drop, which is virtuous, but that doesn't change the amount of memory which is eventually freed.\n\nI guess dropping 30% of our memory (layout plus sqlite) is good.  To some degree, the question is: What's our goal?", "bug_id": 710501, "tags": []}, {"author": "n.nethercote@gmail.com", "creator": "n.nethercote@gmail.com", "creation_time": "2012-01-18T01:37:24Z", "time": "2012-01-18T01:37:24Z", "is_private": false, "id": 5987554, "count": 14, "text": "My first goal is to drop stuff that's easy to drop, and see how far that takes us.  Doing that will require the unification of mechanisms, as you mentioned, which is a good thing.", "bug_id": 710501, "tags": [], "raw_text": "My first goal is to drop stuff that's easy to drop, and see how far that takes us.  Doing that will require the unification of mechanisms, as you mentioned, which is a good thing.", "attachment_id": null}, {"attachment_id": null, "raw_text": "No action in 9 years, closing.", "text": "No action in 9 years, closing.", "bug_id": 710501, "tags": [], "id": 15152756, "count": 15, "is_private": false, "time": "2020-11-30T23:27:25Z", "creation_time": "2020-11-30T23:27:25Z", "creator": "n.nethercote@gmail.com", "author": "n.nethercote@gmail.com"}]}}, "comments": {}}