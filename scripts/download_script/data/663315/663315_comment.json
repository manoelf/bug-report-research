{"bugs": {"663315": {"comments": [{"text": "+++ This bug was initially created as a clone of Bug #663313 +++\n+++ This bug was initially created as a clone of Bug #590364 +++\n\nSee ocsp_matchcert. Thinking ahead to the NSA Suite B profile for TLS, we may need to provide an option to libpkix so the application can tell it which hash functions are acceptable for OCSP signatures, CRL signatures, and CA signatures.", "time": "2011-06-10T04:52:30Z", "bug_id": 663315, "tags": [], "creation_time": "2011-06-10T04:52:30Z", "author": "brian@briansmith.org", "count": 0, "is_private": false, "creator": "brian@briansmith.org", "id": 5524260, "raw_text": "+++ This bug was initially created as a clone of Bug #663313 +++\n+++ This bug was initially created as a clone of Bug #590364 +++\n\nSee ocsp_matchcert. Thinking ahead to the NSA Suite B profile for TLS, we may need to provide an option to libpkix so the application can tell it which hash functions are acceptable for OCSP signatures, CRL signatures, and CA signatures.", "attachment_id": null}, {"bug_id": 663315, "count": 1, "id": 8128089, "raw_text": "(In reply to Brian Smith (:briansmith, was :bsmith; Please NEEDINFO? me if you want a response) from comment #0)\n> See ocsp_matchcert. Thinking ahead to the NSA Suite B profile for TLS, we\n> may need to provide an option to libpkix so the application can tell it\n> which hash functions are acceptable for OCSP signatures, CRL signatures, and\n> CA signatures.\n\nIt seems like I was very confused when I filed this bug. The real problem is that we don't support SHA-2 algorithms for matching issuerNameHash or issuerKeyHash. This doesn't have anything to do with the signatures.", "attachment_id": null, "tags": [], "time": "2013-11-26T22:35:43Z", "text": "(In reply to Brian Smith (:briansmith, was :bsmith; Please NEEDINFO? me if you want a response) from comment #0)\n> See ocsp_matchcert. Thinking ahead to the NSA Suite B profile for TLS, we\n> may need to provide an option to libpkix so the application can tell it\n> which hash functions are acceptable for OCSP signatures, CRL signatures, and\n> CA signatures.\n\nIt seems like I was very confused when I filed this bug. The real problem is that we don't support SHA-2 algorithms for matching issuerNameHash or issuerKeyHash. This doesn't have anything to do with the signatures.", "author": "brian@briansmith.org", "creation_time": "2013-11-26T22:35:43Z", "creator": "brian@briansmith.org", "is_private": false}, {"count": 2, "bug_id": 663315, "raw_text": "", "attachment_id": 8338870, "id": 8128211, "is_private": false, "creator": "brian@briansmith.org", "text": "Created attachment 8338870\nreplace-md5-and-md2-with-sha2.patch", "tags": [], "time": "2013-11-26T23:02:24Z", "creation_time": "2013-11-26T23:02:24Z", "author": "brian@briansmith.org"}, {"id": 8128217, "raw_text": "Review of attachment 8338870:\n-----------------------------------------------------------------\n\nSorry, wrong patch.", "attachment_id": 8338870, "text": "Comment on attachment 8338870\nreplace-md5-and-md2-with-sha2.patch\n\nReview of attachment 8338870:\n-----------------------------------------------------------------\n\nSorry, wrong patch.", "tags": [], "bug_id": 663315, "time": "2013-11-26T23:03:45Z", "creation_time": "2013-11-26T23:03:45Z", "author": "brian@briansmith.org", "count": 3, "is_private": false, "creator": "brian@briansmith.org"}, {"id": 8128387, "attachment_id": 8338870, "raw_text": "Review of attachment 8338870:\n-----------------------------------------------------------------\n\n::: lib/certhigh/ocsp.c\n@@ +3881,1 @@\n>      item.len = SHA1_LENGTH;\n\nBUG: Because item.len == SHA1_LENGTH, the calls to CERT_GetSPKIDigest will fail for SEC_OID_SHA256 and SEC_OID_SHA384.\n\nThis is because ocsp_digestValue will result in SEC_ERROR_INVALID_ARGS, since fill->len < digestObject->length.\n\nI don't think this code was working for MD5 / MD2 in the past, because fill->len was never updated, thus SECITEM_ItemsAreEqual would fail.", "creation_time": "2013-11-26T23:47:47Z", "author": "ryan.sleevi@gmail.com", "text": "Comment on attachment 8338870\nreplace-md5-and-md2-with-sha2.patch\n\nReview of attachment 8338870:\n-----------------------------------------------------------------\n\n::: lib/certhigh/ocsp.c\n@@ +3881,1 @@\n>      item.len = SHA1_LENGTH;\n\nBUG: Because item.len == SHA1_LENGTH, the calls to CERT_GetSPKIDigest will fail for SEC_OID_SHA256 and SEC_OID_SHA384.\n\nThis is because ocsp_digestValue will result in SEC_ERROR_INVALID_ARGS, since fill->len < digestObject->length.\n\nI don't think this code was working for MD5 / MD2 in the past, because fill->len was never updated, thus SECITEM_ItemsAreEqual would fail.", "bug_id": 663315, "tags": [], "time": "2013-11-26T23:47:47Z", "is_private": false, "creator": "ryan.sleevi@gmail.com", "count": 4}, {"creation_time": "2013-12-10T19:28:04Z", "author": "wtc@google.com", "text": "Created attachment 8345421\nReplace MD2 and MD5 with SHA-256\n\nI didn't bother adding SHA-384 because I think it is unlikely\nto be used.", "time": "2013-12-10T19:28:04Z", "bug_id": 663315, "tags": [], "is_private": false, "creator": "wtc@google.com", "count": 5, "id": 8178941, "attachment_id": 8345421, "raw_text": "I didn't bother adding SHA-384 because I think it is unlikely\nto be used."}, {"id": 8192401, "attachment_id": 8345421, "raw_text": "Review of attachment 8345421:\n-----------------------------------------------------------------\n\nThe patch writen so far looks reasonable to me.\n\nThis is the type of thing that I was talking about in the NSS meeting today:\n\n    static PRIntn PR_CALLBACK\n    ocsp_CacheKeyCompareFunction(const void *v1, const void *v2)\n    {\n        CERTOCSPCertID *cid1 = (CERTOCSPCertID *)v1;\n        CERTOCSPCertID *cid2 = (CERTOCSPCertID *)v2;\n  \n        return (SECEqual == SECITEM_CompareItem(&cid1->issuerNameHash, \n                                                &cid2->issuerNameHash)\n                && SECEqual == SECITEM_CompareItem(&cid1->issuerKeyHash, \n                                                   &cid2->issuerKeyHash)\n                && SECEqual == SECITEM_CompareItem(&cid1->serialNumber, \n                                                   &cid2->serialNumber));\n    }\n\nPresumably one reason for wanting to support SHA-2 is that it is more collision-resistant. But, here, we're using issuerNameHash/issuerKeyHash which are SHA-1 hashes, even if the OCSP response used SHA-2. IMO, it would be more correct to make issuerNameHash and issuerKeyHash SHA-2.\n\nAlso, I understand that you expect that nobody will use SHA-384. However, I would expect that if a server is using the TLS Suite B profile at the 256-bit security level, then they may (must?) use SHA-384. Since we don't support the TLS Suite B profile at the 256-bit security level, then we can defer this for now. However, it seems like it might be more straightforward to just add the SHA-384 support now since SHA-256/SHA-384 would directly mirror the MD5/MD2 support it is replacing. That is, it might be harder to remember out how how to add SHA-384 support later. If we don't add SHA-384 support now, please file a follow-up bug.\n\nI am concerned that, since the previous MD5/MD2 didn't seem to run, and we don't know of any SHA-2-generating OCSP servers, that we don't really know if this patch works. I think it should be pretty straightforward to modify our OCSP tests (either the fetching ones, or the stapling ones, if not both) to test the SHA-2 functionality, and I think it would be useful to do so. Note, in particular, that normal usage of the OCSP in NSS has issuerNameHash == issuerSHA1NameHash == the hash actually used, but with this SHA-2 support, as it is currently written, that is not the case.\n\nNote that some OCSP responders may not give us SHA-2-based OCSP responses until we add the PreferredSignatureAlgorithms extension to our OCSP requests. I already filed bug 943651 for that. Also, SSL servers may not give us stapled SHA-2-based OCSP responses unless we add the PreferredSignatureAlgorithms extension to the cert_status extension in the SSL handshake. I just filed bug 949918 about adding that extension to the ssl status_request (OCSP stapling) extension. This bug can be fixed independently of those bugs, of course.", "creation_time": "2013-12-13T07:23:01Z", "author": "brian@briansmith.org", "text": "Comment on attachment 8345421\nReplace MD2 and MD5 with SHA-256\n\nReview of attachment 8345421:\n-----------------------------------------------------------------\n\nThe patch writen so far looks reasonable to me.\n\nThis is the type of thing that I was talking about in the NSS meeting today:\n\n    static PRIntn PR_CALLBACK\n    ocsp_CacheKeyCompareFunction(const void *v1, const void *v2)\n    {\n        CERTOCSPCertID *cid1 = (CERTOCSPCertID *)v1;\n        CERTOCSPCertID *cid2 = (CERTOCSPCertID *)v2;\n  \n        return (SECEqual == SECITEM_CompareItem(&cid1->issuerNameHash, \n                                                &cid2->issuerNameHash)\n                && SECEqual == SECITEM_CompareItem(&cid1->issuerKeyHash, \n                                                   &cid2->issuerKeyHash)\n                && SECEqual == SECITEM_CompareItem(&cid1->serialNumber, \n                                                   &cid2->serialNumber));\n    }\n\nPresumably one reason for wanting to support SHA-2 is that it is more collision-resistant. But, here, we're using issuerNameHash/issuerKeyHash which are SHA-1 hashes, even if the OCSP response used SHA-2. IMO, it would be more correct to make issuerNameHash and issuerKeyHash SHA-2.\n\nAlso, I understand that you expect that nobody will use SHA-384. However, I would expect that if a server is using the TLS Suite B profile at the 256-bit security level, then they may (must?) use SHA-384. Since we don't support the TLS Suite B profile at the 256-bit security level, then we can defer this for now. However, it seems like it might be more straightforward to just add the SHA-384 support now since SHA-256/SHA-384 would directly mirror the MD5/MD2 support it is replacing. That is, it might be harder to remember out how how to add SHA-384 support later. If we don't add SHA-384 support now, please file a follow-up bug.\n\nI am concerned that, since the previous MD5/MD2 didn't seem to run, and we don't know of any SHA-2-generating OCSP servers, that we don't really know if this patch works. I think it should be pretty straightforward to modify our OCSP tests (either the fetching ones, or the stapling ones, if not both) to test the SHA-2 functionality, and I think it would be useful to do so. Note, in particular, that normal usage of the OCSP in NSS has issuerNameHash == issuerSHA1NameHash == the hash actually used, but with this SHA-2 support, as it is currently written, that is not the case.\n\nNote that some OCSP responders may not give us SHA-2-based OCSP responses until we add the PreferredSignatureAlgorithms extension to our OCSP requests. I already filed bug 943651 for that. Also, SSL servers may not give us stapled SHA-2-based OCSP responses unless we add the PreferredSignatureAlgorithms extension to the cert_status extension in the SSL handshake. I just filed bug 949918 about adding that extension to the ssl status_request (OCSP stapling) extension. This bug can be fixed independently of those bugs, of course.", "time": "2013-12-13T07:23:01Z", "tags": [], "is_private": false, "creator": "brian@briansmith.org", "bug_id": 663315, "count": 6}, {"id": 8222352, "raw_text": "Review of attachment 8345421:\n-----------------------------------------------------------------\n\nImplementation, this R+ to me.\n\nI've read Brian's comment several times, and I fail to see what exactly the superreview- was for.", "attachment_id": 8345421, "bug_id": 663315, "tags": [], "time": "2013-12-20T22:39:32Z", "text": "Comment on attachment 8345421\nReplace MD2 and MD5 with SHA-256\n\nReview of attachment 8345421:\n-----------------------------------------------------------------\n\nImplementation, this R+ to me.\n\nI've read Brian's comment several times, and I fail to see what exactly the superreview- was for.", "author": "ryan.sleevi@gmail.com", "creation_time": "2013-12-20T22:39:32Z", "count": 7, "creator": "ryan.sleevi@gmail.com", "is_private": false}, {"id": 8222373, "raw_text": "(In reply to Ryan Sleevi from comment #7)\n> I've read Brian's comment several times, and I fail to see what exactly the\n> superreview- was for.\n\nAFAICT, this new SHA-2 support has never been tested, even manually. So, how do we know it works?", "attachment_id": null, "tags": [], "time": "2013-12-20T22:47:18Z", "text": "(In reply to Ryan Sleevi from comment #7)\n> I've read Brian's comment several times, and I fail to see what exactly the\n> superreview- was for.\n\nAFAICT, this new SHA-2 support has never been tested, even manually. So, how do we know it works?", "author": "brian@briansmith.org", "creation_time": "2013-12-20T22:47:18Z", "creator": "brian@briansmith.org", "is_private": false, "bug_id": 663315, "count": 8}]}}, "comments": {}}