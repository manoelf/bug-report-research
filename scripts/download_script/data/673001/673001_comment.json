{"bugs": {"673001": {"comments": [{"bug_id": 673001, "id": 5603282, "tags": [], "count": 0, "is_private": false, "attachment_id": null, "time": "2011-07-20T23:58:10Z", "text": "On TBPL, when things fail, it's not always apparent to most developers how to go run that section of tests on their own.  This would be a nice addition.\n\nSo, I'm in no position to dictate UI, so, let's say that when a test fails on TBPL, the person reviewing the test has some means to find out what command they need to use for re-running that suite of tests locally. (However, some means should not include digging through the build log). They should be re-run as close to what the tinderbox runs, so here's the information we'd need.\n\n* URL to download the binary (url1)\n* URL to download the test package (url2)\n* URL to download the symbols (url3)\n* The command line to run the tests\n\nThis could very nearly be a bash script that is filled in by a process that scrapes the information from the build log.  The bash script could be downloaded from TBPL and the developers could run the script.  Something like:\nwget <url1>\nwget <url2>\nwget <url3>\nif windows\n  unzip <url1>\nelif linux\n  tar -xjf <url1>\nelse\n  hdiutil whatever <url1>\nunzip -d tests <url2>\nunzip -d symbols <url3>\npython runtests.py blah blah blah blah blah\n\n\nFor Android based tests, we could do the same thing, but that has the extra issue of requiring the developer to have an android environment to debug in, so let's skip android for this for now, as I have a different solution for that in mind.", "creation_time": "2011-07-20T23:58:10Z", "raw_text": "On TBPL, when things fail, it's not always apparent to most developers how to go run that section of tests on their own.  This would be a nice addition.\n\nSo, I'm in no position to dictate UI, so, let's say that when a test fails on TBPL, the person reviewing the test has some means to find out what command they need to use for re-running that suite of tests locally. (However, some means should not include digging through the build log). They should be re-run as close to what the tinderbox runs, so here's the information we'd need.\n\n* URL to download the binary (url1)\n* URL to download the test package (url2)\n* URL to download the symbols (url3)\n* The command line to run the tests\n\nThis could very nearly be a bash script that is filled in by a process that scrapes the information from the build log.  The bash script could be downloaded from TBPL and the developers could run the script.  Something like:\nwget <url1>\nwget <url2>\nwget <url3>\nif windows\n  unzip <url1>\nelif linux\n  tar -xjf <url1>\nelse\n  hdiutil whatever <url1>\nunzip -d tests <url2>\nunzip -d symbols <url3>\npython runtests.py blah blah blah blah blah\n\n\nFor Android based tests, we could do the same thing, but that has the extra issue of requiring the developer to have an android environment to debug in, so let's skip android for this for now, as I have a different solution for that in mind.", "author": "cmtalbert@gmail.com", "creator": "cmtalbert@gmail.com"}, {"raw_text": "Shouldn't this stuff live in MDN?  I don't think that TBPL is the best place for our developer documentation to live.  :-)", "creation_time": "2011-07-21T15:31:25Z", "time": "2011-07-21T15:31:25Z", "attachment_id": null, "text": "Shouldn't this stuff live in MDN?  I don't think that TBPL is the best place for our developer documentation to live.  :-)", "id": 5604399, "is_private": false, "count": 1, "tags": [], "bug_id": 673001, "author": "ehsan.akhgari@gmail.com", "creator": "ehsan.akhgari@gmail.com"}, {"creator": "mounir@lamouri.fr", "author": "mounir@lamouri.fr", "is_private": false, "count": 2, "tags": [], "id": 5604536, "bug_id": 673001, "raw_text": "(In reply to comment #0)\n> python runtests.py blah blah blah blah blah\n\nFTR, that should be `make mochitest-{plain,chrome,browser-chrome}`. We shouldn't recommend the usage of `python runtests.py`.", "creation_time": "2011-07-21T16:27:54Z", "text": "(In reply to comment #0)\n> python runtests.py blah blah blah blah blah\n\nFTR, that should be `make mochitest-{plain,chrome,browser-chrome}`. We shouldn't recommend the usage of `python runtests.py`.", "attachment_id": null, "time": "2011-07-21T16:27:54Z"}, {"creator": "cmtalbert@gmail.com", "author": "cmtalbert@gmail.com", "bug_id": 673001, "tags": [], "is_private": false, "count": 3, "id": 5604705, "text": "Guys, I'm not talking about documenting anything on TBPL.  I'm talking about having a way to click on something and get a script that will run *exactly what tinderbox runs* for a failing test.\n\nI don't know how many times I've personally pulled that information out of the build logs for developers.  It seems like it'd be quite the win to give people the ability to get to this information easily without parsing buildlogs, knowing what to download, what to unzip etc.\n\nAnd you can't run things the way the automation does with make \"<testtarget>\"  The make targets are simply shortcuts to \"python runtests.py <arguments>\" We provide the make targets so that developers with build trees handy can quickly run simple tests that they are likely to want.  Also, we have the implicit rule that those make targets do not hit the network.  In order to truly run the way the automation does, with the builds the automation produced, you need to download symbols and test package from a specific changeset and we won't be adding that functionality to the make target.\n\nIf this wouldn't be useful, then we can wontfix this bug and go on with life.  But, given the number of times I've pulled this information together for developers, I think it deserves a some thought.", "time": "2011-07-21T17:27:47Z", "attachment_id": null, "raw_text": "Guys, I'm not talking about documenting anything on TBPL.  I'm talking about having a way to click on something and get a script that will run *exactly what tinderbox runs* for a failing test.\n\nI don't know how many times I've personally pulled that information out of the build logs for developers.  It seems like it'd be quite the win to give people the ability to get to this information easily without parsing buildlogs, knowing what to download, what to unzip etc.\n\nAnd you can't run things the way the automation does with make \"<testtarget>\"  The make targets are simply shortcuts to \"python runtests.py <arguments>\" We provide the make targets so that developers with build trees handy can quickly run simple tests that they are likely to want.  Also, we have the implicit rule that those make targets do not hit the network.  In order to truly run the way the automation does, with the builds the automation produced, you need to download symbols and test package from a specific changeset and we won't be adding that functionality to the make target.\n\nIf this wouldn't be useful, then we can wontfix this bug and go on with life.  But, given the number of times I've pulled this information together for developers, I think it deserves a some thought.", "creation_time": "2011-07-21T17:27:47Z"}, {"author": "ehsan.akhgari@gmail.com", "creator": "ehsan.akhgari@gmail.com", "id": 5605170, "is_private": false, "count": 4, "tags": [], "bug_id": 673001, "creation_time": "2011-07-21T19:44:15Z", "raw_text": "(In reply to comment #3)\n> I don't know how many times I've personally pulled that information out of the\n> build logs for developers.  It seems like it'd be quite the win to give people\n> the ability to get to this information easily without parsing buildlogs,\n> knowing what to download, what to unzip etc.\n\nYes, I totally understand (me being one of those people who has tried to dig this information in the past).\n\nBut I still think that my suggestion about this being documented on MDN is valid.  Once we have that, we can _definitely_ link to that documentation from TBPL (in other words, I'm not advocating this bug to be WONTFIXed).", "time": "2011-07-21T19:44:15Z", "attachment_id": null, "text": "(In reply to comment #3)\n> I don't know how many times I've personally pulled that information out of the\n> build logs for developers.  It seems like it'd be quite the win to give people\n> the ability to get to this information easily without parsing buildlogs,\n> knowing what to download, what to unzip etc.\n\nYes, I totally understand (me being one of those people who has tried to dig this information in the past).\n\nBut I still think that my suggestion about this being documented on MDN is valid.  Once we have that, we can _definitely_ link to that documentation from TBPL (in other words, I'm not advocating this bug to be WONTFIXed)."}, {"author": "sphink@gmail.com", "creator": "sphink@gmail.com", "attachment_id": null, "time": "2011-07-21T21:10:18Z", "text": "I'm all for this. (Full disclosure: I think this bug was filed as a result of a comment I made during the initial Go Fast meeting.)\n\nOptimally, I'd like it to allow a couple of things:\n1. The \"run the exact test suite that failed as tinderbox did\" that ctalbert's describing above\n2. An option to run an individual failing test (presumably by generating a manifest for it or something)\n3. An option to do both of the above using your own local compile\n4. For all of the above, an option (or instructions, when relevant) to run under a debugger.\n\nI've read through the MDN docs, repeatedly, and it's still a major pain to figure out how to run tests. Especially since when I finally manage to run them, some problems won't reproduce on my machine even though they're 100% consistent on tinderbox/buildbot. Then I switch to another test suite, and I have to start all over again.\n\nI'd prefer if it did the setup (pull down the files etc.), then spat out the commands to run rather than doing everything automagically.\n\nAs an additional nice to have, I'd like a way to run the focus-hogging tests under Xnest or Xvfb or whatever (and the moral equivalent on Windows.) And progress indicators. No pony, though -- I want a friggin' unicorn to go along with this.\n\nI wouldn't expect tbpl code to be doing most of the work for this, though -- can it hit a CGI that just takes a test path or something?", "creation_time": "2011-07-21T21:10:18Z", "raw_text": "I'm all for this. (Full disclosure: I think this bug was filed as a result of a comment I made during the initial Go Fast meeting.)\n\nOptimally, I'd like it to allow a couple of things:\n1. The \"run the exact test suite that failed as tinderbox did\" that ctalbert's describing above\n2. An option to run an individual failing test (presumably by generating a manifest for it or something)\n3. An option to do both of the above using your own local compile\n4. For all of the above, an option (or instructions, when relevant) to run under a debugger.\n\nI've read through the MDN docs, repeatedly, and it's still a major pain to figure out how to run tests. Especially since when I finally manage to run them, some problems won't reproduce on my machine even though they're 100% consistent on tinderbox/buildbot. Then I switch to another test suite, and I have to start all over again.\n\nI'd prefer if it did the setup (pull down the files etc.), then spat out the commands to run rather than doing everything automagically.\n\nAs an additional nice to have, I'd like a way to run the focus-hogging tests under Xnest or Xvfb or whatever (and the moral equivalent on Windows.) And progress indicators. No pony, though -- I want a friggin' unicorn to go along with this.\n\nI wouldn't expect tbpl code to be doing most of the work for this, though -- can it hit a CGI that just takes a test path or something?", "bug_id": 673001, "id": 5605428, "tags": [], "count": 5, "is_private": false}, {"creator": "sphink@gmail.com", "author": "sphink@gmail.com", "bug_id": 673001, "count": 6, "is_private": false, "tags": [], "id": 5605455, "text": "Sorry, I had that queued up since before Ehsan's comment.\n\nIt's great to have it documented on MDN, but you still have to scan through twenty pages of log output to figure out what was run. Linking directly from a tbpl-visible type of test to the correct portion of MDN would help, but I suspect it's not enough to get people over the usability hurdle.", "time": "2011-07-21T21:16:13Z", "attachment_id": null, "creation_time": "2011-07-21T21:16:13Z", "raw_text": "Sorry, I had that queued up since before Ehsan's comment.\n\nIt's great to have it documented on MDN, but you still have to scan through twenty pages of log output to figure out what was run. Linking directly from a tbpl-visible type of test to the correct portion of MDN would help, but I suspect it's not enough to get people over the usability hurdle."}, {"creator": "emorley@mozilla.com", "author": "emorley@mozilla.com", "creation_time": "2012-09-11T10:32:49Z", "raw_text": "I believe this would be more suited to being output in the logs, along with the TEST-UNEXPECTED-FAIL, otherwise we're going to pollute every TBPL annotated summary, with a bunch more lines of generic copy (which sheriffs have to skim through every time before starring intermittent orange, to ensure there are no additional failures further down in the log).", "text": "I believe this would be more suited to being output in the logs, along with the TEST-UNEXPECTED-FAIL, otherwise we're going to pollute every TBPL annotated summary, with a bunch more lines of generic copy (which sheriffs have to skim through every time before starring intermittent orange, to ensure there are no additional failures further down in the log).", "time": "2012-09-11T10:32:49Z", "attachment_id": null, "count": 7, "is_private": false, "tags": [], "id": 6624966, "bug_id": 673001}, {"tags": [], "count": 8, "is_private": false, "id": 6625206, "bug_id": 673001, "creation_time": "2012-09-11T13:11:15Z", "raw_text": "(In reply to Ed Morley [:edmorley UTC+1] from comment #7)\n> I believe this would be more suited to being output in the logs, along with\n> the TEST-UNEXPECTED-FAIL, otherwise we're going to pollute every TBPL\n> annotated summary, with a bunch more lines of generic copy (which sheriffs\n> have to skim through every time before starring intermittent orange, to\n> ensure there are no additional failures further down in the log).\n\nPerhaps, once we switch to mozharness for unit tests, we can send people to a page with information on how to use mozharness locally and run such unit tests (bug 650880).", "text": "(In reply to Ed Morley [:edmorley UTC+1] from comment #7)\n> I believe this would be more suited to being output in the logs, along with\n> the TEST-UNEXPECTED-FAIL, otherwise we're going to pollute every TBPL\n> annotated summary, with a bunch more lines of generic copy (which sheriffs\n> have to skim through every time before starring intermittent orange, to\n> ensure there are no additional failures further down in the log).\n\nPerhaps, once we switch to mozharness for unit tests, we can send people to a page with information on how to use mozharness locally and run such unit tests (bug 650880).", "time": "2012-09-11T13:11:15Z", "attachment_id": null, "creator": "armenzg@sentry.io", "author": "armenzg@sentry.io"}, {"text": "actually now that we are on mozharness, it has become more difficult to run these by hand.  I would think we need a tool in tree that we could point to a log file and it could help us work the magic?", "time": "2014-02-10T16:58:27Z", "attachment_id": null, "raw_text": "actually now that we are on mozharness, it has become more difficult to run these by hand.  I would think we need a tool in tree that we could point to a log file and it could help us work the magic?", "creation_time": "2014-02-10T16:58:27Z", "bug_id": 673001, "count": 9, "is_private": false, "tags": [], "id": 8398295, "creator": "jmaher@mozilla.com", "author": "jmaher@mozilla.com"}]}}, "comments": {}}