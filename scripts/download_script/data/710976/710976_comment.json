{"comments": {}, "bugs": {"710976": {"comments": [{"bug_id": 710976, "id": 5918074, "count": 0, "text": "From http://www.viva64.com/en/a/0078/\n\nExample 9. Forming a wrong error message\n\ncairo_status_t\n_cairo_win32_print_gdi_error (const char *context)\n{\n  ...\n  fwprintf(stderr, L\"%s: %S\", context, (wchar_t *)lpMsgBuf);\n  ...\n}\n\nPVS-Studio diagnostic message: V576 Incorrect format. Consider checking the third actual argument of the 'fwprintf' function. The pointer to string of wchar_t type symbols is expected. cairo-win32-surface.c 129\n\nEven if an error was successfully detected, it should be processed correctly. And since nobody tests error handlers either, we may find many interesting things there.\n\nThe _cairo_win32_print_gdi_error() function will print some trash. The fwprintf() function awaits a pointer to a unicode-string as the third argument, but instead it gets a string with the 'const char *' format.", "author": "jdinbox@gmail.com", "raw_text": "From http://www.viva64.com/en/a/0078/\n\nExample 9. Forming a wrong error message\n\ncairo_status_t\n_cairo_win32_print_gdi_error (const char *context)\n{\n  ...\n  fwprintf(stderr, L\"%s: %S\", context, (wchar_t *)lpMsgBuf);\n  ...\n}\n\nPVS-Studio diagnostic message: V576 Incorrect format. Consider checking the third actual argument of the 'fwprintf' function. The pointer to string of wchar_t type symbols is expected. cairo-win32-surface.c 129\n\nEven if an error was successfully detected, it should be processed correctly. And since nobody tests error handlers either, we may find many interesting things there.\n\nThe _cairo_win32_print_gdi_error() function will print some trash. The fwprintf() function awaits a pointer to a unicode-string as the third argument, but instead it gets a string with the 'const char *' format.", "time": "2011-12-15T06:54:06Z", "is_private": false, "creation_time": "2011-12-15T06:54:06Z", "creator": "jdinbox@gmail.com", "tags": [], "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "neil@httl.net", "creation_time": "2011-12-15T16:52:05Z", "is_private": false, "raw_text": "(In reply to Justin Dolske from comment #0)\n>   fwprintf(stderr, L\"%s: %S\", context, (wchar_t *)lpMsgBuf);\nIn fact both format specifications are wrong; %s means \"string of same wideness\" while %S means \"string of opposite wideness\". Presumably this used to be an fprintf at some point when the format specifiers would have been correct.", "time": "2011-12-15T16:52:05Z", "author": "neil@httl.net", "count": 1, "text": "(In reply to Justin Dolske from comment #0)\n>   fwprintf(stderr, L\"%s: %S\", context, (wchar_t *)lpMsgBuf);\nIn fact both format specifications are wrong; %s means \"string of same wideness\" while %S means \"string of opposite wideness\". Presumably this used to be an fprintf at some point when the format specifiers would have been correct.", "id": 5919093, "bug_id": 710976}, {"raw_text": "(In reply to neil@parkwaycc.co.uk from comment #1)\n> (In reply to Justin Dolske from comment #0)\n> >   fwprintf(stderr, L\"%s: %S\", context, (wchar_t *)lpMsgBuf);\n> In fact both format specifications are wrong; %s means \"string of same\n> wideness\" while %S means \"string of opposite wideness\". Presumably this used\n> to be an fprintf at some point when the format specifiers would have been\n> correct.\n\nNot according to \"man fwprintf\" on OS X, at least....\n\n<quote>\n     S       Treated as s with the l (ell) modifier.\n\n     s       The char * argument is expected to be a pointer to an array of character type (pointer to a string)\n             containing a multibyte sequence.  Characters from the array are converted to wide characters and\n             written up to (but not including) a terminating NUL character; if a precision is specified, no more\n             than the number specified are written.  If a precision is given, no null character need be present;\n             if the precision is not specified, or is greater than the size of the array, the array must contain\n             a terminating NUL character.\n\n             If the l (ell) modifier is used, the wchar_t * argument is expected to be a pointer to an array of\n             wide characters (pointer to a wide string).  Each wide character in the string is written.  Wide\n             characters from the array are written up to (but not including) a terminating wide NUL character;\n             if a precision is specified, no more than the number specified are written (including shift\n             sequences).  If a precision is given, no null character need be present; if the precision is not\n             specified, or is greater than the number of characters in the string, the array must contain a ter-\n             minating wide NUL character.\n</quote>\n\nSo this claims that %s is always char* and %S is always wchar_t*.\n\n/me checks the MSDN docs.....\n\nHmmm, so according to Microsoft, things are indeed as you claim. IOW, unless someone's doc is wrong, the MS and BSD versions of the ?wprintf functions are incompatible. (Sigh.) The same applies to the %c and %C specifiers.\n\nAs this occurs in a win32-only source file, it had better follow Microsoft's rules.\n\nAnd one more thing: it looks like we patched this previously; see gfx/cairo/fix-cairo-win32-print-gdi-error.diff. I'm guessing the fix got lost during a cairo update. :(  Cc-ing Jeff, who usually handles those AFAIK.", "time": "2011-12-15T17:11:51Z", "text": "(In reply to neil@parkwaycc.co.uk from comment #1)\n> (In reply to Justin Dolske from comment #0)\n> >   fwprintf(stderr, L\"%s: %S\", context, (wchar_t *)lpMsgBuf);\n> In fact both format specifications are wrong; %s means \"string of same\n> wideness\" while %S means \"string of opposite wideness\". Presumably this used\n> to be an fprintf at some point when the format specifiers would have been\n> correct.\n\nNot according to \"man fwprintf\" on OS X, at least....\n\n<quote>\n     S       Treated as s with the l (ell) modifier.\n\n     s       The char * argument is expected to be a pointer to an array of character type (pointer to a string)\n             containing a multibyte sequence.  Characters from the array are converted to wide characters and\n             written up to (but not including) a terminating NUL character; if a precision is specified, no more\n             than the number specified are written.  If a precision is given, no null character need be present;\n             if the precision is not specified, or is greater than the size of the array, the array must contain\n             a terminating NUL character.\n\n             If the l (ell) modifier is used, the wchar_t * argument is expected to be a pointer to an array of\n             wide characters (pointer to a wide string).  Each wide character in the string is written.  Wide\n             characters from the array are written up to (but not including) a terminating wide NUL character;\n             if a precision is specified, no more than the number specified are written (including shift\n             sequences).  If a precision is given, no null character need be present; if the precision is not\n             specified, or is greater than the number of characters in the string, the array must contain a ter-\n             minating wide NUL character.\n</quote>\n\nSo this claims that %s is always char* and %S is always wchar_t*.\n\n/me checks the MSDN docs.....\n\nHmmm, so according to Microsoft, things are indeed as you claim. IOW, unless someone's doc is wrong, the MS and BSD versions of the ?wprintf functions are incompatible. (Sigh.) The same applies to the %c and %C specifiers.\n\nAs this occurs in a win32-only source file, it had better follow Microsoft's rules.\n\nAnd one more thing: it looks like we patched this previously; see gfx/cairo/fix-cairo-win32-print-gdi-error.diff. I'm guessing the fix got lost during a cairo update. :(  Cc-ing Jeff, who usually handles those AFAIK.", "count": 2, "author": "jfkthame@gmail.com", "id": 5919196, "bug_id": 710976, "attachment_id": null, "tags": [], "creator": "jfkthame@gmail.com", "is_private": false, "creation_time": "2011-12-15T17:11:51Z"}]}}}