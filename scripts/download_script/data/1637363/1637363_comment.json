{"bugs": {"1637363": {"comments": [{"text": "Currently we only look at the top frame when computing the frameId", "attachment_id": null, "author": "mjzffr@gmail.com", "id": 14815094, "is_private": false, "bug_id": 1637363, "creation_time": "2020-05-12T18:33:02Z", "count": 0, "raw_text": "Currently we only look at the top frame when computing the frameId", "creator": "mjzffr@gmail.com", "time": "2020-05-12T18:33:02Z", "tags": []}, {"attachment_id": null, "raw_text": "Maybe this windowId is helpful: https://searchfox.org/mozilla-central/rev/0688ffdef223dac527c2fcdb25560118c4e4df51/dom/chrome-webidl/ChannelWrapper.webidl#329", "id": 14815270, "author": "mjzffr@gmail.com", "creation_time": "2020-05-12T19:46:01Z", "count": 1, "text": "Maybe this windowId is helpful: https://searchfox.org/mozilla-central/rev/0688ffdef223dac527c2fcdb25560118c4e4df51/dom/chrome-webidl/ChannelWrapper.webidl#329", "tags": [], "is_private": false, "bug_id": 1637363, "creator": "mjzffr@gmail.com", "time": "2020-05-12T19:46:01Z"}, {"bug_id": 1637363, "is_private": false, "text": "Not sure yet how important that actually is, but given that network events are used a lot I would rather see it fixed. It would also help me with bug 1637640 to actually have the correct frame ids reported. As such I'm taking that one.\n\nI had a quick look into that and it seems to actually quite simple. The `loadContext` for HTTP requests and responses in content processes is actually a `CanonicalBrowsingContext`, and as such has an `id` property. That can perfectly be used here to filter out requests and responses not related to the page or sub frame itself, eg. favicons as requested by the browser.", "author": "hskupin@gmail.com", "id": 14832802, "attachment_id": null, "creator": "hskupin@gmail.com", "time": "2020-05-20T09:22:53Z", "tags": [], "count": 2, "creation_time": "2020-05-20T09:22:53Z", "raw_text": "Not sure yet how important that actually is, but given that network events are used a lot I would rather see it fixed. It would also help me with bug 1637640 to actually have the correct frame ids reported. As such I'm taking that one.\n\nI had a quick look into that and it seems to actually quite simple. The `loadContext` for HTTP requests and responses in content processes is actually a `CanonicalBrowsingContext`, and as such has an `id` property. That can perfectly be used here to filter out requests and responses not related to the page or sub frame itself, eg. favicons as requested by the browser."}, {"bug_id": 1637363, "is_private": false, "attachment_id": null, "author": "hskupin@gmail.com", "id": 14837528, "text": "After further investigation I noticed that for all network requests related to resources (style sheets, images, etc) the `loadContext` is of type `nsILoadContext` and not `CanonicalBrowsingContext`. As such no browsing context id is available, which could be used as `frameId`. \n\nHonza, is there an easy way to get the browsing context of the document request for a resource request?", "tags": [], "creator": "hskupin@gmail.com", "time": "2020-05-22T13:11:20Z", "raw_text": "After further investigation I noticed that for all network requests related to resources (style sheets, images, etc) the `loadContext` is of type `nsILoadContext` and not `CanonicalBrowsingContext`. As such no browsing context id is available, which could be used as `frameId`. \n\nHonza, is there an easy way to get the browsing context of the document request for a resource request?", "creation_time": "2020-05-22T13:11:20Z", "count": 3}, {"raw_text": "As it looks like we can use `wrappedChannel.windowId` to setup a mapping to the `frameId`. Each document request has the `windowId` and `frameId` set, and for resource requests the `windowId` is equal to the document requests. It works fine for me for top-level and sub browsing contexts.\n\nI'll leave needinfo for Honza in case there is something more elegant.", "count": 4, "creation_time": "2020-05-22T16:40:15Z", "tags": [], "time": "2020-05-22T16:40:15Z", "creator": "hskupin@gmail.com", "id": 14837829, "author": "hskupin@gmail.com", "attachment_id": null, "text": "As it looks like we can use `wrappedChannel.windowId` to setup a mapping to the `frameId`. Each document request has the `windowId` and `frameId` set, and for resource requests the `windowId` is equal to the document requests. It works fine for me for top-level and sub browsing contexts.\n\nI'll leave needinfo for Honza in case there is something more elegant.", "is_private": false, "bug_id": 1637363}, {"bug_id": 1637363, "is_private": false, "attachment_id": null, "author": "honzab.moz@firemni.cz", "id": 14843679, "text": "(In reply to Henrik Skupin (:whimboo) [\u231a\ufe0fUTC+2] from comment #4)\n> As it looks like we can use `wrappedChannel.windowId` to setup a mapping to the `frameId`. Each document request has the `windowId` and `frameId` set, and for resource requests the `windowId` is equal to the document requests. It works fine for me for top-level and sub browsing contexts.\n> \n> I'll leave needinfo for Honza in case there is something more elegant.\n\nSorry for late answer, I'm not that much an expert to window ids, to be honest.  On the child channel for http we collect toplevel content and outer window ids here: https://searchfox.org/mozilla-central/rev/ea7f70dac1c5fd18400f6d2a92679777d4b21492/netwerk/protocol/http/HttpChannelChild.cpp#2645-2661.  Not sure if that is of any help.\n\nBut I believe that what you have found is what you need.", "tags": [], "creator": "honzab.moz@firemni.cz", "time": "2020-05-26T12:33:59Z", "raw_text": "(In reply to Henrik Skupin (:whimboo) [\u231a\ufe0fUTC+2] from comment #4)\n> As it looks like we can use `wrappedChannel.windowId` to setup a mapping to the `frameId`. Each document request has the `windowId` and `frameId` set, and for resource requests the `windowId` is equal to the document requests. It works fine for me for top-level and sub browsing contexts.\n> \n> I'll leave needinfo for Honza in case there is something more elegant.\n\nSorry for late answer, I'm not that much an expert to window ids, to be honest.  On the child channel for http we collect toplevel content and outer window ids here: https://searchfox.org/mozilla-central/rev/ea7f70dac1c5fd18400f6d2a92679777d4b21492/netwerk/protocol/http/HttpChannelChild.cpp#2645-2661.  Not sure if that is of any help.\n\nBut I believe that what you have found is what you need.", "creation_time": "2020-05-26T12:33:59Z", "count": 5}, {"tags": [], "time": "2020-05-26T12:50:21Z", "creator": "hskupin@gmail.com", "raw_text": "", "creation_time": "2020-05-26T12:50:21Z", "count": 6, "bug_id": 1637363, "is_private": false, "attachment_id": 9151722, "id": 14843700, "author": "hskupin@gmail.com", "text": "Created attachment 9151722\nBug 1637363 - [remote] Use frameId of the related browsing context for Network events."}, {"bug_id": 1637363, "is_private": false, "text": "Thanks for your reply Honza. As it looks like I will indeed leave what I have right now. The code you pointed at is using the `innerWindowId`, which changes for each and every navigation request. But in our case we make use of the unique browsing context id.", "attachment_id": null, "id": 14843702, "author": "hskupin@gmail.com", "time": "2020-05-26T12:51:09Z", "creator": "hskupin@gmail.com", "tags": [], "creation_time": "2020-05-26T12:51:09Z", "count": 7, "raw_text": "Thanks for your reply Honza. As it looks like I will indeed leave what I have right now. The code you pointed at is using the `innerWindowId`, which changes for each and every navigation request. But in our case we make use of the unique browsing context id."}, {"bug_id": 1637363, "is_private": false, "text": "Created attachment 9151976\nBug 1637363 - [remote] Bump default timeout for history.record() to 2s due to timeouts of debug builds.\n\n\nOn Ubuntu 18.04 tests are failing more often for debug builds\ndue to not received events. Bumping up the value here seems to\nhelp.\n\nDepends on D76835", "id": 14845619, "author": "hskupin@gmail.com", "attachment_id": 9151976, "creator": "hskupin@gmail.com", "time": "2020-05-27T04:52:29Z", "tags": [], "count": 8, "creation_time": "2020-05-27T04:52:29Z", "raw_text": "\nOn Ubuntu 18.04 tests are failing more often for debug builds\ndue to not received events. Bumping up the value here seems to\nhelp.\n\nDepends on D76835"}, {"text": "Comment on attachment 9151976\nBug 1637363 - [remote] Bump default timeout for history.record() to 2s due to timeouts of debug builds.\n\nRevision D76992 was moved to bug 1638196. Setting attachment 9151976 to obsolete.", "id": 14845623, "author": "phab-bot@bmo.tld", "attachment_id": 9151976, "is_private": false, "bug_id": 1637363, "count": 9, "creation_time": "2020-05-27T04:55:26Z", "raw_text": "Revision D76992 was moved to bug 1638196. Setting attachment 9151976 to obsolete.", "time": "2020-05-27T04:55:26Z", "creator": "phab-bot@bmo.tld", "tags": []}, {"is_private": false, "bug_id": 1637363, "id": 14851618, "author": "pulsebot@bots.tld", "attachment_id": null, "text": "Pushed by hskupin@mozilla.com:\nhttps://hg.mozilla.org/integration/autoland/rev/bf7719c227fb\n[remote] Use frameId of the related browsing context for Network events. r=remote-protocol-reviewers,maja_zf", "tags": [], "creator": "pulsebot@bots.tld", "time": "2020-05-29T13:29:26Z", "raw_text": "Pushed by hskupin@mozilla.com:\nhttps://hg.mozilla.org/integration/autoland/rev/bf7719c227fb\n[remote] Use frameId of the related browsing context for Network events. r=remote-protocol-reviewers,maja_zf", "count": 10, "creation_time": "2020-05-29T13:29:26Z"}, {"attachment_id": null, "id": 14852557, "author": "ccoroiu@mozilla.com", "text": "https://hg.mozilla.org/mozilla-central/rev/bf7719c227fb", "is_private": false, "bug_id": 1637363, "raw_text": "https://hg.mozilla.org/mozilla-central/rev/bf7719c227fb", "creation_time": "2020-05-29T21:49:55Z", "count": 11, "tags": ["bugherder"], "time": "2020-05-29T21:49:55Z", "creator": "ccoroiu@mozilla.com"}]}}, "comments": {}}