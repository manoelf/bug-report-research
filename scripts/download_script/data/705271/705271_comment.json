{"comments": {}, "bugs": {"705271": {"comments": [{"creation_time": "2011-11-25T14:02:30Z", "raw_text": "The type attribute on XUL iframe and browser tags is settable to \"content\" after the element has been added to the DOM tree even though the level of access is fixed once the element has been added.\n\nhttps://developer.mozilla.org/en/XUL/iframe#a-browser.type\n\nDevelopers who do this can then mistakenly load remote websites into xul iframe/browsers as chrome when they believe they are safely loaded as content, creating a security risk for the user.\n\nSetting the type attribute on an iframe/browser after being added to the document should throw an error to protect the user and alert the developer to the issue.", "creator": "awilliamson@mozilla.com", "text": "The type attribute on XUL iframe and browser tags is settable to \"content\" after the element has been added to the DOM tree even though the level of access is fixed once the element has been added.\n\nhttps://developer.mozilla.org/en/XUL/iframe#a-browser.type\n\nDevelopers who do this can then mistakenly load remote websites into xul iframe/browsers as chrome when they believe they are safely loaded as content, creating a security risk for the user.\n\nSetting the type attribute on an iframe/browser after being added to the document should throw an error to protect the user and alert the developer to the issue.", "attachment_id": null, "time": "2011-11-25T14:02:30Z", "author": "awilliamson@mozilla.com", "count": 0, "is_private": false, "tags": [], "id": 5872203, "bug_id": 705271}, {"id": 5872484, "count": 1, "is_private": false, "tags": [], "bug_id": 705271, "raw_text": "Note that the type attribute can be changed later, and is, for example, by the tabbrowser between 'content' and 'content-primary'", "creation_time": "2011-11-25T17:05:31Z", "time": "2011-11-25T17:05:31Z", "attachment_id": null, "text": "Note that the type attribute can be changed later, and is, for example, by the tabbrowser between 'content' and 'content-primary'", "author": "enndeakin@gmail.com", "creator": "enndeakin@gmail.com"}, {"bug_id": 705271, "is_private": false, "count": 2, "tags": [], "id": 5872492, "text": "summary updated slightly to reflect its just chrome -> content that's the issue.", "attachment_id": null, "time": "2011-11-25T17:11:23Z", "creation_time": "2011-11-25T17:11:23Z", "raw_text": "summary updated slightly to reflect its just chrome -> content that's the issue.", "creator": "awilliamson@mozilla.com", "author": "awilliamson@mozilla.com"}, {"creation_time": "2011-11-30T21:46:37Z", "raw_text": "Are we talking log an error to the console, or are we talking throw an exception?  I can see doing both, once we have a frameloader...", "time": "2011-11-30T21:46:37Z", "attachment_id": null, "text": "Are we talking log an error to the console, or are we talking throw an exception?  I can see doing both, once we have a frameloader...", "id": 5883473, "is_private": false, "count": 3, "tags": [], "bug_id": 705271, "author": "bzbarsky@mit.edu", "creator": "bzbarsky@mit.edu"}, {"bug_id": 705271, "id": 5886912, "count": 4, "is_private": false, "tags": [], "time": "2011-12-01T23:45:24Z", "attachment_id": null, "text": "I'd prefer throwing an exception - it would break some addons but arguably they're broken at the moment in a way.  \n\nI'm cc'ing Jorge on this in case he has an opinion on addon compatibility.", "creation_time": "2011-12-01T23:45:24Z", "raw_text": "I'd prefer throwing an exception - it would break some addons but arguably they're broken at the moment in a way.  \n\nI'm cc'ing Jorge on this in case he has an opinion on addon compatibility.", "author": "awilliamson@mozilla.com", "creator": "awilliamson@mozilla.com"}, {"bug_id": 705271, "id": 5888226, "tags": [], "is_private": false, "count": 5, "attachment_id": null, "time": "2011-12-02T15:47:38Z", "text": "I agree with making it an exception. Flagging for add-on compat, since we would need to communicate this when implemented.", "creation_time": "2011-12-02T15:47:38Z", "raw_text": "I agree with making it an exception. Flagging for add-on compat, since we would need to communicate this when implemented.", "author": "jorgev@fastmail.fm", "creator": "jorgev@fastmail.fm"}, {"tags": [], "count": 6, "is_private": false, "id": 14703208, "bug_id": 705271, "raw_text": "It looks like we sort of try to cope with this in https://searchfox.org/mozilla-central/source/dom/base/nsFrameLoader.cpp#3101 now, but that seems sketchy to me (and is intermingled with changes relating to the `primary` attribute). Nika, is there any reason we shouldn't just cache the `type` value when the XUL Frame Element's `BindToTree` fires and rely only on that instead of attribute gets? This would require reinsertion of the framing element if consumers want to change it, that seems OK to me, and it seems like some of the current code could be simplified if we did this.\n\nAlternatively, if we really want to support changing this without reinsertion (what should happen to the browsingcontext? Presumably that needs recreating if we're changing the outcome of calling `IsContent()`...), perhaps we can clarify what this method is trying to do for changes to primary vs. type attributes?", "creation_time": "2020-03-18T19:34:19Z", "text": "It looks like we sort of try to cope with this in https://searchfox.org/mozilla-central/source/dom/base/nsFrameLoader.cpp#3101 now, but that seems sketchy to me (and is intermingled with changes relating to the `primary` attribute). Nika, is there any reason we shouldn't just cache the `type` value when the XUL Frame Element's `BindToTree` fires and rely only on that instead of attribute gets? This would require reinsertion of the framing element if consumers want to change it, that seems OK to me, and it seems like some of the current code could be simplified if we did this.\n\nAlternatively, if we really want to support changing this without reinsertion (what should happen to the browsingcontext? Presumably that needs recreating if we're changing the outcome of calling `IsContent()`...), perhaps we can clarify what this method is trying to do for changes to primary vs. type attributes?", "creator": "gijskruitbosch+bugs@gmail.com", "author": "gijskruitbosch+bugs@gmail.com", "attachment_id": null, "time": "2020-03-18T19:34:19Z"}, {"creator": "nika@thelayzells.com", "author": "nika@thelayzells.com", "count": 7, "is_private": false, "tags": [], "id": 14711520, "bug_id": 705271, "raw_text": "(In reply to :Gijs (he/him) from comment #6)\n> It looks like we sort of try to cope with this in https://searchfox.org/mozilla-central/source/dom/base/nsFrameLoader.cpp#3101 now, but that seems sketchy to me (and is intermingled with changes relating to the `primary` attribute).\n\nI think that method call is a bit deceptive, and is only used to control the `mPrimaryContentShell` attribute on the `AppWindow` object (https://searchfox.org/mozilla-central/rev/202a285024f174c2d2bf2152d9cba90a03723eab/xpfe/appshell/AppWindow.cpp#2030,2035,2043). It never actually changes the type of the inner `nsDocShell`, as that property is completely immutable.\n\n> Nika, is there any reason we shouldn't just cache the `type` value when the XUL Frame Element's `BindToTree` fires and rely only on that instead of attribute gets? This would require reinsertion of the framing element if consumers want to change it, that seems OK to me, and it seems like some of the current code could be simplified if we did this.\n\nIt's already required to re-insert the framing element if consumers want to change it, so that wouldn't be a significant change here. It's already sort-of cached, as when the `BrowsingContext` is created (which is performed within `BindToTree` from the `nsFrameLoader`'s constructor), it reads the `type` attribute once, and caches it as the `mType` field on the created `BrowsingContext`, which is completely immutable (via https://searchfox.org/mozilla-central/rev/202a285024f174c2d2bf2152d9cba90a03723eab/dom/base/nsFrameLoader.cpp#237).\n\nWe should probably ensure that it's only read in this one place, and change other code which would read the attribute to instead inspect the `BrowsingContext` within the `nsFrameLoader` to achieve this same effect.", "creation_time": "2020-03-23T16:33:59Z", "text": "(In reply to :Gijs (he/him) from comment #6)\n> It looks like we sort of try to cope with this in https://searchfox.org/mozilla-central/source/dom/base/nsFrameLoader.cpp#3101 now, but that seems sketchy to me (and is intermingled with changes relating to the `primary` attribute).\n\nI think that method call is a bit deceptive, and is only used to control the `mPrimaryContentShell` attribute on the `AppWindow` object (https://searchfox.org/mozilla-central/rev/202a285024f174c2d2bf2152d9cba90a03723eab/xpfe/appshell/AppWindow.cpp#2030,2035,2043). It never actually changes the type of the inner `nsDocShell`, as that property is completely immutable.\n\n> Nika, is there any reason we shouldn't just cache the `type` value when the XUL Frame Element's `BindToTree` fires and rely only on that instead of attribute gets? This would require reinsertion of the framing element if consumers want to change it, that seems OK to me, and it seems like some of the current code could be simplified if we did this.\n\nIt's already required to re-insert the framing element if consumers want to change it, so that wouldn't be a significant change here. It's already sort-of cached, as when the `BrowsingContext` is created (which is performed within `BindToTree` from the `nsFrameLoader`'s constructor), it reads the `type` attribute once, and caches it as the `mType` field on the created `BrowsingContext`, which is completely immutable (via https://searchfox.org/mozilla-central/rev/202a285024f174c2d2bf2152d9cba90a03723eab/dom/base/nsFrameLoader.cpp#237).\n\nWe should probably ensure that it's only read in this one place, and change other code which would read the attribute to instead inspect the `BrowsingContext` within the `nsFrameLoader` to achieve this same effect.", "attachment_id": null, "time": "2020-03-23T16:33:59Z"}]}}}