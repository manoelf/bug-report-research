{"comments": {}, "bugs": {"649501": {"comments": [{"attachment_id": null, "is_private": false, "raw_text": "I'm not really sure of where to request this, so please redirect me if I'm wrong.\n\nI'm trying to figure out if we can make it easier for newbies to get involved in mozilla. One nasty step is that newbies who provide patches are generally asked to push to tryserver, which they have no access to. And so begins the dance of frustration as they try to get people who have other priorities to push for them. I'd like to remove this bottleneck, or at least improve it.\n\nWhat are the reasons for requiring level 1 access? Off the top of my head:\n\n- it needs ssh keys\n- it gets the contributor agreement\n- fear of DDOS\n\nI don't believe any of these are important enough to introduce this bottleneck.", "bug_id": 649501, "creation_time": "2011-04-12T21:37:06Z", "creator": "paul.biggar@gmail.com", "tags": [], "author": "paul.biggar@gmail.com", "time": "2011-04-12T21:37:06Z", "id": 5404904, "text": "I'm not really sure of where to request this, so please redirect me if I'm wrong.\n\nI'm trying to figure out if we can make it easier for newbies to get involved in mozilla. One nasty step is that newbies who provide patches are generally asked to push to tryserver, which they have no access to. And so begins the dance of frustration as they try to get people who have other priorities to push for them. I'd like to remove this bottleneck, or at least improve it.\n\nWhat are the reasons for requiring level 1 access? Off the top of my head:\n\n- it needs ssh keys\n- it gets the contributor agreement\n- fear of DDOS\n\nI don't believe any of these are important enough to introduce this bottleneck.", "count": 0}, {"id": 5404908, "time": "2011-04-12T21:38:30Z", "is_private": false, "tags": [], "raw_text": "It's not just DDOS, they can run arbitrary code inside the build network.  AIUI that's why this has been WONTFIXed in the past.", "bug_id": 649501, "creation_time": "2011-04-12T21:38:30Z", "author": "khuey@kylehuey.com", "text": "It's not just DDOS, they can run arbitrary code inside the build network.  AIUI that's why this has been WONTFIXed in the past.", "count": 1, "attachment_id": null, "creator": "khuey@kylehuey.com"}, {"tags": [], "raw_text": "How about the level 0 proposal here?\nhttp://groups.google.com/group/mozilla.dev.planning/msg/c1f4877943a01620", "bug_id": 649501, "creation_time": "2011-04-12T21:43:27Z", "is_private": false, "id": 5404928, "time": "2011-04-12T21:43:27Z", "creator": "emorley@mozilla.com", "attachment_id": null, "text": "How about the level 0 proposal here?\nhttp://groups.google.com/group/mozilla.dev.planning/msg/c1f4877943a01620", "count": 2, "author": "emorley@mozilla.com"}, {"attachment_id": null, "creator": "gerv@mozilla.org", "author": "gerv@mozilla.org", "count": 3, "text": "This has been WONTFIXED in the past, for precisely the reason Kyle gives. Securing this is hard.\n\nThe Level 0 proposal doesn't adequately match the downside for Mozilla (compromise of our internal network) with the reputational risk to the individual. If some community member signs off on harmful code, and we get rooted, they can just shrug their shoulders and say \"well, it was well hidden\". I suspect you will not get infrasec to sign off on that.\n\nIs there a way we can make it not necessary for them to push-to-try, for example doing local builds and tests?\n\nGerv", "is_private": false, "creation_time": "2011-04-14T09:35:06Z", "bug_id": 649501, "raw_text": "This has been WONTFIXED in the past, for precisely the reason Kyle gives. Securing this is hard.\n\nThe Level 0 proposal doesn't adequately match the downside for Mozilla (compromise of our internal network) with the reputational risk to the individual. If some community member signs off on harmful code, and we get rooted, they can just shrug their shoulders and say \"well, it was well hidden\". I suspect you will not get infrasec to sign off on that.\n\nIs there a way we can make it not necessary for them to push-to-try, for example doing local builds and tests?\n\nGerv", "tags": [], "time": "2011-04-14T09:35:06Z", "id": 5409017}, {"text": "(In reply to comment #3)\n> Is there a way we can make it not necessary for them to push-to-try, for\n> example doing local builds and tests?\n\nBug 616089 suggests:\n\n> * A link on the desktop to run test suites against the last local build", "count": 4, "author": "emorley@mozilla.com", "creator": "emorley@mozilla.com", "attachment_id": null, "time": "2011-04-14T11:54:00Z", "id": 5409142, "bug_id": 649501, "creation_time": "2011-04-14T11:54:00Z", "raw_text": "(In reply to comment #3)\n> Is there a way we can make it not necessary for them to push-to-try, for\n> example doing local builds and tests?\n\nBug 616089 suggests:\n\n> * A link on the desktop to run test suites against the last local build", "tags": [], "is_private": false}, {"tags": [], "raw_text": "(In reply to comment #3)\n> This has been WONTFIXED in the past, for precisely the reason Kyle gives.\n> Securing this is hard.\n\nRight. The ways through this that I can think of are:\n\n- enable tryserver stuff to run on EC2, with each build in it's own VM\n- set up appropriate sandboxes \n\nIn other words, long term at best, if we can get appropriate people on board. And to be honest, since these are pretty big changes, I'm not convinced of the trade-offs.\n\nI'm thinking a better way to achieve the same goal is to optimize the pipeline for getting level 1 access. Gerv, I think you know something about setting up a website for doing this?\n\n\n> Is there a way we can make it not necessary for them to push-to-try, for\n> example doing local builds and tests?\n\nSort of. This can lead to backouts, which will scare newcomers off. And also, in general we should aim to make the same facilities available to new contributors as new employees.", "bug_id": 649501, "creation_time": "2011-04-15T10:58:32Z", "is_private": false, "id": 5411551, "time": "2011-04-15T10:58:32Z", "creator": "paul.biggar@gmail.com", "attachment_id": null, "text": "(In reply to comment #3)\n> This has been WONTFIXED in the past, for precisely the reason Kyle gives.\n> Securing this is hard.\n\nRight. The ways through this that I can think of are:\n\n- enable tryserver stuff to run on EC2, with each build in it's own VM\n- set up appropriate sandboxes \n\nIn other words, long term at best, if we can get appropriate people on board. And to be honest, since these are pretty big changes, I'm not convinced of the trade-offs.\n\nI'm thinking a better way to achieve the same goal is to optimize the pipeline for getting level 1 access. Gerv, I think you know something about setting up a website for doing this?\n\n\n> Is there a way we can make it not necessary for them to push-to-try, for\n> example doing local builds and tests?\n\nSort of. This can lead to backouts, which will scare newcomers off. And also, in general we should aim to make the same facilities available to new contributors as new employees.", "count": 5, "author": "paul.biggar@gmail.com"}, {"attachment_id": null, "is_private": false, "bug_id": 649501, "creation_time": "2011-04-15T18:57:17Z", "raw_text": "Getting Level 1 access isn't terribly difficult.  Besides the committer's agreement (which AIUI is required for legal reasons) all someone has to do is post an ssh key in a bug and get a voucher.  I, at least, will vouch for L1 access for anyone who's made at least one substantive patch, so the bar here isn't too high.\n\nI think a large part of the difficulty here is that people don't know when it's appropriate to ask for commit access.  Back in the days of the old commit policy (the one that required sr, and a vouch from someone who hadn't read your code) I contributed for almost a year before getting commit access and didn't dare ask for it before I was told by somebody that I should get it.\n\nThe barriers here are:\n\n1. New contributors have to learn that the tryserver and L1 access exist\n2. ........................ work up the nerve to ask for it.\n3. ........................ find a voucher.\n4. ........................ submit an SSH key.\n5. ........................ submit the committer's agreement.\n\nRecently I've filed a few bugs for L1 access for new contributors that I'm aware of and who should be taking advantage of L1 access.  If an existing project member files a bug for L1 access that eliminates barriers 1-3 above.  I think the real solution here is to make this practice more widespread.", "tags": [], "creator": "khuey@kylehuey.com", "time": "2011-04-15T18:57:17Z", "author": "khuey@kylehuey.com", "id": 5412501, "text": "Getting Level 1 access isn't terribly difficult.  Besides the committer's agreement (which AIUI is required for legal reasons) all someone has to do is post an ssh key in a bug and get a voucher.  I, at least, will vouch for L1 access for anyone who's made at least one substantive patch, so the bar here isn't too high.\n\nI think a large part of the difficulty here is that people don't know when it's appropriate to ask for commit access.  Back in the days of the old commit policy (the one that required sr, and a vouch from someone who hadn't read your code) I contributed for almost a year before getting commit access and didn't dare ask for it before I was told by somebody that I should get it.\n\nThe barriers here are:\n\n1. New contributors have to learn that the tryserver and L1 access exist\n2. ........................ work up the nerve to ask for it.\n3. ........................ find a voucher.\n4. ........................ submit an SSH key.\n5. ........................ submit the committer's agreement.\n\nRecently I've filed a few bugs for L1 access for new contributors that I'm aware of and who should be taking advantage of L1 access.  If an existing project member files a bug for L1 access that eliminates barriers 1-3 above.  I think the real solution here is to make this practice more widespread.", "count": 6}, {"attachment_id": null, "is_private": false, "bug_id": 649501, "creation_time": "2011-04-15T18:59:28Z", "raw_text": "E.g. Bug 647506", "tags": [], "creator": "khuey@kylehuey.com", "time": "2011-04-15T18:59:28Z", "author": "khuey@kylehuey.com", "id": 5412507, "count": 7, "text": "E.g. Bug 647506"}, {"creator": "khuey@kylehuey.com", "tags": [], "raw_text": "tl;dr for my post above: we should be giving new contributors access to the tryserver, not making people come request it from us.", "bug_id": 649501, "creation_time": "2011-04-15T19:02:11Z", "attachment_id": null, "is_private": false, "count": 8, "text": "tl;dr for my post above: we should be giving new contributors access to the tryserver, not making people come request it from us.", "id": 5412515, "author": "khuey@kylehuey.com", "time": "2011-04-15T19:02:11Z"}, {"author": "gerv@mozilla.org", "time": "2011-04-16T11:37:40Z", "id": 5413642, "text": "(In reply to comment #5)\n> I'm thinking a better way to achieve the same goal is to optimize the pipeline\n> for getting level 1 access. Gerv, I think you know something about setting up > a website for doing this?\n\nWell, there was talk of a website for a click-through for the Committer's Agreement, but it's currently vapourware. The current rules are pretty good - then even allow taking a digital photo of your signed form and attaching it to your access bug:\nhttp://www.mozilla.org/hacking/notification/\n\nSo the process is:\n- File a bug asking for L1 access\n- Fill in the form and submit it using any of the methods available\n- Get another person in the community with L2 access or above to vouch for you\n- Profit\n\nGerv", "count": 9, "attachment_id": null, "is_private": false, "raw_text": "(In reply to comment #5)\n> I'm thinking a better way to achieve the same goal is to optimize the pipeline\n> for getting level 1 access. Gerv, I think you know something about setting up > a website for doing this?\n\nWell, there was talk of a website for a click-through for the Committer's Agreement, but it's currently vapourware. The current rules are pretty good - then even allow taking a digital photo of your signed form and attaching it to your access bug:\nhttp://www.mozilla.org/hacking/notification/\n\nSo the process is:\n- File a bug asking for L1 access\n- Fill in the form and submit it using any of the methods available\n- Get another person in the community with L2 access or above to vouch for you\n- Profit\n\nGerv", "creation_time": "2011-04-16T11:37:40Z", "bug_id": 649501, "creator": "gerv@mozilla.org", "tags": []}, {"is_private": false, "bug_id": 649501, "creation_time": "2011-04-16T11:52:51Z", "raw_text": "I think at the backend, there are many humans in the loop, which means we are subject to PTO, weekends, time zones, etc. I had hoped the website would automate this somehow, but that's probably difficult.\n\nLet me see if I can look through old l1 requests and see how long they take. I perceive they take multiple days, but perhaps I'm mistaken.", "tags": [], "time": "2011-04-16T11:52:51Z", "id": 5413647, "attachment_id": null, "creator": "paul.biggar@gmail.com", "author": "paul.biggar@gmail.com", "count": 10, "text": "I think at the backend, there are many humans in the loop, which means we are subject to PTO, weekends, time zones, etc. I had hoped the website would automate this somehow, but that's probably difficult.\n\nLet me see if I can look through old l1 requests and see how long they take. I perceive they take multiple days, but perhaps I'm mistaken."}, {"text": "We can't automate it because there has to be a human involved - if it were automatable, then it would be the same as having it open to anyone. A human has to vouch for the person, and a human has to create the account. There should be multiple people who can do those roles, in both cases - if it's not true, e.g. in IT, then we need to ask IT to fix that. But I'm pretty sure it is.\n\nGerv", "count": 11, "author": "gerv@mozilla.org", "creator": "gerv@mozilla.org", "attachment_id": null, "time": "2011-04-16T11:55:12Z", "id": 5413648, "raw_text": "We can't automate it because there has to be a human involved - if it were automatable, then it would be the same as having it open to anyone. A human has to vouch for the person, and a human has to create the account. There should be multiple people who can do those roles, in both cases - if it's not true, e.g. in IT, then we need to ask IT to fix that. But I'm pretty sure it is.\n\nGerv", "bug_id": 649501, "creation_time": "2011-04-16T11:55:12Z", "tags": [], "is_private": false}, {"id": 5413663, "time": "2011-04-16T12:23:30Z", "tags": [], "creation_time": "2011-04-16T12:23:30Z", "bug_id": 649501, "raw_text": "The site could require the voucher to log in using their LDAP credentials to vouch, so it would have the same security as the current implementation.\n\nBut let me do some research here before we move this along. I want to figure out where the bottlenecks are. My suspicions are (copying khuey's chart):\n\n1. New contributors have to learn that the tryserver and L1 access exist\n2. ........................ work up the nerve to ask for it.\n3. ........................ [explicitly ask or CC] a voucher.\n6. Human process behind the scenes.\n\nIf it's 1-3, I don't want to incorrectly malign those involved in step 6.", "is_private": false, "count": 12, "text": "The site could require the voucher to log in using their LDAP credentials to vouch, so it would have the same security as the current implementation.\n\nBut let me do some research here before we move this along. I want to figure out where the bottlenecks are. My suspicions are (copying khuey's chart):\n\n1. New contributors have to learn that the tryserver and L1 access exist\n2. ........................ work up the nerve to ask for it.\n3. ........................ [explicitly ask or CC] a voucher.\n6. Human process behind the scenes.\n\nIf it's 1-3, I don't want to incorrectly malign those involved in step 6.", "author": "paul.biggar@gmail.com", "creator": "paul.biggar@gmail.com", "attachment_id": null}, {"creator": "paul.biggar@gmail.com", "tags": [], "raw_text": "sfink suggested something like the following:\n\n- new contributors (without level 1 access) would push to tryserver\n- their jobs would be held in a queue, visible on tbpl\n- tbpl users could view the job, and authorize it using their LDAP credentials\n\nPolitically and technically, how possible is this?", "bug_id": 649501, "creation_time": "2011-04-27T23:49:44Z", "attachment_id": null, "is_private": false, "count": 13, "text": "sfink suggested something like the following:\n\n- new contributors (without level 1 access) would push to tryserver\n- their jobs would be held in a queue, visible on tbpl\n- tbpl users could view the job, and authorize it using their LDAP credentials\n\nPolitically and technically, how possible is this?", "id": 5436129, "author": "paul.biggar@gmail.com", "time": "2011-04-27T23:49:44Z"}, {"attachment_id": null, "creator": "sphink@gmail.com", "author": "sphink@gmail.com", "text": "The tbpl functionality would be handy for automating LandingQueues for production repos, too.\n\n  if (SSH key is the public one)\n    hold_in_queue = true\n  else if status is METERED\n    hold_in_queue = true\n\nThen sheriffs could allow things through by accepting them from the moderation queue.\n\nThis isn't as nice as it sounds, since current practice also includes people queuing up before their patches are 100% ready and other shenanigans. But it would still provide a nice part of the solution.\n\nHeck, it would even serve as a base for automated metering (eg once the robot sees enough greens, it grabs the next push from the queue. Or it just waits N minutes between pushes. Whatever is needed for the current variety of breakage that necessitated the metering in the first place.)", "count": 14, "is_private": false, "raw_text": "The tbpl functionality would be handy for automating LandingQueues for production repos, too.\n\n  if (SSH key is the public one)\n    hold_in_queue = true\n  else if status is METERED\n    hold_in_queue = true\n\nThen sheriffs could allow things through by accepting them from the moderation queue.\n\nThis isn't as nice as it sounds, since current practice also includes people queuing up before their patches are 100% ready and other shenanigans. But it would still provide a nice part of the solution.\n\nHeck, it would even serve as a base for automated metering (eg once the robot sees enough greens, it grabs the next push from the queue. Or it just waits N minutes between pushes. Whatever is needed for the current variety of breakage that necessitated the metering in the first place.)", "bug_id": 649501, "creation_time": "2011-04-30T00:02:47Z", "tags": [], "time": "2011-04-30T00:02:47Z", "id": 5440794}, {"attachment_id": null, "creator": "gerv@mozilla.org", "author": "gerv@mozilla.org", "count": 15, "text": "(In reply to comment #13)\n> sfink suggested something like the following:\n> \n> - new contributors (without level 1 access) would push to tryserver\n> - their jobs would be held in a queue, visible on tbpl\n> - tbpl users could view the job, and authorize it using their LDAP credentials\n> \n> Politically and technically, how possible is this?\n\nSurely if someone has Level 2 (normal) access, and they trust this person to push to try, they could just vouch for the person to get Level 1 access and then it wouldn't need this system?\n\nThe risk of the above is that it means people will just say \"yeah, sure, it's probably OK\" for people they don't know very well, and it unacceptably raises the risk. You can't get around the fact that pushing to try requires a certain level of trust in a person, except by fixing the try server to be sandboxed - and that's hard (so I'm told).\n\nGerv", "is_private": false, "tags": [], "raw_text": "(In reply to comment #13)\n> sfink suggested something like the following:\n> \n> - new contributors (without level 1 access) would push to tryserver\n> - their jobs would be held in a queue, visible on tbpl\n> - tbpl users could view the job, and authorize it using their LDAP credentials\n> \n> Politically and technically, how possible is this?\n\nSurely if someone has Level 2 (normal) access, and they trust this person to push to try, they could just vouch for the person to get Level 1 access and then it wouldn't need this system?\n\nThe risk of the above is that it means people will just say \"yeah, sure, it's probably OK\" for people they don't know very well, and it unacceptably raises the risk. You can't get around the fact that pushing to try requires a certain level of trust in a person, except by fixing the try server to be sandboxed - and that's hard (so I'm told).\n\nGerv", "creation_time": "2011-04-30T10:17:25Z", "bug_id": 649501, "id": 5441100, "time": "2011-04-30T10:17:25Z"}, {"count": 16, "text": "(In reply to comment #15)\n> You can't get around the fact that pushing to try requires a certain\n> level of trust in a person\n\nI think the point is that the pusher would be able to give the code a once-over, rather than having to trust the individual.", "time": "2011-04-30T10:48:03Z", "author": "paul.biggar@gmail.com", "id": 5441107, "creation_time": "2011-04-30T10:48:03Z", "bug_id": 649501, "raw_text": "(In reply to comment #15)\n> You can't get around the fact that pushing to try requires a certain\n> level of trust in a person\n\nI think the point is that the pusher would be able to give the code a once-over, rather than having to trust the individual.", "tags": [], "creator": "paul.biggar@gmail.com", "attachment_id": null, "is_private": false}, {"is_private": false, "attachment_id": null, "raw_text": "(In reply to comment #15)\n> Surely if someone has Level 2 (normal) access, and they trust this person to\n> push to try, they could just vouch for the person to get Level 1 access and\n> then it wouldn't need this system?\n\nYes, absolutely. This mechanism is for people a level 2 user does *not* trust enough yet.\n\n\"Level x access\" is a shorthand. It says \"we trust all of this user's pushes\". The security question here is only relative to pushes, not people (pushers). So the proposal is that in situations where we are not willing to trust a push to be safe based on the identity of the pusher, that we have a fallback mechanism to mark the push itself as trusted.\n\nWhat is required to mark a push as trusted is debatable. A level 2 user can vouch for the push's safety. Should a level 1 user be able to as well? After all, if they're ok with it they have the rights to push it themselves. But I'm more comfortable with vouching that somebody won't push harmful code than I am vouching that somebody is capable of detecting harmful code in others' pushes, so I'd be ok with saying that level 2 is required for moderating (accepting things in the queue.)\n\n> The risk of the above is that it means people will just say \"yeah, sure, it's\n> probably OK\" for people they don't know very well, and it unacceptably raises\n> the risk. You can't get around the fact that pushing to try requires a certain\n> level of trust in a person, except by fixing the try server to be sandboxed -\n> and that's hard (so I'm told).\n\nNo, pushing to try requires a certain level of trust in the code being pushed. So you're right; what you describe above *is* the risk, but I don't see why it can't be adequately mitigated by making sure that per-push vouchers recognize what they are doing (and in the interface, making sure they see the code they're accepting before allowing it through.)\n\nI'm skeptical of sandboxing as an entire solution, though it might be nice for requiring a little less trust here and there. Still, I see it as more useful for incompetence than for malice.", "creation_time": "2011-04-30T22:04:42Z", "bug_id": 649501, "creator": "sphink@gmail.com", "tags": [], "author": "sphink@gmail.com", "time": "2011-04-30T22:04:42Z", "id": 5441505, "text": "(In reply to comment #15)\n> Surely if someone has Level 2 (normal) access, and they trust this person to\n> push to try, they could just vouch for the person to get Level 1 access and\n> then it wouldn't need this system?\n\nYes, absolutely. This mechanism is for people a level 2 user does *not* trust enough yet.\n\n\"Level x access\" is a shorthand. It says \"we trust all of this user's pushes\". The security question here is only relative to pushes, not people (pushers). So the proposal is that in situations where we are not willing to trust a push to be safe based on the identity of the pusher, that we have a fallback mechanism to mark the push itself as trusted.\n\nWhat is required to mark a push as trusted is debatable. A level 2 user can vouch for the push's safety. Should a level 1 user be able to as well? After all, if they're ok with it they have the rights to push it themselves. But I'm more comfortable with vouching that somebody won't push harmful code than I am vouching that somebody is capable of detecting harmful code in others' pushes, so I'd be ok with saying that level 2 is required for moderating (accepting things in the queue.)\n\n> The risk of the above is that it means people will just say \"yeah, sure, it's\n> probably OK\" for people they don't know very well, and it unacceptably raises\n> the risk. You can't get around the fact that pushing to try requires a certain\n> level of trust in a person, except by fixing the try server to be sandboxed -\n> and that's hard (so I'm told).\n\nNo, pushing to try requires a certain level of trust in the code being pushed. So you're right; what you describe above *is* the risk, but I don't see why it can't be adequately mitigated by making sure that per-push vouchers recognize what they are doing (and in the interface, making sure they see the code they're accepting before allowing it through.)\n\nI'm skeptical of sandboxing as an entire solution, though it might be nice for requiring a little less trust here and there. Still, I see it as more useful for incompetence than for malice.", "count": 17}, {"text": "Well, I'm still not convinced, but that's OK because it's not my call :-) It's infrasec you will need to convince.\n\nGerv", "count": 18, "author": "gerv@mozilla.org", "creator": "gerv@mozilla.org", "attachment_id": null, "time": "2011-05-02T11:15:43Z", "id": 5442588, "creation_time": "2011-05-02T11:15:43Z", "bug_id": 649501, "raw_text": "Well, I'm still not convinced, but that's OK because it's not my call :-) It's infrasec you will need to convince.\n\nGerv", "tags": [], "is_private": false}]}}}