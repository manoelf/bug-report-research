{"bugs": {"1629663": {"comments": [{"bug_id": 1629663, "id": 14752555, "attachment_id": null, "creator": "rrelyea@redhat.com", "tags": [], "author": "rrelyea@redhat.com", "creation_time": "2020-04-13T21:13:50Z", "time": "2020-04-13T21:13:50Z", "text": "We found another KDF function in libreswan that is not using the NSS KDF API.\n\nUnfortunately, it seems the existing IKE KDF's in NSS are not usable for the Quick Mode use.\n \nThe libreswan code is in compute_proto_keymat() and the specification is in  https://tools.ietf.org/html/rfc2409#section-5.5\n \n It needs:\n\n   KEYMAT = prf(SKEYID_d, [g(qm)^xy ] | protocol | SPI | Ni_b | Nr_b).\n \nwhich an be thought of as:\n \n  KEYMAT = prf(KEY, [KEY] | BYTES)\n \nbut with the kicker that it also does multiple rounds aka key expansion:\n \n      KEYMAT = K1 | K2 | K3 | ...\n \n      where\n \n        K1 = prf(KEY, [KEY] | BYTES)\n        K2 = prf(KEY, K1 | [KEY] | BYTES)\n        K3 = prf(KEY, K1 | [KEY] | BYTES)\n        etc.\n \nto generate the needed keying material >PRF size\n \nlooking at NSS:\n\nsftk_ike_prf() seems to be the closest; it can compute:\n   2. prf(inKey, Ni|Nr); (bDataAsKkey=FALSE, bRekey=FALSE)\n   3. prf(inKey, newKey | Ni | Nr); (bDataAsKey=FALSE, bRekey=TRUE) which look good except:\n  - it doesn't do multiple rounds aka key expansion\n\nsftk_ike1_prf() can compute:\n     prf(inKey, gxyKey || CKYi || CKYr || key_number)\n\nIt's problems are:\n  - key number byte isn't an option\n  - the gxyKey isn't optional\n  - it doesn't do multiple rounds aka key expansion (technically the RFC says it should, but I'm not sure it matters)\n\nsftk_ike1_appendix_b_prf() can only compute:\n  K1 = prf(K, 0x00)\n  K2 = prf(K, K1)\nso it cannot be used either (it does do multiple rounds but with wrong values)\n\nsftk_ike_prf_plus() is like sftk_ike1_appendix_b_prf() - multiple\nrounds but with wrong values so it too cannot be used.", "raw_text": "We found another KDF function in libreswan that is not using the NSS KDF API.\n\nUnfortunately, it seems the existing IKE KDF's in NSS are not usable for the Quick Mode use.\n \nThe libreswan code is in compute_proto_keymat() and the specification is in  https://tools.ietf.org/html/rfc2409#section-5.5\n \n It needs:\n\n   KEYMAT = prf(SKEYID_d, [g(qm)^xy ] | protocol | SPI | Ni_b | Nr_b).\n \nwhich an be thought of as:\n \n  KEYMAT = prf(KEY, [KEY] | BYTES)\n \nbut with the kicker that it also does multiple rounds aka key expansion:\n \n      KEYMAT = K1 | K2 | K3 | ...\n \n      where\n \n        K1 = prf(KEY, [KEY] | BYTES)\n        K2 = prf(KEY, K1 | [KEY] | BYTES)\n        K3 = prf(KEY, K1 | [KEY] | BYTES)\n        etc.\n \nto generate the needed keying material >PRF size\n \nlooking at NSS:\n\nsftk_ike_prf() seems to be the closest; it can compute:\n   2. prf(inKey, Ni|Nr); (bDataAsKkey=FALSE, bRekey=FALSE)\n   3. prf(inKey, newKey | Ni | Nr); (bDataAsKey=FALSE, bRekey=TRUE) which look good except:\n  - it doesn't do multiple rounds aka key expansion\n\nsftk_ike1_prf() can compute:\n     prf(inKey, gxyKey || CKYi || CKYr || key_number)\n\nIt's problems are:\n  - key number byte isn't an option\n  - the gxyKey isn't optional\n  - it doesn't do multiple rounds aka key expansion (technically the RFC says it should, but I'm not sure it matters)\n\nsftk_ike1_appendix_b_prf() can only compute:\n  K1 = prf(K, 0x00)\n  K2 = prf(K, K1)\nso it cannot be used either (it does do multiple rounds but with wrong values)\n\nsftk_ike_prf_plus() is like sftk_ike1_appendix_b_prf() - multiple\nrounds but with wrong values so it too cannot be used.", "is_private": false, "count": 0}, {"id": 14770027, "bug_id": 1629663, "author": "rrelyea@redhat.com", "tags": [], "creator": "rrelyea@redhat.com", "attachment_id": 9142146, "is_private": false, "raw_text": "\nWe found another KDF function in libreswan that is not using the NSS KDF API.\n\nUnfortunately, it seems the existing IKE KDF's in NSS are not usable for the\nQuick Mode use.\n\nThe libreswan code is in compute_proto_keymat() and the specification is in https://tools.ietf.org/html/rfc2409#section-5.5\n\nIt needs:\n\nKEYMAT = prf(SKEYID_d, [g(qm)^xy ] | protocol | SPI | Ni_b | Nr_b).\n\nwhich an be thought of as:\nKEYMAT = prf(KEY, [KEY] | BYTES)\n\nbut with the kicker that it also does multiple rounds aka key expansion:\n  KEYMAT = K1 | K2 | K3 | ...\n\n  where\n\n    K1 = prf(KEY, [KEY] | BYTES)\n    K2 = prf(KEY, K1 | [KEY] | BYTES)\n    K3 = prf(KEY, K1 | [KEY] | BYTES)\n    etc.\n\nto generate the needed keying material >PRF size\n\nThis patch implements this by extendind the Appendix B Mechanism to take\nand optional key and data in a new Mechanism parameter structure.  Which\nflavor is used (old CK_MECHANISM_TYPE or the new parameter) is determined by\nthe mechanism parameter lengths. Application which try to use this new feature\non old versions of NSS will get an error (rather than invalid data).", "text": "Created attachment 9142146\nBug 1629663 NSS missing IKEv1 Quick Mode KDF prf\n\n\nWe found another KDF function in libreswan that is not using the NSS KDF API.\n\nUnfortunately, it seems the existing IKE KDF's in NSS are not usable for the\nQuick Mode use.\n\nThe libreswan code is in compute_proto_keymat() and the specification is in https://tools.ietf.org/html/rfc2409#section-5.5\n\nIt needs:\n\nKEYMAT = prf(SKEYID_d, [g(qm)^xy ] | protocol | SPI | Ni_b | Nr_b).\n\nwhich an be thought of as:\nKEYMAT = prf(KEY, [KEY] | BYTES)\n\nbut with the kicker that it also does multiple rounds aka key expansion:\n  KEYMAT = K1 | K2 | K3 | ...\n\n  where\n\n    K1 = prf(KEY, [KEY] | BYTES)\n    K2 = prf(KEY, K1 | [KEY] | BYTES)\n    K3 = prf(KEY, K1 | [KEY] | BYTES)\n    etc.\n\nto generate the needed keying material >PRF size\n\nThis patch implements this by extendind the Appendix B Mechanism to take\nand optional key and data in a new Mechanism parameter structure.  Which\nflavor is used (old CK_MECHANISM_TYPE or the new parameter) is determined by\nthe mechanism parameter lengths. Application which try to use this new feature\non old versions of NSS will get an error (rather than invalid data).", "creation_time": "2020-04-21T19:12:56Z", "time": "2020-04-21T19:12:56Z", "count": 1}]}}, "comments": {}}