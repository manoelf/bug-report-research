{"bugs": {"681626": {"comments": [{"bug_id": 681626, "count": 0, "time": "2011-08-24T13:04:25Z", "tags": [], "text": "Created attachment 555380\nInconsistentHandlingOfTrailingSpace.html\n\nUser Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/13.0.782.112 Safari/535.1\n\nSteps to reproduce:\n\nLoad attached test case.\nWhich contains a contenteditable body with the following Inner Html:\n\"<div>hello </div>\"\n\n1. Click in space right of hello.\n2. Press key 'k'\n\n\nActual results:\n\n1. After click initially insertion point is displayed one space right of hello.\n2. After pressing 'k' \"hellok\" is displayed.\n\n\nExpected results:\n\nbar ('|') means insertion point.\n\nEither (like chrome 13) display \"hello|\" then after keypress display \"hellok|\" \n\nOR (like IE 9) display \"hello |\" then after keypress display \"hello k|\"\n\nAs a work around replacing trailing spaces with &nbsp; works consistently.", "author": "firefox@hindlemail.co.uk", "creation_time": "2011-08-24T13:04:25Z", "creator": "firefox@hindlemail.co.uk", "is_private": false, "id": 5674693, "raw_text": "User Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/13.0.782.112 Safari/535.1\n\nSteps to reproduce:\n\nLoad attached test case.\nWhich contains a contenteditable body with the following Inner Html:\n\"<div>hello </div>\"\n\n1. Click in space right of hello.\n2. Press key 'k'\n\n\nActual results:\n\n1. After click initially insertion point is displayed one space right of hello.\n2. After pressing 'k' \"hellok\" is displayed.\n\n\nExpected results:\n\nbar ('|') means insertion point.\n\nEither (like chrome 13) display \"hello|\" then after keypress display \"hellok|\" \n\nOR (like IE 9) display \"hello |\" then after keypress display \"hello k|\"\n\nAs a work around replacing trailing spaces with &nbsp; works consistently.", "attachment_id": 555380}, {"raw_text": "Confirmed against Nightly but I'd be surprised this not been filed already.", "attachment_id": null, "id": 5676499, "count": 1, "is_private": false, "creator": "xtc4uall@gmail.com", "text": "Confirmed against Nightly but I'd be surprised this not been filed already.", "tags": [], "time": "2011-08-24T23:34:44Z", "bug_id": 681626, "creation_time": "2011-08-24T23:34:44Z", "author": "xtc4uall@gmail.com"}, {"count": 2, "bug_id": 681626, "is_private": false, "creator": "firefox@hindlemail.co.uk", "creation_time": "2011-09-02T12:55:57Z", "author": "firefox@hindlemail.co.uk", "text": "nsWSRunObject::InsertText (in editor/libeditor/html/nsWSRunObject.cpp) deletes the Whitespace:\n\n\n    else if (beforeRun->mType & eTrailingWS)\n    {\n      // need to delete the trailing ws that is before insertion point, because it \n      // would become significant after text inserted.\n      res = DeleteChars(beforeRun->mStartNode, beforeRun->mStartOffset, *aInOutParent, *aInOutOffset,\n                        eOutsideUserSelectAll);\n      NS_ENSURE_SUCCESS(res, res);\n    }\n\nstacktrace:\n\n#0  nsWSRunObject::InsertText (this=0xbf820a80, aStringToInsert=..., \n    aInOutParent=0xbf820b34, aInOutOffset=0xbf820b38, aDoc=0x972768fc)\n    at /home/hindlet/src/hg/mozilla-central/editor/libeditor/html/nsWSRunObject.cpp:334\n#1  0xb5d3a47e in nsHTMLEditRules::WillInsertText (this=0x97587400, \n    aAction=2000, aSelection=0x973f8200, aCancel=0xbf820ce4, \n    aHandled=0xbf820ce8, inString=0xbf820da4, outString=0xbf820c08, \n    aMaxLength=-1)\n    at /home/hindlet/src/hg/mozilla-central/editor/libeditor/html/nsHTMLEditRules.cpp:1480\n#2  0xb5d44905 in WillDoAction (aHandled=0xbf820ce8, aCancel=0xbf820ce4, \n    aInfo=0xbf820c9c, aSelection=0x973f8200, this=0x97587400)\n    at /home/hindlet/src/hg/mozilla-central/editor/libeditor/html/nsHTMLEditRules.cpp:618\n#3  nsHTMLEditRules::WillDoAction (this=0x97587400, aSelection=0x973f8200, \n    aInfo=0xbf820c9c, aCancel=0xbf820ce4, aHandled=0xbf820ce8)\n    at /home/hindlet/src/hg/mozilla-central/editor/libeditor/html/nsHTMLEditRules.cpp:544\n#4  0xb5cb574a in InsertText (aStringToInsert=..., this=0x97585800)\n    at /home/hindlet/src/hg/mozilla-central/editor/libeditor/text/nsPlaintextEditor.cpp:820\n#5  nsPlaintextEditor::InsertText (this=0x97585800, aStringToInsert=...)\n    at /home/hindlet/src/hg/mozilla-central/editor/libeditor/text/nsPlaintextEdi---Type <return> to continue, or q <return> to quit---\ntor.cpp:788\n#6  0xb5cb297a in nsPlaintextEditor::TypedText (this=0x97585800, aString=..., \n    aAction=0)\n    at /home/hindlet/src/hg/mozilla-central/editor/libeditor/text/nsPlaintextEditor.cpp:428\n#7  0xb5d192dd in nsHTMLEditor::TypedText (this=0x97585800, aString=..., \n    aAction=0)\n    at /home/hindlet/src/hg/mozilla-central/editor/libeditor/html/nsHTMLEditor.cpp:1425\n#8  0xb5d1d806 in HandleKeyPressEvent (aKeyEvent=0x97979c94, this=0x97585800)\n    at /home/hindlet/src/hg/mozilla-central/editor/libeditor/html/nsHTMLEditor.cpp:735\n#9  nsHTMLEditor::HandleKeyPressEvent (this=0x97585800, aKeyEvent=0x97979c94)\n    at /home/hindlet/src/hg/mozilla-central/editor/libeditor/html/nsHTMLEditor.cpp:626\n#10 0xb5cc8052 in KeyPress (aKeyEvent=0x97979c40, this=0x96fc3a20)\n    at /home/hindlet/src/hg/mozilla-central/editor/libeditor/base/nsEditorEventListener.cpp:357\n#11 nsEditorEventListener::KeyPress (this=0x96fc3a20, aKeyEvent=0x97979c40)\n    at /home/hindlet/src/hg/mozilla-central/editor/libeditor/base/nsEditorEventListener.cpp:325\n#12 0xb5cc8877 in nsEditorEventListener::HandleEvent (this=0x96fc3a20, \n    aEvent=0x97979c40)", "tags": [], "time": "2011-09-02T12:55:57Z", "attachment_id": null, "raw_text": "nsWSRunObject::InsertText (in editor/libeditor/html/nsWSRunObject.cpp) deletes the Whitespace:\n\n\n    else if (beforeRun->mType & eTrailingWS)\n    {\n      // need to delete the trailing ws that is before insertion point, because it \n      // would become significant after text inserted.\n      res = DeleteChars(beforeRun->mStartNode, beforeRun->mStartOffset, *aInOutParent, *aInOutOffset,\n                        eOutsideUserSelectAll);\n      NS_ENSURE_SUCCESS(res, res);\n    }\n\nstacktrace:\n\n#0  nsWSRunObject::InsertText (this=0xbf820a80, aStringToInsert=..., \n    aInOutParent=0xbf820b34, aInOutOffset=0xbf820b38, aDoc=0x972768fc)\n    at /home/hindlet/src/hg/mozilla-central/editor/libeditor/html/nsWSRunObject.cpp:334\n#1  0xb5d3a47e in nsHTMLEditRules::WillInsertText (this=0x97587400, \n    aAction=2000, aSelection=0x973f8200, aCancel=0xbf820ce4, \n    aHandled=0xbf820ce8, inString=0xbf820da4, outString=0xbf820c08, \n    aMaxLength=-1)\n    at /home/hindlet/src/hg/mozilla-central/editor/libeditor/html/nsHTMLEditRules.cpp:1480\n#2  0xb5d44905 in WillDoAction (aHandled=0xbf820ce8, aCancel=0xbf820ce4, \n    aInfo=0xbf820c9c, aSelection=0x973f8200, this=0x97587400)\n    at /home/hindlet/src/hg/mozilla-central/editor/libeditor/html/nsHTMLEditRules.cpp:618\n#3  nsHTMLEditRules::WillDoAction (this=0x97587400, aSelection=0x973f8200, \n    aInfo=0xbf820c9c, aCancel=0xbf820ce4, aHandled=0xbf820ce8)\n    at /home/hindlet/src/hg/mozilla-central/editor/libeditor/html/nsHTMLEditRules.cpp:544\n#4  0xb5cb574a in InsertText (aStringToInsert=..., this=0x97585800)\n    at /home/hindlet/src/hg/mozilla-central/editor/libeditor/text/nsPlaintextEditor.cpp:820\n#5  nsPlaintextEditor::InsertText (this=0x97585800, aStringToInsert=...)\n    at /home/hindlet/src/hg/mozilla-central/editor/libeditor/text/nsPlaintextEdi---Type <return> to continue, or q <return> to quit---\ntor.cpp:788\n#6  0xb5cb297a in nsPlaintextEditor::TypedText (this=0x97585800, aString=..., \n    aAction=0)\n    at /home/hindlet/src/hg/mozilla-central/editor/libeditor/text/nsPlaintextEditor.cpp:428\n#7  0xb5d192dd in nsHTMLEditor::TypedText (this=0x97585800, aString=..., \n    aAction=0)\n    at /home/hindlet/src/hg/mozilla-central/editor/libeditor/html/nsHTMLEditor.cpp:1425\n#8  0xb5d1d806 in HandleKeyPressEvent (aKeyEvent=0x97979c94, this=0x97585800)\n    at /home/hindlet/src/hg/mozilla-central/editor/libeditor/html/nsHTMLEditor.cpp:735\n#9  nsHTMLEditor::HandleKeyPressEvent (this=0x97585800, aKeyEvent=0x97979c94)\n    at /home/hindlet/src/hg/mozilla-central/editor/libeditor/html/nsHTMLEditor.cpp:626\n#10 0xb5cc8052 in KeyPress (aKeyEvent=0x97979c40, this=0x96fc3a20)\n    at /home/hindlet/src/hg/mozilla-central/editor/libeditor/base/nsEditorEventListener.cpp:357\n#11 nsEditorEventListener::KeyPress (this=0x96fc3a20, aKeyEvent=0x97979c40)\n    at /home/hindlet/src/hg/mozilla-central/editor/libeditor/base/nsEditorEventListener.cpp:325\n#12 0xb5cc8877 in nsEditorEventListener::HandleEvent (this=0x96fc3a20, \n    aEvent=0x97979c40)", "id": 5696035}, {"raw_text": "Added patch that removes the offending code.", "attachment_id": 557821, "id": 5696164, "count": 3, "creator": "firefox@hindlemail.co.uk", "is_private": false, "time": "2011-09-02T14:01:51Z", "tags": [], "bug_id": 681626, "text": "Created attachment 557821\nPatch the removes code that causes the bug.\n\nAdded patch that removes the offending code.", "author": "firefox@hindlemail.co.uk", "creation_time": "2011-09-02T14:01:51Z"}, {"id": 5696167, "raw_text": "Rebuilding Firefox with attached patch, fixes bug.\nWill now look for why this code was added.", "attachment_id": null, "text": "Rebuilding Firefox with attached patch, fixes bug.\nWill now look for why this code was added.", "bug_id": 681626, "tags": [], "time": "2011-09-02T14:03:59Z", "creation_time": "2011-09-02T14:03:59Z", "author": "firefox@hindlemail.co.uk", "count": 4, "is_private": false, "creator": "firefox@hindlemail.co.uk"}, {"id": 5700294, "raw_text": "f=ehsan", "attachment_id": null, "text": "f=ehsan", "time": "2011-09-05T09:48:30Z", "bug_id": 681626, "tags": [], "creation_time": "2011-09-05T09:48:30Z", "author": "firefox@hindlemail.co.uk", "count": 5, "is_private": false, "creator": "firefox@hindlemail.co.uk"}, {"attachment_id": null, "raw_text": "This is kind of tricky.  The whitespace at the end of the block is collapsed, so we should treat it as such.  I think that the desired behavior is to show \"hello|\" initially and then \"hellok|\" after pressing 'k', which should remove the trailing whitespace.  In other words, we want to keep the existing nsWSRunObject logic.\n\nWhat we need to fix is the hittesting code returning the wrong offset for the selection when you click to the right of that paragraph.  nsIFrame::GetContentOffsetsFromPoint calls GetSelectionClosestFrame which returns the textframe with the frameEdge flag set.  Then, we call GetRangeForFrame which calls nsTextFrame::GetOffsets, which in turn calls nsTextFrame::GetContentEnd.  That function ignores whitespace collapsing, and just returns the length of the corresponding content textnode.  I think we should fix that, possibly by calling GetTrimmedOffsets instead of GetOffsets.  Roc, do you agree?", "id": 5700950, "creator": "ehsan.akhgari@gmail.com", "is_private": false, "count": 6, "author": "ehsan.akhgari@gmail.com", "creation_time": "2011-09-05T20:46:54Z", "bug_id": 681626, "tags": [], "time": "2011-09-05T20:46:54Z", "text": "This is kind of tricky.  The whitespace at the end of the block is collapsed, so we should treat it as such.  I think that the desired behavior is to show \"hello|\" initially and then \"hellok|\" after pressing 'k', which should remove the trailing whitespace.  In other words, we want to keep the existing nsWSRunObject logic.\n\nWhat we need to fix is the hittesting code returning the wrong offset for the selection when you click to the right of that paragraph.  nsIFrame::GetContentOffsetsFromPoint calls GetSelectionClosestFrame which returns the textframe with the frameEdge flag set.  Then, we call GetRangeForFrame which calls nsTextFrame::GetOffsets, which in turn calls nsTextFrame::GetContentEnd.  That function ignores whitespace collapsing, and just returns the length of the corresponding content textnode.  I think we should fix that, possibly by calling GetTrimmedOffsets instead of GetOffsets.  Roc, do you agree?"}, {"author": "roc@ocallahan.org", "creation_time": "2011-09-06T00:39:59Z", "tags": [], "time": "2011-09-06T00:39:59Z", "text": "That would mean that to enter text after the trailing space, the user would have to click and then press right-arrow. And wouldn't we have the same sort of bug where the user uses right-arrow to get past the trailing space, then enters text?\n\nTechnically the trailing white-space is not collapsed (there is no whitespace for it to collapse with), but trimmed due to being at the end of the line. I think that when the line ends with a soft line break, it makes sense to treat trimmed trailing whitespace as not being there for editing purposes (especially caret movement), but when the line does not end with a soft line break, I think we should probably treat the trimmed trailing whitespace as present for editing.", "creator": "roc@ocallahan.org", "is_private": false, "id": 5701203, "attachment_id": null, "raw_text": "That would mean that to enter text after the trailing space, the user would have to click and then press right-arrow. And wouldn't we have the same sort of bug where the user uses right-arrow to get past the trailing space, then enters text?\n\nTechnically the trailing white-space is not collapsed (there is no whitespace for it to collapse with), but trimmed due to being at the end of the line. I think that when the line ends with a soft line break, it makes sense to treat trimmed trailing whitespace as not being there for editing purposes (especially caret movement), but when the line does not end with a soft line break, I think we should probably treat the trimmed trailing whitespace as present for editing.", "bug_id": 681626, "count": 7}, {"raw_text": "Right, I meant trimmed when I said collapsed.  But I don't agree with your suggestion.  We do not take this trailing space into account for layout purposes, right?  For example, it does not affect line breaking behavior.  It also doesn't show up in non-collapsed selections (although the space is copied to the clipboard for example, which is another bug I think).  In other words, the space is invisible, so I'm not sure why we should make it visible when editing.\n\nWhat I propose is that for all editing intents and purposes, we should treat such trailing space characters as if they did not exist in the DOM, i.e., caret positioning and movement should be oblivious to their existence.", "attachment_id": null, "id": 5702822, "count": 8, "creator": "ehsan.akhgari@gmail.com", "is_private": false, "time": "2011-09-06T19:28:07Z", "tags": [], "bug_id": 681626, "text": "Right, I meant trimmed when I said collapsed.  But I don't agree with your suggestion.  We do not take this trailing space into account for layout purposes, right?  For example, it does not affect line breaking behavior.  It also doesn't show up in non-collapsed selections (although the space is copied to the clipboard for example, which is another bug I think).  In other words, the space is invisible, so I'm not sure why we should make it visible when editing.\n\nWhat I propose is that for all editing intents and purposes, we should treat such trailing space characters as if they did not exist in the DOM, i.e., caret positioning and movement should be oblivious to their existence.", "author": "ehsan.akhgari@gmail.com", "creation_time": "2011-09-06T19:28:07Z"}, {"text": "If we do that, then\na) in the testcase in this bug, there will be no way for the user to insert content after the trailing space\nb) if the user types some text followed by a space at the end of a contenteditable element, typing the space will not advance the caret", "time": "2011-09-07T02:11:15Z", "tags": [], "bug_id": 681626, "creation_time": "2011-09-07T02:11:15Z", "author": "roc@ocallahan.org", "count": 9, "is_private": false, "creator": "roc@ocallahan.org", "id": 5703782, "raw_text": "If we do that, then\na) in the testcase in this bug, there will be no way for the user to insert content after the trailing space\nb) if the user types some text followed by a space at the end of a contenteditable element, typing the space will not advance the caret", "attachment_id": null}, {"creator": "ehsan.akhgari@gmail.com", "is_private": false, "time": "2011-09-07T16:04:45Z", "tags": [], "text": "(In reply to Robert O'Callahan (:roc) (Mozilla Corporation) from comment #9)\n> If we do that, then\n> a) in the testcase in this bug, there will be no way for the user to insert\n> content after the trailing space\n\nI think that's the desired behavior, because as far as the user can see, there is no trailing space to begin with (unless if they look at the DOM).\n\n> b) if the user types some text followed by a space at the end of a\n> contenteditable element, typing the space will not advance the caret\n\nI think in that case we should insert a non-breaking space.", "author": "ehsan.akhgari@gmail.com", "creation_time": "2011-09-07T16:04:45Z", "raw_text": "(In reply to Robert O'Callahan (:roc) (Mozilla Corporation) from comment #9)\n> If we do that, then\n> a) in the testcase in this bug, there will be no way for the user to insert\n> content after the trailing space\n\nI think that's the desired behavior, because as far as the user can see, there is no trailing space to begin with (unless if they look at the DOM).\n\n> b) if the user types some text followed by a space at the end of a\n> contenteditable element, typing the space will not advance the caret\n\nI think in that case we should insert a non-breaking space.", "attachment_id": null, "id": 5705046, "count": 10, "bug_id": 681626}, {"attachment_id": null, "raw_text": "@Ehsan, wouldn't the inserting of non-breaking spaces lead to a scenario like this:\n\nInitial state:\n\"<div>hello </div>\"\n\nClick after hello:\n\"<div>hello| </div>\"\n\nPress space:\n\"<div>hello&nbsp;| </div>\"\n\ntype world:\n\"<div>hello&nbsp;world| </div>\"\n\nPress space:\n\"<div>hello&nbsp;world&nbsp;| </div>\"\n\netc. So whenever text is appended in a contenteditble block, It will not line break.\n\nIf I have understood this correctly then, from my user perspective that seems less than ideal, and I guess I would have process the content to remove &nbsp; not at end of lines.", "id": 5705123, "is_private": false, "creator": "firefox@hindlemail.co.uk", "count": 11, "creation_time": "2011-09-07T16:36:28Z", "author": "firefox@hindlemail.co.uk", "text": "@Ehsan, wouldn't the inserting of non-breaking spaces lead to a scenario like this:\n\nInitial state:\n\"<div>hello </div>\"\n\nClick after hello:\n\"<div>hello| </div>\"\n\nPress space:\n\"<div>hello&nbsp;| </div>\"\n\ntype world:\n\"<div>hello&nbsp;world| </div>\"\n\nPress space:\n\"<div>hello&nbsp;world&nbsp;| </div>\"\n\netc. So whenever text is appended in a contenteditble block, It will not line break.\n\nIf I have understood this correctly then, from my user perspective that seems less than ideal, and I guess I would have process the content to remove &nbsp; not at end of lines.", "bug_id": 681626, "tags": [], "time": "2011-09-07T16:36:28Z"}, {"text": "No, they can be fixed up in nsWSRunObject.", "tags": [], "bug_id": 681626, "time": "2011-09-07T18:47:17Z", "creation_time": "2011-09-07T18:47:17Z", "author": "ehsan.akhgari@gmail.com", "count": 12, "is_private": false, "creator": "ehsan.akhgari@gmail.com", "id": 5705551, "raw_text": "No, they can be fixed up in nsWSRunObject.", "attachment_id": null}, {"id": 5706686, "attachment_id": null, "raw_text": "(In reply to Ehsan Akhgari [:ehsan] from comment #10)\n> (In reply to Robert O'Callahan (:roc) (Mozilla Corporation) from comment #9)\n> > If we do that, then\n> > a) in the testcase in this bug, there will be no way for the user to insert\n> > content after the trailing space\n> \n> I think that's the desired behavior, because as far as the user can see,\n> there is no trailing space to begin with (unless if they look at the DOM).\n\nOK, but is that OK with Web authors, who certainly can see that there is a trailing space there? What does Aryeh think? This seems like something that should work the same across browsers; we don't want that space to be usable in some browsers but not others.\n\n> > b) if the user types some text followed by a space at the end of a\n> > contenteditable element, typing the space will not advance the caret\n> \n> I think in that case we should insert a non-breaking space.\n\nOK.", "creation_time": "2011-09-08T02:30:30Z", "author": "roc@ocallahan.org", "text": "(In reply to Ehsan Akhgari [:ehsan] from comment #10)\n> (In reply to Robert O'Callahan (:roc) (Mozilla Corporation) from comment #9)\n> > If we do that, then\n> > a) in the testcase in this bug, there will be no way for the user to insert\n> > content after the trailing space\n> \n> I think that's the desired behavior, because as far as the user can see,\n> there is no trailing space to begin with (unless if they look at the DOM).\n\nOK, but is that OK with Web authors, who certainly can see that there is a trailing space there? What does Aryeh think? This seems like something that should work the same across browsers; we don't want that space to be usable in some browsers but not others.\n\n> > b) if the user types some text followed by a space at the end of a\n> > contenteditable element, typing the space will not advance the caret\n> \n> I think in that case we should insert a non-breaking space.\n\nOK.", "time": "2011-09-08T02:30:30Z", "tags": [], "is_private": false, "creator": "roc@ocallahan.org", "bug_id": 681626, "count": 13}, {"id": 5711940, "attachment_id": null, "raw_text": "CCing Aryeh...", "author": "ehsan.akhgari@gmail.com", "creation_time": "2011-09-09T23:51:15Z", "bug_id": 681626, "time": "2011-09-09T23:51:15Z", "tags": [], "text": "CCing Aryeh...", "creator": "ehsan.akhgari@gmail.com", "is_private": false, "count": 14}, {"id": 5714505, "raw_text": "(In reply to Robert O'Callahan (:roc) (Mozilla Corporation) from comment #13)\n> OK, but is that OK with Web authors, who certainly can see that there is a\n> trailing space there? What does Aryeh think? This seems like something that\n> should work the same across browsers; we don't want that space to be usable\n> in some browsers but not others.\n\nI spent a whole bunch of effort on a solution that's more or less workable.  The basic idea is this:\n\n* Whitespace that's not visible to the user (collapsed, trimmed, etc.) should never have any visible effect on editing.\n* When the user inserts a space into an element that doesn't have white-space: pre or pre-wrap, convert it to an nbsp.\n* When the user inserts or deletes any text (including nbsp) in an element that doesn't have white-space: pre or pre-wrap, canonicalize any adjacent space sequence so that it alternates between space and nbsp in a particular pattern that I picked.\n* Hope authors will set white-space: pre-wrap to avoid the horrible mess created by the above.\n\nExamples:\n\n  foo[]       and type space -> foo&nbsp;[]\n  foo&nbsp;[] and type space -> foo &nbsp;[]\n  foo&nbsp;[] and type \"a\"   -> foo a[]\n\nThe upshot is that runs of user-inserted spaces get magically converted to some mix of spaces and nbsps to try getting something vaguely like what the user is expecting within the constraints of HTML.\n\nThe details are contained here:\n\nhttp://aryeh.name/spec/editing/editing.html#canonical-space-sequences\n\nThe rationale is here, if you click the first \"View comments\" link:\n\nhttp://aryeh.name/spec/editing/editing.html#the-inserttext-command\n\nIt's all very horrible, but I don't see any better solution given the constraints.\n\n\nIn this particular case, it looks like the spec isn't very useful.  It should really strip the invisible space before handling the text insertion.  Instead, it treats it as though it has meaning and converts it to a non-breaking space.  I filed a spec bug:\n\nhttp://www.w3.org/Bugs/Public/show_bug.cgi?id=14119\n\nFor now, I'd suggest Gecko strip the space before doing any insertions.  I intend to change the spec to do something like that when I get the time.", "attachment_id": null, "time": "2011-09-12T20:13:26Z", "tags": [], "bug_id": 681626, "text": "(In reply to Robert O'Callahan (:roc) (Mozilla Corporation) from comment #13)\n> OK, but is that OK with Web authors, who certainly can see that there is a\n> trailing space there? What does Aryeh think? This seems like something that\n> should work the same across browsers; we don't want that space to be usable\n> in some browsers but not others.\n\nI spent a whole bunch of effort on a solution that's more or less workable.  The basic idea is this:\n\n* Whitespace that's not visible to the user (collapsed, trimmed, etc.) should never have any visible effect on editing.\n* When the user inserts a space into an element that doesn't have white-space: pre or pre-wrap, convert it to an nbsp.\n* When the user inserts or deletes any text (including nbsp) in an element that doesn't have white-space: pre or pre-wrap, canonicalize any adjacent space sequence so that it alternates between space and nbsp in a particular pattern that I picked.\n* Hope authors will set white-space: pre-wrap to avoid the horrible mess created by the above.\n\nExamples:\n\n  foo[]       and type space -> foo&nbsp;[]\n  foo&nbsp;[] and type space -> foo &nbsp;[]\n  foo&nbsp;[] and type \"a\"   -> foo a[]\n\nThe upshot is that runs of user-inserted spaces get magically converted to some mix of spaces and nbsps to try getting something vaguely like what the user is expecting within the constraints of HTML.\n\nThe details are contained here:\n\nhttp://aryeh.name/spec/editing/editing.html#canonical-space-sequences\n\nThe rationale is here, if you click the first \"View comments\" link:\n\nhttp://aryeh.name/spec/editing/editing.html#the-inserttext-command\n\nIt's all very horrible, but I don't see any better solution given the constraints.\n\n\nIn this particular case, it looks like the spec isn't very useful.  It should really strip the invisible space before handling the text insertion.  Instead, it treats it as though it has meaning and converts it to a non-breaking space.  I filed a spec bug:\n\nhttp://www.w3.org/Bugs/Public/show_bug.cgi?id=14119\n\nFor now, I'd suggest Gecko strip the space before doing any insertions.  I intend to change the spec to do something like that when I get the time.", "author": "ayg@aryeh.name", "creation_time": "2011-09-12T20:13:26Z", "count": 15, "creator": "ayg@aryeh.name", "is_private": false}, {"count": 16, "creator": "ayg@aryeh.name", "is_private": false, "tags": [], "bug_id": 681626, "time": "2011-09-22T20:15:10Z", "text": "I fixed the spec bug, which included adding a pretty large number of tests:\n\nhttps://dvcs.w3.org/hg/editing/rev/89fed05c54e0\n\nYou may want to take those.  Note that some of the expected results in the initial commit were wrong, and were changed in the next commit:\n\nhttps://dvcs.w3.org/hg/editing/rev/e60077322f8a\n\n(This way the diff of the actual code change clearly shows what it fixed.)\n\nMy basic solution was that before deleting or inserting text, we should get rid of any nearby collapsed whitespace.  That means removing spaces that begin or end a line, and collapsing runs of consecutive spaces into a single space.", "author": "ayg@aryeh.name", "creation_time": "2011-09-22T20:15:10Z", "raw_text": "I fixed the spec bug, which included adding a pretty large number of tests:\n\nhttps://dvcs.w3.org/hg/editing/rev/89fed05c54e0\n\nYou may want to take those.  Note that some of the expected results in the initial commit were wrong, and were changed in the next commit:\n\nhttps://dvcs.w3.org/hg/editing/rev/e60077322f8a\n\n(This way the diff of the actual code change clearly shows what it fixed.)\n\nMy basic solution was that before deleting or inserting text, we should get rid of any nearby collapsed whitespace.  That means removing spaces that begin or end a line, and collapsing runs of consecutive spaces into a single space.", "attachment_id": null, "id": 5731831}, {"count": 17, "bug_id": 681626, "raw_text": "I added some more tests:\n\nhttps://dvcs.w3.org/hg/editing/rev/b94bc4cceb61\n\nCurrently the only tests that can run nicely in Gecko are the delete tests, since Gecko doesn't support the forwardDelete or insertText commands.  You can run the delete tests here:\n\nhttp://dvcs.w3.org/hg/editing/raw-file/tip/conformancetest/splitruntest.html?delete\n\nThe relevant ones start at\n\n  [[\"stylewithcss\",\"false\"],[\"delete\",\"\"]] \"foo &nbsp;[]\"\n\n(search for that string).  There's lots of noise to wade through, though.  Also, the insertText tests might be more interesting.", "attachment_id": null, "id": 5732120, "is_private": false, "creator": "ayg@aryeh.name", "text": "I added some more tests:\n\nhttps://dvcs.w3.org/hg/editing/rev/b94bc4cceb61\n\nCurrently the only tests that can run nicely in Gecko are the delete tests, since Gecko doesn't support the forwardDelete or insertText commands.  You can run the delete tests here:\n\nhttp://dvcs.w3.org/hg/editing/raw-file/tip/conformancetest/splitruntest.html?delete\n\nThe relevant ones start at\n\n  [[\"stylewithcss\",\"false\"],[\"delete\",\"\"]] \"foo &nbsp;[]\"\n\n(search for that string).  There's lots of noise to wade through, though.  Also, the insertText tests might be more interesting.", "tags": [], "time": "2011-09-22T21:34:40Z", "creation_time": "2011-09-22T21:34:40Z", "author": "ayg@aryeh.name"}, {"bug_id": 681626, "count": 18, "id": 5732224, "raw_text": "Thanks Aryeh for the spec fixes.  They look great!", "attachment_id": null, "time": "2011-09-22T22:03:25Z", "tags": [], "text": "Thanks Aryeh for the spec fixes.  They look great!", "author": "ehsan.akhgari@gmail.com", "creation_time": "2011-09-22T22:03:25Z", "creator": "ehsan.akhgari@gmail.com", "is_private": false}]}}, "comments": {}}