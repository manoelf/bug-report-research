{"comments": {}, "bugs": {"631818": {"comments": [{"time": "2011-02-05T19:16:38Z", "is_private": false, "attachment_id": null, "count": 0, "creator": "gal@uci.edu", "tags": [], "bug_id": 631818, "id": 5257861, "raw_text": "We currently set all object slots to undefined when we allocate them. This is really lame and almost always wasteful since we tend to fill those slots with data right away.\n\nThe attached patch leaves slots uninitialized until they are actually needed. Arrays are still filled with MagicValue(JS_ARRAY_HOLE). Certain objects want their slots set to undefined (i.e. CallObject), in those places I manually initialize slots.\n\nIn debug builds free slots are set to MagicValue(JS_FREE_SLOT) so we can verify that everything is kosher.\n\nThis patch saves about 530,000 instructions on SunSpider and doesn't assert in Debug on sunspider. I didn't try anything else yet. xml probably needs a few touch-ups (I know it relies on some reserved slots to be undefined, those have to be set explicitly, this stuff is asserted and easy to catch).\n\nI don't really have the patience to finish this right now (blockers!), but I would love this to go in. I am planning some improvements to typed arrays (inline allocate headers and data instead of 2 JSObjects and 3 mallocs per typed array), for which this patch is crucial.\n\nThis is all post-4 work, of course.", "creation_time": "2011-02-05T19:16:38Z", "text": "We currently set all object slots to undefined when we allocate them. This is really lame and almost always wasteful since we tend to fill those slots with data right away.\n\nThe attached patch leaves slots uninitialized until they are actually needed. Arrays are still filled with MagicValue(JS_ARRAY_HOLE). Certain objects want their slots set to undefined (i.e. CallObject), in those places I manually initialize slots.\n\nIn debug builds free slots are set to MagicValue(JS_FREE_SLOT) so we can verify that everything is kosher.\n\nThis patch saves about 530,000 instructions on SunSpider and doesn't assert in Debug on sunspider. I didn't try anything else yet. xml probably needs a few touch-ups (I know it relies on some reserved slots to be undefined, those have to be set explicitly, this stuff is asserted and easy to catch).\n\nI don't really have the patience to finish this right now (blockers!), but I would love this to go in. I am planning some improvements to typed arrays (inline allocate headers and data instead of 2 JSObjects and 3 mallocs per typed array), for which this patch is crucial.\n\nThis is all post-4 work, of course.", "author": "gal@uci.edu"}, {"author": "gal@uci.edu", "bug_id": 631818, "tags": [], "count": 1, "creator": "gal@uci.edu", "text": "Created attachment 510037\npatch", "creation_time": "2011-02-05T19:16:54Z", "raw_text": "", "id": 5257862, "attachment_id": 510037, "time": "2011-02-05T19:16:54Z", "is_private": false}, {"author": "bzbarsky@mit.edu", "creation_time": "2011-02-05T21:12:06Z", "text": "Can GC deal with uninitialized slots nowadays?", "id": 5257933, "raw_text": "Can GC deal with uninitialized slots nowadays?", "tags": [], "creator": "bzbarsky@mit.edu", "count": 2, "bug_id": 631818, "attachment_id": null, "is_private": false, "time": "2011-02-05T21:12:06Z"}, {"is_private": false, "time": "2011-02-05T22:44:26Z", "attachment_id": null, "id": 5258036, "raw_text": "Yes. We check slotSpan. I might have to look closer at deletion but so far it looks good. The patch asserts heavily that everything is ok.", "creation_time": "2011-02-05T22:44:26Z", "text": "Yes. We check slotSpan. I might have to look closer at deletion but so far it looks good. The patch asserts heavily that everything is ok.", "tags": [], "count": 3, "creator": "gal@uci.edu", "bug_id": 631818, "author": "gal@uci.edu"}, {"attachment_id": null, "author": "bhackett1024@gmail.com", "tags": [], "count": 4, "time": "2011-02-07T08:16:34Z", "creator": "bhackett1024@gmail.com", "bug_id": 631818, "id": 5259623, "raw_text": "FWIW the packed arrays in the type inference branch do something like this for dense arrays, adding an initializedLength above which slots are uninitialized.", "creation_time": "2011-02-07T08:16:34Z", "is_private": false, "text": "FWIW the packed arrays in the type inference branch do something like this for dense arrays, adding an initializedLength above which slots are uninitialized."}]}}}