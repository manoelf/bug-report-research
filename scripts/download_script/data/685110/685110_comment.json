{"bugs": {"685110": {"comments": [{"author": "marc.brevoort@integralis.com", "time": "2011-09-07T10:00:59Z", "attachment_id": null, "creator": "marc.brevoort@integralis.com", "text": "User Agent: Mozilla/5.0 (X11; Linux x86_64; rv:6.0.1) Gecko/20100101 Firefox/6.0.1\nBuild ID: 20110830185545\n\nSteps to reproduce:\n\nVisit http://www.cisco.com/en/US/docs/security/asa/asa72/system/message/logmsgs.html\nSelect a full attack description paragraph at the bottom of the page, e.g.\n\n\"733105\nError Message    %ASA-4-733105: TD_SYSLOG_TCP_INTERCEPT_BURST_RATE_EXCEED \nExplanation    This message is generated when the system is under Syn flood attacks, if the burst rate exceeds the configured threshold.\nRecommended Action    None required. \"\n\nRight-click and \"View selection source\"\n\n\nActual results:\n\nMemory usage spiked to 100%, firefox screen greyed out. This was followed by a full system freeze where even the mouse cursor and numlock light would no longer respond. The same actions after a reboot rendered the same result.\n\nRunning Ubuntu 10.4 LTS, Firefox 6, encrypted drive.\n\n\nExpected results:\n\nMemory usage more or less stable; no freeze and being able to view the bit of source previously selected.", "raw_text": "User Agent: Mozilla/5.0 (X11; Linux x86_64; rv:6.0.1) Gecko/20100101 Firefox/6.0.1\nBuild ID: 20110830185545\n\nSteps to reproduce:\n\nVisit http://www.cisco.com/en/US/docs/security/asa/asa72/system/message/logmsgs.html\nSelect a full attack description paragraph at the bottom of the page, e.g.\n\n\"733105\nError Message    %ASA-4-733105: TD_SYSLOG_TCP_INTERCEPT_BURST_RATE_EXCEED \nExplanation    This message is generated when the system is under Syn flood attacks, if the burst rate exceeds the configured threshold.\nRecommended Action    None required. \"\n\nRight-click and \"View selection source\"\n\n\nActual results:\n\nMemory usage spiked to 100%, firefox screen greyed out. This was followed by a full system freeze where even the mouse cursor and numlock light would no longer respond. The same actions after a reboot rendered the same result.\n\nRunning Ubuntu 10.4 LTS, Firefox 6, encrypted drive.\n\n\nExpected results:\n\nMemory usage more or less stable; no freeze and being able to view the bit of source previously selected.", "creation_time": "2011-09-07T10:00:59Z", "bug_id": 685110, "id": 5704315, "tags": [], "is_private": false, "count": 0}, {"raw_text": "Specifically the release is 6.0.1 - Mozilla Firefox for Ubuntu Canonical - 1.0. I'm currently on the *release* update channel.", "creation_time": "2011-09-07T10:02:31Z", "text": "Specifically the release is 6.0.1 - Mozilla Firefox for Ubuntu Canonical - 1.0. I'm currently on the *release* update channel.", "time": "2011-09-07T10:02:31Z", "attachment_id": null, "is_private": false, "count": 1, "tags": [], "id": 5704317, "bug_id": 685110, "creator": "marc.brevoort@integralis.com", "author": "marc.brevoort@integralis.com"}, {"id": 5705135, "count": 2, "is_private": false, "tags": [], "bug_id": 685110, "raw_text": "A system freeze is a system bug but I can confirm a massive memory usage (1.5GB+) that leads to a crash on my 32bit system. Someone needs to look where we spend the memory", "creation_time": "2011-09-07T16:41:57Z", "time": "2011-09-07T16:41:57Z", "attachment_id": null, "text": "A system freeze is a system bug but I can confirm a massive memory usage (1.5GB+) that leads to a crash on my 32bit system. Someone needs to look where we spend the memory", "author": "bugzilla@mversen.de", "creator": "bugzilla@mversen.de"}, {"creator": "bzbarsky@mit.edu", "author": "bzbarsky@mit.edu", "tags": [], "count": 3, "is_private": false, "id": 5705168, "bug_id": 685110, "creation_time": "2011-09-07T16:51:54Z", "raw_text": "Well, presumably at least part of it is a string encoding all the text on that page... probably multiple times.  :(", "text": "Well, presumably at least part of it is a string encoding all the text on that page... probably multiple times.  :(", "time": "2011-09-07T16:51:54Z", "attachment_id": null}, {"bug_id": 685110, "tags": [], "count": 4, "is_private": false, "id": 5706494, "text": "Created attachment 559011\nMassif output\n\nMarc, thanks for very precise steps-to-reproduce.\n\nI can reproduce this.  The first time Firefox froze.  The second time it didn't, and the (very large) source started showing and my resident memory usage reached 4GB before I killed it.  (My machine has 16GB of RAM.)\n\nI managed to do a run under Massif.  A partial allocation tree at the peak usage point is attached.  As bz suggests, it does look like it's mostly strings -- 91% of the heap memory allocated is from nsStringBuffer::Alloc.", "attachment_id": 559011, "time": "2011-09-08T00:29:37Z", "creation_time": "2011-09-08T00:29:37Z", "raw_text": "Marc, thanks for very precise steps-to-reproduce.\n\nI can reproduce this.  The first time Firefox froze.  The second time it didn't, and the (very large) source started showing and my resident memory usage reached 4GB before I killed it.  (My machine has 16GB of RAM.)\n\nI managed to do a run under Massif.  A partial allocation tree at the peak usage point is attached.  As bz suggests, it does look like it's mostly strings -- 91% of the heap memory allocated is from nsStringBuffer::Alloc.", "creator": "n.nethercote@gmail.com", "author": "n.nethercote@gmail.com"}, {"is_private": false, "count": 5, "tags": [], "id": 5706531, "bug_id": 685110, "raw_text": "So looking at that massif output....\n\n  17% is the huge data: URI.\n  17% is the huge view-source: URI wrapping the data: URI.\n\nI wonder whether we can do something to allow the latter to share the string data with the former... the problem is that data: URIs do not keep their spec as a single string.\n\nOr maybe we should use some sort of filedata: URI here or something instead of data:?  Is that doable?  In any case, at best that will save us 17% of the memory, or in this case 190MB.\n\nThen we have the 51% that's attribute values.  Looks like those are the href strings for all the various things we now linkify in view-source.  One problem there is that a bunch of those links are of the form <a href=\"#wp4649442\"> or whatnot and the patch for bug 17612 as far as I can tell makes all those into absolute urls using data: URI as the base URI, which makes them all huge, and then we blow through way too much memory.\n\nThe right fix is probably to make \"view selection source\" somehow use the original document URI as the base URI.  We'd still use a good bit of memory for all the absolute urls, but hopefully not O(N^2) in the data size as now.\n\nHenri, is that easier to do in your new view-source impl?", "creation_time": "2011-09-08T00:49:38Z", "text": "So looking at that massif output....\n\n  17% is the huge data: URI.\n  17% is the huge view-source: URI wrapping the data: URI.\n\nI wonder whether we can do something to allow the latter to share the string data with the former... the problem is that data: URIs do not keep their spec as a single string.\n\nOr maybe we should use some sort of filedata: URI here or something instead of data:?  Is that doable?  In any case, at best that will save us 17% of the memory, or in this case 190MB.\n\nThen we have the 51% that's attribute values.  Looks like those are the href strings for all the various things we now linkify in view-source.  One problem there is that a bunch of those links are of the form <a href=\"#wp4649442\"> or whatnot and the patch for bug 17612 as far as I can tell makes all those into absolute urls using data: URI as the base URI, which makes them all huge, and then we blow through way too much memory.\n\nThe right fix is probably to make \"view selection source\" somehow use the original document URI as the base URI.  We'd still use a good bit of memory for all the absolute urls, but hopefully not O(N^2) in the data size as now.\n\nHenri, is that easier to do in your new view-source impl?", "creator": "bzbarsky@mit.edu", "time": "2011-09-08T00:49:38Z", "attachment_id": null, "author": "bzbarsky@mit.edu"}, {"bug_id": 685110, "id": 5707122, "is_private": false, "count": 6, "tags": [], "time": "2011-09-08T09:00:25Z", "attachment_id": null, "author": "marc.brevoort@integralis.com", "creator": "marc.brevoort@integralis.com", "text": "Thanks to all of you for the great work you're doing on this people, it's much appreciated.", "raw_text": "Thanks to all of you for the great work you're doing on this people, it's much appreciated.", "creation_time": "2011-09-08T09:00:25Z"}, {"id": 5707468, "is_private": false, "count": 7, "tags": [], "bug_id": 685110, "creation_time": "2011-09-08T13:06:57Z", "raw_text": "(In reply to Boris Zbarsky (:bz) from comment #5)\n> The right fix is probably to make \"view selection source\" somehow use the\n> original document URI as the base URI.\n\nI think once the code is viewing selection source, it doesn't know that it's viewing selection source as opposed to viewing the source of full data: URL document.\n\nIt would be doable to check if the base URL is data: and not to resolved relative URLs against the base if the base is data:.", "time": "2011-09-08T13:06:57Z", "attachment_id": null, "author": "hsivonen@mozilla.com", "creator": "hsivonen@mozilla.com", "text": "(In reply to Boris Zbarsky (:bz) from comment #5)\n> The right fix is probably to make \"view selection source\" somehow use the\n> original document URI as the base URI.\n\nI think once the code is viewing selection source, it doesn't know that it's viewing selection source as opposed to viewing the source of full data: URL document.\n\nIt would be doable to check if the base URL is data: and not to resolved relative URLs against the base if the base is data:."}, {"bug_id": 685110, "id": 5707595, "tags": [], "is_private": false, "count": 8, "attachment_id": null, "time": "2011-09-08T13:53:18Z", "text": "The relative URIs are a killer here, though this is certainly a fairly nasty edge-case.  If it was using the original document in some manner then the relative URLs wouldn't be so large.\n\nHmmm.  If there was some equivalent to data: that put the data into a object like \"temp:random_name\" instead of directly in the URI itself, then this would all be much easier.  Not a change likely to happen, though.\n\nIf data: URIs could reference each other you could collapse the storage requirement (kinda ref-count the data).  Not simple, not a win for anything except relative URIs in a data: document.  Or we could do some sort of late-binding for relative data URLs.\n\nIt wouldn't be as large an issue (just some extra mem use) if the edge case wasn't so bad.  Refuse to build relative data: URIs over a certain size?  Ugh.  Refuse to build them at all?  That might break things.. (yes?)", "raw_text": "The relative URIs are a killer here, though this is certainly a fairly nasty edge-case.  If it was using the original document in some manner then the relative URLs wouldn't be so large.\n\nHmmm.  If there was some equivalent to data: that put the data into a object like \"temp:random_name\" instead of directly in the URI itself, then this would all be much easier.  Not a change likely to happen, though.\n\nIf data: URIs could reference each other you could collapse the storage requirement (kinda ref-count the data).  Not simple, not a win for anything except relative URIs in a data: document.  Or we could do some sort of late-binding for relative data URLs.\n\nIt wouldn't be as large an issue (just some extra mem use) if the edge case wasn't so bad.  Refuse to build relative data: URIs over a certain size?  Ugh.  Refuse to build them at all?  That might break things.. (yes?)", "creation_time": "2011-09-08T13:53:18Z", "author": "rjesup@jesup.org", "creator": "rjesup@jesup.org"}, {"creator": "bzbarsky@mit.edu", "author": "bzbarsky@mit.edu", "tags": [], "count": 9, "is_private": false, "id": 5707706, "bug_id": 685110, "creation_time": "2011-09-08T14:39:55Z", "raw_text": "> If there was some equivalent to data: that put the data into a object like\n> \"temp:random_name\" instead of directly in the URI itself, then this would all be much\n> easier.  Not a change likely to happen, though.\n\nSee mention of filedata in comment 5.\n\n> Or we could do some sort of late-binding for relative data URLs.\n\nThat won't help.  The problem here is that view-source generates absolute url strings that it then passes to SetAttr on DOM elements.\n\nIf this were just nsIURI objects, we would not have a problem, because that case dholbert and I _did_ think about when doing bug 308590 (which I guess is the other contributing factor here).  See bug 308590 comment 30.", "text": "> If there was some equivalent to data: that put the data into a object like\n> \"temp:random_name\" instead of directly in the URI itself, then this would all be much\n> easier.  Not a change likely to happen, though.\n\nSee mention of filedata in comment 5.\n\n> Or we could do some sort of late-binding for relative data URLs.\n\nThat won't help.  The problem here is that view-source generates absolute url strings that it then passes to SetAttr on DOM elements.\n\nIf this were just nsIURI objects, we would not have a problem, because that case dholbert and I _did_ think about when doing bug 308590 (which I guess is the other contributing factor here).  See bug 308590 comment 30.", "time": "2011-09-08T14:39:55Z", "attachment_id": null}, {"id": 5707719, "is_private": false, "count": 10, "tags": [], "bug_id": 685110, "raw_text": "So I think the simplest fix here is probably to nuke the \"make all the URIS absolute\" code entirely and just set the base URI of the document.\n\nThe simplest way to do _that_ for the view partial source case is to just inject a <base> element into the DOM constructed by view-source, I suspect.\n\nThe view-source code itself could produce such a <base> element too, I guess, to cover cases when view-source:http://something is used as a string (when it's done via the view-source window the UI could once again inject the <base>.\n\nThoughts?", "creation_time": "2011-09-08T14:44:04Z", "attachment_id": null, "time": "2011-09-08T14:44:04Z", "text": "So I think the simplest fix here is probably to nuke the \"make all the URIS absolute\" code entirely and just set the base URI of the document.\n\nThe simplest way to do _that_ for the view partial source case is to just inject a <base> element into the DOM constructed by view-source, I suspect.\n\nThe view-source code itself could produce such a <base> element too, I guess, to cover cases when view-source:http://something is used as a string (when it's done via the view-source window the UI could once again inject the <base>.\n\nThoughts?", "author": "bzbarsky@mit.edu", "creator": "bzbarsky@mit.edu"}, {"author": "n.nethercote@gmail.com", "creator": "n.nethercote@gmail.com", "bug_id": 685110, "id": 5709577, "tags": [], "count": 11, "is_private": false, "attachment_id": null, "time": "2011-09-08T23:58:00Z", "text": "I don't understand why selecting a small piece of text in the page results in such an enormous amount of source.  Can someone explain? :)", "creation_time": "2011-09-08T23:58:00Z", "raw_text": "I don't understand why selecting a small piece of text in the page results in such an enormous amount of source.  Can someone explain? :)"}, {"time": "2011-09-09T00:22:21Z", "attachment_id": null, "text": "The selection source shows the smallest amount of source that gives a balanced subtree that contains both ends of the selection.\n\nSo if you select some text the <body>, the selection source will show the source of the whole <body> (with the part that you actually had selected highlighted in the source view).", "raw_text": "The selection source shows the smallest amount of source that gives a balanced subtree that contains both ends of the selection.\n\nSo if you select some text the <body>, the selection source will show the source of the whole <body> (with the part that you actually had selected highlighted in the source view).", "creation_time": "2011-09-09T00:22:21Z", "bug_id": 685110, "id": 5709626, "tags": [], "is_private": false, "count": 12, "author": "bzbarsky@mit.edu", "creator": "bzbarsky@mit.edu"}, {"is_private": false, "count": 13, "tags": [], "id": 5818075, "bug_id": 685110, "raw_text": "See bug 698691 for the code that needs tweaking in order to change the View Source base URL.", "creation_time": "2011-11-01T15:56:32Z", "text": "See bug 698691 for the code that needs tweaking in order to change the View Source base URL.", "time": "2011-11-01T15:56:32Z", "attachment_id": null, "creator": "hsivonen@mozilla.com", "author": "hsivonen@mozilla.com"}, {"creator": "continuation@gmail.com", "author": "continuation@gmail.com", "tags": [], "count": 14, "is_private": false, "id": 6232588, "bug_id": 685110, "raw_text": "Downgrading because this is probably a more developer-focused feature that isn't commonly used.", "creation_time": "2012-04-18T05:45:43Z", "text": "Downgrading because this is probably a more developer-focused feature that isn't commonly used.", "time": "2012-04-18T05:45:43Z", "attachment_id": null}]}}, "comments": {}}