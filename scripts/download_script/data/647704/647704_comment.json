{"comments": {}, "bugs": {"647704": {"comments": [{"creation_time": "2011-04-04T17:11:53Z", "creator": "bugzilla@x.colbyrussell.com", "text": "(It occurred to me yesterday that there's no bug against Gecko for this, only stuff like bug 112832.)\n\nThe gist is that it's not possible to resize tree columns to achieve a horizontally scrollable tree unless the tree consumer writes some JS to handle it; there's no way to use XUL to specify a tree whose columns behave, e.g., like the GNOME file manager (other system file managers work similarly).\n\nI'm attaching a video to demonstrate how resizing the columns can cause the tree \"canvas\" to grow outside the contents of the viewport and allow horizontal scrolling.", "attachment_id": null, "id": 5390270, "author": "bugzilla@x.colbyrussell.com", "bug_id": 647704, "raw_text": "(It occurred to me yesterday that there's no bug against Gecko for this, only stuff like bug 112832.)\n\nThe gist is that it's not possible to resize tree columns to achieve a horizontally scrollable tree unless the tree consumer writes some JS to handle it; there's no way to use XUL to specify a tree whose columns behave, e.g., like the GNOME file manager (other system file managers work similarly).\n\nI'm attaching a video to demonstrate how resizing the columns can cause the tree \"canvas\" to grow outside the contents of the viewport and allow horizontal scrolling.", "count": 0, "time": "2011-04-04T17:11:53Z", "tags": [], "is_private": false}, {"is_private": false, "tags": [], "time": "2011-04-04T17:18:47Z", "count": 1, "raw_text": "No attachment, due to file size.  You'll have to deal with video from a third-party host.\n\nDemonstration of a tree with proper basic support for horizontal scrolling (GNOME file manager)\nhttp://tinyvid.tv/show/2y2ao3r5hoknv", "bug_id": 647704, "author": "bugzilla@x.colbyrussell.com", "attachment_id": null, "id": 5390278, "text": "No attachment, due to file size.  You'll have to deal with video from a third-party host.\n\nDemonstration of a tree with proper basic support for horizontal scrolling (GNOME file manager)\nhttp://tinyvid.tv/show/2y2ao3r5hoknv", "creator": "bugzilla@x.colbyrussell.com", "creation_time": "2011-04-04T17:18:47Z"}, {"text": "Tree with conditional horizontal growth based on a preferred width threshold (GNOME file manager)\nhttp://tinyvid.tv/show/jlj0plk3owj6\n\nNote how in this demonstration, I am able to resize the Date Modified column to a preferred width smaller than its current effective width.  Even though I've resized it (to a point somewhere near the minutes\u2013seconds separator of the timestamp in the first row's cell), it still has an effective width such that it fills the whole tree viewport.  When I resize the first column to a larger width, it subtracts from the padding provided by the difference between the last column's preferred width and the effective width, until it reaches the threshold of the preferred width, at which point, it causes the tree to expand outside its viewport and a horizontal scrollbar appears.", "attachment_id": null, "id": 5390289, "creation_time": "2011-04-04T17:30:08Z", "tags": [], "is_private": false, "raw_text": "Tree with conditional horizontal growth based on a preferred width threshold (GNOME file manager)\nhttp://tinyvid.tv/show/jlj0plk3owj6\n\nNote how in this demonstration, I am able to resize the Date Modified column to a preferred width smaller than its current effective width.  Even though I've resized it (to a point somewhere near the minutes\u2013seconds separator of the timestamp in the first row's cell), it still has an effective width such that it fills the whole tree viewport.  When I resize the first column to a larger width, it subtracts from the padding provided by the difference between the last column's preferred width and the effective width, until it reaches the threshold of the preferred width, at which point, it causes the tree to expand outside its viewport and a horizontal scrollbar appears.", "creator": "bugzilla@x.colbyrussell.com", "author": "bugzilla@x.colbyrussell.com", "time": "2011-04-04T17:30:08Z", "bug_id": 647704, "count": 2}, {"text": "The tree frame code can be fixed to handle this, but it's also doable in XBL by fixing the tree binding.  For the past year, I've been sitting on a working prototype that takes the latter approach.", "creator": "bugzilla@x.colbyrussell.com", "attachment_id": null, "id": 5390293, "author": "bugzilla@x.colbyrussell.com", "creation_time": "2011-04-04T17:33:27Z", "time": "2011-04-04T17:33:27Z", "tags": [], "is_private": false, "bug_id": 647704, "raw_text": "The tree frame code can be fixed to handle this, but it's also doable in XBL by fixing the tree binding.  For the past year, I've been sitting on a working prototype that takes the latter approach.", "count": 3}, {"raw_text": "Oh, and to preempt any mentions of bug 112832, that looks like it dealt with adding horizontal scrolling to the tree frame, but it doesn't deal with stuff like what's mentioned in comment 2, i.e., expanding the last column to fill the tree viewport.\n\nIn fact, when I last looked at it, the current implementation doesn't have something like what I've described as preferred width and effective width.  It's all the same, and if the computed sum of all treecol widths is less than the tree viewport width, you get a bunch of dead space filling a gap between the last column and the colpicker/vertical scrollbar.\n\nThat's all assuming you're actually specifying widths on columns.  sdwilsh mentions in bug 348764, comment 5 that even the above completely falls apart when you start considering flex columns (which is just about the only way things are ever specified\u2014nobody hardcodes widths onto their columns, for good reason).\n\nIt seems to me that what we need here is a way for XUL authors to\n  a) specify their columns just as they do now using flex, i.e., that achieves\n     widths relative to each other  and columns that flex when the container\n     is resized, and\n  b) add an attribute (hgrow=\"true\"?) that means, \"Hey, allow the tree to\n     behave like this\".", "is_private": false, "tags": [], "creation_time": "2011-04-04T17:47:22Z", "attachment_id": null, "id": 5390306, "text": "Oh, and to preempt any mentions of bug 112832, that looks like it dealt with adding horizontal scrolling to the tree frame, but it doesn't deal with stuff like what's mentioned in comment 2, i.e., expanding the last column to fill the tree viewport.\n\nIn fact, when I last looked at it, the current implementation doesn't have something like what I've described as preferred width and effective width.  It's all the same, and if the computed sum of all treecol widths is less than the tree viewport width, you get a bunch of dead space filling a gap between the last column and the colpicker/vertical scrollbar.\n\nThat's all assuming you're actually specifying widths on columns.  sdwilsh mentions in bug 348764, comment 5 that even the above completely falls apart when you start considering flex columns (which is just about the only way things are ever specified\u2014nobody hardcodes widths onto their columns, for good reason).\n\nIt seems to me that what we need here is a way for XUL authors to\n  a) specify their columns just as they do now using flex, i.e., that achieves\n     widths relative to each other  and columns that flex when the container\n     is resized, and\n  b) add an attribute (hgrow=\"true\"?) that means, \"Hey, allow the tree to\n     behave like this\".", "bug_id": 647704, "count": 4, "time": "2011-04-04T17:47:22Z", "creator": "bugzilla@x.colbyrussell.com", "author": "bugzilla@x.colbyrussell.com"}, {"bug_id": 647704, "count": 5, "time": "2011-04-04T21:08:10Z", "creator": "neil@httl.net", "author": "neil@httl.net", "raw_text": "That's not what I see. What I see is a tree with four statically sized columns. You resize the first column and then you resize the third column.\n\nYou can do this already without any extra script, however it's probably under or undocumented. You'll need to remove all the flex from all of your columns. You may want to set an initial width on your columns (they will default to their label's width). And you'll need to set resizeafter=\"grow\" on all the splitters. And you'll want to add an extra splitter to the end of the tree columns, so that you'll always be able to resize the last column.\n\nAnd I need to fix the Modern theme so that this all displays correctly...", "tags": [], "is_private": false, "creation_time": "2011-04-04T21:08:10Z", "text": "That's not what I see. What I see is a tree with four statically sized columns. You resize the first column and then you resize the third column.\n\nYou can do this already without any extra script, however it's probably under or undocumented. You'll need to remove all the flex from all of your columns. You may want to set an initial width on your columns (they will default to their label's width). And you'll need to set resizeafter=\"grow\" on all the splitters. And you'll want to add an extra splitter to the end of the tree columns, so that you'll always be able to resize the last column.\n\nAnd I need to fix the Modern theme so that this all displays correctly...", "id": 5390455, "attachment_id": null}, {"creation_time": "2011-04-05T00:48:54Z", "author": "bugzilla@x.colbyrussell.com", "creator": "bugzilla@x.colbyrussell.com", "text": "Created attachment 524026\ndead space after the last column\n\n(In reply to comment #5)\n> That's not what I see. What I see is a tree with four statically sized columns.\n> You resize the first column and then you resize the third column.\n\nIn contrast to what?\n\n> You can do this already without any extra script\n\n> And I need to fix the Modern theme so that this all displays correctly...\n\nClassic on GTK2 then, too, because the attachment shows what happens.  Notice that it's the full column that's cut; the cell contents get elided, too.  It's not just a case of the treecol header not extending over all the way.  The prototype I mention in comment 3 messes with column minwidths to achieve the same effect as what can be seen in the two videos.", "id": 5390686, "attachment_id": 524026, "count": 6, "bug_id": 647704, "raw_text": "(In reply to comment #5)\n> That's not what I see. What I see is a tree with four statically sized columns.\n> You resize the first column and then you resize the third column.\n\nIn contrast to what?\n\n> You can do this already without any extra script\n\n> And I need to fix the Modern theme so that this all displays correctly...\n\nClassic on GTK2 then, too, because the attachment shows what happens.  Notice that it's the full column that's cut; the cell contents get elided, too.  It's not just a case of the treecol header not extending over all the way.  The prototype I mention in comment 3 messes with column minwidths to achieve the same effect as what can be seen in the two videos.", "tags": [], "is_private": false, "time": "2011-04-05T00:48:54Z"}, {"raw_text": "(In reply to comment #6)\n> (In reply to comment #5)\n> > That's not what I see. What I see is a tree with four statically sized columns.\n> > You resize the first column and then you resize the third column.\n> In contrast to what?\nWell, your comment suggested that you'd resized the fourth column.\n\n> > You can do this already without any extra script\n> > And I need to fix the Modern theme so that this all displays correctly...\n> Classic on GTK2 then, too, because the attachment shows what happens.\nAnd on Windows too. Probably nobody ever tried the feature out :-(\n\n> Notice that it's the full column that's cut; the cell contents get elided, too.\nThe ellipsing is expected, at least by comparison with Windows list views, which always ellipse the last column even though \"there is space\".\n\n> It's not just a case of the treecol header not extending over all the way.\nInteresting... I compared with Windows listviews, and they have a \"fake\" infinitely wide treecol header that takes up any space. This would be almost straightforward to implement in XBL, but a little tweaking is necessary to prevent the fake header from being clickable or draggable, and I can't see a way to automatically hide the fake header if the existing columns flex.\n\n> The prototype I mention in comment 3 messes with column minwidths to achieve\n> the same effect as what can be seen in the two videos.\nNot sure what minwidths have to do with anything.\n\n(In reply to comment #4)\n> It seems to me that what we need here is a way for XUL authors to\n>   a) specify their columns just as they do now using flex, i.e., that achieves\n>      widths relative to each other and columns that flex when the container\n>      is resized, and\n>   b) add an attribute (hgrow=\"true\"?) that means, \"Hey, allow the tree to\n>      behave like this\".\nWell, the box model can't really cope with this, since the unbounded resizability conflicts with flexibility.", "tags": [], "is_private": false, "creation_time": "2011-04-05T09:39:31Z", "text": "(In reply to comment #6)\n> (In reply to comment #5)\n> > That's not what I see. What I see is a tree with four statically sized columns.\n> > You resize the first column and then you resize the third column.\n> In contrast to what?\nWell, your comment suggested that you'd resized the fourth column.\n\n> > You can do this already without any extra script\n> > And I need to fix the Modern theme so that this all displays correctly...\n> Classic on GTK2 then, too, because the attachment shows what happens.\nAnd on Windows too. Probably nobody ever tried the feature out :-(\n\n> Notice that it's the full column that's cut; the cell contents get elided, too.\nThe ellipsing is expected, at least by comparison with Windows list views, which always ellipse the last column even though \"there is space\".\n\n> It's not just a case of the treecol header not extending over all the way.\nInteresting... I compared with Windows listviews, and they have a \"fake\" infinitely wide treecol header that takes up any space. This would be almost straightforward to implement in XBL, but a little tweaking is necessary to prevent the fake header from being clickable or draggable, and I can't see a way to automatically hide the fake header if the existing columns flex.\n\n> The prototype I mention in comment 3 messes with column minwidths to achieve\n> the same effect as what can be seen in the two videos.\nNot sure what minwidths have to do with anything.\n\n(In reply to comment #4)\n> It seems to me that what we need here is a way for XUL authors to\n>   a) specify their columns just as they do now using flex, i.e., that achieves\n>      widths relative to each other and columns that flex when the container\n>      is resized, and\n>   b) add an attribute (hgrow=\"true\"?) that means, \"Hey, allow the tree to\n>      behave like this\".\nWell, the box model can't really cope with this, since the unbounded resizability conflicts with flexibility.", "attachment_id": null, "id": 5390944, "count": 7, "bug_id": 647704, "time": "2011-04-05T09:39:31Z", "author": "neil@httl.net", "creator": "neil@httl.net"}, {"count": 8, "bug_id": 647704, "raw_text": "(In reply to comment #7)\n> (In reply to comment #6)\n> > (In reply to comment #5)\n> > > That's not what I see. What I see is a tree with four statically sized columns.\n> > > You resize the first column and then you resize the third column.\n> > In contrast to what?\n> Well, your comment suggested that you'd resized the fourth column.\n\nIn which video?  In the first one (http://tinyvid.tv/show/2y2ao3r5hoknv), I do resize the first and third.  The fourth one is the Date Modified column, which I mentioned in comment 2, but that was referring the second video I linked (http://tinyvid.tv/show/jlj0plk3owj6), where I demonstrate setting on the fourth column a preferred width smaller than its effective width, and how elastic the layout is when resizing other columns until it reaches that threshold.\n\n> Interesting... I compared with Windows listviews, and they have a \"fake\"\n> infinitely wide treecol header that takes up any space.\n\nBug 307062 mentions this, too.  In another related tree bug that I can't think of at the moment, a comment makes note that we deliberately deviate from some system conventions.  Following the approach taken by the Windows listview seems to me to be one of these cases.  It appears to me to be obviously suboptimal to how the GNOME file manager is shown to behave in this area.\n\n> This would be almost\n> straightforward to implement in XBL, but a little tweaking is necessary to\n> prevent the fake header from being clickable or draggable, and I can't see a\n> way to automatically hide the fake header if the existing columns flex.\n> \n> > The prototype I mention in comment 3 messes with column minwidths to achieve\n> > the same effect as what can be seen in the two videos.\n> Not sure what minwidths have to do with anything.\n\nImplementation detail.  It's just how things work in the prototype I worked up, so that it could cope with things like flex...\n\n> (In reply to comment #4)\n> > It seems to me that what we need here is a way for XUL authors to\n> >   a) specify their columns just as they do now using flex, i.e., that achieves\n> >      widths relative to each other and columns that flex when the container\n> >      is resized, and\n> >   b) add an attribute (hgrow=\"true\"?) that means, \"Hey, allow the tree to\n> >      behave like this\".\n> Well, the box model can't really cope with this, since the unbounded\n> resizability conflicts with flexibility.\n\nThat's what I mean to say the JS is for.  If you *do* want to achieve these things, it's certainly possible for tree consumers to get that behavior, but consumers have to do it themselves, rather than it being a feature of vanilla trees.\n\n(hgrowable trees prototyped in an extended tree binding)\nhttp://tinyvid.tv/show/3h9c0b50vbi1h", "tags": [], "is_private": false, "time": "2011-04-05T10:15:34Z", "creation_time": "2011-04-05T10:15:34Z", "author": "bugzilla@x.colbyrussell.com", "creator": "bugzilla@x.colbyrussell.com", "text": "(In reply to comment #7)\n> (In reply to comment #6)\n> > (In reply to comment #5)\n> > > That's not what I see. What I see is a tree with four statically sized columns.\n> > > You resize the first column and then you resize the third column.\n> > In contrast to what?\n> Well, your comment suggested that you'd resized the fourth column.\n\nIn which video?  In the first one (http://tinyvid.tv/show/2y2ao3r5hoknv), I do resize the first and third.  The fourth one is the Date Modified column, which I mentioned in comment 2, but that was referring the second video I linked (http://tinyvid.tv/show/jlj0plk3owj6), where I demonstrate setting on the fourth column a preferred width smaller than its effective width, and how elastic the layout is when resizing other columns until it reaches that threshold.\n\n> Interesting... I compared with Windows listviews, and they have a \"fake\"\n> infinitely wide treecol header that takes up any space.\n\nBug 307062 mentions this, too.  In another related tree bug that I can't think of at the moment, a comment makes note that we deliberately deviate from some system conventions.  Following the approach taken by the Windows listview seems to me to be one of these cases.  It appears to me to be obviously suboptimal to how the GNOME file manager is shown to behave in this area.\n\n> This would be almost\n> straightforward to implement in XBL, but a little tweaking is necessary to\n> prevent the fake header from being clickable or draggable, and I can't see a\n> way to automatically hide the fake header if the existing columns flex.\n> \n> > The prototype I mention in comment 3 messes with column minwidths to achieve\n> > the same effect as what can be seen in the two videos.\n> Not sure what minwidths have to do with anything.\n\nImplementation detail.  It's just how things work in the prototype I worked up, so that it could cope with things like flex...\n\n> (In reply to comment #4)\n> > It seems to me that what we need here is a way for XUL authors to\n> >   a) specify their columns just as they do now using flex, i.e., that achieves\n> >      widths relative to each other and columns that flex when the container\n> >      is resized, and\n> >   b) add an attribute (hgrow=\"true\"?) that means, \"Hey, allow the tree to\n> >      behave like this\".\n> Well, the box model can't really cope with this, since the unbounded\n> resizability conflicts with flexibility.\n\nThat's what I mean to say the JS is for.  If you *do* want to achieve these things, it's certainly possible for tree consumers to get that behavior, but consumers have to do it themselves, rather than it being a feature of vanilla trees.\n\n(hgrowable trees prototyped in an extended tree binding)\nhttp://tinyvid.tv/show/3h9c0b50vbi1h", "attachment_id": null, "id": 5390963}, {"count": 9, "raw_text": "Ah, sorry, I hadn't noticed that the random URL suffixes were different.", "bug_id": 647704, "is_private": false, "tags": [], "time": "2011-04-05T10:17:12Z", "creation_time": "2011-04-05T10:17:12Z", "author": "neil@httl.net", "attachment_id": null, "id": 5390964, "creator": "neil@httl.net", "text": "Ah, sorry, I hadn't noticed that the random URL suffixes were different."}, {"creation_time": "2011-04-05T11:24:39Z", "author": "neil@httl.net", "attachment_id": null, "id": 5390998, "creator": "neil@httl.net", "text": "(In reply to comment #8)\n> (http://tinyvid.tv/show/jlj0plk3owj6), where I demonstrate setting on the\n> fourth column a preferred width smaller than its effective width, and how\n> elastic the layout is when resizing other columns until it reaches that\n> threshold.\n...\n> > Not sure what minwidths have to do with anything.\n> Implementation detail.  It's just how things work in the prototype I worked up,\n> so that it could cope with things like flex...\nRight, so if you only flexed the last visible column, and you set a minimum width, then you could get an effect similar to the above video. But the splitter code wouldn't understand that and the column wouldn't be resizable.\n\n> (hgrowable trees prototyped in an extended tree binding)\n> http://tinyvid.tv/show/3h9c0b50vbi1h\nSo what happens to the columns if you resize the pane/window? (Or did you size the columns to fit before starting the video?)", "count": 10, "raw_text": "(In reply to comment #8)\n> (http://tinyvid.tv/show/jlj0plk3owj6), where I demonstrate setting on the\n> fourth column a preferred width smaller than its effective width, and how\n> elastic the layout is when resizing other columns until it reaches that\n> threshold.\n...\n> > Not sure what minwidths have to do with anything.\n> Implementation detail.  It's just how things work in the prototype I worked up,\n> so that it could cope with things like flex...\nRight, so if you only flexed the last visible column, and you set a minimum width, then you could get an effect similar to the above video. But the splitter code wouldn't understand that and the column wouldn't be resizable.\n\n> (hgrowable trees prototyped in an extended tree binding)\n> http://tinyvid.tv/show/3h9c0b50vbi1h\nSo what happens to the columns if you resize the pane/window? (Or did you size the columns to fit before starting the video?)", "bug_id": 647704, "is_private": false, "tags": [], "time": "2011-04-05T11:24:39Z"}, {"is_private": false, "tags": [], "time": "2011-04-05T11:48:14Z", "count": 11, "raw_text": "(In reply to comment #10)\n> (In reply to comment #8)\n> > (http://tinyvid.tv/show/jlj0plk3owj6), where I demonstrate setting on the\n> > fourth column a preferred width smaller than its effective width, and how\n> > elastic the layout is when resizing other columns until it reaches that\n> > threshold.\n> ...\n> > > Not sure what minwidths have to do with anything.\n> > Implementation detail.  It's just how things work in the prototype I worked up,\n> > so that it could cope with things like flex...\n> Right, so if you only flexed the last visible column, and you set a minimum\n> width, then you could get an effect similar to the above video.\n\nYeah.\n\n> But the\n> splitter code wouldn't understand that and the column wouldn't be resizable.\n\nMmm... it does, though.  It's not shown in the prototype video, but the two aspects demonstrated in the two videos of the GNOME file manager are things that I have working.  There're a few places where last col stuff needs to be special-cased.\n\n> > (hgrowable trees prototyped in an extended tree binding)\n> > http://tinyvid.tv/show/3h9c0b50vbi1h\n> So what happens to the columns if you resize the pane/window? (Or did you size\n> the columns to fit before starting the video?)\n\nSame thing that happens with a vanilla tree with flex columns.", "bug_id": 647704, "author": "bugzilla@x.colbyrussell.com", "attachment_id": null, "id": 5391009, "creator": "bugzilla@x.colbyrussell.com", "text": "(In reply to comment #10)\n> (In reply to comment #8)\n> > (http://tinyvid.tv/show/jlj0plk3owj6), where I demonstrate setting on the\n> > fourth column a preferred width smaller than its effective width, and how\n> > elastic the layout is when resizing other columns until it reaches that\n> > threshold.\n> ...\n> > > Not sure what minwidths have to do with anything.\n> > Implementation detail.  It's just how things work in the prototype I worked up,\n> > so that it could cope with things like flex...\n> Right, so if you only flexed the last visible column, and you set a minimum\n> width, then you could get an effect similar to the above video.\n\nYeah.\n\n> But the\n> splitter code wouldn't understand that and the column wouldn't be resizable.\n\nMmm... it does, though.  It's not shown in the prototype video, but the two aspects demonstrated in the two videos of the GNOME file manager are things that I have working.  There're a few places where last col stuff needs to be special-cased.\n\n> > (hgrowable trees prototyped in an extended tree binding)\n> > http://tinyvid.tv/show/3h9c0b50vbi1h\n> So what happens to the columns if you resize the pane/window? (Or did you size\n> the columns to fit before starting the video?)\n\nSame thing that happens with a vanilla tree with flex columns.", "creation_time": "2011-04-05T11:48:14Z"}, {"creator": "neil@httl.net", "author": "neil@httl.net", "time": "2011-04-05T12:14:13Z", "bug_id": 647704, "count": 12, "id": 5391022, "attachment_id": null, "text": "(In reply to comment #11)\n> > But the\n> > splitter code wouldn't understand that and the column wouldn't be resizable.\n> Mmm... it does, though.\nWell, not with the current setup, which is what I was trying it on, and I don't see offhand how you could change it and still have the last column flexible.\n\n> > > (hgrowable trees prototyped in an extended tree binding)\n> > > http://tinyvid.tv/show/3h9c0b50vbi1h\n> > So what happens to the columns if you resize the pane/window? (Or did you size\n> > the columns to fit before starting the video?)\n> Same thing that happens with a vanilla tree with flex columns.\nSorry, I don't understand... a vanilla tree with flex columns won't scroll, so when you resize the pane all the columns flex to fit.", "creation_time": "2011-04-05T12:14:13Z", "is_private": false, "tags": [], "raw_text": "(In reply to comment #11)\n> > But the\n> > splitter code wouldn't understand that and the column wouldn't be resizable.\n> Mmm... it does, though.\nWell, not with the current setup, which is what I was trying it on, and I don't see offhand how you could change it and still have the last column flexible.\n\n> > > (hgrowable trees prototyped in an extended tree binding)\n> > > http://tinyvid.tv/show/3h9c0b50vbi1h\n> > So what happens to the columns if you resize the pane/window? (Or did you size\n> > the columns to fit before starting the video?)\n> Same thing that happens with a vanilla tree with flex columns.\nSorry, I don't understand... a vanilla tree with flex columns won't scroll, so when you resize the pane all the columns flex to fit."}, {"bug_id": 647704, "raw_text": "(In reply to comment #12)\n> (In reply to comment #11)\n> > > But the\n> > > splitter code wouldn't understand that and the column wouldn't be resizable.\n> > Mmm... it does, though.\n> Well, not with the current setup, which is what I was trying it on, and I don't\n> see offhand how you could change it and still have the last column flexible.\n> \n> > > > (hgrowable trees prototyped in an extended tree binding)\n> > > > http://tinyvid.tv/show/3h9c0b50vbi1h\n> > > So what happens to the columns if you resize the pane/window? (Or did you size\n> > > the columns to fit before starting the video?)\n> > Same thing that happens with a vanilla tree with flex columns.\n> Sorry, I don't understand... a vanilla tree with flex columns won't scroll\n\nIt will if all the cols have a minwidth set where their sum is greater than the space afforded by the tree.", "count": 13, "time": "2011-04-05T12:33:59Z", "tags": [], "is_private": false, "creation_time": "2011-04-05T12:33:59Z", "text": "(In reply to comment #12)\n> (In reply to comment #11)\n> > > But the\n> > > splitter code wouldn't understand that and the column wouldn't be resizable.\n> > Mmm... it does, though.\n> Well, not with the current setup, which is what I was trying it on, and I don't\n> see offhand how you could change it and still have the last column flexible.\n> \n> > > > (hgrowable trees prototyped in an extended tree binding)\n> > > > http://tinyvid.tv/show/3h9c0b50vbi1h\n> > > So what happens to the columns if you resize the pane/window? (Or did you size\n> > > the columns to fit before starting the video?)\n> > Same thing that happens with a vanilla tree with flex columns.\n> Sorry, I don't understand... a vanilla tree with flex columns won't scroll\n\nIt will if all the cols have a minwidth set where their sum is greater than the space afforded by the tree.", "creator": "bugzilla@x.colbyrussell.com", "attachment_id": null, "id": 5391042, "author": "bugzilla@x.colbyrussell.com"}, {"bug_id": 647704, "count": 14, "time": "2011-04-05T12:44:01Z", "creator": "bugzilla@x.colbyrussell.com", "author": "bugzilla@x.colbyrussell.com", "raw_text": "(In reply to comment #12)\n> (In reply to comment #11)\n> > > But the\n> > > splitter code wouldn't understand that and the column wouldn't be resizable.\n> > Mmm... it does, though.\n> Well, not with the current setup, which is what I was trying it on, and I don't\n> see offhand how you could change it and still have the last column flexible.\n\nWhen the splitter enters the drag state, the resizing col's flex is temporarily removed until the drag state ends, then it's reinstated.  The minwidth is also removed, then readded to be the same as width at the end of the drag.\n\nIf the resizing col is the last one, flex gets removed as it does with the other columns, but if during the drag, the width drops below the width required to give the appearance of a completely filled treecols element (i.e., it would leave a gap as in attachment 524026), the flex is readded.", "tags": [], "is_private": false, "creation_time": "2011-04-05T12:44:01Z", "text": "(In reply to comment #12)\n> (In reply to comment #11)\n> > > But the\n> > > splitter code wouldn't understand that and the column wouldn't be resizable.\n> > Mmm... it does, though.\n> Well, not with the current setup, which is what I was trying it on, and I don't\n> see offhand how you could change it and still have the last column flexible.\n\nWhen the splitter enters the drag state, the resizing col's flex is temporarily removed until the drag state ends, then it's reinstated.  The minwidth is also removed, then readded to be the same as width at the end of the drag.\n\nIf the resizing col is the last one, flex gets removed as it does with the other columns, but if during the drag, the width drops below the width required to give the appearance of a completely filled treecols element (i.e., it would leave a gap as in attachment 524026), the flex is readded.", "id": 5391051, "attachment_id": null}, {"creation_time": "2011-04-05T13:04:18Z", "creator": "neil@httl.net", "text": "I see how that would work, although it does feel a little hackish to me.", "attachment_id": null, "id": 5391065, "author": "neil@httl.net", "bug_id": 647704, "raw_text": "I see how that would work, although it does feel a little hackish to me.", "count": 15, "time": "2011-04-05T13:04:18Z", "tags": [], "is_private": false}, {"creation_time": "2011-04-05T13:10:43Z", "author": "bugzilla@x.colbyrussell.com", "attachment_id": null, "id": 5391069, "text": "(In reply to comment #11)\n> > > (hgrowable trees prototyped in an extended tree binding)\n> > > http://tinyvid.tv/show/3h9c0b50vbi1h\n> > So what happens to the columns if you resize the pane/window? (Or did you size\n> > the columns to fit before starting the video?)\n> \n> Same thing that happens with a vanilla tree with flex columns.\n\nAlso, I should point out here that this actually *isn't* the way the GNOME file manager does things.  When you resize the window, the extra space gets added to the first column, and you can't do anything about it\u2014not even drag its splitter to resize it to be any smaller.\n\n(In reply to comment #15)\n> I see how that would work, although it does feel a little hackish to me.\n\nAgreed, but then lots of other XUL stuff does stuff in ways that add, remove, and alter attributes.  Does it feel that way just because it's done in XBL which necessitates doing it through adding and removing attributes?  If it were done in the splitter/tree frame code using the same principles, would it be kosher?", "creator": "bugzilla@x.colbyrussell.com", "count": 16, "raw_text": "(In reply to comment #11)\n> > > (hgrowable trees prototyped in an extended tree binding)\n> > > http://tinyvid.tv/show/3h9c0b50vbi1h\n> > So what happens to the columns if you resize the pane/window? (Or did you size\n> > the columns to fit before starting the video?)\n> \n> Same thing that happens with a vanilla tree with flex columns.\n\nAlso, I should point out here that this actually *isn't* the way the GNOME file manager does things.  When you resize the window, the extra space gets added to the first column, and you can't do anything about it\u2014not even drag its splitter to resize it to be any smaller.\n\n(In reply to comment #15)\n> I see how that would work, although it does feel a little hackish to me.\n\nAgreed, but then lots of other XUL stuff does stuff in ways that add, remove, and alter attributes.  Does it feel that way just because it's done in XBL which necessitates doing it through adding and removing attributes?  If it were done in the splitter/tree frame code using the same principles, would it be kosher?", "bug_id": 647704, "is_private": false, "tags": [], "time": "2011-04-05T13:10:43Z"}, {"count": 17, "bug_id": 647704, "raw_text": "(In reply to comment #16)\n> (In reply to comment #15)\n> > I see how that would work, although it does feel a little hackish to me.\n> Agreed, but then lots of other XUL stuff does stuff in ways that add, remove,\n> and alter attributes.  Does it feel that way just because it's done in XBL\n> which necessitates doing it through adding and removing attributes?  If it were\n> done in the splitter/tree frame code using the same principles, would it be\n> kosher?\nWell, for instance, you want to be able to say \"I want this to be able to flex bigger but not smaller, but I want splitters to be able to shrink it\", which isn't supported in the current box model.", "tags": [], "is_private": false, "time": "2011-04-05T13:18:56Z", "creation_time": "2011-04-05T13:18:56Z", "author": "neil@httl.net", "creator": "neil@httl.net", "text": "(In reply to comment #16)\n> (In reply to comment #15)\n> > I see how that would work, although it does feel a little hackish to me.\n> Agreed, but then lots of other XUL stuff does stuff in ways that add, remove,\n> and alter attributes.  Does it feel that way just because it's done in XBL\n> which necessitates doing it through adding and removing attributes?  If it were\n> done in the splitter/tree frame code using the same principles, would it be\n> kosher?\nWell, for instance, you want to be able to say \"I want this to be able to flex bigger but not smaller, but I want splitters to be able to shrink it\", which isn't supported in the current box model.", "id": 5391075, "attachment_id": null}, {"is_private": false, "tags": [], "time": "2011-04-08T05:11:05Z", "count": 18, "raw_text": "Over in bug 197123, comment 8 and bug 197123, comment 14, Enn and faaborg note about trying to get this working.\n\n(In a few hours, I'm submitting this as part of my proposal for GSoC, by the way.)", "bug_id": 647704, "author": "bugzilla@x.colbyrussell.com", "id": 5395967, "attachment_id": null, "creator": "bugzilla@x.colbyrussell.com", "text": "Over in bug 197123, comment 8 and bug 197123, comment 14, Enn and faaborg note about trying to get this working.\n\n(In a few hours, I'm submitting this as part of my proposal for GSoC, by the way.)", "creation_time": "2011-04-08T05:11:05Z"}, {"id": 13244423, "attachment_id": null, "creator": "bug-husbandry-bot@mozilla.bugs", "text": "Moving to Core:XUL per https://bugzilla.mozilla.org/show_bug.cgi?id=1455336", "author": "bug-husbandry-bot@mozilla.bugs", "creation_time": "2018-04-30T20:12:18Z", "time": "2018-04-30T20:12:18Z", "is_private": false, "tags": [], "raw_text": "Moving to Core:XUL per https://bugzilla.mozilla.org/show_bug.cgi?id=1455336", "bug_id": 647704, "count": 19}]}}}