{"bugs": {"1637539": {"comments": [{"id": 14816251, "author": "alessio.placitelli@gmail.com", "is_private": false, "raw_text": "[Original Github Issue](https://github.com/mozilla/glean/issues/878)\n\n> \n> \n> Firefox iOS apk goes from 38MB to 42MB, a 10% increase in binary size, can we reduce the footprint of this lib? This will impact loading time at the DYLD stage, but also we have to control size creep over time so it is good to catch these growth spurts as they happen.", "text": "[Original Github Issue](https://github.com/mozilla/glean/issues/878)\n\n> \n> \n> Firefox iOS apk goes from 38MB to 42MB, a 10% increase in binary size, can we reduce the footprint of this lib? This will impact loading time at the DYLD stage, but also we have to control size creep over time so it is good to catch these growth spurts as they happen.", "attachment_id": null, "bug_id": 1637539, "creation_time": "2020-05-13T09:08:14Z", "creator": "alessio.placitelli@gmail.com", "time": "2020-05-13T09:08:14Z", "tags": [], "count": 0}, {"creator": "tlong@mozilla.com", "creation_time": "2020-05-13T13:57:46Z", "count": 1, "tags": [], "time": "2020-05-13T13:57:46Z", "text": "I'm pretty sure that this is due to the Glean framework being embedded in the application.  In the \"Frameworks, Libraries, and Embedded Content\" section, the setting for Glean.framework should be changed from \"Embed and Sign\" to \"Do Not Embed\" and the static linking should allow for better optimization.  I'll suggest this to Kayla on her PR", "raw_text": "I'm pretty sure that this is due to the Glean framework being embedded in the application.  In the \"Frameworks, Libraries, and Embedded Content\" section, the setting for Glean.framework should be changed from \"Embed and Sign\" to \"Do Not Embed\" and the static linking should allow for better optimization.  I'll suggest this to Kayla on her PR", "is_private": false, "author": "tlong@mozilla.com", "id": 14816722, "bug_id": 1637539, "attachment_id": null}, {"id": 14816723, "author": "jrediger@mozilla.com", "is_private": false, "text": "If this turns out to be the case, can we document this in the [doc sections about project integration](https://mozilla.github.io/glean/book/user/adding-glean-to-your-project.html#integrating-with-your-project) ?", "raw_text": "If this turns out to be the case, can we document this in the [doc sections about project integration](https://mozilla.github.io/glean/book/user/adding-glean-to-your-project.html#integrating-with-your-project) ?", "attachment_id": null, "bug_id": 1637539, "creation_time": "2020-05-13T13:59:47Z", "creator": "jrediger@mozilla.com", "time": "2020-05-13T13:59:47Z", "tags": [], "count": 2}, {"time": "2020-05-13T15:28:12Z", "count": 3, "tags": [], "creator": "gkeeley@mozilla.com", "creation_time": "2020-05-13T15:28:12Z", "attachment_id": null, "bug_id": 1637539, "author": "gkeeley@mozilla.com", "id": 14816960, "text": "(repeating this from a github comment)\nGlean is not built as a static archive:\n\n./Carthage/Build/iOS/Glean.framework/Glean: Mach-O universal binary with 2 architectures: [x86_64:Mach-O 64-bit dynamically linked shared library x86_64] [arm64]\n./Carthage/Build/iOS/Glean.framework/Glean (for architecture x86_64):\tMach-O 64-bit dynamically linked shared library x86_64\n./Carthage/Build/iOS/Glean.framework/Glean (for architecture arm64):\tMach-O 64-bit dynamically linked shared library arm64\n\nSwitching Glean to build statically should be straightforward (i hope!) given that A-S is a good point of reference. BTW, we switched A-S (app services lib) to static build and linkage early in the project for code stripping and it reduced the binary impact significantly, we might be able to dig up the issues that had metrics on this, but it was a major savings as I recall. A-S is linked into the Storage module of the app, which is a common shared component (the app is built as an assembly of frameworks) and my hope would be that linking Glean statically into the Storage module that also has A-S linked statically (as it does currently) will result in common Rust libs getting code-stripped.\n\nThe usage of Glean when linked statically is where we might run into difficulties on the Client-side. We had difficulties getting A-S symbols re-exported to consumers of the common Storage framework. IIRC, we simply avoided this by not exporting any A-S lib symbols from the Storage framework. We probably can't do this with Glean, so we may have to learn the gory details of Swift's module system. I think that is fully a consumer side problem, but again, not understanding Swifts module system as well as I would like means I might be wrong about that.", "raw_text": "(repeating this from a github comment)\nGlean is not built as a static archive:\n\n./Carthage/Build/iOS/Glean.framework/Glean: Mach-O universal binary with 2 architectures: [x86_64:Mach-O 64-bit dynamically linked shared library x86_64] [arm64]\n./Carthage/Build/iOS/Glean.framework/Glean (for architecture x86_64):\tMach-O 64-bit dynamically linked shared library x86_64\n./Carthage/Build/iOS/Glean.framework/Glean (for architecture arm64):\tMach-O 64-bit dynamically linked shared library arm64\n\nSwitching Glean to build statically should be straightforward (i hope!) given that A-S is a good point of reference. BTW, we switched A-S (app services lib) to static build and linkage early in the project for code stripping and it reduced the binary impact significantly, we might be able to dig up the issues that had metrics on this, but it was a major savings as I recall. A-S is linked into the Storage module of the app, which is a common shared component (the app is built as an assembly of frameworks) and my hope would be that linking Glean statically into the Storage module that also has A-S linked statically (as it does currently) will result in common Rust libs getting code-stripped.\n\nThe usage of Glean when linked statically is where we might run into difficulties on the Client-side. We had difficulties getting A-S symbols re-exported to consumers of the common Storage framework. IIRC, we simply avoided this by not exporting any A-S lib symbols from the Storage framework. We probably can't do this with Glean, so we may have to learn the gory details of Swift's module system. I think that is fully a consumer side problem, but again, not understanding Swifts module system as well as I would like means I might be wrong about that.", "is_private": false}, {"attachment_id": null, "bug_id": 1637539, "id": 14874756, "author": "tlong@mozilla.com", "is_private": false, "text": "Un-taking this for now in order to focus on Firefox-iOS migration.", "raw_text": "Un-taking this for now in order to focus on Firefox-iOS migration.", "time": "2020-06-10T18:56:45Z", "tags": [], "count": 4, "creation_time": "2020-06-10T18:56:45Z", "creator": "tlong@mozilla.com"}, {"creation_time": "2020-07-15T14:06:15Z", "creator": "tlong@mozilla.com", "tags": [], "count": 5, "time": "2020-07-15T14:06:15Z", "is_private": false, "text": "Picking this back up now to try and resolve it while we are collecting data from the migration for validation.", "raw_text": "Picking this back up now to try and resolve it while we are collecting data from the migration for validation.", "id": 14938489, "author": "tlong@mozilla.com", "bug_id": 1637539, "attachment_id": null}, {"bug_id": 1637539, "attachment_id": null, "is_private": false, "raw_text": "After digging into this a bit, I think most of the size of the app is already linked as a static library (libglean_ffi) and I don't know how much it would benefit, based on the effort it would take to try and statically link the platform binding pieces.  I think the only way we could do this would be to create a new project/target that included both the libglean_ffi.a and a new glean.a (representing the binding pieces as a statically build lib).\n\nAnother way I looked into reducing the size of Glean was to `strip` unneeded symbols.  Just doing a `strip -N` caused a reduction in size of the compiled Glean binary from 5.3 MB to 3.4 MB.  I then tested this by generating a signed developer .ipa file to gauge the impact of the smaller Glean binary on the total .IPA size:\n\nCurrent main (no changes to Glean) + \"Do Not Embed\" = 29.2 MB .ipa size\nCurrent main (no changes to Glean) + \"Embed and Sign\" = Error, couldn't export a .ipa file\nStripped Glean + \"Do Not Embed\" = 29.2 MB .ipa size\nStripped Glean + \"Embed and Sign\" = 28.8 MB .ipa size\n\nI'm not sure why the current Glean + embed and sign failed, but it does look like stripping + Embed and signing the framework does have an impact on overall app size.  \n\nMy next step will be to see if there are any additional symbols that can be stripped (and to ensure that this hasn't broken anything)", "text": "After digging into this a bit, I think most of the size of the app is already linked as a static library (libglean_ffi) and I don't know how much it would benefit, based on the effort it would take to try and statically link the platform binding pieces.  I think the only way we could do this would be to create a new project/target that included both the libglean_ffi.a and a new glean.a (representing the binding pieces as a statically build lib).\n\nAnother way I looked into reducing the size of Glean was to `strip` unneeded symbols.  Just doing a `strip -N` caused a reduction in size of the compiled Glean binary from 5.3 MB to 3.4 MB.  I then tested this by generating a signed developer .ipa file to gauge the impact of the smaller Glean binary on the total .IPA size:\n\nCurrent main (no changes to Glean) + \"Do Not Embed\" = 29.2 MB .ipa size\nCurrent main (no changes to Glean) + \"Embed and Sign\" = Error, couldn't export a .ipa file\nStripped Glean + \"Do Not Embed\" = 29.2 MB .ipa size\nStripped Glean + \"Embed and Sign\" = 28.8 MB .ipa size\n\nI'm not sure why the current Glean + embed and sign failed, but it does look like stripping + Embed and signing the framework does have an impact on overall app size.  \n\nMy next step will be to see if there are any additional symbols that can be stripped (and to ensure that this hasn't broken anything)", "id": 14951044, "author": "tlong@mozilla.com", "tags": [], "count": 6, "time": "2020-07-22T13:44:05Z", "creation_time": "2020-07-22T13:44:05Z", "creator": "tlong@mozilla.com"}, {"bug_id": 1637539, "count": 7, "tags": [], "attachment_id": 9165409, "time": "2020-07-22T15:20:36Z", "text": "Created attachment 9165409\nv25, before glean, IPA 38 MB", "raw_text": "", "is_private": false, "creator": "gkeeley@mozilla.com", "id": 14951224, "creation_time": "2020-07-22T15:20:36Z", "author": "gkeeley@mozilla.com"}, {"raw_text": "", "text": "Created attachment 9165411\nv26, after adding glean, IPA 42 MB", "is_private": false, "id": 14951228, "author": "gkeeley@mozilla.com", "bug_id": 1637539, "attachment_id": 9165411, "creator": "gkeeley@mozilla.com", "creation_time": "2020-07-22T15:21:37Z", "count": 8, "tags": [], "time": "2020-07-22T15:21:37Z"}, {"is_private": false, "text": "When looking at App Thinning Size Reports, it looks like some variants can save as much as 600KB and some around 100KB (mostly iPad variants) through stripping just using `strip -N` on the Glean binary.", "raw_text": "When looking at App Thinning Size Reports, it looks like some variants can save as much as 600KB and some around 100KB (mostly iPad variants) through stripping just using `strip -N` on the Glean binary.", "id": 14951493, "author": "tlong@mozilla.com", "bug_id": 1637539, "attachment_id": null, "creation_time": "2020-07-22T17:19:20Z", "creator": "tlong@mozilla.com", "tags": [], "count": 9, "time": "2020-07-22T17:19:20Z"}, {"is_private": false, "text": "Created attachment 9165689\nincreased startup time after adding Glean lib\n\nThis is the opposite trend we are going for in terms of competing with Safari, which has 1/2 our startup time.\n\nI ran some startup profiling but it is nearly all reported as dyld (as usual when I check on this) so there isn't any particular insights I can see from there.", "raw_text": "This is the opposite trend we are going for in terms of competing with Safari, which has 1/2 our startup time.\n\nI ran some startup profiling but it is nearly all reported as dyld (as usual when I check on this) so there isn't any particular insights I can see from there.", "id": 14953083, "creation_time": "2020-07-23T15:14:26Z", "author": "gkeeley@mozilla.com", "creator": "gkeeley@mozilla.com", "tags": [], "bug_id": 1637539, "count": 10, "attachment_id": 9165689, "time": "2020-07-23T15:14:26Z"}, {"is_private": false, "raw_text": "The biggest win will be if we can build Glean into app-services lib, so we have single static lib (a-s is already a static lib) and we aren't duplicating Rust dependencies.", "text": "The biggest win will be if we can build Glean into app-services lib, so we have single static lib (a-s is already a static lib) and we aren't duplicating Rust dependencies.", "author": "gkeeley@mozilla.com", "id": 14953161, "bug_id": 1637539, "attachment_id": null, "creation_time": "2020-07-23T15:53:15Z", "creator": "gkeeley@mozilla.com", "tags": [], "count": 11, "time": "2020-07-23T15:53:15Z"}, {"text": "(In reply to Travis Long [:travis_] from comment #6)\n> After digging into this a bit, I think most of the size of the app is already linked as a static library (libglean_ffi) and I don't know how much it would benefit, based on the effort it would take to try and statically link the platform binding pieces.  I think the only way we could do this would be to create a new project/target that included both the libglean_ffi.a and a new glean.a (representing the binding pieces as a statically build lib).\n\nYeah, I'll retitle this bug to be clearer, as the overriding issue is the startup cost for dyld to run at startup time, and do all its work on the dynamic lib. The size is less of a factor than that, other than the size of a dylib affecting the workload on dyld. Statically linking removes all the dyld cost of this lib.", "raw_text": "(In reply to Travis Long [:travis_] from comment #6)\n> After digging into this a bit, I think most of the size of the app is already linked as a static library (libglean_ffi) and I don't know how much it would benefit, based on the effort it would take to try and statically link the platform binding pieces.  I think the only way we could do this would be to create a new project/target that included both the libglean_ffi.a and a new glean.a (representing the binding pieces as a statically build lib).\n\nYeah, I'll retitle this bug to be clearer, as the overriding issue is the startup cost for dyld to run at startup time, and do all its work on the dynamic lib. The size is less of a factor than that, other than the size of a dylib affecting the workload on dyld. Statically linking removes all the dyld cost of this lib.", "is_private": false, "creator": "gkeeley@mozilla.com", "author": "gkeeley@mozilla.com", "id": 14953177, "creation_time": "2020-07-23T16:00:09Z", "bug_id": 1637539, "count": 12, "tags": [], "attachment_id": null, "time": "2020-07-23T16:00:09Z"}, {"time": "2020-07-23T17:07:24Z", "tags": [], "count": 13, "creation_time": "2020-07-23T17:07:24Z", "creator": "tlong@mozilla.com", "attachment_id": null, "bug_id": 1637539, "author": "tlong@mozilla.com", "id": 14953334, "is_private": false, "raw_text": "(In reply to :garvan from comment #10)\n> Created attachment 9165689\n> increased startup time after adding Glean lib\n> \n> This is the opposite trend we are going for in terms of competing with Safari, which has 1/2 our startup time.\n> \n> I ran some startup profiling but it is nearly all reported as dyld (as usual when I check on this) so there isn't any particular insights I can see from there.\n\nMost of `Glean.initialize` already runs in a background thread to avoid impact on startup as much as possible.  If there are other things we can do to minimize this impact, we are happy to try!  I did find the Mach-O setting to change to a statically build library and combining that with the stripping I think we can get pretty close to our target.  \n\nMegazording with A-S probably won't happen with this first pass, but we aren't taking it off of the table just yet. This requires some discussion within our team that is ongoing.", "text": "(In reply to :garvan from comment #10)\n> Created attachment 9165689\n> increased startup time after adding Glean lib\n> \n> This is the opposite trend we are going for in terms of competing with Safari, which has 1/2 our startup time.\n> \n> I ran some startup profiling but it is nearly all reported as dyld (as usual when I check on this) so there isn't any particular insights I can see from there.\n\nMost of `Glean.initialize` already runs in a background thread to avoid impact on startup as much as possible.  If there are other things we can do to minimize this impact, we are happy to try!  I did find the Mach-O setting to change to a statically build library and combining that with the stripping I think we can get pretty close to our target.  \n\nMegazording with A-S probably won't happen with this first pass, but we aren't taking it off of the table just yet. This requires some discussion within our team that is ongoing."}, {"count": 14, "tags": [], "time": "2020-09-09T16:42:41Z", "creator": "tlong@mozilla.com", "creation_time": "2020-09-09T16:42:41Z", "bug_id": 1637539, "attachment_id": null, "text": "Closing this in favor of Bug 1661539", "raw_text": "Closing this in favor of Bug 1661539", "is_private": false, "id": 15028093, "author": "tlong@mozilla.com"}]}}, "comments": {}}