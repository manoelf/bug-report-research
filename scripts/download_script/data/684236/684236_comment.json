{"bugs": {"684236": {"comments": [{"creation_time": "2011-09-02T14:50:02Z", "author": "mh+mozilla@glandium.org", "text": "We got a repeatable crash in plugins (bug 684215) after the landing of bug 681238. That crash was fixed by landing bug 681924. The reason this happened is that AddHook was called repeatedly on functions that were already hooked.\n\nBefore bug 681238, the first AddHook call would create the hook, which effectively replaces the first few instructions of the function by a jump to the given function. The second AddHook call would fail because the function would now contain a jump instruction, that the trampoline creation code doesn't handle.\n\nBug 681238 added support for jump instructions, so the second AddHook effectively works, so what happens then is that the newly created trampoline contains a jump to the function given the first time to AddHook, and the hooked function contains a jump to the function given the second time. Since the given function is supposed to call the trampoline, what effectively happens when calling the hooked function is that the given function is called a first time, calls the new trampoline, which calls the function again, etc.\n\nI think we should force AddHook to fail the second time to avoid such situations in the future.", "tags": [], "time": "2011-09-02T14:50:02Z", "is_private": false, "creator": "mh+mozilla@glandium.org", "id": 5696262, "attachment_id": null, "raw_text": "We got a repeatable crash in plugins (bug 684215) after the landing of bug 681238. That crash was fixed by landing bug 681924. The reason this happened is that AddHook was called repeatedly on functions that were already hooked.\n\nBefore bug 681238, the first AddHook call would create the hook, which effectively replaces the first few instructions of the function by a jump to the given function. The second AddHook call would fail because the function would now contain a jump instruction, that the trampoline creation code doesn't handle.\n\nBug 681238 added support for jump instructions, so the second AddHook effectively works, so what happens then is that the newly created trampoline contains a jump to the function given the first time to AddHook, and the hooked function contains a jump to the function given the second time. Since the given function is supposed to call the trampoline, what effectively happens when calling the hooked function is that the given function is called a first time, calls the new trampoline, which calls the function again, etc.\n\nI think we should force AddHook to fail the second time to avoid such situations in the future.", "bug_id": 684236, "count": 0}, {"id": 5696280, "raw_text": "(In reply to Mike Hommey [:glandium] from comment #0)\n> I think we should force AddHook to fail the second time to avoid such\n> situations in the future.\n\nRoot cause of bug 681924 is that sUser32* is overwritten.  So I don't think that AddHook disallow multiple injection.\n\nBut we should assert if passing same trampo address (3rd param) to AddHook().", "attachment_id": null, "bug_id": 684236, "tags": [], "time": "2011-09-02T14:58:15Z", "text": "(In reply to Mike Hommey [:glandium] from comment #0)\n> I think we should force AddHook to fail the second time to avoid such\n> situations in the future.\n\nRoot cause of bug 681924 is that sUser32* is overwritten.  So I don't think that AddHook disallow multiple injection.\n\nBut we should assert if passing same trampo address (3rd param) to AddHook().", "author": "m_kato@ga2.so-net.ne.jp", "creation_time": "2011-09-02T14:58:15Z", "count": 1, "creator": "m_kato@ga2.so-net.ne.jp", "is_private": false}, {"attachment_id": null, "raw_text": "(In reply to Makoto Kato from comment #1)\n> (In reply to Mike Hommey [:glandium] from comment #0)\n> > I think we should force AddHook to fail the second time to avoid such\n> > situations in the future.\n> \n> Root cause of bug 681924 is that sUser32* is overwritten.  So I don't think\n> that AddHook disallow multiple injection.\n> \n> But we should assert if passing same trampo address (3rd param) to AddHook().\n\nThat however doesn't entirely guarantee that the caller is not doing something fishy. On the other hand, before I added the support for the jump instruction on x86, AddHook simply didn't work the second time, so we shouldn't have code relying on being able to rehook an already hooked function. I think avoiding a second hook on the same function is the safest thing. Especially when you also consider the DllInterceptor destructor. Actually, I think the safest would be to disallow *any* further AddHook (even from a different DllInterceptor for the same dll), though detecting it might be tricky.", "id": 5696547, "creator": "mh+mozilla@glandium.org", "is_private": false, "author": "mh+mozilla@glandium.org", "creation_time": "2011-09-02T16:07:32Z", "tags": [], "time": "2011-09-02T16:07:32Z", "text": "(In reply to Makoto Kato from comment #1)\n> (In reply to Mike Hommey [:glandium] from comment #0)\n> > I think we should force AddHook to fail the second time to avoid such\n> > situations in the future.\n> \n> Root cause of bug 681924 is that sUser32* is overwritten.  So I don't think\n> that AddHook disallow multiple injection.\n> \n> But we should assert if passing same trampo address (3rd param) to AddHook().\n\nThat however doesn't entirely guarantee that the caller is not doing something fishy. On the other hand, before I added the support for the jump instruction on x86, AddHook simply didn't work the second time, so we shouldn't have code relying on being able to rehook an already hooked function. I think avoiding a second hook on the same function is the safest thing. Especially when you also consider the DllInterceptor destructor. Actually, I think the safest would be to disallow *any* further AddHook (even from a different DllInterceptor for the same dll), though detecting it might be tricky.", "count": 2, "bug_id": 684236}]}}, "comments": {}}