{"bugs": {"669923": {"comments": [{"id": 5578818, "bug_id": 669923, "is_private": false, "creation_time": "2011-07-07T16:10:51Z", "creator": "benjamin@smedbergs.us", "text": "I frequently zoom videos (airmozilla) so that they are not quite so tiny on-screen, but this has the rather odd effect of making the video controls fuzzy because they are sampled up images.\n\nI wonder if we can write the controls in SVG instead?", "count": 0, "author": "benjamin@smedbergs.us", "tags": [], "time": "2011-07-07T16:10:51Z", "raw_text": "I frequently zoom videos (airmozilla) so that they are not quite so tiny on-screen, but this has the rather odd effect of making the video controls fuzzy because they are sampled up images.\n\nI wonder if we can write the controls in SVG instead?", "attachment_id": null}, {"id": 5580021, "bug_id": 669923, "is_private": false, "creation_time": "2011-07-08T00:28:23Z", "creator": "cajbir.bugzilla@cd.pn", "author": "cajbir.bugzilla@cd.pn", "count": 1, "text": "They were originally written in SVG so it's certainly possible.", "tags": [], "time": "2011-07-08T00:28:23Z", "attachment_id": null, "raw_text": "They were originally written in SVG so it's certainly possible."}, {"attachment_id": null, "raw_text": "I've got a working patch for some of the controls, to replace png by svg, but I was wondering if it would be necessary to provide a png fallback ? Can a user compile without/disable svg ?", "time": "2011-07-12T18:38:30Z", "tags": [], "author": "padenot@mozilla.com", "text": "I've got a working patch for some of the controls, to replace png by svg, but I was wondering if it would be necessary to provide a png fallback ? Can a user compile without/disable svg ?", "count": 2, "creator": "padenot@mozilla.com", "creation_time": "2011-07-12T18:38:30Z", "is_private": false, "id": 5587204, "bug_id": 669923}, {"is_private": false, "creation_time": "2011-07-13T00:27:43Z", "creator": "tterribe@vt.edu", "tags": [], "attachment_id": null, "id": 5588044, "bug_id": 669923, "author": "tterribe@vt.edu", "count": 3, "text": "There's an svg.enabled property, but I don't believe you can compile without SVG support entirely. I'm not sure how much the property actually turns off.", "time": "2011-07-13T00:27:43Z", "raw_text": "There's an svg.enabled property, but I don't believe you can compile without SVG support entirely. I'm not sure how much the property actually turns off."}, {"tags": [], "attachment_id": null, "is_private": false, "creation_time": "2011-07-13T16:25:49Z", "creator": "padenot@mozilla.com", "raw_text": "WIP : http://paul.cx/svg-controls/\n\nI will now integrate the svg images in the UI.\n\nNote that the throbbler can be animated using an <animateTransform> element, or plain old javascript. The former is quite slow in comparison of the former, and I fail to understand why.", "time": "2011-07-13T16:25:49Z", "bug_id": 669923, "id": 5589150, "count": 4, "text": "WIP : http://paul.cx/svg-controls/\n\nI will now integrate the svg images in the UI.\n\nNote that the throbbler can be animated using an <animateTransform> element, or plain old javascript. The former is quite slow in comparison of the former, and I fail to understand why.", "author": "padenot@mozilla.com"}, {"raw_text": "Here is a patch that adds the svg images.\n\nI notice that the SVG are correctly rendered in about 1 zoom step on 4, which is quite problematic. Is it normal or should I file a bug ? I haven't found any related bug so far.", "time": "2011-07-13T17:21:36Z", "bug_id": 669923, "id": 5589308, "text": "Created attachment 545693\nPatch v0 -- Replace png by svg for audio/video controls.\n\nHere is a patch that adds the svg images.\n\nI notice that the SVG are correctly rendered in about 1 zoom step on 4, which is quite problematic. Is it normal or should I file a bug ? I haven't found any related bug so far.", "count": 5, "author": "padenot@mozilla.com", "tags": [], "attachment_id": 545693, "is_private": false, "creation_time": "2011-07-13T17:21:36Z", "creator": "padenot@mozilla.com"}, {"author": "dholbert@mozilla.com", "count": 6, "text": "(In reply to comment #4)\n> WIP : http://paul.cx/svg-controls/\n> Note that the throbbler can be animated using an <animateTransform> element,\n> or plain old javascript. The former is quite slow in comparison of the\n> former, and I fail to understand why.\n\nI took a look at the commented-out animateTransform code in your WIP linked above -- it indeed has dead-time at the end of every cycle, which is what I assume you're talking about RE \"slow\".\n\nThat's because you only specify keyFrames for 80% of the way through the animation cycle. (the last one is at 0.8 -- note that that's in units of normalized animation-duration, *not* in units of seconds)  So your final keyFrame lasts for the final 20% of the animation.\n\nYou want to change your keyTimes values to range from 0 to 1 -- in particular, these values should work (they do on my system):\n  keyTimes=\"0.0; 0.125; 0.25; 0.375; 0.5; 0.625; 0.75; 0.875; 1.0\"", "creator": "dholbert@mozilla.com", "is_private": false, "creation_time": "2011-07-15T18:39:28Z", "id": 5593953, "bug_id": 669923, "attachment_id": null, "raw_text": "(In reply to comment #4)\n> WIP : http://paul.cx/svg-controls/\n> Note that the throbbler can be animated using an <animateTransform> element,\n> or plain old javascript. The former is quite slow in comparison of the\n> former, and I fail to understand why.\n\nI took a look at the commented-out animateTransform code in your WIP linked above -- it indeed has dead-time at the end of every cycle, which is what I assume you're talking about RE \"slow\".\n\nThat's because you only specify keyFrames for 80% of the way through the animation cycle. (the last one is at 0.8 -- note that that's in units of normalized animation-duration, *not* in units of seconds)  So your final keyFrame lasts for the final 20% of the animation.\n\nYou want to change your keyTimes values to range from 0 to 1 -- in particular, these values should work (they do on my system):\n  keyTimes=\"0.0; 0.125; 0.25; 0.375; 0.5; 0.625; 0.75; 0.875; 1.0\"", "time": "2011-07-15T18:39:28Z", "tags": []}, {"is_private": false, "creation_time": "2011-07-15T18:46:26Z", "bug_id": 669923, "id": 5593964, "text": "(having said that -- if you do actually hit perf issues on this animation (I don't), it is the case that transform computations are a bit expensive when compared to other types of animations.  You might get improved performance by using a non-rotating circle, with the 8 separate opacity animations to animate each dot separately.  Probably not necessary, but something to consider.)", "count": 7, "author": "dholbert@mozilla.com", "creator": "dholbert@mozilla.com", "tags": [], "raw_text": "(having said that -- if you do actually hit perf issues on this animation (I don't), it is the case that transform computations are a bit expensive when compared to other types of animations.  You might get improved performance by using a non-rotating circle, with the 8 separate opacity animations to animate each dot separately.  Probably not necessary, but something to consider.)", "attachment_id": null, "time": "2011-07-15T18:46:26Z"}, {"attachment_id": null, "raw_text": "Daniel, thank you for pointing that mistake out.\n\nBy slow, I meant that it uses quite a lot of CPU. On my Linux laptop, it eats about 30% of on core on my machine, with visible pauses in the animation. The js version uses 4% of one core, and is perfectly fluid. On my Windows box, the animate version uses about ten times more CPU than the js version.\n\nI'll tinker with the idea you mention, but seems not as straightforward as vectoring the png and applying a rotation, but I agree a declarative solution seems nicer that a js solution.", "time": "2011-07-15T19:46:13Z", "tags": [], "author": "padenot@mozilla.com", "count": 8, "text": "Daniel, thank you for pointing that mistake out.\n\nBy slow, I meant that it uses quite a lot of CPU. On my Linux laptop, it eats about 30% of on core on my machine, with visible pauses in the animation. The js version uses 4% of one core, and is perfectly fluid. On my Windows box, the animate version uses about ten times more CPU than the js version.\n\nI'll tinker with the idea you mention, but seems not as straightforward as vectoring the png and applying a rotation, but I agree a declarative solution seems nicer that a js solution.", "creator": "padenot@mozilla.com", "creation_time": "2011-07-15T19:46:13Z", "is_private": false, "bug_id": 669923, "id": 5594067}, {"attachment_id": null, "raw_text": "(In reply to comment #8)\n> By slow, I meant that it uses quite a lot of CPU. On my Linux laptop, it\n> eats about 30% of on core on my machine, with visible pauses in the\n> animation.\n\nGotcha - in that case, you will likely get better performance from a non-transform-dependent animation.  Our SMIL code hasn't really been optimized, so I can't guarantee that my opacity-animation suggestion will make it as fast as the animated PNG, but it should be better than the <animateTransform> version.\n\n> I agree a declarative solution seems nicer that a js solution.\n\nYup -- the other issue with the JS solution is that it won't work if you're using the SVG as an image (which I assume you will be).  (We disable scripts inside of svg-as-an-image, for security reasons.)", "time": "2011-07-15T20:53:00Z", "tags": [], "author": "dholbert@mozilla.com", "count": 9, "text": "(In reply to comment #8)\n> By slow, I meant that it uses quite a lot of CPU. On my Linux laptop, it\n> eats about 30% of on core on my machine, with visible pauses in the\n> animation.\n\nGotcha - in that case, you will likely get better performance from a non-transform-dependent animation.  Our SMIL code hasn't really been optimized, so I can't guarantee that my opacity-animation suggestion will make it as fast as the animated PNG, but it should be better than the <animateTransform> version.\n\n> I agree a declarative solution seems nicer that a js solution.\n\nYup -- the other issue with the JS solution is that it won't work if you're using the SVG as an image (which I assume you will be).  (We disable scripts inside of svg-as-an-image, for security reasons.)", "creator": "dholbert@mozilla.com", "is_private": false, "creation_time": "2011-07-15T20:53:00Z", "id": 5594200, "bug_id": 669923}, {"tags": [], "raw_text": "> Yup -- the other issue with the JS solution is that it won't work if you're \n> using the SVG as an image (which I assume you will be).  (We disable scripts \n> inside of svg-as-an-image, for security reasons.)\n\nIndeed, those images will be used as background image  via CSS (and that's why it depends on bug 600207), so a JS solution wouldn't work.\n\nThe other solution would be to use the SVG code in an XBL binding (I suppose we could use JS in that case), and to use -moz-binding to display it using CSS, but I can't make the SVG to refresh dynamically when zooming, I have to drag my mouse over the SVG image for it to resize after having zoomed.", "attachment_id": null, "time": "2011-07-15T21:40:40Z", "creation_time": "2011-07-15T21:40:40Z", "is_private": false, "id": 5594303, "bug_id": 669923, "count": 10, "text": "> Yup -- the other issue with the JS solution is that it won't work if you're \n> using the SVG as an image (which I assume you will be).  (We disable scripts \n> inside of svg-as-an-image, for security reasons.)\n\nIndeed, those images will be used as background image  via CSS (and that's why it depends on bug 600207), so a JS solution wouldn't work.\n\nThe other solution would be to use the SVG code in an XBL binding (I suppose we could use JS in that case), and to use -moz-binding to display it using CSS, but I can't make the SVG to refresh dynamically when zooming, I have to drag my mouse over the SVG image for it to resize after having zoomed.", "author": "padenot@mozilla.com", "creator": "padenot@mozilla.com"}, {"time": "2011-07-18T18:24:56Z", "raw_text": "(In reply to comment #3)\n> There's an svg.enabled property, but I don't believe you can compile without\n> SVG support entirely. I'm not sure how much the property actually turns off.\n\nThe svg.enabled property was removed some time ago.", "id": 5597040, "bug_id": 669923, "author": "longsonr@gmail.com", "text": "(In reply to comment #3)\n> There's an svg.enabled property, but I don't believe you can compile without\n> SVG support entirely. I'm not sure how much the property actually turns off.\n\nThe svg.enabled property was removed some time ago.", "count": 11, "tags": [], "attachment_id": null, "is_private": false, "creation_time": "2011-07-18T18:24:56Z", "creator": "longsonr@gmail.com"}, {"text": "We looked at doing SVG some time ago (before svg-in-img was supported), and it was a headache to use. I think it's acceptable to use SVG just for the image pieces, though, and continue to use XUL/HTML for the general framework of things.\n\nCC'ing shorlander here... We want to update/refresh the videocontrols' appearance soon... Any opinions on the pros/cons of doing that with SVG?\n\nAlso, at some point we'll probably revisit how zoom + the controls should work -- but that's another bug for sure. :)", "count": 12, "author": "jdinbox@gmail.com", "creator": "jdinbox@gmail.com", "creation_time": "2011-07-20T03:03:59Z", "is_private": false, "id": 5600824, "bug_id": 669923, "raw_text": "We looked at doing SVG some time ago (before svg-in-img was supported), and it was a headache to use. I think it's acceptable to use SVG just for the image pieces, though, and continue to use XUL/HTML for the general framework of things.\n\nCC'ing shorlander here... We want to update/refresh the videocontrols' appearance soon... Any opinions on the pros/cons of doing that with SVG?\n\nAlso, at some point we'll probably revisit how zoom + the controls should work -- but that's another bug for sure. :)", "attachment_id": null, "time": "2011-07-20T03:03:59Z", "tags": []}, {"attachment_id": null, "tags": [], "creator": "stephen@noved.org", "is_private": false, "creation_time": "2011-07-22T17:05:24Z", "time": "2011-07-22T17:05:24Z", "raw_text": "(In reply to comment #12)\n> CC'ing shorlander here... We want to update/refresh the videocontrols'\n> appearance soon... Any opinions on the pros/cons of doing that with SVG?\n\nThere are a few problems I keep running into with SVG. It is much harder to get pixel perfect designs with SVG. Usually this ends up requiring a lot of complicated paths, masks and many filters. This also results in much higher maintenance for updating and changing images.\n\nThe scaling benefit is nice. However it doesn't always look good except at certain zoom percentages.\n\nAnother potential benefit to SVG that could make up for the increased complexity would be separating the paths from the gradients and filters. For instance you could have a bunch of basic shapes and paths in one file and just call the right fills and filters with CSS and magically have the right style.\n\nIt is kind of a tough call on which is ultimately the better approach. The video controls might be a good place to experiment with it though.", "text": "(In reply to comment #12)\n> CC'ing shorlander here... We want to update/refresh the videocontrols'\n> appearance soon... Any opinions on the pros/cons of doing that with SVG?\n\nThere are a few problems I keep running into with SVG. It is much harder to get pixel perfect designs with SVG. Usually this ends up requiring a lot of complicated paths, masks and many filters. This also results in much higher maintenance for updating and changing images.\n\nThe scaling benefit is nice. However it doesn't always look good except at certain zoom percentages.\n\nAnother potential benefit to SVG that could make up for the increased complexity would be separating the paths from the gradients and filters. For instance you could have a bunch of basic shapes and paths in one file and just call the right fills and filters with CSS and magically have the right style.\n\nIt is kind of a tough call on which is ultimately the better approach. The video controls might be a good place to experiment with it though.", "count": 13, "author": "stephen@noved.org", "bug_id": 669923, "id": 5607342}, {"raw_text": "> The scaling benefit is nice. However it doesn't always look good except at \n> certain zoom percentages.\n\nThis is (I suppose) bug 600207, and thus SVG should look nice at any zoom level in a future (as in all the other browser supporting SVG and all the image viewer I know).", "time": "2011-07-25T15:32:33Z", "bug_id": 669923, "id": 5611111, "author": "padenot@mozilla.com", "text": "> The scaling benefit is nice. However it doesn't always look good except at \n> certain zoom percentages.\n\nThis is (I suppose) bug 600207, and thus SVG should look nice at any zoom level in a future (as in all the other browser supporting SVG and all the image viewer I know).", "count": 14, "tags": [], "attachment_id": null, "is_private": false, "creation_time": "2011-07-25T15:32:33Z", "creator": "padenot@mozilla.com"}, {"creation_time": "2014-01-15T15:33:30Z", "is_private": false, "id": 8292904, "bug_id": 669923, "text": "I don't plan to work on this in the near future.", "count": 15, "author": "padenot@mozilla.com", "creator": "padenot@mozilla.com", "tags": [], "raw_text": "I don't plan to work on this in the near future.", "attachment_id": null, "time": "2014-01-15T15:33:30Z"}]}}, "comments": {}}