{"comments": {}, "bugs": {"659201": {"comments": [{"time": "2011-05-24T00:28:50Z", "count": 0, "text": "User-Agent:       Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/534.36 (KHTML, like Gecko) Chrome/13.0.767.1 Safari/534.36\nBuild Identifier: Mozilla/5.0 (X11; Linux i686 on x86_64; rv:6.0a1) Gecko/20110523 Firefox/6.0a1\n\nCode snippet:\n\n  c.globalCompositeOperation = \"source-over\";\n  c.fillStyle=\"blue\";\n  c.fillRect(0, 0, 100, 100);\n  c.globalCompositeOperation = \"destination-in\";\n  c.scale(0, 0);\n  c.fillStyle = \"red\";\n  c.fillRect(10, 30, 20, 20);\n\nSee URL for demo.\n\nThe second fillRect() call is made with a scale to 0, 0 and should result in the shape being transformed to a 0-width, 0-height rectangle.  The composite step should then draw a 0, 0 sized rectangle into an infinite large black bitmap (which is a no-op) and then apply the composite operation for destination-in to the whole canvas, clearing it.  I suspect that the draw is being ignored completely since the CTM is not invertible, but that's not a safe optimization when the globalCompositeOperation is destination-in.\n\nOpera 10.62 on my box does clear the entire canvas and I just reviewed a patch to WebKit to do the same (assuming that it doesn't have bugs).\n\nReproducible: Always", "raw_text": "User-Agent:       Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/534.36 (KHTML, like Gecko) Chrome/13.0.767.1 Safari/534.36\nBuild Identifier: Mozilla/5.0 (X11; Linux i686 on x86_64; rv:6.0a1) Gecko/20110523 Firefox/6.0a1\n\nCode snippet:\n\n  c.globalCompositeOperation = \"source-over\";\n  c.fillStyle=\"blue\";\n  c.fillRect(0, 0, 100, 100);\n  c.globalCompositeOperation = \"destination-in\";\n  c.scale(0, 0);\n  c.fillStyle = \"red\";\n  c.fillRect(10, 30, 20, 20);\n\nSee URL for demo.\n\nThe second fillRect() call is made with a scale to 0, 0 and should result in the shape being transformed to a 0-width, 0-height rectangle.  The composite step should then draw a 0, 0 sized rectangle into an infinite large black bitmap (which is a no-op) and then apply the composite operation for destination-in to the whole canvas, clearing it.  I suspect that the draw is being ignored completely since the CTM is not invertible, but that's not a safe optimization when the globalCompositeOperation is destination-in.\n\nOpera 10.62 on my box does clear the entire canvas and I just reviewed a patch to WebKit to do the same (assuming that it doesn't have bugs).\n\nReproducible: Always", "creator": "jamesr@chromium.org", "id": 5488129, "author": "jamesr@chromium.org", "is_private": false, "bug_id": 659201, "tags": [], "creation_time": "2011-05-24T00:28:50Z", "attachment_id": null}, {"bug_id": 659201, "text": "Nice bug :-)", "tags": [], "creation_time": "2011-05-24T01:47:30Z", "attachment_id": null, "raw_text": "Nice bug :-)", "creator": "roc@ocallahan.org", "id": 5488253, "is_private": false, "time": "2011-05-24T01:47:30Z", "author": "roc@ocallahan.org", "count": 1}, {"tags": [], "creation_time": "2013-07-09T23:20:34Z", "attachment_id": null, "raw_text": "In Firefox, I see a blank canvas, while in Chrome, I see a blue square (from the link). Which is the expected behavior? From the description, I believe FF may have already fixed this.", "creator": "betravis@adobe.com", "bug_id": 659201, "text": "In Firefox, I see a blank canvas, while in Chrome, I see a blue square (from the link). Which is the expected behavior? From the description, I believe FF may have already fixed this.", "is_private": false, "author": "betravis@adobe.com", "time": "2013-07-09T23:20:34Z", "count": 2, "id": 7616377}]}}}