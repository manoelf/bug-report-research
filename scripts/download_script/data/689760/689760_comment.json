{"comments": {}, "bugs": {"689760": {"comments": [{"id": 5741505, "attachment_id": null, "raw_text": "Try to run falling leaves example on Mobile FF with CSS3D transforms enabled\nAnd found that it is extremely slow because we are creating and destroying textures on each paint...\n\nlooking deeply into Swap/Upload code and sizes found that for each paint we are trying to upload texture with different size ... why ? leaves images dimensions are not changing...", "creation_time": "2011-09-27T22:03:29Z", "author": "romaxa@gmail.com", "text": "Try to run falling leaves example on Mobile FF with CSS3D transforms enabled\nAnd found that it is extremely slow because we are creating and destroying textures on each paint...\n\nlooking deeply into Swap/Upload code and sizes found that for each paint we are trying to upload texture with different size ... why ? leaves images dimensions are not changing...", "tags": [], "bug_id": 689760, "time": "2011-09-27T22:03:29Z", "is_private": false, "creator": "romaxa@gmail.com", "count": 0}, {"count": 1, "creator": "romaxa@gmail.com", "is_private": false, "time": "2011-09-27T22:27:08Z", "bug_id": 689760, "tags": [], "text": "If it works this way:\n1) Calc size of non-rotated ThebesLayer (with non-rotated frames tree)\n2) Create ThebesLayer (Texture) for non-transformed tree\n3) Apply all transforms to ThebesLayer (rotation/scale et.c)\n\nIn that case if ThebesLayer content not changing all the time, then we should endup with just compositing Leave image picture with different transform (rotation)\n\nHow it feels like it working:\n1) Calc size of rotated ThebesLayer frame subtree\n2) alloc ThebesLayer with that size\n3) blit resulting shadow thebes layer to GPU\n4) calc new size of ThebesLayer rotated to different angle\net.c.", "author": "romaxa@gmail.com", "creation_time": "2011-09-27T22:27:08Z", "raw_text": "If it works this way:\n1) Calc size of non-rotated ThebesLayer (with non-rotated frames tree)\n2) Create ThebesLayer (Texture) for non-transformed tree\n3) Apply all transforms to ThebesLayer (rotation/scale et.c)\n\nIn that case if ThebesLayer content not changing all the time, then we should endup with just compositing Leave image picture with different transform (rotation)\n\nHow it feels like it working:\n1) Calc size of rotated ThebesLayer frame subtree\n2) alloc ThebesLayer with that size\n3) blit resulting shadow thebes layer to GPU\n4) calc new size of ThebesLayer rotated to different angle\net.c.", "attachment_id": null, "id": 5741612}, {"id": 5741673, "raw_text": "It should definitely be the first way.\n\nLooking at this on a desktop build (with gDumpPaintList = 1), all the transformed ThebesLayers are consistently 101x100. Any chance you can try track down why the sizes are changing for you?\n\nWe will still be hitting the problem of allocating temporary surfaces for ContainerLayers.", "attachment_id": null, "text": "It should definitely be the first way.\n\nLooking at this on a desktop build (with gDumpPaintList = 1), all the transformed ThebesLayers are consistently 101x100. Any chance you can try track down why the sizes are changing for you?\n\nWe will still be hitting the problem of allocating temporary surfaces for ContainerLayers.", "tags": [], "time": "2011-09-27T22:52:43Z", "bug_id": 689760, "creation_time": "2011-09-27T22:52:43Z", "author": "matt.woodrow@gmail.com", "count": 2, "is_private": false, "creator": "matt.woodrow@gmail.com"}, {"id": 5741683, "raw_text": "I've workarounded problem with temp surface with patch from 689416, so that is not a problem in this case", "attachment_id": null, "text": "I've workarounded problem with temp surface with patch from 689416, so that is not a problem in this case", "tags": [], "bug_id": 689760, "time": "2011-09-27T22:56:15Z", "creation_time": "2011-09-27T22:56:15Z", "author": "romaxa@gmail.com", "count": 3, "is_private": false, "creator": "romaxa@gmail.com"}, {"count": 4, "bug_id": 689760, "is_private": false, "creator": "romaxa@gmail.com", "creation_time": "2011-09-27T23:18:11Z", "author": "romaxa@gmail.com", "text": "Created attachment 562899\nDesktop build backtrace\n\nI see the same problem for desktop build too\nSurfaceBufferOGL::CreateBuffer()::328 CreateClampOrRepeatTextureImage, sz[62,44]\nSurfaceBufferOGL::CreateBuffer()::328 CreateClampOrRepeatTextureImage, sz[54,53]\nSurfaceBufferOGL::CreateBuffer()::328 CreateClampOrRepeatTextureImage, sz[96,78]\nSurfaceBufferOGL::CreateBuffer()::328 CreateClampOrRepeatTextureImage, sz[79,90]\nSurfaceBufferOGL::CreateBuffer()::328 CreateClampOrRepeatTextureImage, sz[100,90]\nSurfaceBufferOGL::CreateBuffer()::328 CreateClampOrRepeatTextureImage, sz[43,80]\n.....", "time": "2011-09-27T23:18:11Z", "tags": [], "attachment_id": 562899, "raw_text": "I see the same problem for desktop build too\nSurfaceBufferOGL::CreateBuffer()::328 CreateClampOrRepeatTextureImage, sz[62,44]\nSurfaceBufferOGL::CreateBuffer()::328 CreateClampOrRepeatTextureImage, sz[54,53]\nSurfaceBufferOGL::CreateBuffer()::328 CreateClampOrRepeatTextureImage, sz[96,78]\nSurfaceBufferOGL::CreateBuffer()::328 CreateClampOrRepeatTextureImage, sz[79,90]\nSurfaceBufferOGL::CreateBuffer()::328 CreateClampOrRepeatTextureImage, sz[100,90]\nSurfaceBufferOGL::CreateBuffer()::328 CreateClampOrRepeatTextureImage, sz[43,80]\n.....", "id": 5741742}, {"count": 5, "creator": "matt.woodrow@gmail.com", "is_private": false, "time": "2011-09-27T23:34:59Z", "tags": [], "bug_id": 689760, "text": "This looks to be causes by the leaves being partially clipped by their bounding box. As they move onto the screen we are reallocating the textures for every frame.\n\nWe should look at a strategy for precaching some of this content to avoid this much texture churn. This sounds very similar to the problem we had with mobile XUL UI scrolling in, so CC'ing roc and heeen.\n\nThis isn't 3d transforms specific, you can create this performance problem with any animated transform.", "author": "matt.woodrow@gmail.com", "creation_time": "2011-09-27T23:34:59Z", "raw_text": "This looks to be causes by the leaves being partially clipped by their bounding box. As they move onto the screen we are reallocating the textures for every frame.\n\nWe should look at a strategy for precaching some of this content to avoid this much texture churn. This sounds very similar to the problem we had with mobile XUL UI scrolling in, so CC'ing roc and heeen.\n\nThis isn't 3d transforms specific, you can create this performance problem with any animated transform.", "attachment_id": null, "id": 5741794}, {"count": 6, "bug_id": 689760, "is_private": false, "creator": "roc@ocallahan.org", "text": "I don't think we should use hints. I think we should use thresholding so we don't reallocate textures too often, e.g. when the visible region grows, allocate a texture that's a fair bit bigger than the new visible region, so if it grows some more we don't have to allocate again. And when it shrinks, don't reallocate the texture unless the visible region size is a lot smaller than the current texture.\n\nJust rounding up to the nearest power of 2 wouldn't always work well if the size oscillates around a power of 2.", "tags": [], "time": "2011-09-28T00:30:11Z", "creation_time": "2011-09-28T00:30:11Z", "author": "roc@ocallahan.org", "raw_text": "I don't think we should use hints. I think we should use thresholding so we don't reallocate textures too often, e.g. when the visible region grows, allocate a texture that's a fair bit bigger than the new visible region, so if it grows some more we don't have to allocate again. And when it shrinks, don't reallocate the texture unless the visible region size is a lot smaller than the current texture.\n\nJust rounding up to the nearest power of 2 wouldn't always work well if the size oscillates around a power of 2.", "attachment_id": null, "id": 5741947}, {"count": 7, "creator": "bas@basschouten.com", "is_private": false, "bug_id": 689760, "time": "2011-09-28T02:47:42Z", "tags": [], "text": "I'm thinking we might be able to create large textures and actually work on doing a sort of 'memory manager' for textures. If we would have a user mode texture memory manager we could drastically reduce the amount of texture creation.\n\nThe one downside would be clamping and such, but that could be overcome relatively easily, for example by complicating our geometries slightly (i.e. surrounding the quad by and outline the size of the area sampling pixels outside the quad with the clamped texture coordinate).\n\nThis approach seems like a more solid long term approach, although it is a little more complicated.", "author": "bas@basschouten.com", "creation_time": "2011-09-28T02:47:42Z", "raw_text": "I'm thinking we might be able to create large textures and actually work on doing a sort of 'memory manager' for textures. If we would have a user mode texture memory manager we could drastically reduce the amount of texture creation.\n\nThe one downside would be clamping and such, but that could be overcome relatively easily, for example by complicating our geometries slightly (i.e. surrounding the quad by and outline the size of the area sampling pixels outside the quad with the clamped texture coordinate).\n\nThis approach seems like a more solid long term approach, although it is a little more complicated.", "attachment_id": null, "id": 5742158}, {"id": 5742171, "attachment_id": null, "raw_text": "(In reply to Bas Schouten (:bas) from comment #7)\n> I'm thinking we might be able to create large textures and actually work on\n> doing a sort of 'memory manager' for textures. If we would have a user mode\n> texture memory manager we could drastically reduce the amount of texture\n> creation.\n\nIdeally we'd just have a jemalloc that could allocate from a pool to avoid unnecessary fragmentation etc, but from my understanding of jemalloc, that's currently impossible.", "creation_time": "2011-09-28T03:03:39Z", "author": "joe@drew.ca", "text": "(In reply to Bas Schouten (:bas) from comment #7)\n> I'm thinking we might be able to create large textures and actually work on\n> doing a sort of 'memory manager' for textures. If we would have a user mode\n> texture memory manager we could drastically reduce the amount of texture\n> creation.\n\nIdeally we'd just have a jemalloc that could allocate from a pool to avoid unnecessary fragmentation etc, but from my understanding of jemalloc, that's currently impossible.", "time": "2011-09-28T03:03:39Z", "tags": [], "is_private": false, "creator": "joe@drew.ca", "bug_id": 689760, "count": 8}, {"time": "2011-09-28T09:39:46Z", "tags": [], "bug_id": 689760, "text": "(In reply to Joe Drew (:JOEDREW!) from comment #8)\n> (In reply to Bas Schouten (:bas) from comment #7)\n> > I'm thinking we might be able to create large textures and actually work on\n> > doing a sort of 'memory manager' for textures. If we would have a user mode\n> > texture memory manager we could drastically reduce the amount of texture\n> > creation.\n> \n> Ideally we'd just have a jemalloc that could allocate from a pool to avoid\n> unnecessary fragmentation etc, but from my understanding of jemalloc, that's\n> currently impossible.\n\nThere's the additional problem that you need to be a little smarter. Since we don't just need contiguous texture memory we need the surface of the texture to 'fit' in the available surface area. Essentially unlike a 1D system like a heap manager you're doing a 2D system.", "author": "bas@basschouten.com", "creation_time": "2011-09-28T09:39:46Z", "count": 9, "creator": "bas@basschouten.com", "is_private": false, "id": 5742660, "raw_text": "(In reply to Joe Drew (:JOEDREW!) from comment #8)\n> (In reply to Bas Schouten (:bas) from comment #7)\n> > I'm thinking we might be able to create large textures and actually work on\n> > doing a sort of 'memory manager' for textures. If we would have a user mode\n> > texture memory manager we could drastically reduce the amount of texture\n> > creation.\n> \n> Ideally we'd just have a jemalloc that could allocate from a pool to avoid\n> unnecessary fragmentation etc, but from my understanding of jemalloc, that's\n> currently impossible.\n\nThere's the additional problem that you need to be a little smarter. Since we don't just need contiguous texture memory we need the surface of the texture to 'fit' in the available surface area. Essentially unlike a 1D system like a heap manager you're doing a 2D system.", "attachment_id": null}, {"text": "Ideally you wouldn't ever want to create and destroy textures if all you do is rotate and translate images that don't change. I guess trying to keep textures around for at least the next frame would help with the creation/destruction churn, if not with repainting each frame.", "bug_id": 689760, "tags": [], "time": "2011-09-28T20:52:21Z", "creation_time": "2011-09-28T20:52:21Z", "author": "florian.haenel@heeen.de", "count": 10, "is_private": false, "creator": "florian.haenel@heeen.de", "id": 5744198, "raw_text": "Ideally you wouldn't ever want to create and destroy textures if all you do is rotate and translate images that don't change. I guess trying to keep textures around for at least the next frame would help with the creation/destruction churn, if not with repainting each frame.", "attachment_id": null}, {"creation_time": "2011-09-28T21:07:49Z", "author": "cjones.bugs@gmail.com", "text": "I agree with comment 6.  That would also ameliorate other issues like window resizing being dog slow (not that anyone cares).  We used to see issues like this in fennec too, on page load, where the visible region would steadily grow as new content was added.  My only concern is wasted memory, but a quick talos run would be an easy estimate.  (And we could statically bound that through our resize policy.)", "time": "2011-09-28T21:07:49Z", "tags": [], "bug_id": 689760, "is_private": false, "creator": "cjones.bugs@gmail.com", "count": 11, "id": 5744262, "attachment_id": null, "raw_text": "I agree with comment 6.  That would also ameliorate other issues like window resizing being dog slow (not that anyone cares).  We used to see issues like this in fennec too, on page load, where the visible region would steadily grow as new content was added.  My only concern is wasted memory, but a quick talos run would be an easy estimate.  (And we could statically bound that through our resize policy.)"}, {"bug_id": 689760, "count": 12, "tags": [], "time": "2011-09-28T21:08:16Z", "text": "Also, what does webkit do?", "author": "cjones.bugs@gmail.com", "creation_time": "2011-09-28T21:08:16Z", "creator": "cjones.bugs@gmail.com", "is_private": false, "id": 5744266, "raw_text": "Also, what does webkit do?", "attachment_id": null}, {"text": "webkit just allocate all textures ahead... and don't bother with saving memory on that... if allocation fail then it will just not render layer...", "time": "2011-09-28T21:47:19Z", "tags": [], "creation_time": "2011-09-28T21:47:19Z", "author": "romaxa@gmail.com", "is_private": false, "creator": "romaxa@gmail.com", "id": 5744384, "raw_text": "webkit just allocate all textures ahead... and don't bother with saving memory on that... if allocation fail then it will just not render layer...", "attachment_id": null, "bug_id": 689760, "count": 13}, {"raw_text": "Patch to make OpenGL allocate larger textures than required when the size is increasing.\n\nFor sizing heuristics, I went with the smaller of 50% larger and 5x the current size increment. We can probably do better than this, this was just an initial test.\n\nAs mentioned in the comment, we could probably get more information from layout to prevent memory being wasted unnecessarily here.\n\nRomaxa: Does this help in a noticeable way on mobile?", "attachment_id": 564457, "id": 5756487, "count": 14, "creator": "matt.woodrow@gmail.com", "is_private": false, "tags": [], "bug_id": 689760, "time": "2011-10-04T04:48:10Z", "text": "Created attachment 564457\nWIP overallocation for GL layers\n\nPatch to make OpenGL allocate larger textures than required when the size is increasing.\n\nFor sizing heuristics, I went with the smaller of 50% larger and 5x the current size increment. We can probably do better than this, this was just an initial test.\n\nAs mentioned in the comment, we could probably get more information from layout to prevent memory being wasted unnecessarily here.\n\nRomaxa: Does this help in a noticeable way on mobile?", "author": "matt.woodrow@gmail.com", "creation_time": "2011-10-04T04:48:10Z"}, {"attachment_id": null, "raw_text": "actually this does not have any effect on mobile, because on mobile we are using another code path, I believe that is something around BasicShadowableThebesLayer  and software thebesLayerBuffer", "id": 5756608, "creator": "romaxa@gmail.com", "is_private": false, "count": 15, "author": "romaxa@gmail.com", "creation_time": "2011-10-04T06:14:53Z", "tags": [], "bug_id": 689760, "time": "2011-10-04T06:14:53Z", "text": "actually this does not have any effect on mobile, because on mobile we are using another code path, I believe that is something around BasicShadowableThebesLayer  and software thebesLayerBuffer"}, {"count": 16, "creator": "romaxa@gmail.com", "is_private": false, "time": "2011-10-04T06:24:44Z", "bug_id": 689760, "tags": [], "text": "Also I tried same code in http://mxr.mozilla.org/mozilla-central/source/gfx/layers/ThebesLayerBuffer.cpp#273\n\nbut it did not work as expected, we still creating buffers on every paint", "author": "romaxa@gmail.com", "creation_time": "2011-10-04T06:24:44Z", "raw_text": "Also I tried same code in http://mxr.mozilla.org/mozilla-central/source/gfx/layers/ThebesLayerBuffer.cpp#273\n\nbut it did not work as expected, we still creating buffers on every paint", "attachment_id": null, "id": 5756618}, {"author": "matt.woodrow@gmail.com", "creation_time": "2011-10-04T06:46:08Z", "bug_id": 689760, "time": "2011-10-04T06:46:08Z", "tags": [], "text": "Good catch.\n\nI think we code we need to modify is:\n\nhttp://mxr.mozilla.org/mozilla-central/source/gfx/layers/opengl/ThebesLayerOGL.cpp#842\n\nThis is even worse than the desktop GL situation, because we're resizing the texture when it shrinks as well as when it grows. We should be able to fix this and gain a lot on all resize operations.", "creator": "matt.woodrow@gmail.com", "is_private": false, "count": 17, "id": 5756640, "attachment_id": null, "raw_text": "Good catch.\n\nI think we code we need to modify is:\n\nhttp://mxr.mozilla.org/mozilla-central/source/gfx/layers/opengl/ThebesLayerOGL.cpp#842\n\nThis is even worse than the desktop GL situation, because we're resizing the texture when it shrinks as well as when it grows. We should be able to fix this and gain a lot on all resize operations."}, {"raw_text": "I'm struggling to get useful improvements from this without hints as to the possible sizes.\n\nI've been working with a modified version of falling leaves, with only a single leaf and the attached patch to view the texture re-allocations.\n\nThe current version gets us down to around 5 textures allocated as the leaf moves onto the screen (plus two when it passes under the text - From a new layer). This is slightly higher sometimes, depending on the path it takes.\n\nThe current code is overallocating by huge margins though, so will waste excessive amounts of video memory.\n\nComing up with a good allocation algorithm that balances texture allocations and memory wastage is key here, and I'm out of ideas.\n\nI'm going to have a look at passing down the full possible bounds of the layer so we can clamp allocations to that size.", "attachment_id": 565158, "id": 5762762, "count": 18, "is_private": false, "creator": "matt.woodrow@gmail.com", "text": "Created attachment 565158\nWIP overallocation for ThebesLayerBuffer\n\nI'm struggling to get useful improvements from this without hints as to the possible sizes.\n\nI've been working with a modified version of falling leaves, with only a single leaf and the attached patch to view the texture re-allocations.\n\nThe current version gets us down to around 5 textures allocated as the leaf moves onto the screen (plus two when it passes under the text - From a new layer). This is slightly higher sometimes, depending on the path it takes.\n\nThe current code is overallocating by huge margins though, so will waste excessive amounts of video memory.\n\nComing up with a good allocation algorithm that balances texture allocations and memory wastage is key here, and I'm out of ideas.\n\nI'm going to have a look at passing down the full possible bounds of the layer so we can clamp allocations to that size.", "bug_id": 689760, "time": "2011-10-06T08:20:39Z", "tags": [], "creation_time": "2011-10-06T08:20:39Z", "author": "matt.woodrow@gmail.com"}, {"id": 5762783, "raw_text": "What if the layer contents are actually growing though, due to reflow? It'll be hard to predict what the maximum bounds are going to be.\n\nWhat if a) we're very conservative about how we shrink, so at least we don't shrink until a couple of seconds at the smaller size and b) we increase by at least a factor of two every time we increase in a given direction?", "attachment_id": null, "text": "What if the layer contents are actually growing though, due to reflow? It'll be hard to predict what the maximum bounds are going to be.\n\nWhat if a) we're very conservative about how we shrink, so at least we don't shrink until a couple of seconds at the smaller size and b) we increase by at least a factor of two every time we increase in a given direction?", "bug_id": 689760, "time": "2011-10-06T08:37:26Z", "tags": [], "creation_time": "2011-10-06T08:37:26Z", "author": "roc@ocallahan.org", "count": 19, "is_private": false, "creator": "roc@ocallahan.org"}, {"id": 5765597, "attachment_id": null, "raw_text": "(In reply to Robert O'Callahan (:roc) (Mozilla Corporation) from comment #19)\n> What if the layer contents are actually growing though, due to reflow? It'll\n> be hard to predict what the maximum bounds are going to be.\n\nHrm, this is true. I was mainly thinking about the case of moving objects that are partially clipped by their container. Things that are actually changing size make this harder.\n\n> \n> What if a) we're very conservative about how we shrink, so at least we don't\n> shrink until a couple of seconds at the smaller size \n\nI didn't actually think about using time as a factor to change down texture size. This is a bit harder to implement, but probably worth it as we can afford to be much more aggressive with our growth strategy.\n\n> and b) we increase by\n> at least a factor of two every time we increase in a given direction?\n\nSounds good to me.", "author": "matt.woodrow@gmail.com", "creation_time": "2011-10-07T03:55:32Z", "time": "2011-10-07T03:55:32Z", "bug_id": 689760, "tags": [], "text": "(In reply to Robert O'Callahan (:roc) (Mozilla Corporation) from comment #19)\n> What if the layer contents are actually growing though, due to reflow? It'll\n> be hard to predict what the maximum bounds are going to be.\n\nHrm, this is true. I was mainly thinking about the case of moving objects that are partially clipped by their container. Things that are actually changing size make this harder.\n\n> \n> What if a) we're very conservative about how we shrink, so at least we don't\n> shrink until a couple of seconds at the smaller size \n\nI didn't actually think about using time as a factor to change down texture size. This is a bit harder to implement, but probably worth it as we can afford to be much more aggressive with our growth strategy.\n\n> and b) we increase by\n> at least a factor of two every time we increase in a given direction?\n\nSounds good to me.", "creator": "matt.woodrow@gmail.com", "is_private": false, "count": 20}, {"id": 5785525, "raw_text": "New version that's much more aggressive in increasing buffer sizes, and uses a timeout to delete these when they stop being needed.\n\nI saw some cases of corruption with this earlier, but can't reproduce it now. It probably still exists, working on it.\n\nRomaxa: Does this fix the performance issues you are seeing? It results in a lot less allocations for me.\n\nI've been testing with a modified version of falling leaves, that only has a single leaf falling. Will upload this if you want to try it.", "attachment_id": 567379, "tags": [], "time": "2011-10-17T02:05:26Z", "bug_id": 689760, "text": "Created attachment 567379\nWIP overallocation for ThebesLayerBuffer\n\nNew version that's much more aggressive in increasing buffer sizes, and uses a timeout to delete these when they stop being needed.\n\nI saw some cases of corruption with this earlier, but can't reproduce it now. It probably still exists, working on it.\n\nRomaxa: Does this fix the performance issues you are seeing? It results in a lot less allocations for me.\n\nI've been testing with a modified version of falling leaves, that only has a single leaf falling. Will upload this if you want to try it.", "author": "matt.woodrow@gmail.com", "creation_time": "2011-10-17T02:05:26Z", "count": 21, "creator": "matt.woodrow@gmail.com", "is_private": false}, {"id": 5787643, "raw_text": "Tested this patch, probably it make less allocation, but visually it almost not noticable, because we still having ~5-10 allocations per second, and that is just does not make any difference at the end.\nHere is dump of allocations with time(0) dumped", "attachment_id": 567599, "text": "Created attachment 567599\nAllocation log\n\nTested this patch, probably it make less allocation, but visually it almost not noticable, because we still having ~5-10 allocations per second, and that is just does not make any difference at the end.\nHere is dump of allocations with time(0) dumped", "tags": [], "time": "2011-10-17T22:28:32Z", "bug_id": 689760, "creation_time": "2011-10-17T22:28:32Z", "author": "romaxa@gmail.com", "count": 22, "is_private": false, "creator": "romaxa@gmail.com"}, {"raw_text": "Also with this patch I see remote thebes viewport rendering black areas...", "attachment_id": null, "id": 5787661, "count": 23, "is_private": false, "creator": "romaxa@gmail.com", "text": "Also with this patch I see remote thebes viewport rendering black areas...", "tags": [], "bug_id": 689760, "time": "2011-10-17T22:34:01Z", "creation_time": "2011-10-17T22:34:01Z", "author": "romaxa@gmail.com"}, {"is_private": false, "creator": "romaxa@gmail.com", "text": "Wondering why we can't just pre-alloc full thebes Layer size if it's size less than some sanity value... let say TextureMax Size, or Shmem Max size... and if it is bigger than go with slow path...", "time": "2011-10-17T22:38:36Z", "tags": [], "creation_time": "2011-10-17T22:38:36Z", "author": "romaxa@gmail.com", "raw_text": "Wondering why we can't just pre-alloc full thebes Layer size if it's size less than some sanity value... let say TextureMax Size, or Shmem Max size... and if it is bigger than go with slow path...", "attachment_id": null, "id": 5787673, "count": 24, "bug_id": 689760}, {"raw_text": "As roc said, we often don't know what the size will be.\n\nWe could get layout to communicate the current size of the ThebesLayer (not just the visible part), and then use a hybrid approach.", "attachment_id": null, "id": 5787694, "count": 25, "creator": "matt.woodrow@gmail.com", "is_private": false, "bug_id": 689760, "tags": [], "time": "2011-10-17T22:45:43Z", "text": "As roc said, we often don't know what the size will be.\n\nWe could get layout to communicate the current size of the ThebesLayer (not just the visible part), and then use a hybrid approach.", "author": "matt.woodrow@gmail.com", "creation_time": "2011-10-17T22:45:43Z"}, {"raw_text": "With this patch, is it just while the leaves are first coming into view that we have to reallocate textures a few times? Or is something else happening? It'd be interesting to break down the log to see the history of individual surfaces.\n\nWe can gather the union of the GetBounds() of the various display items in a ThebesLayer to come up with an estimate of the maximum size, and feed the rectangular bounds of that in as a new Layer property --- say, GetBoundsHint or something like that. I guess if that bounds is smaller than some threshold, or close to the visible bounds, we should use it to set the initial buffer size.", "attachment_id": null, "id": 5788110, "creator": "roc@ocallahan.org", "is_private": false, "tags": [], "time": "2011-10-18T02:04:07Z", "text": "With this patch, is it just while the leaves are first coming into view that we have to reallocate textures a few times? Or is something else happening? It'd be interesting to break down the log to see the history of individual surfaces.\n\nWe can gather the union of the GetBounds() of the various display items in a ThebesLayer to come up with an estimate of the maximum size, and feed the rectangular bounds of that in as a new Layer property --- say, GetBoundsHint or something like that. I guess if that bounds is smaller than some threshold, or close to the visible bounds, we should use it to set the initial buffer size.", "author": "roc@ocallahan.org", "creation_time": "2011-10-18T02:04:07Z", "count": 26, "bug_id": 689760}, {"creator": "matt.woodrow@gmail.com", "is_private": false, "count": 27, "author": "matt.woodrow@gmail.com", "creation_time": "2011-10-18T02:10:59Z", "bug_id": 689760, "time": "2011-10-18T02:10:59Z", "tags": [], "text": "For an individual leaf, we get around 4-5 (depending on frame rate and the path it takes) allocations as it moves onto the screen.\n\nThe leaf then falls without needing any drawing, and we eventually delete the software buffer. No changes are made to the texture since we aren't invalidating anything.\n\nWhen the leaf gets moved back to the top (and offscreen), we invalidate and start the process again.\n\nSo 4-5ish allocations per leaf, per cycle of the animation.\n\nIf we could avoid the invalidation and keep the leaf texture untouched between cycles we'd benefit a lot here.\n\nThe bounds hint would also help the first cycle of the animation, but that's probably less important for this particular example.", "attachment_id": null, "raw_text": "For an individual leaf, we get around 4-5 (depending on frame rate and the path it takes) allocations as it moves onto the screen.\n\nThe leaf then falls without needing any drawing, and we eventually delete the software buffer. No changes are made to the texture since we aren't invalidating anything.\n\nWhen the leaf gets moved back to the top (and offscreen), we invalidate and start the process again.\n\nSo 4-5ish allocations per leaf, per cycle of the animation.\n\nIf we could avoid the invalidation and keep the leaf texture untouched between cycles we'd benefit a lot here.\n\nThe bounds hint would also help the first cycle of the animation, but that's probably less important for this particular example.", "id": 5788120}, {"text": "By the way, why aren't our optimizations kicking in here to use an ImageLayer instead of a ThebesLayer?", "time": "2011-10-18T03:10:34Z", "tags": [], "creation_time": "2011-10-18T03:10:34Z", "author": "roc@ocallahan.org", "is_private": false, "creator": "roc@ocallahan.org", "id": 5788223, "raw_text": "By the way, why aren't our optimizations kicking in here to use an ImageLayer instead of a ThebesLayer?", "attachment_id": null, "bug_id": 689760, "count": 28}, {"attachment_id": null, "raw_text": "(In reply to Robert O'Callahan (:roc) (Mozilla Corporation) from comment #28)\n> By the way, why aren't our optimizations kicking in here to use an\n> ImageLayer instead of a ThebesLayer?\n\nIs there any way to test this optimization? I can't think of anything other than a compiled code test.\n\nI ask because this optimization could get broken fairly easily without anybody noticing.\n\nPurely hypothetical, but the original patch author could have incorrectly rebased the patch before landing so that this optimization has never worked at all.", "id": 5788288, "creator": "matt.woodrow@gmail.com", "is_private": false, "count": 29, "author": "matt.woodrow@gmail.com", "creation_time": "2011-10-18T03:47:38Z", "tags": [], "time": "2011-10-18T03:47:38Z", "bug_id": 689760, "text": "(In reply to Robert O'Callahan (:roc) (Mozilla Corporation) from comment #28)\n> By the way, why aren't our optimizations kicking in here to use an\n> ImageLayer instead of a ThebesLayer?\n\nIs there any way to test this optimization? I can't think of anything other than a compiled code test.\n\nI ask because this optimization could get broken fairly easily without anybody noticing.\n\nPurely hypothetical, but the original patch author could have incorrectly rebased the patch before landing so that this optimization has never worked at all."}, {"raw_text": "We might need to add a test-only API to nsIDOMWindowUtils or something. or maybe inIDOMUtils.", "attachment_id": null, "id": 5788334, "count": 30, "creator": "roc@ocallahan.org", "is_private": false, "bug_id": 689760, "tags": [], "time": "2011-10-18T04:34:24Z", "text": "We might need to add a test-only API to nsIDOMWindowUtils or something. or maybe inIDOMUtils.", "author": "roc@ocallahan.org", "creation_time": "2011-10-18T04:34:24Z"}, {"id": 5788458, "raw_text": "(In reply to Matt Woodrow (:mattwoodrow) from comment #27)\n> When the leaf gets moved back to the top (and offscreen), we invalidate and\n> start the process again.\n\nTo clarify, we don't invalidate as such, but we don't use the layer for multiples frames and we end up with a new layer when we do need it.\n\nDo you think it's worth trying to fix this? Or just focus on minimizing the allocations while it's visible.", "attachment_id": null, "bug_id": 689760, "time": "2011-10-18T07:12:22Z", "tags": [], "text": "(In reply to Matt Woodrow (:mattwoodrow) from comment #27)\n> When the leaf gets moved back to the top (and offscreen), we invalidate and\n> start the process again.\n\nTo clarify, we don't invalidate as such, but we don't use the layer for multiples frames and we end up with a new layer when we do need it.\n\nDo you think it's worth trying to fix this? Or just focus on minimizing the allocations while it's visible.", "author": "matt.woodrow@gmail.com", "creation_time": "2011-10-18T07:12:22Z", "count": 31, "creator": "matt.woodrow@gmail.com", "is_private": false}, {"raw_text": "Checked Falling leaves with patch from bug 695275, and it looks much better, but still we have some ImageLayers re-allocations when leaf going out from screen (dropped) and appear again on top (same size layer created again), shall we recycle image layers here?\n\nAnother problem is that sometimes leaf appear (offscreen possibly) as opaque image, and later turn into alpha layer content type, and that cause additional reallocation", "attachment_id": null, "id": 5790006, "count": 32, "is_private": false, "creator": "romaxa@gmail.com", "text": "Checked Falling leaves with patch from bug 695275, and it looks much better, but still we have some ImageLayers re-allocations when leaf going out from screen (dropped) and appear again on top (same size layer created again), shall we recycle image layers here?\n\nAnother problem is that sometimes leaf appear (offscreen possibly) as opaque image, and later turn into alpha layer content type, and that cause additional reallocation", "bug_id": 689760, "time": "2011-10-18T19:35:21Z", "tags": [], "creation_time": "2011-10-18T19:35:21Z", "author": "romaxa@gmail.com"}, {"is_private": false, "creator": "romaxa@gmail.com", "count": 33, "creation_time": "2011-10-18T20:03:37Z", "author": "romaxa@gmail.com", "text": "Created attachment 567848\nAllocation log for ImageLayers", "tags": [], "time": "2011-10-18T20:03:37Z", "bug_id": 689760, "attachment_id": 567848, "raw_text": "", "id": 5790105}, {"time": "2011-10-18T20:34:40Z", "tags": [], "text": "I think probably ImageLayerOGL (or maybe more of GL layers) should cache and recycle buffers. That seems simpler and more flexible than trying to keep layers around for offscreen elements.", "author": "roc@ocallahan.org", "creation_time": "2011-10-18T20:34:40Z", "creator": "roc@ocallahan.org", "is_private": false, "id": 5790204, "raw_text": "I think probably ImageLayerOGL (or maybe more of GL layers) should cache and recycle buffers. That seems simpler and more flexible than trying to keep layers around for offscreen elements.", "attachment_id": null, "bug_id": 689760, "count": 34}, {"bug_id": 689760, "count": 35, "text": "(In reply to Oleg Romashin (:romaxa) from comment #32)\n> Another problem is that sometimes leaf appear (offscreen possibly) as opaque\n> image, and later turn into alpha layer content type, and that cause\n> additional reallocation\n\nCan we get around this by always using the same texture type and only varying the shader depending on whether the image is opaque or not?", "tags": [], "time": "2011-10-18T20:35:15Z", "creation_time": "2011-10-18T20:35:15Z", "author": "roc@ocallahan.org", "is_private": false, "creator": "roc@ocallahan.org", "id": 5790207, "raw_text": "(In reply to Oleg Romashin (:romaxa) from comment #32)\n> Another problem is that sometimes leaf appear (offscreen possibly) as opaque\n> image, and later turn into alpha layer content type, and that cause\n> additional reallocation\n\nCan we get around this by always using the same texture type and only varying the shader depending on whether the image is opaque or not?", "attachment_id": null}, {"id": 5790222, "attachment_id": null, "raw_text": "In this particular example we're creating image layers when the visible region is empty, so we could just fix that.\n\nA more general fix for content type changes would probably be good too though.", "author": "matt.woodrow@gmail.com", "creation_time": "2011-10-18T20:40:08Z", "bug_id": 689760, "tags": [], "time": "2011-10-18T20:40:08Z", "text": "In this particular example we're creating image layers when the visible region is empty, so we could just fix that.\n\nA more general fix for content type changes would probably be good too though.", "creator": "matt.woodrow@gmail.com", "is_private": false, "count": 36}, {"is_private": false, "creator": "romaxa@gmail.com", "text": "> recycle buffers. That seems simpler and more flexible than trying to keep\n> layers around for offscreen elements.\nThen we need to cache ShadowableImage layer buffers...\ncurrently we recycle implented only for GL layers...", "time": "2011-10-18T20:42:21Z", "tags": [], "creation_time": "2011-10-18T20:42:21Z", "author": "romaxa@gmail.com", "raw_text": "> recycle buffers. That seems simpler and more flexible than trying to keep\n> layers around for offscreen elements.\nThen we need to cache ShadowableImage layer buffers...\ncurrently we recycle implented only for GL layers...", "attachment_id": null, "id": 5790229, "count": 37, "bug_id": 689760}, {"id": 5790237, "raw_text": "> Can we get around this by always using the same texture type and only\n> varying the shader depending on whether the image is opaque or not?\nthat would bring us 2x more memory used per image on mobile, for opaque images (like plugins)", "attachment_id": null, "text": "> Can we get around this by always using the same texture type and only\n> varying the shader depending on whether the image is opaque or not?\nthat would bring us 2x more memory used per image on mobile, for opaque images (like plugins)", "time": "2011-10-18T20:44:01Z", "tags": [], "bug_id": 689760, "creation_time": "2011-10-18T20:44:01Z", "author": "romaxa@gmail.com", "count": 38, "is_private": false, "creator": "romaxa@gmail.com"}, {"id": 5790261, "attachment_id": null, "raw_text": "Also if we won't cache ImageLayers, then we need to add Recycle cache trackers for all backends OGL,D3D, Basic, + ShadowableImageLayer buffers", "creation_time": "2011-10-18T20:51:46Z", "author": "romaxa@gmail.com", "text": "Also if we won't cache ImageLayers, then we need to add Recycle cache trackers for all backends OGL,D3D, Basic, + ShadowableImageLayer buffers", "bug_id": 689760, "time": "2011-10-18T20:51:46Z", "tags": [], "is_private": false, "creator": "romaxa@gmail.com", "count": 39}, {"creation_time": "2011-10-18T21:12:25Z", "author": "roc@ocallahan.org", "text": "(In reply to Oleg Romashin (:romaxa) from comment #38)\n> > Can we get around this by always using the same texture type and only\n> > varying the shader depending on whether the image is opaque or not?\n> that would bring us 2x more memory used per image on mobile, for opaque\n> images (like plugins)\n\nRight OK. I keep forgetting about 16-bit vs 32-bit.\n\nI think caching at the closest level to the allocation is probably best as long as the rest of the stack is not much overhead.", "time": "2011-10-18T21:12:25Z", "bug_id": 689760, "tags": [], "is_private": false, "creator": "roc@ocallahan.org", "count": 40, "id": 5790321, "attachment_id": null, "raw_text": "(In reply to Oleg Romashin (:romaxa) from comment #38)\n> > Can we get around this by always using the same texture type and only\n> > varying the shader depending on whether the image is opaque or not?\n> that would bring us 2x more memory used per image on mobile, for opaque\n> images (like plugins)\n\nRight OK. I keep forgetting about 16-bit vs 32-bit.\n\nI think caching at the closest level to the allocation is probably best as long as the rest of the stack is not much overhead."}, {"text": "> long as the rest of the stack is not much overhead.\nIPC ShadowableLayers stack is a bit more expensive... Create/Transform/Paint transactions. but with recent Init/Swap API changes it should be faster, so probably it is ok.", "tags": [], "time": "2011-10-18T21:15:57Z", "creation_time": "2011-10-18T21:15:57Z", "author": "romaxa@gmail.com", "is_private": false, "creator": "romaxa@gmail.com", "id": 5790346, "raw_text": "> long as the rest of the stack is not much overhead.\nIPC ShadowableLayers stack is a bit more expensive... Create/Transform/Paint transactions. but with recent Init/Swap API changes it should be faster, so probably it is ok.", "attachment_id": null, "bug_id": 689760, "count": 41}, {"creator": "romaxa@gmail.com", "is_private": false, "time": "2011-10-19T00:47:10Z", "tags": [], "text": "Created attachment 567944\nOpreport with ImageLayer + cached buffers\n\nOk, I've added simple Buffer cache tracker for image layers (Shadow and OGL), and and got it working much faster, but it very slow comparing to how webkit2/ render same thing...\nIn fennec we have 12FPS, and all CPU used, see plain opreport\nFor webkit2 browser with HW acceleration on the same device I see 30FPS + 30% CPU free...", "author": "romaxa@gmail.com", "creation_time": "2011-10-19T00:47:10Z", "raw_text": "Ok, I've added simple Buffer cache tracker for image layers (Shadow and OGL), and and got it working much faster, but it very slow comparing to how webkit2/ render same thing...\nIn fennec we have 12FPS, and all CPU used, see plain opreport\nFor webkit2 browser with HW acceleration on the same device I see 30FPS + 30% CPU free...", "attachment_id": 567944, "id": 5790916, "count": 42, "bug_id": 689760}, {"text": "Surfaces are cached but it still dropping layers, and that cause repainting (uploading) to GPU. that is not a big deal if we do it without expensive work in layout.", "bug_id": 689760, "tags": [], "time": "2011-10-19T01:04:13Z", "creation_time": "2011-10-19T01:04:13Z", "author": "romaxa@gmail.com", "count": 43, "is_private": false, "creator": "romaxa@gmail.com", "id": 5790937, "raw_text": "Surfaces are cached but it still dropping layers, and that cause repainting (uploading) to GPU. that is not a big deal if we do it without expensive work in layout.", "attachment_id": null}, {"id": 5790969, "attachment_id": null, "raw_text": "Webkit can hand CSS animations over to the compositing layer, which probably helps a lot in this testcase.\n\nBug 524925 might help us here too.\n\nA hierarchical profile would be very useful.", "creation_time": "2011-10-19T01:15:36Z", "author": "roc@ocallahan.org", "text": "Webkit can hand CSS animations over to the compositing layer, which probably helps a lot in this testcase.\n\nBug 524925 might help us here too.\n\nA hierarchical profile would be very useful.", "bug_id": 689760, "tags": [], "time": "2011-10-19T01:15:36Z", "is_private": false, "creator": "roc@ocallahan.org", "count": 44}, {"id": 5790996, "raw_text": "> Bug 524925 might help us here too.\nthis build already including those changes, but not sure if it helps in this case", "attachment_id": null, "bug_id": 689760, "time": "2011-10-19T01:36:47Z", "tags": [], "text": "> Bug 524925 might help us here too.\nthis build already including those changes, but not sure if it helps in this case", "author": "romaxa@gmail.com", "creation_time": "2011-10-19T01:36:47Z", "count": 45, "creator": "romaxa@gmail.com", "is_private": false}, {"creation_time": "2011-10-19T01:38:18Z", "author": "romaxa@gmail.com", "text": "On N9 default browser leafs animation works even with suspended Child process, so all textures are uploaded to UI process, and animation rules... and after that there is no any interactions with content process, only UI textures transformation", "tags": [], "time": "2011-10-19T01:38:18Z", "is_private": false, "creator": "romaxa@gmail.com", "id": 5790998, "attachment_id": null, "raw_text": "On N9 default browser leafs animation works even with suspended Child process, so all textures are uploaded to UI process, and animation rules... and after that there is no any interactions with content process, only UI textures transformation", "bug_id": 689760, "count": 46}, {"text": "Created attachment 567951\nText callgraph profile", "tags": [], "time": "2011-10-19T01:56:26Z", "bug_id": 689760, "creation_time": "2011-10-19T01:56:26Z", "author": "romaxa@gmail.com", "count": 47, "is_private": false, "creator": "romaxa@gmail.com", "id": 5791015, "raw_text": "", "attachment_id": 567951}, {"count": 48, "bug_id": 689760, "is_private": false, "creator": "romaxa@gmail.com", "creation_time": "2011-10-19T02:00:36Z", "author": "romaxa@gmail.com", "text": "Created attachment 567952\nSVG report, edges 0.05%, nodes 0.05% limit", "time": "2011-10-19T02:00:36Z", "tags": [], "attachment_id": 567952, "raw_text": "", "id": 5791020}, {"raw_text": "Looks like no reflow involved (good, bug 524925 is working), lots of restyling and invalidation. To avoid that we need to offload animations to the layer system.", "attachment_id": null, "id": 5791034, "count": 49, "creator": "roc@ocallahan.org", "is_private": false, "time": "2011-10-19T02:17:51Z", "bug_id": 689760, "tags": [], "text": "Looks like no reflow involved (good, bug 524925 is working), lots of restyling and invalidation. To avoid that we need to offload animations to the layer system.", "author": "roc@ocallahan.org", "creation_time": "2011-10-19T02:17:51Z"}, {"is_private": false, "creator": "cjones.bugs@gmail.com", "text": "What's the plan for this work?", "time": "2011-11-15T20:51:27Z", "tags": [], "creation_time": "2011-11-15T20:51:27Z", "author": "cjones.bugs@gmail.com", "raw_text": "What's the plan for this work?", "attachment_id": null, "id": 5850311, "count": 50, "bug_id": 689760}, {"creation_time": "2012-04-08T07:18:15Z", "author": "romaxa@gmail.com", "text": "Comment on attachment 567379\nWIP overallocation for ThebesLayerBuffer\n\nI guess this patch is outdated, and there are some another solution for this problem.\nAlso this was not very helpful", "tags": [], "bug_id": 689760, "time": "2012-04-08T07:18:15Z", "is_private": false, "creator": "romaxa@gmail.com", "count": 51, "id": 6205983, "attachment_id": 567379, "raw_text": "I guess this patch is outdated, and there are some another solution for this problem.\nAlso this was not very helpful"}]}}}