{"comments": {}, "bugs": {"672630": {"comments": [{"creator": "cww@mozilla.com", "is_private": false, "tags": [], "time": "2011-07-19T20:52:28Z", "text": "user.js allows some third party programs to overwrite default Firefox behavior and make settings unchangeable or revert on restart. It's most commonly used by malware/installers to do one of the following:\n\nChange the default home page/startup behavior\nChange keyword.URL\nDisable the popup blocker\nChange the user agent\nEnforce a proxy (and then all craziness can ensue)\nChange search plugin order\n\nI'm sure there are more but those are the ones that users complain about because they can't revert those changes without diving through their filesystem.\n\nLet's just stop respecting user.js or give prefs.js priority. If a user makes a setting change, it shouldn't just disappear on the next run.", "author": "cww@mozilla.com", "creation_time": "2011-07-19T20:52:28Z", "raw_text": "user.js allows some third party programs to overwrite default Firefox behavior and make settings unchangeable or revert on restart. It's most commonly used by malware/installers to do one of the following:\n\nChange the default home page/startup behavior\nChange keyword.URL\nDisable the popup blocker\nChange the user agent\nEnforce a proxy (and then all craziness can ensue)\nChange search plugin order\n\nI'm sure there are more but those are the ones that users complain about because they can't revert those changes without diving through their filesystem.\n\nLet's just stop respecting user.js or give prefs.js priority. If a user makes a setting change, it shouldn't just disappear on the next run.", "attachment_id": null, "id": 5600044, "count": 0, "bug_id": 672630}, {"creation_time": "2011-07-19T20:57:44Z", "author": "gavin.sharp@gmail.com", "text": "I suspect this won't really help much. Not reading other pref defaults will likely break many valid use cases, and the malicious (or well meaning but incompetent) addons/programs will just move to slightly more complicated but still easy solutions, like editing firefox.js directly.", "tags": [], "time": "2011-07-19T20:57:44Z", "is_private": false, "creator": "gavin.sharp@gmail.com", "id": 5600058, "attachment_id": null, "raw_text": "I suspect this won't really help much. Not reading other pref defaults will likely break many valid use cases, and the malicious (or well meaning but incompetent) addons/programs will just move to slightly more complicated but still easy solutions, like editing firefox.js directly.", "bug_id": 672630, "count": 1}, {"bug_id": 672630, "count": 2, "id": 5600068, "attachment_id": null, "raw_text": "If the reasoning is purely because malware/etc. abuse it, then IMO we should wontfix this, if malware gets on your system to mod user.js anyway, they have the abil to entirely replace Firefox, run actual programs at sys startup etc.\n\nRespecting user.js allows deployment type users to do things that they don't want to be easily disable able (addon) that they feel is needed in their environment", "creation_time": "2011-07-19T20:59:30Z", "author": "bugspam.Callek@gmail.com", "text": "If the reasoning is purely because malware/etc. abuse it, then IMO we should wontfix this, if malware gets on your system to mod user.js anyway, they have the abil to entirely replace Firefox, run actual programs at sys startup etc.\n\nRespecting user.js allows deployment type users to do things that they don't want to be easily disable able (addon) that they feel is needed in their environment", "tags": [], "time": "2011-07-19T20:59:30Z", "is_private": false, "creator": "bugspam.Callek@gmail.com"}, {"raw_text": "There are several legitimate reasons for users to use user.js instead of prefs.js:\n\n* Sharing your most important prefs between profiles or computers.\n\n* Preventing your prefs from being forgotten as you switch between build types, channels, or OSes that have different defaults.\n** e.g. Ensuring browser.dom.window.dump.enabled stays true as you switch between opt builds (where it defaults to false) and debug builds (where it defaults to true).\n\n* Making bulk changes to Firefox prefs while keeping the instructions open in Firefox (e.g. https://developer.mozilla.org/en/Midas/Security_preferences)\n\nMaybe we can come up with better ways to support each of these use cases, though!\n\nIn general, I'm wary of removing Firefox features just because they are currently being abused by third-party software.  Abusive third-party software will always find a way to screw with Firefox.", "attachment_id": null, "id": 5600157, "count": 3, "is_private": false, "creator": "jruderman@gmail.com", "text": "There are several legitimate reasons for users to use user.js instead of prefs.js:\n\n* Sharing your most important prefs between profiles or computers.\n\n* Preventing your prefs from being forgotten as you switch between build types, channels, or OSes that have different defaults.\n** e.g. Ensuring browser.dom.window.dump.enabled stays true as you switch between opt builds (where it defaults to false) and debug builds (where it defaults to true).\n\n* Making bulk changes to Firefox prefs while keeping the instructions open in Firefox (e.g. https://developer.mozilla.org/en/Midas/Security_preferences)\n\nMaybe we can come up with better ways to support each of these use cases, though!\n\nIn general, I'm wary of removing Firefox features just because they are currently being abused by third-party software.  Abusive third-party software will always find a way to screw with Firefox.", "bug_id": 672630, "time": "2011-07-19T21:22:45Z", "tags": [], "creation_time": "2011-07-19T21:22:45Z", "author": "jruderman@gmail.com"}, {"is_private": false, "creator": "cww@mozilla.com", "creation_time": "2011-07-19T21:25:16Z", "author": "cww@mozilla.com", "text": "(In reply to comment #2)\n\nIf the main usecases are enterprise/deployment uses, let's discuss those when we talk about enterprise issues.\n\n(In reply to comment #1)\n\nI'd rather they edit firefox.js.  At that point, things like antivirus companies will flag it.", "tags": [], "time": "2011-07-19T21:25:16Z", "attachment_id": null, "raw_text": "(In reply to comment #2)\n\nIf the main usecases are enterprise/deployment uses, let's discuss those when we talk about enterprise issues.\n\n(In reply to comment #1)\n\nI'd rather they edit firefox.js.  At that point, things like antivirus companies will flag it.", "id": 5600171, "count": 4, "bug_id": 672630}, {"tags": [], "time": "2011-07-20T19:00:07Z", "text": "Some alternatives to consider:\n\n* Change the filename we look for from \"user.js\" to \"lockedprefs.js\". That will clear up the current mess, make future mistakes less likely, and make future malice distinguishable from mistakes.\n\n* Encourage antivirus vendors to watch for software modifying user.js.\n\n* Prompt when we discover a user.js, asking whether the user wants to enable it. This is similar to our plan for dropped-in extensions (bug 596343).", "author": "jruderman@gmail.com", "creation_time": "2011-07-20T19:00:07Z", "creator": "jruderman@gmail.com", "is_private": false, "id": 5602420, "raw_text": "Some alternatives to consider:\n\n* Change the filename we look for from \"user.js\" to \"lockedprefs.js\". That will clear up the current mess, make future mistakes less likely, and make future malice distinguishable from mistakes.\n\n* Encourage antivirus vendors to watch for software modifying user.js.\n\n* Prompt when we discover a user.js, asking whether the user wants to enable it. This is similar to our plan for dropped-in extensions (bug 596343).", "attachment_id": null, "bug_id": 672630, "count": 5}, {"creator": "kev-bugzilla@deadsquid.com", "is_private": false, "tags": [], "time": "2011-07-20T19:41:58Z", "text": "I would advocate option #3. It's what Asa and I discussed at a high level, and the focus would be on permission to apply prefs from users.js, and a way to (simply) back out those changes for users that may be unfamiliar with them.", "author": "kev-bugzilla@deadsquid.com", "creation_time": "2011-07-20T19:41:58Z", "raw_text": "I would advocate option #3. It's what Asa and I discussed at a high level, and the focus would be on permission to apply prefs from users.js, and a way to (simply) back out those changes for users that may be unfamiliar with them.", "attachment_id": null, "id": 5602540, "count": 6, "bug_id": 672630}, {"count": 7, "bug_id": 672630, "raw_text": "TBH, the use cases listed in comment 3 sounds like uncommon situations we shouldn't be optimizing for. Prompting the user is also full of fail, we shouldn't be shifting the burden of dealing with lameware to the user.\n\nThe user should be in control of their browser, and so if something wants to twiddle a setting they should be able to easily revert it.\n\nThe one case I'm not sure how to handle, which obviously complicates things, is if we want to continue supporting admin-set / locked preferences, and how to do that in a way that won't just be abused by malware.", "attachment_id": null, "id": 5602591, "creator": "jdinbox@gmail.com", "is_private": false, "tags": [], "time": "2011-07-20T19:58:04Z", "text": "TBH, the use cases listed in comment 3 sounds like uncommon situations we shouldn't be optimizing for. Prompting the user is also full of fail, we shouldn't be shifting the burden of dealing with lameware to the user.\n\nThe user should be in control of their browser, and so if something wants to twiddle a setting they should be able to easily revert it.\n\nThe one case I'm not sure how to handle, which obviously complicates things, is if we want to continue supporting admin-set / locked preferences, and how to do that in a way that won't just be abused by malware.", "author": "jdinbox@gmail.com", "creation_time": "2011-07-20T19:58:04Z"}, {"raw_text": "Another possibility, suggested by dveditz, is to make user.js only override defaults (revert bug 77975).  That would satisfy all the use cases in comment 3.", "attachment_id": null, "id": 5603024, "count": 8, "is_private": false, "creator": "jruderman@gmail.com", "text": "Another possibility, suggested by dveditz, is to make user.js only override defaults (revert bug 77975).  That would satisfy all the use cases in comment 3.", "time": "2011-07-20T22:12:56Z", "tags": [], "bug_id": 672630, "creation_time": "2011-07-20T22:12:56Z", "author": "jruderman@gmail.com"}, {"is_private": false, "creator": "dveditz@mozilla.com", "count": 9, "creation_time": "2011-07-20T23:06:19Z", "author": "dveditz@mozilla.com", "text": "Anecdotal datapoints from add-ons:\n* user.js is common enough that the SyncFox add-on backs it up.\n* The \"Add to NetVibes\" add-on has a developer script left in the .xpi\n  that recreates the developer's user.js with settings he apparently likes\n  (not an active part of the add-on, just packaging cruft)\n\n(In reply to comment #7)\n> The one case I'm not sure how to handle, which obviously complicates things,\n> is if we want to continue supporting admin-set / locked preferences, and how\n> to do that in a way that won't just be abused by malware.\n\nuser.js was not used/intended for that, seems a separate conversation. There's a legitimate and supported method for locking prefs in the installation directory and that's where that functionality should live.", "bug_id": 672630, "tags": [], "time": "2011-07-20T23:06:19Z", "attachment_id": null, "raw_text": "Anecdotal datapoints from add-ons:\n* user.js is common enough that the SyncFox add-on backs it up.\n* The \"Add to NetVibes\" add-on has a developer script left in the .xpi\n  that recreates the developer's user.js with settings he apparently likes\n  (not an active part of the add-on, just packaging cruft)\n\n(In reply to comment #7)\n> The one case I'm not sure how to handle, which obviously complicates things,\n> is if we want to continue supporting admin-set / locked preferences, and how\n> to do that in a way that won't just be abused by malware.\n\nuser.js was not used/intended for that, seems a separate conversation. There's a legitimate and supported method for locking prefs in the installation directory and that's where that functionality should live.", "id": 5603152}, {"creation_time": "2011-07-22T16:13:17Z", "author": "k0scist@gmail.com", "text": "Let's not forget our test harnesses and other infrastructure that currently utilizes user.js . This isn't a blocker, just something we can't forget (and will take many man-hours to change)", "bug_id": 672630, "time": "2011-07-22T16:13:17Z", "tags": [], "is_private": false, "creator": "k0scist@gmail.com", "count": 10, "id": 5607201, "attachment_id": null, "raw_text": "Let's not forget our test harnesses and other infrastructure that currently utilizes user.js . This isn't a blocker, just something we can't forget (and will take many man-hours to change)"}, {"creator": "dveditz@mozilla.com", "is_private": false, "count": 11, "author": "dveditz@mozilla.com", "creation_time": "2011-12-15T02:01:31Z", "time": "2011-12-15T02:01:31Z", "bug_id": 672630, "tags": [], "text": "(In reply to [:Cww] from comment #4)\n> I'd rather they edit firefox.js.  At that point, things like antivirus\n> companies will flag it.\n\nLet's assume the Firefox install directory is protected because it's a limited user account -- if not all bets are off. In that situation malware won't be able to write to firefox.js, but it can easily write to prefs.js in the user's profile and the effects are mostly the same. The outcome would be better, though, because the user could manually revert those settings rather than have them come back every startup. Anti-virus can't flag on writing to prefs.js because Firefox itself does it constantly.\n\nWe should either WONTFIX this bug or take the approach in comment 8. Neither solves the list of problems in Comment 0, but at least the latter would let users who notice the problem fix it through in-product prefs. That's also the best we could hope for if we did what this bug asked (removing user.js support) so we'd at least not break people who had legitimate user.js settings.", "attachment_id": null, "raw_text": "(In reply to [:Cww] from comment #4)\n> I'd rather they edit firefox.js.  At that point, things like antivirus\n> companies will flag it.\n\nLet's assume the Firefox install directory is protected because it's a limited user account -- if not all bets are off. In that situation malware won't be able to write to firefox.js, but it can easily write to prefs.js in the user's profile and the effects are mostly the same. The outcome would be better, though, because the user could manually revert those settings rather than have them come back every startup. Anti-virus can't flag on writing to prefs.js because Firefox itself does it constantly.\n\nWe should either WONTFIX this bug or take the approach in comment 8. Neither solves the list of problems in Comment 0, but at least the latter would let users who notice the problem fix it through in-product prefs. That's also the best we could hope for if we did what this bug asked (removing user.js support) so we'd at least not break people who had legitimate user.js settings.", "id": 5917790}, {"bug_id": 672630, "tags": [], "time": "2011-12-16T17:49:06Z", "text": "I don't see how overriding defaults actually helps anything.\n\nThe default is to block popups, the default is to use Google as a search engine, default is no proxy.  If we allow user.js to override these, we'd need a status for \"default value but actually user set\"\n\nI'm going to propose a new thing: use telemetry to see what the prefs that user.js is changing are and how many people are affected. If it's 99.9% malware-y ones (as in the ones in comment 0) I think there's a strong argument for blocking it.  Otherwise, we'll discover new legit usecases for user.js.  I'm going to bring this up with taras before filing a bug but that seems like a good set of datapoints to have.", "author": "cww@mozilla.com", "creation_time": "2011-12-16T17:49:06Z", "count": 12, "creator": "cww@mozilla.com", "is_private": false, "id": 5922327, "raw_text": "I don't see how overriding defaults actually helps anything.\n\nThe default is to block popups, the default is to use Google as a search engine, default is no proxy.  If we allow user.js to override these, we'd need a status for \"default value but actually user set\"\n\nI'm going to propose a new thing: use telemetry to see what the prefs that user.js is changing are and how many people are affected. If it's 99.9% malware-y ones (as in the ones in comment 0) I think there's a strong argument for blocking it.  Otherwise, we'll discover new legit usecases for user.js.  I'm going to bring this up with taras before filing a bug but that seems like a good set of datapoints to have.", "attachment_id": null}, {"id": 8481438, "attachment_id": null, "raw_text": "", "creation_time": "2014-03-03T01:38:06Z", "author": "yfdyh000@gmail.com", "text": "*** Bug 974724 has been marked as a duplicate of this bug. ***", "tags": [], "time": "2014-03-03T01:38:06Z", "is_private": false, "creator": "yfdyh000@gmail.com", "bug_id": 672630, "count": 13}]}}}