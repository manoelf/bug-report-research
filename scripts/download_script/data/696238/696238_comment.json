{"comments": {}, "bugs": {"696238": {"comments": [{"bug_id": 696238, "id": 5795751, "is_private": false, "count": 0, "tags": [], "attachment_id": 568542, "time": "2011-10-20T22:35:58Z", "text": "Created attachment 568542\ntest\n\nThe testcase gives\nError: EventTarget dispatchEvent called on incompatible Event object\nSource File: file:///home/smaug/mozilla/tests/worker.html\nLine: 7 (the line number is actually wrong)\nand stops working. I mean, once that happens, script execution stops.\n \nWorkers should be handled like any other event target. Dispatching random\nevents to them should just work.", "creation_time": "2011-10-20T22:35:58Z", "raw_text": "The testcase gives\nError: EventTarget dispatchEvent called on incompatible Event object\nSource File: file:///home/smaug/mozilla/tests/worker.html\nLine: 7 (the line number is actually wrong)\nand stops working. I mean, once that happens, script execution stops.\n \nWorkers should be handled like any other event target. Dispatching random\nevents to them should just work.", "author": "bugs@pettay.fi", "creator": "bugs@pettay.fi"}, {"raw_text": "That testcase should be run locally.", "creation_time": "2011-10-20T22:37:00Z", "time": "2011-10-20T22:37:00Z", "attachment_id": null, "text": "That testcase should be run locally.", "id": 5795756, "count": 1, "is_private": false, "tags": [], "bug_id": 696238, "author": "bugs@pettay.fi", "creator": "bugs@pettay.fi"}, {"count": 2, "is_private": false, "tags": [], "id": 5795867, "bug_id": 696238, "creation_time": "2011-10-20T23:27:42Z", "raw_text": "Yeah, the problem here is that we have two event systems. One that's used for the worker code, and one that's used on the main thread.\n\nThe problem is that the main-thread Worker object is the same implementation as the worker-thread Worker object, which means that it uses the worker event system. That means that it can't handle the main-thread Event object that this testcase is creating.\n\nThere are two possible fixes here.\n\n1. Change our normal event handling code so that we can use it both for main-thread\n   and in workers threads (where there is no XPConnect).\n2. Create another Worker implementation used only on the main thread which uses\n   main-thread event implementation, rather than the worker event implementation.", "creator": "jonas@sicking.cc", "text": "Yeah, the problem here is that we have two event systems. One that's used for the worker code, and one that's used on the main thread.\n\nThe problem is that the main-thread Worker object is the same implementation as the worker-thread Worker object, which means that it uses the worker event system. That means that it can't handle the main-thread Event object that this testcase is creating.\n\nThere are two possible fixes here.\n\n1. Change our normal event handling code so that we can use it both for main-thread\n   and in workers threads (where there is no XPConnect).\n2. Create another Worker implementation used only on the main thread which uses\n   main-thread event implementation, rather than the worker event implementation.", "time": "2011-10-20T23:27:42Z", "attachment_id": null, "author": "jonas@sicking.cc"}, {"tags": [], "is_private": false, "count": 3, "id": 5795879, "bug_id": 696238, "creation_time": "2011-10-20T23:33:09Z", "raw_text": "I would go with 2. By extending nsDOMEventTargetWrapperCache one gets all the event and wrapper\nhandling pretty much automatically.\n\nTraditionally there has been security bugs whenever the normal event handling hasn't been\nused in the main thread.", "text": "I would go with 2. By extending nsDOMEventTargetWrapperCache one gets all the event and wrapper\nhandling pretty much automatically.\n\nTraditionally there has been security bugs whenever the normal event handling hasn't been\nused in the main thread.", "attachment_id": null, "time": "2011-10-20T23:33:09Z", "creator": "bugs@pettay.fi", "author": "bugs@pettay.fi"}, {"author": "bent.mozilla@gmail.com", "creator": "bent.mozilla@gmail.com", "id": 5796961, "is_private": false, "count": 4, "tags": [], "bug_id": 696238, "creation_time": "2011-10-21T16:10:12Z", "raw_text": "(In reply to Olli Pettay [:smaug] from comment #3)\n> Traditionally there has been security bugs whenever the normal event\n> handling hasn't been used in the main thread.\n\nWe've been over this, the same technique used to protect other main thread event listeners is being employed by the new worker implementation too.", "attachment_id": null, "time": "2011-10-21T16:10:12Z", "text": "(In reply to Olli Pettay [:smaug] from comment #3)\n> Traditionally there has been security bugs whenever the normal event\n> handling hasn't been used in the main thread.\n\nWe've been over this, the same technique used to protect other main thread event listeners is being employed by the new worker implementation too."}, {"creator": "bug-husbandry-bot@mozilla.bugs", "author": "bug-husbandry-bot@mozilla.bugs", "bug_id": 696238, "tags": [], "is_private": false, "count": 5, "id": 13435538, "text": "https://bugzilla.mozilla.org/show_bug.cgi?id=1472046\n\nMove all DOM bugs that haven\u2019t been updated in more than 3 years and has no one currently assigned to P5.\n\nIf you have questions, please contact :mdaly.", "time": "2018-06-29T04:47:45Z", "attachment_id": null, "raw_text": "https://bugzilla.mozilla.org/show_bug.cgi?id=1472046\n\nMove all DOM bugs that haven\u2019t been updated in more than 3 years and has no one currently assigned to P5.\n\nIf you have questions, please contact :mdaly.", "creation_time": "2018-06-29T04:47:45Z"}]}}}