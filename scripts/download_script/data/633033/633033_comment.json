{"comments": {}, "bugs": {"633033": {"comments": [{"count": 0, "raw_text": "shell/js.cpp doesn't actually check the return value of JS_ExecuteScript and such. It shouldn't have to, because those APIs, when used as the shell uses them, should always either succeed or call the error reporter and fail.\n\nHowever, sometimes there's a bug like bug 633020 where, say, a getter or setter returns false without reporting an error. To the script, that behaves like an uncatchable error. To the shell, it's success. That is really bad if you're trying to write a test. Because the js executable returns exit code 0 either way, the test framework doesn't tell the difference.\n\nWe should be asserting throughout the engine that we don't return false without an exception pending or an error reported.\n\nAttached is a sketch of this idea -- but some js/src/tests trip the assertions and I don't have time today to look at them. Maybe my assertions are too strict, or maybe some code is bending the rules for no good reason and can be straightened out.", "bug_id": 633033, "is_private": false, "tags": [], "time": "2011-02-10T00:24:40Z", "creation_time": "2011-02-10T00:24:40Z", "author": "jorendorff@mozilla.com", "id": 5268093, "attachment_id": 511228, "creator": "jorendorff@mozilla.com", "text": "Created attachment 511228\nWIP 1\n\nshell/js.cpp doesn't actually check the return value of JS_ExecuteScript and such. It shouldn't have to, because those APIs, when used as the shell uses them, should always either succeed or call the error reporter and fail.\n\nHowever, sometimes there's a bug like bug 633020 where, say, a getter or setter returns false without reporting an error. To the script, that behaves like an uncatchable error. To the shell, it's success. That is really bad if you're trying to write a test. Because the js executable returns exit code 0 either way, the test framework doesn't tell the difference.\n\nWe should be asserting throughout the engine that we don't return false without an exception pending or an error reported.\n\nAttached is a sketch of this idea -- but some js/src/tests trip the assertions and I don't have time today to look at them. Maybe my assertions are too strict, or maybe some code is bending the rules for no good reason and can be straightened out."}, {"is_private": false, "tags": [], "raw_text": "The tests that were failing were:\n\n  - Ones that use timeout() or quit(), shell functions that return false\n    without reporting an error.\n\n    I added a JS_SilentFailure API for these. The new rule is, unreported errors\n    are allowed, but only if you explicitly tell the engine you're doing it.\n\n  - A test that tickles an error path in js::DefineConstructorAndPrototype\n    (formerly js_InitClass) where it can call into application callbacks\n    with an exception already pending. The function defines a property early\n    on which it must delete if an error occurs later. It really just shouldn't\n    be written that way.\n\n    For this patch, I fixed it by making that code set the pending exception\n    aside before deleting the property, ignore any errors that happen\n    while deleting the property, and then restore the original pending\n    exception. However for review I will rework the function a little bit.\n\nAnyway. This could land, and I'm interested in landing something like it post-ff4. But the argument could be made that this is a bit too B&D. Feedback?", "attachment_id": 511542, "id": 5271158, "text": "Created attachment 511542\nWIP 2 - passes tests\n\nThe tests that were failing were:\n\n  - Ones that use timeout() or quit(), shell functions that return false\n    without reporting an error.\n\n    I added a JS_SilentFailure API for these. The new rule is, unreported errors\n    are allowed, but only if you explicitly tell the engine you're doing it.\n\n  - A test that tickles an error path in js::DefineConstructorAndPrototype\n    (formerly js_InitClass) where it can call into application callbacks\n    with an exception already pending. The function defines a property early\n    on which it must delete if an error occurs later. It really just shouldn't\n    be written that way.\n\n    For this patch, I fixed it by making that code set the pending exception\n    aside before deleting the property, ignore any errors that happen\n    while deleting the property, and then restore the original pending\n    exception. However for review I will rework the function a little bit.\n\nAnyway. This could land, and I'm interested in landing something like it post-ff4. But the argument could be made that this is a bit too B&D. Feedback?", "creation_time": "2011-02-10T23:43:20Z", "time": "2011-02-10T23:43:20Z", "count": 1, "bug_id": 633033, "author": "jorendorff@mozilla.com", "creator": "jorendorff@mozilla.com"}]}}}