{"bugs": {"680536": {"comments": [{"attachment_id": null, "time": "2011-08-19T20:04:40Z", "text": "Currently, some IDL rules in rules.mk execute unconditionally. We should change the rules such that they only execute if needed.\n\nFor example:\n\n1) Fully build a tree\n2) make -C services/sync/crypto/component\n\nWe see:\n\n$ nsinstall -R -m 644 /home/gps/src/services-central/services/crypto/component/nsISyncJPAKE.idl ../../../dist/idl\n$ nsinstall -R -m 644 _xpidlgen/nsISyncJPAKE.h ../../../dist/include\n\nBoth of these rules should be skipped because the destination files already exist.\n\nIt is worth noting that the destination directory is blown away at the top of a full tree build and these rules will always execute. However, if we are doing a component build only, this step does not occur and we are performing redundant work.\n\nThis change will likely cut down on make output on built trees drastically, since much of the output today deals with IDLs. It should also have a positive impact on build times.", "raw_text": "Currently, some IDL rules in rules.mk execute unconditionally. We should change the rules such that they only execute if needed.\n\nFor example:\n\n1) Fully build a tree\n2) make -C services/sync/crypto/component\n\nWe see:\n\n$ nsinstall -R -m 644 /home/gps/src/services-central/services/crypto/component/nsISyncJPAKE.idl ../../../dist/idl\n$ nsinstall -R -m 644 _xpidlgen/nsISyncJPAKE.h ../../../dist/include\n\nBoth of these rules should be skipped because the destination files already exist.\n\nIt is worth noting that the destination directory is blown away at the top of a full tree build and these rules will always execute. However, if we are doing a component build only, this step does not occur and we are performing redundant work.\n\nThis change will likely cut down on make output on built trees drastically, since much of the output today deals with IDLs. It should also have a positive impact on build times.", "creation_time": "2011-08-19T20:04:40Z", "bug_id": 680536, "id": 5666215, "tags": [], "is_private": false, "count": 0, "author": "gps@mozilla.com", "creator": "gps@mozilla.com"}, {"author": "gps@mozilla.com", "creator": "gps@mozilla.com", "id": 5741659, "is_private": false, "count": 1, "tags": [], "bug_id": 680536, "creation_time": "2011-09-27T22:46:14Z", "raw_text": "Anyone from the build team have any suggestions on how to tackle this bug or want to take it?\n\nLooking at rules.mk as it exists today (and I know there are a bunch of outstanding patches that might mix things up), it seems that one approach might be to modify the rules that look like:\n\nexport:: $(patsubst %.idl,$(XPIDL_GEN_DIR)/%.h, $(XPIDLSRCS)) $(DIST)/include\n\t$(INSTALL) $(IFLAGS1) $^\n\nI'm thinking we'd create new targets for $(DIST)/include/.../%.h and %.idl which did the $(INSTALL) bit. These could possibly be defined as an implicit rule. Then, the export:: and export-idl:: rule would just have as dependencies these targets and the rule itself would be empty, since the dependencies do all the work.\n\nThoughts?", "time": "2011-09-27T22:46:14Z", "attachment_id": null, "text": "Anyone from the build team have any suggestions on how to tackle this bug or want to take it?\n\nLooking at rules.mk as it exists today (and I know there are a bunch of outstanding patches that might mix things up), it seems that one approach might be to modify the rules that look like:\n\nexport:: $(patsubst %.idl,$(XPIDL_GEN_DIR)/%.h, $(XPIDLSRCS)) $(DIST)/include\n\t$(INSTALL) $(IFLAGS1) $^\n\nI'm thinking we'd create new targets for $(DIST)/include/.../%.h and %.idl which did the $(INSTALL) bit. These could possibly be defined as an implicit rule. Then, the export:: and export-idl:: rule would just have as dependencies these targets and the rule itself would be empty, since the dependencies do all the work.\n\nThoughts?"}, {"raw_text": "This would require different behavior in a top-level make than in a subdir make, which may be tricky, and I'm not sure is a road we want to go down.", "creation_time": "2011-09-28T11:41:06Z", "text": "This would require different behavior in a top-level make than in a subdir make, which may be tricky, and I'm not sure is a road we want to go down.", "time": "2011-09-28T11:41:06Z", "attachment_id": null, "count": 2, "is_private": false, "tags": [], "id": 5742790, "bug_id": 680536, "creator": "khuey@kylehuey.com", "author": "khuey@kylehuey.com"}, {"author": "gps@mozilla.com", "time": "2011-09-28T19:24:18Z", "attachment_id": null, "creator": "gps@mozilla.com", "text": "Can someone elaborate on the previous comment? What are the differences for IDL generation between a top-level make and a subdir one? I know one difference is a top-level deletes dist/, thus requiring files to be regenerated. But, if targets are defined properly, I don't see how this would be a problem. make would just conditionally rebuild based on file presence and mtime, no?", "creation_time": "2011-09-28T19:24:18Z", "raw_text": "Can someone elaborate on the previous comment? What are the differences for IDL generation between a top-level make and a subdir one? I know one difference is a top-level deletes dist/, thus requiring files to be regenerated. But, if targets are defined properly, I don't see how this would be a problem. make would just conditionally rebuild based on file presence and mtime, no?", "bug_id": 680536, "id": 5743920, "tags": [], "count": 3, "is_private": false}, {"bug_id": 680536, "tags": [], "count": 4, "is_private": false, "id": 5884466, "text": "I just looked at bug 629668. It appears that we can do a similar approach for nsinstall, i.e. give a --depencies parameters that emits dependencies for Make.\n\nAnyone care to confirm?\n\nFrom what I gather nsinstall is a replacement for install and we've now migrated to using the python version. Is the C version still used?", "attachment_id": null, "time": "2011-12-01T06:00:25Z", "raw_text": "I just looked at bug 629668. It appears that we can do a similar approach for nsinstall, i.e. give a --depencies parameters that emits dependencies for Make.\n\nAnyone care to confirm?\n\nFrom what I gather nsinstall is a replacement for install and we've now migrated to using the python version. Is the C version still used?", "creation_time": "2011-12-01T06:00:25Z", "creator": "b56girard@gmail.com", "author": "b56girard@gmail.com"}, {"bug_id": 680536, "count": 5, "is_private": false, "tags": [], "id": 5884864, "text": "We still use the C version(s), except in certain circumstances. The Python version has a lot more overhead unless we're calling it as a Pymake native command.", "time": "2011-12-01T12:36:44Z", "attachment_id": null, "creation_time": "2011-12-01T12:36:44Z", "raw_text": "We still use the C version(s), except in certain circumstances. The Python version has a lot more overhead unless we're calling it as a Pymake native command.", "creator": "ted@mielczarek.org", "author": "ted@mielczarek.org"}]}}, "comments": {}}