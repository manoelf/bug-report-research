{"bugs": {"699720": {"comments": [{"attachment_id": null, "raw_text": "Right now ParseNode is basically a big bag of bits as far as both accesses and initializations go, used through a huge union with no type-safety assertions at all because the use patterns don't at all lend themselves to it.  This is pretty worrisome: if we make a mistake, we can't easily discover it until potentially long after the problem node is initialized.  We should initialize and mutate parse nodes in a way that permits mutations to be asserted structurally sensible.\n\nTagging parse nodes with distinct kinds for their distinct senses is a necessary first step.  Past that we need to confront that we associate locations with parse nodes by creating those parse nodes when the token stream is stopped on very particular tokens.  (In the cases when that position's wrong, we have to post-munge the position into correctness.)  This dependency on the token stream state is implicit, hidden behind ParseNode::create.  It is somewhat convenient in that you don't have to think about starting location when creating a parse node.  Except when you do.  So this doesn't really reduce complexity.  I suspect somehow we'll need to break this dependency to fix this.  If we do, we should be able to push basically all initialization code into constructors, or something like that, and easily check for type-safety.\n\nI'm not exactly sure what this will all look like.  I'll try to get some productive discussions in with relevant people over the next several days to flesh out how to fix this.  (Unfortunately amidst those people going on vacations, but so it goes.)", "time": "2011-11-04T05:49:34Z", "tags": [], "author": "jwalden@mit.edu", "text": "Right now ParseNode is basically a big bag of bits as far as both accesses and initializations go, used through a huge union with no type-safety assertions at all because the use patterns don't at all lend themselves to it.  This is pretty worrisome: if we make a mistake, we can't easily discover it until potentially long after the problem node is initialized.  We should initialize and mutate parse nodes in a way that permits mutations to be asserted structurally sensible.\n\nTagging parse nodes with distinct kinds for their distinct senses is a necessary first step.  Past that we need to confront that we associate locations with parse nodes by creating those parse nodes when the token stream is stopped on very particular tokens.  (In the cases when that position's wrong, we have to post-munge the position into correctness.)  This dependency on the token stream state is implicit, hidden behind ParseNode::create.  It is somewhat convenient in that you don't have to think about starting location when creating a parse node.  Except when you do.  So this doesn't really reduce complexity.  I suspect somehow we'll need to break this dependency to fix this.  If we do, we should be able to push basically all initialization code into constructors, or something like that, and easily check for type-safety.\n\nI'm not exactly sure what this will all look like.  I'll try to get some productive discussions in with relevant people over the next several days to flesh out how to fix this.  (Unfortunately amidst those people going on vacations, but so it goes.)", "count": 0, "creator": "jwalden@mit.edu", "is_private": false, "creation_time": "2011-11-04T05:49:34Z", "id": 5825777, "bug_id": 699720}]}}, "comments": {}}