{"comments": {}, "bugs": {"700114": {"comments": [{"creator": "ggagliano@gmail.com", "author": "ggagliano@gmail.com", "bug_id": 700114, "count": 0, "is_private": false, "tags": [], "id": 5829206, "text": "User Agent: Mozilla/5.0 (X11; Linux x86_64; rv:7.0.1) Gecko/20100101 Firefox/7.0.1\nBuild ID: 20110928221813\n\nSteps to reproduce:\n\n I clicked in a download link and tryed to save the file in a folder whose write permission I do not have.\n\n\nActual results:\n\nWhen clicking in a download link and the save pop-up appears, if you navigate to a folder where your user don't have permission to write or if the folder is mounted read-only, Firefox does not save the file, does not report any error message and does act as the file was properly saved. Some downloads are paid and this loss of data may cause problems, because a second click in the link is needed and the download process must be restarted.\n\n\nExpected results:\n\nBefore trying to save the file, Firefox should have investigated the folder and should report useful error messages, like \"You don't have permission to write there!\" or \"This file-system is mounted read-only!\", so the user has the change to navigate to another folder and try to save the file again. By doing so, no file will be lost and download will never fail.", "attachment_id": null, "time": "2011-11-06T12:22:42Z", "creation_time": "2011-11-06T12:22:42Z", "raw_text": "User Agent: Mozilla/5.0 (X11; Linux x86_64; rv:7.0.1) Gecko/20100101 Firefox/7.0.1\nBuild ID: 20110928221813\n\nSteps to reproduce:\n\n I clicked in a download link and tryed to save the file in a folder whose write permission I do not have.\n\n\nActual results:\n\nWhen clicking in a download link and the save pop-up appears, if you navigate to a folder where your user don't have permission to write or if the folder is mounted read-only, Firefox does not save the file, does not report any error message and does act as the file was properly saved. Some downloads are paid and this loss of data may cause problems, because a second click in the link is needed and the download process must be restarted.\n\n\nExpected results:\n\nBefore trying to save the file, Firefox should have investigated the folder and should report useful error messages, like \"You don't have permission to write there!\" or \"This file-system is mounted read-only!\", so the user has the change to navigate to another folder and try to save the file again. By doing so, no file will be lost and download will never fail."}, {"id": 5830109, "count": 1, "is_private": false, "tags": [], "bug_id": 700114, "creation_time": "2011-11-07T10:06:13Z", "raw_text": "Is there anything in the tools->web developer->Error console?", "attachment_id": null, "time": "2011-11-07T10:06:13Z", "text": "Is there anything in the tools->web developer->Error console?", "author": "acelists@atlas.sk", "creator": "acelists@atlas.sk"}, {"count": 2, "is_private": false, "tags": [], "id": 5831849, "bug_id": 700114, "raw_text": "I can reproduce this on Linux.\nI get a proper error message that the download failed due to permissions only when saving via Save page as, and also Save link target as.\nBut when the download is initiated via normal click on a link (try e.g. https://www.kernel.org and choose a patch file there). There is no indication of download (not in the Download manager) and no error message. The download is ignored.", "creation_time": "2011-11-07T20:26:28Z", "text": "I can reproduce this on Linux.\nI get a proper error message that the download failed due to permissions only when saving via Save page as, and also Save link target as.\nBut when the download is initiated via normal click on a link (try e.g. https://www.kernel.org and choose a patch file there). There is no indication of download (not in the Download manager) and no error message. The download is ignored.", "time": "2011-11-07T20:26:28Z", "attachment_id": null, "creator": "acelists@atlas.sk", "author": "acelists@atlas.sk"}, {"bug_id": 700114, "id": 5832725, "tags": [], "count": 3, "is_private": false, "attachment_id": null, "time": "2011-11-08T00:35:09Z", "text": "Yes!! I reached this bug while using Ubuntu Linux 10.10 and Firefox 7 (sorry, I never tried it under others OS). The Download is totally ignored and the Download window does never open.", "creation_time": "2011-11-08T00:35:09Z", "raw_text": "Yes!! I reached this bug while using Ubuntu Linux 10.10 and Firefox 7 (sorry, I never tried it under others OS). The Download is totally ignored and the Download window does never open.", "author": "ggagliano@gmail.com", "creator": "ggagliano@gmail.com"}, {"author": "ishikawa@yk.rim.or.jp", "creator": "ishikawa@yk.rim.or.jp", "raw_text": "Hi,\n\nI an trying to fix bug Bug 567585\nTB3 fails to raise an error when it tries to save an attachment to write-protected directory.\n\nActually TB7 (and a built from comm-central) still suffers the same problem.\n\nAND, I believe at least the half the problem reported here for \nFF originates from the same bug and we can \nblame  nsHelperAppDlg.js which is being fixed by me in bug 567585.\n\nThis javascript file is invoked in TB when\n - when the user clicks (left double click) on the e-mail attachment\nbut NOT invoked when\n - when the user clicks on  \"save as\" context menu (right mouse button first and then choose the \"save as\" from the pop-up menu.) or the menu button, save near the right lower corner of the message pane is clicked.\nIn that case, a CPP routine is invoked. \n\nConfusing, er?\n\nI don't really believe the pre-check is so useful as long as\nthe error is properly reported afterward.\nThis is because, if we use a remote server, or on a busy machine,\nsomeone else or one of your processes may be changing the\npermission of the directory or even removing the directory\n*AFTER* the filepicker (filechooser or whatever it is called) allowed you to select as the destination directory and *BEFORE*\nyour program starts to open and write to a file under that directory. \n\nThe only sure way to check whether a file can be created for writing is to open it on Posix when the remote file servers and \nmultiple processes are involved.\n\nMy latest patch in Bug 567585 is something that addresses the situation where target directory that is known to exist (and checked by the filepicker) disappears before writing to it.\nIn fixing the bug, I encountered a serious problem of not being able to pick up error message, and was forced to write an equivalent of strerror() for mozilla javascript routine.\n \nAnyway, the filepicker (or filechooser) seems to try to\nat least in principle, to avoid non-writable directory when it was asked to save something.\n\nHOWEVER, I think the check is not working on POSIX-like OS such as Solaris, linux, etc. because  isWritable() implementation used by filepicker under UNIX is, IMHO, broken.\n\nhttp://mxr.mozilla.org/comm-central/source/mozilla/xpcom/io/nsLocalFileUnix.cpp#1384\n\n1384 nsLocalFile::IsWritable(bool *_retval)\n1385 {\n1386     CHECK_mPath();\n1387     NS_ENSURE_ARG_POINTER(_retval);\n1388 \n1389     *_retval = (access(mPath.get(), W_OK) == 0);\n1390     if (*_retval || errno == EACCES)\n1391         return NS_OK;\n1392     return NSRESULT_FOR_ERRNO();\n\nSee line 1389. If the access() above succeeded then\nwe would have *_retval as boolen true, and isWritable()\nwill return NS_OK. So far so good.\n\nBut look at \"|| errno == EACCESS\".\nI have no idea why it is there. (Well, actually, I can guess why, but let us not go into the details.)\nSuppose we have a directory that is completely\ninvisible to the user. \nE.g.,\n(as a superuser)\n  # mkdir /tmp/i-dir\n  # chmod a-rwx /tmp/i-dir\n\nI believe the above isWritable() return bollean true for /tmp/i-dir because\nthe errno == EACCESS is true (!).\nBut can you write to it? No!\n\nHowever, at least, the filepicker today tries to check the \"Existence\" of the directory, and if a directory doesn't exist, it will fall back to another directory. \n\nThis is where I think the reporters above\nprobably say that nothing happens. \n\nMaybe TB and FF are slightly different here.\n\nUnder TB,\nfor example, if the user tries to save to a directory, say,\n/tmp/c-dir, and while the user is looking at the directory,\nsuppose,  from another shell in a different terminal window, you invoke \"rm -fr /tmp/c-dir\" and eliminates that directory.\n\nWhen the user tries to save to /tmp/c-dir, file picker refuses and move the \"focus\", i.e., where target is, to \"/tmp/\" directory, and lists the entries below \"/tmp\".\n\"c-dir\" is no longer there.\n(Actually, filepicker moves very fast, and by the time the user\ntries to press [save] while he/she thinks is trying to save to /tmp/c-dir, filepicker may already shows the listing of /tmp, and not /tmp/c-dir anymore.)\n\nHowever, at this moment when the user is looking at /tmp directory listing in filepicker, \nif someone creates \"/tmp/c-dir\" then\nthe c-dir entry appears in filepicker's listing, and so the user can move into /tmp/c-dir. \nYou can try deleting and creating a directory and\ntry saving to, say, \"/tmp/c-dir\" and see what happens\nby running something like\n while true\n do\n  mkdir /tmp/c-dir\n  sleep 2\n  mkdir /tmp/d-dir\n  sleep 2\n  rm -fr /tmp/c-dir\n  sleep 2\n  rm -fr /tmp/d-dir\n  sleep 1\n done\n\nBe sure to open \"error console\" because maybe once in a while\nthe filepicker allows the passing of \"/tmp/c-dir\" about to be removed in a split second before TB/FF saves something there and\nthe code throws an error that is never caught and thus you will\nsee an uncaught error in error console. (Well, this is how I \ndebugged the latest patch to Bug 567585.)\n\nNow, ever wonder why this problem to \"non-writable directory\" \nseems to be ignored by Windows users?\n\n(Non-existing directory, such as in the case of flakey USB drive\ngoing off-line under Windows\nand TB/FF allows the user to write to it and causing a failure has been reported. Probably the same cause and\nthe bad runtime behavior is my guess.)\n \nWhen I tried to create the non-writable directory on my LOCAL\nPC using\nattrib +r\nor \nchmod a-w of Cygwin,\nsuch a directory seems to be created.\nBut for some unknown reason, TB on Windows\nnever balked at writing to it. And Windows seems to allow writing to the directory (!?)\nI have no idea what is wrong here.\nMaybe because my account on *LOCAL* Windows PC has the administrative privilege?\n(If so, I can understand the scarcity of complaints about\nsilent failure to save an attachment to non-writable directory.)\n \nOh, can people follow this bug under linux try to write to, say, \n\"/dev/\" or mounted CDROM file system?\n\nThe silent failure would make people contemplate how this bug\nhas been ignored for so long.\n\nBy the way, there is another issue of save/store location AFTER\nthe failure occurs. Maybe you may notice that the\nnext time you try to save, suddenly the first choice moves to\nyour default save location.\nBut this default save location is different for\nTB and FF.\nAnd the javascript code is shared between TB and FF.\nThis is again very confusing :-(\n\nEven showing \"Download\" window is very confusing to TB users since \"saving attachment\" always means that you have already\nhas an e-mail message in your local folder and seeing\n\"download\" progress window is hilariously confusing (!).\nMaybe I should file a bug on this point alone, but a few similar bugs regarding the unusefulness of download window when\nsaving an attachment is done from TB (and I recall doing so long time ago before I realized the true cause of the problem: sharing of nsHelperAppDlg.js between FF for downloading, and\nTB for saving an attachment.\n\nThank you for reading this long rant.\n\nI hope the reporters here would encourage the adoption of\npatch in bug 567585 so that we can get rid of the problem\nsoon.", "creation_time": "2011-11-09T16:51:15Z", "time": "2011-11-09T16:51:15Z", "attachment_id": null, "text": "Hi,\n\nI an trying to fix bug Bug 567585\nTB3 fails to raise an error when it tries to save an attachment to write-protected directory.\n\nActually TB7 (and a built from comm-central) still suffers the same problem.\n\nAND, I believe at least the half the problem reported here for \nFF originates from the same bug and we can \nblame  nsHelperAppDlg.js which is being fixed by me in bug 567585.\n\nThis javascript file is invoked in TB when\n - when the user clicks (left double click) on the e-mail attachment\nbut NOT invoked when\n - when the user clicks on  \"save as\" context menu (right mouse button first and then choose the \"save as\" from the pop-up menu.) or the menu button, save near the right lower corner of the message pane is clicked.\nIn that case, a CPP routine is invoked. \n\nConfusing, er?\n\nI don't really believe the pre-check is so useful as long as\nthe error is properly reported afterward.\nThis is because, if we use a remote server, or on a busy machine,\nsomeone else or one of your processes may be changing the\npermission of the directory or even removing the directory\n*AFTER* the filepicker (filechooser or whatever it is called) allowed you to select as the destination directory and *BEFORE*\nyour program starts to open and write to a file under that directory. \n\nThe only sure way to check whether a file can be created for writing is to open it on Posix when the remote file servers and \nmultiple processes are involved.\n\nMy latest patch in Bug 567585 is something that addresses the situation where target directory that is known to exist (and checked by the filepicker) disappears before writing to it.\nIn fixing the bug, I encountered a serious problem of not being able to pick up error message, and was forced to write an equivalent of strerror() for mozilla javascript routine.\n \nAnyway, the filepicker (or filechooser) seems to try to\nat least in principle, to avoid non-writable directory when it was asked to save something.\n\nHOWEVER, I think the check is not working on POSIX-like OS such as Solaris, linux, etc. because  isWritable() implementation used by filepicker under UNIX is, IMHO, broken.\n\nhttp://mxr.mozilla.org/comm-central/source/mozilla/xpcom/io/nsLocalFileUnix.cpp#1384\n\n1384 nsLocalFile::IsWritable(bool *_retval)\n1385 {\n1386     CHECK_mPath();\n1387     NS_ENSURE_ARG_POINTER(_retval);\n1388 \n1389     *_retval = (access(mPath.get(), W_OK) == 0);\n1390     if (*_retval || errno == EACCES)\n1391         return NS_OK;\n1392     return NSRESULT_FOR_ERRNO();\n\nSee line 1389. If the access() above succeeded then\nwe would have *_retval as boolen true, and isWritable()\nwill return NS_OK. So far so good.\n\nBut look at \"|| errno == EACCESS\".\nI have no idea why it is there. (Well, actually, I can guess why, but let us not go into the details.)\nSuppose we have a directory that is completely\ninvisible to the user. \nE.g.,\n(as a superuser)\n  # mkdir /tmp/i-dir\n  # chmod a-rwx /tmp/i-dir\n\nI believe the above isWritable() return bollean true for /tmp/i-dir because\nthe errno == EACCESS is true (!).\nBut can you write to it? No!\n\nHowever, at least, the filepicker today tries to check the \"Existence\" of the directory, and if a directory doesn't exist, it will fall back to another directory. \n\nThis is where I think the reporters above\nprobably say that nothing happens. \n\nMaybe TB and FF are slightly different here.\n\nUnder TB,\nfor example, if the user tries to save to a directory, say,\n/tmp/c-dir, and while the user is looking at the directory,\nsuppose,  from another shell in a different terminal window, you invoke \"rm -fr /tmp/c-dir\" and eliminates that directory.\n\nWhen the user tries to save to /tmp/c-dir, file picker refuses and move the \"focus\", i.e., where target is, to \"/tmp/\" directory, and lists the entries below \"/tmp\".\n\"c-dir\" is no longer there.\n(Actually, filepicker moves very fast, and by the time the user\ntries to press [save] while he/she thinks is trying to save to /tmp/c-dir, filepicker may already shows the listing of /tmp, and not /tmp/c-dir anymore.)\n\nHowever, at this moment when the user is looking at /tmp directory listing in filepicker, \nif someone creates \"/tmp/c-dir\" then\nthe c-dir entry appears in filepicker's listing, and so the user can move into /tmp/c-dir. \nYou can try deleting and creating a directory and\ntry saving to, say, \"/tmp/c-dir\" and see what happens\nby running something like\n while true\n do\n  mkdir /tmp/c-dir\n  sleep 2\n  mkdir /tmp/d-dir\n  sleep 2\n  rm -fr /tmp/c-dir\n  sleep 2\n  rm -fr /tmp/d-dir\n  sleep 1\n done\n\nBe sure to open \"error console\" because maybe once in a while\nthe filepicker allows the passing of \"/tmp/c-dir\" about to be removed in a split second before TB/FF saves something there and\nthe code throws an error that is never caught and thus you will\nsee an uncaught error in error console. (Well, this is how I \ndebugged the latest patch to Bug 567585.)\n\nNow, ever wonder why this problem to \"non-writable directory\" \nseems to be ignored by Windows users?\n\n(Non-existing directory, such as in the case of flakey USB drive\ngoing off-line under Windows\nand TB/FF allows the user to write to it and causing a failure has been reported. Probably the same cause and\nthe bad runtime behavior is my guess.)\n \nWhen I tried to create the non-writable directory on my LOCAL\nPC using\nattrib +r\nor \nchmod a-w of Cygwin,\nsuch a directory seems to be created.\nBut for some unknown reason, TB on Windows\nnever balked at writing to it. And Windows seems to allow writing to the directory (!?)\nI have no idea what is wrong here.\nMaybe because my account on *LOCAL* Windows PC has the administrative privilege?\n(If so, I can understand the scarcity of complaints about\nsilent failure to save an attachment to non-writable directory.)\n \nOh, can people follow this bug under linux try to write to, say, \n\"/dev/\" or mounted CDROM file system?\n\nThe silent failure would make people contemplate how this bug\nhas been ignored for so long.\n\nBy the way, there is another issue of save/store location AFTER\nthe failure occurs. Maybe you may notice that the\nnext time you try to save, suddenly the first choice moves to\nyour default save location.\nBut this default save location is different for\nTB and FF.\nAnd the javascript code is shared between TB and FF.\nThis is again very confusing :-(\n\nEven showing \"Download\" window is very confusing to TB users since \"saving attachment\" always means that you have already\nhas an e-mail message in your local folder and seeing\n\"download\" progress window is hilariously confusing (!).\nMaybe I should file a bug on this point alone, but a few similar bugs regarding the unusefulness of download window when\nsaving an attachment is done from TB (and I recall doing so long time ago before I realized the true cause of the problem: sharing of nsHelperAppDlg.js between FF for downloading, and\nTB for saving an attachment.\n\nThank you for reading this long rant.\n\nI hope the reporters here would encourage the adoption of\npatch in bug 567585 so that we can get rid of the problem\nsoon.", "id": 5837257, "tags": [], "count": 4, "is_private": false, "bug_id": 700114}, {"creator": "acelists@atlas.sk", "author": "acelists@atlas.sk", "raw_text": "Thanks for your explanation. I have made the dependence on your bug 567585. We will see if it helps this problem. Thanks for looking into those parts of code.", "creation_time": "2011-11-09T16:55:35Z", "text": "Thanks for your explanation. I have made the dependence on your bug 567585. We will see if it helps this problem. Thanks for looking into those parts of code.", "attachment_id": null, "time": "2011-11-09T16:55:35Z", "count": 5, "is_private": false, "tags": [], "id": 5837269, "bug_id": 700114}, {"raw_text": "Additional observation.\n\n10.02\n(under linux: )\n\nUsing [File] -> [Save as]\nIf I set the default download directory to a directory without write-permission in advance, FF seems to silently fails to write to the directory, BUT resets the default directory to the ~/Download or whatever is the build default of FF and happily writes to the directory(!) \nThe default download directory location is reset to\nthe built-in default when this happens. Hmm...\n\nI am not sure if this under-the-hood recovery without warning\nat all is a good idea. (After all the user made a choice.)\n\n\nRight clicking on a link, and choose the \"save as\" from the\npop-up context menu and chooses a write-protected directory to\nsave the file fails SILENTLY as reported before.\n\n\nNow, under WINDOWS,  but\nit seems that the write-only\nproperty on local disk file system (at least this is\nI can test easily) seems to be ignored by\nmozilla I/O library (presumably if the user has admin permission.\nI never failed to write to a directory no matter what I do using\nattrib under Windows console, or\nchmod in cygwin console to set the write-protected property of\na directory.)\nThis may be a problem, though, from a security point of view.\n\nOH, wait, under windows, if I create a directory, and then\nsets the write-permission status as attrib or chmod (under cygwin), it seems that ONLY the FILES created BELOW that directory seem to be set to READ-only.\nWe can still create \na file under it (I was checking the PROPERTIES of the directory\nusing windows GUI and noticed this. The modification property of the directory seems to be still available to users. But this may be due to the user accounts on my Windows PC have administrative\nprivildge.)\n\nAt least my last observation explains why we have seen less\nsuch reporting of write-protected directory causing problems\ncoming from Windows users in contrast to linux/solaris/etc. users\nwho have suffered and reported these problems including myself.\n\nPresumably, even windows users will experience the same problem\nwhen they try to write to a write-protected file server.\n\nSomeone more familiar with Windows ACL setting can disable the\nwrite to a directory completely and check how FF (and TB) operates under the windows.\n\n\n.", "creation_time": "2012-03-02T21:21:05Z", "text": "Additional observation.\n\n10.02\n(under linux: )\n\nUsing [File] -> [Save as]\nIf I set the default download directory to a directory without write-permission in advance, FF seems to silently fails to write to the directory, BUT resets the default directory to the ~/Download or whatever is the build default of FF and happily writes to the directory(!) \nThe default download directory location is reset to\nthe built-in default when this happens. Hmm...\n\nI am not sure if this under-the-hood recovery without warning\nat all is a good idea. (After all the user made a choice.)\n\n\nRight clicking on a link, and choose the \"save as\" from the\npop-up context menu and chooses a write-protected directory to\nsave the file fails SILENTLY as reported before.\n\n\nNow, under WINDOWS,  but\nit seems that the write-only\nproperty on local disk file system (at least this is\nI can test easily) seems to be ignored by\nmozilla I/O library (presumably if the user has admin permission.\nI never failed to write to a directory no matter what I do using\nattrib under Windows console, or\nchmod in cygwin console to set the write-protected property of\na directory.)\nThis may be a problem, though, from a security point of view.\n\nOH, wait, under windows, if I create a directory, and then\nsets the write-permission status as attrib or chmod (under cygwin), it seems that ONLY the FILES created BELOW that directory seem to be set to READ-only.\nWe can still create \na file under it (I was checking the PROPERTIES of the directory\nusing windows GUI and noticed this. The modification property of the directory seems to be still available to users. But this may be due to the user accounts on my Windows PC have administrative\nprivildge.)\n\nAt least my last observation explains why we have seen less\nsuch reporting of write-protected directory causing problems\ncoming from Windows users in contrast to linux/solaris/etc. users\nwho have suffered and reported these problems including myself.\n\nPresumably, even windows users will experience the same problem\nwhen they try to write to a write-protected file server.\n\nSomeone more familiar with Windows ACL setting can disable the\nwrite to a directory completely and check how FF (and TB) operates under the windows.\n\n\n.", "creator": "ishikawa@yk.rim.or.jp", "attachment_id": null, "time": "2012-03-02T21:21:05Z", "author": "ishikawa@yk.rim.or.jp", "count": 6, "is_private": false, "tags": [], "id": 6110636, "bug_id": 700114}]}}}