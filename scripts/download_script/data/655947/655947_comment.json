{"bugs": {"655947": {"comments": [{"author": "exclusion@gmail.com", "attachment_id": null, "bug_id": 655947, "time": "2011-05-10T05:59:03Z", "creator": "exclusion@gmail.com", "tags": [], "count": 0, "text": "User-Agent:       Mozilla/5.0 (X11; Linux x86_64; rv:2.0.1) Gecko/20100101 Firefox/4.0.1\nBuild Identifier: Mozilla/5.0 (X11; Linux x86_64; rv:2.0.1) Gecko/20100101 Firefox/4.0.1\n\nRelation between the node children and anonymous content is undefined and such compare operation should be considered as erroneous (and return value should be 0, but not -1 or 1).\n\n(It's impossible to set up Range (nsIDOMRange) with a DOM node, when end of the range is within the anonymous content bound to it. Such a range would collapse cause ComparePoints always returns -1 when comparing any of the node children with the anonymous content.)\n\nReproducible: Always\n\nSteps to Reproduce:\n1. Try to set up DOMRange, when mStartNode is some DOM node, mStartOffset is 0, and mEndNode is within anonymous content that is bound to the node, mEndOffset is any:\n  nsCOMPtr<nsIDOMRange> range = nsFind::CreateRange();\n  range->SetStart(mStartNode, mStartOffset);\n  range->SetEnd(mEndNode, mEndOffset);\n\nActual Results:  \nRange collapses\n\nExpected Results:  \nRange should be not empty (as it would be when mStartNode is a parent of the node anonymous content is bound to).\n\nBug 263049 is a consequence of the issue.", "is_private": false, "creation_time": "2011-05-10T05:59:03Z", "raw_text": "User-Agent:       Mozilla/5.0 (X11; Linux x86_64; rv:2.0.1) Gecko/20100101 Firefox/4.0.1\nBuild Identifier: Mozilla/5.0 (X11; Linux x86_64; rv:2.0.1) Gecko/20100101 Firefox/4.0.1\n\nRelation between the node children and anonymous content is undefined and such compare operation should be considered as erroneous (and return value should be 0, but not -1 or 1).\n\n(It's impossible to set up Range (nsIDOMRange) with a DOM node, when end of the range is within the anonymous content bound to it. Such a range would collapse cause ComparePoints always returns -1 when comparing any of the node children with the anonymous content.)\n\nReproducible: Always\n\nSteps to Reproduce:\n1. Try to set up DOMRange, when mStartNode is some DOM node, mStartOffset is 0, and mEndNode is within anonymous content that is bound to the node, mEndOffset is any:\n  nsCOMPtr<nsIDOMRange> range = nsFind::CreateRange();\n  range->SetStart(mStartNode, mStartOffset);\n  range->SetEnd(mEndNode, mEndOffset);\n\nActual Results:  \nRange collapses\n\nExpected Results:  \nRange should be not empty (as it would be when mStartNode is a parent of the node anonymous content is bound to).\n\nBug 263049 is a consequence of the issue.", "id": 5459027}, {"author": "exclusion@gmail.com", "bug_id": 655947, "tags": [], "count": 1, "creator": "exclusion@gmail.com", "text": "Created attachment 531251\nPatched ComparePoints will not compare child indexes when one of the compared nodes is not a child", "creation_time": "2011-05-10T06:08:28Z", "raw_text": "", "id": 5459031, "attachment_id": 531251, "time": "2011-05-10T06:08:28Z", "is_private": false}, {"is_private": false, "time": "2011-05-10T08:16:33Z", "attachment_id": null, "creation_time": "2011-05-10T08:16:33Z", "text": "What is the practical consequences of this? Note that we don't expose anonymous content to the web any more since we disabled XBL.", "id": 5459124, "raw_text": "What is the practical consequences of this? Note that we don't expose anonymous content to the web any more since we disabled XBL.", "creator": "jonas@sicking.cc", "count": 2, "tags": [], "bug_id": 655947, "author": "jonas@sicking.cc"}, {"text": "(In reply to comment #2)\n> What is the practical consequences of this? Note that we don't expose\n> anonymous content to the web any more since we disabled XBL.\nI discovered this issue when investigating bug with Find Backward within XML content (Bug 263049).\nAnd I found following explanation of it:\n\nFind backward doesn't work because visible XML content generated as anonymous content and it's binded to root element of the document. And nsTypeAheadFind::GetSearchContainers() chooses root element, child 0 as the start of the search range, and some node inside anonymous content (current selection) as the end of the range. Then nsFindContentIterator::Reset is invoked, which in turn tries to set up the mOuterIterator range. But the range collapses (after range->SetEnd(mEndNode, mEndOffset)), because nsContentUtils::ComparePoints (content/base/src/nsContentUtils.cpp) assumes that anonymous content always precedes any of the node children. (Due to IndexOf for anonymous content returns -1 (so the content assumed as placed before the first child of the node)).\n\nSo proposed patch in fact fixes Bug 263049. (Search Backward starts to work just as Search Forward).", "is_private": false, "creation_time": "2011-05-10T08:25:52Z", "raw_text": "(In reply to comment #2)\n> What is the practical consequences of this? Note that we don't expose\n> anonymous content to the web any more since we disabled XBL.\nI discovered this issue when investigating bug with Find Backward within XML content (Bug 263049).\nAnd I found following explanation of it:\n\nFind backward doesn't work because visible XML content generated as anonymous content and it's binded to root element of the document. And nsTypeAheadFind::GetSearchContainers() chooses root element, child 0 as the start of the search range, and some node inside anonymous content (current selection) as the end of the range. Then nsFindContentIterator::Reset is invoked, which in turn tries to set up the mOuterIterator range. But the range collapses (after range->SetEnd(mEndNode, mEndOffset)), because nsContentUtils::ComparePoints (content/base/src/nsContentUtils.cpp) assumes that anonymous content always precedes any of the node children. (Due to IndexOf for anonymous content returns -1 (so the content assumed as placed before the first child of the node)).\n\nSo proposed patch in fact fixes Bug 263049. (Search Backward starts to work just as Search Forward).", "id": 5459129, "bug_id": 655947, "tags": [], "creator": "exclusion@gmail.com", "time": "2011-05-10T08:25:52Z", "count": 3, "author": "exclusion@gmail.com", "attachment_id": null}, {"author": "bzbarsky@mit.edu", "attachment_id": 531251, "text": "Comment on attachment 531251\nPatched ComparePoints will not compare child indexes when one of the compared nodes is not a child\n\nJonas, this passes try.  Want to review?  Any obvious gotchas here?", "is_private": false, "creation_time": "2011-05-10T16:51:39Z", "raw_text": "Jonas, this passes try.  Want to review?  Any obvious gotchas here?", "id": 5459876, "bug_id": 655947, "time": "2011-05-10T16:51:39Z", "count": 4, "creator": "bzbarsky@mit.edu", "tags": []}, {"author": "jonas@sicking.cc", "attachment_id": null, "raw_text": "Shouldn't we treat these nodes as being disconnected? I.e. set *aDisconnected to true and return 1? At least the former seems like something we should do.\n\nAndrew: Does searching backwards work if you set *aDisconnected to true and return 1?", "id": 5481854, "text": "Shouldn't we treat these nodes as being disconnected? I.e. set *aDisconnected to true and return 1? At least the former seems like something we should do.\n\nAndrew: Does searching backwards work if you set *aDisconnected to true and return 1?", "is_private": false, "creation_time": "2011-05-20T02:51:54Z", "bug_id": 655947, "creator": "jonas@sicking.cc", "time": "2011-05-20T02:51:54Z", "tags": [], "count": 5}, {"bug_id": 655947, "tags": [], "creator": "jonas@sicking.cc", "count": 6, "raw_text": "Sorry! Meant Alexander, not Andrew.", "id": 5481855, "text": "Sorry! Meant Alexander, not Andrew.", "creation_time": "2011-05-20T02:52:28Z", "author": "jonas@sicking.cc", "time": "2011-05-20T02:52:28Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "author": "exclusion@gmail.com", "creator": "exclusion@gmail.com", "count": 7, "time": "2011-05-20T05:17:38Z", "tags": [], "bug_id": 655947, "id": 5481976, "raw_text": "\nUnfortunately, it wouldn't work. nsRange::SetEnd doesn't use or check aDisconnected parameter:\n\n  // Collapse if not positioned yet, if positioned in another doc or\n  // if the new end is before start.\n  if (!mIsPositioned || newRoot != mRoot ||\n      nsContentUtils::ComparePoints(mStartParent, mStartOffset,\n                                    aParent, aOffset) == 1) {\n    DoSetRange(aParent, aOffset, aParent, aOffset, newRoot);\n\n    return NS_OK;\n  }\n\nSo it would collapse the range anyway.\nIn my opinion, this case should not be treated as disconnected subtrees. For example, when start of the range set to HTML root and end of the range set inside of input or textarea content (presented as anonymous content), ComparePoints, SetRange (and Find) works just fine (start of the document precedes that input and it's anonymous content too). The problem arises only when the start of the range set to the node anonymous content is bound to.\nI think that considering such nodes (regular and anonymous content) as disconnected should not depend on whether the regular node is the holder of anonymous content or it is it's parent or some preceding node. So it seems that most appropriate solution is to return 0 as error status or at least as not a statement that such nodes preceding one another.", "is_private": false, "creation_time": "2011-05-20T05:17:38Z", "text": "\nUnfortunately, it wouldn't work. nsRange::SetEnd doesn't use or check aDisconnected parameter:\n\n  // Collapse if not positioned yet, if positioned in another doc or\n  // if the new end is before start.\n  if (!mIsPositioned || newRoot != mRoot ||\n      nsContentUtils::ComparePoints(mStartParent, mStartOffset,\n                                    aParent, aOffset) == 1) {\n    DoSetRange(aParent, aOffset, aParent, aOffset, newRoot);\n\n    return NS_OK;\n  }\n\nSo it would collapse the range anyway.\nIn my opinion, this case should not be treated as disconnected subtrees. For example, when start of the range set to HTML root and end of the range set inside of input or textarea content (presented as anonymous content), ComparePoints, SetRange (and Find) works just fine (start of the document precedes that input and it's anonymous content too). The problem arises only when the start of the range set to the node anonymous content is bound to.\nI think that considering such nodes (regular and anonymous content) as disconnected should not depend on whether the regular node is the holder of anonymous content or it is it's parent or some preceding node. So it seems that most appropriate solution is to return 0 as error status or at least as not a statement that such nodes preceding one another."}, {"attachment_id": 531251, "is_private": false, "time": "2013-03-20T21:41:30Z", "author": "jonas@sicking.cc", "text": "Comment on attachment 531251\nPatched ComparePoints will not compare child indexes when one of the compared nodes is not a child\n\nReview of attachment 531251:\n-----------------------------------------------------------------\n\nI'll defer to Olli on this one.", "creation_time": "2013-03-20T21:41:30Z", "raw_text": "Review of attachment 531251:\n-----------------------------------------------------------------\n\nI'll defer to Olli on this one.", "id": 7226774, "bug_id": 655947, "creator": "jonas@sicking.cc", "count": 8, "tags": []}, {"text": "Um, the patch is ancient. Is it still valid?", "creation_time": "2013-03-21T10:45:13Z", "raw_text": "Um, the patch is ancient. Is it still valid?", "id": 7228692, "bug_id": 655947, "creator": "bugs@pettay.fi", "tags": [], "count": 9, "author": "bugs@pettay.fi", "is_private": false, "time": "2013-03-21T10:45:13Z", "attachment_id": null}, {"text": "I think so. Cause the bug https://bugzilla.mozilla.org/show_bug.cgi?id=263049 still not fixed.", "creation_time": "2013-03-21T11:00:02Z", "raw_text": "I think so. Cause the bug https://bugzilla.mozilla.org/show_bug.cgi?id=263049 still not fixed.", "id": 7228729, "bug_id": 655947, "creator": "exclusion@gmail.com", "tags": [], "count": 10, "author": "exclusion@gmail.com", "is_private": false, "time": "2013-03-21T11:00:02Z", "attachment_id": null}, {"bug_id": 655947, "creator": "bzbarsky@mit.edu", "count": 11, "time": "2013-03-21T14:10:40Z", "tags": [], "raw_text": "I would expect the patch is still valid; might need to be merged to tip to make sure.", "id": 7229328, "text": "I would expect the patch is still valid; might need to be merged to tip to make sure.", "creation_time": "2013-03-21T14:10:40Z", "is_private": false, "author": "bzbarsky@mit.edu", "attachment_id": null}, {"attachment_id": null, "time": "2013-03-22T12:42:25Z", "is_private": false, "author": "bugs@pettay.fi", "tags": [], "creator": "bugs@pettay.fi", "count": 12, "bug_id": 655947, "id": 7233575, "raw_text": "So the behavior of nsRange::CompareNodeToRange changes too. But that looks ok.\n\nI'm more worried about nsIFrame::IsFrameSelected()", "creation_time": "2013-03-22T12:42:25Z", "text": "So the behavior of nsRange::CompareNodeToRange changes too. But that looks ok.\n\nI'm more worried about nsIFrame::IsFrameSelected()"}, {"attachment_id": 531251, "author": "bugs@pettay.fi", "time": "2013-03-22T12:43:27Z", "count": 13, "creator": "bugs@pettay.fi", "tags": [], "bug_id": 655947, "id": 7233576, "raw_text": "Mats, can you think of problems this could cause to\nrange/selection?", "creation_time": "2013-03-22T12:43:27Z", "is_private": false, "text": "Comment on attachment 531251\nPatched ComparePoints will not compare child indexes when one of the compared nodes is not a child\n\nMats, can you think of problems this could cause to\nrange/selection?"}, {"creator": "MatsPalmgren_bugz@use.startmail.com", "count": 14, "tags": [], "bug_id": 655947, "id": 7234417, "raw_text": "I don't see any obvious problems for range/selection code,\nr=mats if it still fixes the problem and pass regression tests.\n\nA couple of nits:\nPlease use single-assignment, i.e.\n  const int32_t index1 = parent->IndexOf(child1);\netc\n\nWrap the new if-conditions in MOZ_UNLIKELY.", "creation_time": "2013-03-22T16:52:13Z", "text": "Comment on attachment 531251\nPatched ComparePoints will not compare child indexes when one of the compared nodes is not a child\n\nI don't see any obvious problems for range/selection code,\nr=mats if it still fixes the problem and pass regression tests.\n\nA couple of nits:\nPlease use single-assignment, i.e.\n  const int32_t index1 = parent->IndexOf(child1);\netc\n\nWrap the new if-conditions in MOZ_UNLIKELY.", "author": "MatsPalmgren_bugz@use.startmail.com", "time": "2013-03-22T16:52:13Z", "is_private": false, "attachment_id": 531251}, {"is_private": false, "time": "2013-03-22T19:05:35Z", "attachment_id": null, "creation_time": "2013-03-22T19:05:35Z", "text": "Alexander, are you willing to update the patch?  Have you run tests on it, or should I push it to try?", "id": 7235023, "raw_text": "Alexander, are you willing to update the patch?  Have you run tests on it, or should I push it to try?", "creator": "bzbarsky@mit.edu", "count": 15, "tags": [], "bug_id": 655947, "author": "bzbarsky@mit.edu"}, {"attachment_id": null, "author": "exclusion@gmail.com", "tags": [], "count": 16, "time": "2013-03-23T03:00:38Z", "creator": "exclusion@gmail.com", "bug_id": 655947, "creation_time": "2013-03-23T03:00:38Z", "is_private": false, "text": "When I made the patch, I ran the tests and found no problems.\nI have no building environment for the Firefox just now. It will take some time to setup it. If the issue can wait, I will update the patch and retest it within a day or two.", "id": 7236486, "raw_text": "When I made the patch, I ran the tests and found no problems.\nI have no building environment for the Firefox just now. It will take some time to setup it. If the issue can wait, I will update the patch and retest it within a day or two."}, {"attachment_id": null, "author": "bzbarsky@mit.edu", "id": 7236516, "raw_text": "That would be great.  I doubt this has suddenly gotten life-or-death urgent just because Jonas finally stopped being reviewer of record... ;)", "creation_time": "2013-03-23T03:17:24Z", "is_private": false, "text": "That would be great.  I doubt this has suddenly gotten life-or-death urgent just because Jonas finally stopped being reviewer of record... ;)", "tags": [], "count": 17, "time": "2013-03-23T03:17:24Z", "creator": "bzbarsky@mit.edu", "bug_id": 655947}, {"author": "exclusion@gmail.com", "text": "Created attachment 728715\nOptimized patch\n\nHere comes another version. It still fixes the bug.\nPlease push to try it, as I have no hg account.\nThank you.", "creation_time": "2013-03-24T11:59:58Z", "raw_text": "Here comes another version. It still fixes the bug.\nPlease push to try it, as I have no hg account.\nThank you.", "id": 7237908, "bug_id": 655947, "count": 18, "tags": [], "creator": "exclusion@gmail.com", "attachment_id": 728715, "is_private": false, "time": "2013-03-24T11:59:58Z"}, {"attachment_id": null, "is_private": false, "time": "2013-03-24T17:09:02Z", "author": "MatsPalmgren_bugz@use.startmail.com", "text": "https://tbpl.mozilla.org/?tree=Try&rev=fe7e896b73db", "creation_time": "2013-03-24T17:09:02Z", "raw_text": "https://tbpl.mozilla.org/?tree=Try&rev=fe7e896b73db", "id": 7238174, "bug_id": 655947, "creator": "MatsPalmgren_bugz@use.startmail.com", "count": 19, "tags": []}, {"time": "2013-03-25T00:14:07Z", "is_private": false, "attachment_id": null, "bug_id": 655947, "tags": [], "creator": "MatsPalmgren_bugz@use.startmail.com", "count": 20, "text": "There is a M4 failure across platforms:\n11:27:48 INFO - 16082 ERROR TEST-UNEXPECTED-FAIL | /tests/layout/forms/test/test_textarea_resize.html | Assertion count 1 is greater than expected range 0-0 assertions.\n\nI've started a new run using an up-to-date m-c tree in case I got a bad parent\ncset in the first run.\nhttps://tbpl.mozilla.org/?tree=Try&rev=2d5deee758fb", "creation_time": "2013-03-25T00:14:07Z", "raw_text": "There is a M4 failure across platforms:\n11:27:48 INFO - 16082 ERROR TEST-UNEXPECTED-FAIL | /tests/layout/forms/test/test_textarea_resize.html | Assertion count 1 is greater than expected range 0-0 assertions.\n\nI've started a new run using an up-to-date m-c tree in case I got a bad parent\ncset in the first run.\nhttps://tbpl.mozilla.org/?tree=Try&rev=2d5deee758fb", "id": 7238496, "author": "MatsPalmgren_bugz@use.startmail.com"}, {"is_private": false, "time": "2013-03-25T15:12:49Z", "attachment_id": 728987, "id": 7240039, "raw_text": "The M4 failure is a real regression.  The assertion is unrelated but it\noccurred because layout/forms/test/test_textarea_resize.html started\na drag operation where previously it didn't.\n\nI've done some debugging, using this patch I get the following output\nin a build that works:\n\n 0:07.95 start: 0 / Text@0x2b2540dc2e00 flags=[0000008a] primaryframe=0x2b25411b1728 refcount=4<Text>\n 0:07.95 end: 1 / div@0x2b2540dc2b00 class=\"anonymous-div wrap\" state=[40000010005] flags=[0020019e] ranges:1 primaryframe=0x2b2541125c10 refcount=34<\n 0:07.95 Text@0x2b2540dc2e00 flags=[0000008a] primaryframe=0x2b25411b1728 refcount=3<Text>\n 0:07.95 br@0x2b25411b4000 _moz_dirty=\"\" type=\"_moz\" state=[40000020000] flags=[00200088] primaryframe=0x2b2541127cc0 refcount=2<>\n 0:07.95 >\n 0:07.95 isChromeShell=0\n 0:07.95 DragDataProducer::GetDraggableSelectionData\n 0:07.95 isCollapsed=0\n 0:07.95 inRealTargetNode: div@0x2b2540dc2b00 class=\"anonymous-div wrap\" state=[40000010005] flags=[0020019e] ranges:1 primaryframe=0x2b2541125c10 refcount=35<\n 0:07.95 Text@0x2b2540dc2e00 flags=[0000008a] primaryframe=0x2b25411b1728 refcount=3<Text>\n 0:07.95 br@0x2b25411b4000 _moz_dirty=\"\" type=\"_moz\" state=[40000020000] flags=[00200088] primaryframe=0x2b2541127cc0 refcount=2<>\n 0:07.95 >\n 0:07.95 selectionContainsTarget=0\n 0:07.95 haveSelectedContent=0\n 0:07.95 DetermineDragTarget: rv=0x0 canDrag=1 *aSelection=(nil)\n\n\nAnd in a build that fails:\n\n 0:07.90 start: 0 / Text@0x2af41db0b200 flags=[0000008a] primaryframe=0x2af4202bb728 refcount=4<Text>\n 0:07.90 end: 1 / div@0x2af41db0a300 class=\"anonymous-div wrap\" state=[40000010005] flags=[0020019e] ranges:1 primaryframe=0x2af420222c10 refcount=34<\n 0:07.90 Text@0x2af41db0b200 flags=[0000008a] primaryframe=0x2af4202bb728 refcount=3<Text>\n 0:07.90 br@0x2af41f0b9e80 _moz_dirty=\"\" type=\"_moz\" state=[40000020000] flags=[00200088] primaryframe=0x2af420224cc0 refcount=2<>\n 0:07.90 >\n 0:07.90 isChromeShell=0\n 0:07.90 DragDataProducer::GetDraggableSelectionData\n 0:07.90 isCollapsed=0\n 0:07.90 inRealTargetNode: div@0x2af41db0a300 class=\"anonymous-div wrap\" state=[40000010005] flags=[0020019e] ranges:1 primaryframe=0x2af420222c10 refcount=35<\n 0:07.90 Text@0x2af41db0b200 flags=[0000008a] primaryframe=0x2af4202bb728 refcount=3<Text>\n 0:07.90 br@0x2af41f0b9e80 _moz_dirty=\"\" type=\"_moz\" state=[40000020000] flags=[00200088] primaryframe=0x2af420224cc0 refcount=2<>\n 0:07.90 >\n 0:07.90 selectionContainsTarget=1\n 0:07.90 haveSelectedContent=1\n 0:07.90 DetermineDragTarget: rv=0x0 canDrag=1 *aSelection=0x2af420706240\n 0:07.91 ###!!! ASSERTION: Wrong bounds: 'bounds.IsEqualInterior(aChildren.GetBounds(aBuilder))', file /home/mats/moz/mc/layout/base/FrameLayerBuilder.cpp, line 2978\n\n\nThe difference is in that nsContentAreaDragDrop::GetDragData gets a non-null\nselection.  This is because \"inSelection->ContainsNode()\":\nhttp://hg.mozilla.org/mozilla-central/annotate/631d57b31bb1/content/base/src/nsContentAreaDragDrop.cpp#l825\nnow return selectionContainsTarget=true, when it should be false.\n\nIOW, a selection range where the start node is the parent of the end node,\nand the end node is anonymous, selection.containsNode(parent,false) returns\ntrue when it should return false.", "creation_time": "2013-03-25T15:12:49Z", "text": "Created attachment 728987\ndebug patch\n\nThe M4 failure is a real regression.  The assertion is unrelated but it\noccurred because layout/forms/test/test_textarea_resize.html started\na drag operation where previously it didn't.\n\nI've done some debugging, using this patch I get the following output\nin a build that works:\n\n 0:07.95 start: 0 / Text@0x2b2540dc2e00 flags=[0000008a] primaryframe=0x2b25411b1728 refcount=4<Text>\n 0:07.95 end: 1 / div@0x2b2540dc2b00 class=\"anonymous-div wrap\" state=[40000010005] flags=[0020019e] ranges:1 primaryframe=0x2b2541125c10 refcount=34<\n 0:07.95 Text@0x2b2540dc2e00 flags=[0000008a] primaryframe=0x2b25411b1728 refcount=3<Text>\n 0:07.95 br@0x2b25411b4000 _moz_dirty=\"\" type=\"_moz\" state=[40000020000] flags=[00200088] primaryframe=0x2b2541127cc0 refcount=2<>\n 0:07.95 >\n 0:07.95 isChromeShell=0\n 0:07.95 DragDataProducer::GetDraggableSelectionData\n 0:07.95 isCollapsed=0\n 0:07.95 inRealTargetNode: div@0x2b2540dc2b00 class=\"anonymous-div wrap\" state=[40000010005] flags=[0020019e] ranges:1 primaryframe=0x2b2541125c10 refcount=35<\n 0:07.95 Text@0x2b2540dc2e00 flags=[0000008a] primaryframe=0x2b25411b1728 refcount=3<Text>\n 0:07.95 br@0x2b25411b4000 _moz_dirty=\"\" type=\"_moz\" state=[40000020000] flags=[00200088] primaryframe=0x2b2541127cc0 refcount=2<>\n 0:07.95 >\n 0:07.95 selectionContainsTarget=0\n 0:07.95 haveSelectedContent=0\n 0:07.95 DetermineDragTarget: rv=0x0 canDrag=1 *aSelection=(nil)\n\n\nAnd in a build that fails:\n\n 0:07.90 start: 0 / Text@0x2af41db0b200 flags=[0000008a] primaryframe=0x2af4202bb728 refcount=4<Text>\n 0:07.90 end: 1 / div@0x2af41db0a300 class=\"anonymous-div wrap\" state=[40000010005] flags=[0020019e] ranges:1 primaryframe=0x2af420222c10 refcount=34<\n 0:07.90 Text@0x2af41db0b200 flags=[0000008a] primaryframe=0x2af4202bb728 refcount=3<Text>\n 0:07.90 br@0x2af41f0b9e80 _moz_dirty=\"\" type=\"_moz\" state=[40000020000] flags=[00200088] primaryframe=0x2af420224cc0 refcount=2<>\n 0:07.90 >\n 0:07.90 isChromeShell=0\n 0:07.90 DragDataProducer::GetDraggableSelectionData\n 0:07.90 isCollapsed=0\n 0:07.90 inRealTargetNode: div@0x2af41db0a300 class=\"anonymous-div wrap\" state=[40000010005] flags=[0020019e] ranges:1 primaryframe=0x2af420222c10 refcount=35<\n 0:07.90 Text@0x2af41db0b200 flags=[0000008a] primaryframe=0x2af4202bb728 refcount=3<Text>\n 0:07.90 br@0x2af41f0b9e80 _moz_dirty=\"\" type=\"_moz\" state=[40000020000] flags=[00200088] primaryframe=0x2af420224cc0 refcount=2<>\n 0:07.90 >\n 0:07.90 selectionContainsTarget=1\n 0:07.90 haveSelectedContent=1\n 0:07.90 DetermineDragTarget: rv=0x0 canDrag=1 *aSelection=0x2af420706240\n 0:07.91 ###!!! ASSERTION: Wrong bounds: 'bounds.IsEqualInterior(aChildren.GetBounds(aBuilder))', file /home/mats/moz/mc/layout/base/FrameLayerBuilder.cpp, line 2978\n\n\nThe difference is in that nsContentAreaDragDrop::GetDragData gets a non-null\nselection.  This is because \"inSelection->ContainsNode()\":\nhttp://hg.mozilla.org/mozilla-central/annotate/631d57b31bb1/content/base/src/nsContentAreaDragDrop.cpp#l825\nnow return selectionContainsTarget=true, when it should be false.\n\nIOW, a selection range where the start node is the parent of the end node,\nand the end node is anonymous, selection.containsNode(parent,false) returns\ntrue when it should return false.", "tags": [], "count": 21, "creator": "MatsPalmgren_bugz@use.startmail.com", "bug_id": 655947, "author": "MatsPalmgren_bugz@use.startmail.com"}, {"attachment_id": null, "is_private": false, "time": "2013-03-25T15:17:52Z", "author": "MatsPalmgren_bugz@use.startmail.com", "text": "It's easy to reproduce the bug without running mochitest:\n1. load data:text/html,<textarea>\n2. type some text into the textarea, then CTRL+A to select it\n3. press the left mouse-button on the textarea background away from the text and\n   drag it\n=> this starts a drag operation of the selected text", "creation_time": "2013-03-25T15:17:52Z", "raw_text": "It's easy to reproduce the bug without running mochitest:\n1. load data:text/html,<textarea>\n2. type some text into the textarea, then CTRL+A to select it\n3. press the left mouse-button on the textarea background away from the text and\n   drag it\n=> this starts a drag operation of the selected text", "id": 7240061, "bug_id": 655947, "count": 22, "creator": "MatsPalmgren_bugz@use.startmail.com", "tags": []}, {"attachment_id": 728715, "is_private": false, "time": "2013-03-25T15:23:16Z", "author": "MatsPalmgren_bugz@use.startmail.com", "raw_text": "r- because of the bug described above.\nMaybe it can be fixed by tweaking Selection::ContainsNode() ?", "id": 7240086, "text": "Comment on attachment 728715\nOptimized patch\n\nr- because of the bug described above.\nMaybe it can be fixed by tweaking Selection::ContainsNode() ?", "creation_time": "2013-03-25T15:23:16Z", "bug_id": 655947, "tags": [], "creator": "MatsPalmgren_bugz@use.startmail.com", "count": 23}, {"author": "exclusion@gmail.com", "raw_text": "I think the problem is in the nsRange::CompareNodeToRange. Anonymous content should not be considered as contained in a range. So both outNodeBefore and outNodeAfter should be false.\nPlease push to try this version.", "id": 7244614, "text": "Created attachment 729523\nModified patch\n\nI think the problem is in the nsRange::CompareNodeToRange. Anonymous content should not be considered as contained in a range. So both outNodeBefore and outNodeAfter should be false.\nPlease push to try this version.", "creation_time": "2013-03-26T14:20:00Z", "bug_id": 655947, "count": 24, "tags": [], "creator": "exclusion@gmail.com", "attachment_id": 729523, "is_private": false, "time": "2013-03-26T14:20:00Z"}, {"is_private": false, "time": "2013-03-26T15:05:39Z", "attachment_id": null, "creation_time": "2013-03-26T15:05:39Z", "text": "(In reply to Alexander LAW from comment #24)\n\n> I think the problem is in the nsRange::CompareNodeToRange. Anonymous content\n> should not be considered as contained in a range. So both outNodeBefore and\n> outNodeAfter should be false.\n\nSorry, I meant \"both outNodeBefore and outNodeAfter should be true (not false)\".", "id": 7244818, "raw_text": "(In reply to Alexander LAW from comment #24)\n\n> I think the problem is in the nsRange::CompareNodeToRange. Anonymous content\n> should not be considered as contained in a range. So both outNodeBefore and\n> outNodeAfter should be false.\n\nSorry, I meant \"both outNodeBefore and outNodeAfter should be true (not false)\".", "creator": "exclusion@gmail.com", "count": 25, "tags": [], "bug_id": 655947, "author": "exclusion@gmail.com"}, {"id": 7251547, "raw_text": "> Anonymous content should not be considered as contained in a range.\n\nThat doesn't seem right to me.\n\n>   // is RANGE(start) <= NODE(start) ?\n>   bool disconnected = false;\n>-  *outNodeBefore = nsContentUtils::ComparePoints(rangeStartParent,\n>+  if (MOZ_UNLIKELY(rangeStartParent == parent && rangeStartOffset == nodeStart)) {\n>+    *outNodeBefore = false;\n\nThe code you added contradicts the comment and what this function is supposed\nto do.  It seems to me the above applies to all content not just anonymous.\n\nCompare nsContentUtils::ComparePoints for the case RANGE(start) == NODE(start):\nhttp://mxr.mozilla.org/mozilla-central/source/content/base/src/nsContentUtils.cpp#2019\nwhich would return zero on line 2024, and set *outNodeBefore == true.\n\nPushed to Try:\nhttps://tbpl.mozilla.org/?tree=Try&rev=3281ab480318", "creation_time": "2013-03-27T21:18:10Z", "is_private": false, "text": "> Anonymous content should not be considered as contained in a range.\n\nThat doesn't seem right to me.\n\n>   // is RANGE(start) <= NODE(start) ?\n>   bool disconnected = false;\n>-  *outNodeBefore = nsContentUtils::ComparePoints(rangeStartParent,\n>+  if (MOZ_UNLIKELY(rangeStartParent == parent && rangeStartOffset == nodeStart)) {\n>+    *outNodeBefore = false;\n\nThe code you added contradicts the comment and what this function is supposed\nto do.  It seems to me the above applies to all content not just anonymous.\n\nCompare nsContentUtils::ComparePoints for the case RANGE(start) == NODE(start):\nhttp://mxr.mozilla.org/mozilla-central/source/content/base/src/nsContentUtils.cpp#2019\nwhich would return zero on line 2024, and set *outNodeBefore == true.\n\nPushed to Try:\nhttps://tbpl.mozilla.org/?tree=Try&rev=3281ab480318", "time": "2013-03-27T21:18:10Z", "tags": [], "creator": "MatsPalmgren_bugz@use.startmail.com", "count": 26, "bug_id": 655947, "attachment_id": null, "author": "MatsPalmgren_bugz@use.startmail.com"}, {"author": "exclusion@gmail.com", "attachment_id": null, "text": "(In reply to Mats Palmgren [:mats] from comment #26)\n> > Anonymous content should not be considered as contained in a range.\n> \n> That doesn't seem right to me.\n> \n> >   // is RANGE(start) <= NODE(start) ?\n> >   bool disconnected = false;\n> >-  *outNodeBefore = nsContentUtils::ComparePoints(rangeStartParent,\n> >+  if (MOZ_UNLIKELY(rangeStartParent == parent && rangeStartOffset == nodeStart)) {\n> >+    *outNodeBefore = false;\n> \n> The code you added contradicts the comment and what this function is supposed\n> to do.  It seems to me the above applies to all content not just anonymous.\nPlease look at the original code http://mxr.mozilla.org/mozilla-central/source/content/base/src/nsRange.cpp#119\nHere we have the same contradiction or not so clear wording. Top comment for the method says:\n// If neither are true, the node is contained inside of the range.\nSo outNodeBefore should be false if (RANGE(start) <= NODE(start)). Maybe it's worth to change the comment but the logic is the same.\n\n> Pushed to Try:\n> https://tbpl.mozilla.org/?tree=Try&rev=3281ab480318\nIt seems that there are no other issues.", "is_private": false, "creation_time": "2013-04-01T05:00:02Z", "raw_text": "(In reply to Mats Palmgren [:mats] from comment #26)\n> > Anonymous content should not be considered as contained in a range.\n> \n> That doesn't seem right to me.\n> \n> >   // is RANGE(start) <= NODE(start) ?\n> >   bool disconnected = false;\n> >-  *outNodeBefore = nsContentUtils::ComparePoints(rangeStartParent,\n> >+  if (MOZ_UNLIKELY(rangeStartParent == parent && rangeStartOffset == nodeStart)) {\n> >+    *outNodeBefore = false;\n> \n> The code you added contradicts the comment and what this function is supposed\n> to do.  It seems to me the above applies to all content not just anonymous.\nPlease look at the original code http://mxr.mozilla.org/mozilla-central/source/content/base/src/nsRange.cpp#119\nHere we have the same contradiction or not so clear wording. Top comment for the method says:\n// If neither are true, the node is contained inside of the range.\nSo outNodeBefore should be false if (RANGE(start) <= NODE(start)). Maybe it's worth to change the comment but the logic is the same.\n\n> Pushed to Try:\n> https://tbpl.mozilla.org/?tree=Try&rev=3281ab480318\nIt seems that there are no other issues.", "id": 7261730, "bug_id": 655947, "creator": "exclusion@gmail.com", "time": "2013-04-01T05:00:02Z", "tags": [], "count": 27}, {"time": "2013-04-10T15:40:01Z", "is_private": false, "attachment_id": null, "count": 28, "tags": [], "creator": "exclusion@gmail.com", "bug_id": 655947, "creation_time": "2013-04-10T15:40:01Z", "text": "Are there any obstacles to get the latest patch applied? Should I edit the comments to make it more clear?", "id": 7299509, "raw_text": "Are there any obstacles to get the latest patch applied? Should I edit the comments to make it more clear?", "author": "exclusion@gmail.com"}, {"attachment_id": null, "author": "MatsPalmgren_bugz@use.startmail.com", "id": 7313608, "raw_text": "(In reply to Alexander LAW from comment #27)\n> Top comment for the method says:\n> // If neither are true, the node is contained inside of the range.\n\nYeah, I think the comment at the top of nsRange::CompareNodeToRange\nis correct.  The later comments are quite confusing since what the\nrespective ComparePoints() calls do is actually the opposite of what\nthe comment say.  Perhaps the comment is just trying to convey\nwhich part of the condition in the top comment is tested?\n\nAnyway, I agree they are confusing and not very helpful so we should\njust remove them.\n\n> It seems that there are no other issues.\n\nI believe that's more a sign of our extremely poor test coverage of\nanything involving anonymous content. ;-)\n\nOne remaining (minor) problem:\nWhen I \"Find in Page\" in anon content, and click \"Previous\" until\nit reaches the top, I then get for each click:\n###!!! ASSERTION: Null current node in an iterator that's not done!: 'mCurNode',\nfile content/base/src/nsContentIterator.cpp, line 1069\n\nCould you look into that and see how serious it looks?\n\nAlso, the arguments to ComparePoints() needs indentation.", "is_private": false, "creation_time": "2013-04-15T02:31:23Z", "text": "(In reply to Alexander LAW from comment #27)\n> Top comment for the method says:\n> // If neither are true, the node is contained inside of the range.\n\nYeah, I think the comment at the top of nsRange::CompareNodeToRange\nis correct.  The later comments are quite confusing since what the\nrespective ComparePoints() calls do is actually the opposite of what\nthe comment say.  Perhaps the comment is just trying to convey\nwhich part of the condition in the top comment is tested?\n\nAnyway, I agree they are confusing and not very helpful so we should\njust remove them.\n\n> It seems that there are no other issues.\n\nI believe that's more a sign of our extremely poor test coverage of\nanything involving anonymous content. ;-)\n\nOne remaining (minor) problem:\nWhen I \"Find in Page\" in anon content, and click \"Previous\" until\nit reaches the top, I then get for each click:\n###!!! ASSERTION: Null current node in an iterator that's not done!: 'mCurNode',\nfile content/base/src/nsContentIterator.cpp, line 1069\n\nCould you look into that and see how serious it looks?\n\nAlso, the arguments to ComparePoints() needs indentation.", "count": 29, "tags": [], "time": "2013-04-15T02:31:23Z", "creator": "MatsPalmgren_bugz@use.startmail.com", "bug_id": 655947}, {"author": "MatsPalmgren_bugz@use.startmail.com", "id": 7313619, "raw_text": "I don't think these changes are particularly \"correct\" but then again\nneither is the original code for anonymous content, so I guess I can\nlive with this if it seems to work...\n\nOlli, do you still think the patch looks OK with the additional\nchange in nsRange::CompareNodeToRange ?", "creation_time": "2013-04-15T02:38:37Z", "text": "Comment on attachment 729523\nModified patch\n\nI don't think these changes are particularly \"correct\" but then again\nneither is the original code for anonymous content, so I guess I can\nlive with this if it seems to work...\n\nOlli, do you still think the patch looks OK with the additional\nchange in nsRange::CompareNodeToRange ?", "count": 30, "tags": [], "creator": "MatsPalmgren_bugz@use.startmail.com", "bug_id": 655947, "attachment_id": 729523, "is_private": false, "time": "2013-04-15T02:38:37Z"}, {"attachment_id": 729523, "author": "MatsPalmgren_bugz@use.startmail.com", "creator": "MatsPalmgren_bugz@use.startmail.com", "count": 31, "time": "2013-04-15T02:39:35Z", "tags": [], "bug_id": 655947, "is_private": false, "creation_time": "2013-04-15T02:39:35Z", "text": "Comment on attachment 729523\nModified patch\n\nEhsan, does Editor have any dependencies on nsRange::CompareNodeToRange\nor nsContentUtils::ComparePoints for anonymous content that you know of?", "id": 7313620, "raw_text": "Ehsan, does Editor have any dependencies on nsRange::CompareNodeToRange\nor nsContentUtils::ComparePoints for anonymous content that you know of?"}, {"attachment_id": null, "author": "ehsan.akhgari@gmail.com", "is_private": false, "creation_time": "2013-04-15T14:47:42Z", "text": "(In reply to Mats Palmgren [:mats] from comment #31)\n> Comment on attachment 729523\n> Modified patch\n> \n> Ehsan, does Editor have any dependencies on nsRange::CompareNodeToRange\n> or nsContentUtils::ComparePoints for anonymous content that you know of?\n\nNot that I know of.  In the editor land, all point comparisons should either be between two points in the same anonymous subtree (for input/textarea) or between two points in the non-anonymous tree (for the html editor).  We have had bugs where the HTML editor would get confused and start looking into the anonymous subtree of an element, but most of those should have been fixed (bug 805668 is the only open one that I know of.)", "id": 7315314, "raw_text": "(In reply to Mats Palmgren [:mats] from comment #31)\n> Comment on attachment 729523\n> Modified patch\n> \n> Ehsan, does Editor have any dependencies on nsRange::CompareNodeToRange\n> or nsContentUtils::ComparePoints for anonymous content that you know of?\n\nNot that I know of.  In the editor land, all point comparisons should either be between two points in the same anonymous subtree (for input/textarea) or between two points in the non-anonymous tree (for the html editor).  We have had bugs where the HTML editor would get confused and start looking into the anonymous subtree of an element, but most of those should have been fixed (bug 805668 is the only open one that I know of.)", "creator": "ehsan.akhgari@gmail.com", "count": 32, "tags": [], "time": "2013-04-15T14:47:42Z", "bug_id": 655947}, {"author": "ehsan.akhgari@gmail.com", "bug_id": 655947, "creator": "ehsan.akhgari@gmail.com", "count": 33, "tags": [], "raw_text": "Review of attachment 729523:\n-----------------------------------------------------------------\n\nSorry, missed the feedback? (but please do not consider this an r+!)", "id": 7320956, "text": "Comment on attachment 729523\nModified patch\n\nReview of attachment 729523:\n-----------------------------------------------------------------\n\nSorry, missed the feedback? (but please do not consider this an r+!)", "creation_time": "2013-04-16T16:07:10Z", "attachment_id": 729523, "time": "2013-04-16T16:07:10Z", "is_private": false}, {"tags": [], "creator": "exclusion@gmail.com", "count": 34, "bug_id": 655947, "id": 7321238, "raw_text": "Ambiguous comments removed, indentation fixed.", "creation_time": "2013-04-16T16:51:05Z", "text": "Created attachment 738059\nCorrected patch\n\nAmbiguous comments removed, indentation fixed.", "author": "exclusion@gmail.com", "time": "2013-04-16T16:51:05Z", "is_private": false, "attachment_id": 738059}, {"attachment_id": null, "author": "exclusion@gmail.com", "time": "2013-04-16T19:59:53Z", "count": 35, "creator": "exclusion@gmail.com", "tags": [], "bug_id": 655947, "creation_time": "2013-04-16T19:59:53Z", "is_private": false, "text": "(In reply to Mats Palmgren [:mats] from comment #29)\n> One remaining (minor) problem:\n> When I \"Find in Page\" in anon content, and click \"Previous\" until\n> it reaches the top, I then get for each click:\n> ###!!! ASSERTION: Null current node in an iterator that's not done!:\n> 'mCurNode',\n> file content/base/src/nsContentIterator.cpp, line 1069\n> \n> Could you look into that and see how serious it looks?\nIt looks like the problem is not related to the bug fix. It's just consequence of working find previous.\nThe root of the problem is in the nsContentIterator::GetPrevSibling. Here for XML content we have:\nxml root is the parent of xml:div (defined at content/xml/document/resources/XMLPrettyPrint.xml), but xml:div is not a child of the xml root.\nSo (nsIContent* sib = parent->GetChildAt(indx)) == null and (indx = parent->IndexOf(aNode)) == -1.\nI think it should be considered as another bug.", "id": 7322190, "raw_text": "(In reply to Mats Palmgren [:mats] from comment #29)\n> One remaining (minor) problem:\n> When I \"Find in Page\" in anon content, and click \"Previous\" until\n> it reaches the top, I then get for each click:\n> ###!!! ASSERTION: Null current node in an iterator that's not done!:\n> 'mCurNode',\n> file content/base/src/nsContentIterator.cpp, line 1069\n> \n> Could you look into that and see how serious it looks?\nIt looks like the problem is not related to the bug fix. It's just consequence of working find previous.\nThe root of the problem is in the nsContentIterator::GetPrevSibling. Here for XML content we have:\nxml root is the parent of xml:div (defined at content/xml/document/resources/XMLPrettyPrint.xml), but xml:div is not a child of the xml root.\nSo (nsIContent* sib = parent->GetChildAt(indx)) == null and (indx = parent->IndexOf(aNode)) == -1.\nI think it should be considered as another bug."}, {"is_private": false, "time": "2014-06-23T17:47:11Z", "attachment_id": 738059, "text": "Comment on attachment 738059\nCorrected patch\n\nReview of attachment 738059:\n-----------------------------------------------------------------\n\nI already provided feedback on this patch.  Over to smaug for review, assuming this is ready for review.", "creation_time": "2014-06-23T17:47:11Z", "raw_text": "Review of attachment 738059:\n-----------------------------------------------------------------\n\nI already provided feedback on this patch.  Over to smaug for review, assuming this is ready for review.", "id": 8965865, "bug_id": 655947, "tags": [], "count": 36, "creator": "ehsan.akhgari@gmail.com", "author": "ehsan.akhgari@gmail.com"}, {"bug_id": 655947, "tags": [], "count": 37, "creator": "bugs@pettay.fi", "time": "2014-06-23T18:57:34Z", "raw_text": "The nsRange code sure needs some comments", "id": 8966311, "text": "Comment on attachment 738059\nCorrected patch\n\nThe nsRange code sure needs some comments", "is_private": false, "creation_time": "2014-06-23T18:57:34Z", "author": "bugs@pettay.fi", "attachment_id": 738059}, {"author": "exclusion@gmail.com", "attachment_id": 8444956, "bug_id": 655947, "time": "2014-06-24T05:34:14Z", "count": 38, "creator": "exclusion@gmail.com", "tags": [], "text": "Created attachment 8444956\nCorrected patch with comments", "creation_time": "2014-06-24T05:34:14Z", "is_private": false, "raw_text": "", "id": 8968636}, {"attachment_id": 8444956, "is_private": false, "time": "2014-06-26T22:02:17Z", "author": "bugs@pettay.fi", "text": "Comment on attachment 8444956\nCorrected patch with comments\n\nI wonder... should we add another param to nsContentUtils::ComparePoints.\nSince if setting aDisconnected doesn't really work, we need something \nto fix at least nsRange::ComparePoint and nsRange::CompareBoundaryPoints.\n\nDo we have other interesting nsContentUtils::ComparePoints callers?\nNeed to go through all of them.", "creation_time": "2014-06-26T22:02:17Z", "raw_text": "I wonder... should we add another param to nsContentUtils::ComparePoints.\nSince if setting aDisconnected doesn't really work, we need something \nto fix at least nsRange::ComparePoint and nsRange::CompareBoundaryPoints.\n\nDo we have other interesting nsContentUtils::ComparePoints callers?\nNeed to go through all of them.", "id": 8983996, "bug_id": 655947, "tags": [], "count": 39, "creator": "bugs@pettay.fi"}]}}, "comments": {}}