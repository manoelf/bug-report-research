{"comments": {}, "bugs": {"655192": {"comments": [{"is_private": false, "attachment_id": null, "creator": "jwalden@mit.edu", "tags": [], "raw_text": "We use js_InitClass to initialize almost every standard class, which confines us to exactly that function's behavior.  The standard classes have too much complexity and uniqueness to fit its confines, at least not without seriously distorting them:\n\n* Some classes (Math) have only \"constructors\", and for those we pass NULL as the constructor.  This short-circuits constructor creation and headfakes the tail of js_InitClass into not assuming it has a constructor.\n* RangeError, etc. inherit from Error.prototype, not Object.prototype, so we copied almost all of js_InitClass into a second method, then made both js_InitClass and js_InitExceptionClasses call that method.\n* RangeError, etc. need special handling to add the handful of data properties on the Error prototypes because js_InitClass can't add actual data properties.\n* QName.prototype and Namespace.prototype are actual XML objects and not regular old objects, so we added JSCLASS_CONSTRUCT_PROTOTYPE to create a regular old object, then create the XML constructor, then *call the constructor* to create the real prototype object.\n* We decided StopIteration should be frozen, so we added JSCLASS_FREEZE_PROTO and JSCLASS_FREEZE_CTOR (but J_C_C is never used!) to freeze as quickly after initialization as possible.\n* Object and Function have to be created before anything else.  There's an opaque recursive dance between js_InitObjectClass and js_InitFunctionClass to create Object.prototype, Object, Function.prototype, and Function in just the right sequence that we get everything set up.  I have no idea how it bottoms out without error, with these self-consistent.\n* We want to brand all these built-ins that have function properties, we brand the created prototype (if it had methods) and the created method (if it had methods).  But we have to be careful of the first hack (for prototype-less classes) and check that ctor != proto before maybe branding the ctor!\n* Because of js_InitClass's constrictions Array.prototype is created as a dense array, then on first property definition to a slow array, rather than being slow from the start. (bug 592296)\n* js_InitClass has special munging to have Function to have Function.prototype as its prototype.  (How does creating Function work, if we don't have Function.prototype yet?  I think but am not certain that it picks up an *older* Function.prototype -- because we init the Function class multiple times during this bootstrapping -- and then gets later overwritten with the actual, used Function.prototype before the whole thing returns.)\n* All the built-in stuff should be safe against deletion and enumeration re-resolving the builtins (it's not, but I digress), so the built-ins all save their constructor *twice* in the global object and the prototype once in the global object.  (This is so []/{} get the original array/object prototypes.)  Public JSClass flags expose this mechanism, but no external user should ever use them.\n\nI hope I have demonstrated that this is a house of cards.\n\nThe built-in classes should implement their own bootstrapping.  They shouldn't use js_InitClass/JS_InitClass, nor should they use publicly-exposed JSClass flags for tricky special-case behavior.  It's only 50-75 lines of code and comments for most classes that js_InitClass handled.  External code can still use JS_InitClass if it wants; they're straightforward.  (Although we should remove most of these gazillion special cases once the standard stuff is specialized -- followups.)\n\nWith these changes GlobalObject::getArrayPrototype and such become feasible.  I also think it'll soon be possible to remove storage for the original values of the built-in constructors.  Right now there's an incredible mess of code which does access them, but I think it comes to nothing if you squint hard enough.  We have js::FindProto, js::FindClassObject, js_GetClassObject, js_GetClassPrototype, and I think a couple other methods that all do kind-of-almost-not-quite the same thing, and with their names all being sort of similar it's an undistinguishable mess, impossible to comprehend all at once.  We can also stop shoehorning things like JSON and Math into this system with a little care.  And an eventual holy grail: give global objects their standard classes and everything right from the start, no worries about is-this-inited, getArrayPrototype and such would be infallible after bootstrapping.\n\nBut one step at a time: initialize the standard classes specially.  Monster patch series to follow, more or less one patch per standard class de-generification.  I suggest that the same person review all of these, because there's a certain ramp-up cost to understanding the first inlining of js_InitClass for one class, then you can build upon that for most of the rest of the classes.  The final patch is trickiest and was not amenable to rewriting by inlining (due to the js_GetClassPrototype snarl and multiple-initialization), so it needs particular care in review.\n\nThe whole series passes try on linux64 debug.  I'll also post a bunde once everything's uploaded, as there are a couple patches underneath this series in my queue.", "creation_time": "2011-05-06T02:14:05Z", "bug_id": 655192, "id": 5452669, "author": "jwalden@mit.edu", "time": "2011-05-06T02:14:05Z", "text": "We use js_InitClass to initialize almost every standard class, which confines us to exactly that function's behavior.  The standard classes have too much complexity and uniqueness to fit its confines, at least not without seriously distorting them:\n\n* Some classes (Math) have only \"constructors\", and for those we pass NULL as the constructor.  This short-circuits constructor creation and headfakes the tail of js_InitClass into not assuming it has a constructor.\n* RangeError, etc. inherit from Error.prototype, not Object.prototype, so we copied almost all of js_InitClass into a second method, then made both js_InitClass and js_InitExceptionClasses call that method.\n* RangeError, etc. need special handling to add the handful of data properties on the Error prototypes because js_InitClass can't add actual data properties.\n* QName.prototype and Namespace.prototype are actual XML objects and not regular old objects, so we added JSCLASS_CONSTRUCT_PROTOTYPE to create a regular old object, then create the XML constructor, then *call the constructor* to create the real prototype object.\n* We decided StopIteration should be frozen, so we added JSCLASS_FREEZE_PROTO and JSCLASS_FREEZE_CTOR (but J_C_C is never used!) to freeze as quickly after initialization as possible.\n* Object and Function have to be created before anything else.  There's an opaque recursive dance between js_InitObjectClass and js_InitFunctionClass to create Object.prototype, Object, Function.prototype, and Function in just the right sequence that we get everything set up.  I have no idea how it bottoms out without error, with these self-consistent.\n* We want to brand all these built-ins that have function properties, we brand the created prototype (if it had methods) and the created method (if it had methods).  But we have to be careful of the first hack (for prototype-less classes) and check that ctor != proto before maybe branding the ctor!\n* Because of js_InitClass's constrictions Array.prototype is created as a dense array, then on first property definition to a slow array, rather than being slow from the start. (bug 592296)\n* js_InitClass has special munging to have Function to have Function.prototype as its prototype.  (How does creating Function work, if we don't have Function.prototype yet?  I think but am not certain that it picks up an *older* Function.prototype -- because we init the Function class multiple times during this bootstrapping -- and then gets later overwritten with the actual, used Function.prototype before the whole thing returns.)\n* All the built-in stuff should be safe against deletion and enumeration re-resolving the builtins (it's not, but I digress), so the built-ins all save their constructor *twice* in the global object and the prototype once in the global object.  (This is so []/{} get the original array/object prototypes.)  Public JSClass flags expose this mechanism, but no external user should ever use them.\n\nI hope I have demonstrated that this is a house of cards.\n\nThe built-in classes should implement their own bootstrapping.  They shouldn't use js_InitClass/JS_InitClass, nor should they use publicly-exposed JSClass flags for tricky special-case behavior.  It's only 50-75 lines of code and comments for most classes that js_InitClass handled.  External code can still use JS_InitClass if it wants; they're straightforward.  (Although we should remove most of these gazillion special cases once the standard stuff is specialized -- followups.)\n\nWith these changes GlobalObject::getArrayPrototype and such become feasible.  I also think it'll soon be possible to remove storage for the original values of the built-in constructors.  Right now there's an incredible mess of code which does access them, but I think it comes to nothing if you squint hard enough.  We have js::FindProto, js::FindClassObject, js_GetClassObject, js_GetClassPrototype, and I think a couple other methods that all do kind-of-almost-not-quite the same thing, and with their names all being sort of similar it's an undistinguishable mess, impossible to comprehend all at once.  We can also stop shoehorning things like JSON and Math into this system with a little care.  And an eventual holy grail: give global objects their standard classes and everything right from the start, no worries about is-this-inited, getArrayPrototype and such would be infallible after bootstrapping.\n\nBut one step at a time: initialize the standard classes specially.  Monster patch series to follow, more or less one patch per standard class de-generification.  I suggest that the same person review all of these, because there's a certain ramp-up cost to understanding the first inlining of js_InitClass for one class, then you can build upon that for most of the rest of the classes.  The final patch is trickiest and was not amenable to rewriting by inlining (due to the js_GetClassPrototype snarl and multiple-initialization), so it needs particular care in review.\n\nThe whole series passes try on linux64 debug.  I'll also post a bunde once everything's uploaded, as there are a couple patches underneath this series in my queue.", "count": 0}, {"id": 5452670, "author": "jwalden@mit.edu", "time": "2011-05-06T02:15:00Z", "count": 1, "text": "Created attachment 530492\nInitialize Boolean specially", "is_private": false, "attachment_id": 530492, "creator": "jwalden@mit.edu", "tags": [], "raw_text": "", "bug_id": 655192, "creation_time": "2011-05-06T02:15:00Z"}, {"id": 5452671, "time": "2011-05-06T02:15:51Z", "tags": [], "raw_text": "", "bug_id": 655192, "creation_time": "2011-05-06T02:15:51Z", "is_private": false, "text": "Created attachment 530493\nInitialize Number specially", "count": 2, "author": "jwalden@mit.edu", "creator": "jwalden@mit.edu", "attachment_id": 530493}, {"time": "2011-05-06T02:16:30Z", "id": 5452672, "is_private": false, "raw_text": "", "creation_time": "2011-05-06T02:16:30Z", "bug_id": 655192, "tags": [], "author": "jwalden@mit.edu", "count": 3, "text": "Created attachment 530494\nInitialize Date specially", "attachment_id": 530494, "creator": "jwalden@mit.edu"}, {"is_private": false, "bug_id": 655192, "creation_time": "2011-05-06T02:17:19Z", "raw_text": "", "tags": [], "time": "2011-05-06T02:17:19Z", "id": 5452675, "attachment_id": 530495, "creator": "jwalden@mit.edu", "author": "jwalden@mit.edu", "count": 4, "text": "Created attachment 530495\nInitialize Iterator specially"}, {"creator": "jwalden@mit.edu", "attachment_id": 530497, "text": "Created attachment 530497\nInitialize Generator specially", "count": 5, "author": "jwalden@mit.edu", "raw_text": "", "creation_time": "2011-05-06T02:17:59Z", "bug_id": 655192, "tags": [], "is_private": false, "time": "2011-05-06T02:17:59Z", "id": 5452677}, {"id": 5452679, "author": "jwalden@mit.edu", "time": "2011-05-06T02:18:30Z", "text": "Created attachment 530498\nInitialize StopIteration specially", "count": 6, "is_private": false, "attachment_id": 530498, "creator": "jwalden@mit.edu", "tags": [], "raw_text": "", "creation_time": "2011-05-06T02:18:30Z", "bug_id": 655192}, {"id": 5452681, "time": "2011-05-06T02:19:38Z", "is_private": false, "tags": [], "creation_time": "2011-05-06T02:19:38Z", "bug_id": 655192, "raw_text": "One step at a time seemed more prudent than making a method *and* rewriting it all at once.", "author": "jwalden@mit.edu", "count": 7, "text": "Created attachment 530499\nUse a templatized method, not a method to initialize typed array classes\n\nOne step at a time seemed more prudent than making a method *and* rewriting it all at once.", "attachment_id": 530499, "creator": "jwalden@mit.edu"}, {"is_private": false, "tags": [], "bug_id": 655192, "creation_time": "2011-05-06T02:20:46Z", "raw_text": "All the typed array classes need it, and an atomstate atom is cheap.", "id": 5452683, "time": "2011-05-06T02:20:46Z", "attachment_id": 530500, "creator": "jwalden@mit.edu", "author": "jwalden@mit.edu", "count": 8, "text": "Created attachment 530500\nAdd an atom for \"BYTES_PER_ELEMENT\"\n\nAll the typed array classes need it, and an atomstate atom is cheap."}, {"attachment_id": 530501, "creator": "jwalden@mit.edu", "author": "jwalden@mit.edu", "text": "Created attachment 530501\nInitialize the typed array classes specially", "count": 9, "is_private": false, "tags": [], "bug_id": 655192, "creation_time": "2011-05-06T02:21:18Z", "raw_text": "", "id": 5452684, "time": "2011-05-06T02:21:18Z"}, {"is_private": false, "attachment_id": 530502, "creator": "jwalden@mit.edu", "tags": [], "raw_text": "", "bug_id": 655192, "creation_time": "2011-05-06T02:22:08Z", "id": 5452685, "author": "jwalden@mit.edu", "time": "2011-05-06T02:22:08Z", "count": 10, "text": "Created attachment 530502\nInitialize ArrayBuffer specially"}, {"author": "jwalden@mit.edu", "time": "2011-05-06T02:23:04Z", "id": 5452686, "count": 11, "text": "Created attachment 530503\nInitialize WeakMap specially", "is_private": false, "attachment_id": 530503, "raw_text": "", "bug_id": 655192, "creation_time": "2011-05-06T02:23:04Z", "creator": "jwalden@mit.edu", "tags": []}, {"tags": [], "bug_id": 655192, "creation_time": "2011-05-06T02:24:07Z", "raw_text": "", "is_private": false, "id": 5452687, "time": "2011-05-06T02:24:07Z", "creator": "jwalden@mit.edu", "attachment_id": 530504, "text": "Created attachment 530504\nClean up some comments in jstracer that refer to non-existent uses of js_InitClass", "count": 12, "author": "jwalden@mit.edu"}, {"text": "Created attachment 530505\nInitialize Namespace specially", "count": 13, "author": "jwalden@mit.edu", "creator": "jwalden@mit.edu", "attachment_id": 530505, "id": 5452688, "time": "2011-05-06T02:24:35Z", "tags": [], "raw_text": "", "creation_time": "2011-05-06T02:24:35Z", "bug_id": 655192, "is_private": false}, {"count": 14, "text": "Created attachment 530506\nInitialize QName specially", "author": "jwalden@mit.edu", "creator": "jwalden@mit.edu", "attachment_id": 530506, "time": "2011-05-06T02:24:57Z", "id": 5452689, "raw_text": "", "creation_time": "2011-05-06T02:24:57Z", "bug_id": 655192, "tags": [], "is_private": false}, {"count": 15, "text": "Created attachment 530507\nMove some variable declarations in js_InitXMLClass closer to first uses\n\nMore minor changes kept separate just because it might help.", "author": "jwalden@mit.edu", "creator": "jwalden@mit.edu", "attachment_id": 530507, "id": 5452691, "time": "2011-05-06T02:25:48Z", "tags": [], "creation_time": "2011-05-06T02:25:48Z", "bug_id": 655192, "raw_text": "More minor changes kept separate just because it might help.", "is_private": false}, {"attachment_id": 530508, "creator": "jwalden@mit.edu", "author": "jwalden@mit.edu", "count": 16, "text": "Created attachment 530508\nInitialize XML and XMLList specially", "is_private": false, "tags": [], "raw_text": "", "bug_id": 655192, "creation_time": "2011-05-06T02:26:15Z", "id": 5452694, "time": "2011-05-06T02:26:15Z"}, {"author": "jwalden@mit.edu", "time": "2011-05-06T02:27:04Z", "id": 5452697, "count": 17, "text": "Created attachment 530510\nMake a comment in JSObject::makeDenseArraySlow not refer to js_InitClass, because that issue's gone now", "attachment_id": 530510, "is_private": false, "raw_text": "", "bug_id": 655192, "creation_time": "2011-05-06T02:27:04Z", "creator": "jwalden@mit.edu", "tags": []}, {"attachment_id": 530511, "creator": "jwalden@mit.edu", "author": "jwalden@mit.edu", "text": "Created attachment 530511\nInitialize Error specially", "count": 18, "is_private": false, "raw_text": "", "creation_time": "2011-05-06T02:27:58Z", "bug_id": 655192, "tags": [], "time": "2011-05-06T02:27:58Z", "id": 5452698}, {"tags": [], "raw_text": "", "bug_id": 655192, "creation_time": "2011-05-06T02:28:48Z", "is_private": false, "id": 5452699, "time": "2011-05-06T02:28:48Z", "creator": "jwalden@mit.edu", "attachment_id": 530512, "text": "Created attachment 530512\nInitialize RangeError, etc. from a distinct function that initializes each", "count": 19, "author": "jwalden@mit.edu"}, {"time": "2011-05-06T02:29:16Z", "id": 5452700, "bug_id": 655192, "creation_time": "2011-05-06T02:29:16Z", "raw_text": "", "tags": [], "is_private": false, "count": 20, "text": "Created attachment 530513\nInitialize RangeError, etc. specially", "author": "jwalden@mit.edu", "creator": "jwalden@mit.edu", "attachment_id": 530513}, {"count": 21, "text": "Created attachment 530514\nMove js_InitObject into jsfun.cpp\n\n...the idea being js_InitObject, js_InitFunction, and js_InitFAOClasses can all be next to each other to streamline unification.", "author": "jwalden@mit.edu", "creator": "jwalden@mit.edu", "attachment_id": 530514, "id": 5452701, "time": "2011-05-06T02:30:33Z", "tags": [], "raw_text": "...the idea being js_InitObject, js_InitFunction, and js_InitFAOClasses can all be next to each other to streamline unification.", "creation_time": "2011-05-06T02:30:33Z", "bug_id": 655192, "is_private": false}, {"attachment_id": 530515, "creator": "jwalden@mit.edu", "author": "jwalden@mit.edu", "text": "Created attachment 530515\nMove js_InitFunctionAndObjectClasses into jsfun.cpp\n\n...same reason.", "count": 22, "is_private": false, "bug_id": 655192, "creation_time": "2011-05-06T02:31:11Z", "raw_text": "...same reason.", "tags": [], "time": "2011-05-06T02:31:11Z", "id": 5452702}, {"text": "Created attachment 530516\nUpdate a comment claiming builtin .prototype properties' attributes are due to js_InitClass", "count": 23, "author": "jwalden@mit.edu", "time": "2011-05-06T02:32:07Z", "id": 5452703, "raw_text": "", "creation_time": "2011-05-06T02:32:07Z", "bug_id": 655192, "creator": "jwalden@mit.edu", "tags": [], "is_private": false, "attachment_id": 530516}, {"attachment_id": 530518, "creator": "jwalden@mit.edu", "author": "jwalden@mit.edu", "count": 24, "text": "Created attachment 530518\nUpdate initSharingEmptyShape's comment to be more precise, and to not refer to js_InitClass (which built-in classes don't use)", "is_private": false, "tags": [], "bug_id": 655192, "creation_time": "2011-05-06T02:33:02Z", "raw_text": "", "id": 5452706, "time": "2011-05-06T02:33:02Z"}, {"is_private": false, "tags": [], "raw_text": "...and here's where it's all headed.  (At least as far as this bug's concerned.)", "creation_time": "2011-05-06T02:34:02Z", "bug_id": 655192, "id": 5452709, "time": "2011-05-06T02:34:02Z", "attachment_id": 530519, "creator": "jwalden@mit.edu", "author": "jwalden@mit.edu", "text": "Created attachment 530519\nRewrite js_InitFunctionAndObjectClasses to not recur horribly and inscrutably\n\n...and here's where it's all headed.  (At least as far as this bug's concerned.)", "count": 25}, {"id": 5452711, "time": "2011-05-06T02:36:40Z", "tags": [], "bug_id": 655192, "creation_time": "2011-05-06T02:36:40Z", "raw_text": "", "is_private": false, "count": 26, "text": "Created attachment 530520\nBundle of all changes, ready for application/building/etc.", "author": "jwalden@mit.edu", "creator": "jwalden@mit.edu", "attachment_id": 530520}, {"is_private": false, "tags": [], "raw_text": "Impressive", "bug_id": 655192, "creation_time": "2011-05-07T01:45:33Z", "id": 5454881, "time": "2011-05-07T01:45:33Z", "attachment_id": null, "creator": "mail@lukewagner.name", "author": "mail@lukewagner.name", "text": "Impressive", "count": 27}, {"is_private": false, "attachment_id": 530498, "creator": "Ms2ger@gmail.com", "tags": [], "raw_text": ">diff --git a/js/src/jsiter.cpp b/js/src/jsiter.cpp\n>--- a/js/src/jsiter.cpp\n>+++ b/js/src/jsiter.cpp\n>@@ -1557,11 +1557,43 @@ InitGeneratorClass(JSContext *cx, Global\n\n> static JSObject *\n> InitStopIterationClass(JSContext *cx, GlobalObject *global)\n\n>+        return false;\n\nNuh-uh", "bug_id": 655192, "creation_time": "2011-05-10T17:19:38Z", "id": 5459957, "author": "Ms2ger@gmail.com", "time": "2011-05-10T17:19:38Z", "text": "Comment on attachment 530498\nInitialize StopIteration specially\n\n>diff --git a/js/src/jsiter.cpp b/js/src/jsiter.cpp\n>--- a/js/src/jsiter.cpp\n>+++ b/js/src/jsiter.cpp\n>@@ -1557,11 +1557,43 @@ InitGeneratorClass(JSContext *cx, Global\n\n> static JSObject *\n> InitStopIterationClass(JSContext *cx, GlobalObject *global)\n\n>+        return false;\n\nNuh-uh", "count": 28}, {"tags": [], "creator": "jwalden@mit.edu", "bug_id": 655192, "creation_time": "2011-05-11T05:55:45Z", "raw_text": "One other thought that's occurred to me is that I should write an MDC article about how to add a new standard class after this change.  I expect that'll help with regularizing the code for all of these, and it'll help if and when new standard classes get added in the future, as far as not having me be the bottleneck on the exact setup process or anything like that.", "attachment_id": null, "is_private": false, "text": "One other thought that's occurred to me is that I should write an MDC article about how to add a new standard class after this change.  I expect that'll help with regularizing the code for all of these, and it'll help if and when new standard classes get added in the future, as far as not having me be the bottleneck on the exact setup process or anything like that.", "count": 29, "id": 5461889, "time": "2011-05-11T05:55:45Z", "author": "jwalden@mit.edu"}, {"creator": "brendan@mozilla.org", "attachment_id": null, "text": "I think this is the wrong approach. There is already copy-paste programming going on, copying from js_InitClass to js_InitStringClass and js_InitRegExpClass, and not in trivial degree or kind (search for \"The risk is particularly great\"). We do not need more; we should have less.\n\nI understand sometimes it helps to inline-expand by hand, specialize, and then re-synthesize for minimal, almost-DRY code. I've seen njn do that particularly well. It's also true that parts of SpiderMonkey were commoned prematurely or over-aggressively, and all old code is suspect. There certainly are places to refactor, re-layer, and remove layers, e.g., to avoid useless tests on common paths.\n\nBut that's not what is happening here, as far as I can tell. \"Bootstrapping is special\" is not a meaningful mantra and it does not justify so much duplication or so big a patch. And this bug should not hold up shorter term fixes (ES5 bugs such as bug 637994.\n\nMeanwhile, bug 593462 is waiting to be fixed, without needing code duplication at all, and with the win of removing lazy standard class initialization, by making JS_NewGlobalObject blindingly fast: memcpy plus pointer-fixup based on exemplars in a root compartment. Who will take that bug?\n\n/be", "count": 30, "author": "brendan@mozilla.org", "tags": [], "creation_time": "2011-06-10T22:42:53Z", "bug_id": 655192, "raw_text": "I think this is the wrong approach. There is already copy-paste programming going on, copying from js_InitClass to js_InitStringClass and js_InitRegExpClass, and not in trivial degree or kind (search for \"The risk is particularly great\"). We do not need more; we should have less.\n\nI understand sometimes it helps to inline-expand by hand, specialize, and then re-synthesize for minimal, almost-DRY code. I've seen njn do that particularly well. It's also true that parts of SpiderMonkey were commoned prematurely or over-aggressively, and all old code is suspect. There certainly are places to refactor, re-layer, and remove layers, e.g., to avoid useless tests on common paths.\n\nBut that's not what is happening here, as far as I can tell. \"Bootstrapping is special\" is not a meaningful mantra and it does not justify so much duplication or so big a patch. And this bug should not hold up shorter term fixes (ES5 bugs such as bug 637994.\n\nMeanwhile, bug 593462 is waiting to be fixed, without needing code duplication at all, and with the win of removing lazy standard class initialization, by making JS_NewGlobalObject blindingly fast: memcpy plus pointer-fixup based on exemplars in a root compartment. Who will take that bug?\n\n/be", "is_private": false, "id": 5526097, "time": "2011-06-10T22:42:53Z"}, {"creator": "mail@lukewagner.name", "attachment_id": null, "text": "From a quick scan, there certainly is an incredible degree of duplication.  But also there is an incredible number of special cases enumerated in comment 0 that I think its valuable to have explicated.  Can we have both?  I think so.  The metaphor that is forcing itself into my head is this:\n\nIts a difficult thing to convert directly from one compressed audio format to another, so what we do is, say, go aac -> wav and then do wav -> mp3.  I think this patch queue is like aac -> wav: it makes plain all the special cases and how they tie to the related language semantics, which is good but, just like a wav, its kinda large.  I think, to land this, we would want to do the next step, wav -> mp3 and try to factor out commonality.  This is what I think Brendan is getting at in comment 32 para 2.\n\nMore plainly, I would try to iteratively factor out commonality between all these js_Init* functions in a way that preserves the explication of special cases by making different helpers or parameterizing them explicitly.\n\nI'm still saying this without intimate knowledge of the js_InitClass and argument-by-metaphor is fraud, but thats my 2 cents.", "count": 31, "author": "mail@lukewagner.name", "raw_text": "From a quick scan, there certainly is an incredible degree of duplication.  But also there is an incredible number of special cases enumerated in comment 0 that I think its valuable to have explicated.  Can we have both?  I think so.  The metaphor that is forcing itself into my head is this:\n\nIts a difficult thing to convert directly from one compressed audio format to another, so what we do is, say, go aac -> wav and then do wav -> mp3.  I think this patch queue is like aac -> wav: it makes plain all the special cases and how they tie to the related language semantics, which is good but, just like a wav, its kinda large.  I think, to land this, we would want to do the next step, wav -> mp3 and try to factor out commonality.  This is what I think Brendan is getting at in comment 32 para 2.\n\nMore plainly, I would try to iteratively factor out commonality between all these js_Init* functions in a way that preserves the explication of special cases by making different helpers or parameterizing them explicitly.\n\nI'm still saying this without intimate knowledge of the js_InitClass and argument-by-metaphor is fraud, but thats my 2 cents.", "creation_time": "2011-06-10T23:17:10Z", "bug_id": 655192, "tags": [], "is_private": false, "time": "2011-06-10T23:17:10Z", "id": 5526173}, {"attachment_id": null, "is_private": false, "raw_text": "$ grep -B 15 -A 15 \"The risk is particularly great\" *.cpp\njsobj.cpp-        goto bad;\njsobj.cpp-    }\njsobj.cpp-\njsobj.cpp-    /*\njsobj.cpp-     * Pre-brand the prototype and constructor if they have built-in methods.\njsobj.cpp-     * This avoids extra shape guard branch exits in the tracejitted code.\njsobj.cpp-     */\njsobj.cpp-    if (fs)\njsobj.cpp-        proto->brand(cx);\njsobj.cpp-    if (ctor != proto && static_fs)\njsobj.cpp-        ctor->brand(cx);\njsobj.cpp-\njsobj.cpp-    /*\njsobj.cpp-     * Make sure proto's emptyShape is available to be shared by objects of\njsobj.cpp-     * this class.  JSObject::emptyShape is a one-slot cache. If we omit this,\njsobj.cpp:     * some other class could snap it up. (The risk is particularly great for\njsobj.cpp-     * Object.prototype.)\njsobj.cpp-     *\njsobj.cpp-     * All callers of JSObject::initSharingEmptyShape depend on this.\njsobj.cpp-     *\njsobj.cpp-     * FIXME: bug 592296 -- js_InitArrayClass should pass &js_SlowArrayClass\njsobj.cpp-     * and make the Array.prototype slow from the start.\njsobj.cpp-     */\njsobj.cpp-    JS_ASSERT_IF(proto->clasp != clasp,\njsobj.cpp-                 clasp == &js_ArrayClass && proto->clasp == &js_SlowArrayClass);\njsobj.cpp-    if (!proto->getEmptyShape(cx, proto->clasp, FINALIZE_OBJECT0))\njsobj.cpp-        goto bad;\njsobj.cpp-\njsobj.cpp-    if (clasp->flags & (JSCLASS_FREEZE_PROTO|JSCLASS_FREEZE_CTOR)) {\njsobj.cpp-        JS_ASSERT_IF(ctor == proto, !(clasp->flags & JSCLASS_FREEZE_CTOR));\njsobj.cpp-        if (proto && (clasp->flags & JSCLASS_FREEZE_PROTO) && !proto->freeze(cx))\n--\njsregexp.cpp-\njsregexp.cpp-    /* Add static properties to the RegExp constructor. */\njsregexp.cpp-    if (!JS_DefineProperties(cx, ctor, regexp_static_props) ||\njsregexp.cpp-        !JS_AliasProperty(cx, ctor, \"input\",        \"$_\") ||\njsregexp.cpp-        !JS_AliasProperty(cx, ctor, \"multiline\",    \"$*\") ||\njsregexp.cpp-        !JS_AliasProperty(cx, ctor, \"lastMatch\",    \"$&\") ||\njsregexp.cpp-        !JS_AliasProperty(cx, ctor, \"lastParen\",    \"$+\") ||\njsregexp.cpp-        !JS_AliasProperty(cx, ctor, \"leftContext\",  \"$`\") ||\njsregexp.cpp-        !JS_AliasProperty(cx, ctor, \"rightContext\", \"$'\")) {\njsregexp.cpp-        return NULL;\njsregexp.cpp-    }\njsregexp.cpp-\njsregexp.cpp-    /*\njsregexp.cpp-     * Make sure proto's emptyShape is available to be shared by objects of\njsregexp.cpp-     * this class.  JSObject::emptyShape is a one-slot cache. If we omit this,\njsregexp.cpp:     * some other class could snap it up. (The risk is particularly great for\njsregexp.cpp-     * Object.prototype.)\njsregexp.cpp-     *\njsregexp.cpp-     * All callers of JSObject::initSharingEmptyShape depend on this.\njsregexp.cpp-     */\njsregexp.cpp-    if (!proto->getEmptyShape(cx, &js_RegExpClass, FINALIZE_OBJECT0))\njsregexp.cpp-        return NULL;\njsregexp.cpp-\njsregexp.cpp-    /* Install the fully-constructed RegExp and RegExp.prototype in global. */\njsregexp.cpp-    if (!DefineConstructorAndPrototype(cx, global, JSProto_RegExp, ctor, proto))\njsregexp.cpp-        return NULL;\njsregexp.cpp-\njsregexp.cpp-    return proto;\njsregexp.cpp-}\njsregexp.cpp-\n--\njsstr.cpp-\njsstr.cpp-    /* Add properties and methods to the prototype and the constructor. */\njsstr.cpp-    if (!JS_DefineFunctions(cx, proto, string_methods) ||\njsstr.cpp-        !JS_DefineFunctions(cx, ctor, string_static_methods))\njsstr.cpp-    {\njsstr.cpp-        return NULL;\njsstr.cpp-    }\njsstr.cpp-\njsstr.cpp-    /* Pre-brand String and String.prototype for trace-jitted code. */\njsstr.cpp-    proto->brand(cx);\njsstr.cpp-    ctor->brand(cx);\njsstr.cpp-\njsstr.cpp-    /*\njsstr.cpp-     * Make sure proto's emptyShape is available to be shared by String\njsstr.cpp-     * objects. JSObject::emptyShape is a one-slot cache. If we omit this, some\njsstr.cpp:     * other class could snap it up. (The risk is particularly great for\njsstr.cpp-     * Object.prototype.)\njsstr.cpp-     *\njsstr.cpp-     * All callers of JSObject::initSharingEmptyShape depend on this.\njsstr.cpp-     */\njsstr.cpp-    if (!proto->getEmptyShape(cx, &js_StringClass, FINALIZE_OBJECT0))\njsstr.cpp-        return NULL;\njsstr.cpp-\njsstr.cpp-    /* Install the fully-constructed String and String.prototype. */\njsstr.cpp-    if (!DefineConstructorAndPrototype(cx, global, JSProto_String, ctor, proto))\njsstr.cpp-        return NULL;\njsstr.cpp-\njsstr.cpp-    return proto;\njsstr.cpp-}\njsstr.cpp-\njsstr.cpp-JSFixedString *\n\nThat's without this bug's patch.\n\nThe branding code and its order with respect to prototype property additions is non-trivial enough to want in one place, not three or more places.\n\n/be", "creation_time": "2011-06-10T23:29:58Z", "bug_id": 655192, "creator": "brendan@mozilla.org", "tags": [], "author": "brendan@mozilla.org", "time": "2011-06-10T23:29:58Z", "id": 5526191, "text": "$ grep -B 15 -A 15 \"The risk is particularly great\" *.cpp\njsobj.cpp-        goto bad;\njsobj.cpp-    }\njsobj.cpp-\njsobj.cpp-    /*\njsobj.cpp-     * Pre-brand the prototype and constructor if they have built-in methods.\njsobj.cpp-     * This avoids extra shape guard branch exits in the tracejitted code.\njsobj.cpp-     */\njsobj.cpp-    if (fs)\njsobj.cpp-        proto->brand(cx);\njsobj.cpp-    if (ctor != proto && static_fs)\njsobj.cpp-        ctor->brand(cx);\njsobj.cpp-\njsobj.cpp-    /*\njsobj.cpp-     * Make sure proto's emptyShape is available to be shared by objects of\njsobj.cpp-     * this class.  JSObject::emptyShape is a one-slot cache. If we omit this,\njsobj.cpp:     * some other class could snap it up. (The risk is particularly great for\njsobj.cpp-     * Object.prototype.)\njsobj.cpp-     *\njsobj.cpp-     * All callers of JSObject::initSharingEmptyShape depend on this.\njsobj.cpp-     *\njsobj.cpp-     * FIXME: bug 592296 -- js_InitArrayClass should pass &js_SlowArrayClass\njsobj.cpp-     * and make the Array.prototype slow from the start.\njsobj.cpp-     */\njsobj.cpp-    JS_ASSERT_IF(proto->clasp != clasp,\njsobj.cpp-                 clasp == &js_ArrayClass && proto->clasp == &js_SlowArrayClass);\njsobj.cpp-    if (!proto->getEmptyShape(cx, proto->clasp, FINALIZE_OBJECT0))\njsobj.cpp-        goto bad;\njsobj.cpp-\njsobj.cpp-    if (clasp->flags & (JSCLASS_FREEZE_PROTO|JSCLASS_FREEZE_CTOR)) {\njsobj.cpp-        JS_ASSERT_IF(ctor == proto, !(clasp->flags & JSCLASS_FREEZE_CTOR));\njsobj.cpp-        if (proto && (clasp->flags & JSCLASS_FREEZE_PROTO) && !proto->freeze(cx))\n--\njsregexp.cpp-\njsregexp.cpp-    /* Add static properties to the RegExp constructor. */\njsregexp.cpp-    if (!JS_DefineProperties(cx, ctor, regexp_static_props) ||\njsregexp.cpp-        !JS_AliasProperty(cx, ctor, \"input\",        \"$_\") ||\njsregexp.cpp-        !JS_AliasProperty(cx, ctor, \"multiline\",    \"$*\") ||\njsregexp.cpp-        !JS_AliasProperty(cx, ctor, \"lastMatch\",    \"$&\") ||\njsregexp.cpp-        !JS_AliasProperty(cx, ctor, \"lastParen\",    \"$+\") ||\njsregexp.cpp-        !JS_AliasProperty(cx, ctor, \"leftContext\",  \"$`\") ||\njsregexp.cpp-        !JS_AliasProperty(cx, ctor, \"rightContext\", \"$'\")) {\njsregexp.cpp-        return NULL;\njsregexp.cpp-    }\njsregexp.cpp-\njsregexp.cpp-    /*\njsregexp.cpp-     * Make sure proto's emptyShape is available to be shared by objects of\njsregexp.cpp-     * this class.  JSObject::emptyShape is a one-slot cache. If we omit this,\njsregexp.cpp:     * some other class could snap it up. (The risk is particularly great for\njsregexp.cpp-     * Object.prototype.)\njsregexp.cpp-     *\njsregexp.cpp-     * All callers of JSObject::initSharingEmptyShape depend on this.\njsregexp.cpp-     */\njsregexp.cpp-    if (!proto->getEmptyShape(cx, &js_RegExpClass, FINALIZE_OBJECT0))\njsregexp.cpp-        return NULL;\njsregexp.cpp-\njsregexp.cpp-    /* Install the fully-constructed RegExp and RegExp.prototype in global. */\njsregexp.cpp-    if (!DefineConstructorAndPrototype(cx, global, JSProto_RegExp, ctor, proto))\njsregexp.cpp-        return NULL;\njsregexp.cpp-\njsregexp.cpp-    return proto;\njsregexp.cpp-}\njsregexp.cpp-\n--\njsstr.cpp-\njsstr.cpp-    /* Add properties and methods to the prototype and the constructor. */\njsstr.cpp-    if (!JS_DefineFunctions(cx, proto, string_methods) ||\njsstr.cpp-        !JS_DefineFunctions(cx, ctor, string_static_methods))\njsstr.cpp-    {\njsstr.cpp-        return NULL;\njsstr.cpp-    }\njsstr.cpp-\njsstr.cpp-    /* Pre-brand String and String.prototype for trace-jitted code. */\njsstr.cpp-    proto->brand(cx);\njsstr.cpp-    ctor->brand(cx);\njsstr.cpp-\njsstr.cpp-    /*\njsstr.cpp-     * Make sure proto's emptyShape is available to be shared by String\njsstr.cpp-     * objects. JSObject::emptyShape is a one-slot cache. If we omit this, some\njsstr.cpp:     * other class could snap it up. (The risk is particularly great for\njsstr.cpp-     * Object.prototype.)\njsstr.cpp-     *\njsstr.cpp-     * All callers of JSObject::initSharingEmptyShape depend on this.\njsstr.cpp-     */\njsstr.cpp-    if (!proto->getEmptyShape(cx, &js_StringClass, FINALIZE_OBJECT0))\njsstr.cpp-        return NULL;\njsstr.cpp-\njsstr.cpp-    /* Install the fully-constructed String and String.prototype. */\njsstr.cpp-    if (!DefineConstructorAndPrototype(cx, global, JSProto_String, ctor, proto))\njsstr.cpp-        return NULL;\njsstr.cpp-\njsstr.cpp-    return proto;\njsstr.cpp-}\njsstr.cpp-\njsstr.cpp-JSFixedString *\n\nThat's without this bug's patch.\n\nThe branding code and its order with respect to prototype property additions is non-trivial enough to want in one place, not three or more places.\n\n/be", "count": 32}, {"tags": [], "creation_time": "2011-06-11T02:32:00Z", "bug_id": 655192, "raw_text": "(In reply to comment #32)\n> The branding code and its order with respect to prototype property additions\n> is non-trivial enough to want in one place, not three or more places.\n\nCould you elaborate?  My understanding is that branding just changes shape.  That might deoptimize by preventing cache hits, or staying on trace, or what-have-you.  But I hadn't thought it had any ordering constraints with respect to property additions, except that you want to do it after adding all properties to the prototype to best avail yourself of the branding advantage.", "is_private": false, "id": 5526391, "time": "2011-06-11T02:32:00Z", "creator": "jwalden@mit.edu", "attachment_id": null, "count": 33, "text": "(In reply to comment #32)\n> The branding code and its order with respect to prototype property additions\n> is non-trivial enough to want in one place, not three or more places.\n\nCould you elaborate?  My understanding is that branding just changes shape.  That might deoptimize by preventing cache hits, or staying on trace, or what-have-you.  But I hadn't thought it had any ordering constraints with respect to property additions, except that you want to do it after adding all properties to the prototype to best avail yourself of the branding advantage.", "author": "jwalden@mit.edu"}, {"is_private": false, "attachment_id": null, "creator": "brendan@mozilla.org", "tags": [], "raw_text": "(In reply to comment #33)\n> (In reply to comment #32)\n> > The branding code and its order with respect to prototype property additions\n> > is non-trivial enough to want in one place, not three or more places.\n> \n> Could you elaborate?  My understanding is that branding just changes shape. \n> That might deoptimize by preventing cache hits, or staying on trace, or\n> what-have-you.  But I hadn't thought it had any ordering constraints with\n> respect to property additions, except that you want to do it after adding\n> all properties to the prototype to best avail yourself of the branding\n> advantage.\n\nThat's what the comment says, and it's what I meant:\n\n    /*\n     * Pre-brand the prototype and constructor if they have built-in methods.\n     * This avoids extra shape guard branch exits in the tracejitted code.\n     */\n    if (fs)\n        proto->brand(cx);\n    if (ctor != proto && static_fs)\n        ctor->brand(cx);\n\nAgain, this code, and the code before and after it, should not be duplicated.\n\nIf there are several js_InitClass variants that can be used for commoning, that is great. Do that. Taking the car apart and duplicating the parts into ten cars is not great. This is not an ASIC where replicating circuits can win.\n\nThe summary of this bug says js_InitClass is contorted around standard classes, but there is only one key != JSProto_Null tests in the whole function, two more in DefineConstructorAndPrototype. That is not exactly \"contorted\", but it does suggest factoring that out to callers that pass key != JSProto_Null, if the relative order can be managed.\n\nThe big bootstrapping test is commented:\n\n        /* Bootstrap Function.prototype (see also JS_InitStandardClasses). */\n        if (ctor->getClass() == clasp)\n            ctor->setProto(proto);\n\nThis is making sure Function's [[Prototype]] is correct. It might be possible to hoist out to js_InitFunctionClass, but given what follows:\n\n    /* Add properties and methods to the prototype and the constructor. */\n    if ((ps && !JS_DefineProperties(cx, proto, ps)) ||\n        (fs && !JS_DefineFunctions(cx, proto, fs)) ||\n        (static_ps && !JS_DefineProperties(cx, ctor, static_ps)) ||\n        (static_fs && !JS_DefineFunctions(cx, ctor, static_fs))) {\n        goto bad;\n    }\n\ngetting Function correctly prototyped earliest seemed better. Whatever we do, it's not a cause for duplicating code, just moving it.\n\nThe rest of DefineConstructorAndPrototype is conditioned by non-null tests of constructor, clasp->flags tests, optional parameter null tests (ps, fs), and the named bool (someone used a reference for an out param, boo). The ps and fs tests are not worth splitting more variant functions out, by code size (cycles do not matter testing these -- evidence to the contrary necessary to \"optimize\" non-prematurely).\n\nAs comment 31 said, the patch queue for this bug creates \"an incredible degree of duplication\". We shouldn't need to go around and around on this point. It is obvious and it is peer review you are hearing, loud and clear. Please act on it by re-synthesizing a minimal-ish layered tree of helper functions.\n\n/be", "creation_time": "2011-06-13T23:41:56Z", "bug_id": 655192, "id": 5530254, "author": "brendan@mozilla.org", "time": "2011-06-13T23:41:56Z", "count": 34, "text": "(In reply to comment #33)\n> (In reply to comment #32)\n> > The branding code and its order with respect to prototype property additions\n> > is non-trivial enough to want in one place, not three or more places.\n> \n> Could you elaborate?  My understanding is that branding just changes shape. \n> That might deoptimize by preventing cache hits, or staying on trace, or\n> what-have-you.  But I hadn't thought it had any ordering constraints with\n> respect to property additions, except that you want to do it after adding\n> all properties to the prototype to best avail yourself of the branding\n> advantage.\n\nThat's what the comment says, and it's what I meant:\n\n    /*\n     * Pre-brand the prototype and constructor if they have built-in methods.\n     * This avoids extra shape guard branch exits in the tracejitted code.\n     */\n    if (fs)\n        proto->brand(cx);\n    if (ctor != proto && static_fs)\n        ctor->brand(cx);\n\nAgain, this code, and the code before and after it, should not be duplicated.\n\nIf there are several js_InitClass variants that can be used for commoning, that is great. Do that. Taking the car apart and duplicating the parts into ten cars is not great. This is not an ASIC where replicating circuits can win.\n\nThe summary of this bug says js_InitClass is contorted around standard classes, but there is only one key != JSProto_Null tests in the whole function, two more in DefineConstructorAndPrototype. That is not exactly \"contorted\", but it does suggest factoring that out to callers that pass key != JSProto_Null, if the relative order can be managed.\n\nThe big bootstrapping test is commented:\n\n        /* Bootstrap Function.prototype (see also JS_InitStandardClasses). */\n        if (ctor->getClass() == clasp)\n            ctor->setProto(proto);\n\nThis is making sure Function's [[Prototype]] is correct. It might be possible to hoist out to js_InitFunctionClass, but given what follows:\n\n    /* Add properties and methods to the prototype and the constructor. */\n    if ((ps && !JS_DefineProperties(cx, proto, ps)) ||\n        (fs && !JS_DefineFunctions(cx, proto, fs)) ||\n        (static_ps && !JS_DefineProperties(cx, ctor, static_ps)) ||\n        (static_fs && !JS_DefineFunctions(cx, ctor, static_fs))) {\n        goto bad;\n    }\n\ngetting Function correctly prototyped earliest seemed better. Whatever we do, it's not a cause for duplicating code, just moving it.\n\nThe rest of DefineConstructorAndPrototype is conditioned by non-null tests of constructor, clasp->flags tests, optional parameter null tests (ps, fs), and the named bool (someone used a reference for an out param, boo). The ps and fs tests are not worth splitting more variant functions out, by code size (cycles do not matter testing these -- evidence to the contrary necessary to \"optimize\" non-prematurely).\n\nAs comment 31 said, the patch queue for this bug creates \"an incredible degree of duplication\". We shouldn't need to go around and around on this point. It is obvious and it is peer review you are hearing, loud and clear. Please act on it by re-synthesizing a minimal-ish layered tree of helper functions.\n\n/be"}, {"is_private": false, "attachment_id": null, "creator": "jwalden@mit.edu", "tags": [], "raw_text": "I don't believe I was insistent on maintaining complete duplication here.  My intent (which I may not have expressed properly here or on IRC) was to get this up, then hopefully get reviewer suggestions for improvements, and we could iterate to something somewhat smaller.\n\nI've started that iteration, and it seems to go okay so far.  I'll report back with more.\n\n(In reply to comment #34)\n> The summary of this bug says js_InitClass is contorted around standard\n> classes, but there is only one key != JSProto_Null tests in the whole\n> function, two more in DefineConstructorAndPrototype. That is not exactly\n> \"contorted\", but it does suggest factoring that out to callers that pass key\n> != JSProto_Null, if the relative order can be managed.\n\nI don't see key != JSProto_Null being the only way the special needs of standard classes impose upon the logic; I listed other ways in comment 0.\n\n> The big bootstrapping test is commented:\n> \n>         /* Bootstrap Function.prototype (see also JS_InitStandardClasses). */\n>         if (ctor->getClass() == clasp)\n>             ctor->setProto(proto);\n\nIt is indeed commented to explain its immediate purpose.  However, I can't say I understand (except facially) how it exactly integrates into the current ordering of js_InitFunctionClass, js_InitObjectClass, and js_InitFunctionAndObjectClasses, nor into how they call each other, nor into how these calls all bottom out.  Some of that bottoming out occurs (if memory serves) in js_FindClassPrototype and js_GetClassPrototype, or maybe js::FindClassProto and one other js:: function.  It's pretty spread out.  And then there's the matter of that recursion actually creating multiple sets of {Function,Object}{,.prototype}, and installing them in the global multiple times\n\n> This is making sure Function's [[Prototype]] is correct. It might be\n> possible to hoist out to js_InitFunctionClass, but given what follows:\n> \n>     /* Add properties and methods to the prototype and the constructor. */\n>     if ((ps && !JS_DefineProperties(cx, proto, ps)) ||\n>         (fs && !JS_DefineFunctions(cx, proto, fs)) ||\n>         (static_ps && !JS_DefineProperties(cx, ctor, static_ps)) ||\n>         (static_fs && !JS_DefineFunctions(cx, ctor, static_fs))) {\n>         goto bad;\n>     }\n> \n> getting Function correctly prototyped earliest seemed better. Whatever we\n> do, it's not a cause for duplicating code, just moving it.\n\nWhatever your feelings about the rest of the patches here (some of which I agree with, just haven't finished responding yet), could you please take a look at attachment 530519?\n\n> As comment 31 said, the patch queue for this bug creates \"an incredible\n> degree of duplication\". We shouldn't need to go around and around on this\n> point. It is obvious and it is peer review you are hearing, loud and clear.\n> Please act on it by re-synthesizing a minimal-ish layered tree of helper\n> functions.\n\nI will.  I made only one comment here, plus a few comments on IRC, discussing it.  *Please* don't think I'm being antagonistic merely for antagonism's sake, or that I think what's here is what must be done in all exactness.\n\nIf this comment were on a Get Satisfaction-styled site, my mood right now would be :-(.  Or worse.  I really don't want to engage in a long, drawn-out argument here, when changes will end up being made without needing to have it.", "creation_time": "2011-06-14T05:10:13Z", "bug_id": 655192, "id": 5530736, "author": "jwalden@mit.edu", "time": "2011-06-14T05:10:13Z", "count": 35, "text": "I don't believe I was insistent on maintaining complete duplication here.  My intent (which I may not have expressed properly here or on IRC) was to get this up, then hopefully get reviewer suggestions for improvements, and we could iterate to something somewhat smaller.\n\nI've started that iteration, and it seems to go okay so far.  I'll report back with more.\n\n(In reply to comment #34)\n> The summary of this bug says js_InitClass is contorted around standard\n> classes, but there is only one key != JSProto_Null tests in the whole\n> function, two more in DefineConstructorAndPrototype. That is not exactly\n> \"contorted\", but it does suggest factoring that out to callers that pass key\n> != JSProto_Null, if the relative order can be managed.\n\nI don't see key != JSProto_Null being the only way the special needs of standard classes impose upon the logic; I listed other ways in comment 0.\n\n> The big bootstrapping test is commented:\n> \n>         /* Bootstrap Function.prototype (see also JS_InitStandardClasses). */\n>         if (ctor->getClass() == clasp)\n>             ctor->setProto(proto);\n\nIt is indeed commented to explain its immediate purpose.  However, I can't say I understand (except facially) how it exactly integrates into the current ordering of js_InitFunctionClass, js_InitObjectClass, and js_InitFunctionAndObjectClasses, nor into how they call each other, nor into how these calls all bottom out.  Some of that bottoming out occurs (if memory serves) in js_FindClassPrototype and js_GetClassPrototype, or maybe js::FindClassProto and one other js:: function.  It's pretty spread out.  And then there's the matter of that recursion actually creating multiple sets of {Function,Object}{,.prototype}, and installing them in the global multiple times\n\n> This is making sure Function's [[Prototype]] is correct. It might be\n> possible to hoist out to js_InitFunctionClass, but given what follows:\n> \n>     /* Add properties and methods to the prototype and the constructor. */\n>     if ((ps && !JS_DefineProperties(cx, proto, ps)) ||\n>         (fs && !JS_DefineFunctions(cx, proto, fs)) ||\n>         (static_ps && !JS_DefineProperties(cx, ctor, static_ps)) ||\n>         (static_fs && !JS_DefineFunctions(cx, ctor, static_fs))) {\n>         goto bad;\n>     }\n> \n> getting Function correctly prototyped earliest seemed better. Whatever we\n> do, it's not a cause for duplicating code, just moving it.\n\nWhatever your feelings about the rest of the patches here (some of which I agree with, just haven't finished responding yet), could you please take a look at attachment 530519?\n\n> As comment 31 said, the patch queue for this bug creates \"an incredible\n> degree of duplication\". We shouldn't need to go around and around on this\n> point. It is obvious and it is peer review you are hearing, loud and clear.\n> Please act on it by re-synthesizing a minimal-ish layered tree of helper\n> functions.\n\nI will.  I made only one comment here, plus a few comments on IRC, discussing it.  *Please* don't think I'm being antagonistic merely for antagonism's sake, or that I think what's here is what must be done in all exactness.\n\nIf this comment were on a Get Satisfaction-styled site, my mood right now would be :-(.  Or worse.  I really don't want to engage in a long, drawn-out argument here, when changes will end up being made without needing to have it."}, {"time": "2011-06-14T05:20:44Z", "id": 5530753, "bug_id": 655192, "creation_time": "2011-06-14T05:20:44Z", "raw_text": "Sigh, I accidentally hit the Submit button too soon.  But I guess I said pretty much everything I was going to say, except to add this to the end of the \"Whatever your feelings\" paragraph:\n\n\"It eliminates that recursion and simplifies the complex bootstrapping cases.  I can understand that code.  I think anyone working on the JS engine could understand it and could explain the ordering of its actions, particularly when aided by the comments about 'create this now', 'create this next', etc.  (Some of the bits like branding or whatever could be hidden a little, sure, but they're not the complexity I see inherent in reusing js_InitClass for Function and Object.)\"\n\nand this to the end of the last paragraph:\n\n\"When I say I'd like to not get into an argument, what I mean is that, based on the way the discussion is proceeding, I'm going to feel like I'm having one.  (You might or might not feel that way, I don't know.  For all I know you might think I'm just trying to duck a battle I 'know' I will 'lose'.  Or you might not.  Point is, how you feel when arguing with me and how I feel when arguing with you are probably different things.)  It's not to say I absolutely disagree with your every contention.  It's just to say that, based on the way I feel, I'm reaching the limit of my emotional stores, and if I continue trying to say what I think right at that moment, I'm going to feel completely emotionally drained.  Basically, I'd like a little temporary distance for sanity's sake until I can recharge a bit.  Does that make any sense?\"", "tags": [], "is_private": false, "count": 36, "text": "Sigh, I accidentally hit the Submit button too soon.  But I guess I said pretty much everything I was going to say, except to add this to the end of the \"Whatever your feelings\" paragraph:\n\n\"It eliminates that recursion and simplifies the complex bootstrapping cases.  I can understand that code.  I think anyone working on the JS engine could understand it and could explain the ordering of its actions, particularly when aided by the comments about 'create this now', 'create this next', etc.  (Some of the bits like branding or whatever could be hidden a little, sure, but they're not the complexity I see inherent in reusing js_InitClass for Function and Object.)\"\n\nand this to the end of the last paragraph:\n\n\"When I say I'd like to not get into an argument, what I mean is that, based on the way the discussion is proceeding, I'm going to feel like I'm having one.  (You might or might not feel that way, I don't know.  For all I know you might think I'm just trying to duck a battle I 'know' I will 'lose'.  Or you might not.  Point is, how you feel when arguing with me and how I feel when arguing with you are probably different things.)  It's not to say I absolutely disagree with your every contention.  It's just to say that, based on the way I feel, I'm reaching the limit of my emotional stores, and if I continue trying to say what I think right at that moment, I'm going to feel completely emotionally drained.  Basically, I'd like a little temporary distance for sanity's sake until I can recharge a bit.  Does that make any sense?\"", "author": "jwalden@mit.edu", "creator": "jwalden@mit.edu", "attachment_id": null}, {"creator": "brendan@mozilla.org", "tags": [], "raw_text": "(In reply to comment #35)\n> I don't believe I was insistent on maintaining complete duplication here. \n> My intent (which I may not have expressed properly here or on IRC) was to\n> get this up, then hopefully get reviewer suggestions for improvements, and\n> we could iterate to something somewhat smaller.\n\nRemember that time you wanted me to use feedback? instead of r? :-|.\n\nI'll let jorendorff comment too.\n\n> I've started that iteration, and it seems to go okay so far.  I'll report\n> back with more.\n\nSounds good.\n \n> (In reply to comment #34)\n> > The summary of this bug says js_InitClass is contorted around standard\n> > classes, but there is only one key != JSProto_Null tests in the whole\n> > function, two more in DefineConstructorAndPrototype. That is not exactly\n> > \"contorted\", but it does suggest factoring that out to callers that pass key\n> > != JSProto_Null, if the relative order can be managed.\n> \n> I don't see key != JSProto_Null being the only way the special needs of\n> standard classes impose upon the logic; I listed other ways in comment 0.\n\nLet's go through that list:\n\n> * Some classes (Math) have only \"constructors\", and for those we pass NULL as\n> the constructor.  This short-circuits constructor creation and headfakes the\n> tail of js_InitClass into not assuming it has a constructor.\n\nNo, into defining a global property. That's not fake and it is not a bug. Sure, we could do Math (and StopIteration, you didn't mention that) differently. But the old way intentionally shared prototype creation and property definition code, and this bullet uses headfakey language to seem to suggest a bug.\n\n> * RangeError, etc. inherit from Error.prototype, not Object.prototype, so we\n> copied almost all of js_InitClass into a second method, then made both\n> js_InitClass and js_InitExceptionClasses call that method.\n\nYes, so what? This is something Jason did to fix a bug. Should he have copied all the code into jsexn.cpp? No, that would be too much duplication.\n\n> * RangeError, etc. need special handling to add the handful of data\n> properties on the Error prototypes because js_InitClass can't add actual data\n> properties.\n\nNo, js_InitClass can add data properties to class prototypes. Why did you think that it could not?\n\n> * QName.prototype and Namespace.prototype are actual XML objects and not\n> regular old objects, so we added JSCLASS_CONSTRUCT_PROTOTYPE to create a\n> regular old object, then create the XML constructor, then *call the\n> constructor* to create the real prototype object.\n\nNo, neither QName.prototype nor Namespace.prototype is an XML object:\n\njs> QName.prototype            \n({uri:\"\", localName:\"\"})\njs> typeof QName.prototype\n\"object\"\njs> typeof Namespace.prototype\n\"object\"\njs> Namespace.prototype\n({prefix:\"\", uri:\"\"})\njs> Namespace.prototype.constructor\nfunction Namespace() {[native code]}\njs> typeof <>hi</>\n\"xml\"\njs> typeof <p>text</p>\n\"xml\"\n\nThe JSCLASS_CONSTRUCT_PROTOTYPE flag is a generic option, nothing to do with XML objects. It happens to be used in our source tree only by jsxml.cpp, but it's a jsapi.h feature of > 6 years' standing.\n\n> * We decided StopIteration should be frozen, so we added JSCLASS_FREEZE_PROTO\n> and JSCLASS_FREEZE_CTOR (but J_C_C is never used!) to freeze as quickly after\n> initialization as possible.\n\nHrm, I reviewed the patch and asked Andreas to remove JSCLASS_FREEZE_CTOR. Did that followup patch bounce? Anyway, this is another jsapi.h feature, not a bug.\n\n> * Object and Function have to be created before anything else.  There's an\n> opaque recursive dance between js_InitObjectClass and js_InitFunctionClass to\n> create Object.prototype, Object, Function.prototype, and Function in just the\n> right sequence that we get everything set up.  I have no idea how it bottoms\n> out without error, with these self-consistent.\n\nWhat?\n\nYou attended MIT. Recursion does bottom out here. It's a small-world codebase. I think you're (head-)faking. :-(\n\n> * We want to brand all these built-ins that have function properties, we\n> brand the created prototype (if it had methods) and the created method (if it\n> had methods).  But we have to be careful of the first hack (for\n> prototype-less classes) and check that ctor != proto before maybe branding\n> the ctor!\n\nThe branding has nothing to do with \"standard\" classes, all built-in classes that would use the JS_InitClass public API (only built-ins use it) need this logic.\n\nYes, the constructor == null case adds a test. Is that either a measurable performance problem? No. Is it a code size issue? No, especially not compared to the patch queue you put in this bug.\n\nIs it a tiny extra complexity? Yes. Could it be avoided by factoring the code into two init-class variants, one for Math and StopIteration, the other for constructor-ful classes? Yes, but maybe that is not worth the code size hit.\n\nIn any event, this is not a high priority problem to \"fix\".\n\n> * Because of js_InitClass's constrictions Array.prototype is created as a\n> dense array, then on first property definition to a slow array, rather than\n> being slow from the start. (bug 592296)\n\nAnother very low priority bug.\n\nMeanwhile, we have crash bugs and performance bugs aplenty.\n\n> * js_InitClass has special munging to have Function to have\n> Function.prototype as its prototype.\n\nYes, and we could unravel this by making Object.prototype first, then Function, then Function.prototype and Object (in either order), with custom code. Is that more code? Does it run faster?\n\nI agree it would be easier to read, though.\n\n> (How does creating Function work, if we\n> don't have Function.prototype yet?  I think but am not certain that it picks\n> up an *older* Function.prototype -- because we init the Function class\n> multiple times during this bootstrapping -- and then gets later overwritten\n> with the actual, used Function.prototype before the whole thing returns.)\n\nNo. Please read the code and run it under a debugger before speculating.\n\n> * All the built-in stuff should be safe against deletion and enumeration\n> re-resolving the builtins (it's not, but I digress), so the built-ins all\n> save their constructor *twice* in the global object and the prototype once in\n> the global object.  (This is so []/{} get the original array/object\n> prototypes.)  Public JSClass flags expose this mechanism, but no external\n> user should ever use them.\"\n\nSee bug 594221 -- a separate bug, nothing to do with bootstrapping.\n\nThe \"I hope I have demonstrated that this is a house of cards\" line was snarky but non-technical. You've demonstrated some bugs on file, pointed out a couple of if statements used to share code where factoring into separate functions could avoid the if's -- at a cost in code size -- and you mixed some generic features not specific to built-ins into what started out as an argument about only built-in aka \"standard\" classes.\n\nWe surely have an evolved, hacked over mess of a codebase. It needs cleanup. No argument there. But some of what you write above about \"We\" is a slam on your friends and colleagues who fixed bugs piece-wise, sometimes under release duress. It's better to talk about these suboptimal parts in separate bugs, and not lard them together with your own misreadings mixed in to built up a weak case for rewriting something that \"works\" in the sense of being shipped to ~500M users.\n\nWe have shipped this old code for along time, and we haven't had a lot of bugs in the area of standard class init. The Error class fakery, the StopIteration proto-freezing, are about the only recent ones I can recall.\n\nNow, this overlong bug is drawing a number of valuable hackers' time away from other bugs. I maintain that you'd do better to fix real, biting bugs and optimize competitive performance problems. And I agree that re-architecture to improve maintainability is important too. But not with incredible amounts of code duplication.\n\nLazy standard class init removal, along the lines I cited in comment 30 last paragraph, would be better-spent time too.\n\n> If this comment were on a Get Satisfaction-styled site, my mood right now\n> would be :-(.  Or worse.  I really don't want to engage in a long, drawn-out\n> argument here,\n\nOh come on. You do and you did. Know thyself, take direct peer feedback without so much deflection, fix high priority bugs, and redo extant messy code to be more maintainable without duplication, and we can all avoid these arguments.\n\n/be", "bug_id": 655192, "creation_time": "2011-06-14T06:00:49Z", "is_private": false, "attachment_id": null, "count": 37, "text": "(In reply to comment #35)\n> I don't believe I was insistent on maintaining complete duplication here. \n> My intent (which I may not have expressed properly here or on IRC) was to\n> get this up, then hopefully get reviewer suggestions for improvements, and\n> we could iterate to something somewhat smaller.\n\nRemember that time you wanted me to use feedback? instead of r? :-|.\n\nI'll let jorendorff comment too.\n\n> I've started that iteration, and it seems to go okay so far.  I'll report\n> back with more.\n\nSounds good.\n \n> (In reply to comment #34)\n> > The summary of this bug says js_InitClass is contorted around standard\n> > classes, but there is only one key != JSProto_Null tests in the whole\n> > function, two more in DefineConstructorAndPrototype. That is not exactly\n> > \"contorted\", but it does suggest factoring that out to callers that pass key\n> > != JSProto_Null, if the relative order can be managed.\n> \n> I don't see key != JSProto_Null being the only way the special needs of\n> standard classes impose upon the logic; I listed other ways in comment 0.\n\nLet's go through that list:\n\n> * Some classes (Math) have only \"constructors\", and for those we pass NULL as\n> the constructor.  This short-circuits constructor creation and headfakes the\n> tail of js_InitClass into not assuming it has a constructor.\n\nNo, into defining a global property. That's not fake and it is not a bug. Sure, we could do Math (and StopIteration, you didn't mention that) differently. But the old way intentionally shared prototype creation and property definition code, and this bullet uses headfakey language to seem to suggest a bug.\n\n> * RangeError, etc. inherit from Error.prototype, not Object.prototype, so we\n> copied almost all of js_InitClass into a second method, then made both\n> js_InitClass and js_InitExceptionClasses call that method.\n\nYes, so what? This is something Jason did to fix a bug. Should he have copied all the code into jsexn.cpp? No, that would be too much duplication.\n\n> * RangeError, etc. need special handling to add the handful of data\n> properties on the Error prototypes because js_InitClass can't add actual data\n> properties.\n\nNo, js_InitClass can add data properties to class prototypes. Why did you think that it could not?\n\n> * QName.prototype and Namespace.prototype are actual XML objects and not\n> regular old objects, so we added JSCLASS_CONSTRUCT_PROTOTYPE to create a\n> regular old object, then create the XML constructor, then *call the\n> constructor* to create the real prototype object.\n\nNo, neither QName.prototype nor Namespace.prototype is an XML object:\n\njs> QName.prototype            \n({uri:\"\", localName:\"\"})\njs> typeof QName.prototype\n\"object\"\njs> typeof Namespace.prototype\n\"object\"\njs> Namespace.prototype\n({prefix:\"\", uri:\"\"})\njs> Namespace.prototype.constructor\nfunction Namespace() {[native code]}\njs> typeof <>hi</>\n\"xml\"\njs> typeof <p>text</p>\n\"xml\"\n\nThe JSCLASS_CONSTRUCT_PROTOTYPE flag is a generic option, nothing to do with XML objects. It happens to be used in our source tree only by jsxml.cpp, but it's a jsapi.h feature of > 6 years' standing.\n\n> * We decided StopIteration should be frozen, so we added JSCLASS_FREEZE_PROTO\n> and JSCLASS_FREEZE_CTOR (but J_C_C is never used!) to freeze as quickly after\n> initialization as possible.\n\nHrm, I reviewed the patch and asked Andreas to remove JSCLASS_FREEZE_CTOR. Did that followup patch bounce? Anyway, this is another jsapi.h feature, not a bug.\n\n> * Object and Function have to be created before anything else.  There's an\n> opaque recursive dance between js_InitObjectClass and js_InitFunctionClass to\n> create Object.prototype, Object, Function.prototype, and Function in just the\n> right sequence that we get everything set up.  I have no idea how it bottoms\n> out without error, with these self-consistent.\n\nWhat?\n\nYou attended MIT. Recursion does bottom out here. It's a small-world codebase. I think you're (head-)faking. :-(\n\n> * We want to brand all these built-ins that have function properties, we\n> brand the created prototype (if it had methods) and the created method (if it\n> had methods).  But we have to be careful of the first hack (for\n> prototype-less classes) and check that ctor != proto before maybe branding\n> the ctor!\n\nThe branding has nothing to do with \"standard\" classes, all built-in classes that would use the JS_InitClass public API (only built-ins use it) need this logic.\n\nYes, the constructor == null case adds a test. Is that either a measurable performance problem? No. Is it a code size issue? No, especially not compared to the patch queue you put in this bug.\n\nIs it a tiny extra complexity? Yes. Could it be avoided by factoring the code into two init-class variants, one for Math and StopIteration, the other for constructor-ful classes? Yes, but maybe that is not worth the code size hit.\n\nIn any event, this is not a high priority problem to \"fix\".\n\n> * Because of js_InitClass's constrictions Array.prototype is created as a\n> dense array, then on first property definition to a slow array, rather than\n> being slow from the start. (bug 592296)\n\nAnother very low priority bug.\n\nMeanwhile, we have crash bugs and performance bugs aplenty.\n\n> * js_InitClass has special munging to have Function to have\n> Function.prototype as its prototype.\n\nYes, and we could unravel this by making Object.prototype first, then Function, then Function.prototype and Object (in either order), with custom code. Is that more code? Does it run faster?\n\nI agree it would be easier to read, though.\n\n> (How does creating Function work, if we\n> don't have Function.prototype yet?  I think but am not certain that it picks\n> up an *older* Function.prototype -- because we init the Function class\n> multiple times during this bootstrapping -- and then gets later overwritten\n> with the actual, used Function.prototype before the whole thing returns.)\n\nNo. Please read the code and run it under a debugger before speculating.\n\n> * All the built-in stuff should be safe against deletion and enumeration\n> re-resolving the builtins (it's not, but I digress), so the built-ins all\n> save their constructor *twice* in the global object and the prototype once in\n> the global object.  (This is so []/{} get the original array/object\n> prototypes.)  Public JSClass flags expose this mechanism, but no external\n> user should ever use them.\"\n\nSee bug 594221 -- a separate bug, nothing to do with bootstrapping.\n\nThe \"I hope I have demonstrated that this is a house of cards\" line was snarky but non-technical. You've demonstrated some bugs on file, pointed out a couple of if statements used to share code where factoring into separate functions could avoid the if's -- at a cost in code size -- and you mixed some generic features not specific to built-ins into what started out as an argument about only built-in aka \"standard\" classes.\n\nWe surely have an evolved, hacked over mess of a codebase. It needs cleanup. No argument there. But some of what you write above about \"We\" is a slam on your friends and colleagues who fixed bugs piece-wise, sometimes under release duress. It's better to talk about these suboptimal parts in separate bugs, and not lard them together with your own misreadings mixed in to built up a weak case for rewriting something that \"works\" in the sense of being shipped to ~500M users.\n\nWe have shipped this old code for along time, and we haven't had a lot of bugs in the area of standard class init. The Error class fakery, the StopIteration proto-freezing, are about the only recent ones I can recall.\n\nNow, this overlong bug is drawing a number of valuable hackers' time away from other bugs. I maintain that you'd do better to fix real, biting bugs and optimize competitive performance problems. And I agree that re-architecture to improve maintainability is important too. But not with incredible amounts of code duplication.\n\nLazy standard class init removal, along the lines I cited in comment 30 last paragraph, would be better-spent time too.\n\n> If this comment were on a Get Satisfaction-styled site, my mood right now\n> would be :-(.  Or worse.  I really don't want to engage in a long, drawn-out\n> argument here,\n\nOh come on. You do and you did. Know thyself, take direct peer feedback without so much deflection, fix high priority bugs, and redo extant messy code to be more maintainable without duplication, and we can all avoid these arguments.\n\n/be", "id": 5530788, "author": "brendan@mozilla.org", "time": "2011-06-14T06:00:49Z"}, {"id": 5530795, "time": "2011-06-14T06:07:47Z", "is_private": false, "tags": [], "creation_time": "2011-06-14T06:07:47Z", "bug_id": 655192, "raw_text": "> No, js_InitClass can add data properties to class prototypes. Why did you think\n> that it could not?\n\nSorry, I'm flat wrong here -- I was thinking of the JSPropertyOp getter/setter native \"data\" properties, but they aren't true data properties with string values as jsexn.cpp wants. You're on target here.\n\nDefining data properties on prototypes is rarely done. Doing it by hand in each class init function that needs such properties might be more code than using a table-driven approach, but only if the values are well-known enough to be encoded into the table.\n\nThe table-driven approach seems not to be what you're objecting to where it wins for methods. But it's just another common subroutining and loop-rolling, instead of open-coding define-native-property calls in a row. That is not in principle different from consolidating more code, especially branding after prototype property decoration. So I still don't see why the patch queue copies so much code around, even as a temporary step.\n\n/be", "author": "brendan@mozilla.org", "count": 38, "text": "> No, js_InitClass can add data properties to class prototypes. Why did you think\n> that it could not?\n\nSorry, I'm flat wrong here -- I was thinking of the JSPropertyOp getter/setter native \"data\" properties, but they aren't true data properties with string values as jsexn.cpp wants. You're on target here.\n\nDefining data properties on prototypes is rarely done. Doing it by hand in each class init function that needs such properties might be more code than using a table-driven approach, but only if the values are well-known enough to be encoded into the table.\n\nThe table-driven approach seems not to be what you're objecting to where it wins for methods. But it's just another common subroutining and loop-rolling, instead of open-coding define-native-property calls in a row. That is not in principle different from consolidating more code, especially branding after prototype property decoration. So I still don't see why the patch queue copies so much code around, even as a temporary step.\n\n/be", "attachment_id": null, "creator": "brendan@mozilla.org"}, {"creation_time": "2011-06-14T06:08:38Z", "bug_id": 655192, "raw_text": "Finally, I'm gonna tag out of the ring too. We all need a break, I've got other fish to fry. Jason is rumored to be back tomorrow.\n\n/be", "tags": [], "is_private": false, "time": "2011-06-14T06:08:38Z", "id": 5530796, "creator": "brendan@mozilla.org", "attachment_id": null, "text": "Finally, I'm gonna tag out of the ring too. We all need a break, I've got other fish to fry. Jason is rumored to be back tomorrow.\n\n/be", "count": 39, "author": "brendan@mozilla.org"}, {"attachment_id": null, "creator": "brendan@mozilla.org", "author": "brendan@mozilla.org", "count": 40, "text": "(In reply to comment #37)\n> > * We decided StopIteration should be frozen, so we added JSCLASS_FREEZE_PROTO\n> > and JSCLASS_FREEZE_CTOR (but J_C_C is never used!) to freeze as quickly after\n> > initialization as possible.\n> \n> Hrm, I reviewed the patch and asked Andreas to remove JSCLASS_FREEZE_CTOR.\n> Did that followup patch bounce? Anyway, this is another jsapi.h feature, not\n> a bug.\n\nSee bug 606573 comment 9. But I still don't see why:\n\njs> Object.isFrozen(StopIteration)\ntrue\n\nAndreas?\n\n/be", "is_private": false, "tags": [], "creation_time": "2011-06-14T06:22:01Z", "bug_id": 655192, "raw_text": "(In reply to comment #37)\n> > * We decided StopIteration should be frozen, so we added JSCLASS_FREEZE_PROTO\n> > and JSCLASS_FREEZE_CTOR (but J_C_C is never used!) to freeze as quickly after\n> > initialization as possible.\n> \n> Hrm, I reviewed the patch and asked Andreas to remove JSCLASS_FREEZE_CTOR.\n> Did that followup patch bounce? Anyway, this is another jsapi.h feature, not\n> a bug.\n\nSee bug 606573 comment 9. But I still don't see why:\n\njs> Object.isFrozen(StopIteration)\ntrue\n\nAndreas?\n\n/be", "id": 5530813, "time": "2011-06-14T06:22:01Z"}, {"bug_id": 655192, "creation_time": "2011-06-14T07:10:07Z", "raw_text": "(In reply to comment #40)\n> (In reply to comment #37)\n> > > * We decided StopIteration should be frozen, so we added JSCLASS_FREEZE_PROTO\n> > > and JSCLASS_FREEZE_CTOR (but J_C_C is never used!) to freeze as quickly after\n> > > initialization as possible.\n> > \n> > Hrm, I reviewed the patch and asked Andreas to remove JSCLASS_FREEZE_CTOR.\n> > Did that followup patch bounce? Anyway, this is another jsapi.h feature, not\n> > a bug.\n> \n> See bug 606573 comment 9. But I still don't see why:\n> \n> js> Object.isFrozen(StopIteration)\n> true\n> \n> Andreas?\n\nHe commented at bug 606573 comment 19.\n\nFWIW, my bug 606573 comment 9 said pretty much what Jeff rightly wants for one-off unshared/uncommon code:\n\n\"Non-nit: running out of JSClass.flags bits, I would have done this one ad-hoc in jsiter.cpp instead of claiming those two.\"\n\nAndreas will, I'm sure, file a followup bug :-/. Unless Jeff rallies here and fixes this one-off case to use one-off code.\n\n/be", "tags": [], "creator": "brendan@mozilla.org", "is_private": false, "attachment_id": null, "text": "(In reply to comment #40)\n> (In reply to comment #37)\n> > > * We decided StopIteration should be frozen, so we added JSCLASS_FREEZE_PROTO\n> > > and JSCLASS_FREEZE_CTOR (but J_C_C is never used!) to freeze as quickly after\n> > > initialization as possible.\n> > \n> > Hrm, I reviewed the patch and asked Andreas to remove JSCLASS_FREEZE_CTOR.\n> > Did that followup patch bounce? Anyway, this is another jsapi.h feature, not\n> > a bug.\n> \n> See bug 606573 comment 9. But I still don't see why:\n> \n> js> Object.isFrozen(StopIteration)\n> true\n> \n> Andreas?\n\nHe commented at bug 606573 comment 19.\n\nFWIW, my bug 606573 comment 9 said pretty much what Jeff rightly wants for one-off unshared/uncommon code:\n\n\"Non-nit: running out of JSClass.flags bits, I would have done this one ad-hoc in jsiter.cpp instead of claiming those two.\"\n\nAndreas will, I'm sure, file a followup bug :-/. Unless Jeff rallies here and fixes this one-off case to use one-off code.\n\n/be", "count": 41, "time": "2011-06-14T07:10:07Z", "author": "brendan@mozilla.org", "id": 5530861}, {"time": "2011-06-14T19:08:48Z", "id": 5532062, "is_private": false, "creation_time": "2011-06-14T19:08:48Z", "bug_id": 655192, "raw_text": "Bugzilla doesn't have mass-minusing UI...\n\nI promised Jeff a minus on this weeks ago but didn't get around to it.\n\nIn short,\n- making Object and Function initialization totally special sounds great;\n- making standard classes a little more special than they are, and making the\n  public JS_InitClass have fewer special cases and ins and outs, sounds good;\n- this stack of patches has way, way too much copy & paste.\n\nThe last thing is a deal-breaker. To avoid the duplication, can we just pass the proto (rather than the proto-proto) as a parameter to the InitClass function? If not the proto, then perhaps a function pointer (or some other sort of parameter) that encompasses whatever varies from Class to Class?\n\nI totally agree with comment 32. That's an ugly trend; let's reverse it.", "tags": [], "author": "jorendorff@mozilla.com", "text": "Comment on attachment 530492\nInitialize Boolean specially\n\nBugzilla doesn't have mass-minusing UI...\n\nI promised Jeff a minus on this weeks ago but didn't get around to it.\n\nIn short,\n- making Object and Function initialization totally special sounds great;\n- making standard classes a little more special than they are, and making the\n  public JS_InitClass have fewer special cases and ins and outs, sounds good;\n- this stack of patches has way, way too much copy & paste.\n\nThe last thing is a deal-breaker. To avoid the duplication, can we just pass the proto (rather than the proto-proto) as a parameter to the InitClass function? If not the proto, then perhaps a function pointer (or some other sort of parameter) that encompasses whatever varies from Class to Class?\n\nI totally agree with comment 32. That's an ugly trend; let's reverse it.", "count": 42, "attachment_id": 530492, "creator": "jorendorff@mozilla.com"}, {"id": 5532079, "time": "2011-06-14T19:16:23Z", "author": "jorendorff@mozilla.com", "text": "Oh, I meant to also have a bullet that said something like,\n\n- making stuff like Math and StopIteration not go through InitClass is also\n  something I'd be happy to review a patch for -- preferably in isolation\n\nSplitting these bullet points into separate bugs would be welcome.", "count": 43, "is_private": false, "attachment_id": null, "tags": [], "creator": "jorendorff@mozilla.com", "bug_id": 655192, "creation_time": "2011-06-14T19:16:23Z", "raw_text": "Oh, I meant to also have a bullet that said something like,\n\n- making stuff like Math and StopIteration not go through InitClass is also\n  something I'd be happy to review a patch for -- preferably in isolation\n\nSplitting these bullet points into separate bugs would be welcome."}, {"is_private": false, "tags": [], "raw_text": "(I'm fine with taking this little patch, if you want it.)", "bug_id": 655192, "creation_time": "2011-06-14T19:20:28Z", "id": 5532088, "time": "2011-06-14T19:20:28Z", "attachment_id": 530507, "creator": "jorendorff@mozilla.com", "author": "jorendorff@mozilla.com", "count": 44, "text": "Comment on attachment 530507\nMove some variable declarations in js_InitXMLClass closer to first uses\n\n(I'm fine with taking this little patch, if you want it.)"}, {"is_private": false, "tags": [], "creation_time": "2011-06-14T19:43:53Z", "bug_id": 655192, "raw_text": "This comment cleanup seems good too.", "id": 5532157, "time": "2011-06-14T19:43:53Z", "attachment_id": 530518, "creator": "jorendorff@mozilla.com", "author": "jorendorff@mozilla.com", "count": 45, "text": "Comment on attachment 530518\nUpdate initSharingEmptyShape's comment to be more precise, and to not refer to js_InitClass (which built-in classes don't use)\n\nThis comment cleanup seems good too."}, {"id": 5532170, "author": "jorendorff@mozilla.com", "time": "2011-06-14T19:50:16Z", "text": "Comment on attachment 530515\nMove js_InitFunctionAndObjectClasses into jsfun.cpp\n\nIf you want to move js_InitFunctionAndObjectClasses, js_InitFunctionClass, and js_InitObjectClass to the same file, in anticipation of straightening that out, go for it, r=me.\n\nI would pick either vm/GlobalObject.cpp (because I see this as part of global object initialization) *or* jsobj.cpp (because that's where js_InitClass is, and the existing code is tightly coupled to that) rather than jsfun.cpp, but any of the three is fine.", "count": 46, "is_private": false, "attachment_id": 530515, "creator": "jorendorff@mozilla.com", "tags": [], "raw_text": "If you want to move js_InitFunctionAndObjectClasses, js_InitFunctionClass, and js_InitObjectClass to the same file, in anticipation of straightening that out, go for it, r=me.\n\nI would pick either vm/GlobalObject.cpp (because I see this as part of global object initialization) *or* jsobj.cpp (because that's where js_InitClass is, and the existing code is tightly coupled to that) rather than jsfun.cpp, but any of the three is fine.", "creation_time": "2011-06-14T19:50:16Z", "bug_id": 655192}, {"text": "Please do start populating vm/GlobalObject.cpp -- that is a righteous place and trend to foster.\n\n/be", "count": 47, "id": 5532178, "author": "brendan@mozilla.org", "time": "2011-06-14T19:54:52Z", "creator": "brendan@mozilla.org", "tags": [], "raw_text": "Please do start populating vm/GlobalObject.cpp -- that is a righteous place and trend to foster.\n\n/be", "creation_time": "2011-06-14T19:54:52Z", "bug_id": 655192, "is_private": false, "attachment_id": null}, {"time": "2011-06-14T20:04:30Z", "id": 5532196, "raw_text": "r- for copy & paste reasons again, but I just wanted to note that GlobalObject::getObjectPrototype looks delicious.\n\nHere you keep support for lazily initializing Object and Function, which is best for now, but boy will it be a happy day when those get initialized as part of global object creation. One less crazy-makin' corner case to worry about.  (I wonder if a bug or two doesn't lurk there, now that I think about it. Even newGlobal never returns a truly empty global object for the fuzzer to abuse.)", "creation_time": "2011-06-14T20:04:30Z", "bug_id": 655192, "tags": [], "is_private": false, "text": "Comment on attachment 530519\nRewrite js_InitFunctionAndObjectClasses to not recur horribly and inscrutably\n\nr- for copy & paste reasons again, but I just wanted to note that GlobalObject::getObjectPrototype looks delicious.\n\nHere you keep support for lazily initializing Object and Function, which is best for now, but boy will it be a happy day when those get initialized as part of global object creation. One less crazy-makin' corner case to worry about.  (I wonder if a bug or two doesn't lurk there, now that I think about it. Even newGlobal never returns a truly empty global object for the fuzzer to abuse.)", "count": 48, "author": "jorendorff@mozilla.com", "creator": "jorendorff@mozilla.com", "attachment_id": 530519}, {"creator": "jwalden@mit.edu", "attachment_id": null, "text": "http://hg.mozilla.org/tracemonkey/rev/09326129c5c3 for declaring XML variables late\nhttp://hg.mozilla.org/tracemonkey/rev/d3daeb8ebbd6 to update the initSharingEmptyShape comment\n\nMore soon.", "count": 49, "author": "jwalden@mit.edu", "bug_id": 655192, "creation_time": "2011-06-16T20:16:19Z", "raw_text": "http://hg.mozilla.org/tracemonkey/rev/09326129c5c3 for declaring XML variables late\nhttp://hg.mozilla.org/tracemonkey/rev/d3daeb8ebbd6 to update the initSharingEmptyShape comment\n\nMore soon.", "tags": [], "is_private": false, "time": "2011-06-16T20:16:19Z", "id": 5537553}, {"author": "cdleary@acm.org", "text": "cdleary-bot mozilla-central merge info:\nhttp://hg.mozilla.org/mozilla-central/rev/09326129c5c3\nhttp://hg.mozilla.org/mozilla-central/rev/d3daeb8ebbd6\nNote: not marking as fixed because fixed-in-tracemonkey is not present on the whiteboard.", "count": 50, "attachment_id": null, "creator": "cdleary@acm.org", "id": 5544236, "time": "2011-06-21T00:12:48Z", "is_private": false, "tags": [], "bug_id": 655192, "creation_time": "2011-06-21T00:12:48Z", "raw_text": "cdleary-bot mozilla-central merge info:\nhttp://hg.mozilla.org/mozilla-central/rev/09326129c5c3\nhttp://hg.mozilla.org/mozilla-central/rev/d3daeb8ebbd6\nNote: not marking as fixed because fixed-in-tracemonkey is not present on the whiteboard."}]}}}