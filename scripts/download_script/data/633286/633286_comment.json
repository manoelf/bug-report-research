{"comments": {}, "bugs": {"633286": {"comments": [{"tags": [], "is_private": false, "raw_text": "struct JSRuntime {\n\tJSCompartment *            atomsCompartment;     /*     0     8 */\n\tbool                       atomsCompartmentIsLocked; /*     8     1 */\n\n\t/* XXX 7 bytes hole, try to pack */\n\n\tWrapperVector              compartments;         /*    16    32 */\n\tJSRuntimeState             state;                /*    48     4 */\n\n\t/* XXX 4 bytes hole, try to pack */\n\n\tJSContextCallback          cxCallback;           /*    56     8 */\n\t/* --- cacheline 1 boundary (64 bytes) --- */\n\tJSCompartmentCallback      compartmentCallback;  /*    64     8 */\n\tJSActivityCallback         activityCallback;     /*    72     8 */\n\tvoid *                     activityCallbackArg;  /*    80     8 */\n\tuint32                     protoHazardShape;     /*    88     4 */\n\n\t/* XXX 4 bytes hole, try to pack */\n\n\tGCChunkSet                 gcChunkSet;           /*    96    32 */\n\t/* --- cacheline 2 boundary (128 bytes) --- */\n\tRootedValueMap             gcRootsHash;          /*   128    32 */\n\tGCLocks                    gcLocksHash;          /*   160    32 */\n\t/* --- cacheline 3 boundary (192 bytes) --- */\n\tjsrefcount                 gcKeepAtoms;          /*   192     4 */\n\n\t/* XXX 4 bytes hole, try to pack */\n\n\tsize_t                     gcBytes;              /*   200     8 */\n\tsize_t                     gcTriggerBytes;       /*   208     8 */\n\tsize_t                     gcLastBytes;          /*   216     8 */\n\tsize_t                     gcMaxBytes;           /*   224     8 */\n\tsize_t                     gcMaxMallocBytes;     /*   232     8 */\n\tuint32                     gcEmptyArenaPoolLifespan; /*   240     4 */\n\tuint32                     gcNumber;             /*   244     4 */\n\tclass GCMarker *           gcMarkingTracer;      /*   248     8 */\n\t/* --- cacheline 4 boundary (256 bytes) --- */\n\tuint32                     gcTriggerFactor;      /*   256     4 */\n\n\t/* XXX 4 bytes hole, try to pack */\n\n\tint64                      gcJitReleaseTime;     /*   264     8 */\n\tJSGCMode                   gcMode;               /*   272     4 */\n\tvolatile bool              gcIsNeeded;           /*   276     1 */\n\n\t/* XXX 3 bytes hole, try to pack */\n\n\tJSCompartment *            gcTriggerCompartment; /*   280     8 */\n\tJSCompartment *            gcCurrentCompartment; /*   288     8 */\n\tbool                       gcPoke;               /*   296     1 */\n\tbool                       gcMarkAndSweep;       /*   297     1 */\n\tbool                       gcRunning;            /*   298     1 */\n\tbool                       gcRegenShapes;        /*   299     1 */\n\n\t/* XXX 4 bytes hole, try to pack */\n\n\tJSGCCallback               gcCallback;           /*   304     8 */\nprivate:\n\n\tvolatile ptrdiff_t         gcMallocBytes;        /*   312     8 */\n\t/* --- cacheline 5 boundary (320 bytes) --- */\n\tclass GCChunkAllocator *   gcChunkAllocator;     /*   320     8 */\n\tJSTraceDataOp              gcExtraRootsTraceOp;  /*   328     8 */\n\tvoid *                     gcExtraRootsData;     /*   336     8 */\n\tclass Value               NaNValue;              /*   344     8 */\n\tclass Value               negativeInfinityValue; /*   352     8 */\n\tclass Value               positiveInfinityValue; /*   360     8 */\n\tJSFlatString *             emptyString;          /*   368     8 */\n\tJSCList                    contextList;          /*   376    16 */\n\t/* --- cacheline 6 boundary (384 bytes) was 8 bytes ago --- */\n\tJSDebugHooks               globalDebugHooks;     /*   392   144 */\n\t/* --- cacheline 8 boundary (512 bytes) was 24 bytes ago --- */\n\tJSBool                     debugMode;            /*   536     4 */\n\n\t/* XXX 4 bytes hole, try to pack */\n\n\tJSCList                    trapList;             /*   544    16 */\n\tJSCList                    watchPointList;       /*   560    16 */\n\t/* --- cacheline 9 boundary (576 bytes) --- */\n\tvoid *                     data;                 /*   576     8 */\n\tPRLock *                   gcLock;               /*   584     8 */\n\tPRCondVar *                gcDone;               /*   592     8 */\n\tPRCondVar *                requestDone;          /*   600     8 */\n\tuint32                     requestCount;         /*   608     4 */\n\n\t/* XXX 4 bytes hole, try to pack */\n\n\tJSThread *                 gcThread;             /*   616     8 */\n\tclass GCHelperThread      gcHelperThread;        /*   624   200 */\n\t/* --- cacheline 12 boundary (768 bytes) was 56 bytes ago --- */\n\tPRLock *                   rtLock;               /*   824     8 */\n\t/* --- cacheline 13 boundary (832 bytes) --- */\n\tPRCondVar *                stateChange;          /*   832     8 */\n\tPRLock *                   debuggerLock;         /*   840     8 */\n\tclass HashMap<void*, JSThread*, js::DefaultHasher<void*>, js::SystemAllocPolicy> threads; /*   848    32 */\n\tuint32                     debuggerMutations;    /*   880     4 */\n\n\t/* XXX 4 bytes hole, try to pack */\n\n\tJSSecurityCallbacks *      securityCallbacks;    /*   888     8 */\n\t/* --- cacheline 14 boundary (896 bytes) --- */\n\tconst JSStructuredCloneCallbacks  * structuredCloneCallbacks; /*   896     8 */\n\tint32                      propertyRemovals;     /*   904     4 */\n\n\t/* XXX 4 bytes hole, try to pack */\n\n\tclass JSHashTable *        scriptFilenameTable;  /*   912     8 */\n\tJSCList                    scriptFilenamePrefixes; /*   920    16 */\n\tPRLock *                   scriptFilenameTableLock; /*   936     8 */\n\tconst char  *              thousandsSeparator;   /*   944     8 */\n\tconst char  *              decimalSeparator;     /*   952     8 */\n\t/* --- cacheline 15 boundary (960 bytes) --- */\n\tconst char  *              numGrouping;          /*   960     8 */\n\tJSObject *                 anynameObject;        /*   968     8 */\n\tJSObject *                 functionNamespaceObject; /*   976     8 */\n\tvolatile int32             interruptCounter;     /*   984     4 */\n\tvolatile uint32            shapeGen;             /*   988     4 */\n\tJSAtomState                atomState;            /*   992  1248 */\n\t/* --- cacheline 35 boundary (2240 bytes) --- */\n\tJSWrapObjectCallback       wrapObjectCallback;   /*  2240     8 */\n\tJSPreWrapCallback          preWrapObjectCallback; /*  2248     8 */\n\tuint32                     mjitMemoryUsed;       /*  2256     4 */\n\tuint32                     stringMemoryUsed;     /*  2260     4 *\n\n\t/* size: 2264, cachelines: 36, members: 75 */\n\t/* sum members: 2218, holes: 11, sum holes: 46 */\n\t/* last cacheline: 24 bytes */\n};", "text": "struct JSRuntime {\n\tJSCompartment *            atomsCompartment;     /*     0     8 */\n\tbool                       atomsCompartmentIsLocked; /*     8     1 */\n\n\t/* XXX 7 bytes hole, try to pack */\n\n\tWrapperVector              compartments;         /*    16    32 */\n\tJSRuntimeState             state;                /*    48     4 */\n\n\t/* XXX 4 bytes hole, try to pack */\n\n\tJSContextCallback          cxCallback;           /*    56     8 */\n\t/* --- cacheline 1 boundary (64 bytes) --- */\n\tJSCompartmentCallback      compartmentCallback;  /*    64     8 */\n\tJSActivityCallback         activityCallback;     /*    72     8 */\n\tvoid *                     activityCallbackArg;  /*    80     8 */\n\tuint32                     protoHazardShape;     /*    88     4 */\n\n\t/* XXX 4 bytes hole, try to pack */\n\n\tGCChunkSet                 gcChunkSet;           /*    96    32 */\n\t/* --- cacheline 2 boundary (128 bytes) --- */\n\tRootedValueMap             gcRootsHash;          /*   128    32 */\n\tGCLocks                    gcLocksHash;          /*   160    32 */\n\t/* --- cacheline 3 boundary (192 bytes) --- */\n\tjsrefcount                 gcKeepAtoms;          /*   192     4 */\n\n\t/* XXX 4 bytes hole, try to pack */\n\n\tsize_t                     gcBytes;              /*   200     8 */\n\tsize_t                     gcTriggerBytes;       /*   208     8 */\n\tsize_t                     gcLastBytes;          /*   216     8 */\n\tsize_t                     gcMaxBytes;           /*   224     8 */\n\tsize_t                     gcMaxMallocBytes;     /*   232     8 */\n\tuint32                     gcEmptyArenaPoolLifespan; /*   240     4 */\n\tuint32                     gcNumber;             /*   244     4 */\n\tclass GCMarker *           gcMarkingTracer;      /*   248     8 */\n\t/* --- cacheline 4 boundary (256 bytes) --- */\n\tuint32                     gcTriggerFactor;      /*   256     4 */\n\n\t/* XXX 4 bytes hole, try to pack */\n\n\tint64                      gcJitReleaseTime;     /*   264     8 */\n\tJSGCMode                   gcMode;               /*   272     4 */\n\tvolatile bool              gcIsNeeded;           /*   276     1 */\n\n\t/* XXX 3 bytes hole, try to pack */\n\n\tJSCompartment *            gcTriggerCompartment; /*   280     8 */\n\tJSCompartment *            gcCurrentCompartment; /*   288     8 */\n\tbool                       gcPoke;               /*   296     1 */\n\tbool                       gcMarkAndSweep;       /*   297     1 */\n\tbool                       gcRunning;            /*   298     1 */\n\tbool                       gcRegenShapes;        /*   299     1 */\n\n\t/* XXX 4 bytes hole, try to pack */\n\n\tJSGCCallback               gcCallback;           /*   304     8 */\nprivate:\n\n\tvolatile ptrdiff_t         gcMallocBytes;        /*   312     8 */\n\t/* --- cacheline 5 boundary (320 bytes) --- */\n\tclass GCChunkAllocator *   gcChunkAllocator;     /*   320     8 */\n\tJSTraceDataOp              gcExtraRootsTraceOp;  /*   328     8 */\n\tvoid *                     gcExtraRootsData;     /*   336     8 */\n\tclass Value               NaNValue;              /*   344     8 */\n\tclass Value               negativeInfinityValue; /*   352     8 */\n\tclass Value               positiveInfinityValue; /*   360     8 */\n\tJSFlatString *             emptyString;          /*   368     8 */\n\tJSCList                    contextList;          /*   376    16 */\n\t/* --- cacheline 6 boundary (384 bytes) was 8 bytes ago --- */\n\tJSDebugHooks               globalDebugHooks;     /*   392   144 */\n\t/* --- cacheline 8 boundary (512 bytes) was 24 bytes ago --- */\n\tJSBool                     debugMode;            /*   536     4 */\n\n\t/* XXX 4 bytes hole, try to pack */\n\n\tJSCList                    trapList;             /*   544    16 */\n\tJSCList                    watchPointList;       /*   560    16 */\n\t/* --- cacheline 9 boundary (576 bytes) --- */\n\tvoid *                     data;                 /*   576     8 */\n\tPRLock *                   gcLock;               /*   584     8 */\n\tPRCondVar *                gcDone;               /*   592     8 */\n\tPRCondVar *                requestDone;          /*   600     8 */\n\tuint32                     requestCount;         /*   608     4 */\n\n\t/* XXX 4 bytes hole, try to pack */\n\n\tJSThread *                 gcThread;             /*   616     8 */\n\tclass GCHelperThread      gcHelperThread;        /*   624   200 */\n\t/* --- cacheline 12 boundary (768 bytes) was 56 bytes ago --- */\n\tPRLock *                   rtLock;               /*   824     8 */\n\t/* --- cacheline 13 boundary (832 bytes) --- */\n\tPRCondVar *                stateChange;          /*   832     8 */\n\tPRLock *                   debuggerLock;         /*   840     8 */\n\tclass HashMap<void*, JSThread*, js::DefaultHasher<void*>, js::SystemAllocPolicy> threads; /*   848    32 */\n\tuint32                     debuggerMutations;    /*   880     4 */\n\n\t/* XXX 4 bytes hole, try to pack */\n\n\tJSSecurityCallbacks *      securityCallbacks;    /*   888     8 */\n\t/* --- cacheline 14 boundary (896 bytes) --- */\n\tconst JSStructuredCloneCallbacks  * structuredCloneCallbacks; /*   896     8 */\n\tint32                      propertyRemovals;     /*   904     4 */\n\n\t/* XXX 4 bytes hole, try to pack */\n\n\tclass JSHashTable *        scriptFilenameTable;  /*   912     8 */\n\tJSCList                    scriptFilenamePrefixes; /*   920    16 */\n\tPRLock *                   scriptFilenameTableLock; /*   936     8 */\n\tconst char  *              thousandsSeparator;   /*   944     8 */\n\tconst char  *              decimalSeparator;     /*   952     8 */\n\t/* --- cacheline 15 boundary (960 bytes) --- */\n\tconst char  *              numGrouping;          /*   960     8 */\n\tJSObject *                 anynameObject;        /*   968     8 */\n\tJSObject *                 functionNamespaceObject; /*   976     8 */\n\tvolatile int32             interruptCounter;     /*   984     4 */\n\tvolatile uint32            shapeGen;             /*   988     4 */\n\tJSAtomState                atomState;            /*   992  1248 */\n\t/* --- cacheline 35 boundary (2240 bytes) --- */\n\tJSWrapObjectCallback       wrapObjectCallback;   /*  2240     8 */\n\tJSPreWrapCallback          preWrapObjectCallback; /*  2248     8 */\n\tuint32                     mjitMemoryUsed;       /*  2256     4 */\n\tuint32                     stringMemoryUsed;     /*  2260     4 *\n\n\t/* size: 2264, cachelines: 36, members: 75 */\n\t/* sum members: 2218, holes: 11, sum holes: 46 */\n\t/* last cacheline: 24 bytes */\n};", "attachment_id": null, "id": 5270346, "creation_time": "2011-02-10T19:41:07Z", "time": "2011-02-10T19:41:07Z", "bug_id": 633286, "count": 0, "creator": "jmuizelaar@mozilla.com", "author": "jmuizelaar@mozilla.com"}, {"is_private": false, "tags": [], "raw_text": "A related important question is: are the hot JSRuntime field accesses scattered across cache lines (thereby decreasing density)?  I think jseward was measuring exactly this (but the hit-count per word was capped at 256 IIRC, so it didn't really let us differentiate the really hot from non-entirely-cold).", "id": 5270377, "attachment_id": null, "text": "A related important question is: are the hot JSRuntime field accesses scattered across cache lines (thereby decreasing density)?  I think jseward was measuring exactly this (but the hit-count per word was capped at 256 IIRC, so it didn't really let us differentiate the really hot from non-entirely-cold).", "creation_time": "2011-02-10T19:48:03Z", "time": "2011-02-10T19:48:03Z", "bug_id": 633286, "count": 1, "creator": "mail@lukewagner.name", "author": "mail@lukewagner.name"}, {"is_private": false, "tags": [], "raw_text": "jmuizelaar, I assume you used an automatic tool to find this?\n\nI think there's only one JSRuntime at a time (or maybe a small number?) so Luke's hot/cold question is more relevant.", "id": 5276276, "attachment_id": null, "text": "jmuizelaar, I assume you used an automatic tool to find this?\n\nI think there's only one JSRuntime at a time (or maybe a small number?) so Luke's hot/cold question is more relevant.", "creation_time": "2011-02-14T03:12:39Z", "time": "2011-02-14T03:12:39Z", "bug_id": 633286, "count": 2, "creator": "n.nethercote@gmail.com", "author": "n.nethercote@gmail.com"}, {"attachment_id": null, "id": 5277960, "text": "(In reply to comment #2)\n> jmuizelaar, I assume you used an automatic tool to find this?\n\nIIRC he used pahole <http://lwn.net/Articles/206805/>", "creation_time": "2011-02-14T21:13:47Z", "is_private": false, "tags": [], "raw_text": "(In reply to comment #2)\n> jmuizelaar, I assume you used an automatic tool to find this?\n\nIIRC he used pahole <http://lwn.net/Articles/206805/>", "author": "ehsan.akhgari@gmail.com", "creator": "ehsan.akhgari@gmail.com", "time": "2011-02-14T21:13:47Z", "count": 3, "bug_id": 633286}, {"count": 4, "raw_text": "(In reply to comment #2)\n> jmuizelaar, I assume you used an automatic tool to find this?\n\nSee also bug 492185 (a static analysis tool).\n\n> I think there's only one JSRuntime at a time (or maybe a small number?) so\n> Luke's hot/cold question is more relevant.\n\nSee also bug 452029 comment 7.\n\nPatch reviewers should look out for alignment slop, esp. with adding bool and smaller int members. Heat requires measurement, but there's no reason to let useless padding creep in. It may be \"holy\" but it is unrighteous.\n\n/be", "bug_id": 633286, "is_private": false, "tags": [], "time": "2011-02-15T02:07:30Z", "creation_time": "2011-02-15T02:07:30Z", "author": "brendan@mozilla.org", "id": 5278842, "attachment_id": null, "creator": "brendan@mozilla.org", "text": "(In reply to comment #2)\n> jmuizelaar, I assume you used an automatic tool to find this?\n\nSee also bug 492185 (a static analysis tool).\n\n> I think there's only one JSRuntime at a time (or maybe a small number?) so\n> Luke's hot/cold question is more relevant.\n\nSee also bug 452029 comment 7.\n\nPatch reviewers should look out for alignment slop, esp. with adding bool and smaller int members. Heat requires measurement, but there's no reason to let useless padding creep in. It may be \"holy\" but it is unrighteous.\n\n/be"}]}}}