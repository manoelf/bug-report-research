{"comments": {}, "bugs": {"704842": {"comments": [{"time": "2011-11-23T16:14:33Z", "attachment_id": null, "text": "In 4.0, you can use boolean charts to get all bugs where only the reporter commented in the bug:\n\nNOT  \"Commenter\"  \"is not equal to\"  \"%reporter%\"\n\nIn 4.2 and trunk, this no longer works.\n\nThe difference in the SQL query is:\n\n4.0: AND NOT ((`longdescs_0`.`who` IS NOT NULL))\n4.2: AND NOT (`commenter_1`.`bug_id` IS NULL)\n\n\nAs this query is used to track bugs which didn't get traction (no other commenters besides the reporter), this is a pretty severe regression for triagers.", "creation_time": "2011-11-23T16:14:33Z", "raw_text": "In 4.0, you can use boolean charts to get all bugs where only the reporter commented in the bug:\n\nNOT  \"Commenter\"  \"is not equal to\"  \"%reporter%\"\n\nIn 4.2 and trunk, this no longer works.\n\nThe difference in the SQL query is:\n\n4.0: AND NOT ((`longdescs_0`.`who` IS NOT NULL))\n4.2: AND NOT (`commenter_1`.`bug_id` IS NULL)\n\n\nAs this query is used to track bugs which didn't get traction (no other commenters besides the reporter), this is a pretty severe regression for triagers.", "bug_id": 704842, "id": 5868526, "tags": [], "count": 0, "is_private": false, "author": "LpSolit@gmail.com", "creator": "LpSolit@gmail.com"}, {"bug_id": 704842, "is_private": false, "count": 1, "tags": [], "id": 5874592, "text": "Hmm, I'm having hard time understanding how it no longer work. Looks like a \"NOT commenter notequals %reporter%\" search generates following SQL (only relevant parts) on 4.0:\n\n  SELECT 1 FROM bugs LEFT JOIN longdescs AS longdescs_0 ON (longdescs_0.bug_id = bugs.bug_id AND longdescs_0.isprivate < 1 AND longdescs_0.who IN(SELECT userid FROM profiles WHERE profiles.userid != bugs.reporter)) WHERE NOT((longdescs_0.who IS NOT NULL))\n\nand on 4.2:\n\n  SELECT 1 FROM bugs INNER JOIN longdescs AS commenter_1 ON bugs.bug_id = commenter_1.bug_id AND commenter_1.who = bugs.reporter WHERE NOT( commenter_1.bug_id IS NULL )\n\nWhich part of that SQL is incorrect?", "time": "2011-11-27T22:21:02Z", "attachment_id": null, "raw_text": "Hmm, I'm having hard time understanding how it no longer work. Looks like a \"NOT commenter notequals %reporter%\" search generates following SQL (only relevant parts) on 4.0:\n\n  SELECT 1 FROM bugs LEFT JOIN longdescs AS longdescs_0 ON (longdescs_0.bug_id = bugs.bug_id AND longdescs_0.isprivate < 1 AND longdescs_0.who IN(SELECT userid FROM profiles WHERE profiles.userid != bugs.reporter)) WHERE NOT((longdescs_0.who IS NOT NULL))\n\nand on 4.2:\n\n  SELECT 1 FROM bugs INNER JOIN longdescs AS commenter_1 ON bugs.bug_id = commenter_1.bug_id AND commenter_1.who = bugs.reporter WHERE NOT( commenter_1.bug_id IS NULL )\n\nWhich part of that SQL is incorrect?", "creation_time": "2011-11-27T22:21:02Z", "creator": "wicked@sci.fi", "author": "wicked@sci.fi"}, {"text": "(In reply to Teemu Mannermaa (:wicked) from comment #1)\n>   SELECT 1 FROM bugs INNER JOIN longdescs AS commenter_1 ON bugs.bug_id =\n> commenter_1.bug_id AND commenter_1.who = bugs.reporter WHERE NOT(\n> commenter_1.bug_id IS NULL )\n> \n> Which part of that SQL is incorrect?\n\nAs all bugs have a description, commenter_1.who = bugs.reporter will match for all bugs. The correct SQL query is:\n\nSELECT bugs.bug_id FROM bugs LEFT JOIN longdescs AS ld ON ld.bug_id = bugs.bug_id AND ld.who != bugs.reporter WHERE ld.bug_id IS NULL.", "attachment_id": null, "time": "2011-11-28T19:01:15Z", "raw_text": "(In reply to Teemu Mannermaa (:wicked) from comment #1)\n>   SELECT 1 FROM bugs INNER JOIN longdescs AS commenter_1 ON bugs.bug_id =\n> commenter_1.bug_id AND commenter_1.who = bugs.reporter WHERE NOT(\n> commenter_1.bug_id IS NULL )\n> \n> Which part of that SQL is incorrect?\n\nAs all bugs have a description, commenter_1.who = bugs.reporter will match for all bugs. The correct SQL query is:\n\nSELECT bugs.bug_id FROM bugs LEFT JOIN longdescs AS ld ON ld.bug_id = bugs.bug_id AND ld.who != bugs.reporter WHERE ld.bug_id IS NULL.", "creation_time": "2011-11-28T19:01:15Z", "bug_id": 704842, "tags": [], "is_private": false, "count": 2, "id": 5876275, "creator": "LpSolit@gmail.com", "author": "LpSolit@gmail.com"}, {"attachment_id": null, "time": "2011-11-29T10:54:29Z", "text": "Did you try just \"Commenter is not equal to reporter\"? Custom Search works considerably more logically than the old Boolean Charts did.", "raw_text": "Did you try just \"Commenter is not equal to reporter\"? Custom Search works considerably more logically than the old Boolean Charts did.", "creation_time": "2011-11-29T10:54:29Z", "bug_id": 704842, "id": 5878409, "is_private": false, "count": 3, "tags": [], "author": "mkanat@bugzilla.org", "creator": "mkanat@bugzilla.org"}, {"creator": "mkanat@bugzilla.org", "author": "mkanat@bugzilla.org", "bug_id": 704842, "count": 4, "is_private": false, "tags": [], "id": 5878410, "text": "Oh wait, you want bugs where the *only* commenter is the reporter.", "time": "2011-11-29T10:55:05Z", "attachment_id": null, "raw_text": "Oh wait, you want bugs where the *only* commenter is the reporter.", "creation_time": "2011-11-29T10:55:05Z"}, {"creation_time": "2011-11-29T10:57:31Z", "raw_text": "I should probably add xt tests for this; that will help me understand what's going on better and look for a fix.", "attachment_id": null, "time": "2011-11-29T10:57:31Z", "text": "I should probably add xt tests for this; that will help me understand what's going on better and look for a fix.", "id": 5878413, "count": 5, "is_private": false, "tags": [], "bug_id": 704842, "author": "mkanat@bugzilla.org", "creator": "mkanat@bugzilla.org"}, {"count": 6, "is_private": false, "tags": [], "id": 6063822, "bug_id": 704842, "creation_time": "2012-02-15T16:11:03Z", "raw_text": "We decided it wasn't a blocker for 4.2 final, but still good to fix for 4.2.x.", "text": "We decided it wasn't a blocker for 4.2 final, but still good to fix for 4.2.x.", "time": "2012-02-15T16:11:03Z", "attachment_id": null, "creator": "LpSolit@gmail.com", "author": "LpSolit@gmail.com"}, {"bug_id": 704842, "id": 6204953, "is_private": false, "count": 7, "tags": [], "time": "2012-04-07T00:11:13Z", "attachment_id": null, "text": "As far as I can tell, the code in _user_nonchanged() in Search.pm is wrong (this is the code which generates this part of the query).", "raw_text": "As far as I can tell, the code in _user_nonchanged() in Search.pm is wrong (this is the code which generates this part of the query).", "creation_time": "2012-04-07T00:11:13Z", "author": "LpSolit@gmail.com", "creator": "LpSolit@gmail.com"}, {"raw_text": "This patch fixes the problem described in this bug, but now 120 xt tests fail complaining that when using notequals and other not* operators, they do not find bugs with no attachments, flags or CC members. IMO, this doesn't make sense. If I'm looking for bugs where the attachment author is not foo@bar.com, I only care about bugs where there is an attachment and this attachment author is not that guy. Also returning bugs with no attachments is IMO not what we want here. This is rather the job of NOT(attachment author is foo@bar.com).", "creation_time": "2012-04-07T22:52:50Z", "text": "Created attachment 613146\nWIP, v0.1\n\nThis patch fixes the problem described in this bug, but now 120 xt tests fail complaining that when using notequals and other not* operators, they do not find bugs with no attachments, flags or CC members. IMO, this doesn't make sense. If I'm looking for bugs where the attachment author is not foo@bar.com, I only care about bugs where there is an attachment and this attachment author is not that guy. Also returning bugs with no attachments is IMO not what we want here. This is rather the job of NOT(attachment author is foo@bar.com).", "time": "2012-04-07T22:52:50Z", "attachment_id": 613146, "tags": [], "count": 8, "is_private": false, "id": 6205838, "bug_id": 704842, "creator": "LpSolit@gmail.com", "author": "LpSolit@gmail.com"}, {"author": "LpSolit@gmail.com", "creator": "LpSolit@gmail.com", "bug_id": 704842, "id": 6205840, "count": 9, "is_private": false, "tags": [], "attachment_id": null, "time": "2012-04-07T22:54:54Z", "text": "To make things clear: \"attacher is not foo\" means that there is an attacher, but this attacher is not foo. This doesn't mean \"there is no attacher or this attacher is not foo\".", "raw_text": "To make things clear: \"attacher is not foo\" means that there is an attacher, but this attacher is not foo. This doesn't mean \"there is no attacher or this attacher is not foo\".", "creation_time": "2012-04-07T22:54:54Z"}, {"bug_id": 704842, "tags": [], "is_private": false, "count": 10, "id": 6209168, "text": "(In reply to Fr\u00e9d\u00e9ric Buclin from comment #9)\n> To make things clear: \"attacher is not foo\" means that there is an attacher,\n> but this attacher is not foo. This doesn't mean \"there is no attacher or\n> this attacher is not foo\".\n\nI filed a separate bug about this problematic, see bug 743883.", "time": "2012-04-10T01:03:36Z", "attachment_id": null, "raw_text": "(In reply to Fr\u00e9d\u00e9ric Buclin from comment #9)\n> To make things clear: \"attacher is not foo\" means that there is an attacher,\n> but this attacher is not foo. This doesn't mean \"there is no attacher or\n> this attacher is not foo\".\n\nI filed a separate bug about this problematic, see bug 743883.", "creation_time": "2012-04-10T01:03:36Z", "creator": "LpSolit@gmail.com", "author": "LpSolit@gmail.com"}, {"bug_id": 704842, "id": 7453349, "tags": [], "is_private": false, "count": 11, "attachment_id": null, "time": "2013-05-22T22:14:49Z", "text": "Bugzilla 4.2 is now restricted to security fixes only.", "raw_text": "Bugzilla 4.2 is now restricted to security fixes only.", "creation_time": "2013-05-22T22:14:49Z", "author": "LpSolit@gmail.com", "creator": "LpSolit@gmail.com"}, {"author": "LpSolit@gmail.com", "creator": "LpSolit@gmail.com", "attachment_id": null, "time": "2016-06-10T15:30:25Z", "text": "*** Bug 1279508 has been marked as a duplicate of this bug. ***", "creation_time": "2016-06-10T15:30:25Z", "raw_text": "", "bug_id": 704842, "id": 11478568, "tags": [], "count": 12, "is_private": false}, {"author": "mliska@suse.cz", "creator": "mliska@suse.cz", "time": "2016-06-13T14:14:19Z", "attachment_id": null, "text": "Thanks for marking my duplicate, anyway, may I ask about progress of the bug? It has been untouched for more than 3 years now.\n\nThanks", "creation_time": "2016-06-13T14:14:19Z", "raw_text": "Thanks for marking my duplicate, anyway, may I ask about progress of the bug? It has been untouched for more than 3 years now.\n\nThanks", "bug_id": 704842, "id": 11481844, "count": 13, "is_private": false, "tags": []}]}}}