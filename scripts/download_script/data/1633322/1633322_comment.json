{"bugs": {"1633322": {"comments": [{"id": 14779350, "bug_id": 1633322, "author": "petru.lingurar@softvision.ro", "tags": [], "creator": "petru.lingurar@softvision.ro", "attachment_id": null, "is_private": false, "raw_text": "Seen while browsing github.com in Fenix / GeckoView Example by logging the INPUT_RESULT PZC returns.\nThe page is too long to fit the screen but when scrolling it GV returns `INPUT_RESULT_HANDLED_CONTENT` signaling the webpage handled the scroll and not the browser. I think this is an error.\n\n(`InputResult` log was added [here](https://github.com/mozilla-mobile/android-components/blob/cd134a34c94a4419167aa55b7c09babc9b6f60d8/components/browser/engine-gecko-beta/src/main/java/mozilla/components/browser/engine/gecko/NestedGeckoView.kt#L67))\n(`apz.inputqueue` log was added [here](https://searchfox.org/mozilla-central/rev/d2cec90777d573585f8477d5170892e5dcdfb0ab/gfx/layers/apz/src/InputQueue.cpp#171))\n> 9:05:06.725 I/apz.inputqueue: Line 185: Will consume touch event\n9:05:06.725 I/InputResult: INPUT_RESULT_HANDLED_CONTENT\n9:05:06.787 I/apz.inputqueue: Line 182: dropping event due to block 0xadcc6380 being in slop\n9:05:06.787 I/InputResult: INPUT_RESULT_HANDLED\n9:05:06.803 I/apz.inputqueue: Line 185: Will consume touch event\n9:05:06.803 I/InputResult: INPUT_RESULT_HANDLED_CONTENT\n9:05:06.819 I/apz.inputqueue: Line 185: Will consume touch event\n9:05:06.820 I/InputResult: INPUT_RESULT_HANDLED_CONTENT\n9:05:06.836 I/apz.inputqueue: Line 185: Will consume touch event\n9:05:06.836 I/InputResult: INPUT_RESULT_HANDLED_CONTENT\n...\n\nI tried to follow with logs what happens in nsWindow.cpp based on `nsEventStatus_eConsumeDoDefault` but it seems like this doesn't reach nsWindow.", "time": "2020-04-27T06:08:24Z", "text": "Seen while browsing github.com in Fenix / GeckoView Example by logging the INPUT_RESULT PZC returns.\nThe page is too long to fit the screen but when scrolling it GV returns `INPUT_RESULT_HANDLED_CONTENT` signaling the webpage handled the scroll and not the browser. I think this is an error.\n\n(`InputResult` log was added [here](https://github.com/mozilla-mobile/android-components/blob/cd134a34c94a4419167aa55b7c09babc9b6f60d8/components/browser/engine-gecko-beta/src/main/java/mozilla/components/browser/engine/gecko/NestedGeckoView.kt#L67))\n(`apz.inputqueue` log was added [here](https://searchfox.org/mozilla-central/rev/d2cec90777d573585f8477d5170892e5dcdfb0ab/gfx/layers/apz/src/InputQueue.cpp#171))\n> 9:05:06.725 I/apz.inputqueue: Line 185: Will consume touch event\n9:05:06.725 I/InputResult: INPUT_RESULT_HANDLED_CONTENT\n9:05:06.787 I/apz.inputqueue: Line 182: dropping event due to block 0xadcc6380 being in slop\n9:05:06.787 I/InputResult: INPUT_RESULT_HANDLED\n9:05:06.803 I/apz.inputqueue: Line 185: Will consume touch event\n9:05:06.803 I/InputResult: INPUT_RESULT_HANDLED_CONTENT\n9:05:06.819 I/apz.inputqueue: Line 185: Will consume touch event\n9:05:06.820 I/InputResult: INPUT_RESULT_HANDLED_CONTENT\n9:05:06.836 I/apz.inputqueue: Line 185: Will consume touch event\n9:05:06.836 I/InputResult: INPUT_RESULT_HANDLED_CONTENT\n...\n\nI tried to follow with logs what happens in nsWindow.cpp based on `nsEventStatus_eConsumeDoDefault` but it seems like this doesn't reach nsWindow.", "creation_time": "2020-04-27T06:08:24Z", "count": 0}, {"creator": "etoop@mozilla.com", "attachment_id": null, "author": "etoop@mozilla.com", "tags": [], "bug_id": 1633322, "id": 14785731, "count": 1, "raw_text": "", "time": "2020-04-29T08:35:20Z", "creation_time": "2020-04-29T08:35:20Z", "text": "\n\n*** This bug has been marked as a duplicate of bug 1631754 ***", "is_private": false}, {"tags": [], "author": "petru.lingurar@softvision.ro", "attachment_id": null, "creator": "petru.lingurar@softvision.ro", "id": 14795227, "bug_id": 1633322, "count": 2, "is_private": false, "text": "Sorry, I copy-pasted the title but forgot to modify it to express the issue.\nThis problem is similar to the one in bug 1631754.\n.. Just that we get the reverse. `INPUT_RESULT_HANDLED_CONTENT` instead of the expected `INPUT_RESULT_HANDLED` on some specific sites.\nNot sure if this will also be resolved by bug 1631754.\nIf you think this is still a dupe please close it.", "time": "2020-05-04T08:46:39Z", "creation_time": "2020-05-04T08:46:39Z", "raw_text": "Sorry, I copy-pasted the title but forgot to modify it to express the issue.\nThis problem is similar to the one in bug 1631754.\n.. Just that we get the reverse. `INPUT_RESULT_HANDLED_CONTENT` instead of the expected `INPUT_RESULT_HANDLED` on some specific sites.\nNot sure if this will also be resolved by bug 1631754.\nIf you think this is still a dupe please close it."}, {"author": "kats@bugmash.staktrace.com", "tags": [], "attachment_id": null, "text": "(In reply to Petru-Mugurel Lingurar[:petru] from comment #0)\n> Seen while browsing github.com\n\nThis is the root page on github.com, or some specific subpage? And are you logged in or out? (you get different content if you are logged in)", "creation_time": "2020-05-04T13:17:07Z", "creator": "kats@bugmash.staktrace.com", "id": 14795721, "bug_id": 1633322, "count": 3, "is_private": false, "raw_text": "(In reply to Petru-Mugurel Lingurar[:petru] from comment #0)\n> Seen while browsing github.com\n\nThis is the root page on github.com, or some specific subpage? And are you logged in or out? (you get different content if you are logged in)", "time": "2020-05-04T13:17:07Z"}, {"id": 14797317, "bug_id": 1633322, "author": "petru.lingurar@softvision.ro", "tags": [], "creator": "petru.lingurar@softvision.ro", "attachment_id": null, "is_private": false, "raw_text": "Just tried it on geckoview-example. Based on reports from here https://github.com/mozilla-mobile/fenix/issues/9720 I see the issue reproducing on:\n- https://github.com (not logged in)\n- https://www.phonearena.com\n- https://www.latribune.fr\n- https://www.w3schools.com\n\nOn all of these sites the page scroll works fine and scrolls are expected (because of the visuals) to be handled by Gecko and such PZC to return `INPUT_RESULT_HANDLED`.\nBut in the majority of cases the return is `INPUT_RESULT_HANDLED_CONTENT`.\nStrangely, scrolling from the same positions (in page) sometimes may return `INPUT_RESULT_HANDLED` for the entire scroll gesture, but most of the times (even from the same starting position if tried again) the return is `INPUT_RESULT_HANDLED_CONTENT`.", "creation_time": "2020-05-05T08:35:45Z", "text": "Just tried it on geckoview-example. Based on reports from here https://github.com/mozilla-mobile/fenix/issues/9720 I see the issue reproducing on:\n- https://github.com (not logged in)\n- https://www.phonearena.com\n- https://www.latribune.fr\n- https://www.w3schools.com\n\nOn all of these sites the page scroll works fine and scrolls are expected (because of the visuals) to be handled by Gecko and such PZC to return `INPUT_RESULT_HANDLED`.\nBut in the majority of cases the return is `INPUT_RESULT_HANDLED_CONTENT`.\nStrangely, scrolling from the same positions (in page) sometimes may return `INPUT_RESULT_HANDLED` for the entire scroll gesture, but most of the times (even from the same starting position if tried again) the return is `INPUT_RESULT_HANDLED_CONTENT`.", "time": "2020-05-05T08:35:45Z", "count": 4}, {"is_private": false, "raw_text": "The reason for this is that the pages have apz-aware listeners on the root element. For github.com, there is a touchmove listener registered on the `<html>` element which is the root scroller.", "text": "The reason for this is that the pages have apz-aware listeners on the root element. For github.com, there is a touchmove listener registered on the `<html>` element which is the root scroller.", "time": "2020-05-14T13:27:47Z", "creation_time": "2020-05-14T13:27:47Z", "count": 5, "id": 14819336, "bug_id": 1633322, "author": "kats@bugmash.staktrace.com", "tags": [], "creator": "kats@bugmash.staktrace.com", "attachment_id": null}, {"id": 14822289, "bug_id": 1633322, "author": "petru.lingurar@softvision.ro", "tags": [], "creator": "petru.lingurar@softvision.ro", "attachment_id": null, "is_private": false, "raw_text": "Thank you for looking into this.\nSo as I understand PZC works as intended here even though we actually scrolled the page.\n\nWe needed this in Fenix to properly differentiate if the browser / the website consumed the scroll to correctly animate pull down to refresh / the urlBar.\nWhat intrigues me is that I see both this and bug 1631754 not being issues on Fennec which correctly animates the AwesomeBar and shows the overflow effect so that makes me wonder if we should better use those apis..", "text": "Thank you for looking into this.\nSo as I understand PZC works as intended here even though we actually scrolled the page.\n\nWe needed this in Fenix to properly differentiate if the browser / the website consumed the scroll to correctly animate pull down to refresh / the urlBar.\nWhat intrigues me is that I see both this and bug 1631754 not being issues on Fennec which correctly animates the AwesomeBar and shows the overflow effect so that makes me wonder if we should better use those apis..", "creation_time": "2020-05-15T09:52:33Z", "time": "2020-05-15T09:52:33Z", "count": 6}, {"creation_time": "2020-05-15T13:42:51Z", "text": "There's two different things you're trying to do here: animate the dynamic toolbar, and implement pull to refresh.\n\nFor the dynamic toolbar, I don't think you need to rely much on whether or not content used the event. If you rely on that you open yourself up to an attack vector where the page can consume the events, prevent the Fenix dynamic toolbar from becoming visible, and then spoof its own image of the dynamic toolbar. That's a security bug we worked hard to avoid in previous implementations. So I think you should be able to have a decent dynamic toolbar implementation if you pretty much ignore what APZ is doing and just drive the show/hide behaviour based on user input.\n\nFor the pull-to-refresh, the situation is quite different. In that case you only want the behaviour to occur if you know for sure the event wasn't consumed by APZ or content. That information can't be obtained just by the return value from ReceiveInputEvent, because at that point APZ itself doesn't necessarily know what the input event triggered. The input event may be handled asynchronously after waiting for content to run JS and so on. So IMO to handle pull-to-refresh properly you need an API similar to overscroll - after APZ/content is done with its stuff you would get a callback saying \"this is the unused amount of scroll that occurred\" and then you can decide if you want to use it for pull-to-refresh or not.", "attachment_id": null, "author": "kats@bugmash.staktrace.com", "tags": [], "raw_text": "There's two different things you're trying to do here: animate the dynamic toolbar, and implement pull to refresh.\n\nFor the dynamic toolbar, I don't think you need to rely much on whether or not content used the event. If you rely on that you open yourself up to an attack vector where the page can consume the events, prevent the Fenix dynamic toolbar from becoming visible, and then spoof its own image of the dynamic toolbar. That's a security bug we worked hard to avoid in previous implementations. So I think you should be able to have a decent dynamic toolbar implementation if you pretty much ignore what APZ is doing and just drive the show/hide behaviour based on user input.\n\nFor the pull-to-refresh, the situation is quite different. In that case you only want the behaviour to occur if you know for sure the event wasn't consumed by APZ or content. That information can't be obtained just by the return value from ReceiveInputEvent, because at that point APZ itself doesn't necessarily know what the input event triggered. The input event may be handled asynchronously after waiting for content to run JS and so on. So IMO to handle pull-to-refresh properly you need an API similar to overscroll - after APZ/content is done with its stuff you would get a callback saying \"this is the unused amount of scroll that occurred\" and then you can decide if you want to use it for pull-to-refresh or not.", "time": "2020-05-15T13:42:51Z", "is_private": false, "count": 7, "bug_id": 1633322, "id": 14822824, "creator": "kats@bugmash.staktrace.com"}, {"tags": [], "author": "snorp@snorp.net", "attachment_id": null, "creation_time": "2020-05-15T14:19:26Z", "text": "(In reply to Kartikaya Gupta (email:kats@mozilla.com) from comment #7)\n> There's two different things you're trying to do here: animate the dynamic toolbar, and implement pull to refresh.\n> \n> For the dynamic toolbar, I don't think you need to rely much on whether or not content used the event. If you rely on that you open yourself up to an attack vector where the page can consume the events, prevent the Fenix dynamic toolbar from becoming visible, and then spoof its own image of the dynamic toolbar. That's a security bug we worked hard to avoid in previous implementations. So I think you should be able to have a decent dynamic toolbar implementation if you pretty much ignore what APZ is doing and just drive the show/hide behaviour based on user input.\n\nI don't agree with this. You have to care what APZ/Gecko is doing because for things like Google Maps you want to suspend any toolbar changes while the user is panning the map around. The Fennec toolbar animator was intimately tied to what APZ/Gecko were doing.\n\nThe spoofing problem is easily fixed by showing the toolbar when an ACTION_DOWN event was not used for a toplevel pan/zoom. Fenix is doing this today.\n\nThe toolbar is a probably the only place where having a separation of app vs gecko creates a problem. The dynamic toolbar animator from Fennec wasn't chosen for this because I felt that the screenshot hack was too gross to be the right API for GV. In Fennec it was more justifiable.\n\n> \n> For the pull-to-refresh, the situation is quite different. In that case you only want the behaviour to occur if you know for sure the event wasn't consumed by APZ or content. That information can't be obtained just by the return value from ReceiveInputEvent, because at that point APZ itself doesn't necessarily know what the input event triggered. The input event may be handled asynchronously after waiting for content to run JS and so on. So IMO to handle pull-to-refresh properly you need an API similar to overscroll - after APZ/content is done with its stuff you would get a callback saying \"this is the unused amount of scroll that occurred\" and then you can decide if you want to use it for pull-to-refresh or not.\n\nYeah, overscroll might be a better fit for pull-to-refresh. I have a patch that hooks the glow effect back up, we could also then expose that stuff to apps for their own usage.", "creator": "snorp@snorp.net", "id": 14822894, "bug_id": 1633322, "count": 8, "is_private": false, "time": "2020-05-15T14:19:26Z", "raw_text": "(In reply to Kartikaya Gupta (email:kats@mozilla.com) from comment #7)\n> There's two different things you're trying to do here: animate the dynamic toolbar, and implement pull to refresh.\n> \n> For the dynamic toolbar, I don't think you need to rely much on whether or not content used the event. If you rely on that you open yourself up to an attack vector where the page can consume the events, prevent the Fenix dynamic toolbar from becoming visible, and then spoof its own image of the dynamic toolbar. That's a security bug we worked hard to avoid in previous implementations. So I think you should be able to have a decent dynamic toolbar implementation if you pretty much ignore what APZ is doing and just drive the show/hide behaviour based on user input.\n\nI don't agree with this. You have to care what APZ/Gecko is doing because for things like Google Maps you want to suspend any toolbar changes while the user is panning the map around. The Fennec toolbar animator was intimately tied to what APZ/Gecko were doing.\n\nThe spoofing problem is easily fixed by showing the toolbar when an ACTION_DOWN event was not used for a toplevel pan/zoom. Fenix is doing this today.\n\nThe toolbar is a probably the only place where having a separation of app vs gecko creates a problem. The dynamic toolbar animator from Fennec wasn't chosen for this because I felt that the screenshot hack was too gross to be the right API for GV. In Fennec it was more justifiable.\n\n> \n> For the pull-to-refresh, the situation is quite different. In that case you only want the behaviour to occur if you know for sure the event wasn't consumed by APZ or content. That information can't be obtained just by the return value from ReceiveInputEvent, because at that point APZ itself doesn't necessarily know what the input event triggered. The input event may be handled asynchronously after waiting for content to run JS and so on. So IMO to handle pull-to-refresh properly you need an API similar to overscroll - after APZ/content is done with its stuff you would get a callback saying \"this is the unused amount of scroll that occurred\" and then you can decide if you want to use it for pull-to-refresh or not.\n\nYeah, overscroll might be a better fit for pull-to-refresh. I have a patch that hooks the glow effect back up, we could also then expose that stuff to apps for their own usage."}, {"is_private": false, "time": "2020-05-15T14:40:05Z", "text": "(In reply to James Willcox (:snorp) (jwillcox@mozilla.com) (he/him) from comment #8)\n> I don't agree with this. You have to care what APZ/Gecko is doing because for things like Google Maps you want to suspend any toolbar changes while the user is panning the map around. The Fennec toolbar animator was intimately tied to what APZ/Gecko were doing.\n\nI might have oversimplified a bit. It's certainly true that the Fennec toolbar was more tied to APZ/Gecko. But I'm still confused how allowing Google Maps to suspend toolbar changes doesn't open you up to the spoofing problem. Imagine a malicious map website where if you pan the map upwards, it displays a fake URL bar at the bottom of the screen. A user goes the page, pans down to the map (which hides the real URL bar) and then pans around on the map. User sees what appears to be the URL bar reappearing, and uses it. But it's actually the spoofed bar and they get hijacked.\n\n> The spoofing problem is easily fixed by showing the toolbar when an ACTION_DOWN event was not used for a toplevel pan/zoom. Fenix is doing this today.\n\nIn the scenario I described above does panning the map count as \"an ACTION_DOWN not used for a toplevel pan/zoom\"? If so isn't this heuristic (\"show the toolbar when an ACTION_DOWN is not used for a toplevel pan/zoom\") inherently conflicting with \"suspend toolbar changes during map panning\"?\n\n> The toolbar is a probably the only place where having a separation of app vs gecko creates a problem. The dynamic toolbar animator from Fennec wasn't chosen for this because I felt that the screenshot hack was too gross to be the right API for GV. In Fennec it was more justifiable.\n\nI agree with you there, I'm glad to see the screenshot hack go.\n\n> Yeah, overscroll might be a better fit for pull-to-refresh. I have a patch that hooks the glow effect back up, we could also then expose that stuff to apps for their own usage.\n\nSounds good.", "creation_time": "2020-05-15T14:40:05Z", "raw_text": "(In reply to James Willcox (:snorp) (jwillcox@mozilla.com) (he/him) from comment #8)\n> I don't agree with this. You have to care what APZ/Gecko is doing because for things like Google Maps you want to suspend any toolbar changes while the user is panning the map around. The Fennec toolbar animator was intimately tied to what APZ/Gecko were doing.\n\nI might have oversimplified a bit. It's certainly true that the Fennec toolbar was more tied to APZ/Gecko. But I'm still confused how allowing Google Maps to suspend toolbar changes doesn't open you up to the spoofing problem. Imagine a malicious map website where if you pan the map upwards, it displays a fake URL bar at the bottom of the screen. A user goes the page, pans down to the map (which hides the real URL bar) and then pans around on the map. User sees what appears to be the URL bar reappearing, and uses it. But it's actually the spoofed bar and they get hijacked.\n\n> The spoofing problem is easily fixed by showing the toolbar when an ACTION_DOWN event was not used for a toplevel pan/zoom. Fenix is doing this today.\n\nIn the scenario I described above does panning the map count as \"an ACTION_DOWN not used for a toplevel pan/zoom\"? If so isn't this heuristic (\"show the toolbar when an ACTION_DOWN is not used for a toplevel pan/zoom\") inherently conflicting with \"suspend toolbar changes during map panning\"?\n\n> The toolbar is a probably the only place where having a separation of app vs gecko creates a problem. The dynamic toolbar animator from Fennec wasn't chosen for this because I felt that the screenshot hack was too gross to be the right API for GV. In Fennec it was more justifiable.\n\nI agree with you there, I'm glad to see the screenshot hack go.\n\n> Yeah, overscroll might be a better fit for pull-to-refresh. I have a patch that hooks the glow effect back up, we could also then expose that stuff to apps for their own usage.\n\nSounds good.", "count": 9, "id": 14822954, "bug_id": 1633322, "tags": [], "author": "kats@bugmash.staktrace.com", "attachment_id": null, "creator": "kats@bugmash.staktrace.com"}, {"time": "2020-05-15T15:32:59Z", "raw_text": "(In reply to Kartikaya Gupta (email:kats@mozilla.com) from comment #9)\n> (In reply to James Willcox (:snorp) (jwillcox@mozilla.com) (he/him) from comment #8)\n> > I don't agree with this. You have to care what APZ/Gecko is doing because for things like Google Maps you want to suspend any toolbar changes while the user is panning the map around. The Fennec toolbar animator was intimately tied to what APZ/Gecko were doing.\n> \n> I might have oversimplified a bit. It's certainly true that the Fennec toolbar was more tied to APZ/Gecko. But I'm still confused how allowing Google Maps to suspend toolbar changes doesn't open you up to the spoofing problem. Imagine a malicious map website where if you pan the map upwards, it displays a fake URL bar at the bottom of the screen. A user goes the page, pans down to the map (which hides the real URL bar) and then pans around on the map. User sees what appears to be the URL bar reappearing, and uses it. But it's actually the spoofed bar and they get hijacked.\n> \n> > The spoofing problem is easily fixed by showing the toolbar when an ACTION_DOWN event was not used for a toplevel pan/zoom. Fenix is doing this today.\n> \n> In the scenario I described above does panning the map count as \"an ACTION_DOWN not used for a toplevel pan/zoom\"?\n\nYes, as we'd return `HANDLED_CONTENT` in that case.\n\n> If so isn't this heuristic (\"show the toolbar when an ACTION_DOWN is not used for a toplevel pan/zoom\") inherently conflicting with \"suspend toolbar changes during map panning\"?\n\nWell by \"suspend\" I meant \"don't show/hide the toolbar based on touch movement\". Given your example above, we would immediately show the urlbar with the first touch event that went to the map. While the user pans the map around, the toolbar would stay \"pinned\". Any fake urlbar would appear above the real one.", "is_private": false, "count": 10, "bug_id": 1633322, "id": 14823074, "creator": "snorp@snorp.net", "text": "(In reply to Kartikaya Gupta (email:kats@mozilla.com) from comment #9)\n> (In reply to James Willcox (:snorp) (jwillcox@mozilla.com) (he/him) from comment #8)\n> > I don't agree with this. You have to care what APZ/Gecko is doing because for things like Google Maps you want to suspend any toolbar changes while the user is panning the map around. The Fennec toolbar animator was intimately tied to what APZ/Gecko were doing.\n> \n> I might have oversimplified a bit. It's certainly true that the Fennec toolbar was more tied to APZ/Gecko. But I'm still confused how allowing Google Maps to suspend toolbar changes doesn't open you up to the spoofing problem. Imagine a malicious map website where if you pan the map upwards, it displays a fake URL bar at the bottom of the screen. A user goes the page, pans down to the map (which hides the real URL bar) and then pans around on the map. User sees what appears to be the URL bar reappearing, and uses it. But it's actually the spoofed bar and they get hijacked.\n> \n> > The spoofing problem is easily fixed by showing the toolbar when an ACTION_DOWN event was not used for a toplevel pan/zoom. Fenix is doing this today.\n> \n> In the scenario I described above does panning the map count as \"an ACTION_DOWN not used for a toplevel pan/zoom\"?\n\nYes, as we'd return `HANDLED_CONTENT` in that case.\n\n> If so isn't this heuristic (\"show the toolbar when an ACTION_DOWN is not used for a toplevel pan/zoom\") inherently conflicting with \"suspend toolbar changes during map panning\"?\n\nWell by \"suspend\" I meant \"don't show/hide the toolbar based on touch movement\". Given your example above, we would immediately show the urlbar with the first touch event that went to the map. While the user pans the map around, the toolbar would stay \"pinned\". Any fake urlbar would appear above the real one.", "creation_time": "2020-05-15T15:32:59Z", "attachment_id": null, "tags": [], "author": "snorp@snorp.net"}, {"is_private": false, "creation_time": "2020-05-15T16:16:36Z", "time": "2020-05-15T16:16:36Z", "text": "Ok, I see. So then either we need to integrate more deeply with APZ or we need to be ok with getting some false positives. In the latter case we should also ensure we only return `HANDLED` when we're absolutely sure content isn't controlling outcomes, which means doing what Botond suggested [here](https://bugzilla.mozilla.org/show_bug.cgi?id=1631754#c13).", "raw_text": "Ok, I see. So then either we need to integrate more deeply with APZ or we need to be ok with getting some false positives. In the latter case we should also ensure we only return `HANDLED` when we're absolutely sure content isn't controlling outcomes, which means doing what Botond suggested [here](https://bugzilla.mozilla.org/show_bug.cgi?id=1631754#c13).", "count": 11, "id": 14823153, "bug_id": 1633322, "tags": [], "author": "kats@bugmash.staktrace.com", "attachment_id": null, "creator": "kats@bugmash.staktrace.com"}, {"count": 12, "is_private": false, "time": "2020-05-23T11:48:24Z", "text": "Created attachment 9151241\nBug 1633322 - Combine a few loose fields in APZCTreeManager into a HitTestResult. r?botond", "creation_time": "2020-05-23T11:48:24Z", "raw_text": "", "tags": [], "author": "kats@bugmash.staktrace.com", "attachment_id": 9151241, "creator": "kats@bugmash.staktrace.com", "id": 14838879, "bug_id": 1633322}, {"is_private": false, "raw_text": "", "time": "2020-05-28T15:45:55Z", "count": 13, "id": 14849637, "bug_id": 1633322, "creator": "etoop@mozilla.com", "creation_time": "2020-05-28T15:45:55Z", "text": "\n\n*** This bug has been marked as a duplicate of bug 1640387 ***", "author": "etoop@mozilla.com", "tags": [], "attachment_id": null}, {"is_private": false, "time": "2020-05-28T16:09:39Z", "raw_text": "This is not a duplicate of bug 1640387. It's the opposite problem.", "count": 14, "id": 14849750, "bug_id": 1633322, "creator": "kats@bugmash.staktrace.com", "creation_time": "2020-05-28T16:09:39Z", "text": "This is not a duplicate of bug 1640387. It's the opposite problem.", "tags": [], "author": "kats@bugmash.staktrace.com", "attachment_id": null}, {"author": "amejiamarmol@mozilla.com", "tags": [], "creator": "amejiamarmol@mozilla.com", "attachment_id": null, "id": 14861081, "bug_id": 1633322, "count": 15, "is_private": false, "raw_text": "We are seeing a similar behaviour on the setting page of UBlock origin. As Petru-Mugurel mentioned in [comment #0](https://bugzilla.mozilla.org/show_bug.cgi?id=1633322#c0).  GV returns `INPUT_RESULT_HANDLED_CONTENT` signalling the web page handled the scroll and not the browser, causing that we do not animate(hide/show the toolbar) and the bottom part of the page is not getting shown, As you can see in this [video](https://drive.google.com/file/d/1xgHK3jvJvnFNNYg7NT8c7H_sRCwWob7O/view?usp=sharing). More information can be found in the [Fenix related bug](https://github.com/mozilla-mobile/android-components/issues/6933)", "text": "We are seeing a similar behaviour on the setting page of UBlock origin. As Petru-Mugurel mentioned in [comment #0](https://bugzilla.mozilla.org/show_bug.cgi?id=1633322#c0).  GV returns `INPUT_RESULT_HANDLED_CONTENT` signalling the web page handled the scroll and not the browser, causing that we do not animate(hide/show the toolbar) and the bottom part of the page is not getting shown, As you can see in this [video](https://drive.google.com/file/d/1xgHK3jvJvnFNNYg7NT8c7H_sRCwWob7O/view?usp=sharing). More information can be found in the [Fenix related bug](https://github.com/mozilla-mobile/android-components/issues/6933)", "creation_time": "2020-06-03T17:42:32Z", "time": "2020-06-03T17:42:32Z"}, {"is_private": false, "raw_text": "Hey Emily, what does the timeline look like for this? I *believe* this is the last outstanding issue before we can turn on dynamic toolbar, which vesta wants for release. Ideally, if we could get this into GV78 by the end of next week (6/18), that should make our sprint, but I guess that All Hands is also that week...\n\nhttps://github.com/mozilla-mobile/fenix/issues/8775 is our meta", "time": "2020-06-09T21:12:21Z", "text": "Hey Emily, what does the timeline look like for this? I *believe* this is the last outstanding issue before we can turn on dynamic toolbar, which vesta wants for release. Ideally, if we could get this into GV78 by the end of next week (6/18), that should make our sprint, but I guess that All Hands is also that week...\n\nhttps://github.com/mozilla-mobile/fenix/issues/8775 is our meta", "creation_time": "2020-06-09T21:12:21Z", "count": 16, "id": 14872964, "bug_id": 1633322, "author": "liucheia+bugzilla@gmail.com", "tags": [], "creator": "liucheia+bugzilla@gmail.com", "attachment_id": null}, {"author": "etoop@mozilla.com", "tags": [], "creator": "etoop@mozilla.com", "attachment_id": null, "id": 14873551, "bug_id": 1633322, "count": 17, "is_private": false, "raw_text": ":kats, is this something that you are looking at? Fenix are hoping to have this fix uplifted to 78.", "time": "2020-06-10T08:00:18Z", "creation_time": "2020-06-10T08:00:18Z", "text": ":kats, is this something that you are looking at? Fenix are hoping to have this fix uplifted to 78."}, {"id": 14873573, "bug_id": 1633322, "tags": [], "author": "kats@bugmash.staktrace.com", "attachment_id": null, "creator": "kats@bugmash.staktrace.com", "is_private": false, "time": "2020-06-10T08:19:26Z", "creation_time": "2020-06-10T08:19:26Z", "text": "No, I'm not actively looking at this. But reading through the comments again I'm not sure exactly what the problem is anymore. If we are returning `HANDLED_CONTENT` instead of `HANDLED` in some cases (because of event listeners or whatever), then presumably it should be triggering the behaviour that :snorp described here:\n\n(In reply to James Willcox (:snorp) (jwillcox@mozilla.com) (he/him) from comment #10)\n> we would immediately show the urlbar with the first touch event that went to the map. While the user pans the map around, the toolbar would stay \"pinned\".\n\nSo from a user point of view what I would expect (e.g. in [this video](https://github.com/mozilla-mobile/fenix/issues/11389#issue-635656946)) is that the URL bar appears and remains pinned visible, rather than distractingly scrolling on or off. :snorp, can you confirm my interpretation is correct? If so maybe this is a simple GV-side fix.\n\nIf we want that return value to be more precise and return `HANDLED` in cases where the event listeners didn't do a preventDefault then we will need tighter integration between APZ and GV and in particular some sort of callback mechanism instead of a synchronous return value, so that will be trickier to implement.", "raw_text": "No, I'm not actively looking at this. But reading through the comments again I'm not sure exactly what the problem is anymore. If we are returning `HANDLED_CONTENT` instead of `HANDLED` in some cases (because of event listeners or whatever), then presumably it should be triggering the behaviour that :snorp described here:\n\n(In reply to James Willcox (:snorp) (jwillcox@mozilla.com) (he/him) from comment #10)\n> we would immediately show the urlbar with the first touch event that went to the map. While the user pans the map around, the toolbar would stay \"pinned\".\n\nSo from a user point of view what I would expect (e.g. in [this video](https://github.com/mozilla-mobile/fenix/issues/11389#issue-635656946)) is that the URL bar appears and remains pinned visible, rather than distractingly scrolling on or off. :snorp, can you confirm my interpretation is correct? If so maybe this is a simple GV-side fix.\n\nIf we want that return value to be more precise and return `HANDLED` in cases where the event listeners didn't do a preventDefault then we will need tighter integration between APZ and GV and in particular some sort of callback mechanism instead of a synchronous return value, so that will be trickier to implement.", "count": 18}, {"bug_id": 1633322, "id": 14875067, "attachment_id": null, "creator": "snorp@snorp.net", "tags": [], "author": "snorp@snorp.net", "creation_time": "2020-06-10T21:35:02Z", "text": "That's correct, if we return `HANDLED_CONTENT` for the `ACTION_DOWN` event then the toolbar should be pinned visible for the duration of the touch. I can't reproduce the behavior shown in the video from comment #18 anymore. The toolbar stays visible the entire time.", "time": "2020-06-10T21:35:02Z", "raw_text": "That's correct, if we return `HANDLED_CONTENT` for the `ACTION_DOWN` event then the toolbar should be pinned visible for the duration of the touch. I can't reproduce the behavior shown in the video from comment #18 anymore. The toolbar stays visible the entire time.", "is_private": false, "count": 19}, {"bug_id": 1633322, "id": 14875074, "creator": "snorp@snorp.net", "raw_text": "(In reply to James Willcox (:snorp) (jwillcox@mozilla.com) (he/him) from comment #19)\n> That's correct, if we return `HANDLED_CONTENT` for the `ACTION_DOWN` event then the toolbar should be pinned visible for the duration of the touch. I can't reproduce the behavior shown in the video from comment #18 anymore. The toolbar stays visible the entire time.\n\nWhoops, I didn't see that the video there was using a top toolbar. The issue there is that Fenix is not correctly pinning the toolbar in the `HANDLED_CONTENT` case.", "time": "2020-06-10T21:39:40Z", "is_private": false, "count": 20, "attachment_id": null, "author": "snorp@snorp.net", "tags": [], "creation_time": "2020-06-10T21:39:40Z", "text": "(In reply to James Willcox (:snorp) (jwillcox@mozilla.com) (he/him) from comment #19)\n> That's correct, if we return `HANDLED_CONTENT` for the `ACTION_DOWN` event then the toolbar should be pinned visible for the duration of the touch. I can't reproduce the behavior shown in the video from comment #18 anymore. The toolbar stays visible the entire time.\n\nWhoops, I didn't see that the video there was using a top toolbar. The issue there is that Fenix is not correctly pinning the toolbar in the `HANDLED_CONTENT` case."}, {"attachment_id": null, "author": "snorp@snorp.net", "tags": [], "creation_time": "2020-06-11T18:18:41Z", "text": "OK, I think we want to try to pursue the path where we wait to see what Gecko did with the event. Kats / Botond can you guess at when you could get to this? Is it possible for a mortal to write the patch?", "creator": "snorp@snorp.net", "bug_id": 1633322, "id": 14876811, "count": 21, "raw_text": "OK, I think we want to try to pursue the path where we wait to see what Gecko did with the event. Kats / Botond can you guess at when you could get to this? Is it possible for a mortal to write the patch?", "time": "2020-06-11T18:18:41Z", "is_private": false}, {"count": 22, "raw_text": "Would an API along the following lines work for GV?\n\n  * The `APZEventResult` contains a `Maybe<mTargetIsRoot>` which is populated if we know the answer for sure, and empty if we don't.\n  * If it's empty, GV takes note of the `mInputBlockId` in the `APZEventResult` as identifying an input block for which it needs to receive a delayed answer.\n  * When the delayed answer is ready, APZ calls a function with a `(uint64_t inputBlockId, bool targetIsRoot)` pair that tells GV the answer for that input block.\n\nIt should be fairly straightforward to arrange for APZ to call such a function when a delayed answer is ready.", "creation_time": "2020-06-11T19:34:47Z", "time": "2020-06-11T19:34:47Z", "text": "Would an API along the following lines work for GV?\n\n  * The `APZEventResult` contains a `Maybe<mTargetIsRoot>` which is populated if we know the answer for sure, and empty if we don't.\n  * If it's empty, GV takes note of the `mInputBlockId` in the `APZEventResult` as identifying an input block for which it needs to receive a delayed answer.\n  * When the delayed answer is ready, APZ calls a function with a `(uint64_t inputBlockId, bool targetIsRoot)` pair that tells GV the answer for that input block.\n\nIt should be fairly straightforward to arrange for APZ to call such a function when a delayed answer is ready.", "is_private": false, "creator": "botond@mozilla.com", "attachment_id": null, "author": "botond@mozilla.com", "tags": [], "bug_id": 1633322, "id": 14876970}, {"text": "(In reply to Botond Ballo [:botond] from comment #22)\n> Would an API along the following lines work for GV?\n> \n>   * The `APZEventResult` contains a `Maybe<mTargetIsRoot>` which is populated if we know the answer for sure, and empty if we don't.\n>   * If it's empty, GV takes note of the `mInputBlockId` in the `APZEventResult` as identifying an input block for which it needs to receive a delayed answer.\n>   * When the delayed answer is ready, APZ calls a function with a `(uint64_t inputBlockId, bool targetIsRoot)` pair that tells GV the answer for that input block.\n> \n> It should be fairly straightforward to arrange for APZ to call such a function when a delayed answer is ready.\n\nThat sounds fine. I think we'd only want to do it in certain cases where we actually care about the result, though (which for Fenix would only be ACTION_DOWN events), otherwise I feel like it could potentially generate too much traffic.", "creation_time": "2020-06-12T16:02:44Z", "tags": [], "author": "snorp@snorp.net", "attachment_id": null, "count": 23, "is_private": false, "time": "2020-06-12T16:02:44Z", "raw_text": "(In reply to Botond Ballo [:botond] from comment #22)\n> Would an API along the following lines work for GV?\n> \n>   * The `APZEventResult` contains a `Maybe<mTargetIsRoot>` which is populated if we know the answer for sure, and empty if we don't.\n>   * If it's empty, GV takes note of the `mInputBlockId` in the `APZEventResult` as identifying an input block for which it needs to receive a delayed answer.\n>   * When the delayed answer is ready, APZ calls a function with a `(uint64_t inputBlockId, bool targetIsRoot)` pair that tells GV the answer for that input block.\n> \n> It should be fairly straightforward to arrange for APZ to call such a function when a delayed answer is ready.\n\nThat sounds fine. I think we'd only want to do it in certain cases where we actually care about the result, though (which for Fenix would only be ACTION_DOWN events), otherwise I feel like it could potentially generate too much traffic.", "creator": "snorp@snorp.net", "id": 14878905, "bug_id": 1633322}, {"is_private": false, "creation_time": "2020-06-15T21:42:03Z", "text": "I'll give implementing the APZ side of this a try.", "time": "2020-06-15T21:42:03Z", "raw_text": "I'll give implementing the APZ side of this a try.", "count": 24, "id": 14883709, "bug_id": 1633322, "tags": [], "author": "botond@mozilla.com", "attachment_id": null, "creator": "botond@mozilla.com"}, {"author": "botond@mozilla.com", "tags": [], "creator": "botond@mozilla.com", "attachment_id": 9157164, "id": 14886200, "bug_id": 1633322, "count": 25, "is_private": false, "raw_text": "\nGeckoView uses these flags for the same purpose: to determine\nwhether or not to allow certain effects, such as pull to refresh\nor dynamic toolbar movement, that should be limited to cases\nwhere an event manipulates the root scrollable.\n\nIn a subsequent patch, we will enhance the API between APZ and\nGeckoView such that in cases where we don't know for sure whether\nan event will manipulate the root scrollable until it is\ndispatched to content, we tell GV the answer asynchronously.\nThis is easier if there is only one flag to report.", "time": "2020-06-17T00:43:47Z", "text": "Created attachment 9157164\nBug 1633322 - Combine APZEventResult::mTargetIsRoot and mHitRegionWithApzAwareListeners into a single flag. r=kats\n\n\nGeckoView uses these flags for the same purpose: to determine\nwhether or not to allow certain effects, such as pull to refresh\nor dynamic toolbar movement, that should be limited to cases\nwhere an event manipulates the root scrollable.\n\nIn a subsequent patch, we will enhance the API between APZ and\nGeckoView such that in cases where we don't know for sure whether\nan event will manipulate the root scrollable until it is\ndispatched to content, we tell GV the answer asynchronously.\nThis is easier if there is only one flag to report.", "creation_time": "2020-06-17T00:43:47Z"}, {"is_private": false, "raw_text": "\n\nDepends on D79929", "creation_time": "2020-06-17T00:44:26Z", "time": "2020-06-17T00:44:26Z", "text": "Created attachment 9157165\nBug 1633322 - Turn APZEventResult::mHandledByRootApzc into a Maybe. r=kats\n\n\n\nDepends on D79929", "count": 26, "id": 14886201, "bug_id": 1633322, "author": "botond@mozilla.com", "tags": [], "creator": "botond@mozilla.com", "attachment_id": 9157165}, {"raw_text": "\nThis facility is only implemented for in-process senders of\ninput events (i.e. not for GPU process setups).\n\nDepends on D79930", "time": "2020-06-17T00:45:05Z", "creation_time": "2020-06-17T00:45:05Z", "text": "Created attachment 9157166\nBug 1633322 - Add an input block callback facility to allow senders of input events to receive a delayed notification of whether the event was processed by the root APZC. r=kats\n\n\nThis facility is only implemented for in-process senders of\ninput events (i.e. not for GPU process setups).\n\nDepends on D79930", "is_private": false, "count": 27, "bug_id": 1633322, "id": 14886202, "creator": "botond@mozilla.com", "attachment_id": 9157166, "author": "botond@mozilla.com", "tags": []}, {"tags": [], "author": "botond@mozilla.com", "attachment_id": 9157167, "creation_time": "2020-06-17T00:45:34Z", "text": "Created attachment 9157167\nBug 1633322 - Sketch of GeckoView using the new API. r=snorp\n\n\n\nDepends on D79931", "creator": "botond@mozilla.com", "id": 14886204, "bug_id": 1633322, "count": 28, "is_private": false, "time": "2020-06-17T00:45:34Z", "raw_text": "\n\nDepends on D79931"}, {"attachment_id": null, "author": "botond@mozilla.com", "tags": [], "creation_time": "2020-06-17T00:48:27Z", "text": "The posted patches implement the APZ side of the proposed API. The last patch is a starting point for where to implement the GV side. Let me know if this is suitable!", "creator": "botond@mozilla.com", "bug_id": 1633322, "id": 14886205, "count": 29, "raw_text": "The posted patches implement the APZ side of the proposed API. The last patch is a starting point for where to implement the GV side. Let me know if this is suitable!", "time": "2020-06-17T00:48:27Z", "is_private": false}, {"author": "petru.lingurar@softvision.ro", "tags": [], "creator": "petru.lingurar@softvision.ro", "attachment_id": null, "id": 14950839, "bug_id": 1633322, "count": 30, "is_private": false, "raw_text": "Checked the dependencies for pull to refresh on Fenix.\nI still see this being a problem for the websites from [this list](https://github.com/mozilla-mobile/fenix/issues/9766#issuecomment-610346185) (other than Github) that also affects the animation for the bottom toolbar.\n\nThough testing on `w3schools` I see different behaviors (based on different pzc results) - [video](https://drive.google.com/file/d/1EuKAJ9Xu_GW9vrDh4YpFMjbvVLiYhvyk/view?usp=sharing) so maybe all of this can also be seen as webcompat issues?\n\nAlso seeing the Fennec overscroll effect working as expected even on these pages.", "creation_time": "2020-07-22T11:55:10Z", "time": "2020-07-22T11:55:10Z", "text": "Checked the dependencies for pull to refresh on Fenix.\nI still see this being a problem for the websites from [this list](https://github.com/mozilla-mobile/fenix/issues/9766#issuecomment-610346185) (other than Github) that also affects the animation for the bottom toolbar.\n\nThough testing on `w3schools` I see different behaviors (based on different pzc results) - [video](https://drive.google.com/file/d/1EuKAJ9Xu_GW9vrDh4YpFMjbvVLiYhvyk/view?usp=sharing) so maybe all of this can also be seen as webcompat issues?\n\nAlso seeing the Fennec overscroll effect working as expected even on these pages."}, {"count": 31, "is_private": false, "raw_text": "", "text": "Created attachment 9168832\nBug 1633322 - Consider content handling for `onTouchEventForResult`", "creation_time": "2020-08-07T15:31:46Z", "time": "2020-08-07T15:31:46Z", "author": "snorp@snorp.net", "tags": [], "creator": "snorp@snorp.net", "attachment_id": 9168832, "id": 14978130, "bug_id": 1633322}, {"count": 32, "raw_text": "Botond, I have a patch here[1] that uses the new input block callback. I seem to be getting `handled = true` every time we go down this path, though. Have I done something wrong? For instance, on `maps.google.com` the touch events should be handled in content so I would think it would return `false`....\n\n[1] https://phabricator.services.mozilla.com/D86384", "time": "2020-08-07T15:35:16Z", "text": "Botond, I have a patch here[1] that uses the new input block callback. I seem to be getting `handled = true` every time we go down this path, though. Have I done something wrong? For instance, on `maps.google.com` the touch events should be handled in content so I would think it would return `false`....\n\n[1] https://phabricator.services.mozilla.com/D86384", "creation_time": "2020-08-07T15:35:16Z", "is_private": false, "creator": "snorp@snorp.net", "attachment_id": null, "author": "snorp@snorp.net", "tags": [], "bug_id": 1633322, "id": 14978139}, {"is_private": false, "creation_time": "2020-08-07T16:46:52Z", "time": "2020-08-07T16:46:52Z", "text": "The early-return path in the `AddInputBlockCallback()` case still needs to perform the `window->ProcessUntransformedAPZEvent()` stuff, as that's what actually dispatches the event to content. With that change to your patch, Google Maps seems to be working fine (and producing `aHandledByRootApzc = false`).", "raw_text": "The early-return path in the `AddInputBlockCallback()` case still needs to perform the `window->ProcessUntransformedAPZEvent()` stuff, as that's what actually dispatches the event to content. With that change to your patch, Google Maps seems to be working fine (and producing `aHandledByRootApzc = false`).", "count": 33, "id": 14978339, "bug_id": 1633322, "tags": [], "author": "botond@mozilla.com", "attachment_id": null, "creator": "botond@mozilla.com"}, {"text": "Pushed by jwillcox@mozilla.com:\nhttps://hg.mozilla.org/integration/autoland/rev/193fa2a0b926\nCombine APZEventResult::mTargetIsRoot and mHitRegionWithApzAwareListeners into a single flag. r=kats,geckoview-reviewers,snorp\nhttps://hg.mozilla.org/integration/autoland/rev/21c0baa65724\nTurn APZEventResult::mHandledByRootApzc into a Maybe. r=kats,geckoview-reviewers,snorp\nhttps://hg.mozilla.org/integration/autoland/rev/8271d4e51f25\nAdd an input block callback facility to allow senders of input events to receive a delayed notification of whether the event was processed by the root APZC. r=kats\nhttps://hg.mozilla.org/integration/autoland/rev/ffa257a29649\nConsider content handling for `onTouchEventForResult` r=geckoview-reviewers,botond,agi,esawin", "creation_time": "2020-08-18T19:12:40Z", "time": "2020-08-18T19:12:40Z", "raw_text": "Pushed by jwillcox@mozilla.com:\nhttps://hg.mozilla.org/integration/autoland/rev/193fa2a0b926\nCombine APZEventResult::mTargetIsRoot and mHitRegionWithApzAwareListeners into a single flag. r=kats,geckoview-reviewers,snorp\nhttps://hg.mozilla.org/integration/autoland/rev/21c0baa65724\nTurn APZEventResult::mHandledByRootApzc into a Maybe. r=kats,geckoview-reviewers,snorp\nhttps://hg.mozilla.org/integration/autoland/rev/8271d4e51f25\nAdd an input block callback facility to allow senders of input events to receive a delayed notification of whether the event was processed by the root APZC. r=kats\nhttps://hg.mozilla.org/integration/autoland/rev/ffa257a29649\nConsider content handling for `onTouchEventForResult` r=geckoview-reviewers,botond,agi,esawin", "is_private": false, "count": 34, "bug_id": 1633322, "id": 14995152, "attachment_id": null, "creator": "pulsebot@bots.tld", "tags": [], "author": "pulsebot@bots.tld"}, {"attachment_id": null, "tags": [], "author": "ncsoregi@mozilla.com", "creation_time": "2020-08-18T21:09:35Z", "text": "Backed out for android failures e.g. test_group_checkerboarding.html\n\n*backout:* https://hg.mozilla.org/integration/autoland/rev/3117c5a77009b0a5ba9647b0c55b98cd17d23f4f\n\n*push:* https://treeherder.mozilla.org/#/jobs?repo=autoland&group_state=expanded&revision=ffa257a296496a5640d227fabd52315ef83fbc55&searchStr=Android&selectedTaskRun=PAQQyWZHQmeALUel2i-KWg.0\n\n*failure log:* https://treeherder.mozilla.org/logviewer.html#/jobs?job_id=313353389&repo=autoland&lineNumber=6251\n\n>[task 2020-08-18T20:17:32.093Z] 20:17:32     INFO -  3633 INFO TEST-START | gfx/layers/apz/test/mochitest/test_group_checkerboarding.html\n[task 2020-08-18T20:22:58.948Z] 20:22:58     INFO -  Buffered messages logged at 20:17:26\n[task 2020-08-18T20:22:58.948Z] 20:22:58     INFO -  3634 INFO TEST-PASS | gfx/layers/apz/test/mochitest/test_group_checkerboarding.html | Starting subtest helper_checkerboard_apzforcedisabled.html\n[task 2020-08-18T20:22:58.948Z] 20:22:58     INFO -  Buffered messages finished\n[task 2020-08-18T20:22:58.949Z] 20:22:58  WARNING -  3635 INFO TEST-UNEXPECTED-FAIL | gfx/layers/apz/test/mochitest/test_group_checkerboarding.html | Test timed out.\n[task 2020-08-18T20:22:58.950Z] 20:22:58     INFO -      SimpleTest.ok@SimpleTest/SimpleTest.js:417:16\n[task 2020-08-18T20:22:58.950Z] 20:22:58     INFO -      reportError@SimpleTest/TestRunner.js:143:22\n[task 2020-08-18T20:22:58.950Z] 20:22:58     INFO -      TestRunner._checkForHangs@SimpleTest/TestRunner.js:165:18\n[task 2020-08-18T20:22:58.950Z] 20:22:58     INFO -  3636 INFO TEST-OK | gfx/layers/apz/test/mochitest/test_group_checkerboarding.html | took 324285ms\n\n**also**  *org.mozilla.geckoview.test.PanZoomControllerTest.touchEventForResult | java.lang.AssertionError: Value should match* https://treeherder.mozilla.org/logviewer.html#/jobs?job_id=313354872&repo=autoland&lineNumber=8174", "creator": "ncsoregi@mozilla.com", "bug_id": 1633322, "id": 14995332, "count": 35, "time": "2020-08-18T21:09:35Z", "raw_text": "Backed out for android failures e.g. test_group_checkerboarding.html\n\n*backout:* https://hg.mozilla.org/integration/autoland/rev/3117c5a77009b0a5ba9647b0c55b98cd17d23f4f\n\n*push:* https://treeherder.mozilla.org/#/jobs?repo=autoland&group_state=expanded&revision=ffa257a296496a5640d227fabd52315ef83fbc55&searchStr=Android&selectedTaskRun=PAQQyWZHQmeALUel2i-KWg.0\n\n*failure log:* https://treeherder.mozilla.org/logviewer.html#/jobs?job_id=313353389&repo=autoland&lineNumber=6251\n\n>[task 2020-08-18T20:17:32.093Z] 20:17:32     INFO -  3633 INFO TEST-START | gfx/layers/apz/test/mochitest/test_group_checkerboarding.html\n[task 2020-08-18T20:22:58.948Z] 20:22:58     INFO -  Buffered messages logged at 20:17:26\n[task 2020-08-18T20:22:58.948Z] 20:22:58     INFO -  3634 INFO TEST-PASS | gfx/layers/apz/test/mochitest/test_group_checkerboarding.html | Starting subtest helper_checkerboard_apzforcedisabled.html\n[task 2020-08-18T20:22:58.948Z] 20:22:58     INFO -  Buffered messages finished\n[task 2020-08-18T20:22:58.949Z] 20:22:58  WARNING -  3635 INFO TEST-UNEXPECTED-FAIL | gfx/layers/apz/test/mochitest/test_group_checkerboarding.html | Test timed out.\n[task 2020-08-18T20:22:58.950Z] 20:22:58     INFO -      SimpleTest.ok@SimpleTest/SimpleTest.js:417:16\n[task 2020-08-18T20:22:58.950Z] 20:22:58     INFO -      reportError@SimpleTest/TestRunner.js:143:22\n[task 2020-08-18T20:22:58.950Z] 20:22:58     INFO -      TestRunner._checkForHangs@SimpleTest/TestRunner.js:165:18\n[task 2020-08-18T20:22:58.950Z] 20:22:58     INFO -  3636 INFO TEST-OK | gfx/layers/apz/test/mochitest/test_group_checkerboarding.html | took 324285ms\n\n**also**  *org.mozilla.geckoview.test.PanZoomControllerTest.touchEventForResult | java.lang.AssertionError: Value should match* https://treeherder.mozilla.org/logviewer.html#/jobs?job_id=313354872&repo=autoland&lineNumber=8174", "is_private": false}, {"creator": "snorp@snorp.net", "attachment_id": null, "author": "snorp@snorp.net", "tags": [], "bug_id": 1633322, "id": 14996805, "count": 36, "raw_text": "Botond, I have a fix for the mochitest failure, but the junit failure seems to be intermittent and I was hoping you could help me figure that out. The part that's failing is that sometimes `ACTION_DOWN` on an element with a `touchstart` listener returns `result.mHandledByRootApzc == Some(true)` and `result.mStatus == nsEventStatus_eIgnore`. Is APZ not aware of the touch region in this case? Where should I go poking around?", "time": "2020-08-19T18:40:00Z", "text": "Botond, I have a fix for the mochitest failure, but the junit failure seems to be intermittent and I was hoping you could help me figure that out. The part that's failing is that sometimes `ACTION_DOWN` on an element with a `touchstart` listener returns `result.mHandledByRootApzc == Some(true)` and `result.mStatus == nsEventStatus_eIgnore`. Is APZ not aware of the touch region in this case? Where should I go poking around?", "creation_time": "2020-08-19T18:40:00Z", "is_private": false}, {"count": 37, "raw_text": "Pushed by jwillcox@mozilla.com:\nhttps://hg.mozilla.org/integration/autoland/rev/9be548b05e86\nCombine APZEventResult::mTargetIsRoot and mHitRegionWithApzAwareListeners into a single flag. r=kats,geckoview-reviewers,snorp\nhttps://hg.mozilla.org/integration/autoland/rev/1aa6be497177\nTurn APZEventResult::mHandledByRootApzc into a Maybe. r=kats,geckoview-reviewers,snorp\nhttps://hg.mozilla.org/integration/autoland/rev/84454fa520be\nAdd an input block callback facility to allow senders of input events to receive a delayed notification of whether the event was processed by the root APZC. r=kats\nhttps://hg.mozilla.org/integration/autoland/rev/953d128f4c51\nConsider content handling for `onTouchEventForResult` r=geckoview-reviewers,botond,agi,esawin", "creation_time": "2020-08-19T21:35:12Z", "time": "2020-08-19T21:35:12Z", "text": "Pushed by jwillcox@mozilla.com:\nhttps://hg.mozilla.org/integration/autoland/rev/9be548b05e86\nCombine APZEventResult::mTargetIsRoot and mHitRegionWithApzAwareListeners into a single flag. r=kats,geckoview-reviewers,snorp\nhttps://hg.mozilla.org/integration/autoland/rev/1aa6be497177\nTurn APZEventResult::mHandledByRootApzc into a Maybe. r=kats,geckoview-reviewers,snorp\nhttps://hg.mozilla.org/integration/autoland/rev/84454fa520be\nAdd an input block callback facility to allow senders of input events to receive a delayed notification of whether the event was processed by the root APZC. r=kats\nhttps://hg.mozilla.org/integration/autoland/rev/953d128f4c51\nConsider content handling for `onTouchEventForResult` r=geckoview-reviewers,botond,agi,esawin", "is_private": false, "creator": "pulsebot@bots.tld", "attachment_id": null, "author": "pulsebot@bots.tld", "tags": [], "bug_id": 1633322, "id": 14997073}, {"count": 38, "text": "Backed out 5 changesets (bug 1633322, bug 1634504) for touchEventForResult gv-junit failures.\n\nPush with failures: https://treeherder.mozilla.org/#/jobs?repo=autoland&group_state=expanded&selectedTaskRun=EcSDJ46BRV2-_lITvl2zkA.0&fromchange=472c546742470cbf78cc794fddd7e5a65a609ace&searchStr=gv-junit&tochange=184dbd9b95ebc4185c683693ace4f46e443e69a8\n\nBackout link: https://hg.mozilla.org/integration/autoland/rev/184dbd9b95ebc4185c683693ace4f46e443e69a8\n\nFailure log: https://treeherder.mozilla.org/logviewer.html#/jobs?job_id=313494726&repo=autoland&lineNumber=8189\n\n```\n[task 2020-08-19T23:26:18.330Z] 23:26:18     INFO -  TEST-START | org.mozilla.geckoview.test.PanZoomControllerTest.touchEventForResult\n[task 2020-08-19T23:26:18.530Z] 23:26:18     INFO -  org.mozilla.geckoview.test | INSTRUMENTATION_STATUS: numtests=756\n[task 2020-08-19T23:26:18.530Z] 23:26:18     INFO -  org.mozilla.geckoview.test | INSTRUMENTATION_STATUS: stream=\n[task 2020-08-19T23:26:18.530Z] 23:26:18     INFO -  org.mozilla.geckoview.test | Error in touchEventForResult(org.mozilla.geckoview.test.PanZoomControllerTest):\n[task 2020-08-19T23:26:18.530Z] 23:26:18     INFO -  org.mozilla.geckoview.test | java.lang.AssertionError: Value should match\n[task 2020-08-19T23:26:18.530Z] 23:26:18     INFO -  org.mozilla.geckoview.test | Expected: <1>\n[task 2020-08-19T23:26:18.530Z] 23:26:18     INFO -  org.mozilla.geckoview.test |      but: was <0>\n[task 2020-08-19T23:26:18.531Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20)\n[task 2020-08-19T23:26:18.531Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat org.junit.Assert.assertThat(Assert.java:956)\n[task 2020-08-19T23:26:18.531Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat org.junit.rules.ErrorCollector$1.call(ErrorCollector.java:65)\n[task 2020-08-19T23:26:18.531Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat org.junit.rules.ErrorCollector.checkSucceeds(ErrorCollector.java:78)\n[task 2020-08-19T23:26:18.531Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat org.junit.rules.ErrorCollector.checkThat(ErrorCollector.java:63)\n[task 2020-08-19T23:26:18.531Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat org.mozilla.geckoview.test.rule.GeckoSessionTestRule.checkThat(GeckoSessionTestRule.java:802)\n[task 2020-08-19T23:26:18.532Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat org.mozilla.geckoview.test.BaseSessionTest.assertThat(BaseSessionTest.kt:88)\n[task 2020-08-19T23:26:18.532Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat org.mozilla.geckoview.test.PanZoomControllerTest.touchEventForResult(PanZoomControllerTest.kt:280)\n[task 2020-08-19T23:26:18.532Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat java.lang.reflect.Method.invoke(Native Method)\n[task 2020-08-19T23:26:18.532Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\n[task 2020-08-19T23:26:18.532Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n[task 2020-08-19T23:26:18.533Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\n[task 2020-08-19T23:26:18.533Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n[task 2020-08-19T23:26:18.533Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat org.mozilla.geckoview.test.rule.GeckoSessionTestRule$2.lambda$evaluate$0$GeckoSessionTestRule$2(GeckoSessionTestRule.java:1302)\n[task 2020-08-19T23:26:18.533Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat org.mozilla.geckoview.test.rule.-$$Lambda$GeckoSessionTestRule$2$sIbRNaZJgAu-QrUVWSGD8JbPSWM.run(lambda)\n[task 2020-08-19T23:26:18.533Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat android.app.Instrumentation$SyncRunnable.run(Instrumentation.java:1950)\n[task 2020-08-19T23:26:18.533Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat android.os.Handler.handleCallback(Handler.java:751)\n[task 2020-08-19T23:26:18.534Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat android.os.Handler.dispatchMessage(Handler.java:95)\n[task 2020-08-19T23:26:18.534Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat android.os.Looper.loop(Looper.java:154)\n[task 2020-08-19T23:26:18.534Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat android.app.ActivityThread.main(ActivityThread.java:6077)\n[task 2020-08-19T23:26:18.534Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat java.lang.reflect.Method.invoke(Native Method)\n[task 2020-08-19T23:26:18.534Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:866)\n[task 2020-08-19T23:26:18.534Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat com.android.internal.os.ZygoteInit.main(ZygoteInit.java:756)\n[task 2020-08-19T23:26:18.534Z] 23:26:18     INFO -  org.mozilla.geckoview.test |\n[task 2020-08-19T23:26:18.535Z] 23:26:18     INFO -  org.mozilla.geckoview.test | INSTRUMENTATION_STATUS: id=AndroidJUnitRunner\n[task 2020-08-19T23:26:18.535Z] 23:26:18     INFO -  org.mozilla.geckoview.test | INSTRUMENTATION_STATUS: test=touchEventForResult\n[task 2020-08-19T23:26:18.535Z] 23:26:18     INFO -  org.mozilla.geckoview.test | INSTRUMENTATION_STATUS: class=org.mozilla.geckoview.test.PanZoomControllerTest\n[task 2020-08-19T23:26:18.535Z] 23:26:18     INFO -  org.mozilla.geckoview.test | INSTRUMENTATION_STATUS: stack=java.lang.AssertionError: Value should match\n[task 2020-08-19T23:26:18.535Z] 23:26:18     INFO -  org.mozilla.geckoview.test | Expected: <1>\n[task 2020-08-19T23:26:18.535Z] 23:26:18     INFO -  org.mozilla.geckoview.test |      but: was <0>\n[task 2020-08-19T23:26:18.535Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20)\n[task 2020-08-19T23:26:18.536Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat org.junit.Assert.assertThat(Assert.java:956)\n[task 2020-08-19T23:26:18.536Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat org.junit.rules.ErrorCollector$1.call(ErrorCollector.java:65)\n[task 2020-08-19T23:26:18.536Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat org.junit.rules.ErrorCollector.checkSucceeds(ErrorCollector.java:78)\n[task 2020-08-19T23:26:18.536Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat org.junit.rules.ErrorCollector.checkThat(ErrorCollector.java:63)\n[task 2020-08-19T23:26:18.536Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat org.mozilla.geckoview.test.rule.GeckoSessionTestRule.checkThat(GeckoSessionTestRule.java:802)\n[task 2020-08-19T23:26:18.536Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat org.mozilla.geckoview.test.BaseSessionTest.assertThat(BaseSessionTest.kt:88)\n[task 2020-08-19T23:26:18.537Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat org.mozilla.geckoview.test.PanZoomControllerTest.touchEventForResult(PanZoomControllerTest.kt:280)\n[task 2020-08-19T23:26:18.537Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat java.lang.reflect.Method.invoke(Native Method)\n[task 2020-08-19T23:26:18.537Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\n[task 2020-08-19T23:26:18.537Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n[task 2020-08-19T23:26:18.537Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\n[task 2020-08-19T23:26:18.537Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n[task 2020-08-19T23:26:18.538Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat org.mozilla.geckoview.test.rule.GeckoSessionTestRule$2.lambda$evaluate$0$GeckoSessionTestRule$2(GeckoSessionTestRule.java:1302)\n[task 2020-08-19T23:26:18.538Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat org.mozilla.geckoview.test.rule.-$$Lambda$GeckoSessionTestRule$2$sIbRNaZJgAu-QrUVWSGD8JbPSWM.run(lambda)\n[task 2020-08-19T23:26:18.538Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat android.app.Instrumentation$SyncRunnable.run(Instrumentation.java:1950)\n[task 2020-08-19T23:26:18.538Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat android.os.Handler.handleCallback(Handler.java:751)\n[task 2020-08-19T23:26:18.538Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat android.os.Handler.dispatchMessage(Handler.java:95)\n[task 2020-08-19T23:26:18.538Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat android.os.Looper.loop(Looper.java:154)\n[task 2020-08-19T23:26:18.539Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat android.app.ActivityThread.main(ActivityThread.java:6077)\n[task 2020-08-19T23:26:18.539Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat java.lang.reflect.Method.invoke(Native Method)\n[task 2020-08-19T23:26:18.539Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:866)\n[task 2020-08-19T23:26:18.539Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat com.android.internal.os.ZygoteInit.main(ZygoteInit.java:756)\n[task 2020-08-19T23:26:18.539Z] 23:26:18     INFO -  org.mozilla.geckoview.test |\n[task 2020-08-19T23:26:18.539Z] 23:26:18     INFO -  org.mozilla.geckoview.test | INSTRUMENTATION_STATUS: current=389\n[task 2020-08-19T23:26:18.539Z] 23:26:18     INFO -  org.mozilla.geckoview.test | INSTRUMENTATION_STATUS_CODE: -2\n[task 2020-08-19T23:26:18.540Z] 23:26:18  WARNING -  TEST-UNEXPECTED-FAIL | org.mozilla.geckoview.test.PanZoomControllerTest.touchEventForResult | java.lang.AssertionError: Value should match\n[task 2020-08-19T23:26:18.540Z] 23:26:18     INFO -  TEST-INFO took 208ms\n```", "time": "2020-08-20T00:06:07Z", "creation_time": "2020-08-20T00:06:07Z", "raw_text": "Backed out 5 changesets (bug 1633322, bug 1634504) for touchEventForResult gv-junit failures.\n\nPush with failures: https://treeherder.mozilla.org/#/jobs?repo=autoland&group_state=expanded&selectedTaskRun=EcSDJ46BRV2-_lITvl2zkA.0&fromchange=472c546742470cbf78cc794fddd7e5a65a609ace&searchStr=gv-junit&tochange=184dbd9b95ebc4185c683693ace4f46e443e69a8\n\nBackout link: https://hg.mozilla.org/integration/autoland/rev/184dbd9b95ebc4185c683693ace4f46e443e69a8\n\nFailure log: https://treeherder.mozilla.org/logviewer.html#/jobs?job_id=313494726&repo=autoland&lineNumber=8189\n\n```\n[task 2020-08-19T23:26:18.330Z] 23:26:18     INFO -  TEST-START | org.mozilla.geckoview.test.PanZoomControllerTest.touchEventForResult\n[task 2020-08-19T23:26:18.530Z] 23:26:18     INFO -  org.mozilla.geckoview.test | INSTRUMENTATION_STATUS: numtests=756\n[task 2020-08-19T23:26:18.530Z] 23:26:18     INFO -  org.mozilla.geckoview.test | INSTRUMENTATION_STATUS: stream=\n[task 2020-08-19T23:26:18.530Z] 23:26:18     INFO -  org.mozilla.geckoview.test | Error in touchEventForResult(org.mozilla.geckoview.test.PanZoomControllerTest):\n[task 2020-08-19T23:26:18.530Z] 23:26:18     INFO -  org.mozilla.geckoview.test | java.lang.AssertionError: Value should match\n[task 2020-08-19T23:26:18.530Z] 23:26:18     INFO -  org.mozilla.geckoview.test | Expected: <1>\n[task 2020-08-19T23:26:18.530Z] 23:26:18     INFO -  org.mozilla.geckoview.test |      but: was <0>\n[task 2020-08-19T23:26:18.531Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20)\n[task 2020-08-19T23:26:18.531Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat org.junit.Assert.assertThat(Assert.java:956)\n[task 2020-08-19T23:26:18.531Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat org.junit.rules.ErrorCollector$1.call(ErrorCollector.java:65)\n[task 2020-08-19T23:26:18.531Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat org.junit.rules.ErrorCollector.checkSucceeds(ErrorCollector.java:78)\n[task 2020-08-19T23:26:18.531Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat org.junit.rules.ErrorCollector.checkThat(ErrorCollector.java:63)\n[task 2020-08-19T23:26:18.531Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat org.mozilla.geckoview.test.rule.GeckoSessionTestRule.checkThat(GeckoSessionTestRule.java:802)\n[task 2020-08-19T23:26:18.532Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat org.mozilla.geckoview.test.BaseSessionTest.assertThat(BaseSessionTest.kt:88)\n[task 2020-08-19T23:26:18.532Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat org.mozilla.geckoview.test.PanZoomControllerTest.touchEventForResult(PanZoomControllerTest.kt:280)\n[task 2020-08-19T23:26:18.532Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat java.lang.reflect.Method.invoke(Native Method)\n[task 2020-08-19T23:26:18.532Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\n[task 2020-08-19T23:26:18.532Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n[task 2020-08-19T23:26:18.533Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\n[task 2020-08-19T23:26:18.533Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n[task 2020-08-19T23:26:18.533Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat org.mozilla.geckoview.test.rule.GeckoSessionTestRule$2.lambda$evaluate$0$GeckoSessionTestRule$2(GeckoSessionTestRule.java:1302)\n[task 2020-08-19T23:26:18.533Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat org.mozilla.geckoview.test.rule.-$$Lambda$GeckoSessionTestRule$2$sIbRNaZJgAu-QrUVWSGD8JbPSWM.run(lambda)\n[task 2020-08-19T23:26:18.533Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat android.app.Instrumentation$SyncRunnable.run(Instrumentation.java:1950)\n[task 2020-08-19T23:26:18.533Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat android.os.Handler.handleCallback(Handler.java:751)\n[task 2020-08-19T23:26:18.534Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat android.os.Handler.dispatchMessage(Handler.java:95)\n[task 2020-08-19T23:26:18.534Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat android.os.Looper.loop(Looper.java:154)\n[task 2020-08-19T23:26:18.534Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat android.app.ActivityThread.main(ActivityThread.java:6077)\n[task 2020-08-19T23:26:18.534Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat java.lang.reflect.Method.invoke(Native Method)\n[task 2020-08-19T23:26:18.534Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:866)\n[task 2020-08-19T23:26:18.534Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat com.android.internal.os.ZygoteInit.main(ZygoteInit.java:756)\n[task 2020-08-19T23:26:18.534Z] 23:26:18     INFO -  org.mozilla.geckoview.test |\n[task 2020-08-19T23:26:18.535Z] 23:26:18     INFO -  org.mozilla.geckoview.test | INSTRUMENTATION_STATUS: id=AndroidJUnitRunner\n[task 2020-08-19T23:26:18.535Z] 23:26:18     INFO -  org.mozilla.geckoview.test | INSTRUMENTATION_STATUS: test=touchEventForResult\n[task 2020-08-19T23:26:18.535Z] 23:26:18     INFO -  org.mozilla.geckoview.test | INSTRUMENTATION_STATUS: class=org.mozilla.geckoview.test.PanZoomControllerTest\n[task 2020-08-19T23:26:18.535Z] 23:26:18     INFO -  org.mozilla.geckoview.test | INSTRUMENTATION_STATUS: stack=java.lang.AssertionError: Value should match\n[task 2020-08-19T23:26:18.535Z] 23:26:18     INFO -  org.mozilla.geckoview.test | Expected: <1>\n[task 2020-08-19T23:26:18.535Z] 23:26:18     INFO -  org.mozilla.geckoview.test |      but: was <0>\n[task 2020-08-19T23:26:18.535Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20)\n[task 2020-08-19T23:26:18.536Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat org.junit.Assert.assertThat(Assert.java:956)\n[task 2020-08-19T23:26:18.536Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat org.junit.rules.ErrorCollector$1.call(ErrorCollector.java:65)\n[task 2020-08-19T23:26:18.536Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat org.junit.rules.ErrorCollector.checkSucceeds(ErrorCollector.java:78)\n[task 2020-08-19T23:26:18.536Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat org.junit.rules.ErrorCollector.checkThat(ErrorCollector.java:63)\n[task 2020-08-19T23:26:18.536Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat org.mozilla.geckoview.test.rule.GeckoSessionTestRule.checkThat(GeckoSessionTestRule.java:802)\n[task 2020-08-19T23:26:18.536Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat org.mozilla.geckoview.test.BaseSessionTest.assertThat(BaseSessionTest.kt:88)\n[task 2020-08-19T23:26:18.537Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat org.mozilla.geckoview.test.PanZoomControllerTest.touchEventForResult(PanZoomControllerTest.kt:280)\n[task 2020-08-19T23:26:18.537Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat java.lang.reflect.Method.invoke(Native Method)\n[task 2020-08-19T23:26:18.537Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\n[task 2020-08-19T23:26:18.537Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n[task 2020-08-19T23:26:18.537Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\n[task 2020-08-19T23:26:18.537Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n[task 2020-08-19T23:26:18.538Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat org.mozilla.geckoview.test.rule.GeckoSessionTestRule$2.lambda$evaluate$0$GeckoSessionTestRule$2(GeckoSessionTestRule.java:1302)\n[task 2020-08-19T23:26:18.538Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat org.mozilla.geckoview.test.rule.-$$Lambda$GeckoSessionTestRule$2$sIbRNaZJgAu-QrUVWSGD8JbPSWM.run(lambda)\n[task 2020-08-19T23:26:18.538Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat android.app.Instrumentation$SyncRunnable.run(Instrumentation.java:1950)\n[task 2020-08-19T23:26:18.538Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat android.os.Handler.handleCallback(Handler.java:751)\n[task 2020-08-19T23:26:18.538Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat android.os.Handler.dispatchMessage(Handler.java:95)\n[task 2020-08-19T23:26:18.538Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat android.os.Looper.loop(Looper.java:154)\n[task 2020-08-19T23:26:18.539Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat android.app.ActivityThread.main(ActivityThread.java:6077)\n[task 2020-08-19T23:26:18.539Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat java.lang.reflect.Method.invoke(Native Method)\n[task 2020-08-19T23:26:18.539Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:866)\n[task 2020-08-19T23:26:18.539Z] 23:26:18     INFO -  org.mozilla.geckoview.test | \tat com.android.internal.os.ZygoteInit.main(ZygoteInit.java:756)\n[task 2020-08-19T23:26:18.539Z] 23:26:18     INFO -  org.mozilla.geckoview.test |\n[task 2020-08-19T23:26:18.539Z] 23:26:18     INFO -  org.mozilla.geckoview.test | INSTRUMENTATION_STATUS: current=389\n[task 2020-08-19T23:26:18.539Z] 23:26:18     INFO -  org.mozilla.geckoview.test | INSTRUMENTATION_STATUS_CODE: -2\n[task 2020-08-19T23:26:18.540Z] 23:26:18  WARNING -  TEST-UNEXPECTED-FAIL | org.mozilla.geckoview.test.PanZoomControllerTest.touchEventForResult | java.lang.AssertionError: Value should match\n[task 2020-08-19T23:26:18.540Z] 23:26:18     INFO -  TEST-INFO took 208ms\n```", "is_private": false, "attachment_id": null, "creator": "btara@mozilla.com", "tags": [], "author": "btara@mozilla.com", "bug_id": 1633322, "id": 14997280}, {"time": "2020-08-20T15:10:59Z", "creation_time": "2020-08-20T15:10:59Z", "text": "Ugh. Looks like I need to wait for `onFirstContentfulPaint()` in `setupScroll()` as well.", "raw_text": "Ugh. Looks like I need to wait for `onFirstContentfulPaint()` in `setupScroll()` as well.", "is_private": false, "count": 39, "bug_id": 1633322, "id": 14998160, "attachment_id": null, "creator": "snorp@snorp.net", "tags": [], "author": "snorp@snorp.net"}, {"attachment_id": null, "tags": [], "author": "pulsebot@bots.tld", "creation_time": "2020-08-20T20:44:12Z", "text": "Pushed by jwillcox@mozilla.com:\nhttps://hg.mozilla.org/integration/autoland/rev/9025714892ac\nCombine APZEventResult::mTargetIsRoot and mHitRegionWithApzAwareListeners into a single flag. r=kats,geckoview-reviewers,snorp\nhttps://hg.mozilla.org/integration/autoland/rev/a0291bc39a66\nTurn APZEventResult::mHandledByRootApzc into a Maybe. r=kats,geckoview-reviewers,snorp\nhttps://hg.mozilla.org/integration/autoland/rev/3953149e9b4a\nAdd an input block callback facility to allow senders of input events to receive a delayed notification of whether the event was processed by the root APZC. r=kats\nhttps://hg.mozilla.org/integration/autoland/rev/29e16ac5d3de\nConsider content handling for `onTouchEventForResult` r=geckoview-reviewers,botond,agi,esawin", "bug_id": 1633322, "id": 14998713, "creator": "pulsebot@bots.tld", "time": "2020-08-20T20:44:12Z", "raw_text": "Pushed by jwillcox@mozilla.com:\nhttps://hg.mozilla.org/integration/autoland/rev/9025714892ac\nCombine APZEventResult::mTargetIsRoot and mHitRegionWithApzAwareListeners into a single flag. r=kats,geckoview-reviewers,snorp\nhttps://hg.mozilla.org/integration/autoland/rev/a0291bc39a66\nTurn APZEventResult::mHandledByRootApzc into a Maybe. r=kats,geckoview-reviewers,snorp\nhttps://hg.mozilla.org/integration/autoland/rev/3953149e9b4a\nAdd an input block callback facility to allow senders of input events to receive a delayed notification of whether the event was processed by the root APZC. r=kats\nhttps://hg.mozilla.org/integration/autoland/rev/29e16ac5d3de\nConsider content handling for `onTouchEventForResult` r=geckoview-reviewers,botond,agi,esawin", "is_private": false, "count": 40}, {"text": "https://hg.mozilla.org/mozilla-central/rev/9025714892ac\nhttps://hg.mozilla.org/mozilla-central/rev/a0291bc39a66\nhttps://hg.mozilla.org/mozilla-central/rev/3953149e9b4a\nhttps://hg.mozilla.org/mozilla-central/rev/29e16ac5d3de", "creation_time": "2020-08-21T03:45:49Z", "attachment_id": null, "tags": ["bugherder"], "author": "rmaries@mozilla.com", "time": "2020-08-21T03:45:49Z", "raw_text": "https://hg.mozilla.org/mozilla-central/rev/9025714892ac\nhttps://hg.mozilla.org/mozilla-central/rev/a0291bc39a66\nhttps://hg.mozilla.org/mozilla-central/rev/3953149e9b4a\nhttps://hg.mozilla.org/mozilla-central/rev/29e16ac5d3de", "is_private": false, "count": 41, "bug_id": 1633322, "id": 14999133, "creator": "rmaries@mozilla.com"}, {"attachment_id": null, "author": "ryanvm@gmail.com", "tags": ["backout"], "creation_time": "2020-08-25T19:17:42Z", "text": "Backed out from Beta 81 at Snorp's request to allow more time for downstream consumers to adapt. It remains landed for 82+.\nhttps://hg.mozilla.org/releases/mozilla-beta/rev/c3e9617c37d69d2064e4a83015a304048f5cc7ed", "bug_id": 1633322, "id": 15005766, "creator": "ryanvm@gmail.com", "raw_text": "Backed out from Beta 81 at Snorp's request to allow more time for downstream consumers to adapt. It remains landed for 82+.\nhttps://hg.mozilla.org/releases/mozilla-beta/rev/c3e9617c37d69d2064e4a83015a304048f5cc7ed", "time": "2020-08-25T19:17:42Z", "is_private": false, "count": 42}, {"creation_time": "2020-08-26T14:04:14Z", "text": "Just wanted to say that I tested\nhttps://www.phonearena.com\nhttps://www.w3schools.com\non Fenix and the issue seem fixed - the toolbar is now correctly animated.\n\nThank you!", "attachment_id": null, "tags": [], "author": "petru.lingurar@softvision.ro", "time": "2020-08-26T14:04:14Z", "raw_text": "Just wanted to say that I tested\nhttps://www.phonearena.com\nhttps://www.w3schools.com\non Fenix and the issue seem fixed - the toolbar is now correctly animated.\n\nThank you!", "is_private": false, "count": 43, "bug_id": 1633322, "id": 15006953, "creator": "petru.lingurar@softvision.ro"}]}}, "comments": {}}