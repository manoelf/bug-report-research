{"bugs": {"653132": {"comments": [{"creation_time": "2011-04-27T15:38:04Z", "author": "db.pub.mail@gmail.com", "attachment_id": null, "id": 5434747, "creator": "db.pub.mail@gmail.com", "text": "User-Agent:       Mozilla/5.0 (X11; Linux x86_64; rv:2.0) Gecko/20110323 Firefox/4.0\nBuild Identifier: Magic ponies!\n\nAuto-filled password fields should not have their values available to javascript.\nRational with an example:\nSo on Honest Achmed CA website there is a login page and I saved my username('admin') with my password('abc123') - when firefox autofills in my details, the value for my password should not be available to javascript.\nAssuming the login page is vulnerable to an xss attack, that attack could steal my password - even if I close the page after noticing a dodgy url in my address bar!\n\n\nReproducible: Always", "count": 0, "raw_text": "User-Agent:       Mozilla/5.0 (X11; Linux x86_64; rv:2.0) Gecko/20110323 Firefox/4.0\nBuild Identifier: Magic ponies!\n\nAuto-filled password fields should not have their values available to javascript.\nRational with an example:\nSo on Honest Achmed CA website there is a login page and I saved my username('admin') with my password('abc123') - when firefox autofills in my details, the value for my password should not be available to javascript.\nAssuming the login page is vulnerable to an xss attack, that attack could steal my password - even if I close the page after noticing a dodgy url in my address bar!\n\n\nReproducible: Always", "bug_id": 653132, "is_private": false, "tags": [], "time": "2011-04-27T15:38:04Z"}, {"creation_time": "2011-04-27T16:05:03Z", "id": 5434815, "attachment_id": null, "creator": "db.pub.mail@gmail.com", "text": "This could be considered a duplicate of https://bugzilla.mozilla.org/show_bug.cgi?id=359675.", "author": "db.pub.mail@gmail.com", "raw_text": "This could be considered a duplicate of https://bugzilla.mozilla.org/show_bug.cgi?id=359675.", "bug_id": 653132, "count": 1, "time": "2011-04-27T16:05:03Z", "is_private": false, "tags": []}, {"count": 2, "raw_text": "(In reply to comment #1)\n> This could be considered a duplicate of\n> https://bugzilla.mozilla.org/show_bug.cgi?id=359675.\n\nSort of... That was about making it possible to fill a form in via an API (by an extension or something). From what you described you don't want the values that are autofilled to be available to the webpage, which just isn't how the web works. Once it's in the form, the page can see it.\n\nAutocomplete handlers aren't visible to the page though, so if you'd like to remember passwords and have them available via the autocomplete UI, then you can set signon.autofillForms to false. That preference predates bug 359675.", "bug_id": 653132, "is_private": false, "tags": [], "time": "2011-04-27T17:00:00Z", "creation_time": "2011-04-27T17:00:00Z", "author": "paul@oshannessy.com", "attachment_id": null, "id": 5434980, "text": "(In reply to comment #1)\n> This could be considered a duplicate of\n> https://bugzilla.mozilla.org/show_bug.cgi?id=359675.\n\nSort of... That was about making it possible to fill a form in via an API (by an extension or something). From what you described you don't want the values that are autofilled to be available to the webpage, which just isn't how the web works. Once it's in the form, the page can see it.\n\nAutocomplete handlers aren't visible to the page though, so if you'd like to remember passwords and have them available via the autocomplete UI, then you can set signon.autofillForms to false. That preference predates bug 359675.", "creator": "paul@oshannessy.com"}, {"is_private": false, "tags": [], "time": "2011-04-27T18:00:08Z", "count": 3, "raw_text": "@Paul  ah... no that isn't what I meant. Like we have httponly cookies, it would be nice to have password type fields, which if pre-filled their values would not be available to *javascript* .", "bug_id": 653132, "author": "db.pub.mail@gmail.com", "id": 5435210, "attachment_id": null, "text": "@Paul  ah... no that isn't what I meant. Like we have httponly cookies, it would be nice to have password type fields, which if pre-filled their values would not be available to *javascript* .", "creator": "db.pub.mail@gmail.com", "creation_time": "2011-04-27T18:00:08Z"}, {"author": "mozilla+bmo@noorenberghe.ca", "creator": "mozilla+bmo@noorenberghe.ca", "text": "*** Bug 925376 has been marked as a duplicate of this bug. ***", "id": 7946936, "attachment_id": null, "creation_time": "2013-10-10T18:41:23Z", "tags": [], "is_private": false, "time": "2013-10-10T18:41:23Z", "count": 4, "bug_id": 653132, "raw_text": ""}, {"raw_text": "", "is_private": false, "tags": [], "creation_time": "2013-10-10T20:27:49Z", "attachment_id": null, "id": 7947374, "text": "*** Bug 777725 has been marked as a duplicate of this bug. ***", "bug_id": 653132, "count": 5, "time": "2013-10-10T20:27:49Z", "creator": "zackw@panix.com", "author": "zackw@panix.com"}, {"bug_id": 653132, "raw_text": "Actual in-the-wild case of this privacy leak described here: http://www.pamgriffith.net/blog/privacy-and-autocompleted-usernames .\n\nProposal for fix: for passwords stored in the password manager, allow JS to read back only dummy values until the onsubmit event fires.  This would require careful study to make sure it doesn't break sites, even those that do batshit things like copy all the form values from the visible form to an invisible second form (yes, I have seen *that*)... but the password manager already doesn't work on sites that are sufficiently batshit, so I think the compat hit is likely to be acceptable.", "count": 6, "time": "2013-10-10T20:29:22Z", "tags": [], "is_private": false, "creation_time": "2013-10-10T20:29:22Z", "text": "Actual in-the-wild case of this privacy leak described here: http://www.pamgriffith.net/blog/privacy-and-autocompleted-usernames .\n\nProposal for fix: for passwords stored in the password manager, allow JS to read back only dummy values until the onsubmit event fires.  This would require careful study to make sure it doesn't break sites, even those that do batshit things like copy all the form values from the visible form to an invisible second form (yes, I have seen *that*)... but the password manager already doesn't work on sites that are sufficiently batshit, so I think the compat hit is likely to be acceptable.", "creator": "zackw@panix.com", "attachment_id": null, "id": 7947378, "author": "zackw@panix.com"}, {"count": 7, "bug_id": 653132, "raw_text": "(In reply to Zack Weinberg (:zwol) from comment #6)\n> Actual in-the-wild case of this privacy leak described here:\n> http://www.pamgriffith.net/blog/privacy-and-autocompleted-usernames .\n> \n> Proposal for fix: for passwords stored in the password manager, allow JS to\n> read back only dummy values until the onsubmit event fires.  This would\n> require careful study to make sure it doesn't break sites, even those that\n> do batshit things like copy all the form values from the visible form to an\n> invisible second form (yes, I have seen *that*)... but the password manager\n> already doesn't work on sites that are sufficiently batshit, so I think the\n> compat hit is likely to be acceptable.\n\nThis sounds pretty reasonable to me (isn't IE doing something like this?), though we have to be careful to do the actual fill-in after all the content onsubmit handlers are triggered.", "tags": [], "is_private": false, "time": "2013-11-25T07:48:36Z", "creation_time": "2013-11-25T07:48:36Z", "author": "deian@cs.ucsd.edu", "creator": "deian@cs.ucsd.edu", "text": "(In reply to Zack Weinberg (:zwol) from comment #6)\n> Actual in-the-wild case of this privacy leak described here:\n> http://www.pamgriffith.net/blog/privacy-and-autocompleted-usernames .\n> \n> Proposal for fix: for passwords stored in the password manager, allow JS to\n> read back only dummy values until the onsubmit event fires.  This would\n> require careful study to make sure it doesn't break sites, even those that\n> do batshit things like copy all the form values from the visible form to an\n> invisible second form (yes, I have seen *that*)... but the password manager\n> already doesn't work on sites that are sufficiently batshit, so I think the\n> compat hit is likely to be acceptable.\n\nThis sounds pretty reasonable to me (isn't IE doing something like this?), though we have to be careful to do the actual fill-in after all the content onsubmit handlers are triggered.", "attachment_id": null, "id": 8119043}, {"bug_id": 653132, "count": 8, "time": "2014-05-28T04:23:20Z", "creator": "VYV03354@nifty.ne.jp", "author": "VYV03354@nifty.ne.jp", "raw_text": "The injected script can just post the form to a hidden iframe to steal the password, no?", "tags": [], "is_private": false, "creation_time": "2014-05-28T04:23:20Z", "text": "The injected script can just post the form to a hidden iframe to steal the password, no?", "attachment_id": null, "id": 8849404}, {"count": 9, "bug_id": 653132, "raw_text": "How would fixing this bug impact Web sites that actually use JavaScript for their logins (e.g., Slashdot at <http://slashdot.org/>)?", "tags": [], "is_private": false, "time": "2014-05-28T18:24:32Z", "creation_time": "2014-05-28T18:24:32Z", "author": "david@rossde.com", "creator": "david@rossde.com", "text": "How would fixing this bug impact Web sites that actually use JavaScript for their logins (e.g., Slashdot at <http://slashdot.org/>)?", "id": 8853169, "attachment_id": null}, {"is_private": false, "tags": [], "time": "2015-01-07T01:48:10Z", "count": 10, "raw_text": "> Proposal for fix: for passwords stored in the password manager, allow JS to read back only dummy values until the onsubmit event fires.  \n\nSome sites don't use a <form> element for logins. Check out http://www.hulu.com/\n\n> This would require careful study to make sure it doesn't break sites, even those that do batshit things like copy all the form values from the visible form to an invisible second form (yes, I have seen *that*)... but the password manager already doesn't work on sites that are sufficiently batshit, so I think the compat hit is likely to be acceptable.\n\nWe should be making the password manager work with more sites, not fewer.", "bug_id": 653132, "author": "ckarlof@mozilla.com", "id": 9760940, "attachment_id": null, "text": "> Proposal for fix: for passwords stored in the password manager, allow JS to read back only dummy values until the onsubmit event fires.  \n\nSome sites don't use a <form> element for logins. Check out http://www.hulu.com/\n\n> This would require careful study to make sure it doesn't break sites, even those that do batshit things like copy all the form values from the visible form to an invisible second form (yes, I have seen *that*)... but the password manager already doesn't work on sites that are sufficiently batshit, so I think the compat hit is likely to be acceptable.\n\nWe should be making the password manager work with more sites, not fewer.", "creator": "ckarlof@mozilla.com", "creation_time": "2015-01-07T01:48:10Z"}, {"creation_time": "2015-01-07T03:13:56Z", "author": "zackw@panix.com", "attachment_id": null, "id": 9761153, "creator": "zackw@panix.com", "text": "(In reply to Chris Karlof [:ckarlof] from comment #10)\n> > Proposal for fix: for passwords stored in the password manager, allow JS to read back\n> > only dummy values until the onsubmit event fires.  \n> \n> Some sites don't use a <form> element for logins. Check out\n> http://www.hulu.com/\n\nThat's pretty darn batshit IMNSHO, but heuristics along the lines of the pop-up blocker should be possible.\n\nThe principle to enforce is that *once the user takes a positive action to log in*, the site is entitled to know their user credentials -- but as long as they haven't, it isn't.  So we ought to be able to partition the set of all event handlers into \"gets to see the real username and password\" vs. \"doesn't get to see the real username and password\" by analyzing what user actions can trigger them (in the abstract, not for specific pages) and whether those actions qualify as \"taking a positive action to log in\".\n\n> We should be making the password manager work with more sites, not fewer.\n\nI don't disagree with that, but I think we shouldn't just give up on not-logged-in privacy leaks because of it.", "count": 11, "raw_text": "(In reply to Chris Karlof [:ckarlof] from comment #10)\n> > Proposal for fix: for passwords stored in the password manager, allow JS to read back\n> > only dummy values until the onsubmit event fires.  \n> \n> Some sites don't use a <form> element for logins. Check out\n> http://www.hulu.com/\n\nThat's pretty darn batshit IMNSHO, but heuristics along the lines of the pop-up blocker should be possible.\n\nThe principle to enforce is that *once the user takes a positive action to log in*, the site is entitled to know their user credentials -- but as long as they haven't, it isn't.  So we ought to be able to partition the set of all event handlers into \"gets to see the real username and password\" vs. \"doesn't get to see the real username and password\" by analyzing what user actions can trigger them (in the abstract, not for specific pages) and whether those actions qualify as \"taking a positive action to log in\".\n\n> We should be making the password manager work with more sites, not fewer.\n\nI don't disagree with that, but I think we shouldn't just give up on not-logged-in privacy leaks because of it.", "bug_id": 653132, "is_private": false, "tags": [], "time": "2015-01-07T03:13:56Z"}, {"count": 12, "bug_id": 653132, "raw_text": "Some Web site (e.g., Slashdot at <http://slashdot.org/?nobeta=1>) use JavaScript to handle their logins.", "tags": [], "is_private": false, "time": "2015-01-07T18:13:31Z", "creation_time": "2015-01-07T18:13:31Z", "author": "david@rossde.com", "text": "Some Web site (e.g., Slashdot at <http://slashdot.org/?nobeta=1>) use JavaScript to handle their logins.", "creator": "david@rossde.com", "attachment_id": null, "id": 9764183}, {"text": "(In reply to David E. Ross from comment #12)\n> Some Web site (e.g., Slashdot at <http://slashdot.org/?nobeta=1>) use\n> JavaScript to handle their logins.\n\nYes, that's why (contra comment #7) we make sure to make the real data available to 'onsubmit' and related event handlers.", "creator": "zackw@panix.com", "id": 9764298, "attachment_id": null, "author": "zackw@panix.com", "creation_time": "2015-01-07T18:35:43Z", "time": "2015-01-07T18:35:43Z", "tags": [], "is_private": false, "bug_id": 653132, "raw_text": "(In reply to David E. Ross from comment #12)\n> Some Web site (e.g., Slashdot at <http://slashdot.org/?nobeta=1>) use\n> JavaScript to handle their logins.\n\nYes, that's why (contra comment #7) we make sure to make the real data available to 'onsubmit' and related event handlers.", "count": 13}, {"bug_id": 653132, "count": 14, "time": "2016-01-04T19:56:57Z", "creator": "nrfoconnor+mozilla@gmail.com", "author": "nrfoconnor+mozilla@gmail.com", "raw_text": "I would like to bring this bug back into the foreground, since it is labelled as \"new\", and this browser exploit was used to steal numerous user passwords from www.facepunch.com (which was breached via an unrelated exploit). I will also be hunting down Google's preferred method of bug reporting (whatever that is), since Chrome was also affected by this exploit.\n\nI'm not certain precisely how close to \"fixed\" this browser exploit is, but it's still marked as \"new\" so I'm going to request action be taken ASAP.", "is_private": false, "tags": [], "creation_time": "2016-01-04T19:56:57Z", "attachment_id": null, "id": 11044288, "text": "I would like to bring this bug back into the foreground, since it is labelled as \"new\", and this browser exploit was used to steal numerous user passwords from www.facepunch.com (which was breached via an unrelated exploit). I will also be hunting down Google's preferred method of bug reporting (whatever that is), since Chrome was also affected by this exploit.\n\nI'm not certain precisely how close to \"fixed\" this browser exploit is, but it's still marked as \"new\" so I'm going to request action be taken ASAP."}, {"raw_text": "(In reply to Nicholas O'Connor from comment #14)\n> I would like to bring this bug back into the foreground, since it is\n> labelled as \"new\", and this browser exploit was used to steal numerous user\n> passwords from www.facepunch.com (which was breached via an unrelated\n> exploit).\n\nCan you provide more details on this attack, or perhaps a link to an article.", "tags": [], "is_private": false, "creation_time": "2016-01-04T21:16:12Z", "text": "(In reply to Nicholas O'Connor from comment #14)\n> I would like to bring this bug back into the foreground, since it is\n> labelled as \"new\", and this browser exploit was used to steal numerous user\n> passwords from www.facepunch.com (which was breached via an unrelated\n> exploit).\n\nCan you provide more details on this attack, or perhaps a link to an article.", "attachment_id": null, "id": 11044600, "bug_id": 653132, "count": 15, "time": "2016-01-04T21:16:12Z", "creator": "tanvi@mozilla.com", "author": "tanvi@mozilla.com"}, {"creation_time": "2016-01-12T18:39:55Z", "text": "(In reply to Tanvi Vyas [:tanvi] from comment #15)\n> (In reply to Nicholas O'Connor from comment #14)\n> > I would like to bring this bug back into the foreground, since it is\n> > labelled as \"new\", and this browser exploit was used to steal numerous user\n> > passwords from www.facepunch.com (which was breached via an unrelated\n> > exploit).\n> \n> Can you provide more details on this attack, or perhaps a link to an article.\n\n(Sorry I'm late)\n\nSome of the finer details have escaped me due to my own poor memory, but here's the gist:\n1. A moderator's account was compromised due to an unrelated attack.\n2. This attacker exploited an XSS vulnerability in the site, executing unwanted JavaScript on all its users.\n3. *(The part that's relevant to the browser begins here)* The JavaScript embedded a login page into the site in a way that's hidden to the user, but visible to autofill (I believe an iframe was used, but again, not certain).\n4. Once autofill kicked in, the attacker reads the username and password from the autofilled login fields, and sends them to Gods-know-where.\n\nIn practice, I believe Firefox users might have been safer in this one particular attack, since the login form on the site has incorrectly configured placeholder values that confuse autofill (Username: \"Password\" Password: \"actual_password_here\"), but we, for obvious reasons, shouldn't count on that being a factor next time :V\n\nIf more detail is needed, I might be able to go ask a moderator to come over and fill in my many, many blanks, but I think that's enough to identify the issue: this attack was possible because browsers (which I believe may include Firefox) allow JavaScript to read the autofilled values.\n\nI've since disabled the password manager functionality, and will be recommending others do the same for the time being until this is fixed (or it becomes apparent to me that this kind of attack is incredibly infrequent, whichever comes first)", "attachment_id": null, "id": 11069459, "raw_text": "(In reply to Tanvi Vyas [:tanvi] from comment #15)\n> (In reply to Nicholas O'Connor from comment #14)\n> > I would like to bring this bug back into the foreground, since it is\n> > labelled as \"new\", and this browser exploit was used to steal numerous user\n> > passwords from www.facepunch.com (which was breached via an unrelated\n> > exploit).\n> \n> Can you provide more details on this attack, or perhaps a link to an article.\n\n(Sorry I'm late)\n\nSome of the finer details have escaped me due to my own poor memory, but here's the gist:\n1. A moderator's account was compromised due to an unrelated attack.\n2. This attacker exploited an XSS vulnerability in the site, executing unwanted JavaScript on all its users.\n3. *(The part that's relevant to the browser begins here)* The JavaScript embedded a login page into the site in a way that's hidden to the user, but visible to autofill (I believe an iframe was used, but again, not certain).\n4. Once autofill kicked in, the attacker reads the username and password from the autofilled login fields, and sends them to Gods-know-where.\n\nIn practice, I believe Firefox users might have been safer in this one particular attack, since the login form on the site has incorrectly configured placeholder values that confuse autofill (Username: \"Password\" Password: \"actual_password_here\"), but we, for obvious reasons, shouldn't count on that being a factor next time :V\n\nIf more detail is needed, I might be able to go ask a moderator to come over and fill in my many, many blanks, but I think that's enough to identify the issue: this attack was possible because browsers (which I believe may include Firefox) allow JavaScript to read the autofilled values.\n\nI've since disabled the password manager functionality, and will be recommending others do the same for the time being until this is fixed (or it becomes apparent to me that this kind of attack is incredibly infrequent, whichever comes first)", "tags": [], "is_private": false, "creator": "nrfoconnor+mozilla@gmail.com", "author": "nrfoconnor+mozilla@gmail.com", "bug_id": 653132, "count": 16, "time": "2016-01-12T18:39:55Z"}, {"raw_text": "Thanks for these details Nicholas!\n\n(In reply to Nicholas O'Connor from comment #16)\n> In practice, I believe Firefox users might have been safer in this one\n> particular attack, since the login form on the site has incorrectly\n> configured placeholder values that confuse autofill (Username: \"Password\"\n> Password: \"actual_password_here\"), but we, for obvious reasons, shouldn't\n> count on that being a factor next time :V\n> \nWhat do you mean by this?  The attack probably didn't work for Firefox users?  Couldn't the attacker just inject the right number and type of fields to get Firefox' password manager to work? (i.e. one regular input field followed by another input type=password?)\n\nOr do you mean that Firefox' password manager doesn't save passwords for facepunch.com because it doesn't support their login form?\n\nI tried testing this and it doesn't look like Password Manager autofill works on facepunch.com.  You can autocomplete the password field after selecting the username, but that requires user interaction.", "bug_id": 653132, "count": 17, "time": "2016-01-13T00:26:40Z", "is_private": false, "tags": [], "creation_time": "2016-01-13T00:26:40Z", "id": 11070796, "attachment_id": null, "creator": "tanvi@mozilla.com", "text": "Thanks for these details Nicholas!\n\n(In reply to Nicholas O'Connor from comment #16)\n> In practice, I believe Firefox users might have been safer in this one\n> particular attack, since the login form on the site has incorrectly\n> configured placeholder values that confuse autofill (Username: \"Password\"\n> Password: \"actual_password_here\"), but we, for obvious reasons, shouldn't\n> count on that being a factor next time :V\n> \nWhat do you mean by this?  The attack probably didn't work for Firefox users?  Couldn't the attacker just inject the right number and type of fields to get Firefox' password manager to work? (i.e. one regular input field followed by another input type=password?)\n\nOr do you mean that Firefox' password manager doesn't save passwords for facepunch.com because it doesn't support their login form?\n\nI tried testing this and it doesn't look like Password Manager autofill works on facepunch.com.  You can autocomplete the password field after selecting the username, but that requires user interaction.", "author": "tanvi@mozilla.com"}, {"creation_time": "2018-04-20T01:19:35Z", "id": 13220349, "attachment_id": null, "creator": "mozilla+bmo@noorenberghe.ca", "text": "*** Bug 1454319 has been marked as a duplicate of this bug. ***", "author": "mozilla+bmo@noorenberghe.ca", "raw_text": "", "bug_id": 653132, "count": 18, "time": "2018-04-20T01:19:35Z", "is_private": false, "tags": []}, {"time": "2019-10-31T07:02:45Z", "is_private": false, "tags": [], "raw_text": "I don't think there is a web-compatible way to implement this in an opt-out fashion at this time.", "bug_id": 653132, "count": 19, "attachment_id": null, "id": 14458603, "creator": "mozilla+bmo@noorenberghe.ca", "text": "I don't think there is a web-compatible way to implement this in an opt-out fashion at this time.", "author": "mozilla+bmo@noorenberghe.ca", "creation_time": "2019-10-31T07:02:45Z"}]}}, "comments": {}}