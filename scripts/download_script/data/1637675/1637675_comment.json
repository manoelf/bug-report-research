{"comments": {}, "bugs": {"1637675": {"comments": [{"attachment_id": null, "tags": [], "author": "gkeeley@mozilla.com", "text": "A single autogenerated .swift file would suffice here, and consumers would appreciate the added simplicity. This is not a priority, this is 'nice to have at some point if it isn't too much trouble'. \n\nIn Firefox iOS, we are suffering from compilation time creep and Xcode performance problem creep (navigating the project mainly), that comes with a growing project of this magnitude and adding more .swift files. We like to keep a lid on unnecessary creep in this regard; this is also an 'ergonomic request' for consumers -not sure the term here, it feels like I might be arguing about art :).\nFor instance, autocompletion of files and symbols (cmd-shift-O in Xcode) gets cluttered when many file matches, that list only show 6/7 entries at a time.\nI think there is also a conceptual simplicity for me -which just a perceptual argument- that this library already has complex integration requiring .yml files, autogen steps added to xcode, and personally as a consumer the idea that this autogenerates a single .swift file has a lower cognitive load. I am more used to the mental model of 'ignore this one autogenerated file' as I cross paths with it, rather than 'ignore all these files'.", "creation_time": "2020-05-13T17:20:25Z", "creator": "gkeeley@mozilla.com", "bug_id": 1637675, "id": 14817247, "count": 0, "time": "2020-05-13T17:20:25Z", "raw_text": "A single autogenerated .swift file would suffice here, and consumers would appreciate the added simplicity. This is not a priority, this is 'nice to have at some point if it isn't too much trouble'. \n\nIn Firefox iOS, we are suffering from compilation time creep and Xcode performance problem creep (navigating the project mainly), that comes with a growing project of this magnitude and adding more .swift files. We like to keep a lid on unnecessary creep in this regard; this is also an 'ergonomic request' for consumers -not sure the term here, it feels like I might be arguing about art :).\nFor instance, autocompletion of files and symbols (cmd-shift-O in Xcode) gets cluttered when many file matches, that list only show 6/7 entries at a time.\nI think there is also a conceptual simplicity for me -which just a perceptual argument- that this library already has complex integration requiring .yml files, autogen steps added to xcode, and personally as a consumer the idea that this autogenerates a single .swift file has a lower cognitive load. I am more used to the mental model of 'ignore this one autogenerated file' as I cross paths with it, rather than 'ignore all these files'.", "is_private": false}, {"id": 14818624, "bug_id": 1637675, "author": "alessio.placitelli@gmail.com", "tags": [], "creator": "alessio.placitelli@gmail.com", "attachment_id": null, "is_private": false, "raw_text": "(In reply to :garvan from comment #0)\n> For instance, autocompletion of files and symbols (cmd-shift-O in Xcode) gets cluttered when many file matches, that list only show 6/7 entries at a time.\n\n@Garvan, can you kindly describe a scenario here? That would allow us to better understand the problem.\n\n> I am more used to the mental model of 'ignore this one autogenerated file' as I cross paths with it, rather than 'ignore all these files'.\n\n@Travis, aren't all the generated files in a clearly marked \"generated\"-like directory?", "time": "2020-05-14T06:05:27Z", "creation_time": "2020-05-14T06:05:27Z", "text": "(In reply to :garvan from comment #0)\n> For instance, autocompletion of files and symbols (cmd-shift-O in Xcode) gets cluttered when many file matches, that list only show 6/7 entries at a time.\n\n@Garvan, can you kindly describe a scenario here? That would allow us to better understand the problem.\n\n> I am more used to the mental model of 'ignore this one autogenerated file' as I cross paths with it, rather than 'ignore all these files'.\n\n@Travis, aren't all the generated files in a clearly marked \"generated\"-like directory?", "count": 1}, {"raw_text": "(In reply to Alessio Placitelli [:Dexter] from comment #1)\n> (In reply to :garvan from comment #0)\n> > For instance, autocompletion of files and symbols (cmd-shift-O in Xcode) gets cluttered when many file matches, that list only show 6/7 entries at a time.\n> \n> @Garvan, can you kindly describe a scenario here? That would allow us to better understand the problem.\n> \n> > I am more used to the mental model of 'ignore this one autogenerated file' as I cross paths with it, rather than 'ignore all these files'.\n> \n> @Travis, aren't all the generated files in a clearly marked \"generated\"-like directory?\n\nYes the files go into a \"Generated\" directory, but simply having more files rather than just putting them in a single file causes Xcode to slow down and thus the builds to slow down.  What Garvan is asking for it the ability to put all the generated metrics API in a single file to help with this.  What do you think about having a glean_parser flag to have this as a option when generating code?", "time": "2020-05-14T13:42:09Z", "creation_time": "2020-05-14T13:42:09Z", "text": "(In reply to Alessio Placitelli [:Dexter] from comment #1)\n> (In reply to :garvan from comment #0)\n> > For instance, autocompletion of files and symbols (cmd-shift-O in Xcode) gets cluttered when many file matches, that list only show 6/7 entries at a time.\n> \n> @Garvan, can you kindly describe a scenario here? That would allow us to better understand the problem.\n> \n> > I am more used to the mental model of 'ignore this one autogenerated file' as I cross paths with it, rather than 'ignore all these files'.\n> \n> @Travis, aren't all the generated files in a clearly marked \"generated\"-like directory?\n\nYes the files go into a \"Generated\" directory, but simply having more files rather than just putting them in a single file causes Xcode to slow down and thus the builds to slow down.  What Garvan is asking for it the ability to put all the generated metrics API in a single file to help with this.  What do you think about having a glean_parser flag to have this as a option when generating code?", "is_private": false, "count": 2, "bug_id": 1637675, "id": 14819369, "creator": "tlong@mozilla.com", "attachment_id": null, "author": "tlong@mozilla.com", "tags": []}, {"is_private": false, "raw_text": "(In reply to Travis Long [:travis_] from comment #2)\n> [...]  single file causes Xcode to slow down [...] What do you think about having a glean_parser flag to have this as a option when generating code?\n\nI believe that XCode being slow is... XCode's problem ;-)\n\nBut I get the problem of the user-ergonomics. Can we retain our nested categories mechanism within a single file? Are we _required_ by Swift to be in multiple files?", "time": "2020-05-15T08:47:28Z", "creation_time": "2020-05-15T08:47:28Z", "text": "(In reply to Travis Long [:travis_] from comment #2)\n> [...]  single file causes Xcode to slow down [...] What do you think about having a glean_parser flag to have this as a option when generating code?\n\nI believe that XCode being slow is... XCode's problem ;-)\n\nBut I get the problem of the user-ergonomics. Can we retain our nested categories mechanism within a single file? Are we _required_ by Swift to be in multiple files?", "count": 3, "id": 14822147, "bug_id": 1637675, "author": "alessio.placitelli@gmail.com", "tags": [], "creator": "alessio.placitelli@gmail.com", "attachment_id": null}, {"creator": "jrediger@mozilla.com", "bug_id": 1637675, "id": 14822425, "count": 4, "raw_text": "I can answer on Travis' behalf.\n\nWe could easily merge into a single file. Files already don't give us namespaces, we use empty enums as a \"namespace\". We could just have multiple of those in a single file.\nThis requires only changes in glean_parser.", "time": "2020-05-15T11:20:45Z", "is_private": false, "attachment_id": null, "author": "jrediger@mozilla.com", "tags": [], "creation_time": "2020-05-15T11:20:45Z", "text": "I can answer on Travis' behalf.\n\nWe could easily merge into a single file. Files already don't give us namespaces, we use empty enums as a \"namespace\". We could just have multiple of those in a single file.\nThis requires only changes in glean_parser."}, {"bug_id": 1637675, "id": 14823109, "attachment_id": null, "creator": "alessio.placitelli@gmail.com", "tags": [], "author": "alessio.placitelli@gmail.com", "text": "(In reply to Jan-Erik Rediger [:janerik] from comment #4)\n> I can answer on Travis' behalf.\n> \n> We could easily merge into a single file. Files already don't give us namespaces, we use empty enums as a \"namespace\". We could just have multiple of those in a single file.\n> This requires only changes in glean_parser.\n\nMakes sense then, let's provide an option for toggling that behaviour when generating swift code.", "creation_time": "2020-05-15T15:54:48Z", "time": "2020-05-15T15:54:48Z", "raw_text": "(In reply to Jan-Erik Rediger [:janerik] from comment #4)\n> I can answer on Travis' behalf.\n> \n> We could easily merge into a single file. Files already don't give us namespaces, we use empty enums as a \"namespace\". We could just have multiple of those in a single file.\n> This requires only changes in glean_parser.\n\nMakes sense then, let's provide an option for toggling that behaviour when generating swift code.", "is_private": false, "count": 5}, {"creation_time": "2020-05-16T00:52:43Z", "text": "(In reply to Alessio Placitelli [:Dexter] from comment #1)\n> (In reply to :garvan from comment #0)\n> > For instance, autocompletion of files and symbols (cmd-shift-O in Xcode) gets cluttered when many file matches, that list only show 6/7 entries at a time.\n> \n> @Garvan, can you kindly describe a scenario here? That would allow us to better understand the problem.\n> \nIs your question about the example cmd-shift-O scenario I gave above? Used during editing files, that uses fuzzy matches on symbols and shows a file navigation list set of results, which can be 'polluted' with external files. That and similar features are used to navigate with editable files for the current target, it doesn't show files from libraries for example. Showing autogenerated non-editable files in those contexts is unlikely to be useful to an eng, and if the fuzzy matching matches many such files, the file navigation list becomes less useful.  Worst case, you have many of those files with many symbols that fuzzy match commonly used symbols in the project. We have worked to isolate libraries to improve our project navigation systems, it would be good to avoid regressing this.\nXcode ergonomics being important to users, I think this limits the scalability of this approach. At some point enough files will be an ergonomics problem by being included in the top-level target. As a workaround, one might try to have a subcomponent containing the generated swift files that then won't show all the files in the autocompletion lists, or they will construct the .yml to avoid too many files generated \u2013which may mean not using Glean to the best of its ability. Personally, I would do the latter, the former requiring too much work.\n\nLow priority issue of course, also I am hoping we won't have many Glean generated files .swift in Firefox iOS (as one or two maximum).", "time": "2020-05-16T00:52:43Z", "raw_text": "(In reply to Alessio Placitelli [:Dexter] from comment #1)\n> (In reply to :garvan from comment #0)\n> > For instance, autocompletion of files and symbols (cmd-shift-O in Xcode) gets cluttered when many file matches, that list only show 6/7 entries at a time.\n> \n> @Garvan, can you kindly describe a scenario here? That would allow us to better understand the problem.\n> \nIs your question about the example cmd-shift-O scenario I gave above? Used during editing files, that uses fuzzy matches on symbols and shows a file navigation list set of results, which can be 'polluted' with external files. That and similar features are used to navigate with editable files for the current target, it doesn't show files from libraries for example. Showing autogenerated non-editable files in those contexts is unlikely to be useful to an eng, and if the fuzzy matching matches many such files, the file navigation list becomes less useful.  Worst case, you have many of those files with many symbols that fuzzy match commonly used symbols in the project. We have worked to isolate libraries to improve our project navigation systems, it would be good to avoid regressing this.\nXcode ergonomics being important to users, I think this limits the scalability of this approach. At some point enough files will be an ergonomics problem by being included in the top-level target. As a workaround, one might try to have a subcomponent containing the generated swift files that then won't show all the files in the autocompletion lists, or they will construct the .yml to avoid too many files generated \u2013which may mean not using Glean to the best of its ability. Personally, I would do the latter, the former requiring too much work.\n\nLow priority issue of course, also I am hoping we won't have many Glean generated files .swift in Firefox iOS (as one or two maximum).", "is_private": false, "count": 6, "bug_id": 1637675, "id": 14825012, "attachment_id": null, "creator": "gkeeley@mozilla.com", "tags": [], "author": "gkeeley@mozilla.com"}, {"tags": [], "author": "alessio.placitelli@gmail.com", "attachment_id": null, "text": "(In reply to :garvan from comment #6)\n> (In reply to Alessio Placitelli [:Dexter] from comment #1)\n> > (In reply to :garvan from comment #0)\n> > > For instance, autocompletion of files and symbols (cmd-shift-O in Xcode) gets cluttered when many file matches, that list only show 6/7 entries at a time.\n> > \n> > @Garvan, can you kindly describe a scenario here? That would allow us to better understand the problem.\n> > \n> Is your question about the example cmd-shift-O scenario I gave above? Used during editing files, that uses fuzzy matches on symbols and shows a file navigation list set of results, which can be 'polluted' with external files. That and similar features are used to navigate with editable files for the current target, it doesn't show files from libraries for example. Showing autogenerated non-editable files in those contexts is unlikely to be useful to an eng, and if the fuzzy matching matches many such files, the file navigation list becomes less useful.  Worst case, you have many of those files with many symbols that fuzzy match commonly used symbols in the project. We have worked to isolate libraries to improve our project navigation systems, it would be good to avoid regressing this.\n\nThank you Garvan, that's very helpful! I'm not a XCode user, so I wanted to understand the experience you were having here a bit better. That clarifies it!", "creation_time": "2020-05-16T10:23:14Z", "id": 14825259, "bug_id": 1637675, "creator": "alessio.placitelli@gmail.com", "is_private": false, "time": "2020-05-16T10:23:14Z", "raw_text": "(In reply to :garvan from comment #6)\n> (In reply to Alessio Placitelli [:Dexter] from comment #1)\n> > (In reply to :garvan from comment #0)\n> > > For instance, autocompletion of files and symbols (cmd-shift-O in Xcode) gets cluttered when many file matches, that list only show 6/7 entries at a time.\n> > \n> > @Garvan, can you kindly describe a scenario here? That would allow us to better understand the problem.\n> > \n> Is your question about the example cmd-shift-O scenario I gave above? Used during editing files, that uses fuzzy matches on symbols and shows a file navigation list set of results, which can be 'polluted' with external files. That and similar features are used to navigate with editable files for the current target, it doesn't show files from libraries for example. Showing autogenerated non-editable files in those contexts is unlikely to be useful to an eng, and if the fuzzy matching matches many such files, the file navigation list becomes less useful.  Worst case, you have many of those files with many symbols that fuzzy match commonly used symbols in the project. We have worked to isolate libraries to improve our project navigation systems, it would be good to avoid regressing this.\n\nThank you Garvan, that's very helpful! I'm not a XCode user, so I wanted to understand the experience you were having here a bit better. That clarifies it!", "count": 7}, {"author": "mdroettboom@mozilla.com", "tags": [], "creator": "mdroettboom@mozilla.com", "attachment_id": null, "id": 14828620, "bug_id": 1637675, "count": 8, "is_private": false, "raw_text": "Does generating a single file need to be an option?  If a single file is always ok / always preferable, maybe we should just always do that?\n\nAside: Historically, I think this approach came from the Kotlin/JVM where having more, smaller files actually does have a runtime optimization advantage.  In a more statically-compiled world like Swift, I suspect that doesn't matter, so we can optimize for the developer ergonomic issues :garvan raises above.", "creation_time": "2020-05-18T14:48:06Z", "time": "2020-05-18T14:48:06Z", "text": "Does generating a single file need to be an option?  If a single file is always ok / always preferable, maybe we should just always do that?\n\nAside: Historically, I think this approach came from the Kotlin/JVM where having more, smaller files actually does have a runtime optimization advantage.  In a more statically-compiled world like Swift, I suspect that doesn't matter, so we can optimize for the developer ergonomic issues :garvan raises above."}, {"count": 9, "raw_text": "(In reply to Michael Droettboom [:mdroettboom] from comment #8)\n> Does generating a single file need to be an option?  If a single file is always ok / always preferable, maybe we should just always do that?\n\nYup, I agree with this - if it's always preferable, let's make it default!", "time": "2020-05-18T14:56:25Z", "is_private": false, "creator": "alessio.placitelli@gmail.com", "bug_id": 1637675, "id": 14828640, "text": "(In reply to Michael Droettboom [:mdroettboom] from comment #8)\n> Does generating a single file need to be an option?  If a single file is always ok / always preferable, maybe we should just always do that?\n\nYup, I agree with this - if it's always preferable, let's make it default!", "creation_time": "2020-05-18T14:56:25Z", "attachment_id": null, "author": "alessio.placitelli@gmail.com", "tags": []}, {"author": "jrediger@mozilla.com", "tags": [], "creator": "jrediger@mozilla.com", "attachment_id": 9150092, "id": 14830369, "bug_id": 1637675, "count": 10, "is_private": false, "raw_text": "", "text": "Created attachment 9150092\nGitHub Pull Request", "creation_time": "2020-05-19T11:14:15Z", "time": "2020-05-19T11:14:15Z"}, {"author": "pulgasaur@mozilla.bugs", "tags": [], "creator": "pulgasaur@mozilla.bugs", "attachment_id": 9152341, "id": 14848929, "bug_id": 1637675, "count": 11, "is_private": false, "raw_text": "", "creation_time": "2020-05-28T09:31:39Z", "time": "2020-05-28T09:31:39Z", "text": "Created attachment 9152341\nLink to GitHub pull-request: https://github.com/mozilla/glean/pull/918"}]}}}