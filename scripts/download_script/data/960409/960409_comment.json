{"bugs": {"960409": {"comments": [{"text": "Created attachment 8360887\n2001SimplePages.pdf\n\nSteps to Reproduce:\n1. Open the attached pdf (2001SimplePages.pdf) using the FF pdf viewer, which is a large number of pages text-only pdf file that only has page numbers for each page. (Note this bug can be duplicated using many pdfs found in the wild, but they are enormous in size, one is the house affordable health care act at  http://housedocs.house.gov/rules/health/111_ahcaa.pdf, and Intel makes such large pdf files for various processor manuals. Interestingly, with just page numbers and only text this is a very large pdf, although much smaller than it would be with content.)\n2. In the find box enter the number string \"2000\".\n3. Wait until the page number 2000 is found and highlighted (can take awhile). \n4. Press the next button (down caret).\n\nWhat happens:\nThe find functionality hangs at step 4 showing the swirling busy gif image continuously.\n\nWhat should happen:\nThe message that the find wrapped around to the beginning of the file should appear and the same page \"2000\" should be highlighted. The busy indicator should halt almost immediately.\n\n\nFurther Information:\nThe following console message occurred (using a version of pdf.js used in one of the FF 25 beta builds)\n************************************************************\n* Call to xpconnect wrapped JSObject produced this error:  *\n[Exception... \"'[JavaScript Error: \"too much recursion\" {file: \"resource://pdf.j\ns/web/viewer.js\" line: 871}]' when calling method: [nsIDOMEventListener::handleE\nvent]\"  nsresult: \"0x80570021 (NS_ERROR_XPC_JAVASCRIPT_ERROR_WITH_DETAILS)\"  loc\nation: \"native frame :: <unknown filename> :: <TOP_LEVEL> :: line 0\"  data: yes]\n\n************************************************************\n\nThis console error output identifies the function nextPageMatch (at line 871 in that version) which reads:\n    matchesReady(pageMatches[pageIdx]);\nThe matchesReady function is a local function of nextPageMatch, that in some circumstances calls its parent function nextPageMatch where it reads:\n        this.nextPageMatch();.\nWhile this two-step recursion can only build a stack with two frames for each page of the document, since pdf documents have an unbounded number of pages this can result in an unbounded linear (multiple of two js stack frames per page) stack size and the result is that the recursion is halted by the runtime for such a large pdf and unique find string\u2014throwing an exception. This exception causes a js promise for the find functionality to fail silently, and then the find functionality sits indefinitely in a pending state. While the bugs are distinct and the fixes do not overlap in the code, this bug can appear to be the same or similar to Bug 916876. It is not clear to me whether Bug 916876 has been fixed already by recent work identified in a pdf.js irc conversation, I will figure that out after this bug has been processed. For this bug I already have working code (distinct from my possibly unneeded fix for Bug 916876) that unravels the unbounded recursion into an iteration, and I will isolate just that fix into a pull request shortly. BTW, the iterative implementation executes considerably faster.", "raw_text": "Steps to Reproduce:\n1. Open the attached pdf (2001SimplePages.pdf) using the FF pdf viewer, which is a large number of pages text-only pdf file that only has page numbers for each page. (Note this bug can be duplicated using many pdfs found in the wild, but they are enormous in size, one is the house affordable health care act at  http://housedocs.house.gov/rules/health/111_ahcaa.pdf, and Intel makes such large pdf files for various processor manuals. Interestingly, with just page numbers and only text this is a very large pdf, although much smaller than it would be with content.)\n2. In the find box enter the number string \"2000\".\n3. Wait until the page number 2000 is found and highlighted (can take awhile). \n4. Press the next button (down caret).\n\nWhat happens:\nThe find functionality hangs at step 4 showing the swirling busy gif image continuously.\n\nWhat should happen:\nThe message that the find wrapped around to the beginning of the file should appear and the same page \"2000\" should be highlighted. The busy indicator should halt almost immediately.\n\n\nFurther Information:\nThe following console message occurred (using a version of pdf.js used in one of the FF 25 beta builds)\n************************************************************\n* Call to xpconnect wrapped JSObject produced this error:  *\n[Exception... \"'[JavaScript Error: \"too much recursion\" {file: \"resource://pdf.j\ns/web/viewer.js\" line: 871}]' when calling method: [nsIDOMEventListener::handleE\nvent]\"  nsresult: \"0x80570021 (NS_ERROR_XPC_JAVASCRIPT_ERROR_WITH_DETAILS)\"  loc\nation: \"native frame :: <unknown filename> :: <TOP_LEVEL> :: line 0\"  data: yes]\n\n************************************************************\n\nThis console error output identifies the function nextPageMatch (at line 871 in that version) which reads:\n    matchesReady(pageMatches[pageIdx]);\nThe matchesReady function is a local function of nextPageMatch, that in some circumstances calls its parent function nextPageMatch where it reads:\n        this.nextPageMatch();.\nWhile this two-step recursion can only build a stack with two frames for each page of the document, since pdf documents have an unbounded number of pages this can result in an unbounded linear (multiple of two js stack frames per page) stack size and the result is that the recursion is halted by the runtime for such a large pdf and unique find string\u2014throwing an exception. This exception causes a js promise for the find functionality to fail silently, and then the find functionality sits indefinitely in a pending state. While the bugs are distinct and the fixes do not overlap in the code, this bug can appear to be the same or similar to Bug 916876. It is not clear to me whether Bug 916876 has been fixed already by recent work identified in a pdf.js irc conversation, I will figure that out after this bug has been processed. For this bug I already have working code (distinct from my possibly unneeded fix for Bug 916876) that unravels the unbounded recursion into an iteration, and I will isolate just that fix into a pull request shortly. BTW, the iterative implementation executes considerably faster.", "creator": "karlden@hotmail.com", "is_private": false, "time": "2014-01-16T06:31:45Z", "count": 0, "author": "karlden@hotmail.com", "bug_id": 960409, "attachment_id": 8360887, "id": 8296653, "tags": [], "creation_time": "2014-01-16T06:31:45Z"}, {"attachment_id": null, "id": 8297358, "tags": [], "raw_text": "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:29.0) Gecko/20100101 Firefox/29.0\nReproduced on latest Nightly (20140112004002), set as New.", "creator": "petruta.rasa@softvision.com", "is_private": false, "count": 1, "bug_id": 960409, "creation_time": "2014-01-16T10:49:56Z", "text": "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:29.0) Gecko/20100101 Firefox/29.0\nReproduced on latest Nightly (20140112004002), set as New.", "author": "petruta.rasa@softvision.com", "time": "2014-01-16T10:49:56Z"}, {"author": "karlden@hotmail.com", "count": 2, "time": "2014-01-16T23:04:53Z", "bug_id": 960409, "is_private": false, "creator": "karlden@hotmail.com", "text": "I placed a pull-request at https://github.com/mozilla/pdf.js/pull/4131 that fixes this bug in pdf.js.", "raw_text": "I placed a pull-request at https://github.com/mozilla/pdf.js/pull/4131 that fixes this bug in pdf.js.", "creation_time": "2014-01-16T23:04:53Z", "tags": [], "id": 8300508, "attachment_id": null}, {"tags": [], "attachment_id": null, "id": 8360427, "is_private": false, "count": 3, "bug_id": 960409, "raw_text": "Fixed on trunk by bug 965861.", "creator": "ryanvm@gmail.com", "creation_time": "2014-02-01T02:12:28Z", "author": "ryanvm@gmail.com", "time": "2014-02-01T02:12:28Z", "text": "Fixed on trunk by bug 965861."}]}}, "comments": {}}