{"bugs": {"645664": {"comments": [{"time": "2011-03-28T12:27:26Z", "id": 5373970, "is_private": false, "bug_id": 645664, "creation_time": "2011-03-28T12:27:26Z", "raw_text": "User-Agent:       Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/534.16 (KHTML, like Gecko) Chrome/10.0.648.204 Safari/534.16\nBuild Identifier: 3.1.9\n\nTesting new CONDSTORE extension implementation in our mail server.  Seeing very odd and counter-productive behaviour in TB 3.1.9 wrt CONDSTORE as follows:\n\nRe-opening TB to a mailbox on a server that supports CONDSTORE if there is a new message in the INBOX, seeing the following commands.  The client had previously synced to version 36 of this mailbox (so 2 new messages)\n\nC:<= 5 select \"INBOX\" (CONDSTORE)\nS:=> * 1532 EXISTS\nS:=> * 0 RECENT\nS:=> * OK [UNSEEN 2]\nS:=> * OK [UIDNEXT 1562]\nS:=> * OK [UIDVALIDITY 1301299394]\nS:=> * FLAGS (\\Recent \\Seen \\Draft \\Answered \\Flagged \\Deleted $Forwarded $MDNSent)\nS:=> * OK [PERMANENTFLAGS (\\Recent \\Seen \\Draft \\Answered \\Flagged \\Deleted $Forwarded $MDNSent)]\nS:=> * OK [HIGHESTMODSEQ 38]\nS:=> 5 OK [READ-WRITE] SELECT command completed\nC:<= 6 UID fetch 1:* (FLAGS) (CHANGEDSINCE 0)\n\nThis final Fetch is really problematic, it's a full resynch.  To make matters worse, after it got the 1532 untagged responses (with flags), it immediately issued\n\nC:<= 7 UID fetch 1:* (FLAGS)\n\nAnd got all the flags and UIDs immediately again.  The whole reason we implemented CONDSTORE was to make resynchs faster, but this behaviour makes it about twice as slow.\n\nSo far in testing, I see this problem happening any time a message is added to or deleted from a mailbox.  When only flags change, it seems to behave a bit better.\n\nI've pored over the protocol logs and can't see anything the server may be doing wrong, but of course there's always that possibility.\n\nWe've seen other weirdness as well.  \n\nIf you open TB and it was on the trash folder when it closed, it shows the trash selected when it comes back up, but when it does a SELECT on the inbox, it doesn't send (CONDSTORE).\n\n\n\n\n\n\n\n\n\n\nReproducible: Always\n\nSteps to Reproduce:\n1. Add message to folder on server supporting CONDSTORE\n2. Open TB to IMAP folder with new message\n3. View debug logs, showing full fetches.\n\n\nExpected Results:  \nexpect with a new message for no full resynch to be required, and just do the FETCH with the CHANGEDSINCE parameter from the last synch, not go back to CHANGEDSINCE 0.\n\nDeletes are more problematic due to lack of stored EXPUNGE results (impossible to synch anyway since no UID in untagged EXPUNGE result - where's that IMAP extension?)", "tags": [], "author": "adrien@qbik.com", "count": 0, "text": "User-Agent:       Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/534.16 (KHTML, like Gecko) Chrome/10.0.648.204 Safari/534.16\nBuild Identifier: 3.1.9\n\nTesting new CONDSTORE extension implementation in our mail server.  Seeing very odd and counter-productive behaviour in TB 3.1.9 wrt CONDSTORE as follows:\n\nRe-opening TB to a mailbox on a server that supports CONDSTORE if there is a new message in the INBOX, seeing the following commands.  The client had previously synced to version 36 of this mailbox (so 2 new messages)\n\nC:<= 5 select \"INBOX\" (CONDSTORE)\nS:=> * 1532 EXISTS\nS:=> * 0 RECENT\nS:=> * OK [UNSEEN 2]\nS:=> * OK [UIDNEXT 1562]\nS:=> * OK [UIDVALIDITY 1301299394]\nS:=> * FLAGS (\\Recent \\Seen \\Draft \\Answered \\Flagged \\Deleted $Forwarded $MDNSent)\nS:=> * OK [PERMANENTFLAGS (\\Recent \\Seen \\Draft \\Answered \\Flagged \\Deleted $Forwarded $MDNSent)]\nS:=> * OK [HIGHESTMODSEQ 38]\nS:=> 5 OK [READ-WRITE] SELECT command completed\nC:<= 6 UID fetch 1:* (FLAGS) (CHANGEDSINCE 0)\n\nThis final Fetch is really problematic, it's a full resynch.  To make matters worse, after it got the 1532 untagged responses (with flags), it immediately issued\n\nC:<= 7 UID fetch 1:* (FLAGS)\n\nAnd got all the flags and UIDs immediately again.  The whole reason we implemented CONDSTORE was to make resynchs faster, but this behaviour makes it about twice as slow.\n\nSo far in testing, I see this problem happening any time a message is added to or deleted from a mailbox.  When only flags change, it seems to behave a bit better.\n\nI've pored over the protocol logs and can't see anything the server may be doing wrong, but of course there's always that possibility.\n\nWe've seen other weirdness as well.  \n\nIf you open TB and it was on the trash folder when it closed, it shows the trash selected when it comes back up, but when it does a SELECT on the inbox, it doesn't send (CONDSTORE).\n\n\n\n\n\n\n\n\n\n\nReproducible: Always\n\nSteps to Reproduce:\n1. Add message to folder on server supporting CONDSTORE\n2. Open TB to IMAP folder with new message\n3. View debug logs, showing full fetches.\n\n\nExpected Results:  \nexpect with a new message for no full resynch to be required, and just do the FETCH with the CHANGEDSINCE parameter from the last synch, not go back to CHANGEDSINCE 0.\n\nDeletes are more problematic due to lack of stored EXPUNGE results (impossible to synch anyway since no UID in untagged EXPUNGE result - where's that IMAP extension?)", "attachment_id": null, "creator": "adrien@qbik.com"}, {"attachment_id": null, "is_private": false, "creator": "ludovic@hirlimann.net", "tags": [], "raw_text": "What server are you using ?", "bug_id": 645664, "creation_time": "2011-03-28T12:30:09Z", "id": 5373973, "author": "ludovic@hirlimann.net", "time": "2011-03-28T12:30:09Z", "text": "What server are you using ?", "count": 1}, {"time": "2011-03-28T12:37:30Z", "id": 5373989, "is_private": false, "raw_text": "Hi Ludovic\n\nsorry, should have specified.\n\nIt's a dev build (internal) of WinGate 7, which we are the developers of.\n\nI can make a build available if people need to test, although since the product is not yet released, that would need to be on a request basis.\n\nRegards\n\nAdrien", "creation_time": "2011-03-28T12:37:30Z", "bug_id": 645664, "tags": [], "author": "adrien@qbik.com", "text": "Hi Ludovic\n\nsorry, should have specified.\n\nIt's a dev build (internal) of WinGate 7, which we are the developers of.\n\nI can make a build available if people need to test, although since the product is not yet released, that would need to be on a request basis.\n\nRegards\n\nAdrien", "count": 2, "attachment_id": null, "creator": "adrien@qbik.com"}, {"author": "adrien@qbik.com", "count": 3, "text": "just a bit more info.\n\nFrom the logs, and checking various changes, I believe we can deduce that TB is making the decision about how to call FETCH after SELECT based on the EXISTS untagged response to SELECT.  This is the only thing that changes and causes it.\n\nIf the EXISTS value changes, I see the UID FETCH 1:* (FLAGS) (CHANGEDSINCE 0)\n\notherwise I see the CHANGEDSINCE with the previous max seq.", "attachment_id": null, "creator": "adrien@qbik.com", "time": "2011-03-28T12:44:17Z", "id": 5374001, "is_private": false, "bug_id": 645664, "creation_time": "2011-03-28T12:44:17Z", "raw_text": "just a bit more info.\n\nFrom the logs, and checking various changes, I believe we can deduce that TB is making the decision about how to call FETCH after SELECT based on the EXISTS untagged response to SELECT.  This is the only thing that changes and causes it.\n\nIf the EXISTS value changes, I see the UID FETCH 1:* (FLAGS) (CHANGEDSINCE 0)\n\notherwise I see the CHANGEDSINCE with the previous max seq.", "tags": []}, {"author": "ludovic@hirlimann.net", "text": "David might want an account to debug - if debug is needed.", "count": 4, "attachment_id": null, "creator": "ludovic@hirlimann.net", "time": "2011-03-28T12:45:17Z", "id": 5374003, "is_private": false, "raw_text": "David might want an account to debug - if debug is needed.", "creation_time": "2011-03-28T12:45:17Z", "bug_id": 645664, "tags": []}, {"text": "no problem.  He can email me for details?\n\nRegards\n\nAdrien", "count": 5, "id": 5374012, "time": "2011-03-28T12:54:03Z", "author": "adrien@qbik.com", "tags": [], "creator": "adrien@qbik.com", "bug_id": 645664, "creation_time": "2011-03-28T12:54:03Z", "raw_text": "no problem.  He can email me for details?\n\nRegards\n\nAdrien", "is_private": false, "attachment_id": null}, {"count": 6, "text": "he will when/if he looks into it.", "id": 5374028, "author": "ludovic@hirlimann.net", "time": "2011-03-28T13:07:06Z", "creator": "ludovic@hirlimann.net", "tags": [], "raw_text": "he will when/if he looks into it.", "creation_time": "2011-03-28T13:07:06Z", "bug_id": 645664, "attachment_id": null, "is_private": false}, {"author": "mozilla@davidbienvenu.org", "text": "Until we support the follow-on to CONDSTORE, QRESYNC, that closes the EXPUNGE hole, this is how this is going to work - see https://bugzilla.mozilla.org/show_bug.cgi?id=436151#c6", "count": 7, "attachment_id": null, "creator": "mozilla@davidbienvenu.org", "id": 5374128, "time": "2011-03-28T13:47:49Z", "is_private": false, "tags": [], "bug_id": 645664, "creation_time": "2011-03-28T13:47:49Z", "raw_text": "Until we support the follow-on to CONDSTORE, QRESYNC, that closes the EXPUNGE hole, this is how this is going to work - see https://bugzilla.mozilla.org/show_bug.cgi?id=436151#c6"}, {"count": 8, "text": "OK.  I read a couple more RFCs on this.\n\nI can see there's a big issue with EXPUNGE (always has been).  Makes you wonder what the point of CONDSTORE even is without addressing this.  Anyway... I guess it has some usefulness for resynching flags on mailboxes that don't really change (which is probably most except INBOX, Trash and Sent).\n\nI also browsed the code on MXR.  There's only one place where CHANGEDSINCE is set (nsImapProtocol.cpp[4037]).  For us to receive a (CHANGEDSINCE 0) that means mFolderLastModSeq is being reset.  I can only see 2 places in code where this is set to 0, and that's in the constructor of the nsImapProtocol object, or an initialiser from a URL.  The code that does a full resynch doesn't even set CHANGEDSINCE.\n\nSo there could be some issue there. In any case it shouldn't need to do 2 fetch 1:* to resynch, one should be enough.\n\nI'm also not 100% convinced the heuristic about whether a full resynch is required will catch all cases, or maybe covers more cases that required.\n\nUsing things like the number of messages in the mailbox suffers from problems like APPEND STORE \\Deleted EXPUNGE, where the number of messages doesn't change, but the mailbox does.  In such cases you'd expect to see UIDNEXT and HIGHESTMODSEQ change.  I see you're looking at these as well, but also looking in your store of flags to count how many are flagged for delete.\n\nReason I'm going here, is I also see issues when a message is marked for delete but not expunged (by another client when test client is off-line).  When the test client logs in, does a FETCH ... (CHANGEDSINCE xx), it gets the flags for the changed message with \\Deleted on it, but then does a full resync as well and sometimes its own EXPUNGE (might be local client config issue there).\n\nCheers\n\nAdrien", "author": "adrien@qbik.com", "time": "2011-03-28T21:56:04Z", "id": 5375812, "raw_text": "OK.  I read a couple more RFCs on this.\n\nI can see there's a big issue with EXPUNGE (always has been).  Makes you wonder what the point of CONDSTORE even is without addressing this.  Anyway... I guess it has some usefulness for resynching flags on mailboxes that don't really change (which is probably most except INBOX, Trash and Sent).\n\nI also browsed the code on MXR.  There's only one place where CHANGEDSINCE is set (nsImapProtocol.cpp[4037]).  For us to receive a (CHANGEDSINCE 0) that means mFolderLastModSeq is being reset.  I can only see 2 places in code where this is set to 0, and that's in the constructor of the nsImapProtocol object, or an initialiser from a URL.  The code that does a full resynch doesn't even set CHANGEDSINCE.\n\nSo there could be some issue there. In any case it shouldn't need to do 2 fetch 1:* to resynch, one should be enough.\n\nI'm also not 100% convinced the heuristic about whether a full resynch is required will catch all cases, or maybe covers more cases that required.\n\nUsing things like the number of messages in the mailbox suffers from problems like APPEND STORE \\Deleted EXPUNGE, where the number of messages doesn't change, but the mailbox does.  In such cases you'd expect to see UIDNEXT and HIGHESTMODSEQ change.  I see you're looking at these as well, but also looking in your store of flags to count how many are flagged for delete.\n\nReason I'm going here, is I also see issues when a message is marked for delete but not expunged (by another client when test client is off-line).  When the test client logs in, does a FETCH ... (CHANGEDSINCE xx), it gets the flags for the changed message with \\Deleted on it, but then does a full resync as well and sometimes its own EXPUNGE (might be local client config issue there).\n\nCheers\n\nAdrien", "creation_time": "2011-03-28T21:56:04Z", "bug_id": 645664, "creator": "adrien@qbik.com", "tags": [], "is_private": false, "attachment_id": null}, {"creation_time": "2011-03-28T22:02:58Z", "bug_id": 645664, "raw_text": "p.s.\n\nanother option to find the \"holes\" created by expunge would be a binary search.\n\nIn order to work as an IMAP client with EXPUNGE reporting only the index not UID, a client must maintain a map of index <-> UID.\n\nThe store map can be tested for consistency against the IMAP server.  E.g. \n\ntag FETCH X (UID)\nwill return \n* X (UID Y)\n\nif X and Y still match your cache, you know that up to X in the index, nothing has been expunged.  A binary search then can find the largest value of X where this is true, then do a partial resynch from that point only.  On a large mailbox with changes only really happening at the end (e.g. INBOX) this could save a heap of traffic.\n\nI think there are issues with QRESYNC as well, since it requires clients with large mailboxes to send large protocol messages (including every known UID).  UIDs in a mailbox become sparse with time, so it gets difficult to send a large set of UIDs efficiently.  This is compounded with the fact that normally upload bandwidth for a client (where bandwidth is an issue) is a fraction of available download bandwidth.", "tags": [], "creator": "adrien@qbik.com", "is_private": false, "attachment_id": null, "text": "p.s.\n\nanother option to find the \"holes\" created by expunge would be a binary search.\n\nIn order to work as an IMAP client with EXPUNGE reporting only the index not UID, a client must maintain a map of index <-> UID.\n\nThe store map can be tested for consistency against the IMAP server.  E.g. \n\ntag FETCH X (UID)\nwill return \n* X (UID Y)\n\nif X and Y still match your cache, you know that up to X in the index, nothing has been expunged.  A binary search then can find the largest value of X where this is true, then do a partial resynch from that point only.  On a large mailbox with changes only really happening at the end (e.g. INBOX) this could save a heap of traffic.\n\nI think there are issues with QRESYNC as well, since it requires clients with large mailboxes to send large protocol messages (including every known UID).  UIDs in a mailbox become sparse with time, so it gets difficult to send a large set of UIDs efficiently.  This is compounded with the fact that normally upload bandwidth for a client (where bandwidth is an issue) is a fraction of available download bandwidth.", "count": 9, "time": "2011-03-28T22:02:58Z", "author": "adrien@qbik.com", "id": 5375826}, {"tags": [], "raw_text": "I remeber when condstore patched, it was working and not doing UID FETCH 1:* (FLAGS). Some time later it was stoped working for me, probably at time I move to mark-as-delete model. As for now it doesn't seems realy mater if you are using MAD model or not, just keep doing UID FETCH all messages.", "creation_time": "2012-08-26T22:08:40Z", "bug_id": 645664, "is_private": false, "id": 6584812, "time": "2012-08-26T22:08:40Z", "creator": "shopik@inblock.ru", "attachment_id": null, "count": 10, "text": "I remeber when condstore patched, it was working and not doing UID FETCH 1:* (FLAGS). Some time later it was stoped working for me, probably at time I move to mark-as-delete model. As for now it doesn't seems realy mater if you are using MAD model or not, just keep doing UID FETCH all messages.", "author": "shopik@inblock.ru"}, {"tags": [], "raw_text": "This is mitigated by bug 912216", "bug_id": 645664, "creation_time": "2015-07-24T11:12:50Z", "is_private": false, "id": 10533841, "time": "2015-07-24T11:12:50Z", "creator": "vseerror@lehigh.edu", "attachment_id": null, "count": 11, "text": "This is mitigated by bug 912216", "author": "vseerror@lehigh.edu"}, {"count": 12, "text": "Removing myslef on all the bugs I'm cced on. Please NI me if you need something on MailNews Core bugs from me.", "author": "ludovic@hirlimann.net", "creator": "ludovic@hirlimann.net", "attachment_id": null, "id": 10776251, "time": "2015-09-25T12:48:26Z", "tags": [], "raw_text": "Removing myslef on all the bugs I'm cced on. Please NI me if you need something on MailNews Core bugs from me.", "bug_id": 645664, "creation_time": "2015-09-25T12:48:26Z", "is_private": false}]}}, "comments": {}}