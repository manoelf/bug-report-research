{"bugs": {"694114": {"comments": [{"id": 5778429, "tags": [], "is_private": false, "count": 0, "bug_id": 694114, "creation_time": "2011-10-12T20:21:31Z", "raw_text": "This is a follow-up from bug 638328 comment 19. We need to be able to statically assert from C++ that a class is marked \"builtinclass\". Probably the easiest would be\n\ntemplate<typename T> struct is_builtinclass {\n  enum { value = 0 };\n};\n\nand then the IDL generator would generate for each class that is builtinclass, a specialization like:\n\ntemplate<> struct is_builtinclass<MyClass> {\n  enum { value = 1 };\n};", "author": "jacob.benoit.1@gmail.com", "attachment_id": null, "time": "2011-10-12T20:21:31Z", "creator": "jacob.benoit.1@gmail.com", "text": "This is a follow-up from bug 638328 comment 19. We need to be able to statically assert from C++ that a class is marked \"builtinclass\". Probably the easiest would be\n\ntemplate<typename T> struct is_builtinclass {\n  enum { value = 0 };\n};\n\nand then the IDL generator would generate for each class that is builtinclass, a specialization like:\n\ntemplate<> struct is_builtinclass<MyClass> {\n  enum { value = 1 };\n};"}, {"time": "2011-10-12T20:22:47Z", "attachment_id": null, "text": "And once this is possible, we want to use that in bug 638328, in GetConcreteObject in WebGLContext.h", "creation_time": "2011-10-12T20:22:47Z", "raw_text": "And once this is possible, we want to use that in bug 638328, in GetConcreteObject in WebGLContext.h", "bug_id": 694114, "id": 5778433, "tags": [], "count": 1, "is_private": false, "author": "jacob.benoit.1@gmail.com", "creator": "jacob.benoit.1@gmail.com"}, {"creator": "khuey@kylehuey.com", "author": "khuey@kylehuey.com", "raw_text": "I don't entirely understand this.  That an interface is builtinclass doesn't imply that there is only one implementation of it and that it's safe to static_cast to a concrete class.", "creation_time": "2011-10-12T20:34:53Z", "text": "I don't entirely understand this.  That an interface is builtinclass doesn't imply that there is only one implementation of it and that it's safe to static_cast to a concrete class.", "attachment_id": null, "time": "2011-10-12T20:34:53Z", "tags": [], "count": 2, "is_private": false, "id": 5778469, "bug_id": 694114}, {"time": "2011-10-12T20:39:52Z", "attachment_id": null, "text": "Sure, people writing non-Gecko C++ can make it fail. I think we don't care about that if it means we can make things a lot faster.", "raw_text": "Sure, people writing non-Gecko C++ can make it fail. I think we don't care about that if it means we can make things a lot faster.", "creation_time": "2011-10-12T20:39:52Z", "bug_id": 694114, "id": 5778483, "is_private": false, "count": 3, "tags": [], "author": "peterv@propagandism.org", "creator": "peterv@propagandism.org"}, {"author": "khuey@kylehuey.com", "creator": "khuey@kylehuey.com", "creation_time": "2011-10-12T20:42:30Z", "raw_text": "(In reply to Peter Van der Beken [:peterv] from comment #3)\n> Sure, people writing non-Gecko C++ can make it fail. I think we don't care\n> about that if it means we can make things a lot faster.\n\nI agree, I just don't know that it's worth adding asserts for this if it's not actually guaranteeing much.", "time": "2011-10-12T20:42:30Z", "attachment_id": null, "text": "(In reply to Peter Van der Beken [:peterv] from comment #3)\n> Sure, people writing non-Gecko C++ can make it fail. I think we don't care\n> about that if it means we can make things a lot faster.\n\nI agree, I just don't know that it's worth adding asserts for this if it's not actually guaranteeing much.", "id": 5778496, "tags": [], "is_private": false, "count": 4, "bug_id": 694114}, {"id": 5778520, "count": 5, "is_private": false, "tags": [], "bug_id": 694114, "creation_time": "2011-10-12T20:48:10Z", "raw_text": "My worry is forgetting to add a builtinclass somewhere and then letting JS pass random objects that we'll try to cast because we assume only C++ can implement the interface.", "attachment_id": null, "time": "2011-10-12T20:48:10Z", "text": "My worry is forgetting to add a builtinclass somewhere and then letting JS pass random objects that we'll try to cast because we assume only C++ can implement the interface.", "author": "peterv@propagandism.org", "creator": "peterv@propagandism.org"}, {"author": "jacob.benoit.1@gmail.com", "creator": "jacob.benoit.1@gmail.com", "attachment_id": null, "time": "2011-10-12T20:48:45Z", "text": "I agree with comment 5, that is my worry too.", "raw_text": "I agree with comment 5, that is my worry too.", "creation_time": "2011-10-12T20:48:45Z", "bug_id": 694114, "id": 5778523, "is_private": false, "count": 6, "tags": []}, {"creation_time": "2018-05-24T10:44:21Z", "raw_text": "Per policy at https://wiki.mozilla.org/Bug_Triage/Projects/Bug_Handling/Bug_Husbandry#Inactive_Bugs. If this bug is not an enhancement request or a bug not present in a supported release of Firefox, then it may be reopened.", "time": "2018-05-24T10:44:21Z", "attachment_id": null, "text": "Per policy at https://wiki.mozilla.org/Bug_Triage/Projects/Bug_Handling/Bug_Husbandry#Inactive_Bugs. If this bug is not an enhancement request or a bug not present in a supported release of Firefox, then it may be reopened.", "id": 13337636, "count": 7, "is_private": false, "tags": [], "bug_id": 694114, "author": "automation@bmo.tld", "creator": "automation@bmo.tld"}]}}, "comments": {}}