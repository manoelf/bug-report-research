{"comments": {}, "bugs": {"636132": {"comments": [{"is_private": false, "tags": [], "raw_text": "Bug 635008 created two new hash tables in nsHTMLFormElement. We could reduce the overhead by having only one.", "creation_time": "2011-02-23T13:00:25Z", "bug_id": 636132, "id": 5298258, "time": "2011-02-23T13:00:25Z", "attachment_id": 514464, "creator": "mounir@lamouri.fr", "author": "mounir@lamouri.fr", "text": "Created attachment 514464\nPatch v1\n\nBug 635008 created two new hash tables in nsHTMLFormElement. We could reduce the overhead by having only one.", "count": 0}, {"attachment_id": 514465, "is_private": false, "tags": [], "creator": "mounir@lamouri.fr", "creation_time": "2011-02-23T13:02:42Z", "bug_id": 636132, "raw_text": "", "id": 5298261, "time": "2011-02-23T13:02:42Z", "author": "mounir@lamouri.fr", "text": "Created attachment 514465\nPatch v1", "count": 1}, {"creation_time": "2011-03-17T14:42:16Z", "bug_id": 636132, "raw_text": "1)  I'd prefer the struct to be called nsRadioGroupState.\n2)  If you use an nsDataHashtable, you don't have to heap-allocate all the state\n    structs.  Is there a reason not to do that?\n3)  If you then use an nsTHashtable directly, you can simplify the code in the\n    put() cases by using PutEntry (which will return existing entries if there\n    are any).", "tags": [], "is_private": false, "time": "2011-03-17T14:42:16Z", "id": 5350678, "creator": "bzbarsky@mit.edu", "attachment_id": null, "text": "1)  I'd prefer the struct to be called nsRadioGroupState.\n2)  If you use an nsDataHashtable, you don't have to heap-allocate all the state\n    structs.  Is there a reason not to do that?\n3)  If you then use an nsTHashtable directly, you can simplify the code in the\n    put() cases by using PutEntry (which will return existing entries if there\n    are any).", "count": 2, "author": "bzbarsky@mit.edu"}, {"is_private": false, "tags": [], "bug_id": 636132, "creation_time": "2011-03-31T15:58:28Z", "raw_text": "Before reviewing, would be great to get answers to bz' comments.\nEspecially, would be great to not explicitly call 'new', but let\nhashtable handle it.", "id": 5383367, "time": "2011-03-31T15:58:28Z", "attachment_id": null, "creator": "bugs@pettay.fi", "author": "bugs@pettay.fi", "count": 3, "text": "Before reviewing, would be great to get answers to bz' comments.\nEspecially, would be great to not explicitly call 'new', but let\nhashtable handle it."}, {"count": 4, "text": "(In reply to comment #3)\n> Before reviewing, would be great to get answers to bz' comments.\n> Especially, would be great to not explicitly call 'new', but let\n> hashtable handle it.\n\nI will as soon as I will found where I've put the patches ;)\n(I could get it from here but I very likely had other patches with it.)", "author": "mounir@lamouri.fr", "creator": "mounir@lamouri.fr", "attachment_id": null, "time": "2011-04-01T14:15:48Z", "id": 5386185, "creation_time": "2011-04-01T14:15:48Z", "bug_id": 636132, "raw_text": "(In reply to comment #3)\n> Before reviewing, would be great to get answers to bz' comments.\n> Especially, would be great to not explicitly call 'new', but let\n> hashtable handle it.\n\nI will as soon as I will found where I've put the patches ;)\n(I could get it from here but I very likely had other patches with it.)", "tags": [], "is_private": false}, {"attachment_id": 514465, "is_private": false, "tags": [], "creator": "bugs@pettay.fi", "bug_id": 636132, "creation_time": "2011-04-03T16:38:33Z", "raw_text": "Ok. Please re-ask review at that point.", "id": 5389223, "time": "2011-04-03T16:38:33Z", "author": "bugs@pettay.fi", "text": "Comment on attachment 514465\nPatch v1\n\nOk. Please re-ask review at that point.", "count": 5}]}}}