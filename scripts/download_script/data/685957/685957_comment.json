{"comments": {}, "bugs": {"685957": {"comments": [{"creator": "k0scist@gmail.com", "author": "k0scist@gmail.com", "text": "When you import a file in python, by default a .pyc file will be created in the same directory.  These require manual wiping sometimes and otherwise litter the tree.  Using e.g. python -B should fix this problem, though other solutions are also worth considering", "attachment_id": null, "time": "2011-09-09T18:36:07Z", "creation_time": "2011-09-09T18:36:07Z", "raw_text": "When you import a file in python, by default a .pyc file will be created in the same directory.  These require manual wiping sometimes and otherwise litter the tree.  Using e.g. python -B should fix this problem, though other solutions are also worth considering", "bug_id": 685957, "count": 0, "is_private": false, "tags": [], "id": 5711198}, {"bug_id": 685957, "tags": [], "count": 1, "is_private": false, "id": 5711226, "text": "It sucks that python doesn't have a way to specify where .pyc files should go instead of next to the source file, but I really don't think that we want to disable .pyc files by default, since that could significantly affect build times. If it really bugs you, can you just specify PYTHONDONTWRITEBYTECODE=x in your environment?", "time": "2011-09-09T18:43:36Z", "attachment_id": null, "raw_text": "It sucks that python doesn't have a way to specify where .pyc files should go instead of next to the source file, but I really don't think that we want to disable .pyc files by default, since that could significantly affect build times. If it really bugs you, can you just specify PYTHONDONTWRITEBYTECODE=x in your environment?", "creation_time": "2011-09-09T18:43:36Z", "creator": "benjamin@smedbergs.us", "author": "benjamin@smedbergs.us"}, {"raw_text": "It less bothers me than leads to either genuine or imagined errors and the recommendation of wiping .pyc files before rebuilding.  Maybe `make -f client.mk` or similar should do find . -iname '*.pyc' -delete instead?", "creation_time": "2011-09-09T19:08:56Z", "text": "It less bothers me than leads to either genuine or imagined errors and the recommendation of wiping .pyc files before rebuilding.  Maybe `make -f client.mk` or similar should do find . -iname '*.pyc' -delete instead?", "time": "2011-09-09T19:08:56Z", "attachment_id": null, "is_private": false, "count": 2, "tags": [], "id": 5711306, "bug_id": 685957, "creator": "k0scist@gmail.com", "author": "k0scist@gmail.com"}, {"author": "ryanvm@gmail.com", "creator": "ryanvm@gmail.com", "creation_time": "2011-09-09T21:25:29Z", "raw_text": "I've had build failures that required deleting a bad .pyc file to get going again.", "time": "2011-09-09T21:25:29Z", "attachment_id": null, "text": "I've had build failures that required deleting a bad .pyc file to get going again.", "id": 5711585, "is_private": false, "count": 3, "tags": [], "bug_id": 685957}, {"bug_id": 685957, "is_private": false, "count": 4, "tags": [], "id": 5711606, "text": "I must admit I've never experienced that form of error. Do we know what caused it? Python is normally pretty good at checking the timestamps of .pyc files and rebuilding them on any mismatch.", "attachment_id": null, "time": "2011-09-09T21:31:56Z", "raw_text": "I must admit I've never experienced that form of error. Do we know what caused it? Python is normally pretty good at checking the timestamps of .pyc files and rebuilding them on any mismatch.", "creation_time": "2011-09-09T21:31:56Z", "creator": "benjamin@smedbergs.us", "author": "benjamin@smedbergs.us"}, {"author": "ryanvm@gmail.com", "creator": "ryanvm@gmail.com", "id": 5711637, "is_private": false, "count": 5, "tags": [], "bug_id": 685957, "raw_text": "Unfortunately, it happened to me a few days ago. I asked on IRC and Ms2ger suggested deleting the .pyc file it was complaining about, and it worked. Is there a way to find old posts from a certain user on pastebin.m.o?", "creation_time": "2011-09-09T21:42:38Z", "attachment_id": null, "time": "2011-09-09T21:42:38Z", "text": "Unfortunately, it happened to me a few days ago. I asked on IRC and Ms2ger suggested deleting the .pyc file it was complaining about, and it worked. Is there a way to find old posts from a certain user on pastebin.m.o?"}, {"bug_id": 685957, "is_private": false, "count": 6, "tags": [], "id": 5711690, "text": "I was given the same advice. finding and deleteing the bad .pyc files on make takes almost no time on my system.  IMHO, its better doing this than chancing on yet another way things can break", "time": "2011-09-09T22:04:03Z", "attachment_id": null, "raw_text": "I was given the same advice. finding and deleteing the bad .pyc files on make takes almost no time on my system.  IMHO, its better doing this than chancing on yet another way things can break", "creation_time": "2011-09-09T22:04:03Z", "creator": "k0scist@gmail.com", "author": "k0scist@gmail.com"}, {"bug_id": 685957, "count": 7, "is_private": false, "tags": [], "id": 5797484, "text": "Maybe the thing to do is to make `make clobber` delete the .pyc files and maybe check-sync-dirs too", "attachment_id": null, "time": "2011-10-21T19:04:53Z", "creation_time": "2011-10-21T19:04:53Z", "raw_text": "Maybe the thing to do is to make `make clobber` delete the .pyc files and maybe check-sync-dirs too", "creator": "k0scist@gmail.com", "author": "k0scist@gmail.com"}, {"author": "ted@mielczarek.org", "creator": "ted@mielczarek.org", "creation_time": "2012-03-08T19:07:33Z", "raw_text": "The former is feasible, the latter is not. We run check-sync-dirs for every build, so we don't want to clobber the .pyc files.", "attachment_id": null, "time": "2012-03-08T19:07:33Z", "text": "The former is feasible, the latter is not. We run check-sync-dirs for every build, so we don't want to clobber the .pyc files.", "id": 6125190, "is_private": false, "count": 8, "tags": [], "bug_id": 685957}, {"text": "(In reply to Benjamin Smedberg  [:bsmedberg] from comment #4)\n> I must admit I've never experienced that form of error. Do we know what\n> caused it? Python is normally pretty good at checking the timestamps of .pyc\n> files and rebuilding them on any mismatch.\n\nIn the last case I saw, it happened because a source file changed from a plain .py file to a preprocessed .py.in file, but the old .pyc file was still in the srcdir, and so (as far as I can tell) it was used rather than the .py file which was now in the objdir.\n\nMaybe that could be avoided if objdir directories were always before srcdir directories in the python path?", "attachment_id": null, "time": "2013-01-29T21:55:37Z", "creation_time": "2013-01-29T21:55:37Z", "raw_text": "(In reply to Benjamin Smedberg  [:bsmedberg] from comment #4)\n> I must admit I've never experienced that form of error. Do we know what\n> caused it? Python is normally pretty good at checking the timestamps of .pyc\n> files and rebuilding them on any mismatch.\n\nIn the last case I saw, it happened because a source file changed from a plain .py file to a preprocessed .py.in file, but the old .pyc file was still in the srcdir, and so (as far as I can tell) it was used rather than the .py file which was now in the objdir.\n\nMaybe that could be avoided if objdir directories were always before srcdir directories in the python path?", "bug_id": 685957, "count": 9, "is_private": false, "tags": [], "id": 7050874, "creator": "mbrubeck@limpet.net", "author": "mbrubeck@limpet.net"}, {"id": 7776383, "is_private": false, "count": 10, "tags": [], "bug_id": 685957, "raw_text": "Erik Rose and I were talking Python packaging and I was lamenting over the state of pyc files and lack of control. He informed me of a clever solution employed by Debian: symlinks.\n\nEssentially you create a directory tree that mirrors the source tree. e.g.\n\ntopsrcdir\n  mozbuild\n    backend\n      make.py\n\ntopobjdir\n  mozbuild\n    backend\n\nThen you create symlinks back to the source .py files:\n\ntopobjdir\n  mozbuild\n    backend\n      make.py -> topsrcdir/mozbuild/backend/make.py\n\nYou then point sys.path at topobjdir. Python doesn't follow the symlinks and it creates the .pyc files in the same directory as the symlink:\n\ntopobjdir\n  mozbuild\n    backend\n      make.py -> topsrcdir/mozbuild/backend/make.py\n      make.pyc\n\nThis could work for us on platforms where symlinks are supported. Windows might be a little funky. A downside is we'd need to walk mapped directories to reconcile the destination file list, probably on every build. But we do have code in mozpack that should make this relatively pain free. If we can pull it off, I think I like this more than the custom importer solution because the custom importer will be extremely hacky, especially on 2.7.", "creation_time": "2013-08-22T04:13:19Z", "attachment_id": null, "time": "2013-08-22T04:13:19Z", "text": "Erik Rose and I were talking Python packaging and I was lamenting over the state of pyc files and lack of control. He informed me of a clever solution employed by Debian: symlinks.\n\nEssentially you create a directory tree that mirrors the source tree. e.g.\n\ntopsrcdir\n  mozbuild\n    backend\n      make.py\n\ntopobjdir\n  mozbuild\n    backend\n\nThen you create symlinks back to the source .py files:\n\ntopobjdir\n  mozbuild\n    backend\n      make.py -> topsrcdir/mozbuild/backend/make.py\n\nYou then point sys.path at topobjdir. Python doesn't follow the symlinks and it creates the .pyc files in the same directory as the symlink:\n\ntopobjdir\n  mozbuild\n    backend\n      make.py -> topsrcdir/mozbuild/backend/make.py\n      make.pyc\n\nThis could work for us on platforms where symlinks are supported. Windows might be a little funky. A downside is we'd need to walk mapped directories to reconcile the destination file list, probably on every build. But we do have code in mozpack that should make this relatively pain free. If we can pull it off, I think I like this more than the custom importer solution because the custom importer will be extremely hacky, especially on 2.7.", "author": "gps@mozilla.com", "creator": "gps@mozilla.com"}]}}}