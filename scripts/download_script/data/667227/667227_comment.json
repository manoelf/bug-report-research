{"comments": {}, "bugs": {"667227": {"comments": [{"bug_id": 667227, "count": 0, "text": "Created attachment 541957\ntest262 reduced website\n\nI was working on improving test262 and I have discovered a bug. Reducing the test case would take billions of hours, so I think I should rather send the website (I have removed most irrelevant parts).\n\nTest262 is the official ECMAScript test suite effort. Their website is at http://test262.ecmascript.org/\nSources are at http://hg.ecmascript.org/tests/test262/\nAttached is a reduced version of it.\nThe website main page is the default.html at the root of the directory.\n\n_High level description_\nIn order to run tests, test262 opens an iframe, injects a couple of scripts in the iframe as <script> tags (including the test itself) and then get the result back. The file doing the injection is sth.js, function \"this.run\" in BrowserRunner.\nI have decided to work on the script resources/scripts/global/sth.js. I have renamed the original sth.js file to sthDocstream.js. My version is sthDocfrag.js (Hence the two commented scripts in default.html, to switch easily).\nIn the original version, they created the iframe, opened its document with \"document.open()\" and were doing a bunch of \"document.writeln()\" to insert the scripts (hence \"Docstream\"). I wanted to take the following approach: create a document fragment and append all the scripts (as DOM nodes) to it (hence \"Docfrag\").\nThe change was not suppose to change tests results and it did not with the exception of 2 tests which \"fail to load\" on Firefox. The 2 tests are S15.7.3.2_A1 and S15.9.3.2_A1_T1 (code can be found under resources/scripts/testcases, but is base64 encoded. It can also be found at http://hg.ecmascript.org/tests/test262/file/89c60d2478f1/test/suite/sputnik_converted/15_Native/15.7_Number_Objects/15.7.3_Properties_of_Number_Constructor/15.7.3.2_Number.MAX_VALUE/S15.7.3.2_A1.js\nand\nhttp://hg.ecmascript.org/tests/test262/file/89c60d2478f1/test/suite/sputnik_converted/15_Native/15.9_Date_Objects/15.9.3_The_Date_Constructor/S15.9.3.2_A1_T1.js )\n\n_More details on the 2 tests failing to load_\nIn rare cases, some tests require to include additional \"include\" scripts. This inclusion is done in sth.js starting at the line saying \"if(includes !== null)\" (l.106 in sthDocfrag.js). Scripts are retrieved with a synchronous (!) XMLHttpRequest then added to a cache (the \"scriptCache\" variable). If the script is already in this cache, the cached version is retrieved.\nHere is the thing: the two tests failing at loading happen to be the very files which first trigger the \"include\" code and doing the synchronous request. All tests using the cached version of the include load perfectly well.\n\n_Where does the bug occur?_\nThe exact same \"include\" code works well in the sthDocstream.js version.\nThere is no loading failure on Chrome 12 nor on Opera 11.11 in both sthDocfrag and sthDocstream versions, confirming this is a Firefox specific bug.\nFF5, FF6.0a2 (2011-06-25), FF7.0a1 (2011-06-25) (on Ubuntu) are affected.\nI was originally running the site with a \"file://\" url. When I switched to using an \"http://localhost\" URL with an Apache server, it didn't change anything to the bug.\n\nI do not really know how to further simplify the use case. My guess is that the bug may be related to iframes/script nodes/textcontent/synchronous xhr but I don't know how.\n\nThis change in my code happens to be 40% faster (https://bugs.ecmascript.org/show_bug.cgi?id=113). It's unfortunate there is this Firefox-specific bug. I'd be happy to help if I'm a little bit guided on how to reduce the test case.", "tags": [], "time": "2011-06-25T20:08:49Z", "creation_time": "2011-06-25T20:08:49Z", "author": "bruant.d@gmail.com", "is_private": false, "creator": "bruant.d@gmail.com", "id": 5556288, "raw_text": "I was working on improving test262 and I have discovered a bug. Reducing the test case would take billions of hours, so I think I should rather send the website (I have removed most irrelevant parts).\n\nTest262 is the official ECMAScript test suite effort. Their website is at http://test262.ecmascript.org/\nSources are at http://hg.ecmascript.org/tests/test262/\nAttached is a reduced version of it.\nThe website main page is the default.html at the root of the directory.\n\n_High level description_\nIn order to run tests, test262 opens an iframe, injects a couple of scripts in the iframe as <script> tags (including the test itself) and then get the result back. The file doing the injection is sth.js, function \"this.run\" in BrowserRunner.\nI have decided to work on the script resources/scripts/global/sth.js. I have renamed the original sth.js file to sthDocstream.js. My version is sthDocfrag.js (Hence the two commented scripts in default.html, to switch easily).\nIn the original version, they created the iframe, opened its document with \"document.open()\" and were doing a bunch of \"document.writeln()\" to insert the scripts (hence \"Docstream\"). I wanted to take the following approach: create a document fragment and append all the scripts (as DOM nodes) to it (hence \"Docfrag\").\nThe change was not suppose to change tests results and it did not with the exception of 2 tests which \"fail to load\" on Firefox. The 2 tests are S15.7.3.2_A1 and S15.9.3.2_A1_T1 (code can be found under resources/scripts/testcases, but is base64 encoded. It can also be found at http://hg.ecmascript.org/tests/test262/file/89c60d2478f1/test/suite/sputnik_converted/15_Native/15.7_Number_Objects/15.7.3_Properties_of_Number_Constructor/15.7.3.2_Number.MAX_VALUE/S15.7.3.2_A1.js\nand\nhttp://hg.ecmascript.org/tests/test262/file/89c60d2478f1/test/suite/sputnik_converted/15_Native/15.9_Date_Objects/15.9.3_The_Date_Constructor/S15.9.3.2_A1_T1.js )\n\n_More details on the 2 tests failing to load_\nIn rare cases, some tests require to include additional \"include\" scripts. This inclusion is done in sth.js starting at the line saying \"if(includes !== null)\" (l.106 in sthDocfrag.js). Scripts are retrieved with a synchronous (!) XMLHttpRequest then added to a cache (the \"scriptCache\" variable). If the script is already in this cache, the cached version is retrieved.\nHere is the thing: the two tests failing at loading happen to be the very files which first trigger the \"include\" code and doing the synchronous request. All tests using the cached version of the include load perfectly well.\n\n_Where does the bug occur?_\nThe exact same \"include\" code works well in the sthDocstream.js version.\nThere is no loading failure on Chrome 12 nor on Opera 11.11 in both sthDocfrag and sthDocstream versions, confirming this is a Firefox specific bug.\nFF5, FF6.0a2 (2011-06-25), FF7.0a1 (2011-06-25) (on Ubuntu) are affected.\nI was originally running the site with a \"file://\" url. When I switched to using an \"http://localhost\" URL with an Apache server, it didn't change anything to the bug.\n\nI do not really know how to further simplify the use case. My guess is that the bug may be related to iframes/script nodes/textcontent/synchronous xhr but I don't know how.\n\nThis change in my code happens to be 40% faster (https://bugs.ecmascript.org/show_bug.cgi?id=113). It's unfortunate there is this Firefox-specific bug. I'd be happy to help if I'm a little bit guided on how to reduce the test case.", "attachment_id": 541957}, {"attachment_id": null, "raw_text": "> create a document fragment and append all the scripts (as DOM nodes) to it\n\nNote that this doesn't guarantee that the scripts will execute in DOM order (unlike the document.write situation, which _does_ make such a guarantee).  When things fail, are scripts executing out of order?\n\n> Scripts are retrieved with a synchronous (!) XMLHttpRequest\n\nNote that sync XHR can spin the event loop and reenter other scripts.  When things fail, is that happening?  That is, does one script run while another is doing the script XHR?\n\n> There is no loading failure on Chrome 12 nor on Opera 11.11 in both\n> sthDocfrag and sthDocstream versions, confirming this is a Firefox specific\n> bug.\n\nOr at least a Firefox-specific behavior in your configuration and with your timing parameteres...", "id": 5557860, "creator": "bzbarsky@mit.edu", "is_private": false, "author": "bzbarsky@mit.edu", "creation_time": "2011-06-27T03:05:10Z", "tags": [], "time": "2011-06-27T03:05:10Z", "text": "> create a document fragment and append all the scripts (as DOM nodes) to it\n\nNote that this doesn't guarantee that the scripts will execute in DOM order (unlike the document.write situation, which _does_ make such a guarantee).  When things fail, are scripts executing out of order?\n\n> Scripts are retrieved with a synchronous (!) XMLHttpRequest\n\nNote that sync XHR can spin the event loop and reenter other scripts.  When things fail, is that happening?  That is, does one script run while another is doing the script XHR?\n\n> There is no loading failure on Chrome 12 nor on Opera 11.11 in both\n> sthDocfrag and sthDocstream versions, confirming this is a Firefox specific\n> bug.\n\nOr at least a Firefox-specific behavior in your configuration and with your timing parameteres...", "count": 1, "bug_id": 667227}, {"count": 2, "creator": "bruant.d@gmail.com", "is_private": false, "tags": [], "time": "2011-06-28T12:39:00Z", "bug_id": 667227, "text": "(In reply to comment #1)\n> > create a document fragment and append all the scripts (as DOM nodes) to it\n> \n> Note that this doesn't guarantee that the scripts will execute in DOM order\n> (unlike the document.write situation, which _does_ make such a guarantee). \nI assume that we're refering to the lack of specification of how children of a documentFragment are appended in DOM core 3. This underspecification seems to be fixed in current DOM Core drafts http://www.w3.org/TR/domcore/#dom-node-appendchild and http://dvcs.w3.org/hg/domcore/raw-file/tip/Overview.html#dom-node-appendchild asking for insertion \"in tree order\".\nDoes Firefox already implement that or should I file a bug?\n\n\n> > Scripts are retrieved with a synchronous (!) XMLHttpRequest\n> Note that sync XHR can spin the event loop and reenter other scripts.  When\n> things fail, is that happening?  That is, does one script run while another\n> is doing the script XHR?\nI thought of that and I have added log messages. They appear in the correct order, so assuming the console respects execution order, it's not a race condition of this kind.\n\n\n> When things fail, are scripts executing out of order?\nApparently, they're not executed at all. None of them.\nApparently, appending the document fragment to the iframe doesn't work (at least, script do not execute which doesn't update test results which is interpreted as a test load failure by the test harness)\nI've also tried to not use a document fragment but rather bundle all scripts within the same <script> element and append this to the iframe. The exact same thing happens, scripts are not executed for the two very same test cases.\nCould it be some bad interaction between (src-less) iframes, script (or just nodes?) appending and (synchronous) xhr?\n\nI'm going to poke around these features on their own and try to come up with a fresh small test case (or describe all failed attempt to understand where the bug come from).\n\nThanks for your comments!", "author": "bruant.d@gmail.com", "creation_time": "2011-06-28T12:39:00Z", "raw_text": "(In reply to comment #1)\n> > create a document fragment and append all the scripts (as DOM nodes) to it\n> \n> Note that this doesn't guarantee that the scripts will execute in DOM order\n> (unlike the document.write situation, which _does_ make such a guarantee). \nI assume that we're refering to the lack of specification of how children of a documentFragment are appended in DOM core 3. This underspecification seems to be fixed in current DOM Core drafts http://www.w3.org/TR/domcore/#dom-node-appendchild and http://dvcs.w3.org/hg/domcore/raw-file/tip/Overview.html#dom-node-appendchild asking for insertion \"in tree order\".\nDoes Firefox already implement that or should I file a bug?\n\n\n> > Scripts are retrieved with a synchronous (!) XMLHttpRequest\n> Note that sync XHR can spin the event loop and reenter other scripts.  When\n> things fail, is that happening?  That is, does one script run while another\n> is doing the script XHR?\nI thought of that and I have added log messages. They appear in the correct order, so assuming the console respects execution order, it's not a race condition of this kind.\n\n\n> When things fail, are scripts executing out of order?\nApparently, they're not executed at all. None of them.\nApparently, appending the document fragment to the iframe doesn't work (at least, script do not execute which doesn't update test results which is interpreted as a test load failure by the test harness)\nI've also tried to not use a document fragment but rather bundle all scripts within the same <script> element and append this to the iframe. The exact same thing happens, scripts are not executed for the two very same test cases.\nCould it be some bad interaction between (src-less) iframes, script (or just nodes?) appending and (synchronous) xhr?\n\nI'm going to poke around these features on their own and try to come up with a fresh small test case (or describe all failed attempt to understand where the bug come from).\n\nThanks for your comments!", "attachment_id": null, "id": 5561379}, {"id": 5561551, "raw_text": "> I assume that we're refering to the lack of specification of how children of a\n> documentFragment are appended in DOM core 3.\n\nNo, that's well-specified.  But non-inline scripts inserted via the DOM are loaded async and execute once loaded; execution order for DOM-inserted scripts (unlike parser-inserted ones) is NOT forced to follow DOM order in HTML5.  So execution order depends on the order in which racing network requests complete and can be arbitrary.\n\n> They appear in the correct order\n\nThat wasn't quite the question I asked.  I asked whether they were reentering.\n\n> Apparently, they're not executed at all. None of them.\n\nThis is based on your log statements, right?\n\n> I've also tried to not use a document fragment but rather bundle all scripts\n> within the same <script> element and append this to the iframe. The exact\n> same thing happens, scripts are not executed for the two very same test\n> cases.\n\nThat's really weird.\n\n> I'm going to poke around these features on their own and try to come up with\n> a fresh small test case\n\nThat would be much appreciated!  If you can't manage that, you may have to talk me through reproducing using your nonminimal testcase while running as few tests as possible.", "attachment_id": null, "time": "2011-06-28T14:14:19Z", "tags": [], "bug_id": 667227, "text": "> I assume that we're refering to the lack of specification of how children of a\n> documentFragment are appended in DOM core 3.\n\nNo, that's well-specified.  But non-inline scripts inserted via the DOM are loaded async and execute once loaded; execution order for DOM-inserted scripts (unlike parser-inserted ones) is NOT forced to follow DOM order in HTML5.  So execution order depends on the order in which racing network requests complete and can be arbitrary.\n\n> They appear in the correct order\n\nThat wasn't quite the question I asked.  I asked whether they were reentering.\n\n> Apparently, they're not executed at all. None of them.\n\nThis is based on your log statements, right?\n\n> I've also tried to not use a document fragment but rather bundle all scripts\n> within the same <script> element and append this to the iframe. The exact\n> same thing happens, scripts are not executed for the two very same test\n> cases.\n\nThat's really weird.\n\n> I'm going to poke around these features on their own and try to come up with\n> a fresh small test case\n\nThat would be much appreciated!  If you can't manage that, you may have to talk me through reproducing using your nonminimal testcase while running as few tests as possible.", "author": "bzbarsky@mit.edu", "creation_time": "2011-06-28T14:14:19Z", "count": 3, "creator": "bzbarsky@mit.edu", "is_private": false}, {"creation_time": "2011-06-28T14:16:00Z", "author": "bzbarsky@mit.edu", "text": "> But non-inline scripts inserted via the DOM\n\nExcept your scripts are inline, right?  So this should not be an issue...", "time": "2011-06-28T14:16:00Z", "tags": [], "is_private": false, "creator": "bzbarsky@mit.edu", "id": 5561556, "attachment_id": null, "raw_text": "> But non-inline scripts inserted via the DOM\n\nExcept your scripts are inline, right?  So this should not be an issue...", "bug_id": 667227, "count": 4}, {"raw_text": "Smaller test case", "attachment_id": 542569, "id": 5562606, "count": 5, "creator": "bruant.d@gmail.com", "is_private": false, "tags": [], "time": "2011-06-28T20:17:39Z", "bug_id": 667227, "text": "Created attachment 542569\nreduced test case\n\nSmaller test case", "author": "bruant.d@gmail.com", "creation_time": "2011-06-28T20:17:39Z"}, {"count": 6, "bug_id": 667227, "attachment_id": null, "raw_text": "(In reply to comment #4)\n> > But non-inline scripts inserted via the DOM\n> \n> Except your scripts are inline, right?  So this should not be an issue...\n\nSo yeah, all scripts are inline, no download (that's the point of the synchrnous xhr with cache actually).\n\nI worked on building a smaller test case and I have result!!\nIn my latest attachement, if \"s\" is the value of the synchrnous xhr (l.30), the script is not executed. However, if it is an hardcoded string (l.32), it works. I have no idea where this comes from or what can cause that. Maybe some wrapper issues? :-s\nBoth cases work the same in Chrome.\n\nI haven't worked on making the thing even smaller. Maybe it's unrelated to iframes.", "id": 5562624, "creator": "bruant.d@gmail.com", "is_private": false, "author": "bruant.d@gmail.com", "creation_time": "2011-06-28T20:23:21Z", "time": "2011-06-28T20:23:21Z", "tags": [], "text": "(In reply to comment #4)\n> > But non-inline scripts inserted via the DOM\n> \n> Except your scripts are inline, right?  So this should not be an issue...\n\nSo yeah, all scripts are inline, no download (that's the point of the synchrnous xhr with cache actually).\n\nI worked on building a smaller test case and I have result!!\nIn my latest attachement, if \"s\" is the value of the synchrnous xhr (l.30), the script is not executed. However, if it is an hardcoded string (l.32), it works. I have no idea where this comes from or what can cause that. Maybe some wrapper issues? :-s\nBoth cases work the same in Chrome.\n\nI haven't worked on making the thing even smaller. Maybe it's unrelated to iframes."}, {"author": "bruant.d@gmail.com", "creation_time": "2011-06-28T20:36:25Z", "tags": [], "time": "2011-06-28T20:36:25Z", "bug_id": 667227, "text": "(In reply to comment #6)\n> Both cases work the same in Chrome.\nAnd Opera 11.11 too.\n\nOn the big test case, after the xhr, the script string is put in a cache. Using it the first time doesn't work, but all test cases requiring the same include pull it from the cache and it works for them.\n\nI'm currently out of idea on what could cause such a bug.", "creator": "bruant.d@gmail.com", "is_private": false, "count": 7, "id": 5562680, "attachment_id": null, "raw_text": "(In reply to comment #6)\n> Both cases work the same in Chrome.\nAnd Opera 11.11 too.\n\nOn the big test case, after the xhr, the script string is put in a cache. Using it the first time doesn't work, but all test cases requiring the same include pull it from the cache and it works for them.\n\nI'm currently out of idea on what could cause such a bug."}, {"is_private": false, "creator": "bzbarsky@mit.edu", "count": 8, "creation_time": "2011-06-29T03:25:12Z", "author": "bzbarsky@mit.edu", "text": "Aha, that testcase works great!  Thank you!\n\nSo the key part here, is that you're creating an iframe, then immediately grabbing the document and creating a script, then doing a sync XHR.  That spins the event loop, allowing network loads to proceed, including the about:blank network load happening in the iframe.   By the time your XHR is done, the document you grabbed up front has unloaded already.  Then you insert a script into this no-longer-loaded document, but that does nothing of course.\n\nYou can verify this by comparing the values of iframeWin.contentDocument before and after the XHR.\n\nHenri's changes to make no about:blank load happen in this situation might change the behavior, but in the meantime, just move your \"grab the document and create the script\" code after the XHR?", "time": "2011-06-29T03:25:12Z", "tags": [], "bug_id": 667227, "attachment_id": null, "raw_text": "Aha, that testcase works great!  Thank you!\n\nSo the key part here, is that you're creating an iframe, then immediately grabbing the document and creating a script, then doing a sync XHR.  That spins the event loop, allowing network loads to proceed, including the about:blank network load happening in the iframe.   By the time your XHR is done, the document you grabbed up front has unloaded already.  Then you insert a script into this no-longer-loaded document, but that does nothing of course.\n\nYou can verify this by comparing the values of iframeWin.contentDocument before and after the XHR.\n\nHenri's changes to make no about:blank load happen in this situation might change the behavior, but in the meantime, just move your \"grab the document and create the script\" code after the XHR?", "id": 5563672}, {"raw_text": "(In reply to comment #8)\n> So the key part here, is that you're creating an iframe, then immediately\n> grabbing the document and creating a script, then doing a sync XHR.  That\n> spins the event loop, allowing network loads to proceed, including the\n> about:blank network load happening in the iframe.   By the time your XHR is\n> done, the document you grabbed up front has unloaded already.  Then you\n> insert a script into this no-longer-loaded document, but that does nothing\n> of course.\nI don't understand. Why would the document unload? Shouldn't it happen only when I remove the iframe from the DOM tree?\n\n> Henri's changes to make no about:blank load happen in this situation might\n> change the behavior, but in the meantime, just move your \"grab the document\n> and create the script\" code after the XHR?\nWorks like a charm. I'll follow the work on sync-about-blank to see if it fixes this bug too.\n\nThanks a lot for your help :-)", "attachment_id": null, "id": 5571685, "count": 9, "is_private": false, "creator": "bruant.d@gmail.com", "text": "(In reply to comment #8)\n> So the key part here, is that you're creating an iframe, then immediately\n> grabbing the document and creating a script, then doing a sync XHR.  That\n> spins the event loop, allowing network loads to proceed, including the\n> about:blank network load happening in the iframe.   By the time your XHR is\n> done, the document you grabbed up front has unloaded already.  Then you\n> insert a script into this no-longer-loaded document, but that does nothing\n> of course.\nI don't understand. Why would the document unload? Shouldn't it happen only when I remove the iframe from the DOM tree?\n\n> Henri's changes to make no about:blank load happen in this situation might\n> change the behavior, but in the meantime, just move your \"grab the document\n> and create the script\" code after the XHR?\nWorks like a charm. I'll follow the work on sync-about-blank to see if it fixes this bug too.\n\nThanks a lot for your help :-)", "time": "2011-07-03T10:24:15Z", "tags": [], "bug_id": 667227, "creation_time": "2011-07-03T10:24:15Z", "author": "bruant.d@gmail.com"}, {"author": "bzbarsky@mit.edu", "creation_time": "2011-07-03T14:52:31Z", "tags": [], "time": "2011-07-03T14:52:31Z", "text": "> I don't understand. Why would the document unload?\n\nBecause a new document is being loaded.\n\nAgain, when you insert an iframe in the DOM it starts loading a new URL: about:blank.  This is an asynchronous operation.  If you try to get the document inside the iframe before the async load completes it will synchronously synthesize a fake document and return it, but the async load is still there, and when it completes it will replace the synthetic document with a document parsed from the data retrieved from about:blank.\n\nTry the same exercise with the iframe src set to http://www.example.com and log the url loaded in the iframe at various points to see how it goes.", "creator": "bzbarsky@mit.edu", "is_private": false, "id": 5571795, "attachment_id": null, "raw_text": "> I don't understand. Why would the document unload?\n\nBecause a new document is being loaded.\n\nAgain, when you insert an iframe in the DOM it starts loading a new URL: about:blank.  This is an asynchronous operation.  If you try to get the document inside the iframe before the async load completes it will synchronously synthesize a fake document and return it, but the async load is still there, and when it completes it will replace the synthetic document with a document parsed from the data retrieved from about:blank.\n\nTry the same exercise with the iframe src set to http://www.example.com and log the url loaded in the iframe at various points to see how it goes.", "bug_id": 667227, "count": 10}, {"attachment_id": null, "raw_text": "https://bugzilla.mozilla.org/show_bug.cgi?id=1472046\n\nMove all DOM bugs that haven\u2019t been updated in more than 3 years and has no one currently assigned to P5.\n\nIf you have questions, please contact :mdaly.", "id": 13436675, "creator": "bug-husbandry-bot@mozilla.bugs", "is_private": false, "count": 11, "author": "bug-husbandry-bot@mozilla.bugs", "creation_time": "2018-06-29T04:58:41Z", "time": "2018-06-29T04:58:41Z", "tags": [], "bug_id": 667227, "text": "https://bugzilla.mozilla.org/show_bug.cgi?id=1472046\n\nMove all DOM bugs that haven\u2019t been updated in more than 3 years and has no one currently assigned to P5.\n\nIf you have questions, please contact :mdaly."}]}}}