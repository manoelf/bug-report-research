{"comments": {}, "bugs": {"674503": {"comments": [{"raw_text": "1) Type an invalid date in the \"Search By Change History\" section; you get:\n\nDBD::Pg::st execute failed: ERROR:  invalid input syntax for type timestamp: \"asdaysd\"\nLINE 11:    AND bugs.delta_ts >= 'asdaysd'\n\n\nDates must be validated when entered there, and not only when entering relative dates. This looks like a bad assumption in _timestamp_translate() to me:\n\n  return if $value !~ /^[\\+\\-]?\\d+[hdwmy]$/i;\n\nSo we don't validate the date at all if it's not a relative date. This doesn't mean the date is valid. So IMO, this check should go away.\n\n\n2) If you type similar invalid dates in the Deadline fields, they are not validated either, but no error is thrown. This should also be fixed.\n\n\n3) If you type a similar invalid date in the Custom search section, then the date is correctly validated and rejected. So this part is fine.\n\nI couldn't reproduce in 4.0.", "attachment_id": null, "time": "2011-07-27T12:15:54Z", "tags": [], "text": "1) Type an invalid date in the \"Search By Change History\" section; you get:\n\nDBD::Pg::st execute failed: ERROR:  invalid input syntax for type timestamp: \"asdaysd\"\nLINE 11:    AND bugs.delta_ts >= 'asdaysd'\n\n\nDates must be validated when entered there, and not only when entering relative dates. This looks like a bad assumption in _timestamp_translate() to me:\n\n  return if $value !~ /^[\\+\\-]?\\d+[hdwmy]$/i;\n\nSo we don't validate the date at all if it's not a relative date. This doesn't mean the date is valid. So IMO, this check should go away.\n\n\n2) If you type similar invalid dates in the Deadline fields, they are not validated either, but no error is thrown. This should also be fixed.\n\n\n3) If you type a similar invalid date in the Custom search section, then the date is correctly validated and rejected. So this part is fine.\n\nI couldn't reproduce in 4.0.", "count": 0, "author": "LpSolit@gmail.com", "creator": "LpSolit@gmail.com", "is_private": false, "creation_time": "2011-07-27T12:15:54Z", "id": 5616287, "bug_id": 674503}, {"id": 5689433, "bug_id": 674503, "is_private": false, "creation_time": "2011-08-30T23:51:50Z", "creator": "LpSolit@gmail.com", "author": "LpSolit@gmail.com", "count": 1, "text": "Created attachment 557037\npatch, v1", "tags": [], "time": "2011-08-30T23:51:50Z", "attachment_id": 557037, "raw_text": ""}, {"tags": [], "time": "2011-08-31T21:34:58Z", "attachment_id": 557037, "raw_text": "Review of attachment 557037:\n-----------------------------------------------------------------\n\nAh, no, this would break regex searches (which is a bug fixed by this refactoring).", "id": 5692049, "bug_id": 674503, "creation_time": "2011-08-31T21:34:58Z", "is_private": false, "creator": "mkanat@bugzilla.org", "author": "mkanat@bugzilla.org", "count": 2, "text": "Comment on attachment 557037\npatch, v1\n\nReview of attachment 557037:\n-----------------------------------------------------------------\n\nAh, no, this would break regex searches (which is a bug fixed by this refactoring)."}, {"creation_time": "2011-09-06T22:38:25Z", "is_private": false, "creator": "LpSolit@gmail.com", "tags": [], "attachment_id": 558642, "id": 5703386, "bug_id": 674503, "author": "LpSolit@gmail.com", "text": "Created attachment 558642\npatch, v2\n\nOnly use SPECIAL_PARSING if the operator belongs to SIMPLE_OPERATORS.", "count": 3, "time": "2011-09-06T22:38:25Z", "raw_text": "Only use SPECIAL_PARSING if the operator belongs to SIMPLE_OPERATORS."}, {"tags": [], "attachment_id": 558642, "is_private": false, "creation_time": "2011-09-13T01:45:09Z", "creator": "mkanat@bugzilla.org", "time": "2011-09-13T01:45:09Z", "raw_text": "Ah, that's pretty clever! However, tiny problem: anyexact, changedto, and changedfrom also need SPECIAL_PARSING.\n\nPerhaps we need a new constant, SPECIAL_PARSING_OPERATORS, like I did for NON_NUMERIC_OPERATORS.\n\n(Also, this is starting to make me think that OPERATORS should have hashrefs for its keys that describe the various properties of those operators, but that's for another day.)", "id": 5714941, "bug_id": 674503, "count": 4, "text": "Comment on attachment 558642\npatch, v2\n\nAh, that's pretty clever! However, tiny problem: anyexact, changedto, and changedfrom also need SPECIAL_PARSING.\n\nPerhaps we need a new constant, SPECIAL_PARSING_OPERATORS, like I did for NON_NUMERIC_OPERATORS.\n\n(Also, this is starting to make me think that OPERATORS should have hashrefs for its keys that describe the various properties of those operators, but that's for another day.)", "author": "mkanat@bugzilla.org"}, {"attachment_id": 560802, "tags": [], "creator": "LpSolit@gmail.com", "is_private": false, "creation_time": "2011-09-18T18:49:33Z", "time": "2011-09-18T18:49:33Z", "raw_text": "", "author": "LpSolit@gmail.com", "count": 5, "text": "Created attachment 560802\npatch, v3", "id": 5722189, "bug_id": 674503}, {"text": "Comment on attachment 560802\npatch, v3\n\nI just realized that my patch breaks pronoun substitution. :( No idea what I did wrong.", "count": 6, "author": "LpSolit@gmail.com", "bug_id": 674503, "id": 5734046, "raw_text": "I just realized that my patch breaks pronoun substitution. :( No idea what I did wrong.", "time": "2011-09-23T17:56:24Z", "creator": "LpSolit@gmail.com", "creation_time": "2011-09-23T17:56:24Z", "is_private": false, "attachment_id": 560802, "tags": []}, {"creator": "LpSolit@gmail.com", "is_private": false, "creation_time": "2011-09-23T18:21:38Z", "attachment_id": 562116, "tags": [], "author": "LpSolit@gmail.com", "count": 7, "text": "Created attachment 562116\npatch, v3.1\n\nWow, I was comparing SPECIAL_PARSING_OPERATORS to $field instead of $operator. :)", "bug_id": 674503, "id": 5734108, "raw_text": "Wow, I was comparing SPECIAL_PARSING_OPERATORS to $field instead of $operator. :)", "time": "2011-09-23T18:21:38Z"}, {"time": "2011-09-28T23:56:19Z", "attachment_id": 562116, "raw_text": "This looks great! But it breaks xt/search.t. This command line should show you what's up:\n\n  BZ_WRITE_TESTS=1 prove -lf xt/ :: --add-custom-fields 2> details\n\nIt looks mostly like INJECTION_BROKEN_OPERATOR in xt/lib/Bugzilla/Search/Test/Constants.pm needs to be updated, but it also looks like there may be some validly-broken tests.", "tags": [], "creator": "mkanat@bugzilla.org", "author": "mkanat@bugzilla.org", "count": 8, "text": "Comment on attachment 562116\npatch, v3.1\n\nThis looks great! But it breaks xt/search.t. This command line should show you what's up:\n\n  BZ_WRITE_TESTS=1 prove -lf xt/ :: --add-custom-fields 2> details\n\nIt looks mostly like INJECTION_BROKEN_OPERATOR in xt/lib/Bugzilla/Search/Test/Constants.pm needs to be updated, but it also looks like there may be some validly-broken tests.", "id": 5744813, "bug_id": 674503, "creation_time": "2011-09-28T23:56:19Z", "is_private": false}, {"id": 5744820, "bug_id": 674503, "is_private": false, "creation_time": "2011-09-28T23:57:49Z", "creator": "mkanat@bugzilla.org", "count": 9, "text": "Yeah, it looks like anyexact is now broken with some date fields?", "author": "mkanat@bugzilla.org", "tags": [], "time": "2011-09-28T23:57:49Z", "raw_text": "Yeah, it looks like anyexact is now broken with some date fields?", "attachment_id": null}, {"tags": [], "attachment_id": null, "raw_text": "(In reply to Max Kanat-Alexander from comment #8)\n>   BZ_WRITE_TESTS=1 prove -lf xt/ :: --add-custom-fields 2> details\n\nWithout my patch, this command line throws:\n\nxt/search.t .. \n1..72963\n$VAR1 = {\n          'newvalue' => '1-assigned_to-ci3FXe2p0jOYGgn@9fWoaRqRtweo.jGp',\n          'error' => 'illegal_change',\n          'privs' => 2,\n          'oldvalue' => '1-defaultowner-t6JzY9I9XbCQt3V@pFeZfNpC7D97.DxX',\n          'field' => 'assigned_to'\n        };\n at Bugzilla/Error.pm line 104", "time": "2011-11-16T17:16:33Z", "creation_time": "2011-11-16T17:16:33Z", "is_private": false, "id": 5852814, "bug_id": 674503, "author": "LpSolit@gmail.com", "text": "(In reply to Max Kanat-Alexander from comment #8)\n>   BZ_WRITE_TESTS=1 prove -lf xt/ :: --add-custom-fields 2> details\n\nWithout my patch, this command line throws:\n\nxt/search.t .. \n1..72963\n$VAR1 = {\n          'newvalue' => '1-assigned_to-ci3FXe2p0jOYGgn@9fWoaRqRtweo.jGp',\n          'error' => 'illegal_change',\n          'privs' => 2,\n          'oldvalue' => '1-defaultowner-t6JzY9I9XbCQt3V@pFeZfNpC7D97.DxX',\n          'field' => 'assigned_to'\n        };\n at Bugzilla/Error.pm line 104", "count": 10, "creator": "LpSolit@gmail.com"}, {"text": "From what I can see, the xt code has no infrastructure to handle errors rightfully thrown by Bugzilla::Search when validating data (e.g. dates). do_tests() in FieldTest.pm has:\n\n  lives_ok { $sql = $search->sql } \"$name: generate SQL\";\n\nbut then complains because Bugzilla::Search correctly caught illegal dates. I really don't have the time and energy to go through the xt code to implement this. mkanat, could you help here?", "count": 11, "author": "LpSolit@gmail.com", "creator": "LpSolit@gmail.com", "is_private": false, "creation_time": "2011-11-18T15:24:43Z", "bug_id": 674503, "id": 5858137, "raw_text": "From what I can see, the xt code has no infrastructure to handle errors rightfully thrown by Bugzilla::Search when validating data (e.g. dates). do_tests() in FieldTest.pm has:\n\n  lives_ok { $sql = $search->sql } \"$name: generate SQL\";\n\nbut then complains because Bugzilla::Search correctly caught illegal dates. I really don't have the time and energy to go through the xt code to implement this. mkanat, could you help here?", "attachment_id": null, "time": "2011-11-18T15:24:43Z", "tags": []}, {"tags": [], "attachment_id": null, "is_private": false, "creation_time": "2011-11-29T08:24:17Z", "creator": "mkanat@bugzilla.org", "time": "2011-11-29T08:24:17Z", "raw_text": "Ah, could you tell me which tests are rightfully throwing errors? Testing of errors should happen somewhere separate from the normal code.", "id": 5878169, "bug_id": 674503, "text": "Ah, could you tell me which tests are rightfully throwing errors? Testing of errors should happen somewhere separate from the normal code.", "count": 12, "author": "mkanat@bugzilla.org"}, {"creation_time": "2011-11-29T15:29:13Z", "is_private": false, "bug_id": 674503, "id": 5878879, "count": 13, "text": "(In reply to Max Kanat-Alexander from comment #12)\n> Ah, could you tell me which tests are rightfully throwing errors?\n\nSqlifyDate() in Search.pm throws ThrowUserError(\"illegal_date\", { date => $str }).\n_contact_exact_group(), _cc_exact_group() can also throw errors, among others.", "author": "LpSolit@gmail.com", "creator": "LpSolit@gmail.com", "tags": [], "raw_text": "(In reply to Max Kanat-Alexander from comment #12)\n> Ah, could you tell me which tests are rightfully throwing errors?\n\nSqlifyDate() in Search.pm throws ThrowUserError(\"illegal_date\", { date => $str }).\n_contact_exact_group(), _cc_exact_group() can also throw errors, among others.", "attachment_id": null, "time": "2011-11-29T15:29:13Z"}, {"bug_id": 674503, "id": 5881302, "is_private": false, "creation_time": "2011-11-30T05:56:17Z", "creator": "mkanat@bugzilla.org", "author": "mkanat@bugzilla.org", "text": "Right. But could you tell me specifically which xt tests are failing? Just listing the tests that \"-f\" shows would be enough.", "count": 14, "tags": [], "time": "2011-11-30T05:56:17Z", "attachment_id": null, "raw_text": "Right. But could you tell me specifically which xt tests are failing? Just listing the tests that \"-f\" shows would be enough."}, {"tags": [], "raw_text": "Here is the output of xt/ tests. I first removed anyexact from the patch.", "attachment_id": 579362, "time": "2011-12-06T18:28:34Z", "is_private": false, "creation_time": "2011-12-06T18:28:34Z", "id": 5894964, "bug_id": 674503, "count": 15, "text": "Created attachment 579362\noutput of xt/ tests\n\nHere is the output of xt/ tests. I first removed anyexact from the patch.", "author": "LpSolit@gmail.com", "creator": "LpSolit@gmail.com"}, {"creation_time": "2011-12-08T07:01:57Z", "is_private": false, "bug_id": 674503, "id": 5899885, "text": "Oh, okay! It's just failing the injection tests. That's actually good, those should be failing. We expect those to fail! Just not quite right *there*. :-D\n\nYou should add the relevant fields to INJECTION_BROKEN_FIELD in Bugzilla::Test::Search::Constants, with \"search => 1\" as the value, and any operators that *do* work in operator_ok.\n\nSee _known_broken in InjectionTest.pm for how those constants are directly used,  then see search_known_broken and do_tests in FieldTest.pm if you want to understand why editing those constants will have the desired effect.", "count": 16, "author": "mkanat@bugzilla.org", "creator": "mkanat@bugzilla.org", "tags": [], "raw_text": "Oh, okay! It's just failing the injection tests. That's actually good, those should be failing. We expect those to fail! Just not quite right *there*. :-D\n\nYou should add the relevant fields to INJECTION_BROKEN_FIELD in Bugzilla::Test::Search::Constants, with \"search => 1\" as the value, and any operators that *do* work in operator_ok.\n\nSee _known_broken in InjectionTest.pm for how those constants are directly used,  then see search_known_broken and do_tests in FieldTest.pm if you want to understand why editing those constants will have the desired effect.", "attachment_id": null, "time": "2011-12-08T07:01:57Z"}, {"id": 5904334, "bug_id": 674503, "creation_time": "2011-12-09T15:58:46Z", "is_private": false, "creator": "LpSolit@gmail.com", "author": "LpSolit@gmail.com", "count": 17, "text": "Created attachment 580416\npatch, v3.2\n\nHere is a revised patch which removes anyexact from SPECIAL_PARSING_OPERATORS and which fixes the problem with injection tests. This leaves us with the following errors. All these tests have '2037-12-01' or '2037-02-01' as date and so are all supposed to return no bug (or all bugs with NOT()), but from what I understand here, the tests expect exactly the opposite, which doesn't make sense.\n\n\nnot ok 30667 - deadline-changedfrom-<1>: contains bug 1 (39)\nnot ok 30676 - deadline-changedfrom-<1> (Normal Params): contains bug 1 (39)\nnot ok 30685 - NOT(deadline-changedfrom-<1>): does not contain bug 1 (39)\nxt/search.t .. 31494/72963 not ok 33187 - deadline-changedto-<1>: contains bug 1 (39)\nnot ok 33196 - deadline-changedto-<1> (Normal Params): contains bug 1 (39)\nnot ok 33205 - NOT(deadline-changedto-<1>): does not contain bug 1 (39)\nxt/search.t .. 33641/72963 not ok 35707 - deadline-equals-<1>: contains bug 1 (39)\nnot ok 35716 - deadline-equals-<1> (Normal Params): contains bug 1 (39)\nnot ok 35725 - NOT(deadline-equals-<1>): does not contain bug 1 (39)\nxt/search.t .. 40539/72963 not ok 40748 - deadline-greaterthaneq-<2>: contains bug 2 (40)\nnot ok 40757 - deadline-greaterthaneq-<2> (Normal Params): contains bug 2 (40)\nnot ok 40766 - NOT(deadline-greaterthaneq-<2>): does not contain bug 2 (40)\nxt/search.t .. 42839/72963 not ok 43268 - deadline-lessthan-2: does not contain bug 2 (40)\nnot ok 43277 - deadline-lessthan-2 (Normal Params): does not contain bug 2 (40)\nnot ok 43286 - NOT(deadline-lessthan-2): contains bug 2 (40)\nxt/search.t .. 49503/72963 not ok 50827 - deadline-notequals-<1>: does not contain bug 1 (39)\nnot ok 50836 - deadline-notequals-<1> (Normal Params): does not contain bug 1 (39)\nnot ok 50845 - NOT(deadline-notequals-<1>): contains bug 1 (39)\nxt/search.t .. Dubious, test returned 18 (wstat 4608, 0x1200)\nFailed 18/72963 subtests", "tags": [], "time": "2011-12-09T15:58:46Z", "attachment_id": 580416, "raw_text": "Here is a revised patch which removes anyexact from SPECIAL_PARSING_OPERATORS and which fixes the problem with injection tests. This leaves us with the following errors. All these tests have '2037-12-01' or '2037-02-01' as date and so are all supposed to return no bug (or all bugs with NOT()), but from what I understand here, the tests expect exactly the opposite, which doesn't make sense.\n\n\nnot ok 30667 - deadline-changedfrom-<1>: contains bug 1 (39)\nnot ok 30676 - deadline-changedfrom-<1> (Normal Params): contains bug 1 (39)\nnot ok 30685 - NOT(deadline-changedfrom-<1>): does not contain bug 1 (39)\nxt/search.t .. 31494/72963 not ok 33187 - deadline-changedto-<1>: contains bug 1 (39)\nnot ok 33196 - deadline-changedto-<1> (Normal Params): contains bug 1 (39)\nnot ok 33205 - NOT(deadline-changedto-<1>): does not contain bug 1 (39)\nxt/search.t .. 33641/72963 not ok 35707 - deadline-equals-<1>: contains bug 1 (39)\nnot ok 35716 - deadline-equals-<1> (Normal Params): contains bug 1 (39)\nnot ok 35725 - NOT(deadline-equals-<1>): does not contain bug 1 (39)\nxt/search.t .. 40539/72963 not ok 40748 - deadline-greaterthaneq-<2>: contains bug 2 (40)\nnot ok 40757 - deadline-greaterthaneq-<2> (Normal Params): contains bug 2 (40)\nnot ok 40766 - NOT(deadline-greaterthaneq-<2>): does not contain bug 2 (40)\nxt/search.t .. 42839/72963 not ok 43268 - deadline-lessthan-2: does not contain bug 2 (40)\nnot ok 43277 - deadline-lessthan-2 (Normal Params): does not contain bug 2 (40)\nnot ok 43286 - NOT(deadline-lessthan-2): contains bug 2 (40)\nxt/search.t .. 49503/72963 not ok 50827 - deadline-notequals-<1>: does not contain bug 1 (39)\nnot ok 50836 - deadline-notequals-<1> (Normal Params): does not contain bug 1 (39)\nnot ok 50845 - NOT(deadline-notequals-<1>): contains bug 1 (39)\nxt/search.t .. Dubious, test returned 18 (wstat 4608, 0x1200)\nFailed 18/72963 subtests"}, {"tags": [], "attachment_id": null, "creation_time": "2012-02-24T08:51:34Z", "is_private": false, "creator": "mkanat@bugzilla.org", "time": "2012-02-24T08:51:34Z", "raw_text": "(In reply to Fr\u00e9d\u00e9ric Buclin from comment #17)\n> All these tests have '2037-12-01'\n> or '2037-02-01' as date and so are all supposed to return no bug (or all\n> bugs with NOT()), but from what I understand here, the tests expect exactly\n> the opposite, which doesn't make sense.\n\n  No, I believe some of those might actually be the dates we expect; the tests do special things with the date fields to make them consistent.", "id": 6089475, "bug_id": 674503, "author": "mkanat@bugzilla.org", "text": "(In reply to Fr\u00e9d\u00e9ric Buclin from comment #17)\n> All these tests have '2037-12-01'\n> or '2037-02-01' as date and so are all supposed to return no bug (or all\n> bugs with NOT()), but from what I understand here, the tests expect exactly\n> the opposite, which doesn't make sense.\n\n  No, I believe some of those might actually be the dates we expect; the tests do special things with the date fields to make them consistent.", "count": 18}, {"creation_time": "2012-03-25T21:58:29Z", "is_private": false, "creator": "LpSolit@gmail.com", "tags": [], "attachment_id": null, "bug_id": 674503, "id": 6169670, "text": "glob: ping?", "count": 19, "author": "LpSolit@gmail.com", "raw_text": "glob: ping?", "time": "2012-03-25T21:58:29Z"}, {"bug_id": 674503, "id": 6705398, "count": 20, "text": "Comment on attachment 580416\npatch, v3.2\n\nbitrotten. :(", "author": "LpSolit@gmail.com", "time": "2012-10-07T11:51:46Z", "raw_text": "bitrotten. :(", "creation_time": "2012-10-07T11:51:46Z", "is_private": false, "creator": "LpSolit@gmail.com", "tags": [], "attachment_id": 580416}, {"creation_time": "2012-12-15T15:15:52Z", "is_private": false, "creator": "wicked@sci.fi", "tags": [], "attachment_id": null, "id": 6917805, "bug_id": 674503, "author": "wicked@sci.fi", "text": "*** Bug 821997 has been marked as a duplicate of this bug. ***", "count": 21, "raw_text": "", "time": "2012-12-15T15:15:52Z"}, {"id": 6917950, "bug_id": 674503, "creation_time": "2012-12-15T17:13:09Z", "is_private": false, "creator": "steffen.pingel@tasktop.com", "author": "steffen.pingel@tasktop.com", "text": "Another side effect of not invoking SqlifyDate is that specified time zones are ignored in Bugzilla 4.2 which affects Mylyn (more details are on bug 821997).\n\nWhat's needed to move the fix forward?", "count": 22, "tags": [], "time": "2012-12-15T17:13:09Z", "attachment_id": null, "raw_text": "Another side effect of not invoking SqlifyDate is that specified time zones are ignored in Bugzilla 4.2 which affects Mylyn (more details are on bug 821997).\n\nWhat's needed to move the fix forward?"}]}}}