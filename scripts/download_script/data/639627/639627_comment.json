{"comments": {}, "bugs": {"639627": {"comments": [{"count": 0, "raw_text": "In Sync we do a lot of crypto operations that require byte buffers. Previously we allocated a new buffer per operation, generating 700MB of garbage over a run. Now we share a single buffer, avoiding the garbage but spending 100x as long to fill it in a Javascript loop.\n\nWe would like the best of both worlds, which requires filling in some gaps in js-ctypes.\n\nPatch to follow.\n\nTracking bug for this + Sync change is Bug 639589.", "bug_id": 639627, "is_private": false, "tags": [], "time": "2011-03-07T22:54:27Z", "creation_time": "2011-03-07T22:54:27Z", "author": "bugzilla@twinql.com", "attachment_id": null, "id": 5328539, "text": "In Sync we do a lot of crypto operations that require byte buffers. Previously we allocated a new buffer per operation, generating 700MB of garbage over a run. Now we share a single buffer, avoiding the garbage but spending 100x as long to fill it in a Javascript loop.\n\nWe would like the best of both worlds, which requires filling in some gaps in js-ctypes.\n\nPatch to follow.\n\nTracking bug for this + Sync change is Bug 639589.", "creator": "bugzilla@twinql.com"}, {"author": "dwitte@gmail.com", "creator": "dwitte@gmail.com", "time": "2011-03-08T00:26:30Z", "count": 1, "bug_id": 639627, "text": "Why can't you use array.value = \"foo\"? In other words, why does your input data have nonzero high bytes?", "attachment_id": null, "id": 5328814, "creation_time": "2011-03-08T00:26:30Z", "tags": [], "is_private": false, "raw_text": "Why can't you use array.value = \"foo\"? In other words, why does your input data have nonzero high bytes?"}, {"count": 2, "bug_id": 639627, "raw_text": "Oh, nevermind, you have binary data.\n\nI think we should just do this by implementing writeString. You don't need to implement the full charset conversion bits; just providing an ASCII converter would be enough. (Which is pretty much what your byteCompress patch does now.)\n\nThe only difference, then, would be that writeString would possibly nullterminate for you. But I can't see that mattering for your use case.", "tags": [], "is_private": false, "time": "2011-03-08T00:29:14Z", "creation_time": "2011-03-08T00:29:14Z", "author": "dwitte@gmail.com", "text": "Oh, nevermind, you have binary data.\n\nI think we should just do this by implementing writeString. You don't need to implement the full charset conversion bits; just providing an ASCII converter would be enough. (Which is pretty much what your byteCompress patch does now.)\n\nThe only difference, then, would be that writeString would possibly nullterminate for you. But I can't see that mattering for your use case.", "creator": "dwitte@gmail.com", "id": 5328832, "attachment_id": null}, {"raw_text": "(In reply to comment #2)\n\n> I think we should just do this by implementing writeString. You don't need to\n> implement the full charset conversion bits; just providing an ASCII converter\n> would be enough. (Which is pretty much what your byteCompress patch does now.)\n\nI'd be happy to take a shot at altering this patch to implement writeString, but I'd need some guidance -- e.g., how best to identify an encoding, and how to write a test for it that isn't just \"Sync works\". I have all of a few hours' experience with Mozilla's C++ layer, as you can probably tell from the code :)\n\n(I would be ecstatic to have js-ctypes support enough operations to allow us to implement all of WeaveCrypto's byteCompress/byteExpand/expandData/etc. operations in terms of method calls on buffers. However, I'm not sure I have the expertise or the time to implement and test the full suite... hence the minimal patch!)\n\n\n> The only difference, then, would be that writeString would possibly\n> nullterminate for you. But I can't see that mattering for your use case.\n\nNot having it null-terminate avoids us having to potentially re-allocate an existing buffer to be one-byte bigger, or cast the buffer to get rid of the null-termination, a la:\n\n  http://mxr.mozilla.org/mozilla-central/source/services/crypto/modules/WeaveCrypto.js#371\n\nWe're at the point of trying to eliminate all of these \"oh, just one more object\" allocations, because one object per record is actually 10,000 objects for a first sync, all of which need GC.", "tags": [], "is_private": false, "creation_time": "2011-03-08T01:05:07Z", "text": "(In reply to comment #2)\n\n> I think we should just do this by implementing writeString. You don't need to\n> implement the full charset conversion bits; just providing an ASCII converter\n> would be enough. (Which is pretty much what your byteCompress patch does now.)\n\nI'd be happy to take a shot at altering this patch to implement writeString, but I'd need some guidance -- e.g., how best to identify an encoding, and how to write a test for it that isn't just \"Sync works\". I have all of a few hours' experience with Mozilla's C++ layer, as you can probably tell from the code :)\n\n(I would be ecstatic to have js-ctypes support enough operations to allow us to implement all of WeaveCrypto's byteCompress/byteExpand/expandData/etc. operations in terms of method calls on buffers. However, I'm not sure I have the expertise or the time to implement and test the full suite... hence the minimal patch!)\n\n\n> The only difference, then, would be that writeString would possibly\n> nullterminate for you. But I can't see that mattering for your use case.\n\nNot having it null-terminate avoids us having to potentially re-allocate an existing buffer to be one-byte bigger, or cast the buffer to get rid of the null-termination, a la:\n\n  http://mxr.mozilla.org/mozilla-central/source/services/crypto/modules/WeaveCrypto.js#371\n\nWe're at the point of trying to eliminate all of these \"oh, just one more object\" allocations, because one object per record is actually 10,000 objects for a first sync, all of which need GC.", "attachment_id": null, "id": 5328939, "bug_id": 639627, "count": 3, "time": "2011-03-08T01:05:07Z", "creator": "bugzilla@twinql.com", "author": "bugzilla@twinql.com"}, {"creator": "bugzilla@twinql.com", "author": "bugzilla@twinql.com", "time": "2011-03-08T01:08:04Z", "bug_id": 639627, "count": 4, "id": 5328951, "attachment_id": null, "text": "(In reply to comment #3)\n\n> > I think we should just do this by implementing writeString.\n> \n> I'd be happy to take a shot at altering this patch to implement writeString\n\n... I'm also entirely happy to hand over the reigns to someone who has a clue, of course :D", "creation_time": "2011-03-08T01:08:04Z", "is_private": false, "tags": [], "raw_text": "(In reply to comment #3)\n\n> > I think we should just do this by implementing writeString.\n> \n> I'd be happy to take a shot at altering this patch to implement writeString\n\n... I'm also entirely happy to hand over the reigns to someone who has a clue, of course :D"}]}}}