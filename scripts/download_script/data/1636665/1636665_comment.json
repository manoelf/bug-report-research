{"comments": {}, "bugs": {"1636665": {"comments": [{"count": 0, "is_private": false, "time": "2020-05-09T08:30:20Z", "raw_text": "On Thunderbird 76, I'm getting a quota indication in the status bar that I didn't get in 68 (separate profile bug with the same account).\n\nIt says \"Infinity%\" and indicates red, i.e. there's no space left.\n\nWhen I go to folder properties and look at the quota, it also says the same but \"full\".\n\nIf I go back to my Thunderbird 68 profile, in the properties dialog it says 0% full.\n\nThis is with my mozilla.com account that is hosted by Google.\n\nRequesting tracking as this is bad UI that's on the main display and obvious regression.", "creator": "standard8@mozilla.com", "id": 14806036, "bug_id": 1636665, "text": "Created attachment 9146996\nScreenshot 2020-05-09 at 09.24.32.png\n\nOn Thunderbird 76, I'm getting a quota indication in the status bar that I didn't get in 68 (separate profile bug with the same account).\n\nIt says \"Infinity%\" and indicates red, i.e. there's no space left.\n\nWhen I go to folder properties and look at the quota, it also says the same but \"full\".\n\nIf I go back to my Thunderbird 68 profile, in the properties dialog it says 0% full.\n\nThis is with my mozilla.com account that is hosted by Google.\n\nRequesting tracking as this is bad UI that's on the main display and obvious regression.", "creation_time": "2020-05-09T08:30:20Z", "tags": [], "author": "standard8@mozilla.com", "attachment_id": 9146996}, {"attachment_id": null, "creator": "mkmelin+mozilla@iki.fi", "tags": [], "author": "mkmelin+mozilla@iki.fi", "bug_id": 1636665, "id": 14806758, "count": 1, "text": "It will probably be from bug 841906. I wonder why it ends up with infinity - that certainly doesn't happen for everyone.\nMaybe around here: https://hg.mozilla.org/comm-central/rev/54a83a246c9e#l1.65 or maybe something getting wrongly parsed from the imap response?\n\nDo you have an imap log?", "creation_time": "2020-05-10T12:28:08Z", "time": "2020-05-10T12:28:08Z", "raw_text": "It will probably be from bug 841906. I wonder why it ends up with infinity - that certainly doesn't happen for everyone.\nMaybe around here: https://hg.mozilla.org/comm-central/rev/54a83a246c9e#l1.65 or maybe something getting wrongly parsed from the imap response?\n\nDo you have an imap log?", "is_private": false}, {"is_private": false, "time": "2020-05-10T20:06:49Z", "raw_text": "I can cause the \"Infinity%\" to occur only if I set the \"limit\" decoded from the gmail storage quota response to 0 in the Trunk tb code.  This is my info from tb log where quota is obtain from gmail:\n\n[(null) 11848: IMAP]: I/IMAP 0x7f4b8c662800:imap.gmail.com:S-INBOX:SendData: 11 getquotaroot \"INBOX\"\n[(null) 11848: IMAP]: D/IMAP ReadNextLine [stream=0x7f4b8d1a8740 nb=24 needmore=0]\n[(null) 11848: IMAP]: I/IMAP 0x7f4b8c662800:imap.gmail.com:S-INBOX:CreateNewLineFromSocket: * QUOTAROOT \"INBOX\" \"\"\n[(null) 11848: IMAP]: D/IMAP ReadNextLine [stream=0x7f4b8d1a8740 nb=38 needmore=0]\n[(null) 11848: IMAP]: I/IMAP 0x7f4b8c662800:imap.gmail.com:S-INBOX:CreateNewLineFromSocket: * QUOTA \"\" (STORAGE 968704 15728640)\n[(null) 11848: IMAP]: D/IMAP ReadNextLine [stream=0x7f4b8d1a8740 nb=15 needmore=0]\n[(null) 11848: IMAP]: I/IMAP 0x7f4b8c662800:imap.gmail.com:S-INBOX:CreateNewLineFromSocket: 11 OK Success\n\nCan you tell us what yours shows for the same getquotaroot imap command. Re: https://wiki.mozilla.org/MailNews:Logging\nIn the log above, 968704=usage, 15728640=limit.", "count": 2, "id": 14806910, "bug_id": 1636665, "creator": "gds@chartertn.net", "text": "I can cause the \"Infinity%\" to occur only if I set the \"limit\" decoded from the gmail storage quota response to 0 in the Trunk tb code.  This is my info from tb log where quota is obtain from gmail:\n\n[(null) 11848: IMAP]: I/IMAP 0x7f4b8c662800:imap.gmail.com:S-INBOX:SendData: 11 getquotaroot \"INBOX\"\n[(null) 11848: IMAP]: D/IMAP ReadNextLine [stream=0x7f4b8d1a8740 nb=24 needmore=0]\n[(null) 11848: IMAP]: I/IMAP 0x7f4b8c662800:imap.gmail.com:S-INBOX:CreateNewLineFromSocket: * QUOTAROOT \"INBOX\" \"\"\n[(null) 11848: IMAP]: D/IMAP ReadNextLine [stream=0x7f4b8d1a8740 nb=38 needmore=0]\n[(null) 11848: IMAP]: I/IMAP 0x7f4b8c662800:imap.gmail.com:S-INBOX:CreateNewLineFromSocket: * QUOTA \"\" (STORAGE 968704 15728640)\n[(null) 11848: IMAP]: D/IMAP ReadNextLine [stream=0x7f4b8d1a8740 nb=15 needmore=0]\n[(null) 11848: IMAP]: I/IMAP 0x7f4b8c662800:imap.gmail.com:S-INBOX:CreateNewLineFromSocket: 11 OK Success\n\nCan you tell us what yours shows for the same getquotaroot imap command. Re: https://wiki.mozilla.org/MailNews:Logging\nIn the log above, 968704=usage, 15728640=limit.", "creation_time": "2020-05-10T20:06:49Z", "tags": [], "author": "gds@chartertn.net", "attachment_id": null}, {"id": 14867103, "bug_id": 1636665, "tags": [], "author": "standard8@mozilla.com", "attachment_id": null, "creator": "standard8@mozilla.com", "is_private": false, "creation_time": "2020-06-07T13:47:36Z", "text": "Sorry for the delay, I get:\n\n```\n[(null) 55617: IMAP]: I/IMAP 0x13095a000:imap.gmail.com:S-INBOX:SendData: 11 getquotaroot \"INBOX\"\n[(null) 55617: IMAP]: D/IMAP ReadNextLine [stream=0x12e640190 nb=24 needmore=0]\n[(null) 55617: IMAP]: I/IMAP 0x13095a000:imap.gmail.com:S-INBOX:CreateNewLineFromSocket: * QUOTAROOT \"INBOX\" \"\"\n[(null) 55617: IMAP]: D/IMAP ReadNextLine [stream=0x12e640190 nb=47 needmore=0]\n[(null) 55617: IMAP]: I/IMAP 0x13095a000:imap.gmail.com:S-INBOX:CreateNewLineFromSocket: * QUOTA \"\" (STORAGE 2305081 7881299347898368)\n[(null) 55617: IMAP]: D/IMAP ReadNextLine [stream=0x12e640190 nb=15 needmore=0]\n[(null) 55617: IMAP]: I/IMAP 0x13095a000:imap.gmail.com:S-INBOX:CreateNewLineFromSocket: 11 OK Success\n```\n\nSo the limit is 7 petabytes.\n\nFrom what I can see of the patch in bug 841906, the limit is a 32 bit unsigned limit. It also uses `atoi` for which it looks like the behaviour is undefined when an integer is out of range.", "time": "2020-06-07T13:47:36Z", "raw_text": "Sorry for the delay, I get:\n\n```\n[(null) 55617: IMAP]: I/IMAP 0x13095a000:imap.gmail.com:S-INBOX:SendData: 11 getquotaroot \"INBOX\"\n[(null) 55617: IMAP]: D/IMAP ReadNextLine [stream=0x12e640190 nb=24 needmore=0]\n[(null) 55617: IMAP]: I/IMAP 0x13095a000:imap.gmail.com:S-INBOX:CreateNewLineFromSocket: * QUOTAROOT \"INBOX\" \"\"\n[(null) 55617: IMAP]: D/IMAP ReadNextLine [stream=0x12e640190 nb=47 needmore=0]\n[(null) 55617: IMAP]: I/IMAP 0x13095a000:imap.gmail.com:S-INBOX:CreateNewLineFromSocket: * QUOTA \"\" (STORAGE 2305081 7881299347898368)\n[(null) 55617: IMAP]: D/IMAP ReadNextLine [stream=0x12e640190 nb=15 needmore=0]\n[(null) 55617: IMAP]: I/IMAP 0x13095a000:imap.gmail.com:S-INBOX:CreateNewLineFromSocket: 11 OK Success\n```\n\nSo the limit is 7 petabytes.\n\nFrom what I can see of the patch in bug 841906, the limit is a 32 bit unsigned limit. It also uses `atoi` for which it looks like the behaviour is undefined when an integer is out of range.", "count": 3}, {"tags": [], "author": "gds@chartertn.net", "attachment_id": null, "creator": "gds@chartertn.net", "id": 14867207, "bug_id": 1636665, "count": 4, "is_private": false, "time": "2020-06-07T19:17:40Z", "text": "Can probably use atol or atoll I think to fix it. But interesting how google provides you with such a huge quota? Most I see advertised for  paid G-Suite is 30T. My free account is only 15G.\n\nI think the quota is supposed to be in KBytes so with speedcrunch I see something for yours like 8x10^^18 bytes:\n\n7881299347898368 * 1024\n= 8.070450532247928832e18", "creation_time": "2020-06-07T19:17:40Z", "raw_text": "Can probably use atol or atoll I think to fix it. But interesting how google provides you with such a huge quota? Most I see advertised for  paid G-Suite is 30T. My free account is only 15G.\n\nI think the quota is supposed to be in KBytes so with speedcrunch I see something for yours like 8x10^^18 bytes:\n\n7881299347898368 * 1024\n= 8.070450532247928832e18"}, {"count": 5, "creation_time": "2020-06-07T19:33:42Z", "text": "Since the number is in KB I guess the limit is 7 TB.", "time": "2020-06-07T19:33:42Z", "raw_text": "Since the number is in KB I guess the limit is 7 TB.", "is_private": false, "attachment_id": null, "creator": "mkmelin+mozilla@iki.fi", "tags": [], "author": "mkmelin+mozilla@iki.fi", "bug_id": 1636665, "id": 14867220}, {"is_private": false, "raw_text": "Gene, do you want to take this?", "time": "2020-06-09T13:25:53Z", "creation_time": "2020-06-09T13:25:53Z", "text": "Gene, do you want to take this?", "count": 6, "id": 14871585, "bug_id": 1636665, "author": "mkmelin+mozilla@iki.fi", "tags": [], "creator": "mkmelin+mozilla@iki.fi", "attachment_id": null}, {"bug_id": 1636665, "id": 14873281, "attachment_id": null, "creator": "gds@chartertn.net", "tags": [], "author": "gds@chartertn.net", "creation_time": "2020-06-10T03:44:07Z", "time": "2020-06-10T03:44:07Z", "text": "It appear to me that the imap quota RFC doesn't require that the storage number is in KB. It only shows an example with the numbers in \"1024 octet\" for the units of STORAGE. But it seems that has been adopted as a convention by the various imap server vendors that STORAGE is in kbytes (1024 octets).\nhttps://tools.ietf.org/html/rfc2087#page-2\n\nHowever, the Melnikov draft rfc wants to define STORAGE explicitly in KB:\nhttps://tools.ietf.org/id/draft-melnikov-extra-quota-00.html#rfc.section.5.1\n\n>Since the number is in KB I guess the limit is 7 TB.\n\nThe raw number is 7881299347898368. This is exactly 7 Peta since a Peta is 1024 to the 5th power:\n7881299347898368 /1024^5\n= 7\n\nSo if gmail is reporting STORAGE in bytes and not in KB, the limit is 7 PB and not  7 TB. But if gmail is reporting the quota in KB, the STORAGE limit is actually 7*1024 PB which is also essentially unlimited I would think.\n\n> Gene, do you want to take this?\n\nOk, sounds like \"fun\".  (Still working on the UTF8=ACCEPT/Skr\u00e4ppost problem.)", "raw_text": "It appear to me that the imap quota RFC doesn't require that the storage number is in KB. It only shows an example with the numbers in \"1024 octet\" for the units of STORAGE. But it seems that has been adopted as a convention by the various imap server vendors that STORAGE is in kbytes (1024 octets).\nhttps://tools.ietf.org/html/rfc2087#page-2\n\nHowever, the Melnikov draft rfc wants to define STORAGE explicitly in KB:\nhttps://tools.ietf.org/id/draft-melnikov-extra-quota-00.html#rfc.section.5.1\n\n>Since the number is in KB I guess the limit is 7 TB.\n\nThe raw number is 7881299347898368. This is exactly 7 Peta since a Peta is 1024 to the 5th power:\n7881299347898368 /1024^5\n= 7\n\nSo if gmail is reporting STORAGE in bytes and not in KB, the limit is 7 PB and not  7 TB. But if gmail is reporting the quota in KB, the STORAGE limit is actually 7*1024 PB which is also essentially unlimited I would think.\n\n> Gene, do you want to take this?\n\nOk, sounds like \"fun\".  (Still working on the UTF8=ACCEPT/Skr\u00e4ppost problem.)", "is_private": false, "count": 7}, {"bug_id": 1636665, "id": 14873476, "attachment_id": null, "creator": "mkmelin+mozilla@iki.fi", "tags": [], "author": "mkmelin+mozilla@iki.fi", "creation_time": "2020-06-10T06:56:32Z", "time": "2020-06-10T06:56:32Z", "text": "GMail reports in KB - my gmail account shows 15G quota which sounds about right.\n\nWe'll also need to adjust the JS calculations to use BigInt, since JS will only be able to handle a quota of around 8TB - after which we reach too large numbers.", "raw_text": "GMail reports in KB - my gmail account shows 15G quota which sounds about right.\n\nWe'll also need to adjust the JS calculations to use BigInt, since JS will only be able to handle a quota of around 8TB - after which we reach too large numbers.", "is_private": false, "count": 8}, {"count": 9, "is_private": false, "raw_text": "I just dug around a bit, it looks like we have 'unlimited' storage according to Google. I guess 7PB is how they express that at the moment.", "creation_time": "2020-06-10T07:03:40Z", "time": "2020-06-10T07:03:40Z", "text": "I just dug around a bit, it looks like we have 'unlimited' storage according to Google. I guess 7PB is how they express that at the moment.", "author": "standard8@mozilla.com", "tags": [], "creator": "standard8@mozilla.com", "attachment_id": null, "id": 14873488, "bug_id": 1636665}, {"author": "gds@chartertn.net", "tags": [], "creator": "gds@chartertn.net", "attachment_id": null, "id": 14874554, "bug_id": 1636665, "count": 10, "is_private": false, "raw_text": "> GMail reports in KB - my gmail account shows 15G quota which sounds about right.\n\nYes, at least \"free\" gmail reports in KB and is exactly 15G for me too:\n15728640 * 1024 /1024^3\n= 15\n\n>I just dug around a bit, it looks like we have 'unlimited' storage according to Google. I guess 7PB is how they express that at the moment.\n\nGoogle may be reporting a 1024*7 PB limit. I assume this a company-paid commercial account of some sort. The largest advertised account I see is for 30TB and is $300 per month: https://one.google.com/storage?hl=en\n\n> We'll also need to adjust the JS calculations to use BigInt, since JS will only be able to handle a quota of around 8TB - after which we reach too large numbers.\n\nThanks. I'll have to learn about this too.", "creation_time": "2020-06-10T17:12:27Z", "text": "> GMail reports in KB - my gmail account shows 15G quota which sounds about right.\n\nYes, at least \"free\" gmail reports in KB and is exactly 15G for me too:\n15728640 * 1024 /1024^3\n= 15\n\n>I just dug around a bit, it looks like we have 'unlimited' storage according to Google. I guess 7PB is how they express that at the moment.\n\nGoogle may be reporting a 1024*7 PB limit. I assume this a company-paid commercial account of some sort. The largest advertised account I see is for 30TB and is $300 per month: https://one.google.com/storage?hl=en\n\n> We'll also need to adjust the JS calculations to use BigInt, since JS will only be able to handle a quota of around 8TB - after which we reach too large numbers.\n\nThanks. I'll have to learn about this too.", "time": "2020-06-10T17:12:27Z"}, {"tags": [], "author": "mkmelin+mozilla@iki.fi", "attachment_id": null, "creation_time": "2020-06-22T06:56:32Z", "text": "Any update on this?", "creator": "mkmelin+mozilla@iki.fi", "id": 14893378, "bug_id": 1636665, "count": 11, "is_private": false, "time": "2020-06-22T06:56:32Z", "raw_text": "Any update on this?"}, {"is_private": false, "raw_text": "Sending this over to Ping.", "text": "Sending this over to Ping.", "time": "2020-06-29T06:51:43Z", "creation_time": "2020-06-29T06:51:43Z", "count": 12, "id": 14907689, "bug_id": 1636665, "author": "mkmelin+mozilla@iki.fi", "tags": [], "creator": "mkmelin+mozilla@iki.fi", "attachment_id": null}, {"creator": "remotenonsense@gmail.com", "bug_id": 1636665, "id": 14908007, "count": 13, "raw_text": "- Support petabyte in `formatFileSize`\n- Use BigInt when computing folder usage percentage", "time": "2020-06-29T11:43:37Z", "is_private": false, "attachment_id": 9160025, "author": "remotenonsense@gmail.com", "tags": [], "text": "Created attachment 9160025\n1636665.patch\n\n- Support petabyte in `formatFileSize`\n- Use BigInt when computing folder usage percentage", "creation_time": "2020-06-29T11:43:37Z"}, {"tags": [], "author": "mkmelin+mozilla@iki.fi", "attachment_id": 9160025, "creator": "mkmelin+mozilla@iki.fi", "id": 14908329, "bug_id": 1636665, "count": 14, "is_private": false, "creation_time": "2020-06-29T15:01:39Z", "time": "2020-06-29T15:01:39Z", "text": "Comment on attachment 9160025\n1636665.patch\n\nReview of attachment 9160025:\n-----------------------------------------------------------------\n\n::: mail/base/content/commandglue.js\n@@ +140,5 @@\n>      return;\n>    }\n>  \n> +  let quotaUsagePercentage = q =>\n> +    Number((100n * BigInt(q.usage)) / BigInt(q.limit));\n\nYou're not rounding it like before. Won't that cause 10.9879879879% type of displays?\n\n::: mailnews/base/test/unit/test_formatFileSize.js\n@@ +26,5 @@\n>      b: \"byteAbbreviation2\",\n>      kb: \"kiloByteAbbreviation2\",\n>      mb: \"megaByteAbbreviation2\",\n>      gb: \"gigaByteAbbreviation2\",\n> +    pb: \"petaByteAbbreviation2\",\n\nnext after GB is TB: terabyte", "raw_text": "Review of attachment 9160025:\n-----------------------------------------------------------------\n\n::: mail/base/content/commandglue.js\n@@ +140,5 @@\n>      return;\n>    }\n>  \n> +  let quotaUsagePercentage = q =>\n> +    Number((100n * BigInt(q.usage)) / BigInt(q.limit));\n\nYou're not rounding it like before. Won't that cause 10.9879879879% type of displays?\n\n::: mailnews/base/test/unit/test_formatFileSize.js\n@@ +26,5 @@\n>      b: \"byteAbbreviation2\",\n>      kb: \"kiloByteAbbreviation2\",\n>      mb: \"megaByteAbbreviation2\",\n>      gb: \"gigaByteAbbreviation2\",\n> +    pb: \"petaByteAbbreviation2\",\n\nnext after GB is TB: terabyte"}, {"bug_id": 1636665, "id": 14909347, "attachment_id": 9160236, "creator": "remotenonsense@gmail.com", "tags": [], "author": "remotenonsense@gmail.com", "time": "2020-06-30T00:07:50Z", "creation_time": "2020-06-30T00:07:50Z", "text": "Created attachment 9160236\n1636665.patch\n\n> You're not rounding it like before. Won't that cause 10.9879879879% type of displays?\n\nSeems not, for example `5n / 2n` is `2n` not `2.5n`, so `Number((100n * BigInt(q.usage)) / BigInt(q.limit))` is effectively equivalent to `Math.floor` for small integers.\n\n> next after GB is TB: terabyte\n\nI knew something was wrong, but failed to notice I missed TB. Fixed now.", "raw_text": "> You're not rounding it like before. Won't that cause 10.9879879879% type of displays?\n\nSeems not, for example `5n / 2n` is `2n` not `2.5n`, so `Number((100n * BigInt(q.usage)) / BigInt(q.limit))` is effectively equivalent to `Math.floor` for small integers.\n\n> next after GB is TB: terabyte\n\nI knew something was wrong, but failed to notice I missed TB. Fixed now.", "is_private": false, "count": 15}, {"count": 16, "is_private": false, "raw_text": "Review of attachment 9160236:\n-----------------------------------------------------------------\n\nDid you verify it's parsing large enough numbers? I think https://searchfox.org/comm-central/rev/35207b3950db6de34661c7a1239dc863fb1e66c6/mailnews/imap/src/nsImapServerResponseParser.cpp#2617 should be atol() and types changed to handle long?\n\nPlease also add the strings to the suite messenger.properties", "creation_time": "2020-06-30T09:00:16Z", "time": "2020-06-30T09:00:16Z", "text": "Comment on attachment 9160236\n1636665.patch\n\nReview of attachment 9160236:\n-----------------------------------------------------------------\n\nDid you verify it's parsing large enough numbers? I think https://searchfox.org/comm-central/rev/35207b3950db6de34661c7a1239dc863fb1e66c6/mailnews/imap/src/nsImapServerResponseParser.cpp#2617 should be atol() and types changed to handle long?\n\nPlease also add the strings to the suite messenger.properties", "author": "mkmelin+mozilla@iki.fi", "tags": [], "creator": "mkmelin+mozilla@iki.fi", "attachment_id": 9160236, "id": 14909865, "bug_id": 1636665}, {"attachment_id": 9160352, "creator": "remotenonsense@gmail.com", "tags": [], "author": "remotenonsense@gmail.com", "bug_id": 1636665, "id": 14910135, "count": 17, "creation_time": "2020-06-30T12:02:58Z", "time": "2020-06-30T12:02:58Z", "text": "Created attachment 9160352\n1636665.patch\n\n- Changed to use `atol` and replace more `u_int32` with `u_int64`\n\nI was hoping the compile can stop me or at least warn me when passing u_int64 to u_int32.", "raw_text": "- Changed to use `atol` and replace more `u_int32` with `u_int64`\n\nI was hoping the compile can stop me or at least warn me when passing u_int64 to u_int32.", "is_private": false}, {"count": 18, "raw_text": "I think it might be better to use atoll() when you are saving into a uint64_t. Re: https://searchfox.org/comm-central/search?q=atoll%28&path=&case=false&regexp=false\n\nAlso, the original code used PR_sscanf() instead of atol(). I was intending to go back to that and use something like %lld to scan into the two uint64_t's (usage and limit). PR_sscanf() also can return an error that atoll() won't.  \n\nAnyhow, I'll test the patch as is with my Dovecot server that I've set up with multiple quotaroots.  \nThanks!", "text": "I think it might be better to use atoll() when you are saving into a uint64_t. Re: https://searchfox.org/comm-central/search?q=atoll%28&path=&case=false&regexp=false\n\nAlso, the original code used PR_sscanf() instead of atol(). I was intending to go back to that and use something like %lld to scan into the two uint64_t's (usage and limit). PR_sscanf() also can return an error that atoll() won't.  \n\nAnyhow, I'll test the patch as is with my Dovecot server that I've set up with multiple quotaroots.  \nThanks!", "time": "2020-07-01T18:00:46Z", "creation_time": "2020-07-01T18:00:46Z", "is_private": false, "creator": "gds@chartertn.net", "attachment_id": null, "author": "gds@chartertn.net", "tags": [], "bug_id": 1636665, "id": 14912991}, {"tags": [], "author": "gds@chartertn.net", "attachment_id": null, "creator": "gds@chartertn.net", "id": 14913238, "bug_id": 1636665, "count": 19, "is_private": false, "creation_time": "2020-07-01T20:18:23Z", "text": "Seems to work fine as is with just atol(). I caused dovecot to return the same storage string as google/gmail  7881299347898368 and tb now reports the storage limit as 7168 PB.  I also tested in the TB range and GB range and still looks good. The % calc looks right too.\n\nI then changed atol to atoll and see no difference. Since I'm on a 64bit system with a 64bit build, there may be problems with 32bit, not sure. (Do we still support 32bits?)", "time": "2020-07-01T20:18:23Z", "raw_text": "Seems to work fine as is with just atol(). I caused dovecot to return the same storage string as google/gmail  7881299347898368 and tb now reports the storage limit as 7168 PB.  I also tested in the TB range and GB range and still looks good. The % calc looks right too.\n\nI then changed atol to atoll and see no difference. Since I'm on a 64bit system with a 64bit build, there may be problems with 32bit, not sure. (Do we still support 32bits?)"}, {"bug_id": 1636665, "id": 14913946, "attachment_id": 9160352, "creator": "mkmelin+mozilla@iki.fi", "tags": [], "author": "mkmelin+mozilla@iki.fi", "text": "Comment on attachment 9160352\n1636665.patch\n\nReview of attachment 9160352:\n-----------------------------------------------------------------\n\nLet's update to atoll. \nr=mkmelin with that changed", "time": "2020-07-02T06:46:31Z", "creation_time": "2020-07-02T06:46:31Z", "raw_text": "Review of attachment 9160352:\n-----------------------------------------------------------------\n\nLet's update to atoll. \nr=mkmelin with that changed", "is_private": false, "count": 20}, {"count": 21, "is_private": false, "raw_text": "- Changed to atoll\n- Added `/* global: BigInt */` to commandglue.js", "creation_time": "2020-07-02T07:26:42Z", "time": "2020-07-02T07:26:42Z", "text": "Created attachment 9160852\n1636665.patch\n\n- Changed to atoll\n- Added `/* global: BigInt */` to commandglue.js", "author": "remotenonsense@gmail.com", "tags": [], "creator": "remotenonsense@gmail.com", "attachment_id": 9160852, "id": 14913992, "bug_id": 1636665}, {"attachment_id": 9160856, "author": "remotenonsense@gmail.com", "tags": [], "text": "Created attachment 9160856\n1636665.patch\n\nAdded BigInt to .eslintrc\n\n```\n  globals: {\n    BigInt: \"readonly\",\n  },\n```\n\nOr is it better to use `/* global BigInt */` to where it is used?", "creation_time": "2020-07-02T07:59:57Z", "creator": "remotenonsense@gmail.com", "bug_id": 1636665, "id": 14914029, "count": 22, "raw_text": "Added BigInt to .eslintrc\n\n```\n  globals: {\n    BigInt: \"readonly\",\n  },\n```\n\nOr is it better to use `/* global BigInt */` to where it is used?", "time": "2020-07-02T07:59:57Z", "is_private": false}, {"tags": [], "author": "mkmelin+mozilla@iki.fi", "attachment_id": 9160856, "creator": "mkmelin+mozilla@iki.fi", "id": 14914269, "bug_id": 1636665, "count": 23, "is_private": false, "creation_time": "2020-07-02T10:33:10Z", "text": "Comment on attachment 9160856\n1636665.patch\n\nReview of attachment 9160856:\n-----------------------------------------------------------------\n\nI guess I'd add the global to both files instead.\nDon't really understand why it's needed though since it's a built in type.", "time": "2020-07-02T10:33:10Z", "raw_text": "Review of attachment 9160856:\n-----------------------------------------------------------------\n\nI guess I'd add the global to both files instead.\nDon't really understand why it's needed though since it's a built in type."}, {"bug_id": 1636665, "id": 14914393, "creator": "remotenonsense@gmail.com", "attachment_id": 9160904, "author": "remotenonsense@gmail.com", "tags": [], "raw_text": "Changed to use `/* global BigInt */`.", "text": "Created attachment 9160904\n1636665.patch\n\nChanged to use `/* global BigInt */`.", "creation_time": "2020-07-02T12:06:33Z", "time": "2020-07-02T12:06:33Z", "is_private": false, "count": 24}, {"count": 25, "is_private": false, "creation_time": "2020-07-02T16:27:00Z", "text": "Pushed by mkmelin@iki.fi:\nhttps://hg.mozilla.org/comm-central/rev/e8ecd7792a74\nSupport petabyte in imap folder quote size and percentage calculations. r=mkmelin", "time": "2020-07-02T16:27:00Z", "raw_text": "Pushed by mkmelin@iki.fi:\nhttps://hg.mozilla.org/comm-central/rev/e8ecd7792a74\nSupport petabyte in imap folder quote size and percentage calculations. r=mkmelin", "tags": [], "author": "pulsebot@bots.tld", "attachment_id": null, "creator": "pulsebot@bots.tld", "id": 14915039, "bug_id": 1636665}, {"time": "2020-07-23T10:00:27Z", "creation_time": "2020-07-23T10:00:27Z", "text": "Comment on attachment 9160904\n1636665.patch\n\n[Approval Request Comment]\nRegression caused by (bug #): bug 841906.\nUser impact if declined: Bad UI shown to users with large quotas\nTesting completed (on c-c, etc.): yes\nRisk to taking this patch (and alternatives if risky): no good alternatives.", "raw_text": "[Approval Request Comment]\nRegression caused by (bug #): bug 841906.\nUser impact if declined: Bad UI shown to users with large quotas\nTesting completed (on c-c, etc.): yes\nRisk to taking this patch (and alternatives if risky): no good alternatives.", "is_private": false, "count": 26, "bug_id": 1636665, "id": 14952594, "attachment_id": 9160904, "creator": "mkmelin+mozilla@iki.fi", "tags": [], "author": "mkmelin+mozilla@iki.fi"}, {"count": 27, "is_private": false, "text": "Comment on attachment 9160904\n1636665.patch\n\nApproved for beta\nApproved for esr78", "time": "2020-07-24T13:02:18Z", "creation_time": "2020-07-24T13:02:18Z", "raw_text": "Approved for beta\nApproved for esr78", "tags": [], "author": "vseerror@lehigh.edu", "attachment_id": 9160904, "creator": "vseerror@lehigh.edu", "id": 14954771, "bug_id": 1636665}, {"count": 28, "is_private": false, "raw_text": "Thunderbird 79.0b3:\nhttps://hg.mozilla.org/releases/comm-beta/rev/1d7aea3ffc5d", "text": "Thunderbird 79.0b3:\nhttps://hg.mozilla.org/releases/comm-beta/rev/1d7aea3ffc5d", "creation_time": "2020-07-25T19:46:37Z", "time": "2020-07-25T19:46:37Z", "author": "rob@thunderbird.net", "tags": ["bugherder", "uplift"], "creator": "rob@thunderbird.net", "attachment_id": null, "id": 14956285, "bug_id": 1636665}, {"is_private": false, "time": "2020-07-25T19:53:03Z", "creation_time": "2020-07-25T19:53:03Z", "text": "Thunderbird 78.1.0:\nhttps://hg.mozilla.org/releases/comm-esr78/rev/6bf50791d325", "raw_text": "Thunderbird 78.1.0:\nhttps://hg.mozilla.org/releases/comm-esr78/rev/6bf50791d325", "count": 29, "id": 14956295, "bug_id": 1636665, "tags": ["bugherder", "uplift"], "author": "rob@thunderbird.net", "attachment_id": null, "creator": "rob@thunderbird.net"}, {"attachment_id": null, "creator": "remotenonsense@gmail.com", "tags": [], "author": "remotenonsense@gmail.com", "bug_id": 1636665, "id": 14965076, "count": 30, "time": "2020-07-31T02:53:32Z", "text": "*** Bug 1655507 has been marked as a duplicate of this bug. ***", "creation_time": "2020-07-31T02:53:32Z", "raw_text": "", "is_private": false}]}}}