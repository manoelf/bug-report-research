{"bugs": {"660749": {"comments": [{"author": "huzaifas@redhat.com", "creator": "huzaifas@redhat.com", "creation_time": "2011-05-31T05:14:03Z", "raw_text": "User-Agent:       Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.2.16) Gecko/20110322 Fedora/3.6.16-1.fc14 Firefox/3.6.16\nBuild Identifier: Mozilla/5.0 (X11; Linux i686; rv:2.0.1) Gecko/20100101 Firefox/4.0.1\n\nA Debian bug report indicated that Firefox 4.0.x handled the\nvalidation/revalidation of SSL certificates improperly.  If a user were to\nvisit a site with an untrusted certificate, Firefox would correctly display the\nwarning about the untrusted connection.  If a user were to confirm the security\nexception for a single session (not check off the \"permanently store this\nexception\"), then restart the browser and re-load the page, the contents of the\npage would be displayed from the Firefox cache.  Upon reloading the page, the\nsecurity warning would appear, but incorrectly indicates that the site provides\na valid, verified certificate and there is no way to confirm the exception.\n\nThis is not the case in Firefox 3.6.17 where when re-loading the browser and\nvisiting the page, the untrusted connection warning comes up immediately,\nwithout showing the contents of the page, and allowing you to confirm the\nexception.\n\n\nReproducible: Always\n\nSteps to Reproduce:\n1) Visit a site with a self-signed certificate (such as https://kitenet.net/)\nand click \"I Understand The Risks\", click \"Add Exception\", uncheck \"Permanently\nstore this exception\", click \"Confirm Security Exception\".  The site's contents\nwill be displayed.\n\n2) Exit the browser.\n\n3) Start Firefox again and visit the page you visited in step 1.  The browser\nwill show the contents of the page, even though its certificate should no\nlonger be considered valid.\n\n4) Refresh the page.  The untrusted connection warning will display again. \nClick \"I Understand The Risks\", click \"Add Exception\".  Firefox will indicate\nthat \"This site provides valid, verified identification\" and does not allow you\nto confirm the security exception.\n\n\n\n\n\nReferences:\n[1] http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=627552\n[2] https://bugzilla.redhat.com/show_bug.cgi?id=709165\n\nNote: I am able to successfully reproduce this on firefox 4.0.1 on a Fedora-15 fresh install", "attachment_id": null, "time": "2011-05-31T05:14:03Z", "text": "User-Agent:       Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.2.16) Gecko/20110322 Fedora/3.6.16-1.fc14 Firefox/3.6.16\nBuild Identifier: Mozilla/5.0 (X11; Linux i686; rv:2.0.1) Gecko/20100101 Firefox/4.0.1\n\nA Debian bug report indicated that Firefox 4.0.x handled the\nvalidation/revalidation of SSL certificates improperly.  If a user were to\nvisit a site with an untrusted certificate, Firefox would correctly display the\nwarning about the untrusted connection.  If a user were to confirm the security\nexception for a single session (not check off the \"permanently store this\nexception\"), then restart the browser and re-load the page, the contents of the\npage would be displayed from the Firefox cache.  Upon reloading the page, the\nsecurity warning would appear, but incorrectly indicates that the site provides\na valid, verified certificate and there is no way to confirm the exception.\n\nThis is not the case in Firefox 3.6.17 where when re-loading the browser and\nvisiting the page, the untrusted connection warning comes up immediately,\nwithout showing the contents of the page, and allowing you to confirm the\nexception.\n\n\nReproducible: Always\n\nSteps to Reproduce:\n1) Visit a site with a self-signed certificate (such as https://kitenet.net/)\nand click \"I Understand The Risks\", click \"Add Exception\", uncheck \"Permanently\nstore this exception\", click \"Confirm Security Exception\".  The site's contents\nwill be displayed.\n\n2) Exit the browser.\n\n3) Start Firefox again and visit the page you visited in step 1.  The browser\nwill show the contents of the page, even though its certificate should no\nlonger be considered valid.\n\n4) Refresh the page.  The untrusted connection warning will display again. \nClick \"I Understand The Risks\", click \"Add Exception\".  Firefox will indicate\nthat \"This site provides valid, verified identification\" and does not allow you\nto confirm the security exception.\n\n\n\n\n\nReferences:\n[1] http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=627552\n[2] https://bugzilla.redhat.com/show_bug.cgi?id=709165\n\nNote: I am able to successfully reproduce this on firefox 4.0.1 on a Fedora-15 fresh install", "id": 5502673, "tags": [], "count": 0, "is_private": false, "bug_id": 660749}, {"bug_id": 660749, "count": 1, "is_private": false, "tags": [], "id": 5502989, "text": "My guess is that this is a consequence of bug 531801. If you set browser.cache.disk_cache_ssl to false, are you still able to reproduce with Firefox 4?", "attachment_id": null, "time": "2011-05-31T11:30:17Z", "raw_text": "My guess is that this is a consequence of bug 531801. If you set browser.cache.disk_cache_ssl to false, are you still able to reproduce with Firefox 4?", "creation_time": "2011-05-31T11:30:17Z", "creator": "mozbgz@velox.ch", "author": "mozbgz@velox.ch"}, {"is_private": false, "count": 2, "tags": [], "id": 5503355, "bug_id": 660749, "raw_text": "Haven't confirmed this, but it almost certainly lives in PSM", "creation_time": "2011-05-31T15:06:58Z", "text": "Haven't confirmed this, but it almost certainly lives in PSM", "time": "2011-05-31T15:06:58Z", "attachment_id": null, "creator": "bugzilla@johnath.com", "author": "bugzilla@johnath.com"}, {"author": "dveditz@mozilla.com", "attachment_id": null, "time": "2011-05-31T21:21:18Z", "creator": "dveditz@mozilla.com", "text": "I'm not too concerned we're reading the content from the cache even though we should no longer be trusting the certificate -- the certificate was trusted at the time we saw that content. I could go either way on that, but if we're not hitting the network then it's analogous to the case when a certificate was revoked after the content was cached.\n\nThe state where we can't re-add the exception because it's trusted and not at the same time is a bug that needs to be fixed. If just that one dialog is confused it may not be that bad, but if we're confused at a deeper level it could result in loading untrusted content in some contexts.", "creation_time": "2011-05-31T21:21:18Z", "raw_text": "I'm not too concerned we're reading the content from the cache even though we should no longer be trusting the certificate -- the certificate was trusted at the time we saw that content. I could go either way on that, but if we're not hitting the network then it's analogous to the case when a certificate was revoked after the content was cached.\n\nThe state where we can't re-add the exception because it's trusted and not at the same time is a bug that needs to be fixed. If just that one dialog is confused it may not be that bad, but if we're confused at a deeper level it could result in loading untrusted content in some contexts.", "bug_id": 660749, "id": 5504395, "tags": [], "count": 3, "is_private": false}, {"creator": "brian@briansmith.org", "author": "brian@briansmith.org", "text": "A nice explanation of IE's behavior:\nhttp://blogs.msdn.com/b/ie/archive/2010/07/14/caching-improvements-in-internet-explorer-9.aspx", "time": "2011-05-31T21:27:43Z", "attachment_id": null, "creation_time": "2011-05-31T21:27:43Z", "raw_text": "A nice explanation of IE's behavior:\nhttp://blogs.msdn.com/b/ie/archive/2010/07/14/caching-improvements-in-internet-explorer-9.aspx", "bug_id": 660749, "is_private": false, "count": 4, "tags": [], "id": 5504421}, {"bug_id": 660749, "tags": [], "count": 5, "is_private": false, "id": 5505137, "text": "(In reply to comment #0)\n> 3) Start Firefox again and visit the page you visited in step 1.  The browser\n> will show the contents of the page, even though its certificate should no\n> longer be considered valid.\n\nI think the people who implemented caching in Firefox deliberately made this work like this. I think it's acceptable, if all we do is displaying the exact copy of what was displayed earlier.\n\n\n> 4) Refresh the page.  The untrusted connection warning will display again. \n> Click \"I Understand The Risks\", click \"Add Exception\".  Firefox will indicate\n> that \"This site provides valid, verified identification\" and does not allow\n> you\n> to confirm the security exception.\n\n\nI confirm the bug.", "time": "2011-06-01T01:34:00Z", "attachment_id": null, "raw_text": "(In reply to comment #0)\n> 3) Start Firefox again and visit the page you visited in step 1.  The browser\n> will show the contents of the page, even though its certificate should no\n> longer be considered valid.\n\nI think the people who implemented caching in Firefox deliberately made this work like this. I think it's acceptable, if all we do is displaying the exact copy of what was displayed earlier.\n\n\n> 4) Refresh the page.  The untrusted connection warning will display again. \n> Click \"I Understand The Risks\", click \"Add Exception\".  Firefox will indicate\n> that \"This site provides valid, verified identification\" and does not allow\n> you\n> to confirm the security exception.\n\n\nI confirm the bug.", "creation_time": "2011-06-01T01:34:00Z", "creator": "kaie@kuix.de", "author": "kaie@kuix.de"}, {"creator": "kaie@kuix.de", "author": "kaie@kuix.de", "raw_text": "Workaround to add the exception: Clear the cache.\n\nGo to: \n  Tools\n  Clear recent history\n  select \"everything\"\n  keep \"Cache\" checked, uncheck everything else\n  clear now\n\nAfter that, you should be able to add the exception.\nCan you confirm the workaround helps you?", "creation_time": "2011-07-01T19:43:26Z", "text": "Workaround to add the exception: Clear the cache.\n\nGo to: \n  Tools\n  Clear recent history\n  select \"everything\"\n  keep \"Cache\" checked, uncheck everything else\n  clear now\n\nAfter that, you should be able to add the exception.\nCan you confirm the workaround helps you?", "time": "2011-07-01T19:43:26Z", "attachment_id": null, "is_private": false, "count": 6, "tags": [], "id": 5570136, "bug_id": 660749}, {"bug_id": 660749, "id": 5740876, "tags": [], "is_private": false, "count": 7, "time": "2011-09-27T19:02:25Z", "attachment_id": null, "text": "(In reply to Huzaifa Sidhpurwala from comment #0)\n> 4) Refresh the page.  The untrusted connection warning will display again. \n> Click \"I Understand The Risks\", click \"Add Exception\".  Firefox will indicate\n> that \"This site provides valid, verified identification\" and does not allow\n> you\n> to confirm the security exception.\n\nMy company makes products that use web-interfaces to configure embedded computers, and we frequently encounter this bug.  I would love to see it get addressed.\n\nUsing FF 6.0.2 I have confirmed that using browser.cache.disk_cache_ssl to false will prevent this from happening.  If that is set to true, then clearing the cache will also workaround this bug.\n\n(I posted a writeup of how to reproduce the problem in bug 659736, which covers the same issue.)\n\nAs a test I added a flag LOAD_BYPASS_CACHE to ignore the cache in mozilla-release/security/manager/pki/resources/content/exceptionDialog.js.  This worked, too.  Any chance of getting this, or some other workaround, added into the code base?\n\n  ...\n  var req = new XMLHttpRequest();\n  try {\n    if(uri) {\n      req.open('GET', uri.prePath, false);\n      req.channel.notificationCallbacks = new badCertListener();\n      req.channel.loadFlags |= Components.interfaces.nsIRequest.LOAD_BYPASS_CACHE;\n      req.send(null);\n    }\n  ...", "raw_text": "(In reply to Huzaifa Sidhpurwala from comment #0)\n> 4) Refresh the page.  The untrusted connection warning will display again. \n> Click \"I Understand The Risks\", click \"Add Exception\".  Firefox will indicate\n> that \"This site provides valid, verified identification\" and does not allow\n> you\n> to confirm the security exception.\n\nMy company makes products that use web-interfaces to configure embedded computers, and we frequently encounter this bug.  I would love to see it get addressed.\n\nUsing FF 6.0.2 I have confirmed that using browser.cache.disk_cache_ssl to false will prevent this from happening.  If that is set to true, then clearing the cache will also workaround this bug.\n\n(I posted a writeup of how to reproduce the problem in bug 659736, which covers the same issue.)\n\nAs a test I added a flag LOAD_BYPASS_CACHE to ignore the cache in mozilla-release/security/manager/pki/resources/content/exceptionDialog.js.  This worked, too.  Any chance of getting this, or some other workaround, added into the code base?\n\n  ...\n  var req = new XMLHttpRequest();\n  try {\n    if(uri) {\n      req.open('GET', uri.prePath, false);\n      req.channel.notificationCallbacks = new badCertListener();\n      req.channel.loadFlags |= Components.interfaces.nsIRequest.LOAD_BYPASS_CACHE;\n      req.send(null);\n    }\n  ...", "creation_time": "2011-09-27T19:02:25Z", "author": "mv2r76@gmail.com", "creator": "mv2r76@gmail.com"}, {"creation_time": "2011-09-27T19:59:18Z", "raw_text": "I know the cause and I think I have an idea for a fix. I *think* we can fix this issue within PSM without doing major changes to the cache or to the way Necko loads pages out of the cache. That solution involves changing the implementation of nsNSSSocketInfo::Read() to check that a verification has been done and failing if it doesn't. However, that solution is pretty wasteful; we have to do all the work of locating the entry in the cache and reading its metadata out of the cache, but then we never use that response.\n\nIMO, what we *really* should do this this:\n\n(1) Change the cache entry writing logic so that it stores a SHA-384 hash of the certificate, instead of the serialized nsNSSSocketInfo and nsSSLStatus instances. Also, do not write the cache entry if there were any SSL errors (including any cert errors or cert overrides).\n\n(2) Change the cache entry reading logic so that it doom any cache entry for a HTTPS page we come across without this SHA-384 hash, and so that it verifies that a cert with that hash has already been verified in the current session.\n\n(3) Remove the nsISerializable implementations for nsNSSSocketInfo and nsSSLStatus.\n\n(4) Change Necko so that it starts the HTTPS connection without checking the cache first, if the resource is HTTPS and we haven't validated a certificate for the host in the current session.\n\n(All of this is approximately what IE does, BTW.)\n\nThis latter implementation would be better for security *AND* use less disk space. Right now, every cache entry writes a serialized nsNSSSocketInfo, which includes a serialized copy of the cert and a serialized nsSSLStatus, which also includes a serialized copy of the cert. (That is, the same cert is written to disk twice, AFAICT.) This latter implementation would reduce the SSL-specific entry overhead from ~3,000-10,000 bytes per entry to <100 bytes per entry.\n\nI will meet with Bjarne and Michal (and Patrick) to coordinate this work.", "time": "2011-09-27T19:59:18Z", "attachment_id": null, "text": "I know the cause and I think I have an idea for a fix. I *think* we can fix this issue within PSM without doing major changes to the cache or to the way Necko loads pages out of the cache. That solution involves changing the implementation of nsNSSSocketInfo::Read() to check that a verification has been done and failing if it doesn't. However, that solution is pretty wasteful; we have to do all the work of locating the entry in the cache and reading its metadata out of the cache, but then we never use that response.\n\nIMO, what we *really* should do this this:\n\n(1) Change the cache entry writing logic so that it stores a SHA-384 hash of the certificate, instead of the serialized nsNSSSocketInfo and nsSSLStatus instances. Also, do not write the cache entry if there were any SSL errors (including any cert errors or cert overrides).\n\n(2) Change the cache entry reading logic so that it doom any cache entry for a HTTPS page we come across without this SHA-384 hash, and so that it verifies that a cert with that hash has already been verified in the current session.\n\n(3) Remove the nsISerializable implementations for nsNSSSocketInfo and nsSSLStatus.\n\n(4) Change Necko so that it starts the HTTPS connection without checking the cache first, if the resource is HTTPS and we haven't validated a certificate for the host in the current session.\n\n(All of this is approximately what IE does, BTW.)\n\nThis latter implementation would be better for security *AND* use less disk space. Right now, every cache entry writes a serialized nsNSSSocketInfo, which includes a serialized copy of the cert and a serialized nsSSLStatus, which also includes a serialized copy of the cert. (That is, the same cert is written to disk twice, AFAICT.) This latter implementation would reduce the SSL-specific entry overhead from ~3,000-10,000 bytes per entry to <100 bytes per entry.\n\nI will meet with Bjarne and Michal (and Patrick) to coordinate this work.", "id": 5741046, "tags": [], "count": 8, "is_private": false, "bug_id": 660749, "author": "brian@briansmith.org", "creator": "brian@briansmith.org"}, {"author": "honzab.moz@firemni.cz", "creator": "honzab.moz@firemni.cz", "id": 5743052, "is_private": false, "count": 9, "tags": [], "bug_id": 660749, "creation_time": "2011-09-28T14:16:58Z", "raw_text": "Brian, if you are going to work on this bug, then please take it (change Assigned To), I originally wanted to work on this, but it seems you are a step forward.", "attachment_id": null, "time": "2011-09-28T14:16:58Z", "text": "Brian, if you are going to work on this bug, then please take it (change Assigned To), I originally wanted to work on this, but it seems you are a step forward."}, {"creation_time": "2011-09-30T12:39:24Z", "raw_text": "Brian, let me know if there's anything I can do to help.  I'm happy to run some tests after this gets reworked.\n\nMatt", "text": "Brian, let me know if there's anything I can do to help.  I'm happy to run some tests after this gets reworked.\n\nMatt", "time": "2011-09-30T12:39:24Z", "attachment_id": null, "is_private": false, "count": 10, "tags": [], "id": 5749186, "bug_id": 660749, "creator": "mv2r76@gmail.com", "author": "mv2r76@gmail.com"}, {"creator": "ian.melven@gmail.com", "author": "ian.melven@gmail.com", "text": "bsterne and I both looked at the proposal in comment 8 and it sounds good to us. i've asked other secteam members to take a look and comment in the bug if they have further questions/concerns.", "attachment_id": null, "time": "2011-10-13T16:11:27Z", "creation_time": "2011-10-13T16:11:27Z", "raw_text": "bsterne and I both looked at the proposal in comment 8 and it sounds good to us. i've asked other secteam members to take a look and comment in the bug if they have further questions/concerns.", "bug_id": 660749, "is_private": false, "count": 11, "tags": [], "id": 5780304}, {"attachment_id": null, "time": "2011-10-14T08:47:06Z", "author": "brian@briansmith.org", "creator": "brian@briansmith.org", "text": "*** Bug 406187 has been marked as a duplicate of this bug. ***", "raw_text": "", "creation_time": "2011-10-14T08:47:06Z", "bug_id": 660749, "id": 5782186, "is_private": false, "count": 12, "tags": []}, {"id": 5787079, "tags": [], "is_private": false, "count": 13, "bug_id": 660749, "creation_time": "2011-10-17T19:36:49Z", "raw_text": "The proposal in comment 8 doesn't work for WYCIWYG entries. For WYCIWYG, we need to serialize the nsIAssociatedContentSecurity information, at least, in addition to the the entire server certificate chain. Also, we cannot refuse to load a WYCIWYG resource out of the cache just because we haven't previously validated the cert yet. That means that we will not be able to avoid validating the cert during cache loads.\n\nSo, here is an amendment to the proposal in comment 8 for WYCIWYG entries only (comment 8 would still be applicable for non-WYCIWYG entries):\n\n----\n\n(1) Store the nsIAssociatedContentSecurity information *and* the full cert chain in the cache entry.\n\n(2) Validate the certificate chain in the cache entry before returning it from the cache to Necko. This must happen off the socket transport thread. Ideally it would be asynchronous with the cache thread too, so that the cache thread doesn't get blocked.\n\n----\n\nAdditionally, there are other uses of the nsISerializable implementation of nsNSSSocketInfo and nsSSLStatus--they are serialized for e10s. See bug 568502 and bug 568504. In order to avoid unnecessary re-validations of certs for the e10s case, the value of isExtendedValidation() must be serialized/deserialized in nsSSLStatus.\n\nThe straightforward way to fix this would break compatibility with previously-cached entries (both WYCIWYG and non-WYCIWYG), but I think we can do so without changing the cache version (i.e. we don't have to blow away the entire cache for this transition). The consequence of this is that session restore for HTTPS pages wouldn't work during the upgrade restart.\n\nIf we aren't happy with that, then we can make the fix more complicated, and separate the serialization/deserialization logic used for the cache from the serialization/deserialization logic used for e10s. And/or, ideally, we would remove the need to serialize/deserialize the security info for e10s at all--that is, keep it all in the chrome process and never copy it to the child process.", "time": "2011-10-17T19:36:49Z", "attachment_id": null, "text": "The proposal in comment 8 doesn't work for WYCIWYG entries. For WYCIWYG, we need to serialize the nsIAssociatedContentSecurity information, at least, in addition to the the entire server certificate chain. Also, we cannot refuse to load a WYCIWYG resource out of the cache just because we haven't previously validated the cert yet. That means that we will not be able to avoid validating the cert during cache loads.\n\nSo, here is an amendment to the proposal in comment 8 for WYCIWYG entries only (comment 8 would still be applicable for non-WYCIWYG entries):\n\n----\n\n(1) Store the nsIAssociatedContentSecurity information *and* the full cert chain in the cache entry.\n\n(2) Validate the certificate chain in the cache entry before returning it from the cache to Necko. This must happen off the socket transport thread. Ideally it would be asynchronous with the cache thread too, so that the cache thread doesn't get blocked.\n\n----\n\nAdditionally, there are other uses of the nsISerializable implementation of nsNSSSocketInfo and nsSSLStatus--they are serialized for e10s. See bug 568502 and bug 568504. In order to avoid unnecessary re-validations of certs for the e10s case, the value of isExtendedValidation() must be serialized/deserialized in nsSSLStatus.\n\nThe straightforward way to fix this would break compatibility with previously-cached entries (both WYCIWYG and non-WYCIWYG), but I think we can do so without changing the cache version (i.e. we don't have to blow away the entire cache for this transition). The consequence of this is that session restore for HTTPS pages wouldn't work during the upgrade restart.\n\nIf we aren't happy with that, then we can make the fix more complicated, and separate the serialization/deserialization logic used for the cache from the serialization/deserialization logic used for e10s. And/or, ideally, we would remove the need to serialize/deserialize the security info for e10s at all--that is, keep it all in the chrome process and never copy it to the child process.", "author": "brian@briansmith.org", "creator": "brian@briansmith.org"}, {"raw_text": "The above analysis has assumed incorrectly that revalidation should only happen when loading from the disk cache. However, we should also revalidate when loading from the memory cache if the cert validation might be stale. For example, if the browser has been running for three days, a memory cache entry might have a cert that was valid three days ago but which expired yesterday. However, we don't want to do re-validation excessively (for every cache load), because performance would be horrible. Instead, we will have to implement a cache of SSL cert validation results that allows us to avoid revalidation for a period of time that we think is reasonable w.r.t. staleness. Wan-Teh said Chrome also does this and they invalidate cache SSL cert validation cache entries after they are 30 minutes old. I think a policy like that is reasonable.\n\nThis means the cert validation logic should happen in nsCacheService::SearchCacheDevices or higher in the call stack.", "creation_time": "2011-10-18T07:33:52Z", "text": "The above analysis has assumed incorrectly that revalidation should only happen when loading from the disk cache. However, we should also revalidate when loading from the memory cache if the cert validation might be stale. For example, if the browser has been running for three days, a memory cache entry might have a cert that was valid three days ago but which expired yesterday. However, we don't want to do re-validation excessively (for every cache load), because performance would be horrible. Instead, we will have to implement a cache of SSL cert validation results that allows us to avoid revalidation for a period of time that we think is reasonable w.r.t. staleness. Wan-Teh said Chrome also does this and they invalidate cache SSL cert validation cache entries after they are 30 minutes old. I think a policy like that is reasonable.\n\nThis means the cert validation logic should happen in nsCacheService::SearchCacheDevices or higher in the call stack.", "creator": "brian@briansmith.org", "author": "brian@briansmith.org", "attachment_id": null, "time": "2011-10-18T07:33:52Z", "tags": [], "is_private": false, "count": 14, "id": 5788479, "bug_id": 660749}, {"author": "kaie@kuix.de", "creator": "kaie@kuix.de", "creation_time": "2011-11-09T22:09:20Z", "raw_text": "", "attachment_id": null, "time": "2011-11-09T22:09:20Z", "text": "*** Bug 658812 has been marked as a duplicate of this bug. ***", "id": 5838439, "count": 15, "is_private": false, "tags": [], "bug_id": 660749}, {"bug_id": 660749, "id": 5936940, "count": 16, "is_private": false, "tags": [], "time": "2011-12-23T02:40:45Z", "attachment_id": null, "author": "brian@briansmith.org", "creator": "brian@briansmith.org", "text": "What should happen when the server returns a 304 Not Modified response and the cached document has different security properties (e.g. different cert) from the connection? \n\nLet's assume that the client previously cached a document from a malicious server, e.g. by adding a cert override. Then, we don't really want to use the cached document. Similarly, if the connection returning the 304 is from a malicious server, but the cached document was from a good server, then we would not want to use the cached document either, because it might contain sensitive information that could be retrieved by the attacker that sent the 304 response.\n\nI propose that, when we look up the validators for a cached entry, we compare the cert to the cert that we will use for the connection; if they match, carry on; if they are different certs, then don't provide those validators in our (conditional) request.\n\nHowever, a malicious server could return a 304 response even to an unconditional request. That means we would also have to ensure that we do, or have already done, the \"same cert\" check for whatever resource we look up from the cache in response to the 304.", "creation_time": "2011-12-23T02:40:45Z", "raw_text": "What should happen when the server returns a 304 Not Modified response and the cached document has different security properties (e.g. different cert) from the connection? \n\nLet's assume that the client previously cached a document from a malicious server, e.g. by adding a cert override. Then, we don't really want to use the cached document. Similarly, if the connection returning the 304 is from a malicious server, but the cached document was from a good server, then we would not want to use the cached document either, because it might contain sensitive information that could be retrieved by the attacker that sent the 304 response.\n\nI propose that, when we look up the validators for a cached entry, we compare the cert to the cert that we will use for the connection; if they match, carry on; if they are different certs, then don't provide those validators in our (conditional) request.\n\nHowever, a malicious server could return a 304 response even to an unconditional request. That means we would also have to ensure that we do, or have already done, the \"same cert\" check for whatever resource we look up from the cache in response to the 304."}, {"creator": "brian@briansmith.org", "author": "brian@briansmith.org", "bug_id": 660749, "tags": [], "count": 17, "is_private": false, "id": 5936952, "text": "Re: comment 16. We may be able to do the above checks for a 304 somewhat sensibly, but then a 304 would work differently from a 301/302/303 redirect to the same server, which seems wrong. It seems like, if we want to apply \"same cert\" logic, we must do so consistently in many places, including just regular document navigation or document/subdocument structures, or not at all. And, the Citibank problem makes me think \"not a all\" is probably the right answer.", "time": "2011-12-23T02:52:18Z", "attachment_id": null, "creation_time": "2011-12-23T02:52:18Z", "raw_text": "Re: comment 16. We may be able to do the above checks for a 304 somewhat sensibly, but then a 304 would work differently from a 301/302/303 redirect to the same server, which seems wrong. It seems like, if we want to apply \"same cert\" logic, we must do so consistently in many places, including just regular document navigation or document/subdocument structures, or not at all. And, the Citibank problem makes me think \"not a all\" is probably the right answer."}, {"creation_time": "2012-01-11T15:13:20Z", "raw_text": "", "author": "kaie@kuix.de", "attachment_id": null, "time": "2012-01-11T15:13:20Z", "creator": "kaie@kuix.de", "text": "*** Bug 524500 has been marked as a duplicate of this bug. ***", "id": 5972045, "tags": [], "count": 18, "is_private": false, "bug_id": 660749}, {"author": "kaie@kuix.de", "creator": "kaie@kuix.de", "attachment_id": null, "time": "2012-01-11T15:15:05Z", "text": "bug 524500 comment 16 has good steps to reproduce.\n\nThis is a major usability issue.", "creation_time": "2012-01-11T15:15:05Z", "raw_text": "bug 524500 comment 16 has good steps to reproduce.\n\nThis is a major usability issue.", "bug_id": 660749, "id": 5972053, "tags": [], "is_private": false, "count": 19}, {"text": "*** Bug 492370 has been marked as a duplicate of this bug. ***", "creator": "kaie@kuix.de", "attachment_id": null, "time": "2012-01-11T15:18:10Z", "author": "kaie@kuix.de", "raw_text": "", "creation_time": "2012-01-11T15:18:10Z", "bug_id": 660749, "count": 20, "is_private": false, "tags": [], "id": 5972063}, {"author": "hannu.nyman@iki.fi", "time": "2012-02-11T18:03:27Z", "attachment_id": null, "creator": "hannu.nyman@iki.fi", "text": "More duplicates:\nbug 457573\nbug 659736 (and its duplicate bug 654846)", "raw_text": "More duplicates:\nbug 457573\nbug 659736 (and its duplicate bug 654846)", "creation_time": "2012-02-11T18:03:27Z", "bug_id": 660749, "id": 6053349, "tags": [], "is_private": false, "count": 21}, {"id": 6053365, "tags": [], "count": 22, "is_private": false, "bug_id": 660749, "raw_text": "", "creation_time": "2012-02-11T18:17:57Z", "author": "kaie@kuix.de", "attachment_id": null, "time": "2012-02-11T18:17:57Z", "creator": "kaie@kuix.de", "text": "*** Bug 659736 has been marked as a duplicate of this bug. ***"}, {"author": "kaie@kuix.de", "creator": "kaie@kuix.de", "time": "2012-02-11T18:18:38Z", "attachment_id": null, "text": "*** Bug 654846 has been marked as a duplicate of this bug. ***", "creation_time": "2012-02-11T18:18:38Z", "raw_text": "", "bug_id": 660749, "id": 6053367, "is_private": false, "count": 23, "tags": []}, {"attachment_id": null, "time": "2012-02-11T18:19:39Z", "text": "I would really like to ask the people who had introduced this regression to come to help with this bug.", "creation_time": "2012-02-11T18:19:39Z", "raw_text": "I would really like to ask the people who had introduced this regression to come to help with this bug.", "bug_id": 660749, "id": 6053369, "tags": [], "count": 24, "is_private": false, "author": "kaie@kuix.de", "creator": "kaie@kuix.de"}, {"bug_id": 660749, "id": 6053392, "count": 25, "is_private": false, "tags": [], "attachment_id": null, "time": "2012-02-11T18:46:24Z", "author": "brian@briansmith.org", "text": "Kai, why do you think this is a regression? When did we ever re-validate SSL certificates from cached documents (in the memory cache or from disk cache)? I tried to search back in hg history to see if some such logic got removed, but I couldn't find any such removed logic.", "creator": "brian@briansmith.org", "creation_time": "2012-02-11T18:46:24Z", "raw_text": "Kai, why do you think this is a regression? When did we ever re-validate SSL certificates from cached documents (in the memory cache or from disk cache)? I tried to search back in hg history to see if some such logic got removed, but I couldn't find any such removed logic."}, {"raw_text": "The regression was caused by enabling caching for https pages.", "creation_time": "2012-02-11T19:35:39Z", "time": "2012-02-11T19:35:39Z", "attachment_id": null, "text": "The regression was caused by enabling caching for https pages.", "id": 6053443, "tags": [], "is_private": false, "count": 26, "bug_id": 660749, "author": "kaie@kuix.de", "creator": "kaie@kuix.de"}, {"text": "Searching bugzilla further reveals even more duplicates:\nBug 712280\nBug 697972\nBug 683454\nBug 682263\nBug 512343\n\nThose have been filed for branches 3.5, 6, 7 and 10, so this bug has been separately filed for almost every version :-(\n\nThis bug is really painful when doing work with embedded devices, where self-signed certificates get automatically regenerated after firmware updates.", "attachment_id": null, "time": "2012-02-11T20:06:50Z", "creation_time": "2012-02-11T20:06:50Z", "raw_text": "Searching bugzilla further reveals even more duplicates:\nBug 712280\nBug 697972\nBug 683454\nBug 682263\nBug 512343\n\nThose have been filed for branches 3.5, 6, 7 and 10, so this bug has been separately filed for almost every version :-(\n\nThis bug is really painful when doing work with embedded devices, where self-signed certificates get automatically regenerated after firmware updates.", "bug_id": 660749, "is_private": false, "count": 27, "tags": [], "id": 6053466, "creator": "hannu.nyman@iki.fi", "author": "hannu.nyman@iki.fi"}, {"author": "kaie@kuix.de", "creator": "kaie@kuix.de", "id": 6053477, "tags": [], "count": 28, "is_private": false, "bug_id": 660749, "creation_time": "2012-02-11T20:25:11Z", "raw_text": "I nominate to land any fix for this bug on the ESR branch. Adding tracking keyword.", "time": "2012-02-11T20:25:11Z", "attachment_id": null, "text": "I nominate to land any fix for this bug on the ESR branch. Adding tracking keyword."}, {"tags": [], "is_private": false, "count": 29, "id": 6053480, "bug_id": 660749, "raw_text": "", "creation_time": "2012-02-11T20:25:46Z", "text": "*** Bug 712280 has been marked as a duplicate of this bug. ***", "creator": "kaie@kuix.de", "author": "kaie@kuix.de", "time": "2012-02-11T20:25:46Z", "attachment_id": null}, {"author": "kaie@kuix.de", "creator": "kaie@kuix.de", "attachment_id": null, "time": "2012-02-11T20:25:58Z", "text": "*** Bug 697972 has been marked as a duplicate of this bug. ***", "raw_text": "", "creation_time": "2012-02-11T20:25:58Z", "bug_id": 660749, "id": 6053482, "tags": [], "count": 30, "is_private": false}, {"id": 6053485, "tags": [], "count": 31, "is_private": false, "bug_id": 660749, "creation_time": "2012-02-11T20:26:26Z", "raw_text": "", "time": "2012-02-11T20:26:26Z", "attachment_id": null, "text": "*** Bug 683454 has been marked as a duplicate of this bug. ***", "author": "kaie@kuix.de", "creator": "kaie@kuix.de"}, {"raw_text": "", "creation_time": "2012-02-11T20:26:38Z", "time": "2012-02-11T20:26:38Z", "attachment_id": null, "text": "*** Bug 682263 has been marked as a duplicate of this bug. ***", "id": 6053487, "tags": [], "is_private": false, "count": 32, "bug_id": 660749, "author": "kaie@kuix.de", "creator": "kaie@kuix.de"}, {"creator": "kaie@kuix.de", "author": "kaie@kuix.de", "creation_time": "2012-02-11T20:26:54Z", "raw_text": "", "text": "*** Bug 512343 has been marked as a duplicate of this bug. ***", "attachment_id": null, "time": "2012-02-11T20:26:54Z", "tags": [], "is_private": false, "count": 33, "id": 6053489, "bug_id": 660749}, {"author": "kaie@kuix.de", "creator": "kaie@kuix.de", "time": "2012-02-11T20:27:41Z", "attachment_id": null, "text": "Hannu, thanks for reporting the duplicates.", "raw_text": "Hannu, thanks for reporting the duplicates.", "creation_time": "2012-02-11T20:27:41Z", "bug_id": 660749, "id": 6053490, "is_private": false, "count": 34, "tags": []}, {"creation_time": "2012-02-11T20:54:30Z", "raw_text": "(In reply to Kai Engert (:kaie) from comment #26)\n> The regression was caused by enabling caching for https pages.\n\nI think that this may have been made *worse* by enabling HTTPS pages to be cached on disk. However, I think that it probably existed previously in a milder form, when we allowed HTTPS pages to be cached in memory.\n\n(In reply to Kai Engert (:kaie) from comment #28)\n> I nominate to land any fix for this bug on the ESR branch. Adding tracking\n> keyword.\n\nThe proper fix for this will be too much for ESR. It will require the SSL thread removal that is in the release after ESR, multiple changes to the HTTP cache, as-yet-unfinished in-memory certificate validation result caching, etc.\n\nI am not sure that this is an issue that qualifies for ESR at all. If we need a solution for ESR, I suggest that we make that solution be \"disable all caching of HTTPS pages,\" for ESR only. And/or, document the workaround of clearing the caches.", "text": "(In reply to Kai Engert (:kaie) from comment #26)\n> The regression was caused by enabling caching for https pages.\n\nI think that this may have been made *worse* by enabling HTTPS pages to be cached on disk. However, I think that it probably existed previously in a milder form, when we allowed HTTPS pages to be cached in memory.\n\n(In reply to Kai Engert (:kaie) from comment #28)\n> I nominate to land any fix for this bug on the ESR branch. Adding tracking\n> keyword.\n\nThe proper fix for this will be too much for ESR. It will require the SSL thread removal that is in the release after ESR, multiple changes to the HTTP cache, as-yet-unfinished in-memory certificate validation result caching, etc.\n\nI am not sure that this is an issue that qualifies for ESR at all. If we need a solution for ESR, I suggest that we make that solution be \"disable all caching of HTTPS pages,\" for ESR only. And/or, document the workaround of clearing the caches.", "attachment_id": null, "time": "2012-02-11T20:54:30Z", "tags": [], "is_private": false, "count": 35, "id": 6053508, "bug_id": 660749, "creator": "brian@briansmith.org", "author": "brian@briansmith.org"}, {"creator": "hannu.nyman@iki.fi", "author": "hannu.nyman@iki.fi", "raw_text": "(In reply to Brian Smith (:bsmith) from comment #35)\n> (In reply to Kai Engert (:kaie) from comment #28)\n> > I nominate to land any fix for this bug on the ESR branch. Adding tracking\n> > keyword.\n> \n> The proper fix for this will be too much for ESR. It will require the SSL\n> thread removal that is in the release after ESR, multiple changes to the\n> HTTP cache, as-yet-unfinished in-memory certificate validation result\n> caching, etc.\nFrom ESR corporate usability perspective, the worst part of this bug is the inability to add a new exception (as the \"add exception\" dialog thinks that there already exists a valid exception). Firefox should enable the user to replace the old exception with a new one, if he so wishes. Hopefully at least the dialog might be fixed rather soon, also for ESR.\n\nOne more duplicate: bug 637944", "creation_time": "2012-02-12T11:16:25Z", "text": "(In reply to Brian Smith (:bsmith) from comment #35)\n> (In reply to Kai Engert (:kaie) from comment #28)\n> > I nominate to land any fix for this bug on the ESR branch. Adding tracking\n> > keyword.\n> \n> The proper fix for this will be too much for ESR. It will require the SSL\n> thread removal that is in the release after ESR, multiple changes to the\n> HTTP cache, as-yet-unfinished in-memory certificate validation result\n> caching, etc.\nFrom ESR corporate usability perspective, the worst part of this bug is the inability to add a new exception (as the \"add exception\" dialog thinks that there already exists a valid exception). Firefox should enable the user to replace the old exception with a new one, if he so wishes. Hopefully at least the dialog might be fixed rather soon, also for ESR.\n\nOne more duplicate: bug 637944", "attachment_id": null, "time": "2012-02-12T11:16:25Z", "tags": [], "count": 36, "is_private": false, "id": 6054166, "bug_id": 660749}, {"author": "brian@briansmith.org", "creator": "brian@briansmith.org", "id": 6057490, "tags": [], "is_private": false, "count": 37, "bug_id": 660749, "creation_time": "2012-02-13T21:47:49Z", "raw_text": "(In reply to Brian Smith (:bsmith) from comment #35)\n> I am not sure that this is an issue that qualifies for ESR at all. If we\n> need a solution for ESR, I suggest that we make that solution be \"disable\n> all caching of HTTPS pages,\" for ESR only. And/or, document the workaround\n> of clearing the caches.\n\nhttps://wiki.mozilla.org/Release_Management/ESR_Landing_Process\n\nAfter reading the above, this does not meet the requirement for ESR. I will let release-drivers have the final say though.", "time": "2012-02-13T21:47:49Z", "attachment_id": null, "text": "(In reply to Brian Smith (:bsmith) from comment #35)\n> I am not sure that this is an issue that qualifies for ESR at all. If we\n> need a solution for ESR, I suggest that we make that solution be \"disable\n> all caching of HTTPS pages,\" for ESR only. And/or, document the workaround\n> of clearing the caches.\n\nhttps://wiki.mozilla.org/Release_Management/ESR_Landing_Process\n\nAfter reading the above, this does not meet the requirement for ESR. I will let release-drivers have the final say though."}, {"bug_id": 660749, "tags": [], "is_private": false, "count": 38, "id": 6057525, "text": "I've only nominated for ESR.\nI propose that we wait until we actually have a fix before we make a decision whether such a fix is appropriate or inappropriate for ESR.", "attachment_id": null, "time": "2012-02-13T21:54:27Z", "creation_time": "2012-02-13T21:54:27Z", "raw_text": "I've only nominated for ESR.\nI propose that we wait until we actually have a fix before we make a decision whether such a fix is appropriate or inappropriate for ESR.", "creator": "kaie@kuix.de", "author": "kaie@kuix.de"}, {"bug_id": 660749, "id": 6069305, "tags": [], "is_private": false, "count": 39, "attachment_id": null, "time": "2012-02-16T23:52:15Z", "text": "This does not meet the criteria for ESR as Brian notes in Comment#37. We are only considering fixes that are regressions in FF10, major stability issues, or security issues.", "creation_time": "2012-02-16T23:52:15Z", "raw_text": "This does not meet the criteria for ESR as Brian notes in Comment#37. We are only considering fixes that are regressions in FF10, major stability issues, or security issues.", "author": "akeybl@mozilla.com", "creator": "akeybl@mozilla.com"}, {"id": 6140944, "count": 40, "is_private": false, "tags": [], "bug_id": 660749, "creation_time": "2012-03-14T23:14:35Z", "raw_text": "", "time": "2012-03-14T23:14:35Z", "attachment_id": null, "text": "*** Bug 719972 has been marked as a duplicate of this bug. ***", "author": "thebnich+bmo@gmail.com", "creator": "thebnich+bmo@gmail.com"}, {"text": "In bug 406187 comment 0 Christian wrote:\n\n> In particular, the case of a certificate that expired between\n> caching and reusing the cache should be handled properly\n> (i.e. not show a warning).\n\nI think this is already what happens, and is partially the opposite behavior of what is being requested in this bug.\n\nI think that if there is any cert error, then the cache entry should be doomed and the resource reloaded from the network.", "attachment_id": null, "time": "2012-03-17T16:07:52Z", "creation_time": "2012-03-17T16:07:52Z", "raw_text": "In bug 406187 comment 0 Christian wrote:\n\n> In particular, the case of a certificate that expired between\n> caching and reusing the cache should be handled properly\n> (i.e. not show a warning).\n\nI think this is already what happens, and is partially the opposite behavior of what is being requested in this bug.\n\nI think that if there is any cert error, then the cache entry should be doomed and the resource reloaded from the network.", "bug_id": 660749, "count": 41, "is_private": false, "tags": [], "id": 6148757, "creator": "brian@briansmith.org", "author": "brian@briansmith.org"}, {"author": "brian@briansmith.org", "creator": "brian@briansmith.org", "bug_id": 660749, "id": 6148794, "tags": [], "is_private": false, "count": 42, "time": "2012-03-17T16:33:17Z", "attachment_id": null, "text": "The difficulties in adding an exception due are now tracked in bug 659736. It seems very likely that fixing this bug will fully fix bug 659736 but I am not sure yet.", "creation_time": "2012-03-17T16:33:17Z", "raw_text": "The difficulties in adding an exception due are now tracked in bug 659736. It seems very likely that fixing this bug will fully fix bug 659736 but I am not sure yet."}, {"time": "2012-03-26T18:31:10Z", "attachment_id": null, "text": "Removing myself as secr. Curtis, please re-assign to a security assurance member (if needed, probably discuss with bsmith first)", "raw_text": "Removing myself as secr. Curtis, please re-assign to a security assurance member (if needed, probably discuss with bsmith first)", "creation_time": "2012-03-26T18:31:10Z", "bug_id": 660749, "id": 6171664, "tags": [], "is_private": false, "count": 43, "author": "ian.melven@gmail.com", "creator": "ian.melven@gmail.com"}, {"author": "curtisk@mozilla.com", "creator": "curtisk@mozilla.com", "id": 6179655, "count": 44, "is_private": false, "tags": [], "bug_id": 660749, "creation_time": "2012-03-28T21:16:13Z", "raw_text": "Not seeing a need to sec review this, if you want to initiate a review let me know.", "time": "2012-03-28T21:16:13Z", "attachment_id": null, "text": "Not seeing a need to sec review this, if you want to initiate a review let me know."}, {"tags": [], "is_private": false, "count": 45, "id": 6494502, "bug_id": 660749, "creation_time": "2012-07-21T22:13:34Z", "raw_text": "", "text": "*** Bug 776267 has been marked as a duplicate of this bug. ***", "time": "2012-07-21T22:13:34Z", "attachment_id": null, "creator": "jonathan.protzenko@gmail.com", "author": "jonathan.protzenko@gmail.com"}, {"creation_time": "2012-07-21T22:17:42Z", "raw_text": "Kaie, I've been bitten by what seems to be this bug (see duplicate). The symptoms include an error page that says that the website provides no identity information (using another browser shows that the website *does* have a proper certificate) and no way at all to solve it. I can't even add an exception to says \"please let me see the website\".\n\nThe other bug report (from me) mentions that this starts happening in Firefox 16 so there's potential for a regression here.", "text": "Kaie, I've been bitten by what seems to be this bug (see duplicate). The symptoms include an error page that says that the website provides no identity information (using another browser shows that the website *does* have a proper certificate) and no way at all to solve it. I can't even add an exception to says \"please let me see the website\".\n\nThe other bug report (from me) mentions that this starts happening in Firefox 16 so there's potential for a regression here.", "attachment_id": null, "time": "2012-07-21T22:17:42Z", "is_private": false, "count": 46, "tags": [], "id": 6494506, "bug_id": 660749, "creator": "jonathan.protzenko@gmail.com", "author": "jonathan.protzenko@gmail.com"}, {"creator": "jaas@kflag.net", "author": "jaas@kflag.net", "creation_time": "2012-07-24T15:37:30Z", "raw_text": "Brian - can you provide a summary of what is left to do here?", "text": "Brian - can you provide a summary of what is left to do here?", "attachment_id": null, "time": "2012-07-24T15:37:30Z", "count": 47, "is_private": false, "tags": [], "id": 6500565, "bug_id": 660749}, {"creation_time": "2012-10-10T15:09:19Z", "raw_text": "", "text": "*** Bug 799847 has been marked as a duplicate of this bug. ***", "attachment_id": null, "time": "2012-10-10T15:09:19Z", "count": 48, "is_private": false, "tags": [], "id": 6715448, "bug_id": 660749, "creator": "bugzilla@mversen.de", "author": "bugzilla@mversen.de"}, {"author": "jsmith@mozilla.com", "creator": "jsmith@mozilla.com", "raw_text": "", "creation_time": "2013-07-10T15:55:24Z", "attachment_id": null, "time": "2013-07-10T15:55:24Z", "text": "*** Bug 880507 has been marked as a duplicate of this bug. ***", "id": 7618902, "tags": [], "count": 49, "is_private": false, "bug_id": 660749}, {"author": "brian@briansmith.org", "creator": "brian@briansmith.org", "bug_id": 660749, "id": 8594993, "count": 50, "is_private": false, "tags": [], "time": "2014-03-29T00:48:14Z", "attachment_id": null, "text": "This is a bug in the HTTP cache. The HTTP cache needs to validate the certificate for the cached entry. PSM provides an API for doing this: SSLServerCertVerificationJob::Dispatch. You can see how this is used in the function AuthCertificateHook in security/manager/ssl/src/SSLServerCertVerification.cpp:\n\n    socketInfo->SetCertVerificationWaiting();\n    SECStatus rv = SSLServerCertVerificationJob::Dispatch(\n                     certVerifier, static_cast<const void*>(fd), socketInfo,\n                     serverCert, stapledOCSPResponse, providerFlags, now);\n\nThe HTTP cache needs to do something similar. Note that currently the HTTP cache doesn't store all the information that is needed to re-validate the cached entry.", "creation_time": "2014-03-29T00:48:14Z", "raw_text": "This is a bug in the HTTP cache. The HTTP cache needs to validate the certificate for the cached entry. PSM provides an API for doing this: SSLServerCertVerificationJob::Dispatch. You can see how this is used in the function AuthCertificateHook in security/manager/ssl/src/SSLServerCertVerification.cpp:\n\n    socketInfo->SetCertVerificationWaiting();\n    SECStatus rv = SSLServerCertVerificationJob::Dispatch(\n                     certVerifier, static_cast<const void*>(fd), socketInfo,\n                     serverCert, stapledOCSPResponse, providerFlags, now);\n\nThe HTTP cache needs to do something similar. Note that currently the HTTP cache doesn't store all the information that is needed to re-validate the cached entry."}, {"creator": "valentin.gosu@gmail.com", "author": "valentin.gosu@gmail.com", "creation_time": "2014-08-18T03:50:49Z", "raw_text": "", "text": "Created attachment 8474340\n(re)validate certificates when loading a HTTPS page from the cache", "attachment_id": 8474340, "time": "2014-08-18T03:50:49Z", "count": 51, "is_private": false, "tags": [], "id": 9193515, "bug_id": 660749}, {"author": "valentin.gosu@gmail.com", "creator": "valentin.gosu@gmail.com", "raw_text": "Judging by the attached patch, and the behaviour I've noticed, the problem is in nsNSSCertificate.cpp\nI have changed the Write method so that it always saves ev_status_unknown as the cached status.\nTurns out that after the certificate and status are read from cache, rechecking the status immediately will cause mCachedEVStatus to be set to ev_status_invalid. Later calls would return a valid status, but because mCachedEVStatus is set to a definite state, later checks aren't even performed.\nThis causes certificates loaded from cache to be missing the green EV mark, and even a hard refresh doesn't restore it (browser restart sometimes works).\nIn the patch I added a mCachedEVStatusIsStale attribute, which forces revalidation for certificates loaded from cache. The behaviour I'm observing is that the first load doesn't have the secure EV mark, but a refresh will cause a revalidation, and the tag appears.\n\nAlso, I was unable to use SSLServerCertVerificationJob::Dispatch, even in nsNSSCertificate.cpp (it doesn't seem to be a public API).\n\nI don't think my fix is optimal, or even safe for that matter, but it does illustrate that we can/should fix the issue in the PSM code, rather than in the cache code.\n\nBrian, do you think I'm interpreting the behaviour correctly, or is there something I missed?", "creation_time": "2014-08-18T04:07:05Z", "attachment_id": null, "time": "2014-08-18T04:07:05Z", "text": "Judging by the attached patch, and the behaviour I've noticed, the problem is in nsNSSCertificate.cpp\nI have changed the Write method so that it always saves ev_status_unknown as the cached status.\nTurns out that after the certificate and status are read from cache, rechecking the status immediately will cause mCachedEVStatus to be set to ev_status_invalid. Later calls would return a valid status, but because mCachedEVStatus is set to a definite state, later checks aren't even performed.\nThis causes certificates loaded from cache to be missing the green EV mark, and even a hard refresh doesn't restore it (browser restart sometimes works).\nIn the patch I added a mCachedEVStatusIsStale attribute, which forces revalidation for certificates loaded from cache. The behaviour I'm observing is that the first load doesn't have the secure EV mark, but a refresh will cause a revalidation, and the tag appears.\n\nAlso, I was unable to use SSLServerCertVerificationJob::Dispatch, even in nsNSSCertificate.cpp (it doesn't seem to be a public API).\n\nI don't think my fix is optimal, or even safe for that matter, but it does illustrate that we can/should fix the issue in the PSM code, rather than in the cache code.\n\nBrian, do you think I'm interpreting the behaviour correctly, or is there something I missed?", "id": 9193547, "is_private": false, "count": 52, "tags": [], "bug_id": 660749}, {"id": 9194740, "tags": [], "is_private": false, "count": 53, "bug_id": 660749, "creation_time": "2014-08-18T12:18:10Z", "raw_text": "David, could you also weigh in on comment 52? Bug 1040086 seems pretty urgent, and maybe we can fix this before it moves from beta.", "attachment_id": null, "time": "2014-08-18T12:18:10Z", "text": "David, could you also weigh in on comment 52? Bug 1040086 seems pretty urgent, and maybe we can fix this before it moves from beta.", "author": "valentin.gosu@gmail.com", "creator": "valentin.gosu@gmail.com"}, {"id": 9198272, "tags": [], "count": 54, "is_private": false, "bug_id": 660749, "raw_text": "So, when we from some reason (must be checked yet!) store the ev cached state as \"unknown\" in the cache entry, the cached certificate fails to do OCSP check since CertVerifier::FLAG_LOCAL_ONLY is set when nsNSSCertificate::GetIsExtendedValidation gets called and we so far don't have any OCSP response in the local cache:\n\n\n \txul.dll!mozilla::psm::NSSCertDBTrustDomain::CheckRevocation(MustBeCA, {...}, {...}, 0x00000000, 0x003fe684) Line 451\tC++\n\n  if (mOCSPFetching == LocalOnlyOCSPForEV) {\n    if (cachedResponseResult != Success) {\n      return cachedResponseResult;\n    }\n>   return Result::ERROR_OCSP_UNKNOWN_CERT;\n  }\n\n \txul.dll!mozilla::pkix::PathBuildingStep::Check({...}, 0x00000000, false) Line 192\tC++\n \txul.dll!mozilla::psm::NSSCertDBTrustDomain::FindIssuer({...}, {...}, {...}) Line 138\tC++\n \txul.dll!mozilla::pkix::BuildForward({...}, {...}, {...}, keyCertSign, id_kp_serverAuth, {...}, 0x00000000, 0x00000001) Line 274\tC++\n \txul.dll!mozilla::pkix::PathBuildingStep::Check({...}, 0x00000000, false) Line 177\tC++\n \txul.dll!mozilla::psm::NSSCertDBTrustDomain::FindIssuer({...}, {...}, {...}) Line 138\tC++\n \txul.dll!mozilla::pkix::BuildForward({...}, {...}, {...}, digitalSignature, id_kp_serverAuth, {...}, 0x00000000, 0x00000000) Line 274\tC++\n \txul.dll!mozilla::pkix::BuildCertChain({...}, {...}, {...}, MustBeEndEntity, digitalSignature, id_kp_serverAuth, {...}, 0x00000000) Line 320\tC++\n \txul.dll!mozilla::psm::BuildCertChainForOneKeyUsage({...}, {...}, {...}, digitalSignature, keyEncipherment, keyAgreement, id_kp_serverAuth, {...}, 0x00000000) Line 167\tC++\n \txul.dll!mozilla::psm::CertVerifier::VerifyCert(0x18903810, 0x0000000000000002, {...}, 0x00000000, 0x00000000, 0x00000003, 0x00000000, 0x00000000, 0x003fec18) Line 286\tC++\n \txul.dll!nsNSSCertificate::hasValidEVOidTag(SEC_OID_UNKNOWN, false) Line 1415\tC++\n \txul.dll!nsNSSCertificate::getValidEVOidTag(SEC_OID_UNKNOWN, false) Line 1437\tC++\n \txul.dll!nsNSSCertificate::GetIsExtendedValidation(0x003fecab) Line 1470\tC++\n \txul.dll!nsSSLStatus::GetIsExtendedValidation(0x003fecab) Line 121\tC++\n \txul.dll!nsSecureBrowserUIImpl::EvaluateAndUpdateSecurityState(0x15cc9434, 0x18763f80, true, false) Line 517\tC++\n \txul.dll!nsSecureBrowserUIImpl::OnLocationChange(0x0da81c14, 0x15cc9434, 0x167d6cc0, 0x00000000) Line 1486\tC++\n \txul.dll!nsDocLoader::FireOnLocationChange(0x0da81c14, 0x15cc9434, 0x167d6cc0, 0x00000000) Line 1285\tC++\n\n\nUsing bug 1040086#c10, cannot reproduce.\n\nThe thing is that \"security-info\" meta is not set on the cache entry sooner than after OnStartRequest that doesn't happen sooner than after the cert is verified (we block on OCSP).  I'm no expert to the cert verification code either, brian (re)wrote it.  Since I cannot reproduce, this is hard for me to figure out easily.\n\nNote: during non-cached load the certificate is set on the ssl info object at (SSL Cert #1 thread):\n\n\txul.dll!mozilla::psm::`anonymous namespace'::AuthCertificate({...}, 0x14555c50, 0x1780c010, {...}, 0x18bfd0d0, 0x00000000, {...}) Line 803\tC++\n\n    if (status && !status->mServerCert) {\n>     status->mServerCert = nsc;\n      PR_LOG(gPIPNSSLog, PR_LOG_DEBUG,\n             (\"AuthCertificate setting NEW cert %p\\n\", status->mServerCert.get()));\n    }\n\n \txul.dll!mozilla::psm::`anonymous namespace'::SSLServerCertVerificationJob::Run() Line 900\tC++\n \txul.dll!nsThreadPool::Run() Line 222\tC++\n\nThe cert (nsc) is created with nsNSSCertificate::Create(cert, &evOidPolicy); call few lines above, so it has set the cached ev status from its very life start.\n\nThen we restart the handshake (suspended) on the sts thread.", "creation_time": "2014-08-18T23:30:22Z", "attachment_id": null, "time": "2014-08-18T23:30:22Z", "text": "So, when we from some reason (must be checked yet!) store the ev cached state as \"unknown\" in the cache entry, the cached certificate fails to do OCSP check since CertVerifier::FLAG_LOCAL_ONLY is set when nsNSSCertificate::GetIsExtendedValidation gets called and we so far don't have any OCSP response in the local cache:\n\n\n \txul.dll!mozilla::psm::NSSCertDBTrustDomain::CheckRevocation(MustBeCA, {...}, {...}, 0x00000000, 0x003fe684) Line 451\tC++\n\n  if (mOCSPFetching == LocalOnlyOCSPForEV) {\n    if (cachedResponseResult != Success) {\n      return cachedResponseResult;\n    }\n>   return Result::ERROR_OCSP_UNKNOWN_CERT;\n  }\n\n \txul.dll!mozilla::pkix::PathBuildingStep::Check({...}, 0x00000000, false) Line 192\tC++\n \txul.dll!mozilla::psm::NSSCertDBTrustDomain::FindIssuer({...}, {...}, {...}) Line 138\tC++\n \txul.dll!mozilla::pkix::BuildForward({...}, {...}, {...}, keyCertSign, id_kp_serverAuth, {...}, 0x00000000, 0x00000001) Line 274\tC++\n \txul.dll!mozilla::pkix::PathBuildingStep::Check({...}, 0x00000000, false) Line 177\tC++\n \txul.dll!mozilla::psm::NSSCertDBTrustDomain::FindIssuer({...}, {...}, {...}) Line 138\tC++\n \txul.dll!mozilla::pkix::BuildForward({...}, {...}, {...}, digitalSignature, id_kp_serverAuth, {...}, 0x00000000, 0x00000000) Line 274\tC++\n \txul.dll!mozilla::pkix::BuildCertChain({...}, {...}, {...}, MustBeEndEntity, digitalSignature, id_kp_serverAuth, {...}, 0x00000000) Line 320\tC++\n \txul.dll!mozilla::psm::BuildCertChainForOneKeyUsage({...}, {...}, {...}, digitalSignature, keyEncipherment, keyAgreement, id_kp_serverAuth, {...}, 0x00000000) Line 167\tC++\n \txul.dll!mozilla::psm::CertVerifier::VerifyCert(0x18903810, 0x0000000000000002, {...}, 0x00000000, 0x00000000, 0x00000003, 0x00000000, 0x00000000, 0x003fec18) Line 286\tC++\n \txul.dll!nsNSSCertificate::hasValidEVOidTag(SEC_OID_UNKNOWN, false) Line 1415\tC++\n \txul.dll!nsNSSCertificate::getValidEVOidTag(SEC_OID_UNKNOWN, false) Line 1437\tC++\n \txul.dll!nsNSSCertificate::GetIsExtendedValidation(0x003fecab) Line 1470\tC++\n \txul.dll!nsSSLStatus::GetIsExtendedValidation(0x003fecab) Line 121\tC++\n \txul.dll!nsSecureBrowserUIImpl::EvaluateAndUpdateSecurityState(0x15cc9434, 0x18763f80, true, false) Line 517\tC++\n \txul.dll!nsSecureBrowserUIImpl::OnLocationChange(0x0da81c14, 0x15cc9434, 0x167d6cc0, 0x00000000) Line 1486\tC++\n \txul.dll!nsDocLoader::FireOnLocationChange(0x0da81c14, 0x15cc9434, 0x167d6cc0, 0x00000000) Line 1285\tC++\n\n\nUsing bug 1040086#c10, cannot reproduce.\n\nThe thing is that \"security-info\" meta is not set on the cache entry sooner than after OnStartRequest that doesn't happen sooner than after the cert is verified (we block on OCSP).  I'm no expert to the cert verification code either, brian (re)wrote it.  Since I cannot reproduce, this is hard for me to figure out easily.\n\nNote: during non-cached load the certificate is set on the ssl info object at (SSL Cert #1 thread):\n\n\txul.dll!mozilla::psm::`anonymous namespace'::AuthCertificate({...}, 0x14555c50, 0x1780c010, {...}, 0x18bfd0d0, 0x00000000, {...}) Line 803\tC++\n\n    if (status && !status->mServerCert) {\n>     status->mServerCert = nsc;\n      PR_LOG(gPIPNSSLog, PR_LOG_DEBUG,\n             (\"AuthCertificate setting NEW cert %p\\n\", status->mServerCert.get()));\n    }\n\n \txul.dll!mozilla::psm::`anonymous namespace'::SSLServerCertVerificationJob::Run() Line 900\tC++\n \txul.dll!nsThreadPool::Run() Line 222\tC++\n\nThe cert (nsc) is created with nsNSSCertificate::Create(cert, &evOidPolicy); call few lines above, so it has set the cached ev status from its very life start.\n\nThen we restart the handshake (suspended) on the sts thread.", "author": "honzab.moz@firemni.cz", "creator": "honzab.moz@firemni.cz"}, {"author": "lmandel@mozilla.com", "creator": "lmandel@mozilla.com", "creation_time": "2014-08-19T13:21:56Z", "raw_text": "", "attachment_id": null, "time": "2014-08-19T13:21:56Z", "text": "*** Bug 1040086 has been marked as a duplicate of this bug. ***", "id": 9200455, "tags": [], "is_private": false, "count": 55, "bug_id": 660749}, {"creator": "lmandel@mozilla.com", "author": "lmandel@mozilla.com", "tags": [], "is_private": false, "count": 56, "id": 9200465, "bug_id": 660749, "raw_text": "Carrying over tracking flags from bug 1040086.", "creation_time": "2014-08-19T13:23:28Z", "text": "Carrying over tracking flags from bug 1040086.", "attachment_id": null, "time": "2014-08-19T13:23:28Z"}, {"raw_text": "I don't actually think fixing this bug will improve the situation for bug 1040086. Keep in mind that a certificate will only verify as EV if we either have cached OCSP responses or can access the network. Since we don't save OCSP responses persistently, on startup we basically have no OCSP cache (our work on OCSP GET will improve this, but not all responders will support GET, so this will always apply). Thus, when loading a site that was EV from the cache, if we re-validate the certificate, we will either take the performance hit on fetching an OCSP response or we won't show the EV indicator.\n\nTo fix bug 1040086 without sacrificing performance, we should figure out why mCachedEVStatus is getting saved in the cache with an incorrect value.", "creation_time": "2014-08-19T16:58:09Z", "attachment_id": null, "time": "2014-08-19T16:58:09Z", "text": "I don't actually think fixing this bug will improve the situation for bug 1040086. Keep in mind that a certificate will only verify as EV if we either have cached OCSP responses or can access the network. Since we don't save OCSP responses persistently, on startup we basically have no OCSP cache (our work on OCSP GET will improve this, but not all responders will support GET, so this will always apply). Thus, when loading a site that was EV from the cache, if we re-validate the certificate, we will either take the performance hit on fetching an OCSP response or we won't show the EV indicator.\n\nTo fix bug 1040086 without sacrificing performance, we should figure out why mCachedEVStatus is getting saved in the cache with an incorrect value.", "id": 9201687, "is_private": false, "count": 57, "tags": [], "bug_id": 660749, "author": "dkeeler@mozilla.com", "creator": "dkeeler@mozilla.com"}, {"author": "valentin.gosu@gmail.com", "creator": "valentin.gosu@gmail.com", "id": 9203724, "is_private": false, "count": 58, "tags": [], "bug_id": 660749, "creation_time": "2014-08-19T22:38:43Z", "raw_text": "As far as I could tell, there is no way to determine if the mCachedEVStatus has been computed, from the cache code.\nAlso I feel it is a problem that if mCachedEVStatus is set to invalid, due to not having the OCSP response, there is no way of revalidating it until a restart is performed. I think we should make this possible, at least when doing a forced refresh.", "attachment_id": null, "time": "2014-08-19T22:38:43Z", "text": "As far as I could tell, there is no way to determine if the mCachedEVStatus has been computed, from the cache code.\nAlso I feel it is a problem that if mCachedEVStatus is set to invalid, due to not having the OCSP response, there is no way of revalidating it until a restart is performed. I think we should make this possible, at least when doing a forced refresh."}, {"text": "I'm dropping tracking on this bug now that bug 1040086 has been reopened.", "creator": "lmandel@mozilla.com", "attachment_id": null, "time": "2014-08-20T21:12:34Z", "author": "lmandel@mozilla.com", "creation_time": "2014-08-20T21:12:34Z", "raw_text": "I'm dropping tracking on this bug now that bug 1040086 has been reopened.", "bug_id": 660749, "is_private": false, "count": 59, "tags": [], "id": 9208900}, {"attachment_id": null, "time": "2014-08-21T16:21:44Z", "text": "(In reply to Valentin Gosu [:valentin] from comment #52)\n> Brian, do you think I'm interpreting the behaviour correctly, or is there\n> something I missed?\n\nDiscussed over email.", "raw_text": "(In reply to Valentin Gosu [:valentin] from comment #52)\n> Brian, do you think I'm interpreting the behaviour correctly, or is there\n> something I missed?\n\nDiscussed over email.", "creation_time": "2014-08-21T16:21:44Z", "bug_id": 660749, "id": 9213234, "tags": [], "is_private": false, "count": 60, "author": "brian@briansmith.org", "creator": "brian@briansmith.org"}, {"author": "dkeeler@mozilla.com", "creator": "dkeeler@mozilla.com", "id": 9342008, "count": 61, "is_private": false, "tags": [], "bug_id": 660749, "creation_time": "2014-09-22T16:14:41Z", "raw_text": "", "time": "2014-09-22T16:14:41Z", "attachment_id": null, "text": "*** Bug 873394 has been marked as a duplicate of this bug. ***"}, {"creator": "dkeeler@mozilla.com", "author": "dkeeler@mozilla.com", "bug_id": 660749, "tags": [], "count": 62, "is_private": false, "id": 9498068, "text": "*** Bug 1088077 has been marked as a duplicate of this bug. ***", "attachment_id": null, "time": "2014-10-24T17:03:11Z", "raw_text": "", "creation_time": "2014-10-24T17:03:11Z"}, {"bug_id": 660749, "id": 11020702, "tags": [], "count": 63, "is_private": false, "attachment_id": null, "time": "2015-12-21T05:32:32Z", "text": "anything new here? Seems nearly unbelievable that such an issue is open for several years... o.O\n\nThis may also be a cause for bug #1076440.", "creation_time": "2015-12-21T05:32:32Z", "raw_text": "anything new here? Seems nearly unbelievable that such an issue is open for several years... o.O\n\nThis may also be a cause for bug #1076440.", "author": "calestyo@scientia.org", "creator": "calestyo@scientia.org"}, {"creation_time": "2016-01-04T21:05:07Z", "raw_text": "", "text": "*** Bug 1076440 has been marked as a duplicate of this bug. ***", "creator": "vseerror@lehigh.edu", "author": "vseerror@lehigh.edu", "time": "2016-01-04T21:05:07Z", "attachment_id": null, "tags": [], "is_private": false, "count": 64, "id": 11044548, "bug_id": 660749}, {"author": "dkeeler@mozilla.com", "creator": "dkeeler@mozilla.com", "id": 11405633, "count": 65, "is_private": false, "tags": [], "bug_id": 660749, "raw_text": "", "creation_time": "2016-05-12T23:31:51Z", "attachment_id": null, "time": "2016-05-12T23:31:51Z", "text": "*** Bug 471995 has been marked as a duplicate of this bug. ***"}, {"creator": "bug-husbandry-bot@mozilla.bugs", "author": "bug-husbandry-bot@mozilla.bugs", "raw_text": "Bulk change to priority: https://bugzilla.mozilla.org/show_bug.cgi?id=1399258", "creation_time": "2017-09-13T18:39:39Z", "text": "Bulk change to priority: https://bugzilla.mozilla.org/show_bug.cgi?id=1399258", "time": "2017-09-13T18:39:39Z", "attachment_id": null, "count": 66, "is_private": false, "tags": [], "id": 12658828, "bug_id": 660749}, {"author": "dkeeler@mozilla.com", "creator": "dkeeler@mozilla.com", "id": 12667082, "tags": [], "is_private": false, "count": 67, "bug_id": 660749, "raw_text": "", "creation_time": "2017-09-14T19:55:28Z", "time": "2017-09-14T19:55:28Z", "attachment_id": null, "text": "*** Bug 1088622 has been marked as a duplicate of this bug. ***"}, {"author": "youthcornerr@gmail.com", "creator": "youthcornerr@gmail.com", "bug_id": 660749, "id": 12684744, "tags": ["spam"], "is_private": false, "count": 68, "time": "2017-09-20T06:24:57Z", "attachment_id": null, "text": "I got same issue on my website http://www.theinspirespy.com two days ago and fixed now :)", "creation_time": "2017-09-20T06:24:57Z", "raw_text": "I got same issue on my website http://www.theinspirespy.com two days ago and fixed now :)"}, {"text": "*** Bug 1466051 has been marked as a duplicate of this bug. ***", "creator": "dkeeler@mozilla.com", "attachment_id": null, "time": "2018-06-18T21:26:35Z", "author": "dkeeler@mozilla.com", "creation_time": "2018-06-18T21:26:35Z", "raw_text": "", "bug_id": 660749, "count": 69, "is_private": false, "tags": [], "id": 13411447}, {"tags": [], "count": 70, "is_private": false, "id": 13414149, "bug_id": 660749, "creation_time": "2018-06-20T03:14:19Z", "raw_text": "This is a general TLS bug and doesn\u2019t block the implementation of FTPS.", "text": "This is a general TLS bug and doesn\u2019t block the implementation of FTPS.", "attachment_id": null, "time": "2018-06-20T03:14:19Z", "creator": "e7358d9c@opayq.com", "author": "e7358d9c@opayq.com"}, {"creation_time": "2019-03-27T16:41:41Z", "raw_text": "", "attachment_id": null, "time": "2019-03-27T16:41:41Z", "text": "*** Bug 1538166 has been marked as a duplicate of this bug. ***", "id": 14015153, "tags": [], "is_private": false, "count": 71, "bug_id": 660749, "author": "dkeeler@mozilla.com", "creator": "dkeeler@mozilla.com"}, {"author": "dkeeler@mozilla.com", "creator": "dkeeler@mozilla.com", "bug_id": 660749, "id": 14490055, "tags": [], "is_private": false, "count": 72, "time": "2019-11-15T17:55:07Z", "attachment_id": null, "text": "*** Bug 1596714 has been marked as a duplicate of this bug. ***", "raw_text": "", "creation_time": "2019-11-15T17:55:07Z"}]}}, "comments": {}}