{"comments": {}, "bugs": {"713613": {"comments": [{"creator": "sebastianzartner@gmail.com", "creation_time": "2011-12-27T08:12:39Z", "time": "2011-12-27T08:12:39Z", "author": "sebastianzartner@gmail.com", "is_private": false, "id": 5940530, "count": 0, "tags": [], "text": "Created attachment 584395\nborder style is expanded when there's a border-top style defined\n\nUser Agent: Mozilla/5.0 (Windows NT 6.1; rv:9.0.1) Gecko/20100101 Firefox/9.0.1\nBuild ID: 20111220165912\n\nSteps to reproduce:\n\nSee http://code.google.com/p/fbug/issues/detail?id=5070. I attached its test case here.\n\n\nActual results:\n\nIn the test case the different border styles are listed like shown in the screenshot attached to the issue.\n\n\nExpected results:\n\nThe styles should be exposed as defined, so just \"border\" and \"border-top\" will be seen in Firebug.\n\nSebastian", "bug_id": 713613, "attachment_id": 584395, "raw_text": "User Agent: Mozilla/5.0 (Windows NT 6.1; rv:9.0.1) Gecko/20100101 Firefox/9.0.1\nBuild ID: 20111220165912\n\nSteps to reproduce:\n\nSee http://code.google.com/p/fbug/issues/detail?id=5070. I attached its test case here.\n\n\nActual results:\n\nIn the test case the different border styles are listed like shown in the screenshot attached to the issue.\n\n\nExpected results:\n\nThe styles should be exposed as defined, so just \"border\" and \"border-top\" will be seen in Firebug.\n\nSebastian"}, {"id": 5941163, "count": 1, "is_private": false, "time": "2011-12-27T18:13:55Z", "creation_time": "2011-12-27T18:13:55Z", "creator": "bzbarsky@mit.edu", "author": "bzbarsky@mit.edu", "attachment_id": null, "raw_text": "Shorthand properties are always expanded internally.\n\nWhen serializing the declaration, we recollapse them if we can figure out how to do it in a _single_ shorthand.  In this case we can't, so we don't.\n\nI suspect this is wontfix, but dbaron should make that call.", "text": "Shorthand properties are always expanded internally.\n\nWhen serializing the declaration, we recollapse them if we can figure out how to do it in a _single_ shorthand.  In this case we can't, so we don't.\n\nI suspect this is wontfix, but dbaron should make that call.", "bug_id": 713613, "tags": []}, {"text": "It's probably easily fixable in a bunch of cases, but this is one of the hard ones.  I'm not sure this is immediately WONTFIX, though.", "bug_id": 713613, "tags": [], "attachment_id": null, "raw_text": "It's probably easily fixable in a bunch of cases, but this is one of the hard ones.  I'm not sure this is immediately WONTFIX, though.", "creator": "dbaron@dbaron.org", "creation_time": "2011-12-27T18:21:52Z", "time": "2011-12-27T18:21:52Z", "author": "dbaron@dbaron.org", "is_private": false, "count": 2, "id": 5941182}, {"creation_time": "2011-12-27T18:43:13Z", "time": "2011-12-27T18:43:13Z", "creator": "leeoniya@gmail.com", "author": "leeoniya@gmail.com", "count": 3, "id": 5941227, "is_private": false, "text": "i think a related issue is indicating whether each property is implicit (computed) vs explicitly defined in css. i dunno if you guys expose this in the api (probably, since there's a \"computed\" tab) but in fbug shorthands expand from eg:\n\ndiv {\n    background: none;\n}\n\nto\n\ndiv {\n    background: none repeat scroll 0 0 transparent;\n}\n\nif this is unavoidable, it would be helpful to at least make the computed properties show as a different color (silver maybe). i'm not sure if i should open an fbug issue or an FF issue, i'm thinking fbug.", "bug_id": 713613, "tags": [], "attachment_id": null, "raw_text": "i think a related issue is indicating whether each property is implicit (computed) vs explicitly defined in css. i dunno if you guys expose this in the api (probably, since there's a \"computed\" tab) but in fbug shorthands expand from eg:\n\ndiv {\n    background: none;\n}\n\nto\n\ndiv {\n    background: none repeat scroll 0 0 transparent;\n}\n\nif this is unavoidable, it would be helpful to at least make the computed properties show as a different color (silver maybe). i'm not sure if i should open an fbug issue or an FF issue, i'm thinking fbug."}, {"raw_text": "> i dunno if you guys expose this in the api\n\nWe don't.  \"background: none\" is expanded to \"background: none repeat scroll 0 0 transparent\" at parse time, and only the latter form is stored.  So at that point we don't know whether it was originally the full form, or \"background: none\" or \"background: transparent\" or some other version of the thing.  They're all stored exactly the same way.  This is distinct from computed value; the parse-time expansion affects specified values.", "attachment_id": null, "bug_id": 713613, "text": "> i dunno if you guys expose this in the api\n\nWe don't.  \"background: none\" is expanded to \"background: none repeat scroll 0 0 transparent\" at parse time, and only the latter form is stored.  So at that point we don't know whether it was originally the full form, or \"background: none\" or \"background: transparent\" or some other version of the thing.  They're all stored exactly the same way.  This is distinct from computed value; the parse-time expansion affects specified values.", "tags": [], "count": 4, "id": 5941320, "is_private": false, "author": "bzbarsky@mit.edu", "creation_time": "2011-12-27T19:19:38Z", "time": "2011-12-27T19:19:38Z", "creator": "bzbarsky@mit.edu"}, {"raw_text": "hmmm, makes debugging harder. no me gusta :(\n\nwould it be possible to store some kind of bitmask alongside the expanded versions that would indicate which were actually parsed and which were defaulted?", "attachment_id": null, "tags": [], "text": "hmmm, makes debugging harder. no me gusta :(\n\nwould it be possible to store some kind of bitmask alongside the expanded versions that would indicate which were actually parsed and which were defaulted?", "bug_id": 713613, "is_private": false, "id": 5941398, "count": 5, "author": "leeoniya@gmail.com", "creator": "leeoniya@gmail.com", "creation_time": "2011-12-27T19:43:54Z", "time": "2011-12-27T19:43:54Z"}, {"raw_text": "Possible, yes, at the cost of memory bloat and more code complexity and so forth....", "attachment_id": null, "tags": [], "bug_id": 713613, "text": "Possible, yes, at the cost of memory bloat and more code complexity and so forth....", "id": 5941480, "count": 6, "is_private": false, "author": "bzbarsky@mit.edu", "time": "2011-12-27T20:30:05Z", "creation_time": "2011-12-27T20:30:05Z", "creator": "bzbarsky@mit.edu"}, {"tags": [], "bug_id": 713613, "text": "i'd think the introspection benefits outweigh the overhead by a good margin, though. while to the end user it doesn't matter whether a rule is \"computed\" or \"default\". but the current situation is that firebug presents defaults as if they were explicit.\n\nthis discussion is bordering on hijacking. i opened Bug 713760 for this specific concern. is there a way to transfer over relevant comments?\n\nthx", "raw_text": "i'd think the introspection benefits outweigh the overhead by a good margin, though. while to the end user it doesn't matter whether a rule is \"computed\" or \"default\". but the current situation is that firebug presents defaults as if they were explicit.\n\nthis discussion is bordering on hijacking. i opened Bug 713760 for this specific concern. is there a way to transfer over relevant comments?\n\nthx", "attachment_id": null, "author": "leeoniya@gmail.com", "creator": "leeoniya@gmail.com", "time": "2011-12-27T22:50:07Z", "creation_time": "2011-12-27T22:50:07Z", "is_private": false, "id": 5941755, "count": 7}, {"text": "> i'd think the introspection benefits outweigh the overhead by a good margin,\n\nFor the small minority of users using a debugger.  For the rest, the overhead is pure loss.\n\n> is there a way to transfer over relevant comments?\n\nCopy and paste.\n\nAt this point, I'm not clear on what this but is about; it seems to be based on a false premise....", "bug_id": 713613, "tags": [], "attachment_id": null, "raw_text": "> i'd think the introspection benefits outweigh the overhead by a good margin,\n\nFor the small minority of users using a debugger.  For the rest, the overhead is pure loss.\n\n> is there a way to transfer over relevant comments?\n\nCopy and paste.\n\nAt this point, I'm not clear on what this but is about; it seems to be based on a false premise....", "creator": "bzbarsky@mit.edu", "creation_time": "2011-12-27T23:35:51Z", "time": "2011-12-27T23:35:51Z", "author": "bzbarsky@mit.edu", "is_private": false, "id": 5941837, "count": 8}, {"tags": [], "text": "Oh, I see.  Comment 2.  Resummarizing accordingly.", "bug_id": 713613, "raw_text": "Oh, I see.  Comment 2.  Resummarizing accordingly.", "attachment_id": null, "author": "bzbarsky@mit.edu", "creator": "bzbarsky@mit.edu", "time": "2011-12-27T23:37:21Z", "creation_time": "2011-12-27T23:37:21Z", "is_private": false, "id": 5941840, "count": 9}, {"attachment_id": null, "raw_text": "This is not limited to the \"border\" shorthand property, but also to \"background\". E.g. if I define a CSS rule like the following it doesn't get serialized:\n\nbody {\n  background: blue;\n  background-size: 100px 50px;\n}\n\nAccording to the CSS3 definition at http://www.w3.org/TR/css3-background/#background it should be serialized to something like \"background: none 0 0 / 100px 50px repeat scroll border-box padding-box blue\".\n\nAnd if you then add \"background-position\" and delete \"background-size\" like this:\n\nbody {\n  background: blue;\n  background-position: 20px 30px;\n}\n\nThen the styles also won't be serialized.\n\nSebastian", "bug_id": 713613, "text": "This is not limited to the \"border\" shorthand property, but also to \"background\". E.g. if I define a CSS rule like the following it doesn't get serialized:\n\nbody {\n  background: blue;\n  background-size: 100px 50px;\n}\n\nAccording to the CSS3 definition at http://www.w3.org/TR/css3-background/#background it should be serialized to something like \"background: none 0 0 / 100px 50px repeat scroll border-box padding-box blue\".\n\nAnd if you then add \"background-position\" and delete \"background-size\" like this:\n\nbody {\n  background: blue;\n  background-position: 20px 30px;\n}\n\nThen the styles also won't be serialized.\n\nSebastian", "tags": [], "count": 10, "id": 5942606, "is_private": false, "creation_time": "2011-12-28T13:16:40Z", "time": "2011-12-28T13:16:40Z", "creator": "sebastianzartner@gmail.com", "author": "sebastianzartner@gmail.com"}, {"is_private": false, "id": 5942722, "count": 11, "author": "dbaron@dbaron.org", "creator": "dbaron@dbaron.org", "creation_time": "2011-12-28T14:58:55Z", "time": "2011-12-28T14:58:55Z", "raw_text": "(In reply to Sebastian Zartner from comment #10)\n> This is not limited to the \"border\" shorthand property, but also to\n> \"background\". E.g. if I define a CSS rule like the following it doesn't get\n> serialized:\n> \n> body {\n>   background: blue;\n>   background-size: 100px 50px;\n> }\n> \n> According to the CSS3 definition at\n> http://www.w3.org/TR/css3-background/#background it should be serialized to\n> something like \"background: none 0 0 / 100px 50px repeat scroll border-box\n> padding-box blue\".\n> \n> And if you then add \"background-position\" and delete \"background-size\" like\n> this:\n> \n> body {\n>   background: blue;\n>   background-position: 20px 30px;\n> }\n> \n> Then the styles also won't be serialized.\n\nI'm not sure what you mean by 'delete \"background-size\"', but if you use removeProperty to do it, you will *not* end up with a rule equivalent to what you write above.  You'll instead end up with a rule that does not override a background-size declaration on an earlier rule, unlike the rule you write above which does override an earlier background-size declaration.", "attachment_id": null, "tags": [], "bug_id": 713613, "text": "(In reply to Sebastian Zartner from comment #10)\n> This is not limited to the \"border\" shorthand property, but also to\n> \"background\". E.g. if I define a CSS rule like the following it doesn't get\n> serialized:\n> \n> body {\n>   background: blue;\n>   background-size: 100px 50px;\n> }\n> \n> According to the CSS3 definition at\n> http://www.w3.org/TR/css3-background/#background it should be serialized to\n> something like \"background: none 0 0 / 100px 50px repeat scroll border-box\n> padding-box blue\".\n> \n> And if you then add \"background-position\" and delete \"background-size\" like\n> this:\n> \n> body {\n>   background: blue;\n>   background-position: 20px 30px;\n> }\n> \n> Then the styles also won't be serialized.\n\nI'm not sure what you mean by 'delete \"background-size\"', but if you use removeProperty to do it, you will *not* end up with a rule equivalent to what you write above.  You'll instead end up with a rule that does not override a background-size declaration on an earlier rule, unlike the rule you write above which does override an earlier background-size declaration."}, {"tags": [], "text": "Also, the background serialization code is a separate beast from the border serialization code; any issues with background should go in a separate bug.", "bug_id": 713613, "raw_text": "Also, the background serialization code is a separate beast from the border serialization code; any issues with background should go in a separate bug.", "attachment_id": null, "author": "bzbarsky@mit.edu", "creator": "bzbarsky@mit.edu", "time": "2011-12-28T16:19:11Z", "creation_time": "2011-12-28T16:19:11Z", "is_private": false, "count": 12, "id": 5942838}, {"author": "sebastianzartner@gmail.com", "time": "2011-12-30T01:29:00Z", "creation_time": "2011-12-30T01:29:00Z", "creator": "sebastianzartner@gmail.com", "count": 13, "id": 5946191, "is_private": false, "text": "> I'm not sure what you mean by 'delete \"background-size\"', but if you use\n> removeProperty to do it, you will *not* end up with a rule equivalent to\n> what you write above.  You'll instead end up with a rule that does not\n> override a background-size declaration on an earlier rule, unlike the rule\n> you write above which does override an earlier background-size declaration.\n\nSorry for the misunderstanding. I just used Firebug to reproduce the issue, so I used its terminology. Yes, internally Firebug calls removeProperty.\nThe second rule (including \"background\" and \"background-position\") is a transformation of the first rule (including \"background\" and \"background-size\") by calling removeProperty(\"background-size\") followed by a setProperty(\"background-position\", \"20px 30px\", \"\").\n\n> any issues with background should go in a separate bug.\nI will create one with a proper test case.\n\nBut first let's celebrate the new Year! :-)\n\nSebastian", "bug_id": 713613, "tags": [], "raw_text": "> I'm not sure what you mean by 'delete \"background-size\"', but if you use\n> removeProperty to do it, you will *not* end up with a rule equivalent to\n> what you write above.  You'll instead end up with a rule that does not\n> override a background-size declaration on an earlier rule, unlike the rule\n> you write above which does override an earlier background-size declaration.\n\nSorry for the misunderstanding. I just used Firebug to reproduce the issue, so I used its terminology. Yes, internally Firebug calls removeProperty.\nThe second rule (including \"background\" and \"background-position\") is a transformation of the first rule (including \"background\" and \"background-size\") by calling removeProperty(\"background-size\") followed by a setProperty(\"background-position\", \"20px 30px\", \"\").\n\n> any issues with background should go in a separate bug.\nI will create one with a proper test case.\n\nBut first let's celebrate the new Year! :-)\n\nSebastian", "attachment_id": null}, {"bug_id": 713613, "text": "I had trouble reproducing this bug because the the steps to reproduce as referenced in comment 0 are in another link and it requires Firebug installed. Unfortunately this particular Firefox profile I am using doesn't have it. (It also seems like a Firebug bug if described that way.) \n\nHere is the easier steps to reproduce:\n\n1. Click attachment 584395.\n2. Tools -> Web Development -> Web Console\n3. Enter \"alert(document.styleSheets[0].cssRules[0].cssText)\"\n\nActual results (formatted):\n\ndiv { \n  border-right: 1px solid silver; \n  border-width: medium 1px 1px; \n  border-style: none solid solid; \n  border-color: -moz-use-text-color silver silver; \n  -moz-border-top-colors: none; \n  -moz-border-right-colors: none; \n  -moz-border-bottom-colors: none; \n  -moz-border-left-colors: none;\n  -moz-border-image: none;\n}\n\nExpected results (formatted):\n\ndiv { \n  border-right: 1px solid silver; \n  border-top: none;\n}\n\n(In reply to Boris Zbarsky (:bz) from comment #8)\n> > i'd think the introspection benefits outweigh the overhead by a good margin,\n> \n> For the small minority of users using a debugger.  For the rest, the\n> overhead is pure loss.\n\nWhat about reparsing the stylesheet everytime cssText is called on a CSSRule? Does WYGIWYS editors use cssText on CSSRule often (or equivalently does making it slow affect normal users)?\n\nCode complexity remains, though. Asking Firebug to do the parsing seems like an approach too.", "tags": [], "raw_text": "I had trouble reproducing this bug because the the steps to reproduce as referenced in comment 0 are in another link and it requires Firebug installed. Unfortunately this particular Firefox profile I am using doesn't have it. (It also seems like a Firebug bug if described that way.) \n\nHere is the easier steps to reproduce:\n\n1. Click attachment 584395.\n2. Tools -> Web Development -> Web Console\n3. Enter \"alert(document.styleSheets[0].cssRules[0].cssText)\"\n\nActual results (formatted):\n\ndiv { \n  border-right: 1px solid silver; \n  border-width: medium 1px 1px; \n  border-style: none solid solid; \n  border-color: -moz-use-text-color silver silver; \n  -moz-border-top-colors: none; \n  -moz-border-right-colors: none; \n  -moz-border-bottom-colors: none; \n  -moz-border-left-colors: none;\n  -moz-border-image: none;\n}\n\nExpected results (formatted):\n\ndiv { \n  border-right: 1px solid silver; \n  border-top: none;\n}\n\n(In reply to Boris Zbarsky (:bz) from comment #8)\n> > i'd think the introspection benefits outweigh the overhead by a good margin,\n> \n> For the small minority of users using a debugger.  For the rest, the\n> overhead is pure loss.\n\nWhat about reparsing the stylesheet everytime cssText is called on a CSSRule? Does WYGIWYS editors use cssText on CSSRule often (or equivalently does making it slow affect normal users)?\n\nCode complexity remains, though. Asking Firebug to do the parsing seems like an approach too.", "attachment_id": null, "author": "kennyluck@csail.mit.edu", "creator": "kennyluck@csail.mit.edu", "creation_time": "2012-06-01T14:52:57Z", "time": "2012-06-01T14:52:57Z", "is_private": false, "count": 14, "id": 6355555}, {"is_private": false, "count": 15, "id": 6385502, "creator": "sebastianzartner@gmail.com", "time": "2012-06-12T21:10:14Z", "creation_time": "2012-06-12T21:10:14Z", "author": "sebastianzartner@gmail.com", "attachment_id": null, "raw_text": "Thanks Kenny for creating an easier test case.\n\n> Code complexity remains, though. Asking Firebug to do the parsing seems like an \n> approach too.\nIt's not just Firebug that displays the CSS rules. Also the web dev tools do that and probably some other tools, too.\nSo it wouldn't make sense to move the responsibility for serializing the CSS to extensions.\n\nSebastian", "tags": [], "bug_id": 713613, "text": "Thanks Kenny for creating an easier test case.\n\n> Code complexity remains, though. Asking Firebug to do the parsing seems like an \n> approach too.\nIt's not just Firebug that displays the CSS rules. Also the web dev tools do that and probably some other tools, too.\nSo it wouldn't make sense to move the responsibility for serializing the CSS to extensions.\n\nSebastian"}, {"attachment_id": null, "raw_text": "I assume the implementation probably isn't too complicated, so is it ok to add [good first bug] to the whiteboard?\n\n(In reply to Kang-Hao (Kenny) Lu [:kennyluck] from comment #14)\n> Expected results (formatted):\n> \n> div { \n>   border-right: 1px solid silver; \n>   border-top: none;\n> }\n\nThis is actually wrong. The expected results are:\n\ndiv { \n  border: 1px solid silver; \n  border-top: none;\n}\n\nThe 'border-right' is incorrectly added to the serialization.\n\n> (In reply to Boris Zbarsky (:bz) from comment #8)\n> > > i'd think the introspection benefits outweigh the overhead by a good margin,\n> > \n> > For the small minority of users using a debugger.  For the rest, the\n> > overhead is pure loss.\n> \n> What about reparsing the stylesheet everytime cssText is called on a\n> CSSRule? Does WYGIWYS editors use cssText on CSSRule often (or equivalently\n> does making it slow affect normal users)?\n\nLooks like you asked Boris, so I'm requesting info from him.\nMaybe some usage statistics could be acquired to be able to answer this question?\n\nSebastian", "text": "I assume the implementation probably isn't too complicated, so is it ok to add [good first bug] to the whiteboard?\n\n(In reply to Kang-Hao (Kenny) Lu [:kennyluck] from comment #14)\n> Expected results (formatted):\n> \n> div { \n>   border-right: 1px solid silver; \n>   border-top: none;\n> }\n\nThis is actually wrong. The expected results are:\n\ndiv { \n  border: 1px solid silver; \n  border-top: none;\n}\n\nThe 'border-right' is incorrectly added to the serialization.\n\n> (In reply to Boris Zbarsky (:bz) from comment #8)\n> > > i'd think the introspection benefits outweigh the overhead by a good margin,\n> > \n> > For the small minority of users using a debugger.  For the rest, the\n> > overhead is pure loss.\n> \n> What about reparsing the stylesheet everytime cssText is called on a\n> CSSRule? Does WYGIWYS editors use cssText on CSSRule often (or equivalently\n> does making it slow affect normal users)?\n\nLooks like you asked Boris, so I'm requesting info from him.\nMaybe some usage statistics could be acquired to be able to answer this question?\n\nSebastian", "bug_id": 713613, "tags": [], "count": 16, "id": 9686953, "is_private": false, "creation_time": "2014-12-12T10:17:53Z", "time": "2014-12-12T10:17:53Z", "creator": "sebastianzartner@gmail.com", "author": "sebastianzartner@gmail.com"}, {"author": "bzbarsky@mit.edu", "creation_time": "2014-12-12T15:59:35Z", "time": "2014-12-12T15:59:35Z", "creator": "bzbarsky@mit.edu", "count": 17, "id": 9688094, "is_private": false, "bug_id": 713613, "text": "> What about reparsing the stylesheet everytime cssText is called on a CSSRule?\n\nWe currently don't store the stylesheet text.  We could keep it around, but in the common case it's just a waste of memory, and we're already pretty memory-constrained.  Just storing a bitmask would be a better solution memory-wise.\n\nIn any case, that's not what the spec says to do for .cssText.", "tags": [], "raw_text": "> What about reparsing the stylesheet everytime cssText is called on a CSSRule?\n\nWe currently don't store the stylesheet text.  We could keep it around, but in the common case it's just a waste of memory, and we're already pretty memory-constrained.  Just storing a bitmask would be a better solution memory-wise.\n\nIn any case, that's not what the spec says to do for .cssText.", "attachment_id": null}, {"author": "sebastianzartner@gmail.com", "time": "2015-02-19T07:04:25Z", "creation_time": "2015-02-19T07:04:25Z", "creator": "sebastianzartner@gmail.com", "id": 9934676, "count": 18, "is_private": false, "text": "(In reply to Boris Zbarsky [:bz] from comment #4)\n> > i dunno if you guys expose this in the api\n> \n> We don't.  \"background: none\" is expanded to \"background: none repeat scroll\n> 0 0 transparent\" at parse time, and only the latter form is stored.\n\n(In reply to Boris Zbarsky [:bz] from comment #17)\n> > What about reparsing the stylesheet everytime cssText is called on a CSSRule?\n> In any case, that's not what the spec says to do for .cssText.\n\nThough when I'm interpreting the spec correctly, it says[1] that longhands with initial value that are not required should not be added to the serialized value.\nThat is also indicated by the examples[1], which need to be updated, though.\n\nTest case:\ndata:text/html,<!DOCTYPE html><style>p{border:none;}</style><p>Test</p><script>document.write(document.styleSheets[0].cssRules[0].cssText);</script>\n\nThe expected output is:\np { border: none; }\n\nSebastian\n\n[1] http://dev.w3.org/csswg/cssom/#serializing-css-values\n[2] http://dev.w3.org/csswg/cssom/#serializing-css-values-examples", "bug_id": 713613, "tags": [], "raw_text": "(In reply to Boris Zbarsky [:bz] from comment #4)\n> > i dunno if you guys expose this in the api\n> \n> We don't.  \"background: none\" is expanded to \"background: none repeat scroll\n> 0 0 transparent\" at parse time, and only the latter form is stored.\n\n(In reply to Boris Zbarsky [:bz] from comment #17)\n> > What about reparsing the stylesheet everytime cssText is called on a CSSRule?\n> In any case, that's not what the spec says to do for .cssText.\n\nThough when I'm interpreting the spec correctly, it says[1] that longhands with initial value that are not required should not be added to the serialized value.\nThat is also indicated by the examples[1], which need to be updated, though.\n\nTest case:\ndata:text/html,<!DOCTYPE html><style>p{border:none;}</style><p>Test</p><script>document.write(document.styleSheets[0].cssRules[0].cssText);</script>\n\nThe expected output is:\np { border: none; }\n\nSebastian\n\n[1] http://dev.w3.org/csswg/cssom/#serializing-css-values\n[2] http://dev.w3.org/csswg/cssom/#serializing-css-values-examples", "attachment_id": null}, {"raw_text": "(In reply to Sebastian Zartner from comment #13)\n> > any issues with background should go in a separate bug.\n> I will create one with a proper test case.\n\nLooks like I missed to do that. Did that now in bug 1134171.\n\nSebastian", "attachment_id": null, "tags": [], "text": "(In reply to Sebastian Zartner from comment #13)\n> > any issues with background should go in a separate bug.\n> I will create one with a proper test case.\n\nLooks like I missed to do that. Did that now in bug 1134171.\n\nSebastian", "bug_id": 713613, "id": 9934689, "count": 19, "is_private": false, "author": "sebastianzartner@gmail.com", "time": "2015-02-19T07:14:47Z", "creation_time": "2015-02-19T07:14:47Z", "creator": "sebastianzartner@gmail.com"}]}}}