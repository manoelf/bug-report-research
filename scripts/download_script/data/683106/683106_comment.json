{"bugs": {"683106": {"comments": [{"bug_id": 683106, "id": 5687162, "count": 0, "text": "Created attachment 556773\nTable hell generator\n\nUser Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.7; rv:9.0a1) Gecko/20110829 Firefox/9.0a1\nBuild ID: 20110829055008\n\nSteps to reproduce:\n\nI created a simple php to create some huge tables http://mrecho.net/firefox/tables.phps\nI made sure I disabled everything, only thing that loaded at start up was about:memory.\nOn disk the html is 27 MB, so that is 42 times the size of on disk file!\nNo css or js on page.\nOn a good note, when the tab is closed, it goes back to about the same state with about:memory, but the resident hangs around 900+MB.\n\nBuilt from http://hg.mozilla.org/mozilla-central/rev/33031c875984\nMozilla/5.0 (Macintosh; Intel Mac OS X 10.7; rv:9.0a1) Gecko/20110829 Firefox/9.0a1\n\n\nActual results:\n\nLoaded my tables.php, and 1,148MB of ram used.\n1,148.00 MB (100.0%) -- explicit\n513.15 MB (44.70%) -- layout\n316.73 MB (27.59%) -- heap-unclassified\n287.58 MB (25.05%) -- dom\n24.14 MB (02.10%) -- js\n\nThis is after hitting \"minimize memory usage\" 10+ times.", "author": "mrecho@gmail.com", "time": "2011-08-30T08:34:30Z", "raw_text": "User Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.7; rv:9.0a1) Gecko/20110829 Firefox/9.0a1\nBuild ID: 20110829055008\n\nSteps to reproduce:\n\nI created a simple php to create some huge tables http://mrecho.net/firefox/tables.phps\nI made sure I disabled everything, only thing that loaded at start up was about:memory.\nOn disk the html is 27 MB, so that is 42 times the size of on disk file!\nNo css or js on page.\nOn a good note, when the tab is closed, it goes back to about the same state with about:memory, but the resident hangs around 900+MB.\n\nBuilt from http://hg.mozilla.org/mozilla-central/rev/33031c875984\nMozilla/5.0 (Macintosh; Intel Mac OS X 10.7; rv:9.0a1) Gecko/20110829 Firefox/9.0a1\n\n\nActual results:\n\nLoaded my tables.php, and 1,148MB of ram used.\n1,148.00 MB (100.0%) -- explicit\n513.15 MB (44.70%) -- layout\n316.73 MB (27.59%) -- heap-unclassified\n287.58 MB (25.05%) -- dom\n24.14 MB (02.10%) -- js\n\nThis is after hitting \"minimize memory usage\" 10+ times.", "is_private": false, "creation_time": "2011-08-30T08:34:30Z", "creator": "mrecho@gmail.com", "tags": [], "attachment_id": 556773}, {"time": "2011-08-30T16:51:29Z", "raw_text": "Theres 2 goals of this post. 1: Memory allocation in different parts of the system for simple text on screen. 2: Hope to help out on finding heap allocation and fragmentation issues.\n\nBack in the late 90's I was able to load tables like this, yes they would take awhile to load, but the system(windows) only had maybe 64-128MB of ram.", "attachment_id": null, "tags": [], "creator": "mrecho@gmail.com", "count": 1, "text": "Theres 2 goals of this post. 1: Memory allocation in different parts of the system for simple text on screen. 2: Hope to help out on finding heap allocation and fragmentation issues.\n\nBack in the late 90's I was able to load tables like this, yes they would take awhile to load, but the system(windows) only had maybe 64-128MB of ram.", "author": "mrecho@gmail.com", "bug_id": 683106, "id": 5688032, "creation_time": "2011-08-30T16:51:29Z", "is_private": false}, {"creation_time": "2011-08-30T23:53:35Z", "is_private": false, "id": 5689440, "bug_id": 683106, "author": "n.nethercote@gmail.com", "count": 2, "text": "This is only really a problem if we're substantially worse than other browsers.  \nBut it is quite likely that we are worse -- \nhttp://www.neowin.net/forum/topic/989780-meet-firefox-next/page__st__720__p__594231040#entry594231040 showed we're much worse on a different large page.\n\nBut we need measurements from other browsers to get an idea of what the end goal of this bug is.  Trevor, if you could get RSS measurements (from 'ps' or 'top' on Mac) for other browsers that would be very helpful.", "creator": "n.nethercote@gmail.com", "tags": [], "attachment_id": null, "raw_text": "This is only really a problem if we're substantially worse than other browsers.  \nBut it is quite likely that we are worse -- \nhttp://www.neowin.net/forum/topic/989780-meet-firefox-next/page__st__720__p__594231040#entry594231040 showed we're much worse on a different large page.\n\nBut we need measurements from other browsers to get an idea of what the end goal of this bug is.  Trevor, if you could get RSS measurements (from 'ps' or 'top' on Mac) for other browsers that would be very helpful.", "time": "2011-08-30T23:53:35Z"}, {"creator": "mrecho@gmail.com", "text": "                                        VSZ    RSS\ne6591ea9b27b FF Nightly(safemode)   4,668,888 1,446,152\n5.1.7534.48.3 Safari WebProcess     4,907,288 1,346,612\n13.0.782.218 Chrome helper          1,544,596 757,756\n11.50.1074 Opera                    1,292,704 472,220", "count": 3, "author": "mrecho@gmail.com", "bug_id": 683106, "id": 5689739, "creation_time": "2011-08-31T04:07:36Z", "is_private": false, "time": "2011-08-31T04:07:36Z", "raw_text": "                                        VSZ    RSS\ne6591ea9b27b FF Nightly(safemode)   4,668,888 1,446,152\n5.1.7534.48.3 Safari WebProcess     4,907,288 1,346,612\n13.0.782.218 Chrome helper          1,544,596 757,756\n11.50.1074 Opera                    1,292,704 472,220", "attachment_id": null, "tags": []}, {"count": 4, "text": "Thanks for the info, Trevor.  I think VSZ is pretty meaningless on Mac but the RSS numbers are clear.  The neowin.net measurements also showed that Opera was the best.", "author": "n.nethercote@gmail.com", "creator": "n.nethercote@gmail.com", "creation_time": "2011-08-31T04:34:46Z", "is_private": false, "bug_id": 683106, "id": 5689769, "raw_text": "Thanks for the info, Trevor.  I think VSZ is pretty meaningless on Mac but the RSS numbers are clear.  The neowin.net measurements also showed that Opera was the best.", "attachment_id": null, "time": "2011-08-31T04:34:46Z", "tags": []}, {"text": "I wish I could help more, but im not a c/c++ guy. But with my experience of Gentoo, I know how to compile from source, and run gdb/strace. I do have FF built from current source on the mac if you want me to run more tests.", "count": 5, "author": "mrecho@gmail.com", "id": 5689825, "bug_id": 683106, "raw_text": "I wish I could help more, but im not a c/c++ guy. But with my experience of Gentoo, I know how to compile from source, and run gdb/strace. I do have FF built from current source on the mac if you want me to run more tests.", "time": "2011-08-31T05:23:24Z", "creator": "mrecho@gmail.com", "creation_time": "2011-08-31T05:23:24Z", "is_private": false, "attachment_id": null, "tags": []}, {"id": 5690097, "bug_id": 683106, "count": 6, "text": "nsBlockReflowContext: Block(body)(2)@0x107478f68 metrics=84840,65410560!\nnsBlockReflowContext: Block(body)(2)@0x107478f68 metrics=84840,115013328!\nnsBlockReflowContext: Block(body)(2)@0x107478f68 metrics=84840,126572784!\nnsBlockReflowContext: Block(body)(2)@0x107478f68 metrics=84840,136532880!\nnsBlockReflowContext: Block(body)(2)@0x107478f68 metrics=84840,146494608!\nnsBlockReflowContext: Block(body)(2)@0x107478f68 metrics=84840,156454704!\nnsBlockReflowContext: Block(body)(2)@0x107478f68 metrics=84840,163526400!", "author": "mrecho@gmail.com", "raw_text": "nsBlockReflowContext: Block(body)(2)@0x107478f68 metrics=84840,65410560!\nnsBlockReflowContext: Block(body)(2)@0x107478f68 metrics=84840,115013328!\nnsBlockReflowContext: Block(body)(2)@0x107478f68 metrics=84840,126572784!\nnsBlockReflowContext: Block(body)(2)@0x107478f68 metrics=84840,136532880!\nnsBlockReflowContext: Block(body)(2)@0x107478f68 metrics=84840,146494608!\nnsBlockReflowContext: Block(body)(2)@0x107478f68 metrics=84840,156454704!\nnsBlockReflowContext: Block(body)(2)@0x107478f68 metrics=84840,163526400!", "time": "2011-08-31T09:27:24Z", "is_private": false, "creation_time": "2011-08-31T09:27:24Z", "creator": "mrecho@gmail.com", "tags": [], "attachment_id": null}, {"bug_id": 683106, "id": 5691802, "is_private": false, "creation_time": "2011-08-31T20:11:38Z", "creator": "acelists@atlas.sk", "count": 7, "text": "Linux Mozilla/5.0 (X11; Linux i686; rv:9.0a1) Gecko/20110831 Firefox/9.0a1 ID:20110831030834 :\n627.41 MB (100.0%) -- explicit\n\u251c\u2500\u2500336.46 MB (53.63%) -- layout\n\u2502  \u251c\u2500\u2500336.13 MB (53.57%) -- arenas\n\u2502  \u2514\u2500\u2500\u2500\u25000.33 MB (00.05%) -- (1 omitted)\n\u251c\u2500\u2500155.22 MB (24.74%) -- dom\n\u251c\u2500\u2500111.38 MB (17.75%) -- heap-unclassified\n\u251c\u2500\u2500\u250019.54 MB (03.11%) -- js\n\nJust saving the page to disk increased mem usage:\n992.58 MB (100.0%) -- explicit\n\u251c\u2500\u2500479.52 MB (48.31%) -- heap-unclassified\n\u251c\u2500\u2500336.56 MB (33.91%) -- layout\n\u2502  \u251c\u2500\u2500336.24 MB (33.88%) -- arenas\n\u2502  \u2514\u2500\u2500\u2500\u25000.33 MB (00.03%) -- (1 omitted)\n\u251c\u2500\u2500155.22 MB (15.64%) -- dom\n\u251c\u2500\u2500\u250015.99 MB (01.61%) -- js\n\nOpera 11.50 on exactly the same saved HTML: RSS 455m", "author": "acelists@atlas.sk", "tags": [], "time": "2011-08-31T20:11:38Z", "raw_text": "Linux Mozilla/5.0 (X11; Linux i686; rv:9.0a1) Gecko/20110831 Firefox/9.0a1 ID:20110831030834 :\n627.41 MB (100.0%) -- explicit\n\u251c\u2500\u2500336.46 MB (53.63%) -- layout\n\u2502  \u251c\u2500\u2500336.13 MB (53.57%) -- arenas\n\u2502  \u2514\u2500\u2500\u2500\u25000.33 MB (00.05%) -- (1 omitted)\n\u251c\u2500\u2500155.22 MB (24.74%) -- dom\n\u251c\u2500\u2500111.38 MB (17.75%) -- heap-unclassified\n\u251c\u2500\u2500\u250019.54 MB (03.11%) -- js\n\nJust saving the page to disk increased mem usage:\n992.58 MB (100.0%) -- explicit\n\u251c\u2500\u2500479.52 MB (48.31%) -- heap-unclassified\n\u251c\u2500\u2500336.56 MB (33.91%) -- layout\n\u2502  \u251c\u2500\u2500336.24 MB (33.88%) -- arenas\n\u2502  \u2514\u2500\u2500\u2500\u25000.33 MB (00.03%) -- (1 omitted)\n\u251c\u2500\u2500155.22 MB (15.64%) -- dom\n\u251c\u2500\u2500\u250015.99 MB (01.61%) -- js\n\nOpera 11.50 on exactly the same saved HTML: RSS 455m", "attachment_id": null}, {"time": "2011-08-31T20:13:26Z", "attachment_id": null, "raw_text": "The size difference here is worth investigating.  Based on the numbers it looks like we just have a ton of frames or other layout objects.", "tags": [], "creator": "khuey@kylehuey.com", "author": "khuey@kylehuey.com", "count": 8, "text": "The size difference here is worth investigating.  Based on the numbers it looks like we just have a ton of frames or other layout objects.", "id": 5691811, "bug_id": 683106, "creation_time": "2011-08-31T20:13:26Z", "is_private": false}, {"tags": [], "attachment_id": null, "creation_time": "2011-08-31T21:51:40Z", "is_private": false, "creator": "bzbarsky@mit.edu", "raw_text": "So this testcase is producing 100 tables, each with one thead and one row in the thead, then a tbody and 1000 rows in the tbody, right?  And each row has 10 cells, and each wife has seven sacks and each sack has seven cats... er.\n\nIn any case, a total of 100*(1000+1)*10 = 1001000 table cells, 100100 table rows, 200 table row groups, and 100 tables.\n\nEach table cell involves an nsTableCellFrame and an nsBlockFrame, as well as a cellmap entry.  Plus all the text in the cells.\n\nIn a 32-bit build, nsBlockFrame is 108 bytes; nsTableCellFrame is 92 bytes.  Cellmap entries are 4 bytes in the presshell arena and another 4 or so in the actual cellmap array storage, so another 8 bytes per cell ignoring slop issues.  A textframe is 72 bytes.  So just those things account for about 280MB of the frame arena usage.  That's out of 330MB total reported in comment 7.\n\nIn terms of the DOM, nsHTMLTableCellElement is 68 bytes in a 32-bit build, so that's another 70MB of memory right there.  nsTextNode is another 64 bytes, so that's another 65MB.  Again, this is most of the DOM memory reported in comment 7.\n\nIn a 64-bit build, the numbers will be bigger, of course.  Almost certainly by about 2x.\n\nNote that the numbers in comment 3 are comparing 2 64-bit browsers (us and Safari) and 2 32-bit ones (Chrome and Opera).  I'd certainly expect the latter to use less memory!", "time": "2011-08-31T21:51:40Z", "id": 5692099, "bug_id": 683106, "author": "bzbarsky@mit.edu", "count": 9, "text": "So this testcase is producing 100 tables, each with one thead and one row in the thead, then a tbody and 1000 rows in the tbody, right?  And each row has 10 cells, and each wife has seven sacks and each sack has seven cats... er.\n\nIn any case, a total of 100*(1000+1)*10 = 1001000 table cells, 100100 table rows, 200 table row groups, and 100 tables.\n\nEach table cell involves an nsTableCellFrame and an nsBlockFrame, as well as a cellmap entry.  Plus all the text in the cells.\n\nIn a 32-bit build, nsBlockFrame is 108 bytes; nsTableCellFrame is 92 bytes.  Cellmap entries are 4 bytes in the presshell arena and another 4 or so in the actual cellmap array storage, so another 8 bytes per cell ignoring slop issues.  A textframe is 72 bytes.  So just those things account for about 280MB of the frame arena usage.  That's out of 330MB total reported in comment 7.\n\nIn terms of the DOM, nsHTMLTableCellElement is 68 bytes in a 32-bit build, so that's another 70MB of memory right there.  nsTextNode is another 64 bytes, so that's another 65MB.  Again, this is most of the DOM memory reported in comment 7.\n\nIn a 64-bit build, the numbers will be bigger, of course.  Almost certainly by about 2x.\n\nNote that the numbers in comment 3 are comparing 2 64-bit browsers (us and Safari) and 2 32-bit ones (Chrome and Opera).  I'd certainly expect the latter to use less memory!"}, {"text": "Is there a page somewhere the lays out the whole data structure / tree of a page?\nAll the way from the window border to the <td> ? One huge map of all the arrays and trees.\nnsTableCellFrame -> nsBlockFrame -> text?\ndom -> nsHTMLTableCellElement -> nsTextNode -> text?\n\nIs there any round up of allocations going on with all these different byte sizes?\nAnd may contribute to the heap-unclassified?\n\nSome of these byte counts sound really huge. The GPS stuff I do at work is 1/2 the amount of bytes, NEMA binary.", "count": 10, "author": "mrecho@gmail.com", "id": 5692204, "bug_id": 683106, "raw_text": "Is there a page somewhere the lays out the whole data structure / tree of a page?\nAll the way from the window border to the <td> ? One huge map of all the arrays and trees.\nnsTableCellFrame -> nsBlockFrame -> text?\ndom -> nsHTMLTableCellElement -> nsTextNode -> text?\n\nIs there any round up of allocations going on with all these different byte sizes?\nAnd may contribute to the heap-unclassified?\n\nSome of these byte counts sound really huge. The GPS stuff I do at work is 1/2 the amount of bytes, NEMA binary.", "time": "2011-08-31T22:28:38Z", "creator": "mrecho@gmail.com", "creation_time": "2011-08-31T22:28:38Z", "is_private": false, "attachment_id": null, "tags": []}, {"creator": "bzbarsky@mit.edu", "creation_time": "2011-08-31T23:58:43Z", "is_private": false, "attachment_id": null, "tags": [], "author": "bzbarsky@mit.edu", "text": "> Is there a page somewhere the lays out the whole data structure / tree of a page?\n\nThere is not.\n\nYou can see what the DOM looks like using utilities like DOM Inspector, Firebug, or even Live DOM Viewer.\n\nIn a debug build, you can dump out the frame tree and style context tree.\n\nBut that won't tell you about various auxiliary data structures, of course.\n\n> Is there any round up of allocations going on with all these different byte sizes?\n\nIt depends.  Frame allocations come out of arenas, so the only rounding is that you lose (arena size) % (frame size) bytes per arena, plus whatever part of the last arena doesn't fill up for your allocation count.  In this case, arena size is 8192 bytes, so the overhead there is no more than about 100 bytes per 8KB.\n\nFor allocations via malloc(), slop can in fact contribute to heap-unclassified; njn has been measuring that sort of thing.\n\nSpeaking of which, running DMD on this page might be enlightening.\n\n> Some of these byte counts sound really huge.\n\nThe per-object ones or the total ones?  ;)", "count": 11, "bug_id": 683106, "id": 5692472, "raw_text": "> Is there a page somewhere the lays out the whole data structure / tree of a page?\n\nThere is not.\n\nYou can see what the DOM looks like using utilities like DOM Inspector, Firebug, or even Live DOM Viewer.\n\nIn a debug build, you can dump out the frame tree and style context tree.\n\nBut that won't tell you about various auxiliary data structures, of course.\n\n> Is there any round up of allocations going on with all these different byte sizes?\n\nIt depends.  Frame allocations come out of arenas, so the only rounding is that you lose (arena size) % (frame size) bytes per arena, plus whatever part of the last arena doesn't fill up for your allocation count.  In this case, arena size is 8192 bytes, so the overhead there is no more than about 100 bytes per 8KB.\n\nFor allocations via malloc(), slop can in fact contribute to heap-unclassified; njn has been measuring that sort of thing.\n\nSpeaking of which, running DMD on this page might be enlightening.\n\n> Some of these byte counts sound really huge.\n\nThe per-object ones or the total ones?  ;)", "time": "2011-08-31T23:58:43Z"}, {"id": 5692956, "bug_id": 683106, "text": "So does nsTableCellFrame + nsBlockFrame + text go into a single arena, and once thats full, it starts to use another one? Im just curious if we use all 8K bytes before allocating the next 8K. Just not really sure what an Arena consists of. Also it sounds like there are 3 different things going on with this table data, Frames, DOM, and Cellmap. I assume there all different types of memory allocations.\n\nI was talking about nsBlockFrame being 108 bytes, just sounds like a lot of data. And is that information being duplicated in nsTableCellFrame or any other Frame?\n\nSorry, im just an ideas / questioning guy, I try to provoke thoughts about stuff ;)", "count": 12, "author": "mrecho@gmail.com", "raw_text": "So does nsTableCellFrame + nsBlockFrame + text go into a single arena, and once thats full, it starts to use another one? Im just curious if we use all 8K bytes before allocating the next 8K. Just not really sure what an Arena consists of. Also it sounds like there are 3 different things going on with this table data, Frames, DOM, and Cellmap. I assume there all different types of memory allocations.\n\nI was talking about nsBlockFrame being 108 bytes, just sounds like a lot of data. And is that information being duplicated in nsTableCellFrame or any other Frame?\n\nSorry, im just an ideas / questioning guy, I try to provoke thoughts about stuff ;)", "time": "2011-09-01T06:51:45Z", "creation_time": "2011-09-01T06:51:45Z", "is_private": false, "creator": "mrecho@gmail.com", "tags": [], "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "n.nethercote@gmail.com", "creation_time": "2011-09-01T07:15:55Z", "is_private": false, "raw_text": "As soon as an allocation request can't be satisfied from the current 8KB arena, we allocate a new one, and the remaining bytes in the first one are never used.", "time": "2011-09-01T07:15:55Z", "author": "n.nethercote@gmail.com", "text": "As soon as an allocation request can't be satisfied from the current 8KB arena, we allocate a new one, and the remaining bytes in the first one are never used.", "count": 13, "id": 5692979, "bug_id": 683106}, {"id": 5693370, "bug_id": 683106, "is_private": false, "creation_time": "2011-09-01T12:59:58Z", "creator": "bzbarsky@mit.edu", "count": 14, "text": "Each frame type comes out of a different set of arenas.  So the nsTableCellFrame, the nsBlockFrame, and the nsTextFrame all come out of different arenas.  But for each frame type we wait for the arena to be full before creating a new one.\n\n> there are 3 different things going on with this table data, Frames, DOM, and Cellmap.\n\nYes.\n\n> I assume there all different types of memory allocations.\n\nSomewhat.  DOM nodes are just allocated via operator new.  Frames are arena-allocated.  Cellmap entries are also arena-allocated, but there's an array of arrays of pointers to them, and the array buffers are just malloced.\n\n> I was talking about nsBlockFrame being 108 bytes, just sounds like a lot of data.\n\nSure.  For what it's worth, that breaks down as follows:\n\nvtable pointer: 4\nrect (top/left/width/height): 16\npointer to DOM node: 4\npointer to style context: 4\npointer to parent frame: 4\npointer to previous sibling: 4\npointer to next sibling: 4\nstate bits: 8\noverflow information: 4\npointer to previous continuation: 4\npointer to next continuation: 4\nfirst child: 4\nlast child: 4\ncached minimum width: 4\ncached preferred width: 4\nfirst line box pointer: 4\nlast line box pointer: 4\nfirst floated child: 4\nlast floated child: 4\npointer to bullet: 4\npointer to first abs pos child: 4\npointer to last abs pos child: 4\npointer to name of abs pos child list: 4\n\nThese last 12 bytes are likely to go away once ehsan refactors how we do absolutely positioned kids.\n\n> And is that information being duplicated in nsTableCellFrame or any other Frame?\n\nNo.", "author": "bzbarsky@mit.edu", "tags": [], "time": "2011-09-01T12:59:58Z", "raw_text": "Each frame type comes out of a different set of arenas.  So the nsTableCellFrame, the nsBlockFrame, and the nsTextFrame all come out of different arenas.  But for each frame type we wait for the arena to be full before creating a new one.\n\n> there are 3 different things going on with this table data, Frames, DOM, and Cellmap.\n\nYes.\n\n> I assume there all different types of memory allocations.\n\nSomewhat.  DOM nodes are just allocated via operator new.  Frames are arena-allocated.  Cellmap entries are also arena-allocated, but there's an array of arrays of pointers to them, and the array buffers are just malloced.\n\n> I was talking about nsBlockFrame being 108 bytes, just sounds like a lot of data.\n\nSure.  For what it's worth, that breaks down as follows:\n\nvtable pointer: 4\nrect (top/left/width/height): 16\npointer to DOM node: 4\npointer to style context: 4\npointer to parent frame: 4\npointer to previous sibling: 4\npointer to next sibling: 4\nstate bits: 8\noverflow information: 4\npointer to previous continuation: 4\npointer to next continuation: 4\nfirst child: 4\nlast child: 4\ncached minimum width: 4\ncached preferred width: 4\nfirst line box pointer: 4\nlast line box pointer: 4\nfirst floated child: 4\nlast floated child: 4\npointer to bullet: 4\npointer to first abs pos child: 4\npointer to last abs pos child: 4\npointer to name of abs pos child list: 4\n\nThese last 12 bytes are likely to go away once ehsan refactors how we do absolutely positioned kids.\n\n> And is that information being duplicated in nsTableCellFrame or any other Frame?\n\nNo.", "attachment_id": null}, {"bug_id": 683106, "id": 5695403, "creation_time": "2011-09-02T02:29:54Z", "is_private": false, "creator": "mrecho@gmail.com", "author": "mrecho@gmail.com", "count": 15, "text": "1,398,517,112 B (100.0%) -- explicit\n\u251c\u2500\u2500\u2500\u2500538,154,792 B (38.48%) -- layout\n\u2502    \u251c\u2500\u2500536,961,752 B (38.40%) -- shell(tables.php.html)\n\u2502    \u2502  \u251c\u2500\u2500536,887,944 B (38.39%) -- arenas\n\u2502    \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u250073,808 B (00.01%) -- styledata\n\u251c\u2500\u2500\u2500\u2500526,970,479 B (37.68%) -- heap-unclassified\n\u251c\u2500\u2500\u2500\u2500301,533,429 B (21.56%) -- dom\n\u251c\u2500\u2500\u2500\u2500\u250023,133,594 B (01.65%) -- js\n\nd772dfb96ba1 safe-mode from the cli\nIs there a way to force 32bit mode from the cli?", "tags": [], "time": "2011-09-02T02:29:54Z", "attachment_id": null, "raw_text": "1,398,517,112 B (100.0%) -- explicit\n\u251c\u2500\u2500\u2500\u2500538,154,792 B (38.48%) -- layout\n\u2502    \u251c\u2500\u2500536,961,752 B (38.40%) -- shell(tables.php.html)\n\u2502    \u2502  \u251c\u2500\u2500536,887,944 B (38.39%) -- arenas\n\u2502    \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u250073,808 B (00.01%) -- styledata\n\u251c\u2500\u2500\u2500\u2500526,970,479 B (37.68%) -- heap-unclassified\n\u251c\u2500\u2500\u2500\u2500301,533,429 B (21.56%) -- dom\n\u251c\u2500\u2500\u2500\u2500\u250023,133,594 B (01.65%) -- js\n\nd772dfb96ba1 safe-mode from the cli\nIs there a way to force 32bit mode from the cli?"}, {"tags": [], "attachment_id": null, "raw_text": "arch -i386 /path/to/firefox", "time": "2011-09-02T02:58:13Z", "creation_time": "2011-09-02T02:58:13Z", "is_private": false, "id": 5695438, "bug_id": 683106, "author": "bzbarsky@mit.edu", "count": 16, "text": "arch -i386 /path/to/firefox", "creator": "bzbarsky@mit.edu"}, {"time": "2011-09-02T07:25:21Z", "raw_text": "32Bit mode, usage is smaller, but not 1/2.\n\n799,864,920 B (100.0%) -- explicit\n\u251c\u2500\u2500352,720,512 B (44.10%) -- layout\n\u2502  \u251c\u2500\u2500351,997,572 B (44.01%) -- shell(file:///Users/mrecho/Desktop/tables.php.html)\n\u2502  \u2502  \u251c\u2500\u2500351,958,392 B (44.00%) -- arenas\n\u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u250039,180 B (00.00%) -- styledata\n\u251c\u2500\u2500259,427,074 B (32.43%) -- heap-unclassified\n\u251c\u2500\u2500162,703,301 B (20.34%) -- dom\n\u251c\u2500\u2500\u250017,363,159 B (02.17%) -- js", "attachment_id": null, "tags": [], "creator": "mrecho@gmail.com", "text": "32Bit mode, usage is smaller, but not 1/2.\n\n799,864,920 B (100.0%) -- explicit\n\u251c\u2500\u2500352,720,512 B (44.10%) -- layout\n\u2502  \u251c\u2500\u2500351,997,572 B (44.01%) -- shell(file:///Users/mrecho/Desktop/tables.php.html)\n\u2502  \u2502  \u251c\u2500\u2500351,958,392 B (44.00%) -- arenas\n\u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u250039,180 B (00.00%) -- styledata\n\u251c\u2500\u2500259,427,074 B (32.43%) -- heap-unclassified\n\u251c\u2500\u2500162,703,301 B (20.34%) -- dom\n\u251c\u2500\u2500\u250017,363,159 B (02.17%) -- js", "count": 17, "author": "mrecho@gmail.com", "id": 5695699, "bug_id": 683106, "creation_time": "2011-09-02T07:25:21Z", "is_private": false}, {"creation_time": "2011-09-10T04:55:03Z", "is_private": false, "creator": "mrecho@gmail.com", "tags": [], "attachment_id": null, "bug_id": 683106, "id": 5712255, "author": "mrecho@gmail.com", "text": "OSX x86_64 b57d50c6c046\nStatus update, after hitting minimize a few times...\n\n1,104,878,368 B (100.0%) -- explicit\n\u251c\u2500\u2500\u2500\u2500538,206,224 B (48.71%) -- layout\n\u2502    \u251c\u2500\u2500536,960,856 B (48.60%) -- shell(tables.php.html)\n\u2502    \u2502  \u251c\u2500\u2500536,886,952 B (48.59%) -- arenas\n\u2502    \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u250073,904 B (00.01%) -- styledata\n\n\u251c\u2500\u2500\u2500\u2500301,532,845 B (27.29%) -- dom\n\u251c\u2500\u2500\u2500\u2500233,315,040 B (21.12%) -- heap-unclassified\n\u251c\u2500\u2500\u2500\u2500\u250023,209,024 B (02.10%) -- js\n\n\u2502     \u251c\u2500\u2500\u2500\u2500\u2500\u250088,608 B (00.01%) -- compartment(tables.php.html)\n\u2502     \u2502      \u251c\u2500\u250077,824 B (00.01%) -- gc-heap\n\u2502     \u2502      \u2502  \u251c\u2500\u250034,192 B (00.00%) -- arena-unused\n\u2502     \u2502      \u2502  \u251c\u2500\u250022,720 B (00.00%) -- objects\n\u2502     \u2502      \u2502  \u251c\u2500\u250017,664 B (00.00%) -- shapes\n\u2502     \u2502      \u2502  \u251c\u2500\u2500\u25001,184 B (00.00%) -- arena-padding\n\u2502     \u2502      \u2502  \u251c\u2500\u2500\u25001,024 B (00.00%) -- type-objects\n\u2502     \u2502      \u2502  \u251c\u2500\u2500\u2500\u2500\u2500608 B (00.00%) -- arena-headers\n\u2502     \u2502      \u2502  \u2514\u2500\u2500\u2500\u2500\u2500432 B (00.00%) -- scripts\n\u2502     \u2502      \u251c\u2500\u2500\u25006,144 B (00.00%) -- object-slots\n\u2502     \u2502      \u251c\u2500\u2500\u25001,472 B (00.00%) -- property-tables\n\u2502     \u2502      \u251c\u2500\u2500\u25001,152 B (00.00%) -- shape-kids\n\u2502     \u2502      \u251c\u2500\u2500\u25001,024 B (00.00%) -- type-inference\n\u2502     \u2502      \u2502   \u2514\u2500\u25001,024 B (00.00%) -- object-main\n\u2502     \u2502      \u251c\u2500\u2500\u2500\u2500\u2500960 B (00.00%) -- object-empty-shapes\n\u2502     \u2502      \u2514\u2500\u2500\u2500\u2500\u2500\u250032 B (00.00%) -- analysis-temporary", "count": 18, "time": "2011-09-10T04:55:03Z", "raw_text": "OSX x86_64 b57d50c6c046\nStatus update, after hitting minimize a few times...\n\n1,104,878,368 B (100.0%) -- explicit\n\u251c\u2500\u2500\u2500\u2500538,206,224 B (48.71%) -- layout\n\u2502    \u251c\u2500\u2500536,960,856 B (48.60%) -- shell(tables.php.html)\n\u2502    \u2502  \u251c\u2500\u2500536,886,952 B (48.59%) -- arenas\n\u2502    \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u250073,904 B (00.01%) -- styledata\n\n\u251c\u2500\u2500\u2500\u2500301,532,845 B (27.29%) -- dom\n\u251c\u2500\u2500\u2500\u2500233,315,040 B (21.12%) -- heap-unclassified\n\u251c\u2500\u2500\u2500\u2500\u250023,209,024 B (02.10%) -- js\n\n\u2502     \u251c\u2500\u2500\u2500\u2500\u2500\u250088,608 B (00.01%) -- compartment(tables.php.html)\n\u2502     \u2502      \u251c\u2500\u250077,824 B (00.01%) -- gc-heap\n\u2502     \u2502      \u2502  \u251c\u2500\u250034,192 B (00.00%) -- arena-unused\n\u2502     \u2502      \u2502  \u251c\u2500\u250022,720 B (00.00%) -- objects\n\u2502     \u2502      \u2502  \u251c\u2500\u250017,664 B (00.00%) -- shapes\n\u2502     \u2502      \u2502  \u251c\u2500\u2500\u25001,184 B (00.00%) -- arena-padding\n\u2502     \u2502      \u2502  \u251c\u2500\u2500\u25001,024 B (00.00%) -- type-objects\n\u2502     \u2502      \u2502  \u251c\u2500\u2500\u2500\u2500\u2500608 B (00.00%) -- arena-headers\n\u2502     \u2502      \u2502  \u2514\u2500\u2500\u2500\u2500\u2500432 B (00.00%) -- scripts\n\u2502     \u2502      \u251c\u2500\u2500\u25006,144 B (00.00%) -- object-slots\n\u2502     \u2502      \u251c\u2500\u2500\u25001,472 B (00.00%) -- property-tables\n\u2502     \u2502      \u251c\u2500\u2500\u25001,152 B (00.00%) -- shape-kids\n\u2502     \u2502      \u251c\u2500\u2500\u25001,024 B (00.00%) -- type-inference\n\u2502     \u2502      \u2502   \u2514\u2500\u25001,024 B (00.00%) -- object-main\n\u2502     \u2502      \u251c\u2500\u2500\u2500\u2500\u2500960 B (00.00%) -- object-empty-shapes\n\u2502     \u2502      \u2514\u2500\u2500\u2500\u2500\u2500\u250032 B (00.00%) -- analysis-temporary"}, {"time": "2011-11-01T09:19:36Z", "raw_text": "OSX 10.7.2 x86_64 rev/04b4ea333800\n\n21,939,504 B (100.0%) -- explicit\n\u251c\u2500\u2500522,557,384 B (2381.81%) -- layout\n\u2502  \u251c\u2500\u2500520,972,208 B (2374.59%) -- shell(tables.php.html)\n\n\u251c\u2500\u2500334,171,529 B (1523.15%) -- dom\n\u251c\u2500\u250024,031,584 B (109.54%) -- js\n\n\u2514\u2500\u2500-869,789,110 B (-3964.49%) -- heap-unclassified\n\n      235,280 B -- gfx-surface-image\n            0 B -- heap-allocated\n        4,096 B -- heap-committed\n        100.00% -- heap-committed-unallocated-fraction\n            0 B -- heap-dirty\n    1,048,576 B -- heap-unallocated\n              2 -- js-compartments-system\n              2 -- js-compartments-user\n   11,534,336 B -- js-gc-heap\n      696,944 B -- js-gc-heap-arena-unused\n            0 B -- js-gc-heap-chunk-clean-unused\n    3,231,744 B -- js-gc-heap-chunk-dirty-unused\n         34.06% -- js-gc-heap-unused-fraction\n       34,880 B -- js-total-analysis-temporary\n       65,536 B -- js-total-mjit\n    3,347,896 B -- js-total-objects\n    2,162,080 B -- js-total-scripts\n    2,690,240 B -- js-total-shapes\n    1,406,912 B -- js-total-strings\n      174,944 B -- js-total-type-inference\n             17 -- page-faults-hard\n        556,252 -- page-faults-soft\n1,533,952,000 B -- resident\n5,043,568,640 B -- vsize", "count": 19, "text": "OSX 10.7.2 x86_64 rev/04b4ea333800\n\n21,939,504 B (100.0%) -- explicit\n\u251c\u2500\u2500522,557,384 B (2381.81%) -- layout\n\u2502  \u251c\u2500\u2500520,972,208 B (2374.59%) -- shell(tables.php.html)\n\n\u251c\u2500\u2500334,171,529 B (1523.15%) -- dom\n\u251c\u2500\u250024,031,584 B (109.54%) -- js\n\n\u2514\u2500\u2500-869,789,110 B (-3964.49%) -- heap-unclassified\n\n      235,280 B -- gfx-surface-image\n            0 B -- heap-allocated\n        4,096 B -- heap-committed\n        100.00% -- heap-committed-unallocated-fraction\n            0 B -- heap-dirty\n    1,048,576 B -- heap-unallocated\n              2 -- js-compartments-system\n              2 -- js-compartments-user\n   11,534,336 B -- js-gc-heap\n      696,944 B -- js-gc-heap-arena-unused\n            0 B -- js-gc-heap-chunk-clean-unused\n    3,231,744 B -- js-gc-heap-chunk-dirty-unused\n         34.06% -- js-gc-heap-unused-fraction\n       34,880 B -- js-total-analysis-temporary\n       65,536 B -- js-total-mjit\n    3,347,896 B -- js-total-objects\n    2,162,080 B -- js-total-scripts\n    2,690,240 B -- js-total-shapes\n    1,406,912 B -- js-total-strings\n      174,944 B -- js-total-type-inference\n             17 -- page-faults-hard\n        556,252 -- page-faults-soft\n1,533,952,000 B -- resident\n5,043,568,640 B -- vsize", "author": "mrecho@gmail.com", "bug_id": 683106, "id": 5817409, "attachment_id": null, "tags": [], "creator": "mrecho@gmail.com", "creation_time": "2011-11-01T09:19:36Z", "is_private": false}, {"count": 20, "text": "That \"explicit\" number is completely bogus (and hence so is heap-unclassified).  Please file a separate bug on that?", "author": "bzbarsky@mit.edu", "bug_id": 683106, "id": 5818216, "time": "2011-11-01T16:47:51Z", "raw_text": "That \"explicit\" number is completely bogus (and hence so is heap-unclassified).  Please file a separate bug on that?", "creator": "bzbarsky@mit.edu", "is_private": false, "creation_time": "2011-11-01T16:47:51Z", "attachment_id": null, "tags": []}, {"raw_text": "Ive noticed that its been a negative for awhile now. I would have assumed that someone would have already filed a bug.", "time": "2011-11-01T19:29:00Z", "text": "Ive noticed that its been a negative for awhile now. I would have assumed that someone would have already filed a bug.", "count": 21, "author": "mrecho@gmail.com", "bug_id": 683106, "id": 5818740, "attachment_id": null, "tags": [], "creator": "mrecho@gmail.com", "is_private": false, "creation_time": "2011-11-01T19:29:00Z"}, {"creator": "bzbarsky@mit.edu", "is_private": false, "creation_time": "2011-11-01T19:30:48Z", "attachment_id": null, "tags": [], "count": 22, "text": "There's been no bug filed that I've seen (and I watch all incoming core bugs).\n\nChances are, the issue is specific to OSX 10.7 if not more narrowly than that...  Please do file a bug, ok?", "author": "bzbarsky@mit.edu", "id": 5818748, "bug_id": 683106, "raw_text": "There's been no bug filed that I've seen (and I watch all incoming core bugs).\n\nChances are, the issue is specific to OSX 10.7 if not more narrowly than that...  Please do file a bug, ok?", "time": "2011-11-01T19:30:48Z"}, {"raw_text": "I filed bug 698953 for the bogus about:memory values.", "time": "2011-11-02T00:26:29Z", "author": "n.nethercote@gmail.com", "count": 23, "text": "I filed bug 698953 for the bogus about:memory values.", "id": 5819715, "bug_id": 683106, "attachment_id": null, "tags": [], "creator": "n.nethercote@gmail.com", "is_private": false, "creation_time": "2011-11-02T00:26:29Z"}, {"tags": [], "raw_text": "rev/c2102c45c8da\n\n1,071.04 MB (100.0%) -- explicit\n\u251c\u2500\u2500\u2500\u2500498.11 MB (46.51%) -- layout\n\u2502    \u251c\u2500\u2500496.85 MB (46.39%) -- shell(file:///tables.php.html)\n\u2502    \u2502  \u251c\u2500\u2500496.72 MB (46.38%) -- arenas\n\u2502    \u2502  \u2514\u2500\u2500\u2500\u25000.13 MB (00.01%) -- (1 omitted)\n\u2502    \u2514\u2500\u2500\u2500\u25001.27 MB (00.12%) -- (3 omitted)\n\u251c\u2500\u2500\u2500\u2500318.69 MB (29.76%) -- dom\n\u251c\u2500\u2500\u2500\u2500225.89 MB (21.09%) -- heap-unclassified\n\u251c\u2500\u2500\u2500\u2500\u250021.79 MB (02.03%) -- js\n\n    0.22 MB -- gfx-surface-image\n1,052.49 MB -- heap-allocated\n1,073.70 MB -- heap-committed\n      1.97% -- heap-committed-fragmentation\n    3.14 MB -- heap-dirty\n  157.51 MB -- heap-unallocated\n          2 -- js-compartments-system\n          2 -- js-compartments-user\n    9.00 MB -- js-gc-heap\n    1.38 MB -- js-gc-heap-arena-unused\n    0.00 MB -- js-gc-heap-chunk-clean-unused\n    0.37 MB -- js-gc-heap-chunk-dirty-unused\n    2.07 MB -- js-gc-heap-decommitted\n     42.44% -- js-gc-heap-unused-fraction\n    0.13 MB -- js-total-analysis-temporary\n    0.00 MB -- js-total-mjit\n    1.97 MB -- js-total-objects\n    2.29 MB -- js-total-scripts\n    2.53 MB -- js-total-shapes\n    1.35 MB -- js-total-strings\n    0.07 MB -- js-total-type-inference\n         10 -- page-faults-hard\n    588,913 -- page-faults-soft\n1,145.60 MB -- resident\n4,593.08 MB -- vsize", "attachment_id": null, "time": "2011-12-04T15:08:23Z", "is_private": false, "creation_time": "2011-12-04T15:08:23Z", "id": 5891333, "bug_id": 683106, "text": "rev/c2102c45c8da\n\n1,071.04 MB (100.0%) -- explicit\n\u251c\u2500\u2500\u2500\u2500498.11 MB (46.51%) -- layout\n\u2502    \u251c\u2500\u2500496.85 MB (46.39%) -- shell(file:///tables.php.html)\n\u2502    \u2502  \u251c\u2500\u2500496.72 MB (46.38%) -- arenas\n\u2502    \u2502  \u2514\u2500\u2500\u2500\u25000.13 MB (00.01%) -- (1 omitted)\n\u2502    \u2514\u2500\u2500\u2500\u25001.27 MB (00.12%) -- (3 omitted)\n\u251c\u2500\u2500\u2500\u2500318.69 MB (29.76%) -- dom\n\u251c\u2500\u2500\u2500\u2500225.89 MB (21.09%) -- heap-unclassified\n\u251c\u2500\u2500\u2500\u2500\u250021.79 MB (02.03%) -- js\n\n    0.22 MB -- gfx-surface-image\n1,052.49 MB -- heap-allocated\n1,073.70 MB -- heap-committed\n      1.97% -- heap-committed-fragmentation\n    3.14 MB -- heap-dirty\n  157.51 MB -- heap-unallocated\n          2 -- js-compartments-system\n          2 -- js-compartments-user\n    9.00 MB -- js-gc-heap\n    1.38 MB -- js-gc-heap-arena-unused\n    0.00 MB -- js-gc-heap-chunk-clean-unused\n    0.37 MB -- js-gc-heap-chunk-dirty-unused\n    2.07 MB -- js-gc-heap-decommitted\n     42.44% -- js-gc-heap-unused-fraction\n    0.13 MB -- js-total-analysis-temporary\n    0.00 MB -- js-total-mjit\n    1.97 MB -- js-total-objects\n    2.29 MB -- js-total-scripts\n    2.53 MB -- js-total-shapes\n    1.35 MB -- js-total-strings\n    0.07 MB -- js-total-type-inference\n         10 -- page-faults-hard\n    588,913 -- page-faults-soft\n1,145.60 MB -- resident\n4,593.08 MB -- vsize", "count": 24, "author": "mrecho@gmail.com", "creator": "mrecho@gmail.com"}, {"raw_text": "Just wanted to see where its at now a few years later.\nOSX 10.10.1\n\nBuild 08e3c773c747 33.1 \n\nStill building with MacOSX10.6.sdk ?\n\n\n1,170.57 MB (100.0%) -- explicit\n\u251c\u2500\u2500\u2500\u2500962.74 MB (82.25%) -- window-objects\n\u2502    \u251c\u2500\u2500950.19 MB (81.17%) -- top(file:///Users/mrecho/Desktop/table_hell.html, id=9)\n\u2502    \u2502  \u251c\u2500\u2500950.11 MB (81.17%) -- active/window(file:///Users/mrecho/Desktop/table_hell.html)\n\u2502    \u2502  \u2502  \u251c\u2500\u2500572.61 MB (48.92%) -- layout\n\u2502    \u2502  \u2502  \u2502  \u251c\u2500\u2500418.75 MB (35.77%) -- frames\n\u2502    \u2502  \u2502  \u2502  \u2502  \u251c\u2500\u2500145.10 MB (12.40%) \u2500\u2500 nsBlockFrame\n\u2502    \u2502  \u2502  \u2502  \u2502  \u251c\u2500\u2500137.47 MB (11.74%) \u2500\u2500 nsTableCellFrame\n\u2502    \u2502  \u2502  \u2502  \u2502  \u251c\u2500\u2500106.93 MB (09.13%) \u2500\u2500 nsTextFrame\n\u2502    \u2502  \u2502  \u2502  \u2502  \u251c\u2500\u2500\u250029.02 MB (02.48%) \u2500\u2500 nsTableRowFrame\n\u2502    \u2502  \u2502  \u2502  \u2502  \u2514\u2500\u2500\u2500\u25000.23 MB (00.02%) ++ (6 tiny)\n\u2502    \u2502  \u2502  \u2502  \u251c\u2500\u2500\u250076.39 MB (06.53%) \u2500\u2500 line-boxes\n\u2502    \u2502  \u2502  \u2502  \u251c\u2500\u2500\u250064.00 MB (05.47%) \u2500\u2500 pres-contexts\n\u2502    \u2502  \u2502  \u2502  \u251c\u2500\u2500\u250013.33 MB (01.14%) \u2500\u2500 pres-shell\n\u2502    \u2502  \u2502  \u2502  \u2514\u2500\u2500\u2500\u25000.14 MB (00.01%) ++ (3 tiny)\n\u2502    \u2502  \u2502  \u251c\u2500\u2500377.40 MB (32.24%) -- dom\n\u2502    \u2502  \u2502  \u2502  \u251c\u2500\u2500239.92 MB (20.50%) \u2500\u2500 element-nodes\n\u2502    \u2502  \u2502  \u2502  \u251c\u2500\u2500137.46 MB (11.74%) \u2500\u2500 text-nodes\n\u2502    \u2502  \u2502  \u2502  \u2514\u2500\u2500\u2500\u25000.01 MB (00.00%) ++ (2 tiny)\n\u2502    \u2502  \u2502  \u2514\u2500\u2500\u2500\u25000.11 MB (00.01%) ++ (3 tiny)\n\u2502    \u2502  \u2514\u2500\u2500\u2500\u25000.07 MB (00.01%) ++ js-zone(0x118c98800)\n\u2502    \u2514\u2500\u2500\u250012.55 MB (01.07%) ++ (6 tiny)\n\u251c\u2500\u2500\u2500\u2500130.31 MB (11.13%) \u2500\u2500 heap-unclassified\n\u251c\u2500\u2500\u2500\u2500\u250031.15 MB (02.66%) -- js-non-window\n\u2502     \u251c\u2500\u250022.42 MB (01.92%) -- zones\n\u2502     \u2502  \u251c\u2500\u250020.52 MB (01.75%) ++ zone(0x10038e800)\n\u2502     \u2502  \u2514\u2500\u2500\u25001.90 MB (00.16%) ++ (2 tiny)\n\u2502     \u2514\u2500\u2500\u25008.73 MB (00.75%) ++ (2 tiny)\n\u251c\u2500\u2500\u2500\u2500\u250027.82 MB (02.38%) -- heap-overhead\n\u2502     \u251c\u2500\u250018.01 MB (01.54%) \u2500\u2500 bookkeeping\n\u2502     \u2514\u2500\u2500\u25009.80 MB (00.84%) ++ (3 tiny)\n\u2514\u2500\u2500\u2500\u2500\u250018.56 MB (01.59%) ++ (21 tiny)", "time": "2014-11-25T00:14:52Z", "bug_id": 683106, "id": 9632308, "author": "mrecho@gmail.com", "text": "Created attachment 8528026\nJust an update\n\nJust wanted to see where its at now a few years later.\nOSX 10.10.1\n\nBuild 08e3c773c747 33.1 \n\nStill building with MacOSX10.6.sdk ?\n\n\n1,170.57 MB (100.0%) -- explicit\n\u251c\u2500\u2500\u2500\u2500962.74 MB (82.25%) -- window-objects\n\u2502    \u251c\u2500\u2500950.19 MB (81.17%) -- top(file:///Users/mrecho/Desktop/table_hell.html, id=9)\n\u2502    \u2502  \u251c\u2500\u2500950.11 MB (81.17%) -- active/window(file:///Users/mrecho/Desktop/table_hell.html)\n\u2502    \u2502  \u2502  \u251c\u2500\u2500572.61 MB (48.92%) -- layout\n\u2502    \u2502  \u2502  \u2502  \u251c\u2500\u2500418.75 MB (35.77%) -- frames\n\u2502    \u2502  \u2502  \u2502  \u2502  \u251c\u2500\u2500145.10 MB (12.40%) \u2500\u2500 nsBlockFrame\n\u2502    \u2502  \u2502  \u2502  \u2502  \u251c\u2500\u2500137.47 MB (11.74%) \u2500\u2500 nsTableCellFrame\n\u2502    \u2502  \u2502  \u2502  \u2502  \u251c\u2500\u2500106.93 MB (09.13%) \u2500\u2500 nsTextFrame\n\u2502    \u2502  \u2502  \u2502  \u2502  \u251c\u2500\u2500\u250029.02 MB (02.48%) \u2500\u2500 nsTableRowFrame\n\u2502    \u2502  \u2502  \u2502  \u2502  \u2514\u2500\u2500\u2500\u25000.23 MB (00.02%) ++ (6 tiny)\n\u2502    \u2502  \u2502  \u2502  \u251c\u2500\u2500\u250076.39 MB (06.53%) \u2500\u2500 line-boxes\n\u2502    \u2502  \u2502  \u2502  \u251c\u2500\u2500\u250064.00 MB (05.47%) \u2500\u2500 pres-contexts\n\u2502    \u2502  \u2502  \u2502  \u251c\u2500\u2500\u250013.33 MB (01.14%) \u2500\u2500 pres-shell\n\u2502    \u2502  \u2502  \u2502  \u2514\u2500\u2500\u2500\u25000.14 MB (00.01%) ++ (3 tiny)\n\u2502    \u2502  \u2502  \u251c\u2500\u2500377.40 MB (32.24%) -- dom\n\u2502    \u2502  \u2502  \u2502  \u251c\u2500\u2500239.92 MB (20.50%) \u2500\u2500 element-nodes\n\u2502    \u2502  \u2502  \u2502  \u251c\u2500\u2500137.46 MB (11.74%) \u2500\u2500 text-nodes\n\u2502    \u2502  \u2502  \u2502  \u2514\u2500\u2500\u2500\u25000.01 MB (00.00%) ++ (2 tiny)\n\u2502    \u2502  \u2502  \u2514\u2500\u2500\u2500\u25000.11 MB (00.01%) ++ (3 tiny)\n\u2502    \u2502  \u2514\u2500\u2500\u2500\u25000.07 MB (00.01%) ++ js-zone(0x118c98800)\n\u2502    \u2514\u2500\u2500\u250012.55 MB (01.07%) ++ (6 tiny)\n\u251c\u2500\u2500\u2500\u2500130.31 MB (11.13%) \u2500\u2500 heap-unclassified\n\u251c\u2500\u2500\u2500\u2500\u250031.15 MB (02.66%) -- js-non-window\n\u2502     \u251c\u2500\u250022.42 MB (01.92%) -- zones\n\u2502     \u2502  \u251c\u2500\u250020.52 MB (01.75%) ++ zone(0x10038e800)\n\u2502     \u2502  \u2514\u2500\u2500\u25001.90 MB (00.16%) ++ (2 tiny)\n\u2502     \u2514\u2500\u2500\u25008.73 MB (00.75%) ++ (2 tiny)\n\u251c\u2500\u2500\u2500\u2500\u250027.82 MB (02.38%) -- heap-overhead\n\u2502     \u251c\u2500\u250018.01 MB (01.54%) \u2500\u2500 bookkeeping\n\u2502     \u2514\u2500\u2500\u25009.80 MB (00.84%) ++ (3 tiny)\n\u2514\u2500\u2500\u2500\u2500\u250018.56 MB (01.59%) ++ (21 tiny)", "count": 25, "tags": [], "attachment_id": 8528026, "creation_time": "2014-11-25T00:14:52Z", "is_private": false, "creator": "mrecho@gmail.com"}]}}, "comments": {}}