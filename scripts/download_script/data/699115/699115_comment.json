{"comments": {}, "bugs": {"699115": {"comments": [{"creator": "taras.mozilla@glek.net", "is_private": false, "count": 0, "author": "taras.mozilla@glek.net", "creation_time": "2011-11-02T16:32:47Z", "time": "2011-11-02T16:32:47Z", "bug_id": 699115, "tags": [], "text": "We prepare a lot of sql statements. This has a memory cost. It is not clear that there is a cpu speed up from keeping around statements indefinitely. We could look into expiring sql statements and preparing them ondemand.", "attachment_id": null, "raw_text": "We prepare a lot of sql statements. This has a memory cost. It is not clear that there is a cpu speed up from keeping around statements indefinitely. We could look into expiring sql statements and preparing them ondemand.", "id": 5821040}, {"bug_id": 699115, "count": 1, "time": "2011-11-02T16:47:26Z", "tags": [], "text": "I think :P2 is the right priority here, but taking it off so that we'll discuss this bug at the next MemShrink meeting.", "author": "justin.lebar+bug@gmail.com", "creation_time": "2011-11-02T16:47:26Z", "creator": "justin.lebar+bug@gmail.com", "is_private": false, "id": 5821082, "raw_text": "I think :P2 is the right priority here, but taking it off so that we'll discuss this bug at the next MemShrink meeting.", "attachment_id": null}, {"id": 5821196, "attachment_id": null, "raw_text": "Is this the 'stmt-used' reporter?  We might already have this covered...", "author": "justin.lebar+bug@gmail.com", "creation_time": "2011-11-02T17:26:29Z", "time": "2011-11-02T17:26:29Z", "tags": [], "text": "Is this the 'stmt-used' reporter?  We might already have this covered...", "creator": "justin.lebar+bug@gmail.com", "is_private": false, "bug_id": 699115, "count": 2}, {"creation_time": "2011-11-02T17:30:59Z", "author": "justin.lebar+bug@gmail.com", "text": "Total stmt-used is about 700kb for me.  Not sure this is worth worrying about too much.", "bug_id": 699115, "time": "2011-11-02T17:30:59Z", "tags": [], "is_private": false, "creator": "justin.lebar+bug@gmail.com", "count": 3, "id": 5821214, "attachment_id": null, "raw_text": "Total stmt-used is about 700kb for me.  Not sure this is worth worrying about too much."}, {"count": 4, "creator": "mak@mozilla.com", "is_private": false, "time": "2011-11-02T17:32:58Z", "bug_id": 699115, "tags": [], "text": "I think the perf gain of avoiding repreparation is far larger than any space they may take, and also afaik preparing a statement requires holding a mutex, that may reduce concurrency.", "author": "mak@mozilla.com", "creation_time": "2011-11-02T17:32:58Z", "raw_text": "I think the perf gain of avoiding repreparation is far larger than any space they may take, and also afaik preparing a statement requires holding a mutex, that may reduce concurrency.", "attachment_id": null, "id": 5821222}, {"bug_id": 699115, "count": 5, "id": 5821240, "attachment_id": null, "raw_text": "it's 0.5mb here. I think we should atleast profile how much usage these get. I'm not convinced that 0.7mb of memory is worth throwing away on preparing statements that either\na) are not used\nb) do not perform measurably better", "author": "taras.mozilla@glek.net", "creation_time": "2011-11-02T17:37:04Z", "tags": [], "time": "2011-11-02T17:37:04Z", "text": "it's 0.5mb here. I think we should atleast profile how much usage these get. I'm not convinced that 0.7mb of memory is worth throwing away on preparing statements that either\na) are not used\nb) do not perform measurably better", "creator": "taras.mozilla@glek.net", "is_private": false}, {"creation_time": "2011-11-02T17:41:42Z", "author": "justin.lebar+bug@gmail.com", "text": "(In reply to Marco Bonardo [:mak] from comment #4)\n> I think the perf gain of avoiding repreparation is far larger than any space\n> they may take, and also afaik preparing a statement requires holding a\n> mutex, that may reduce concurrency.\n\nYou wouldn't need to get rid of all prepared statements.  I'd guess that Taras is right; 20% of them get 80% of the use, so you could get away with lazily preparing the others and throwing them away after a time.\n\nBut this is a separate bug, no?  Honestly, recovering .5mb is not the lowest-hanging fruit we have at the moment.  I'd much rather make sqlite's caches leaner; they can take up 30mb or more.", "time": "2011-11-02T17:41:42Z", "bug_id": 699115, "tags": [], "is_private": false, "creator": "justin.lebar+bug@gmail.com", "count": 6, "id": 5821253, "attachment_id": null, "raw_text": "(In reply to Marco Bonardo [:mak] from comment #4)\n> I think the perf gain of avoiding repreparation is far larger than any space\n> they may take, and also afaik preparing a statement requires holding a\n> mutex, that may reduce concurrency.\n\nYou wouldn't need to get rid of all prepared statements.  I'd guess that Taras is right; 20% of them get 80% of the use, so you could get away with lazily preparing the others and throwing them away after a time.\n\nBut this is a separate bug, no?  Honestly, recovering .5mb is not the lowest-hanging fruit we have at the moment.  I'd much rather make sqlite's caches leaner; they can take up 30mb or more."}, {"is_private": false, "creator": "taras.mozilla@glek.net", "count": 7, "creation_time": "2011-11-02T17:47:31Z", "author": "taras.mozilla@glek.net", "text": "(In reply to Justin Lebar [:jlebar] from comment #6)\n> You wouldn't need to get rid of all prepared statements.  I'd guess that\n> Taras is right; 20% of them get 80% of the use, so you could get away with\n> lazily preparing the others and throwing them away after a time.\n> \n> But this is a separate bug, no?  Honestly, recovering .5mb is not the\n> lowest-hanging fruit we have at the moment.  I'd much rather make sqlite's\n> caches leaner; they can take up 30mb or more.\n\nI think figuring out the right prepare tradeoff is exactly what this bug is about.\n\nI wasn't suggesting that we prioritize this over any other sqlite-related issues. I filed bug 681525 re sqlite cache, but it wasn't well received. Do you have an alternative plan?", "time": "2011-11-02T17:47:31Z", "bug_id": 699115, "tags": [], "attachment_id": null, "raw_text": "(In reply to Justin Lebar [:jlebar] from comment #6)\n> You wouldn't need to get rid of all prepared statements.  I'd guess that\n> Taras is right; 20% of them get 80% of the use, so you could get away with\n> lazily preparing the others and throwing them away after a time.\n> \n> But this is a separate bug, no?  Honestly, recovering .5mb is not the\n> lowest-hanging fruit we have at the moment.  I'd much rather make sqlite's\n> caches leaner; they can take up 30mb or more.\n\nI think figuring out the right prepare tradeoff is exactly what this bug is about.\n\nI wasn't suggesting that we prioritize this over any other sqlite-related issues. I filed bug 681525 re sqlite cache, but it wasn't well received. Do you have an alternative plan?", "id": 5821289}, {"count": 8, "bug_id": 699115, "raw_text": "(In reply to Justin Lebar [:jlebar] from comment #6)\n> You wouldn't need to get rid of all prepared statements.  I'd guess that\n> Taras is right; 20% of them get 80% of the use, so you could get away with\n> lazily preparing the others and throwing them away after a time.\n\nRight, but this looks like lots of added complication for a low benefit.\n\n>   I'd much rather make sqlite's\n> caches leaner; they can take up 30mb or more.\n\nSome of this was already done for FF9 (my usual cache size reduced by about 40%), bug 658303 and bug 692487 may help there too, they just need reviews.", "attachment_id": null, "id": 5821290, "creator": "mak@mozilla.com", "is_private": false, "tags": [], "time": "2011-11-02T17:47:40Z", "text": "(In reply to Justin Lebar [:jlebar] from comment #6)\n> You wouldn't need to get rid of all prepared statements.  I'd guess that\n> Taras is right; 20% of them get 80% of the use, so you could get away with\n> lazily preparing the others and throwing them away after a time.\n\nRight, but this looks like lots of added complication for a low benefit.\n\n>   I'd much rather make sqlite's\n> caches leaner; they can take up 30mb or more.\n\nSome of this was already done for FF9 (my usual cache size reduced by about 40%), bug 658303 and bug 692487 may help there too, they just need reviews.", "author": "mak@mozilla.com", "creation_time": "2011-11-02T17:47:40Z"}, {"is_private": false, "creator": "justin.lebar+bug@gmail.com", "text": "> I think figuring out the right prepare tradeoff is exactly what this bug is about.\n\nI guess if we change the summary back to \"investigate\", then yes, I agree.  :)", "tags": [], "time": "2011-11-02T17:49:39Z", "creation_time": "2011-11-02T17:49:39Z", "author": "justin.lebar+bug@gmail.com", "raw_text": "> I think figuring out the right prepare tradeoff is exactly what this bug is about.\n\nI guess if we change the summary back to \"investigate\", then yes, I agree.  :)", "attachment_id": null, "id": 5821296, "count": 9, "bug_id": 699115}, {"bug_id": 699115, "count": 10, "id": 5829649, "attachment_id": null, "raw_text": "This would be simple to do actually, but we'd need more consumers to use `StatementCache`:\nhttps://mxr.mozilla.org/mozilla-central/source/storage/public/StatementCache.h\n\nThat code could then track the data we care about, and free things in the case of memory-pressure notifications.  I wanted `StatementCache` created for this very reason. :)", "author": "sdwilsh@forerunnerdesigns.com", "creation_time": "2011-11-06T23:03:02Z", "time": "2011-11-06T23:03:02Z", "tags": [], "text": "This would be simple to do actually, but we'd need more consumers to use `StatementCache`:\nhttps://mxr.mozilla.org/mozilla-central/source/storage/public/StatementCache.h\n\nThat code could then track the data we care about, and free things in the case of memory-pressure notifications.  I wanted `StatementCache` created for this very reason. :)", "creator": "sdwilsh@forerunnerdesigns.com", "is_private": false}, {"bug_id": 699115, "count": 11, "text": "(In reply to Shawn Wilsher :sdwilsh from comment #10)\n> This would be simple to do actually, but we'd need more consumers to use\n> `StatementCache`:\n\nfwiw, I recently switched all of Places cpp stuff to StatementCache, and I think I may expose a couple methods in nsPIPlacesDatabase to reuse that cache from js consumers instead of having to duplicate caching and shutdown management in each of them.", "time": "2011-11-07T10:46:03Z", "tags": [], "creation_time": "2011-11-07T10:46:03Z", "author": "mak@mozilla.com", "is_private": false, "creator": "mak@mozilla.com", "id": 5830317, "raw_text": "(In reply to Shawn Wilsher :sdwilsh from comment #10)\n> This would be simple to do actually, but we'd need more consumers to use\n> `StatementCache`:\n\nfwiw, I recently switched all of Places cpp stuff to StatementCache, and I think I may expose a couple methods in nsPIPlacesDatabase to reuse that cache from js consumers instead of having to duplicate caching and shutdown management in each of them.", "attachment_id": null}, {"id": 5836087, "raw_text": "(In reply to Marco Bonardo [:mak] from comment #11)\n> fwiw, I recently switched all of Places cpp stuff to StatementCache, and I\n> think I may expose a couple methods in nsPIPlacesDatabase to reuse that\n> cache from js consumers instead of having to duplicate caching and shutdown\n> management in each of them.\nThat makes sense for places, but we should also make a generic `StatementCache.jsm` that exports a class that does this for JS too.", "attachment_id": null, "text": "(In reply to Marco Bonardo [:mak] from comment #11)\n> fwiw, I recently switched all of Places cpp stuff to StatementCache, and I\n> think I may expose a couple methods in nsPIPlacesDatabase to reuse that\n> cache from js consumers instead of having to duplicate caching and shutdown\n> management in each of them.\nThat makes sense for places, but we should also make a generic `StatementCache.jsm` that exports a class that does this for JS too.", "tags": [], "time": "2011-11-09T03:23:41Z", "bug_id": 699115, "creation_time": "2011-11-09T03:23:41Z", "author": "sdwilsh@forerunnerdesigns.com", "count": 12, "is_private": false, "creator": "sdwilsh@forerunnerdesigns.com"}, {"bug_id": 699115, "time": "2018-05-24T10:38:31Z", "tags": [], "text": "Per policy at https://wiki.mozilla.org/Bug_Triage/Projects/Bug_Handling/Bug_Husbandry#Inactive_Bugs. If this bug is not an enhancement request or a bug not present in a supported release of Firefox, then it may be reopened.", "author": "automation@bmo.tld", "creation_time": "2018-05-24T10:38:31Z", "count": 13, "creator": "automation@bmo.tld", "is_private": false, "id": 13337352, "raw_text": "Per policy at https://wiki.mozilla.org/Bug_Triage/Projects/Bug_Handling/Bug_Husbandry#Inactive_Bugs. If this bug is not an enhancement request or a bug not present in a supported release of Firefox, then it may be reopened.", "attachment_id": null}]}}}