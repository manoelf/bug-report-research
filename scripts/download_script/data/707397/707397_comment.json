{"comments": {}, "bugs": {"707397": {"comments": [{"id": 5890158, "count": 0, "is_private": false, "author": "brian@briansmith.org", "creation_time": "2011-12-03T02:50:49Z", "time": "2011-12-03T02:50:49Z", "creator": "brian@briansmith.org", "raw_text": "Mozilla needs a way to determine, as early in the handshake as possible, that the NPN extension has been or has not been negotiated. Also, I suspect that we will need to know early on in the handshake whether other extensions have been negotiated in the future. Because of the issues mentioned in bug 707394 and bug 681839, the best way to ensure this would be to create a new callback that is called when the peer's hello message (ServerHello for clients; ClientHello for servers) has been processed. I propose the following API:\n\ntypedef SECstatus (PR_CALLBACK *SSLHandshakeCallback)\n                         (PRFileDesc *fd, void *client_data);\nSECStatus SSL_HelloCallback((PRFileDesc *fd, SSLHelloCallback cb, void * client_data);\n\nThe registered callback would be called at/near the end of ssl3_HandleClientHello and at/near the end of ssl3_HandleServerHello. No implementation for SSL 2 would be provided. If the callback returns SECSuccess, everything would continue as normal. If the callback returns SECFailure, then the handshake would stop. if the callback returns SECWouldBlock, then the handshake would stop with a SSL_FEATURE_NOT_IMPLEMENTED_FOR_SERVERS/SSL_FEATURE_NOT_IMPLEMENTED_FOR_CLIENTS error code, as I don't think an asynchronous restart mechanism is needed for this.\n\nI think that Mozilla will need this functionality because of the SPDY connection coalescing feature; it seems like we need to determine, as early as possible, that a connection is NOT a candidate for connection coalescing (e.g. because SPDY was not negotiated), so that we don't wait around until one of the later callbacks is called to decide to open a new connection. Without this, I fear our SPDY connection coalescing feature might regress non-SPDY HTTPS performance, especially for sites that use wildcard certificates.", "attachment_id": null, "text": "Mozilla needs a way to determine, as early in the handshake as possible, that the NPN extension has been or has not been negotiated. Also, I suspect that we will need to know early on in the handshake whether other extensions have been negotiated in the future. Because of the issues mentioned in bug 707394 and bug 681839, the best way to ensure this would be to create a new callback that is called when the peer's hello message (ServerHello for clients; ClientHello for servers) has been processed. I propose the following API:\n\ntypedef SECstatus (PR_CALLBACK *SSLHandshakeCallback)\n                         (PRFileDesc *fd, void *client_data);\nSECStatus SSL_HelloCallback((PRFileDesc *fd, SSLHelloCallback cb, void * client_data);\n\nThe registered callback would be called at/near the end of ssl3_HandleClientHello and at/near the end of ssl3_HandleServerHello. No implementation for SSL 2 would be provided. If the callback returns SECSuccess, everything would continue as normal. If the callback returns SECFailure, then the handshake would stop. if the callback returns SECWouldBlock, then the handshake would stop with a SSL_FEATURE_NOT_IMPLEMENTED_FOR_SERVERS/SSL_FEATURE_NOT_IMPLEMENTED_FOR_CLIENTS error code, as I don't think an asynchronous restart mechanism is needed for this.\n\nI think that Mozilla will need this functionality because of the SPDY connection coalescing feature; it seems like we need to determine, as early as possible, that a connection is NOT a candidate for connection coalescing (e.g. because SPDY was not negotiated), so that we don't wait around until one of the later callbacks is called to decide to open a new connection. Without this, I fear our SPDY connection coalescing feature might regress non-SPDY HTTPS performance, especially for sites that use wildcard certificates.", "bug_id": 707397, "tags": []}, {"raw_text": "I was wrong. Mozilla may not need this now.", "attachment_id": null, "tags": [], "bug_id": 707397, "text": "I was wrong. Mozilla may not need this now.", "is_private": false, "id": 5892034, "count": 1, "author": "brian@briansmith.org", "creator": "brian@briansmith.org", "time": "2011-12-05T04:17:09Z", "creation_time": "2011-12-05T04:17:09Z"}]}}}