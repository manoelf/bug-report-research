{"comments": {}, "bugs": {"632609": {"comments": [{"time": "2011-02-09T00:16:18Z", "id": 5264868, "is_private": false, "bug_id": 632609, "creation_time": "2011-02-09T00:16:18Z", "raw_text": "If aCount isn't passed in we can just default it to aInputStream.available().", "tags": [], "author": "philipp@weitershausen.de", "count": 0, "text": "If aCount isn't passed in we can just default it to aInputStream.available().", "attachment_id": null, "creator": "philipp@weitershausen.de"}, {"raw_text": "Alright, this has annoyed me long enough. I whipped up a patch this morning. Will attach shortly, after having built + run tests...", "creation_time": "2011-08-03T15:37:06Z", "bug_id": 632609, "tags": [], "is_private": false, "time": "2011-08-03T15:37:06Z", "id": 5630527, "creator": "philipp@weitershausen.de", "attachment_id": null, "count": 1, "text": "Alright, this has annoyed me long enough. I whipped up a patch this morning. Will attach shortly, after having built + run tests...", "author": "philipp@weitershausen.de"}, {"attachment_id": 550455, "is_private": false, "bug_id": 632609, "creation_time": "2011-08-03T19:00:21Z", "raw_text": "", "tags": [], "creator": "philipp@weitershausen.de", "time": "2011-08-03T19:00:21Z", "author": "philipp@weitershausen.de", "id": 5631114, "text": "Created attachment 550455\nv1", "count": 2}, {"creator": "cbiesinger@gmail.com", "attachment_id": 550455, "count": 3, "text": "Comment on attachment 550455\nv1\n\nWouldn't it make more sense to read until EOF?", "author": "cbiesinger@gmail.com", "raw_text": "Wouldn't it make more sense to read until EOF?", "creation_time": "2011-08-12T16:58:35Z", "bug_id": 632609, "tags": [], "is_private": false, "time": "2011-08-12T16:58:35Z", "id": 5650263}, {"text": "09:59 < philikon> biesi: so how would reading till EOF work? continue to read until stream.available() throws?\n10:00 < philikon> biesi: and call the callback multiple times in the process?\n10:00 < biesi> philikon, continue calling read() until it returns null bytes\n10:00 < biesi> hm?\n10:00 < biesi> no, just call it once with everything\n10:00 < philikon> hmmmm\n10:00 < biesi> although, you're using binaryinputstream, it seems\n10:00 < biesi> so that doesn't quite work that way\n10:02 < biesi> scriptableinputstream, right\n10:02 < biesi> so you can just do:\n10:02 < biesi> for (;;) { newData = sis.read(4096); if (newData.length == 0) break; retval += newData; }\n10:04 < philikon> you mean readBytes, right?\n10:04 < biesi> er, yes\n10:04 < philikon> and why not read what's available?\n10:04 < philikon> js string concat: probably not super awesome\n10:05 < philikon> best to avoid it when we can\n10:07 < biesi> you mean keep reading what's available()?\n10:07 < philikon> yes\n10:08 < biesi> that'd have weird semantics with nonblocking streams\n10:08 < philikon> i guess available() could return 0\n10:08 < biesi> it can return 0 at EOF or when nonblocking\n10:09 < biesi> (when nonblocking and no data is available right now)\n10:09 < biesi> hrm\n10:09 < biesi> but maybe that's actually the better semantics\n10:09 < biesi> if nonblocking you'll want partial data over an exception + lost data\n10:09 < philikon> yes\n10:11 < biesi> sounds good then, loop and read what's available() until that returns 0\n10:11 < biesi> though it's somewhat unfortunate that you have no way of telling whether you're at EOF\n10:12 < biesi> (vs nonblocking+no data right now)", "count": 4, "author": "philipp@weitershausen.de", "creator": "philipp@weitershausen.de", "attachment_id": null, "id": 5650304, "time": "2011-08-12T17:17:05Z", "tags": [], "raw_text": "09:59 < philikon> biesi: so how would reading till EOF work? continue to read until stream.available() throws?\n10:00 < philikon> biesi: and call the callback multiple times in the process?\n10:00 < biesi> philikon, continue calling read() until it returns null bytes\n10:00 < biesi> hm?\n10:00 < biesi> no, just call it once with everything\n10:00 < philikon> hmmmm\n10:00 < biesi> although, you're using binaryinputstream, it seems\n10:00 < biesi> so that doesn't quite work that way\n10:02 < biesi> scriptableinputstream, right\n10:02 < biesi> so you can just do:\n10:02 < biesi> for (;;) { newData = sis.read(4096); if (newData.length == 0) break; retval += newData; }\n10:04 < philikon> you mean readBytes, right?\n10:04 < biesi> er, yes\n10:04 < philikon> and why not read what's available?\n10:04 < philikon> js string concat: probably not super awesome\n10:05 < philikon> best to avoid it when we can\n10:07 < biesi> you mean keep reading what's available()?\n10:07 < philikon> yes\n10:08 < biesi> that'd have weird semantics with nonblocking streams\n10:08 < philikon> i guess available() could return 0\n10:08 < biesi> it can return 0 at EOF or when nonblocking\n10:09 < biesi> (when nonblocking and no data is available right now)\n10:09 < biesi> hrm\n10:09 < biesi> but maybe that's actually the better semantics\n10:09 < biesi> if nonblocking you'll want partial data over an exception + lost data\n10:09 < philikon> yes\n10:11 < biesi> sounds good then, loop and read what's available() until that returns 0\n10:11 < biesi> though it's somewhat unfortunate that you have no way of telling whether you're at EOF\n10:12 < biesi> (vs nonblocking+no data right now)", "creation_time": "2011-08-12T17:17:05Z", "bug_id": 632609, "is_private": false}, {"is_private": false, "tags": [], "creation_time": "2011-08-16T04:56:33Z", "bug_id": 632609, "raw_text": "Clearing request until the right approach is worked out.", "id": 5656090, "time": "2011-08-16T04:56:33Z", "attachment_id": 550455, "creator": "sdwilsh@forerunnerdesigns.com", "author": "sdwilsh@forerunnerdesigns.com", "text": "Comment on attachment 550455\nv1\n\nClearing request until the right approach is worked out.", "count": 5}, {"is_private": false, "bug_id": 632609, "creation_time": "2017-09-13T18:39:16Z", "raw_text": "Bulk change to priority: https://bugzilla.mozilla.org/show_bug.cgi?id=1399258", "tags": [], "time": "2017-09-13T18:39:16Z", "id": 12658759, "attachment_id": null, "creator": "bug-husbandry-bot@mozilla.bugs", "author": "bug-husbandry-bot@mozilla.bugs", "count": 6, "text": "Bulk change to priority: https://bugzilla.mozilla.org/show_bug.cgi?id=1399258"}]}}}