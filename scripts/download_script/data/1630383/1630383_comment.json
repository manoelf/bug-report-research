{"comments": {}, "bugs": {"1630383": {"comments": [{"raw_text": "When bug 1630090 is finished, all the major pieces of the new import will be in place. There are a few small things left to do before we get a green try build, none of which are big enough to deserve their own bug.", "count": 0, "creation_time": "2020-04-15T19:51:21Z", "tags": [], "time": "2020-04-15T19:51:21Z", "creator": "iireland@mozilla.com", "id": 14757617, "author": "iireland@mozilla.com", "attachment_id": null, "text": "When bug 1630090 is finished, all the major pieces of the new import will be in place. There are a few small things left to do before we get a green try build, none of which are big enough to deserve their own bug.", "is_private": false, "bug_id": 1630383}, {"tags": [], "time": "2020-04-17T16:16:25Z", "creator": "iireland@mozilla.com", "raw_text": "\nWhile getting my patches organized for review and addressing comments, I managed to accidentally break a few build configurations on try.\n\n1. I wasn't building binast locally, so it was just broken.\n2. I missed an underscore in ARM-specific masm code.\n3. The new regexp-error.h file that I imported needs to #include regexp-shim.h to avoid breaking non-unified builds.", "count": 1, "creation_time": "2020-04-17T16:16:25Z", "bug_id": 1630383, "is_private": false, "id": 14761808, "author": "iireland@mozilla.com", "attachment_id": 9141303, "text": "Created attachment 9141303\nBug 1630383: Fix broken builds r=mgaudet\n\n\nWhile getting my patches organized for review and addressing comments, I managed to accidentally break a few build configurations on try.\n\n1. I wasn't building binast locally, so it was just broken.\n2. I missed an underscore in ARM-specific masm code.\n3. The new regexp-error.h file that I imported needs to #include regexp-shim.h to avoid breaking non-unified builds."}, {"creator": "iireland@mozilla.com", "time": "2020-04-17T16:16:43Z", "tags": [], "creation_time": "2020-04-17T16:16:43Z", "count": 2, "raw_text": "\nI had this right in my original patch stack, but 'fixed' it before putting the patches up for review. The old engine only needs to initialize the regexp stack for the main thread, because it's only used when executing regexps, but we need the isolate for off-thread parsing, so it needs to be initialized even for helper threads.\n\nDepends on D71352", "is_private": false, "bug_id": 1630383, "text": "Created attachment 9141304\nBug 1630383: Fix off-thread parsing r=mgaudet\n\n\nI had this right in my original patch stack, but 'fixed' it before putting the patches up for review. The old engine only needs to initialize the regexp stack for the main thread, because it's only used when executing regexps, but we need the isolate for off-thread parsing, so it needs to be initialized even for helper threads.\n\nDepends on D71352", "attachment_id": 9141304, "author": "iireland@mozilla.com", "id": 14761809}, {"creation_time": "2020-04-17T16:16:57Z", "count": 3, "raw_text": "\nA couple of cleanups that have been floating around my patch stack for a while.\n\nDepends on D71353", "creator": "iireland@mozilla.com", "time": "2020-04-17T16:16:57Z", "tags": [], "text": "Created attachment 9141305\nBug 1630383: Shim simplifications r=mgaudet\n\n\nA couple of cleanups that have been floating around my patch stack for a while.\n\nDepends on D71353", "attachment_id": 9141305, "id": 14761810, "author": "iireland@mozilla.com", "bug_id": 1630383, "is_private": false}, {"author": "iireland@mozilla.com", "id": 14761812, "attachment_id": 9141306, "text": "Created attachment 9141306\nBug 1630383: Appease hazard analysis r=sfink\n\n\nFor a variety of reasons, some better than others, we call into irregexp with unrooted GC pointers. (For example, the input string is unrooted, at least in part because rooting it would complicate Ion.) Everything is properly guarded with AutoCheckCannotGC, which means that we need to convince the hazard analysis that nothing untoward is going on.\n\nThere are three obstacles to this:\n\n1. ICU uses a pile of function pointers internally. To keep things interesting, they change the names of their functions each release (so ICU 66 has \"icu_66::UnicodeSet::applyFilter()\" and \"uprv_malloc_66\", but a newer version would update the number.) I handled these in annotations.js by adding an `isICU` check and throwing regexps at the problem.\n\n2. The call to the generated code happens via function pointer, so we need to get the hazard analysis to ignore it. I used the solution from the old import (adding an AutoSuppressGCAnalysis). (See ExecuteRaw in RegExpAPI.cpp.)\n\n3. The RegExpCompileData struct that V8 uses to communicate information between the parser and the compiler has one member that is an Object (~= JS::Value) and another than is a Handle. Because of this, the hazard analysis also wants to make sure that we don't GC during compilation. This is mostly not a problem, except for one place where we call a merge sort with a function pointer as comparator. I added SortConsecutiveAtoms to the whitelist to fix this. (See https://searchfox.org/mozilla-central/rev/97cb0a90bd053de87cd1ab7646d5565809166bb1/js/src/new-regexp/regexp-compiler-tonode.cc#498)\n\nDepends on D71354", "is_private": false, "bug_id": 1630383, "raw_text": "\nFor a variety of reasons, some better than others, we call into irregexp with unrooted GC pointers. (For example, the input string is unrooted, at least in part because rooting it would complicate Ion.) Everything is properly guarded with AutoCheckCannotGC, which means that we need to convince the hazard analysis that nothing untoward is going on.\n\nThere are three obstacles to this:\n\n1. ICU uses a pile of function pointers internally. To keep things interesting, they change the names of their functions each release (so ICU 66 has \"icu_66::UnicodeSet::applyFilter()\" and \"uprv_malloc_66\", but a newer version would update the number.) I handled these in annotations.js by adding an `isICU` check and throwing regexps at the problem.\n\n2. The call to the generated code happens via function pointer, so we need to get the hazard analysis to ignore it. I used the solution from the old import (adding an AutoSuppressGCAnalysis). (See ExecuteRaw in RegExpAPI.cpp.)\n\n3. The RegExpCompileData struct that V8 uses to communicate information between the parser and the compiler has one member that is an Object (~= JS::Value) and another than is a Handle. Because of this, the hazard analysis also wants to make sure that we don't GC during compilation. This is mostly not a problem, except for one place where we call a merge sort with a function pointer as comparator. I added SortConsecutiveAtoms to the whitelist to fix this. (See https://searchfox.org/mozilla-central/rev/97cb0a90bd053de87cd1ab7646d5565809166bb1/js/src/new-regexp/regexp-compiler-tonode.cc#498)\n\nDepends on D71354", "count": 4, "creation_time": "2020-04-17T16:17:16Z", "tags": [], "creator": "iireland@mozilla.com", "time": "2020-04-17T16:17:16Z"}, {"creator": "iireland@mozilla.com", "time": "2020-04-17T16:18:23Z", "tags": [], "bug_id": 1630383, "is_private": false, "creation_time": "2020-04-17T16:18:23Z", "text": "Created attachment 9141308\nBug 1630383: Add irregexp to ignore list for implicit constructor static analysis r=sfink\n\n\nThe V8 code in the new engine uses implicit constructors with wild abandon, and it doesn't seem like a good use of time to try upstreaming a patch to remove them.\n\nDepends on D71355", "count": 5, "attachment_id": 9141308, "raw_text": "\nThe V8 code in the new engine uses implicit constructors with wild abandon, and it doesn't seem like a good use of time to try upstreaming a patch to remove them.\n\nDepends on D71355", "author": "iireland@mozilla.com", "id": 14761818}, {"creator": "iireland@mozilla.com", "time": "2020-04-17T16:18:26Z", "tags": [], "creation_time": "2020-04-17T16:18:26Z", "count": 6, "raw_text": "\nWe can compile regexps that we know ahead of time will not match. (For example, compiling a regexp containing a two-byte character to match latin-1 strings.)\n\nDepends on D71356", "is_private": false, "bug_id": 1630383, "text": "Created attachment 9141309\nBug 1630383: Make successHandler optional r=jandem\n\n\nWe can compile regexps that we know ahead of time will not match. (For example, compiling a regexp containing a two-byte character to match latin-1 strings.)\n\nDepends on D71356", "attachment_id": 9141309, "id": 14761819, "author": "iireland@mozilla.com"}, {"raw_text": "\nWhen changing from inputStartMinusOne to inputStart, I got the boundary condition wrong for backwards-looking CheckPosition. This broke some test262 regexp tests.\n\nDepends on D71357", "count": 7, "creation_time": "2020-04-17T16:18:30Z", "tags": [], "time": "2020-04-17T16:18:30Z", "creator": "iireland@mozilla.com", "author": "iireland@mozilla.com", "id": 14761820, "attachment_id": 9141310, "text": "Created attachment 9141310\nBug 1630383: Fix off-by-one error in CheckPosition r=jandem\n\n\nWhen changing from inputStartMinusOne to inputStart, I got the boundary condition wrong for backwards-looking CheckPosition. This broke some test262 regexp tests.\n\nDepends on D71357", "is_private": false, "bug_id": 1630383}, {"is_private": false, "bug_id": 1630383, "text": "Created attachment 9141311\nBug 1630383: Fix CheckNotBackReferenceIgnoreCase r=jandem\n\n\nIn each iteration of the inner loop, we compare two characters. If they are not the same, but the first character is a letter, then we convert both characters to lower case and see if they are the same.\n\nAt least, that's what we intend to do. We are accidentally loading a second copy of the first letter instead. This means that any two letters will compare equal in a case-insensitive backreference.\n\nComputers are hard.\n\nDepends on D71358", "attachment_id": 9141311, "id": 14761821, "author": "iireland@mozilla.com", "creator": "iireland@mozilla.com", "time": "2020-04-17T16:18:32Z", "tags": [], "creation_time": "2020-04-17T16:18:32Z", "count": 8, "raw_text": "\nIn each iteration of the inner loop, we compare two characters. If they are not the same, but the first character is a letter, then we convert both characters to lower case and see if they are the same.\n\nAt least, that's what we intend to do. We are accidentally loading a second copy of the first letter instead. This means that any two letters will compare equal in a case-insensitive backreference.\n\nComputers are hard.\n\nDepends on D71358"}, {"raw_text": "\nIn preparation for the next patch, which changes the internal representation of v8::Object, this patch removes all direct access (in derived classes) to the `value_` member of v8::Object. Instead, we now use accessor methods.\n\nThis patch also changes a few places that were using `JS::Value` as a parameter to take `const JS::Value&` instead.\n\nDepends on D71359", "count": 9, "creation_time": "2020-04-17T16:18:46Z", "tags": [], "time": "2020-04-17T16:18:46Z", "creator": "iireland@mozilla.com", "author": "iireland@mozilla.com", "id": 14761823, "attachment_id": 9141312, "text": "Created attachment 9141312\nBug 1630383: Remove direct access to wrapped Value in v8::Object r=tcampbell\n\n\nIn preparation for the next patch, which changes the internal representation of v8::Object, this patch removes all direct access (in derived classes) to the `value_` member of v8::Object. Instead, we now use accessor methods.\n\nThis patch also changes a few places that were using `JS::Value` as a parameter to take `const JS::Value&` instead.\n\nDepends on D71359", "is_private": false, "bug_id": 1630383}, {"raw_text": "\nThe natural way to represent v8::Object is as a thin wrapper around a JS::Value. However, Value is MOZ_NON_PARAM and alignas(8), and irregexp uses objects as parameters. There are two plausible solutions: stop marking Value as MOZ_NON_PARAM, or stop storing a Value inside Object. I wrote a set of patches to do the former, but nbp pointed out in the bug I created that \"the intent of alignas(8) was to ensure that 'doubles' are well aligned when loaded/stored as floating points values.\"\n\nIf we want to keep the annotations on Value, then we have to change Object instead. I tried rewriting it to store raw bits, and the patches seem alright, so I'm going with that unless somebody has a good reason not to.\n\nDepends on D71360", "count": 10, "creation_time": "2020-04-17T16:19:04Z", "tags": [], "creator": "iireland@mozilla.com", "time": "2020-04-17T16:19:04Z", "author": "iireland@mozilla.com", "id": 14761824, "attachment_id": 9141313, "text": "Created attachment 9141313\nBug 1630383: Store Value inside Object as raw bits r=tcampbell\n\n\nThe natural way to represent v8::Object is as a thin wrapper around a JS::Value. However, Value is MOZ_NON_PARAM and alignas(8), and irregexp uses objects as parameters. There are two plausible solutions: stop marking Value as MOZ_NON_PARAM, or stop storing a Value inside Object. I wrote a set of patches to do the former, but nbp pointed out in the bug I created that \"the intent of alignas(8) was to ensure that 'doubles' are well aligned when loaded/stored as floating points values.\"\n\nIf we want to keep the annotations on Value, then we have to change Object instead. I tried rewriting it to store raw bits, and the patches seem alright, so I'm going with that unless somebody has a good reason not to.\n\nDepends on D71360", "is_private": false, "bug_id": 1630383}, {"author": "pulsebot@bots.tld", "id": 14766929, "attachment_id": null, "text": "Pushed by iireland@mozilla.com:\nhttps://hg.mozilla.org/integration/autoland/rev/fe9af68999c4\nFix broken builds r=mgaudet\nhttps://hg.mozilla.org/integration/autoland/rev/4c0cbbdaa240\nFix off-thread parsing r=mgaudet\nhttps://hg.mozilla.org/integration/autoland/rev/026a6f7e37ef\nShim simplifications r=mgaudet\nhttps://hg.mozilla.org/integration/autoland/rev/0c7019227612\nAppease hazard analysis r=sfink\nhttps://hg.mozilla.org/integration/autoland/rev/22127e9ef811\nAdd irregexp to ignore list for implicit constructor static analysis r=sfink\nhttps://hg.mozilla.org/integration/autoland/rev/82240b022085\nMake successHandler optional r=jandem\nhttps://hg.mozilla.org/integration/autoland/rev/a468a05ee7b5\nFix off-by-one error in CheckPosition r=jandem\nhttps://hg.mozilla.org/integration/autoland/rev/b4bd410fbcf6\nFix CheckNotBackReferenceIgnoreCase r=jandem\nhttps://hg.mozilla.org/integration/autoland/rev/ba9f11886936\nRemove direct access to wrapped Value in v8::Object r=tcampbell\nhttps://hg.mozilla.org/integration/autoland/rev/abd746d74377\nStore Value inside Object as raw bits r=tcampbell", "is_private": false, "bug_id": 1630383, "raw_text": "Pushed by iireland@mozilla.com:\nhttps://hg.mozilla.org/integration/autoland/rev/fe9af68999c4\nFix broken builds r=mgaudet\nhttps://hg.mozilla.org/integration/autoland/rev/4c0cbbdaa240\nFix off-thread parsing r=mgaudet\nhttps://hg.mozilla.org/integration/autoland/rev/026a6f7e37ef\nShim simplifications r=mgaudet\nhttps://hg.mozilla.org/integration/autoland/rev/0c7019227612\nAppease hazard analysis r=sfink\nhttps://hg.mozilla.org/integration/autoland/rev/22127e9ef811\nAdd irregexp to ignore list for implicit constructor static analysis r=sfink\nhttps://hg.mozilla.org/integration/autoland/rev/82240b022085\nMake successHandler optional r=jandem\nhttps://hg.mozilla.org/integration/autoland/rev/a468a05ee7b5\nFix off-by-one error in CheckPosition r=jandem\nhttps://hg.mozilla.org/integration/autoland/rev/b4bd410fbcf6\nFix CheckNotBackReferenceIgnoreCase r=jandem\nhttps://hg.mozilla.org/integration/autoland/rev/ba9f11886936\nRemove direct access to wrapped Value in v8::Object r=tcampbell\nhttps://hg.mozilla.org/integration/autoland/rev/abd746d74377\nStore Value inside Object as raw bits r=tcampbell", "count": 11, "creation_time": "2020-04-20T16:43:14Z", "tags": [], "time": "2020-04-20T16:43:14Z", "creator": "pulsebot@bots.tld"}, {"is_private": false, "bug_id": 1630383, "attachment_id": null, "id": 14768149, "author": "ncsoregi@mozilla.com", "text": "https://hg.mozilla.org/mozilla-central/rev/fe9af68999c4\nhttps://hg.mozilla.org/mozilla-central/rev/4c0cbbdaa240\nhttps://hg.mozilla.org/mozilla-central/rev/026a6f7e37ef\nhttps://hg.mozilla.org/mozilla-central/rev/0c7019227612\nhttps://hg.mozilla.org/mozilla-central/rev/22127e9ef811\nhttps://hg.mozilla.org/mozilla-central/rev/82240b022085\nhttps://hg.mozilla.org/mozilla-central/rev/a468a05ee7b5\nhttps://hg.mozilla.org/mozilla-central/rev/b4bd410fbcf6\nhttps://hg.mozilla.org/mozilla-central/rev/ba9f11886936\nhttps://hg.mozilla.org/mozilla-central/rev/abd746d74377", "tags": ["bugherder"], "creator": "ncsoregi@mozilla.com", "time": "2020-04-21T02:12:05Z", "raw_text": "https://hg.mozilla.org/mozilla-central/rev/fe9af68999c4\nhttps://hg.mozilla.org/mozilla-central/rev/4c0cbbdaa240\nhttps://hg.mozilla.org/mozilla-central/rev/026a6f7e37ef\nhttps://hg.mozilla.org/mozilla-central/rev/0c7019227612\nhttps://hg.mozilla.org/mozilla-central/rev/22127e9ef811\nhttps://hg.mozilla.org/mozilla-central/rev/82240b022085\nhttps://hg.mozilla.org/mozilla-central/rev/a468a05ee7b5\nhttps://hg.mozilla.org/mozilla-central/rev/b4bd410fbcf6\nhttps://hg.mozilla.org/mozilla-central/rev/ba9f11886936\nhttps://hg.mozilla.org/mozilla-central/rev/abd746d74377", "creation_time": "2020-04-21T02:12:05Z", "count": 12}]}}}