{"comments": {}, "bugs": {"624509": {"comments": [{"count": 0, "author": "gal@uci.edu", "id": 5188175, "tags": [], "is_private": false, "attachment_id": null, "creator": "gal@uci.edu", "raw_text": "We often have tens of thousands of wrapped natives we release during a GC. That causes pause times. We can do that via the event loop by sending an event that process itself a bit and then re-posts itself.", "bug_id": 624509, "text": "We often have tens of thousands of wrapped natives we release during a GC. That causes pause times. We can do that via the event loop by sending an event that process itself a bit and then re-posts itself.", "time": "2011-01-10T21:45:10Z", "creation_time": "2011-01-10T21:45:10Z"}, {"raw_text": "", "creator": "gal@uci.edu", "attachment_id": 502591, "time": "2011-01-10T21:46:01Z", "creation_time": "2011-01-10T21:46:01Z", "bug_id": 624509, "text": "Created attachment 502591\npatch, seems to work", "count": 1, "author": "gal@uci.edu", "is_private": false, "id": 5188178, "tags": []}, {"raw_text": "This patch releases them all at once, is that what you wanted, or did you want to do a time-slice and then repost the same event?\n\nAlso, instead of using RemoveElementAt for the Drain(), it might make more sense just to null out the members as you enumerate: that way we won't pay any realloc penalty for resizing the array smaller as you process items.", "creator": "benjamin@smedbergs.us", "attachment_id": 502591, "count": 2, "author": "benjamin@smedbergs.us", "is_private": false, "time": "2011-01-10T21:49:17Z", "creation_time": "2011-01-10T21:49:17Z", "id": 5188191, "bug_id": 624509, "tags": [], "text": "Comment on attachment 502591\npatch, seems to work\n\nThis patch releases them all at once, is that what you wanted, or did you want to do a time-slice and then repost the same event?\n\nAlso, instead of using RemoveElementAt for the Drain(), it might make more sense just to null out the members as you enumerate: that way we won't pay any realloc penalty for resizing the array smaller as you process items."}, {"creator": "gal@uci.edu", "raw_text": "The patch chunks it by 256 and then re-posts. That was my intent, and I am pretty sure thats what I am seeing running it, minus my stupidity and a bug in the patch.\n\nYeah, null might be a better plan. This was a 10 minute patch. I am trying to see whether this helps with the GC delays we are seeing. From your comment it smells to me you are going to volunteer for a review when this is ready :)", "attachment_id": null, "time": "2011-01-10T21:54:06Z", "creation_time": "2011-01-10T21:54:06Z", "bug_id": 624509, "text": "The patch chunks it by 256 and then re-posts. That was my intent, and I am pretty sure thats what I am seeing running it, minus my stupidity and a bug in the patch.\n\nYeah, null might be a better plan. This was a 10 minute patch. I am trying to see whether this helps with the GC delays we are seeing. From your comment it smells to me you are going to volunteer for a review when this is ready :)", "count": 3, "author": "gal@uci.edu", "is_private": false, "id": 5188209, "tags": []}, {"count": 4, "author": "gal@uci.edu", "id": 5188217, "tags": [], "is_private": false, "raw_text": "comment 2: I only drain all right away if the dispatch fails (first time, or subsequent times).", "creator": "gal@uci.edu", "attachment_id": null, "bug_id": 624509, "text": "comment 2: I only drain all right away if the dispatch fails (first time, or subsequent times).", "time": "2011-01-10T21:56:20Z", "creation_time": "2011-01-10T21:56:20Z"}, {"count": 5, "author": "benjamin@smedbergs.us", "id": 5188272, "tags": [], "is_private": false, "attachment_id": null, "creator": "benjamin@smedbergs.us", "raw_text": "Ah, I missed the fail->drain logic. Sure, I'll review; I've touched this code more than once. I think 256 may be a bit conservative, but sure, let's see how it helps responsiveness: I'm hoping we can chunk into 25ms groupings or something similar.", "bug_id": 624509, "text": "Ah, I missed the fail->drain logic. Sure, I'll review; I've touched this code more than once. I think 256 may be a bit conservative, but sure, let's see how it helps responsiveness: I'm hoping we can chunk into 25ms groupings or something similar.", "time": "2011-01-10T22:13:35Z", "creation_time": "2011-01-10T22:13:35Z"}, {"author": "gal@uci.edu", "count": 6, "is_private": false, "tags": [], "id": 5188312, "raw_text": "I picked 256 without any measurement. More or less might be appropriate. I like limiting based on cycle count or time, too. I wanted to err on the side of a small increment for now and take additional event loop spinning in favor of better response time. I am building an opt build to see if this helps with pause times on a couple benchmarks.", "creator": "gal@uci.edu", "attachment_id": null, "creation_time": "2011-01-10T22:20:28Z", "time": "2011-01-10T22:20:28Z", "text": "I picked 256 without any measurement. More or less might be appropriate. I like limiting based on cycle count or time, too. I wanted to err on the side of a small increment for now and take additional event loop spinning in favor of better response time. I am building an opt build to see if this helps with pause times on a couple benchmarks.", "bug_id": 624509}, {"raw_text": "The chunk size depends on mean time between dispatches and time to process the chunk. The patch could measure and adapt without too much trouble. No need for fancy digital filtering, just throw out outliers and clamp conservatively or fail to flushing.\n\n/be", "creator": "brendan@mozilla.org", "attachment_id": null, "count": 7, "author": "brendan@mozilla.org", "time": "2011-01-10T22:43:18Z", "is_private": false, "creation_time": "2011-01-10T22:43:18Z", "id": 5188396, "bug_id": 624509, "tags": [], "text": "The chunk size depends on mean time between dispatches and time to process the chunk. The patch could measure and adapt without too much trouble. No need for fancy digital filtering, just throw out outliers and clamp conservatively or fail to flushing.\n\n/be"}, {"count": 8, "author": "anygregor@gmail.com", "is_private": false, "id": 5188912, "tags": [], "raw_text": "I was running the flight of the navigator with this patch. I don't see much improvement for the sweep phase.", "creator": "anygregor@gmail.com", "attachment_id": 502674, "time": "2011-01-11T01:07:32Z", "creation_time": "2011-01-11T01:07:32Z", "bug_id": 624509, "text": "Created attachment 502674\nFlight of navigator without patch\n\nI was running the flight of the navigator with this patch. I don't see much improvement for the sweep phase."}, {"text": "Created attachment 502675\nFlight of navigator with patch", "tags": [], "bug_id": 624509, "id": 5188914, "creation_time": "2011-01-11T01:07:55Z", "is_private": false, "time": "2011-01-11T01:07:55Z", "author": "anygregor@gmail.com", "count": 9, "attachment_id": 502675, "raw_text": "", "creator": "anygregor@gmail.com"}, {"count": 10, "author": "brendan@mozilla.org", "is_private": false, "id": 5188971, "tags": [], "attachment_id": null, "creator": "brendan@mozilla.org", "raw_text": "Patrick using his awesome frame-rate monitor with Shark support found that FotN is victimized by stupid full GCs from nsJSContext::MaybeCC. Insane, fixable, must fix. See bug 624549.\n\n/be", "time": "2011-01-11T01:23:09Z", "creation_time": "2011-01-11T01:23:09Z", "bug_id": 624509, "text": "Patrick using his awesome frame-rate monitor with Shark support found that FotN is victimized by stupid full GCs from nsJSContext::MaybeCC. Insane, fixable, must fix. See bug 624549.\n\n/be"}]}}}