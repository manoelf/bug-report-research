{"bugs": {"675585": {"comments": [{"text": "Run firefox-bin -no-remote -process-updates\nCore dumped.\n\nStack:\n fb2d1db0 ???????? (80e9c68, 0, 60, fe77949c, 8068c40, fe83fc50)\n fe78fdea g_slice_free1 (30, 80dbb50, fe840e6c, fe76094e) + 186\n fe7609a6 g_hash_table_unref (80dbb50, 80dbb50, 8, fe760a1c) + 62\n fe760a46 g_hash_table_destroy (80dbb50, fa1f4384, 0, fa1f43c2) + 36\n fa1f444c free_stack_tables_to_free (8047844, 8047730, feffb93c, fef68e00, 0, fefa06a0) + 94\n fee499c2 _exithandle (feffb93c, 8052566, 0, 8054970, fefcdba4, 0) + 66\n fee3c022 exit     (3, 80478ac, 0, 0, 0, 80478dd) + 12\n\nThe address 0xfb2d1db0 was `libgthread-2.0.so.0.2800.6`gthread-impl.c`g_private_get_posix_impl.\nIt looks like the library is unloaded when exithandler is called.\n\nIf I do LD_PRELOAD=/usr/lib/libgthread-2.0.so.0.2800.6 dist/bin/firefox-bin -no-remote -process-updates, the problem is gone.\n\nIt might be related to\nhttps://bugzilla.redhat.com/show_bug.cgi?id=472253\n\nIt doesn't happen with Firefox 6.0.", "tags": [], "time": "2011-08-01T09:14:52Z", "bug_id": 675585, "creation_time": "2011-08-01T09:14:52Z", "author": "ginnchen+exoracle@gmail.com", "count": 0, "is_private": false, "creator": "ginnchen+exoracle@gmail.com", "id": 5624875, "raw_text": "Run firefox-bin -no-remote -process-updates\nCore dumped.\n\nStack:\n fb2d1db0 ???????? (80e9c68, 0, 60, fe77949c, 8068c40, fe83fc50)\n fe78fdea g_slice_free1 (30, 80dbb50, fe840e6c, fe76094e) + 186\n fe7609a6 g_hash_table_unref (80dbb50, 80dbb50, 8, fe760a1c) + 62\n fe760a46 g_hash_table_destroy (80dbb50, fa1f4384, 0, fa1f43c2) + 36\n fa1f444c free_stack_tables_to_free (8047844, 8047730, feffb93c, fef68e00, 0, fefa06a0) + 94\n fee499c2 _exithandle (feffb93c, 8052566, 0, 8054970, fefcdba4, 0) + 66\n fee3c022 exit     (3, 80478ac, 0, 0, 0, 80478dd) + 12\n\nThe address 0xfb2d1db0 was `libgthread-2.0.so.0.2800.6`gthread-impl.c`g_private_get_posix_impl.\nIt looks like the library is unloaded when exithandler is called.\n\nIf I do LD_PRELOAD=/usr/lib/libgthread-2.0.so.0.2800.6 dist/bin/firefox-bin -no-remote -process-updates, the problem is gone.\n\nIt might be related to\nhttps://bugzilla.redhat.com/show_bug.cgi?id=472253\n\nIt doesn't happen with Firefox 6.0.", "attachment_id": null}, {"attachment_id": null, "raw_text": "This issue is triggered by Bug 552864.", "id": 5624937, "creator": "ginnchen+exoracle@gmail.com", "is_private": false, "count": 1, "author": "ginnchen+exoracle@gmail.com", "creation_time": "2011-08-01T10:35:42Z", "bug_id": 675585, "tags": [], "time": "2011-08-01T10:35:42Z", "text": "This issue is triggered by Bug 552864."}, {"creation_time": "2011-08-01T10:39:34Z", "author": "ginnchen+exoracle@gmail.com", "text": "Similar bug like Bug 658995? But the atexit is used in gnome-vfs, so we may need a workaround for it.", "tags": [], "time": "2011-08-01T10:39:34Z", "is_private": false, "creator": "ginnchen+exoracle@gmail.com", "id": 5624940, "attachment_id": null, "raw_text": "Similar bug like Bug 658995? But the atexit is used in gnome-vfs, so we may need a workaround for it.", "bug_id": 675585, "count": 2}, {"id": 5624942, "attachment_id": null, "raw_text": "(In reply to comment #2)\n> Similar bug like Bug 658995? But the atexit is used in gnome-vfs, so we may\n> need a workaround for it.\n\nthe gnome people is annoying by using atexit in libraries... I guess a workaround is to dlopen libgthread :(", "creation_time": "2011-08-01T10:44:28Z", "author": "mh+mozilla@glandium.org", "text": "(In reply to comment #2)\n> Similar bug like Bug 658995? But the atexit is used in gnome-vfs, so we may\n> need a workaround for it.\n\nthe gnome people is annoying by using atexit in libraries... I guess a workaround is to dlopen libgthread :(", "time": "2011-08-01T10:44:28Z", "tags": [], "is_private": false, "creator": "mh+mozilla@glandium.org", "bug_id": 675585, "count": 3}, {"bug_id": 675585, "count": 4, "id": 5624960, "attachment_id": null, "raw_text": "Note that we normally don't dlclose libgnome-vfs for that reason... which obviously works in your case, since the free_stack_tables_to_free function is available. Now the question is: how come dlclosing libxul unloads libgthread if it is still used by libgnome-vfs through libglib ?", "author": "mh+mozilla@glandium.org", "creation_time": "2011-08-01T11:05:04Z", "tags": [], "time": "2011-08-01T11:05:04Z", "text": "Note that we normally don't dlclose libgnome-vfs for that reason... which obviously works in your case, since the free_stack_tables_to_free function is available. Now the question is: how come dlclosing libxul unloads libgthread if it is still used by libgnome-vfs through libglib ?", "creator": "mh+mozilla@glandium.org", "is_private": false}, {"tags": [], "time": "2011-08-02T09:43:27Z", "bug_id": 675585, "text": "I think this is how it happens:\n\n1) libxul.so calls g_thread_init(), libgthread-2.0.so.0 is loaded\n2) gnome_vfs_init() called, libgnomevfs-2.so.0 loaded\n3) The only symbol in libgthread-2.0.so.0 used by libgnomevfs-2.so.0 is g_thread_init(), since g_thread_got_initialized is true now, it isn't called, so ref count doesn't change?\n4) dlclose libxul.so, libgthread-2.0.so.0 is also unloaded.\n5) gthread func pointers are left in g_thread_functions_for_glib_use, which is in glib space, in atexit of gnomevfs-2, glib function free_stack_tables_to_free is called and crashes.\n\nSo, technically, libgnome-vfs just uses libglib, libglib uses libgthread-2.0 through g_thread_functions_for_glib_use, either libgnome-vfs or libglib refs libgthread-2.0.\n\nMaybe we should intentionally leave libgthread-2.0 or libxul in memory?", "author": "ginnchen+exoracle@gmail.com", "creation_time": "2011-08-02T09:43:27Z", "count": 5, "creator": "ginnchen+exoracle@gmail.com", "is_private": false, "id": 5627274, "raw_text": "I think this is how it happens:\n\n1) libxul.so calls g_thread_init(), libgthread-2.0.so.0 is loaded\n2) gnome_vfs_init() called, libgnomevfs-2.so.0 loaded\n3) The only symbol in libgthread-2.0.so.0 used by libgnomevfs-2.so.0 is g_thread_init(), since g_thread_got_initialized is true now, it isn't called, so ref count doesn't change?\n4) dlclose libxul.so, libgthread-2.0.so.0 is also unloaded.\n5) gthread func pointers are left in g_thread_functions_for_glib_use, which is in glib space, in atexit of gnomevfs-2, glib function free_stack_tables_to_free is called and crashes.\n\nSo, technically, libgnome-vfs just uses libglib, libglib uses libgthread-2.0 through g_thread_functions_for_glib_use, either libgnome-vfs or libglib refs libgthread-2.0.\n\nMaybe we should intentionally leave libgthread-2.0 or libxul in memory?", "attachment_id": null}, {"count": 6, "bug_id": 675585, "attachment_id": null, "raw_text": "(In reply to comment #5)\n> I think this is how it happens:\n> \n> 1) libxul.so calls g_thread_init(), libgthread-2.0.so.0 is loaded\n> 2) gnome_vfs_init() called, libgnomevfs-2.so.0 loaded\n> 3) The only symbol in libgthread-2.0.so.0 used by libgnomevfs-2.so.0 is\n> g_thread_init(), since g_thread_got_initialized is true now, it isn't\n> called, so ref count doesn't change?\n\nIs that an optimization of the solaris dynamic linker?\n\n> 4) dlclose libxul.so, libgthread-2.0.so.0 is also unloaded.\n\nwhy should it, if gnomevfs is still loaded, which should keep gthread alive at least through glib?", "id": 5627300, "creator": "mh+mozilla@glandium.org", "is_private": false, "author": "mh+mozilla@glandium.org", "creation_time": "2011-08-02T10:17:00Z", "time": "2011-08-02T10:17:00Z", "tags": [], "text": "(In reply to comment #5)\n> I think this is how it happens:\n> \n> 1) libxul.so calls g_thread_init(), libgthread-2.0.so.0 is loaded\n> 2) gnome_vfs_init() called, libgnomevfs-2.so.0 loaded\n> 3) The only symbol in libgthread-2.0.so.0 used by libgnomevfs-2.so.0 is\n> g_thread_init(), since g_thread_got_initialized is true now, it isn't\n> called, so ref count doesn't change?\n\nIs that an optimization of the solaris dynamic linker?\n\n> 4) dlclose libxul.so, libgthread-2.0.so.0 is also unloaded.\n\nwhy should it, if gnomevfs is still loaded, which should keep gthread alive at least through glib?"}, {"count": 7, "bug_id": 675585, "creator": "ginnchen+exoracle@gmail.com", "is_private": false, "author": "ginnchen+exoracle@gmail.com", "creation_time": "2011-08-03T07:02:49Z", "time": "2011-08-03T07:02:49Z", "tags": [], "text": "(In reply to comment #6)\n> (In reply to comment #5)\n> > I think this is how it happens:\n> > \n> > 1) libxul.so calls g_thread_init(), libgthread-2.0.so.0 is loaded\n> > 2) gnome_vfs_init() called, libgnomevfs-2.so.0 loaded\n> > 3) The only symbol in libgthread-2.0.so.0 used by libgnomevfs-2.so.0 is\n> > g_thread_init(), since g_thread_got_initialized is true now, it isn't\n> > called, so ref count doesn't change?\n> \n> Is that an optimization of the solaris dynamic linker?\n\nI think the reason is the dependencies of libgnomevgs-2.so are marked as LAZYLOAD on Solaris.\nIf I set LD_NOLAZYLOAD, this bug doesn't happen.\n\n> \n> > 4) dlclose libxul.so, libgthread-2.0.so.0 is also unloaded.\n> \n> why should it, if gnomevfs is still loaded, which should keep gthread alive\n> at least through glib?\n\ngnomevfs will keep glib alive.\ngthread depends on glib, but glib doesn't depend on gthread, what keeps gthread alive?", "attachment_id": null, "raw_text": "(In reply to comment #6)\n> (In reply to comment #5)\n> > I think this is how it happens:\n> > \n> > 1) libxul.so calls g_thread_init(), libgthread-2.0.so.0 is loaded\n> > 2) gnome_vfs_init() called, libgnomevfs-2.so.0 loaded\n> > 3) The only symbol in libgthread-2.0.so.0 used by libgnomevfs-2.so.0 is\n> > g_thread_init(), since g_thread_got_initialized is true now, it isn't\n> > called, so ref count doesn't change?\n> \n> Is that an optimization of the solaris dynamic linker?\n\nI think the reason is the dependencies of libgnomevgs-2.so are marked as LAZYLOAD on Solaris.\nIf I set LD_NOLAZYLOAD, this bug doesn't happen.\n\n> \n> > 4) dlclose libxul.so, libgthread-2.0.so.0 is also unloaded.\n> \n> why should it, if gnomevfs is still loaded, which should keep gthread alive\n> at least through glib?\n\ngnomevfs will keep glib alive.\ngthread depends on glib, but glib doesn't depend on gthread, what keeps gthread alive?", "id": 5629809}, {"author": "mh+mozilla@glandium.org", "creation_time": "2011-08-03T07:23:48Z", "tags": [], "time": "2011-08-03T07:23:48Z", "text": "(In reply to comment #7)\n> (In reply to comment #6)\n> > (In reply to comment #5)\n> > > I think this is how it happens:\n> > > \n> > > 1) libxul.so calls g_thread_init(), libgthread-2.0.so.0 is loaded\n> > > 2) gnome_vfs_init() called, libgnomevfs-2.so.0 loaded\n> > > 3) The only symbol in libgthread-2.0.so.0 used by libgnomevfs-2.so.0 is\n> > > g_thread_init(), since g_thread_got_initialized is true now, it isn't\n> > > called, so ref count doesn't change?\n> > \n> > Is that an optimization of the solaris dynamic linker?\n> \n> I think the reason is the dependencies of libgnomevgs-2.so are marked as\n> LAZYLOAD on Solaris.\n> If I set LD_NOLAZYLOAD, this bug doesn't happen.\n> \n> > \n> > > 4) dlclose libxul.so, libgthread-2.0.so.0 is also unloaded.\n> > \n> > why should it, if gnomevfs is still loaded, which should keep gthread alive\n> > at least through glib?\n> \n> gnomevfs will keep glib alive.\n> gthread depends on glib, but glib doesn't depend on gthread, what keeps\n> gthread alive?\n\nSo, from what I gather from your comments (not looked at the code), the real problem is that gthread registers callbacks to its functions in glib, but doesn't unregisters them when it is unloaded. Maybe that's not possible at all, but that does seem like a recipe for disaster.\n\nI guess you could change the dlopen call for gnomevfs to have the RTLD_NOW flag, which is more than LD_NOLAZYLOAD would do, aiui, but still be a good tradeoff.", "creator": "mh+mozilla@glandium.org", "is_private": false, "id": 5629846, "attachment_id": null, "raw_text": "(In reply to comment #7)\n> (In reply to comment #6)\n> > (In reply to comment #5)\n> > > I think this is how it happens:\n> > > \n> > > 1) libxul.so calls g_thread_init(), libgthread-2.0.so.0 is loaded\n> > > 2) gnome_vfs_init() called, libgnomevfs-2.so.0 loaded\n> > > 3) The only symbol in libgthread-2.0.so.0 used by libgnomevfs-2.so.0 is\n> > > g_thread_init(), since g_thread_got_initialized is true now, it isn't\n> > > called, so ref count doesn't change?\n> > \n> > Is that an optimization of the solaris dynamic linker?\n> \n> I think the reason is the dependencies of libgnomevgs-2.so are marked as\n> LAZYLOAD on Solaris.\n> If I set LD_NOLAZYLOAD, this bug doesn't happen.\n> \n> > \n> > > 4) dlclose libxul.so, libgthread-2.0.so.0 is also unloaded.\n> > \n> > why should it, if gnomevfs is still loaded, which should keep gthread alive\n> > at least through glib?\n> \n> gnomevfs will keep glib alive.\n> gthread depends on glib, but glib doesn't depend on gthread, what keeps\n> gthread alive?\n\nSo, from what I gather from your comments (not looked at the code), the real problem is that gthread registers callbacks to its functions in glib, but doesn't unregisters them when it is unloaded. Maybe that's not possible at all, but that does seem like a recipe for disaster.\n\nI guess you could change the dlopen call for gnomevfs to have the RTLD_NOW flag, which is more than LD_NOLAZYLOAD would do, aiui, but still be a good tradeoff.", "bug_id": 675585, "count": 8}, {"bug_id": 675585, "count": 9, "author": "ginnchen+exoracle@gmail.com", "creation_time": "2011-08-03T07:50:35Z", "time": "2011-08-03T07:50:35Z", "tags": [], "text": "(In reply to comment #8)\n\n> So, from what I gather from your comments (not looked at the code), the real\n> problem is that gthread registers callbacks to its functions in glib, but\n> doesn't unregisters them when it is unloaded. Maybe that's not possible at\n> all, but that does seem like a recipe for disaster.\n> \n> I guess you could change the dlopen call for gnomevfs to have the RTLD_NOW\n> flag, which is more than LD_NOLAZYLOAD would do, aiui, but still be a good\n> tradeoff.\n\ngnome_vfs_init() is called by gnome_program_init(), which is called by nsNativeAppSupportUnix::Start().\n\nWe didn't do dlopen gnomevfs at that time.", "creator": "ginnchen+exoracle@gmail.com", "is_private": false, "id": 5629877, "attachment_id": null, "raw_text": "(In reply to comment #8)\n\n> So, from what I gather from your comments (not looked at the code), the real\n> problem is that gthread registers callbacks to its functions in glib, but\n> doesn't unregisters them when it is unloaded. Maybe that's not possible at\n> all, but that does seem like a recipe for disaster.\n> \n> I guess you could change the dlopen call for gnomevfs to have the RTLD_NOW\n> flag, which is more than LD_NOLAZYLOAD would do, aiui, but still be a good\n> tradeoff.\n\ngnome_vfs_init() is called by gnome_program_init(), which is called by nsNativeAppSupportUnix::Start().\n\nWe didn't do dlopen gnomevfs at that time."}, {"count": 10, "bug_id": 675585, "raw_text": "How old is gnome on solaris ? libgnome hasn't dependended on libgnomevfs for a while...", "attachment_id": null, "id": 5629881, "is_private": false, "creator": "mh+mozilla@glandium.org", "text": "How old is gnome on solaris ? libgnome hasn't dependended on libgnomevfs for a while...", "tags": [], "time": "2011-08-03T07:54:22Z", "creation_time": "2011-08-03T07:54:22Z", "author": "mh+mozilla@glandium.org"}, {"author": "mh+mozilla@glandium.org", "creation_time": "2011-08-03T07:55:19Z", "tags": [], "time": "2011-08-03T07:55:19Z", "text": "(In reply to comment #9)\n> We didn't do dlopen gnomevfs at that time.\n\nWouldn't RTLD_NOW still trigger binding, though ?", "creator": "mh+mozilla@glandium.org", "is_private": false, "id": 5629882, "attachment_id": null, "raw_text": "(In reply to comment #9)\n> We didn't do dlopen gnomevfs at that time.\n\nWouldn't RTLD_NOW still trigger binding, though ?", "bug_id": 675585, "count": 11}, {"raw_text": "(In reply to comment #10)\n> How old is gnome on solaris ? libgnome hasn't dependended on libgnomevfs for\n> a while...\n\nGNOME 2.30.2(In reply to comment #11)\n\n> (In reply to comment #9)\n> > We didn't do dlopen gnomevfs at that time.\n> \n> Wouldn't RTLD_NOW still trigger binding, though ?\n\nYes.", "attachment_id": null, "id": 5629922, "count": 12, "creator": "ginnchen+exoracle@gmail.com", "is_private": false, "time": "2011-08-03T08:30:19Z", "tags": [], "bug_id": 675585, "text": "(In reply to comment #10)\n> How old is gnome on solaris ? libgnome hasn't dependended on libgnomevfs for\n> a while...\n\nGNOME 2.30.2(In reply to comment #11)\n\n> (In reply to comment #9)\n> > We didn't do dlopen gnomevfs at that time.\n> \n> Wouldn't RTLD_NOW still trigger binding, though ?\n\nYes.", "author": "ginnchen+exoracle@gmail.com", "creation_time": "2011-08-03T08:30:19Z"}, {"text": "(In reply to comment #12)\n> > Wouldn't RTLD_NOW still trigger binding, though ?\n> \n> Yes.\n\nThen doesn't it work?", "time": "2011-08-03T08:40:27Z", "bug_id": 675585, "tags": [], "creation_time": "2011-08-03T08:40:27Z", "author": "mh+mozilla@glandium.org", "count": 13, "is_private": false, "creator": "mh+mozilla@glandium.org", "id": 5629929, "raw_text": "(In reply to comment #12)\n> > Wouldn't RTLD_NOW still trigger binding, though ?\n> \n> Yes.\n\nThen doesn't it work?", "attachment_id": null}, {"raw_text": "(In reply to comment #13)\n> (In reply to comment #12)\n> > > Wouldn't RTLD_NOW still trigger binding, though ?\n> > \n> > Yes.\n> \n> Then doesn't it work?\n\nWhat are you suggesting?\nUse RTLD_NOW for all lib in nsGlueLinkingDlOpen.cpp?\ndlopen gnomevfs with RTLD_NOW in nsGlueLinkingDlOpen.cpp?", "attachment_id": null, "id": 5629953, "count": 14, "creator": "ginnchen+exoracle@gmail.com", "is_private": false, "tags": [], "time": "2011-08-03T09:13:59Z", "bug_id": 675585, "text": "(In reply to comment #13)\n> (In reply to comment #12)\n> > > Wouldn't RTLD_NOW still trigger binding, though ?\n> > \n> > Yes.\n> \n> Then doesn't it work?\n\nWhat are you suggesting?\nUse RTLD_NOW for all lib in nsGlueLinkingDlOpen.cpp?\ndlopen gnomevfs with RTLD_NOW in nsGlueLinkingDlOpen.cpp?", "author": "ginnchen+exoracle@gmail.com", "creation_time": "2011-08-03T09:13:59Z"}, {"raw_text": "AFAIK, gnomevfs is only dlload()ed from\nmodules/libpr0n/decoders/icon/gtk/nsIconChannel.cpp, which uses PR_LoadLibrary. Note there is a PR_LoadLibraryWithFlags function that take a PR_LD_NOW flag corresponding to RTLD_NOW.\nThe other places that require it are libmozgnome.so and libnkgnomevfs.so, where it is linked to these components.", "attachment_id": null, "id": 5629982, "count": 15, "creator": "mh+mozilla@glandium.org", "is_private": false, "tags": [], "bug_id": 675585, "time": "2011-08-03T09:24:29Z", "text": "AFAIK, gnomevfs is only dlload()ed from\nmodules/libpr0n/decoders/icon/gtk/nsIconChannel.cpp, which uses PR_LoadLibrary. Note there is a PR_LoadLibraryWithFlags function that take a PR_LD_NOW flag corresponding to RTLD_NOW.\nThe other places that require it are libmozgnome.so and libnkgnomevfs.so, where it is linked to these components.", "author": "mh+mozilla@glandium.org", "creation_time": "2011-08-03T09:24:29Z"}, {"raw_text": "Note modules/libpr0n/decoders/icon/gtk/nsIconChannel.cpp does unload the library on shutdown, so it would still be a problem. See bug 379666 for another place where gnome libraries hit us with atexit.", "attachment_id": null, "id": 5629986, "count": 16, "is_private": false, "creator": "mh+mozilla@glandium.org", "text": "Note modules/libpr0n/decoders/icon/gtk/nsIconChannel.cpp does unload the library on shutdown, so it would still be a problem. See bug 379666 for another place where gnome libraries hit us with atexit.", "time": "2011-08-03T09:27:34Z", "bug_id": 675585, "tags": [], "creation_time": "2011-08-03T09:27:34Z", "author": "mh+mozilla@glandium.org"}, {"id": 5629993, "attachment_id": null, "raw_text": "We didn't reach that far yet.\n\nWe just do gnome_program_init(), libgnome will load libgnomevfs and do gnome_vfs_init().", "creation_time": "2011-08-03T09:29:46Z", "author": "ginnchen+exoracle@gmail.com", "text": "We didn't reach that far yet.\n\nWe just do gnome_program_init(), libgnome will load libgnomevfs and do gnome_vfs_init().", "tags": [], "time": "2011-08-03T09:29:46Z", "bug_id": 675585, "is_private": false, "creator": "ginnchen+exoracle@gmail.com", "count": 17}, {"author": "mh+mozilla@glandium.org", "creation_time": "2011-08-03T09:32:38Z", "tags": [], "time": "2011-08-03T09:32:38Z", "bug_id": 675585, "text": "(In reply to comment #17)\n> We didn't reach that far yet.\n> \n> We just do gnome_program_init(), libgnome will load libgnomevfs and do\n> gnome_vfs_init().\n\nWhich comes back to the question from comment 11. Wouldn't dlopen(RTDL_NOW) trigger binding, even when the library is already loaded (lazily)?", "creator": "mh+mozilla@glandium.org", "is_private": false, "count": 18, "id": 5629997, "attachment_id": null, "raw_text": "(In reply to comment #17)\n> We didn't reach that far yet.\n> \n> We just do gnome_program_init(), libgnome will load libgnomevfs and do\n> gnome_vfs_init().\n\nWhich comes back to the question from comment 11. Wouldn't dlopen(RTDL_NOW) trigger binding, even when the library is already loaded (lazily)?"}, {"tags": [], "time": "2011-08-03T09:48:17Z", "text": "I think it will.\nBut \"firefox-bin -no-remote -process-updates\" will not get into nsIconChannel.", "author": "ginnchen+exoracle@gmail.com", "creation_time": "2011-08-03T09:48:17Z", "creator": "ginnchen+exoracle@gmail.com", "is_private": false, "id": 5630020, "raw_text": "I think it will.\nBut \"firefox-bin -no-remote -process-updates\" will not get into nsIconChannel.", "attachment_id": null, "bug_id": 675585, "count": 19}, {"attachment_id": null, "raw_text": "Quick note... the -process-updates command line flag was added to the startup code so we can test applying an update using each app's build without launching the app and is not meant to be used anywhere else in case this makes a difference.", "id": 5630025, "creator": "robert.strong.bugs@gmail.com", "is_private": false, "author": "robert.strong.bugs@gmail.com", "creation_time": "2011-08-03T09:51:31Z", "time": "2011-08-03T09:51:31Z", "tags": [], "text": "Quick note... the -process-updates command line flag was added to the startup code so we can test applying an update using each app's build without launching the app and is not meant to be used anywhere else in case this makes a difference.", "count": 20, "bug_id": 675585}, {"count": 21, "bug_id": 675585, "is_private": false, "creator": "mh+mozilla@glandium.org", "creation_time": "2011-08-03T09:56:24Z", "author": "mh+mozilla@glandium.org", "text": "(In reply to comment #19)\n> I think it will.\n> But \"firefox-bin -no-remote -process-updates\" will not get into\n> nsIconChannel.\n\nWell, -process-updates probably doesn't need to initialize gnome before processing the updates...", "time": "2011-08-03T09:56:24Z", "tags": [], "attachment_id": null, "raw_text": "(In reply to comment #19)\n> I think it will.\n> But \"firefox-bin -no-remote -process-updates\" will not get into\n> nsIconChannel.\n\nWell, -process-updates probably doesn't need to initialize gnome before processing the updates...", "id": 5630030}, {"raw_text": "If I do \"firefox -P\" and press exit, it doesn't crash.\nFrom the ld log, I found dist/bin/components/*.so hold handles to libxul.so, so libxul.so is never deleted, also libgnomeui-2, libgnome2, libgconf-2, libdbus-glib-1, ... hold handles to libgthread-2.0.so, so libgthread-2.0.so is never deleted.\n\nIt's kind of tricky.", "attachment_id": null, "id": 5630248, "count": 22, "creator": "ginnchen+exoracle@gmail.com", "is_private": false, "tags": [], "bug_id": 675585, "time": "2011-08-03T13:28:46Z", "text": "If I do \"firefox -P\" and press exit, it doesn't crash.\nFrom the ld log, I found dist/bin/components/*.so hold handles to libxul.so, so libxul.so is never deleted, also libgnomeui-2, libgnome2, libgconf-2, libdbus-glib-1, ... hold handles to libgthread-2.0.so, so libgthread-2.0.so is never deleted.\n\nIt's kind of tricky.", "author": "ginnchen+exoracle@gmail.com", "creation_time": "2011-08-03T13:28:46Z"}, {"count": 23, "creator": "robert.strong.bugs@gmail.com", "is_private": false, "tags": [], "time": "2013-01-30T18:27:46Z", "bug_id": 675585, "text": "Moving to startup where this code actually lives (e.g. toolkit/xre).", "author": "robert.strong.bugs@gmail.com", "creation_time": "2013-01-30T18:27:46Z", "raw_text": "Moving to startup where this code actually lives (e.g. toolkit/xre).", "attachment_id": null, "id": 7054289}]}}, "comments": {}}