{"comments": {}, "bugs": {"687751": {"comments": [{"bug_id": 687751, "count": 0, "id": 5724665, "attachment_id": 561096, "raw_text": "", "creation_time": "2011-09-20T01:48:51Z", "author": "wonder@riseup.net", "text": "Created attachment 561096\nXHTML file containing two MathML test cases, in separate rows.", "time": "2011-09-20T01:48:51Z", "tags": [], "is_private": false, "creator": "wonder@riseup.net"}, {"bug_id": 687751, "count": 1, "id": 5724667, "attachment_id": 561098, "raw_text": "", "author": "wonder@riseup.net", "creation_time": "2011-09-20T01:50:28Z", "time": "2011-09-20T01:50:28Z", "tags": [], "text": "Created attachment 561098\nscreenshot of test cases in current nightly Firefox (9.0a1)", "creator": "wonder@riseup.net", "is_private": false}, {"id": 5724810, "attachment_id": null, "raw_text": "Maybe I'm not using bugzilla right, but my description of this bug seems to be missing.\n\nThe bug report is that in some cases the parentheses are too tall or too short.  In the first row of the test case, they are too tall.  This happens when something tall is somewhere else in the math element - in this case, presumably the summation operators.  In the second row, the parentheses are too short.  I think in both cases they should be just big enough to enclose uppercase letters.", "author": "wonder@riseup.net", "creation_time": "2011-09-20T03:48:36Z", "time": "2011-09-20T03:48:36Z", "tags": [], "bug_id": 687751, "text": "Maybe I'm not using bugzilla right, but my description of this bug seems to be missing.\n\nThe bug report is that in some cases the parentheses are too tall or too short.  In the first row of the test case, they are too tall.  This happens when something tall is somewhere else in the math element - in this case, presumably the summation operators.  In the second row, the parentheses are too short.  I think in both cases they should be just big enough to enclose uppercase letters.", "creator": "wonder@riseup.net", "is_private": false, "count": 2}, {"creation_time": "2011-09-20T05:16:29Z", "author": "karlt@mozbugz.karlt.net", "text": "I see two different issues here.\n\n1. The parentheses in the same mrow as the summations are as high as the\n   summation with embellishments.  This is a little odd because, if the\n   summation were stretched, the embellishments would not be considered in the\n   stretched height of the summation and so would extend beyond the height of\n   any other characters.\n\n   That raises the question as to whether the embellishments should be\n   considered when determining the height for the stretches in the mrow.  The\n   spec does not say the embellishments should be excluded at this stage of\n   the process, but there is some sense in treating the embellishments\n   consistently, and there is code that tries to do this.\n   http://hg.mozilla.org/mozilla-central/annotate/648d084ca28e/layout/mathml/nsMathMLContainerFrame.cpp#l982\n\n2. The parentheses opening and closing the mfenced should be no smaller than\n   their normal height.  This is specific to mfenced (doesn't happen with mo),\n   and would be due to not considering the height of the fences in the\n   stretch.  This is covered by bug 670334.\n\n(In reply to wonder@riseup.net from comment #2)\n> This happens\n> when something tall is somewhere else in the math element.\n\nThis is what is meant to happen when something else is in the same mrow.  Additional mrows should be used if there are stretchy elements that should not stretch to the same height.\n\nI'll keep this bug open to discuss issue 1 above.", "time": "2011-09-20T05:16:29Z", "bug_id": 687751, "tags": [], "is_private": false, "creator": "karlt@mozbugz.karlt.net", "count": 3, "id": 5724881, "attachment_id": null, "raw_text": "I see two different issues here.\n\n1. The parentheses in the same mrow as the summations are as high as the\n   summation with embellishments.  This is a little odd because, if the\n   summation were stretched, the embellishments would not be considered in the\n   stretched height of the summation and so would extend beyond the height of\n   any other characters.\n\n   That raises the question as to whether the embellishments should be\n   considered when determining the height for the stretches in the mrow.  The\n   spec does not say the embellishments should be excluded at this stage of\n   the process, but there is some sense in treating the embellishments\n   consistently, and there is code that tries to do this.\n   http://hg.mozilla.org/mozilla-central/annotate/648d084ca28e/layout/mathml/nsMathMLContainerFrame.cpp#l982\n\n2. The parentheses opening and closing the mfenced should be no smaller than\n   their normal height.  This is specific to mfenced (doesn't happen with mo),\n   and would be due to not considering the height of the fences in the\n   stretch.  This is covered by bug 670334.\n\n(In reply to wonder@riseup.net from comment #2)\n> This happens\n> when something tall is somewhere else in the math element.\n\nThis is what is meant to happen when something else is in the same mrow.  Additional mrows should be used if there are stretchy elements that should not stretch to the same height.\n\nI'll keep this bug open to discuss issue 1 above."}, {"attachment_id": null, "raw_text": "> This is what is meant to happen when something else is in the\n> same mrow.  Additional mrows should be used if there are\n> stretchy elements that should not stretch to the same height.\n\nInteresting.  The markup is generated by LaTeXML, so I'll submit this as a bug to LaTeXML.", "id": 5724885, "is_private": false, "creator": "wonder@riseup.net", "count": 4, "creation_time": "2011-09-20T05:23:04Z", "author": "wonder@riseup.net", "text": "> This is what is meant to happen when something else is in the\n> same mrow.  Additional mrows should be used if there are\n> stretchy elements that should not stretch to the same height.\n\nInteresting.  The markup is generated by LaTeXML, so I'll submit this as a bug to LaTeXML.", "tags": [], "time": "2011-09-20T05:23:04Z", "bug_id": 687751}, {"id": 5724900, "attachment_id": 561123, "raw_text": "This attachment demonstrates the inconsistency depending on the depth of\nembellishments as identified here:\nhttp://hg.mozilla.org/mozilla-central/annotate/648d084ca28e/layout/mathml/nsMathMLContainerFrame.cpp#l269\n\nI think the code is trying to achieve the result in the bottom equation.\n\nI prefer the look of the outer parentheses in the top equation, and an\nadditional mrow is probably appropriate for the inner parentheses.\nThis is what STRETCH_CONSIDER_EMBELLISHMENTS does in the mfenced\nimplemenation, which should be the same as the mrow.\nhttp://hg.mozilla.org/mozilla-central/annotate/648d084ca28e/layout/mathml/nsMathMLmfencedFrame.cpp#l345\n\nHowever, considering all embellishments when determining sizes but not when\nstretching would lead to an algorithm that always stretches embellished\noperators beyond their normal size.\n\nIf we were to follow the spec literally we would not consider sizes of\nstretchy operators, but that leads to bug 670334.", "creation_time": "2011-09-20T05:47:12Z", "author": "karlt@mozbugz.karlt.net", "text": "Created attachment 561123\ninconsistency of stretching near embellished operators\n\nThis attachment demonstrates the inconsistency depending on the depth of\nembellishments as identified here:\nhttp://hg.mozilla.org/mozilla-central/annotate/648d084ca28e/layout/mathml/nsMathMLContainerFrame.cpp#l269\n\nI think the code is trying to achieve the result in the bottom equation.\n\nI prefer the look of the outer parentheses in the top equation, and an\nadditional mrow is probably appropriate for the inner parentheses.\nThis is what STRETCH_CONSIDER_EMBELLISHMENTS does in the mfenced\nimplemenation, which should be the same as the mrow.\nhttp://hg.mozilla.org/mozilla-central/annotate/648d084ca28e/layout/mathml/nsMathMLmfencedFrame.cpp#l345\n\nHowever, considering all embellishments when determining sizes but not when\nstretching would lead to an algorithm that always stretches embellished\noperators beyond their normal size.\n\nIf we were to follow the spec literally we would not consider sizes of\nstretchy operators, but that leads to bug 670334.", "tags": [], "time": "2011-09-20T05:47:12Z", "bug_id": 687751, "is_private": false, "creator": "karlt@mozbugz.karlt.net", "count": 5}, {"author": "karlt@mozbugz.karlt.net", "creation_time": "2011-09-20T05:50:41Z", "time": "2011-09-20T05:50:41Z", "tags": [], "bug_id": 687751, "text": "Created attachment 561124\ninconsistency of stretching near embellished operators\n\nSlightly better example.", "creator": "karlt@mozbugz.karlt.net", "is_private": false, "count": 6, "id": 5724902, "attachment_id": 561124, "raw_text": "Slightly better example."}]}}}