{"comments": {}, "bugs": {"690259": {"comments": [{"tags": [], "text": "Created attachment 563330\ntest-objects.html\n\nUser Agent: Mozilla/5.0 (Windows NT 5.1) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/13.0.782.107 Safari/535.1\n\nSteps to reproduce:\n\n1 - Define a read/write data property on HTMLObjectElement.prototype by calling :\nObject.defineProperty(HTMLObjectElement.prototype, \"aTest\", {value: \"aval\", writable: true, enumerable:true, configurable:true});\n2 - Get an instance 'instance_1' of HTMLObjectElement : instance_1 = document.getElementById('object_1');\n3 - Change the property value of instance_1 : instance_1.aTest = \"newval\"\n4 - Read the property aTest of instance_1 : instance_1.aTest -> returns \"newval\" : OK\n5 - Get another instance 'instance_2' of HTMLObjectElement : instance_2 = document.getElementById('object_2');\n6 - Read the property aTest of instance_2 : instance_2.aTest -> returns \"newval\" : NOK (should return 'aval')\n\nThis works a expected on user-defined object (see My on file attached) et other DOM prototypes (ex: HTMLDivElement.prototype)\n\n\nActual results:\n\nAll instances have aTest property value changed\n\n\nExpected results:\n\nOnly instance_1 should have its aTest property value changed", "bug_id": 690259, "raw_text": "User Agent: Mozilla/5.0 (Windows NT 5.1) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/13.0.782.107 Safari/535.1\n\nSteps to reproduce:\n\n1 - Define a read/write data property on HTMLObjectElement.prototype by calling :\nObject.defineProperty(HTMLObjectElement.prototype, \"aTest\", {value: \"aval\", writable: true, enumerable:true, configurable:true});\n2 - Get an instance 'instance_1' of HTMLObjectElement : instance_1 = document.getElementById('object_1');\n3 - Change the property value of instance_1 : instance_1.aTest = \"newval\"\n4 - Read the property aTest of instance_1 : instance_1.aTest -> returns \"newval\" : OK\n5 - Get another instance 'instance_2' of HTMLObjectElement : instance_2 = document.getElementById('object_2');\n6 - Read the property aTest of instance_2 : instance_2.aTest -> returns \"newval\" : NOK (should return 'aval')\n\nThis works a expected on user-defined object (see My on file attached) et other DOM prototypes (ex: HTMLDivElement.prototype)\n\n\nActual results:\n\nAll instances have aTest property value changed\n\n\nExpected results:\n\nOnly instance_1 should have its aTest property value changed", "attachment_id": 563330, "author": "vincent.cariven@atosorigin.com", "creator": "vincent.cariven@atosorigin.com", "time": "2011-09-29T07:50:05Z", "creation_time": "2011-09-29T07:50:05Z", "is_private": false, "count": 0, "id": 5745473}, {"creator": "vincent.cariven@atosorigin.com", "time": "2011-09-30T08:07:55Z", "creation_time": "2011-09-30T08:07:55Z", "author": "vincent.cariven@atosorigin.com", "is_private": false, "id": 5748887, "count": 1, "bug_id": 690259, "text": "Created attachment 563686\nModified previously attachment to have a more visual result without console api", "tags": [], "attachment_id": 563686, "raw_text": ""}, {"attachment_id": null, "raw_text": "<object> elements have a class hook that makes property sets of properties found on the direct prototype set the property on the prototype itself.  Presumably this is something to do with the fact that when the plug-in actually has a scriptable object this sits on the proto chain between the element instance and HTMLObjectElement.prototype.\n\nThere's a get hook that does similar things.\n\nPresumably both should check for the actual existence of the extra scriptable prototype...\n\nccing peter, since the new bindings work will just make all this code go away as far as I can tell.", "tags": [], "text": "<object> elements have a class hook that makes property sets of properties found on the direct prototype set the property on the prototype itself.  Presumably this is something to do with the fact that when the plug-in actually has a scriptable object this sits on the proto chain between the element instance and HTMLObjectElement.prototype.\n\nThere's a get hook that does similar things.\n\nPresumably both should check for the actual existence of the extra scriptable prototype...\n\nccing peter, since the new bindings work will just make all this code go away as far as I can tell.", "bug_id": 690259, "count": 2, "id": 5749598, "is_private": false, "creation_time": "2011-09-30T15:33:31Z", "time": "2011-09-30T15:33:31Z", "creator": "bzbarsky@mit.edu", "author": "bzbarsky@mit.edu"}, {"is_private": false, "id": 13435915, "count": 3, "author": "bug-husbandry-bot@mozilla.bugs", "creator": "bug-husbandry-bot@mozilla.bugs", "time": "2018-06-29T04:48:42Z", "creation_time": "2018-06-29T04:48:42Z", "raw_text": "https://bugzilla.mozilla.org/show_bug.cgi?id=1472046\n\nMove all DOM bugs that haven\u2019t been updated in more than 3 years and has no one currently assigned to P5.\n\nIf you have questions, please contact :mdaly.", "attachment_id": null, "tags": [], "text": "https://bugzilla.mozilla.org/show_bug.cgi?id=1472046\n\nMove all DOM bugs that haven\u2019t been updated in more than 3 years and has no one currently assigned to P5.\n\nIf you have questions, please contact :mdaly.", "bug_id": 690259}]}}}