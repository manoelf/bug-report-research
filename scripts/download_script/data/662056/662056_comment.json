{"comments": {}, "bugs": {"662056": {"comments": [{"bug_id": 662056, "id": 5513395, "tags": [], "is_private": false, "count": 0, "time": "2011-06-04T15:50:24Z", "attachment_id": null, "text": "The \"move\" filter action is both the most common action, as well as the most disruptive, as it deletes the underlying message. Unfortunately, if you have other filter actions on the same message that require the message body (such as printing, attachment detach, saving the message as a file, etc.) then you enter a race condition, so either the move fails or the other action fails.\n\nIn FiltaQuilla I have experimented with a workaround for this in an action I call \"move later\". With this, I set a property on the nsIMsgDBHdr for the object called \"moveLaterCount\". This count is incremented by the filter action that needs the body, and decremented when the async action is completed. When the count reaches zero, the move later is initiated.\n\nFor this to be more transparent to the user, that same functionality should be implemented in the core \"Move\" filter action.", "creation_time": "2011-06-04T15:50:24Z", "raw_text": "The \"move\" filter action is both the most common action, as well as the most disruptive, as it deletes the underlying message. Unfortunately, if you have other filter actions on the same message that require the message body (such as printing, attachment detach, saving the message as a file, etc.) then you enter a race condition, so either the move fails or the other action fails.\n\nIn FiltaQuilla I have experimented with a workaround for this in an action I call \"move later\". With this, I set a property on the nsIMsgDBHdr for the object called \"moveLaterCount\". This count is incremented by the filter action that needs the body, and decremented when the async action is completed. When the count reaches zero, the move later is initiated.\n\nFor this to be more transparent to the user, that same functionality should be implemented in the core \"Move\" filter action.", "author": "rkent@caspia.com", "creator": "rkent@caspia.com"}, {"creator": "mozilla@davidbienvenu.org", "author": "mozilla@davidbienvenu.org", "bug_id": 662056, "count": 1, "is_private": false, "tags": [], "id": 5513403, "text": "This is dealt with in the core code by making sure the move action is the last action performed, after all the other actions have finished. But, if you introduce async actions, but apply the actions synchronously, this breaks down.", "attachment_id": null, "time": "2011-06-04T16:13:12Z", "creation_time": "2011-06-04T16:13:12Z", "raw_text": "This is dealt with in the core code by making sure the move action is the last action performed, after all the other actions have finished. But, if you introduce async actions, but apply the actions synchronously, this breaks down."}, {"creation_time": "2011-06-04T17:58:09Z", "raw_text": "> But, if you introduce async actions, but apply the actions synchronously, this breaks down.\n\nRight. The moveLater functionality deals with this breakdown by callbacks from the async actions that then trigger the move, if the moveLaterCount is zero.", "time": "2011-06-04T17:58:09Z", "attachment_id": null, "text": "> But, if you introduce async actions, but apply the actions synchronously, this breaks down.\n\nRight. The moveLater functionality deals with this breakdown by callbacks from the async actions that then trigger the move, if the moveLaterCount is zero.", "id": 5513484, "tags": [], "is_private": false, "count": 2, "bug_id": 662056, "author": "rkent@caspia.com", "creator": "rkent@caspia.com"}, {"is_private": false, "count": 3, "tags": [], "id": 5515476, "bug_id": 662056, "raw_text": "Actually perhaps a better idea, and the one that I can make work more reliably, is to do the move first, and apply the other filters after the move.\n\nI've experimented with this concept with a detach attachments action, which is really tricky because it changes the message URI. Very difficult with moveLater, works really well with applying filter after the move.\n\nIn FiltaQuilla, I have a new \"folder name\" search term, and in IMAP you have to enable incoming filters on the destination folder, and setup the complex filter action (like detachAttachments) to only apply if the folder name matches. This is way beyond the capabilities of the average user, while applying the filters after the move in core would be pretty straightforward to implement.", "creation_time": "2011-06-06T17:53:19Z", "text": "Actually perhaps a better idea, and the one that I can make work more reliably, is to do the move first, and apply the other filters after the move.\n\nI've experimented with this concept with a detach attachments action, which is really tricky because it changes the message URI. Very difficult with moveLater, works really well with applying filter after the move.\n\nIn FiltaQuilla, I have a new \"folder name\" search term, and in IMAP you have to enable incoming filters on the destination folder, and setup the complex filter action (like detachAttachments) to only apply if the folder name matches. This is way beyond the capabilities of the average user, while applying the filters after the move in core would be pretty straightforward to implement.", "time": "2011-06-06T17:53:19Z", "attachment_id": null, "creator": "rkent@caspia.com", "author": "rkent@caspia.com"}, {"is_private": false, "count": 4, "tags": [], "id": 5843561, "bug_id": 662056, "raw_text": "Hi, any news on this enhancement?", "creation_time": "2011-11-11T21:08:32Z", "text": "Hi, any news on this enhancement?", "time": "2011-11-11T21:08:32Z", "attachment_id": null, "creator": "acelists@atlas.sk", "author": "acelists@atlas.sk"}, {"author": "rkent@caspia.com", "creator": "rkent@caspia.com", "attachment_id": null, "time": "2011-11-12T07:04:19Z", "text": "(In reply to :aceman from comment #4)\n> Hi, any news on this enhancement?\n\nI have not done any further work on this recently, though the issue remains.", "raw_text": "(In reply to :aceman from comment #4)\n> Hi, any news on this enhancement?\n\nI have not done any further work on this recently, though the issue remains.", "creation_time": "2011-11-12T07:04:19Z", "bug_id": 662056, "id": 5844424, "tags": [], "is_private": false, "count": 5}, {"time": "2018-07-11T10:11:33Z", "attachment_id": null, "text": "It will be great if someone could pick this up.\n\nAre these bugs involved?  bug 1071628, bug 1096096, bug 589092, bug 971401", "raw_text": "It will be great if someone could pick this up.\n\nAre these bugs involved?  bug 1071628, bug 1096096, bug 589092, bug 971401", "creation_time": "2018-07-11T10:11:33Z", "bug_id": 662056, "id": 13462760, "tags": [], "count": 6, "is_private": false, "author": "vseerror@lehigh.edu", "creator": "vseerror@lehigh.edu"}]}}}