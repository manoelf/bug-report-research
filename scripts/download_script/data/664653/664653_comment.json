{"bugs": {"664653": {"comments": [{"bug_id": 664653, "id": 5535890, "is_private": false, "creation_time": "2011-06-16T03:38:45Z", "creator": "m_kato@ga2.so-net.ne.jp", "count": 0, "text": "This API was introduced by bug 182954.  At that time, it was implemented in nsContentUtils.\n\nNow, it is moved to Preferenece (libpref). So I think that we can remove ValueObserver and hash table\uff53 to replace with calling PREF_* function directly.", "author": "m_kato@ga2.so-net.ne.jp", "tags": [], "time": "2011-06-16T03:38:45Z", "raw_text": "This API was introduced by bug 182954.  At that time, it was implemented in nsContentUtils.\n\nNow, it is moved to Preferenece (libpref). So I think that we can remove ValueObserver and hash table\uff53 to replace with calling PREF_* function directly.", "attachment_id": null}, {"time": "2011-06-16T04:12:45Z", "raw_text": "Note that last I checked the coalescing that this API does (that is, NOT actually registering a function anew each time an observer is added) was key for good performance.  Will that still be the case with direct PREF_* usage?", "attachment_id": null, "tags": [], "creator": "bzbarsky@mit.edu", "count": 1, "text": "Note that last I checked the coalescing that this API does (that is, NOT actually registering a function anew each time an observer is added) was key for good performance.  Will that still be the case with direct PREF_* usage?", "author": "bzbarsky@mit.edu", "id": 5535925, "bug_id": 664653, "is_private": false, "creation_time": "2011-06-16T04:12:45Z"}, {"creator": "bzbarsky@mit.edu", "creation_time": "2011-06-16T04:22:01Z", "is_private": false, "attachment_id": null, "tags": [], "author": "bzbarsky@mit.edu", "count": 2, "text": "In particular, see bug 561076.", "bug_id": 664653, "id": 5535937, "raw_text": "In particular, see bug 561076.", "time": "2011-06-16T04:22:01Z"}, {"creator": "m_kato@ga2.so-net.ne.jp", "author": "m_kato@ga2.so-net.ne.jp", "count": 3, "text": "PREF_* is used into libpref only.\n\nWhen observer callback register using Preference::RegisterCallback, That callback info is stored into ValueObserver, nsPrefBranch.mObservers and gCallbacks into prefapi.cpp.  If Preference::RegisterCallback calls PREF_RegisterCallback directly, it is stored into gCallbacks only.\n\nOriginally, Preference::RegisterCallback is the replacement of nsIPref::RegisterCallback that is removed by bug 175193 and bug 524449.  This XPCOM method was calling PREF_RegisterCallback only.", "id": 5536071, "bug_id": 664653, "is_private": false, "creation_time": "2011-06-16T06:40:11Z", "time": "2011-06-16T06:40:11Z", "attachment_id": null, "raw_text": "PREF_* is used into libpref only.\n\nWhen observer callback register using Preference::RegisterCallback, That callback info is stored into ValueObserver, nsPrefBranch.mObservers and gCallbacks into prefapi.cpp.  If Preference::RegisterCallback calls PREF_RegisterCallback directly, it is stored into gCallbacks only.\n\nOriginally, Preference::RegisterCallback is the replacement of nsIPref::RegisterCallback that is removed by bug 175193 and bug 524449.  This XPCOM method was calling PREF_RegisterCallback only.", "tags": []}, {"creator": "bzbarsky@mit.edu", "author": "bzbarsky@mit.edu", "count": 4, "text": "> If Preference::RegisterCallback calls PREF_RegisterCallback directly, it is\n> stored into gCallbacks only.\n\nThat doesn't answer my question.  I understand where things are stored, but note that right now there is ONE entry in gCallbacks for each set of calls to Preference::RegisterCallback with the same callback info.  You're proposing changing that to storing lots of entries in gCallbacks, but gCallbacks manipulation is ridiculously slow because its design is crappy (it does linear searches with string compares on every item, for example).  In fact, as far as I can tell from reading PREF_UnregisterCallback making this change would in fact regress bug 561076.  And these exact issues were clearly described in the bug 561076 comments...", "bug_id": 664653, "id": 5536914, "is_private": false, "creation_time": "2011-06-16T16:59:31Z", "time": "2011-06-16T16:59:31Z", "attachment_id": null, "raw_text": "> If Preference::RegisterCallback calls PREF_RegisterCallback directly, it is\n> stored into gCallbacks only.\n\nThat doesn't answer my question.  I understand where things are stored, but note that right now there is ONE entry in gCallbacks for each set of calls to Preference::RegisterCallback with the same callback info.  You're proposing changing that to storing lots of entries in gCallbacks, but gCallbacks manipulation is ridiculously slow because its design is crappy (it does linear searches with string compares on every item, for example).  In fact, as far as I can tell from reading PREF_UnregisterCallback making this change would in fact regress bug 561076.  And these exact issues were clearly described in the bug 561076 comments...", "tags": []}, {"time": "2011-06-16T17:00:37Z", "raw_text": "To be clear, we need to either redesign how gCallbacks works before fixing this bug or wontfix this bug.  In my opinion, of course.", "id": 5536916, "bug_id": 664653, "count": 5, "text": "To be clear, we need to either redesign how gCallbacks works before fixing this bug or wontfix this bug.  In my opinion, of course.", "author": "bzbarsky@mit.edu", "tags": [], "attachment_id": null, "creation_time": "2011-06-16T17:00:37Z", "is_private": false, "creator": "bzbarsky@mit.edu"}]}}, "comments": {}}