{"bugs": {"1631856": {"comments": [{"id": 14769827, "text": "## Proposal for changing an existing or adding a new Glean metric type\n\n### Who is the individual/team requesting this change?\nFrank Bertsch\n\n### Is this about changing an existing metric type or creating a new one?\nCreating a new metric type\n\n### Can you describe the data that needs to be recorded?\nThis issue is for recording rates. Rates are essentially two counters; one for the numerator and one for the denominator. Take an example from [application services](https://github.com/mozilla/application-services/blob/master/components/places/android/metrics.yaml). They record the `read_query_count` and `read_query_error_count`, and use that to ascertain the read query error rate.\n\nIt is possible to create this from existing metrics, but the big win here would be enabling this data in GLAM, and having solid ways of querying it in BQ,\n\nThings to consider:\n- Can we use existing counters as parts of the rate? i.e. define a rate, with the denominator being an already-collected counter.\n- Can we define the rate abstraction on top of existing metrics, without every implementing it in the ping? i.e. use counters for numerator and denominator. (difficulty is how to query with this)\n\n### Can you provide a raw sample of the data that needs to be recorded (this is in the abstract, and not any particular implementation details about its representation in the payload or the database)\nHere's another - % of page loads that are reader mode capable. Fraction of url bar presses that search.\n\n### What is the business question/use-case that requires the data to be recorded?\nSee above.\n\n### How would the data be consumed?\n1. GLAM dashboard especially would show rates with client experience of each rate.\n2. BQ querying would have some nice UDFs to make this easy.\n\n### Why existing metric types are not enough?\nLots of custom SQL, cannot see these in GLAM.\n\n### What is the timeline by which the data needs to be collected?\nNo timeline.", "creator": "fbertsch@mozilla.com", "attachment_id": null, "creation_time": "2020-04-21T17:38:09Z", "bug_id": 1631856, "tags": [], "is_private": false, "count": 0, "author": "fbertsch@mozilla.com", "time": "2020-04-21T17:38:09Z", "raw_text": "## Proposal for changing an existing or adding a new Glean metric type\n\n### Who is the individual/team requesting this change?\nFrank Bertsch\n\n### Is this about changing an existing metric type or creating a new one?\nCreating a new metric type\n\n### Can you describe the data that needs to be recorded?\nThis issue is for recording rates. Rates are essentially two counters; one for the numerator and one for the denominator. Take an example from [application services](https://github.com/mozilla/application-services/blob/master/components/places/android/metrics.yaml). They record the `read_query_count` and `read_query_error_count`, and use that to ascertain the read query error rate.\n\nIt is possible to create this from existing metrics, but the big win here would be enabling this data in GLAM, and having solid ways of querying it in BQ,\n\nThings to consider:\n- Can we use existing counters as parts of the rate? i.e. define a rate, with the denominator being an already-collected counter.\n- Can we define the rate abstraction on top of existing metrics, without every implementing it in the ping? i.e. use counters for numerator and denominator. (difficulty is how to query with this)\n\n### Can you provide a raw sample of the data that needs to be recorded (this is in the abstract, and not any particular implementation details about its representation in the payload or the database)\nHere's another - % of page loads that are reader mode capable. Fraction of url bar presses that search.\n\n### What is the business question/use-case that requires the data to be recorded?\nSee above.\n\n### How would the data be consumed?\n1. GLAM dashboard especially would show rates with client experience of each rate.\n2. BQ querying would have some nice UDFs to make this easy.\n\n### Why existing metric types are not enough?\nLots of custom SQL, cannot see these in GLAM.\n\n### What is the timeline by which the data needs to be collected?\nNo timeline."}, {"author": "alessio.placitelli@gmail.com", "is_private": false, "count": 1, "bug_id": 1631856, "tags": [], "raw_text": "This is the [discussion document](https://docs.google.com/document/d/1HqOgg8ca2vd3RWzmQkDTZrNtIARORzYPSO_BTDjAppA/edit#heading=h.ud5srjlyv72o) for the new metric type proposal.", "time": "2020-05-04T09:02:11Z", "id": 14795248, "text": "This is the [discussion document](https://docs.google.com/document/d/1HqOgg8ca2vd3RWzmQkDTZrNtIARORzYPSO_BTDjAppA/edit#heading=h.ud5srjlyv72o) for the new metric type proposal.", "creation_time": "2020-05-04T09:02:11Z", "creator": "alessio.placitelli@gmail.com", "attachment_id": null}, {"raw_text": "Mike, can you designate the initial set of people required to work on the design stage of this?", "time": "2020-05-04T09:17:35Z", "author": "alessio.placitelli@gmail.com", "tags": [], "bug_id": 1631856, "is_private": false, "count": 2, "creation_time": "2020-05-04T09:17:35Z", "attachment_id": null, "creator": "alessio.placitelli@gmail.com", "id": 14795260, "text": "Mike, can you designate the initial set of people required to work on the design stage of this?"}, {"text": "Note: Let's involve Emilio, who's been working on CSS use counters, since this is the metric type that will power them in Firefox after FOG is completed.", "id": 14795856, "creation_time": "2020-05-04T14:27:47Z", "creator": "alessio.placitelli@gmail.com", "attachment_id": null, "author": "alessio.placitelli@gmail.com", "bug_id": 1631856, "tags": [], "is_private": false, "count": 3, "raw_text": "Note: Let's involve Emilio, who's been working on CSS use counters, since this is the metric type that will power them in Firefox after FOG is completed.", "time": "2020-05-04T14:27:47Z"}, {"id": 14796043, "text": "Assigning :travis_ for the design work.", "creation_time": "2020-05-04T15:57:55Z", "attachment_id": null, "creator": "mdroettboom@mozilla.com", "author": "mdroettboom@mozilla.com", "bug_id": 1631856, "tags": [], "is_private": false, "count": 4, "raw_text": "Assigning :travis_ for the design work.", "time": "2020-05-04T15:57:55Z"}, {"text": "Hey Emilio, Dexter thought you should be involved due to the CSS use counters that you have been working on.  I thought I would ni? you and see if you have any input on the design of a rate/ratio metric type for Glean.\n\n<edit>  It has been brought to my attention that it might be a little early for this input...    clearing the ni? and will ask for comments later.  Sorry for the noise.  :)", "id": 14797711, "creation_time": "2020-05-05T12:35:32Z", "creator": "tlong@mozilla.com", "attachment_id": null, "author": "tlong@mozilla.com", "count": 5, "is_private": false, "tags": [], "bug_id": 1631856, "raw_text": "Hey Emilio, Dexter thought you should be involved due to the CSS use counters that you have been working on.  I thought I would ni? you and see if you have any input on the design of a rate/ratio metric type for Glean.\n\n<edit>  It has been brought to my attention that it might be a little early for this input...    clearing the ni? and will ask for comments later.  Sorry for the noise.  :)", "time": "2020-05-05T12:35:32Z"}, {"id": 14802716, "text": "Hey Frank, I'm thinking about the design for this and I had questions:\n\n1. From a query/parsing perspective, does it make it make sense to transmit this as a floating point type (i.e. calculated by the client), or would it be more useful/convenient to see the numerator and denominator as distinct in the data?  \n2. If we did use a floating point type, is there a preference on width?  I'm guessing that a Float64 would be the most compatible with the BigQuery but I don't want to make things difficult if another type/format would work better for ingestion.", "creation_time": "2020-05-07T15:29:07Z", "attachment_id": null, "creator": "tlong@mozilla.com", "author": "tlong@mozilla.com", "is_private": false, "count": 6, "bug_id": 1631856, "tags": [], "raw_text": "Hey Frank, I'm thinking about the design for this and I had questions:\n\n1. From a query/parsing perspective, does it make it make sense to transmit this as a floating point type (i.e. calculated by the client), or would it be more useful/convenient to see the numerator and denominator as distinct in the data?  \n2. If we did use a floating point type, is there a preference on width?  I'm guessing that a Float64 would be the most compatible with the BigQuery but I don't want to make things difficult if another type/format would work better for ingestion.", "time": "2020-05-07T15:29:07Z"}, {"text": "> 1. From a query/parsing perspective, does it make it make sense to transmit this as a floating point type (i.e. calculated by the client), or would it be more useful/convenient to see the numerator and denominator as distinct in the data?  \n> 2. If we did use a floating point type, is there a preference on width?  I'm guessing that a Float64 would be the most compatible with the BigQuery but I don't want to make things difficult if another type/format would work better for ingestion.\n\nWe definitely want to transfer this as two ints. Otherwise we have no way to aggregate this on our end (unless we include a weight, but I would consider that more confusing, and not as accurate).", "id": 14802847, "attachment_id": null, "creator": "fbertsch@mozilla.com", "creation_time": "2020-05-07T16:26:07Z", "count": 7, "is_private": false, "tags": [], "bug_id": 1631856, "author": "fbertsch@mozilla.com", "time": "2020-05-07T16:26:07Z", "raw_text": "> 1. From a query/parsing perspective, does it make it make sense to transmit this as a floating point type (i.e. calculated by the client), or would it be more useful/convenient to see the numerator and denominator as distinct in the data?  \n> 2. If we did use a floating point type, is there a preference on width?  I'm guessing that a Float64 would be the most compatible with the BigQuery but I don't want to make things difficult if another type/format would work better for ingestion.\n\nWe definitely want to transfer this as two ints. Otherwise we have no way to aggregate this on our end (unless we include a weight, but I would consider that more confusing, and not as accurate)."}, {"id": 14805650, "text": "DS comments are here: https://docs.google.com/document/d/1PLLVQTRmmz18sAZKsvylggNT1uYcHEQhP-hklIHLSM4/edit\n\nI could not edit the gdoc proposal to add this link to that.", "creator": "sguha@mozilla.com", "attachment_id": null, "creation_time": "2020-05-08T21:47:46Z", "bug_id": 1631856, "tags": [], "count": 8, "is_private": false, "author": "sguha@mozilla.com", "time": "2020-05-08T21:47:46Z", "raw_text": "DS comments are here: https://docs.google.com/document/d/1PLLVQTRmmz18sAZKsvylggNT1uYcHEQhP-hklIHLSM4/edit\n\nI could not edit the gdoc proposal to add this link to that."}, {"is_private": false, "count": 9, "bug_id": 1631856, "tags": [], "id": 14805659, "text": "Copied from above google doc\n\nThe assumption is the thing being measured is A/B. Storing just a computed ratio without context can be misleading. And if one needs to store both A and B\n\n- how is this better than the DS accessing A and B in their original locations? \n- Will this improve querying ergonomics?\n\nA type that can handle something beyond times and counts such as rates is a nice thing to have. But merely reporting rates is not enough. A rate needs context.\n\n- The ratio R = A/B can be NA/undefined  if A and B are zero. There might be different handling to compute ratio when B is zero. So the DS would need to know The value of B. \n- if R is negative (bad data) why? it could be A or B so the DS needs to access A, B\n- how to aggregate R across pings? Simple average does not weight clients, if you want to weight clients you\u2019d  need to know B.\n- Also 1/1 is not the \u201csame\u201d as 50/50\n- In many cases, B is the number of samples so encodes information about the variance of the rate\n- FLOAT types  are useful for things naturally float and not computed ratios e.g. statistical model coefficients , (think federated learning, correlation coefficients, functions that return floats etc) but this discussion is not about float types but about ratios.\n- I don\u2019t understand why we can\u2019t have this in Glam.  Is it ingesting events directly with no post processing? That doesn\u2019t feel right.  It would provide more flexibility unless you want this all \u2018for free\u2019.(not sure how said this)\n\nSo if the desire is to report a rate why not merely query numerator and denominator and compute rates remotely. Per Frank\u2019s comments, it appears from an ergonomics point of view(difficulty writing SQL). The purpose is so GLAM can directly read these metrics and plot them. This definitely has merit, though the GLAM team needs to be aware of the bullets raised above.\n\nWith that said, storing tuples of numbers can make sense (in other words a \u2018struct\u2019 type). And one use for that would be computing rates (and having information in the struct) would solve the issues raised above. I think using the word \u2018rate\u2019 is too specific, but a struct type might resolve general needs i.e. storing related bit of information in one easily accessible place. For example, in some DS explorations, storing a struct of sum of a histogram values and total counts rather than just mean is useful. It solves ergonomics, and the GLAM use case described above(they could include the ratio as an element in the struct but this means glean needs to support floats)\n\n[tdsmith] Having a way to encode that a specific counter is the denominator for another counter sounds useful; it\u2019s often ambiguous in desktop telemetry. Creating a new data type representing a pair of integers feels like a loss of generality; these are all integers representing a count. I allege that there\u2019s often a many-to-one relationship between numerators and a denominator. Some other kind of annotation that a specific count is a subset of another might provide the same benefit as a new data type", "author": "sguha@mozilla.com", "creator": "sguha@mozilla.com", "attachment_id": null, "time": "2020-05-08T21:52:37Z", "raw_text": "Copied from above google doc\n\nThe assumption is the thing being measured is A/B. Storing just a computed ratio without context can be misleading. And if one needs to store both A and B\n\n- how is this better than the DS accessing A and B in their original locations? \n- Will this improve querying ergonomics?\n\nA type that can handle something beyond times and counts such as rates is a nice thing to have. But merely reporting rates is not enough. A rate needs context.\n\n- The ratio R = A/B can be NA/undefined  if A and B are zero. There might be different handling to compute ratio when B is zero. So the DS would need to know The value of B. \n- if R is negative (bad data) why? it could be A or B so the DS needs to access A, B\n- how to aggregate R across pings? Simple average does not weight clients, if you want to weight clients you\u2019d  need to know B.\n- Also 1/1 is not the \u201csame\u201d as 50/50\n- In many cases, B is the number of samples so encodes information about the variance of the rate\n- FLOAT types  are useful for things naturally float and not computed ratios e.g. statistical model coefficients , (think federated learning, correlation coefficients, functions that return floats etc) but this discussion is not about float types but about ratios.\n- I don\u2019t understand why we can\u2019t have this in Glam.  Is it ingesting events directly with no post processing? That doesn\u2019t feel right.  It would provide more flexibility unless you want this all \u2018for free\u2019.(not sure how said this)\n\nSo if the desire is to report a rate why not merely query numerator and denominator and compute rates remotely. Per Frank\u2019s comments, it appears from an ergonomics point of view(difficulty writing SQL). The purpose is so GLAM can directly read these metrics and plot them. This definitely has merit, though the GLAM team needs to be aware of the bullets raised above.\n\nWith that said, storing tuples of numbers can make sense (in other words a \u2018struct\u2019 type). And one use for that would be computing rates (and having information in the struct) would solve the issues raised above. I think using the word \u2018rate\u2019 is too specific, but a struct type might resolve general needs i.e. storing related bit of information in one easily accessible place. For example, in some DS explorations, storing a struct of sum of a histogram values and total counts rather than just mean is useful. It solves ergonomics, and the GLAM use case described above(they could include the ratio as an element in the struct but this means glean needs to support floats)\n\n[tdsmith] Having a way to encode that a specific counter is the denominator for another counter sounds useful; it\u2019s often ambiguous in desktop telemetry. Creating a new data type representing a pair of integers feels like a loss of generality; these are all integers representing a count. I allege that there\u2019s often a many-to-one relationship between numerators and a denominator. Some other kind of annotation that a specific count is a subset of another might provide the same benefit as a new data type", "creation_time": "2020-05-08T21:52:37Z"}, {"time": "2020-05-09T05:43:58Z", "raw_text": "(In reply to \"Saptarshi Guha[:joy]\" from comment #8)\n> DS comments are here: https://docs.google.com/document/d/1PLLVQTRmmz18sAZKsvylggNT1uYcHEQhP-hklIHLSM4/edit\n> \n> I could not edit the gdoc proposal to add this link to that.\n\nYou now have write-access. Sorry for the inconvenience.", "tags": [], "bug_id": 1631856, "count": 10, "is_private": false, "author": "alessio.placitelli@gmail.com", "attachment_id": null, "creator": "alessio.placitelli@gmail.com", "creation_time": "2020-05-09T05:43:58Z", "id": 14805968, "text": "(In reply to \"Saptarshi Guha[:joy]\" from comment #8)\n> DS comments are here: https://docs.google.com/document/d/1PLLVQTRmmz18sAZKsvylggNT1uYcHEQhP-hklIHLSM4/edit\n> \n> I could not edit the gdoc proposal to add this link to that.\n\nYou now have write-access. Sorry for the inconvenience."}, {"creation_time": "2020-05-14T15:01:06Z", "raw_text": "I've added the design to the main document.  Untaking this bug for the next contributor's portion.", "time": "2020-05-14T15:01:06Z", "attachment_id": null, "creator": "tlong@mozilla.com", "author": "tlong@mozilla.com", "text": "I've added the design to the main document.  Untaking this bug for the next contributor's portion.", "id": 14819538, "tags": [], "bug_id": 1631856, "count": 11, "is_private": false}, {"bug_id": 1631856, "tags": [], "is_private": false, "count": 12, "author": "alessio.placitelli@gmail.com", "time": "2020-05-18T13:51:42Z", "raw_text": "Hey folks,\n\nthe [discussion document](https://docs.google.com/document/d/1HqOgg8ca2vd3RWzmQkDTZrNtIARORzYPSO_BTDjAppA/edit#heading=h.ud5srjlyv72o) is in *design* stage and the design was completed by Travis Long.\n\nPlease review the design and flag any major concern on it.", "id": 14828523, "text": "Hey folks,\n\nthe [discussion document](https://docs.google.com/document/d/1HqOgg8ca2vd3RWzmQkDTZrNtIARORzYPSO_BTDjAppA/edit#heading=h.ud5srjlyv72o) is in *design* stage and the design was completed by Travis Long.\n\nPlease review the design and flag any major concern on it.", "creator": "alessio.placitelli@gmail.com", "attachment_id": null, "creation_time": "2020-05-18T13:51:42Z"}, {"author": "alessio.placitelli@gmail.com", "text": "See comment 12.", "id": 14828784, "count": 13, "is_private": false, "bug_id": 1631856, "tags": [], "raw_text": "See comment 12.", "creation_time": "2020-05-18T16:13:58Z", "creator": "alessio.placitelli@gmail.com", "attachment_id": null, "time": "2020-05-18T16:13:58Z"}, {"creator": "jrediger@mozilla.com", "attachment_id": null, "creation_time": "2020-05-20T08:01:50Z", "id": 14832693, "text": "Left my comments there and flagged travis for questions.", "time": "2020-05-20T08:01:50Z", "raw_text": "Left my comments there and flagged travis for questions.", "bug_id": 1631856, "tags": [], "count": 14, "is_private": false, "author": "jrediger@mozilla.com"}, {"id": 14833685, "text": "LGTM left my comments in the doc", "attachment_id": null, "creator": "msamuel@mozilla.com", "creation_time": "2020-05-20T15:15:05Z", "bug_id": 1631856, "tags": [], "is_private": false, "count": 15, "author": "msamuel@mozilla.com", "time": "2020-05-20T15:15:05Z", "raw_text": "LGTM left my comments in the doc"}, {"text": "Hey folks,\n\n[the document](https://docs.google.com/document/d/1HqOgg8ca2vd3RWzmQkDTZrNtIARORzYPSO_BTDjAppA/edit#) moved from `design` to `comment` stage. It is ready for one final look. Final feedback due by June 5th, 2020.\n\nIf that looks good to you, please sign off at the top of the document.", "id": 14851850, "author": "alessio.placitelli@gmail.com", "bug_id": 1631856, "tags": [], "is_private": false, "count": 16, "creation_time": "2020-05-29T15:40:46Z", "raw_text": "Hey folks,\n\n[the document](https://docs.google.com/document/d/1HqOgg8ca2vd3RWzmQkDTZrNtIARORzYPSO_BTDjAppA/edit#) moved from `design` to `comment` stage. It is ready for one final look. Final feedback due by June 5th, 2020.\n\nIf that looks good to you, please sign off at the top of the document.", "time": "2020-05-29T15:40:46Z", "attachment_id": null, "creator": "alessio.placitelli@gmail.com"}, {"creation_time": "2020-05-29T15:48:01Z", "raw_text": "Hi Tim,\n\nwe need data-steward review for the attached proposal. Please check the related Data-Steward section at the top of the document. More information about this process [here](https://wiki.mozilla.org/Glean/Adding_or_changing_Glean_metric_types).", "creator": "alessio.placitelli@gmail.com", "attachment_id": 9152758, "time": "2020-05-29T15:48:01Z", "author": "alessio.placitelli@gmail.com", "text": "Created attachment 9152758\n\"rate\" metric type design doc\n\nHi Tim,\n\nwe need data-steward review for the attached proposal. Please check the related Data-Steward section at the top of the document. More information about this process [here](https://wiki.mozilla.org/Glean/Adding_or_changing_Glean_metric_types).", "id": 14851871, "count": 17, "is_private": false, "tags": [], "bug_id": 1631856}, {"text": "Created attachment 9152796\n\"rate\" metric type design doc\n\nhm, wonder why it decided the url was a binary attachment. here's another go; &shrug;", "id": 14852075, "attachment_id": 9152796, "creator": "bugzilla@tds.xyz", "creation_time": "2020-05-29T17:11:47Z", "bug_id": 1631856, "tags": [], "count": 18, "is_private": false, "author": "bugzilla@tds.xyz", "time": "2020-05-29T17:11:47Z", "raw_text": "hm, wonder why it decided the url was a binary attachment. here's another go; &shrug;"}, {"creation_time": "2020-06-02T07:54:31Z", "attachment_id": null, "creator": "jrediger@mozilla.com", "text": "One last concern about the error reporting, but otherwise no blocker from my side.", "id": 14857469, "raw_text": "One last concern about the error reporting, but otherwise no blocker from my side.", "time": "2020-06-02T07:54:31Z", "author": "jrediger@mozilla.com", "tags": [], "bug_id": 1631856, "count": 19, "is_private": false}, {"id": 14870000, "text": "I've signed off at the top", "creation_time": "2020-06-08T17:22:42Z", "creator": "msamuel@mozilla.com", "attachment_id": null, "author": "msamuel@mozilla.com", "is_private": false, "count": 20, "tags": [], "bug_id": 1631856, "raw_text": "I've signed off at the top", "time": "2020-06-08T17:22:42Z"}, {"creator": "alessio.placitelli@gmail.com", "attachment_id": null, "creation_time": "2020-06-10T15:07:38Z", "id": 14874316, "text": "Hey Mike, looks like everybody signed-off on this document. It's your turn now to decide if the proposal is approved or rejected. Please update the document accordingly and also comment on the bug with the outcome. Thanks!", "time": "2020-06-10T15:07:38Z", "raw_text": "Hey Mike, looks like everybody signed-off on this document. It's your turn now to decide if the proposal is approved or rejected. Please update the document accordingly and also comment on the bug with the outcome. Thanks!", "count": 21, "is_private": false, "bug_id": 1631856, "tags": [], "author": "alessio.placitelli@gmail.com"}, {"time": "2020-06-11T19:49:52Z", "raw_text": "Approved!  Bug 1645166 was created to track its implementation.", "is_private": false, "count": 22, "bug_id": 1631856, "tags": [], "author": "mdroettboom@mozilla.com", "creator": "mdroettboom@mozilla.com", "attachment_id": null, "creation_time": "2020-06-11T19:49:52Z", "id": 14877006, "text": "Approved!  Bug 1645166 was created to track its implementation."}]}}, "comments": {}}