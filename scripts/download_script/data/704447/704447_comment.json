{"bugs": {"704447": {"comments": [{"creator": "jduell.mcbugs@gmail.com", "author": "jduell.mcbugs@gmail.com", "count": 0, "is_private": false, "tags": [], "id": 5864998, "bug_id": 704447, "raw_text": "Bug 676439 is adding the binary API for both arraybuffers and blobs, but for large files it will be inefficient and will block the socket transport thread for longer than it ought to.   This bug is to implement proper nonblocking IO to read/write blobs as they come in/out.", "creation_time": "2011-11-22T10:56:32Z", "text": "Bug 676439 is adding the binary API for both arraybuffers and blobs, but for large files it will be inefficient and will block the socket transport thread for longer than it ought to.   This bug is to implement proper nonblocking IO to read/write blobs as they come in/out.", "time": "2011-11-22T10:56:32Z", "attachment_id": null}, {"bug_id": 704447, "count": 1, "is_private": false, "tags": [], "id": 5921026, "text": "A tricky part here is that we can only do non-blocking IO when we return a Blob. That means that we should only stream to disk if someone sets .binaryType=\"blob\".\n\nThe trickier part is that we have to deal with the situation that someone might change .binaryType from \"blob\" to \"arraybuffer\" between when we start receiving data and when we fire the event.\n\nIn that case we need to postpone the event (and any later incoming message packets) until we've read all the data into memory.", "attachment_id": null, "time": "2011-12-16T03:11:10Z", "creation_time": "2011-12-16T03:11:10Z", "raw_text": "A tricky part here is that we can only do non-blocking IO when we return a Blob. That means that we should only stream to disk if someone sets .binaryType=\"blob\".\n\nThe trickier part is that we have to deal with the situation that someone might change .binaryType from \"blob\" to \"arraybuffer\" between when we start receiving data and when we fire the event.\n\nIn that case we need to postpone the event (and any later incoming message packets) until we've read all the data into memory.", "creator": "jonas@sicking.cc", "author": "jonas@sicking.cc"}, {"attachment_id": null, "time": "2012-05-24T18:35:36Z", "text": "I talked to Jonas about this and he suggested that we avoid doing anything to make WebSockets blobs disk-backed at least until we have better infrastructure in place for controlling how disk space is used by websites. In particular, Jonas noted that it is less important to support huge WebSockets messages than huge XHR blobs because with WebSockets the server should have a lot more control over the messages, and it is probably the case that the server can just break the blob into smaller pieces as necessary.\n\nAlso, I think (and I think Jonas agreed) that we should support the ability to stream websockets messages off the network, which might further reduce the usefulness of having disk-backed blobs for WebSockets.\n\nPersonally, I think we should just avoid doing disk-backed blobs at all for WebSockets, because WebSockets doesn't really need them (AFAICT) for anything that the application couldn't do itself (especially with the File API and/or IndexedDB), and because WebSockets doesn't have anything like Cache-Control:no-store like XHR has, so we don't have enough information to decide whether it is safe to store the data on disk.\n\nOTOH, Jason made a good point that the developer can just avoid using the Blob type if he wants \"no-store\" semantics.\n\nStill, I agree with Jonas that this is not an urgent thing that we need to address soon.", "creation_time": "2012-05-24T18:35:36Z", "raw_text": "I talked to Jonas about this and he suggested that we avoid doing anything to make WebSockets blobs disk-backed at least until we have better infrastructure in place for controlling how disk space is used by websites. In particular, Jonas noted that it is less important to support huge WebSockets messages than huge XHR blobs because with WebSockets the server should have a lot more control over the messages, and it is probably the case that the server can just break the blob into smaller pieces as necessary.\n\nAlso, I think (and I think Jonas agreed) that we should support the ability to stream websockets messages off the network, which might further reduce the usefulness of having disk-backed blobs for WebSockets.\n\nPersonally, I think we should just avoid doing disk-backed blobs at all for WebSockets, because WebSockets doesn't really need them (AFAICT) for anything that the application couldn't do itself (especially with the File API and/or IndexedDB), and because WebSockets doesn't have anything like Cache-Control:no-store like XHR has, so we don't have enough information to decide whether it is safe to store the data on disk.\n\nOTOH, Jason made a good point that the developer can just avoid using the Blob type if he wants \"no-store\" semantics.\n\nStill, I agree with Jonas that this is not an urgent thing that we need to address soon.", "bug_id": 704447, "id": 6335655, "is_private": false, "count": 2, "tags": [], "author": "brian@briansmith.org", "creator": "brian@briansmith.org"}, {"time": "2012-05-24T18:49:12Z", "attachment_id": null, "text": "> I talked to Jonas about this and he suggested that we avoid doing anything to\n> make WebSockets blobs disk-backed at least until we have better infrastructure\n> in place for controlling how disk space is used by websites.\n\nOK, I'm fine with that.  So for now I'm going to limit this bug to a special case that still merits optimization: AFAICT Websockets can still be told to send() a file-backed Blob (such as a file JS gets from a user-selected file dialog) of arbitrary size.  At the moment, we read such Blobs into RAM in a blocking call on the socket transport thread.  That's better than doing on the main thread, but we can do better using nsIStreamTransportService.\n\nNote that XHR/Http also block the socket thread during large file uploads, and have been for years: see bug 690633:  so while websocket's doing it too is suboptimal, I don't know that this needs to be a high priority fix: I'm inclined to resolve other websockets API correctness issues and bugs first.", "creation_time": "2012-05-24T18:49:12Z", "raw_text": "> I talked to Jonas about this and he suggested that we avoid doing anything to\n> make WebSockets blobs disk-backed at least until we have better infrastructure\n> in place for controlling how disk space is used by websites.\n\nOK, I'm fine with that.  So for now I'm going to limit this bug to a special case that still merits optimization: AFAICT Websockets can still be told to send() a file-backed Blob (such as a file JS gets from a user-selected file dialog) of arbitrary size.  At the moment, we read such Blobs into RAM in a blocking call on the socket transport thread.  That's better than doing on the main thread, but we can do better using nsIStreamTransportService.\n\nNote that XHR/Http also block the socket thread during large file uploads, and have been for years: see bug 690633:  so while websocket's doing it too is suboptimal, I don't know that this needs to be a high priority fix: I'm inclined to resolve other websockets API correctness issues and bugs first.", "bug_id": 704447, "id": 6335723, "is_private": false, "count": 3, "tags": [], "author": "jduell.mcbugs@gmail.com", "creator": "jduell.mcbugs@gmail.com"}, {"bug_id": 704447, "tags": [], "count": 4, "is_private": false, "id": 12657805, "creator": "bug-husbandry-bot@mozilla.bugs", "text": "Bulk change to priority: https://bugzilla.mozilla.org/show_bug.cgi?id=1399258", "author": "bug-husbandry-bot@mozilla.bugs", "attachment_id": null, "time": "2017-09-13T18:34:40Z", "raw_text": "Bulk change to priority: https://bugzilla.mozilla.org/show_bug.cgi?id=1399258", "creation_time": "2017-09-13T18:34:40Z"}, {"attachment_id": null, "time": "2017-09-13T18:46:58Z", "text": "Bulk change to priority: https://bugzilla.mozilla.org/show_bug.cgi?id=1399258", "raw_text": "Bulk change to priority: https://bugzilla.mozilla.org/show_bug.cgi?id=1399258", "creation_time": "2017-09-13T18:46:58Z", "bug_id": 704447, "id": 12659361, "tags": [], "count": 5, "is_private": false, "author": "bug-husbandry-bot@mozilla.bugs", "creator": "bug-husbandry-bot@mozilla.bugs"}]}}, "comments": {}}