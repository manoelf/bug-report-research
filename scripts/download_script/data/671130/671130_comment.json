{"comments": {}, "bugs": {"671130": {"comments": [{"creator": "philipp@weitershausen.de", "author": "philipp@weitershausen.de", "creation_time": "2011-07-13T00:15:27Z", "raw_text": "sdwilsh kindly did a drive-by review on RESTRequest in bug 669547 comment 12:\n> Comment on attachment 544373 [details] [review]\n> Implement RESTResource etc. (v2)\n> \n> Review of attachment 544373 [details] [review]:\n> -----------------------------------------------------------------\n> \n> FWIW, I don't think this is good enough yet to be taken into toolkit or\n> network as-is.\n> \n> ::: services/sync/modules/rest.js\n> @@ +100,5 @@\n> > + *       return;\n> > + *     }\n> > + *     // Process body data and reset it so we don't process the same data twice.\n> > + *     processIncrementalData(this.response.body);\n> > + *     this.response.body = \"\";\n> \n> Why are you setting this to the empty string?\n> \n> @@ +160,5 @@\n> > +   * Flag to indicate the status of the request.\n> > +   *\n> > +   * One of NOT_SENT, SENT, IN_PROGRESS, COMPLETED, ABORTED.\n> > +   */\n> > +  status: null,\n> \n> Shouldn't this default to `NOT_SENT`?\n> \n> @@ +174,5 @@\n> > +   * up to millisecond granularity.)\n> > +   *\n> > +   * 0 for no timeout.\n> > +   */\n> > +  timeout: null,\n> \n> Shouldn't this default to `0`, not `null`?\n> \n> @@ +182,5 @@\n> > +   * timeouts.\n> > +   * \n> > +   * @param error\n> > +   *        Error that occurred while making the request, null if there\n> > +   *        was no error.\n> \n> More details on what the error object looks like would be nice here.\n> \n> @@ +269,5 @@\n> > +   * Abort an active request.\n> > +   */\n> > +  abort: function abort() {\n> > +    if (this.status != this.SENT && this.status != this.IN_PROGRESS) {\n> > +      throw \"Can only abort a request that has been sent.\";\n> \n> You should really construct an error object with `Components.Exception` and\n> not throw a string.\n> \n> @@ +285,5 @@\n> > +  /*** Implementation stuff ***/\n> > +\n> > +  dispatch: function dispatch(method, data, onComplete, onProgress) {\n> > +    if (this.status != this.NOT_SENT) {\n> > +      throw \"Request has already been sent!\";\n> \n> same here\n> \n> @@ +301,5 @@\n> > +    let channel = Services.io.newChannelFromURI(this.uri, null, null)\n> > +                          .QueryInterface(Ci.nsIRequest)\n> > +                          .QueryInterface(Ci.nsIHttpChannel);\n> > +    this.channel = channel;\n> > +    channel.loadFlags |= this.loadFlags;\n> \n> It would be useful to warn on any invalid channel flags here.  Probably also\n> useful to log the flags you are setting.\n> \n> @@ +307,5 @@\n> > +\n> > +    // Set request headers.\n> > +    let headers = this._headers;\n> > +    for (let key in headers) {\n> > +      if (key == 'authorization') {\n> \n> magic strings should be pulled into constants, FWIW\n> \n> @@ +429,5 @@\n> > +    }\n> > +\n> > +    delete this._inputStream;\n> > +\n> > +    this.onComplete(null);\n> \n> Why are you explicitly passing `null` here instead of letting it be\n> `undefined`?\n> \n> @@ +470,5 @@\n> > +\n> > +  notifyCertProblem: function notifyCertProblem(socketInfo, sslStatus, targetHost) {\n> > +    this._log.warn(\"Invalid HTTPS certificate encountered!\");\n> > +    // Suppress invalid HTTPS certificate warnings in the UI.\n> > +    // (The request will still fail.)\n> \n> You should have a test for this.  I don't see one.", "text": "sdwilsh kindly did a drive-by review on RESTRequest in bug 669547 comment 12:\n> Comment on attachment 544373 [details] [review]\n> Implement RESTResource etc. (v2)\n> \n> Review of attachment 544373 [details] [review]:\n> -----------------------------------------------------------------\n> \n> FWIW, I don't think this is good enough yet to be taken into toolkit or\n> network as-is.\n> \n> ::: services/sync/modules/rest.js\n> @@ +100,5 @@\n> > + *       return;\n> > + *     }\n> > + *     // Process body data and reset it so we don't process the same data twice.\n> > + *     processIncrementalData(this.response.body);\n> > + *     this.response.body = \"\";\n> \n> Why are you setting this to the empty string?\n> \n> @@ +160,5 @@\n> > +   * Flag to indicate the status of the request.\n> > +   *\n> > +   * One of NOT_SENT, SENT, IN_PROGRESS, COMPLETED, ABORTED.\n> > +   */\n> > +  status: null,\n> \n> Shouldn't this default to `NOT_SENT`?\n> \n> @@ +174,5 @@\n> > +   * up to millisecond granularity.)\n> > +   *\n> > +   * 0 for no timeout.\n> > +   */\n> > +  timeout: null,\n> \n> Shouldn't this default to `0`, not `null`?\n> \n> @@ +182,5 @@\n> > +   * timeouts.\n> > +   * \n> > +   * @param error\n> > +   *        Error that occurred while making the request, null if there\n> > +   *        was no error.\n> \n> More details on what the error object looks like would be nice here.\n> \n> @@ +269,5 @@\n> > +   * Abort an active request.\n> > +   */\n> > +  abort: function abort() {\n> > +    if (this.status != this.SENT && this.status != this.IN_PROGRESS) {\n> > +      throw \"Can only abort a request that has been sent.\";\n> \n> You should really construct an error object with `Components.Exception` and\n> not throw a string.\n> \n> @@ +285,5 @@\n> > +  /*** Implementation stuff ***/\n> > +\n> > +  dispatch: function dispatch(method, data, onComplete, onProgress) {\n> > +    if (this.status != this.NOT_SENT) {\n> > +      throw \"Request has already been sent!\";\n> \n> same here\n> \n> @@ +301,5 @@\n> > +    let channel = Services.io.newChannelFromURI(this.uri, null, null)\n> > +                          .QueryInterface(Ci.nsIRequest)\n> > +                          .QueryInterface(Ci.nsIHttpChannel);\n> > +    this.channel = channel;\n> > +    channel.loadFlags |= this.loadFlags;\n> \n> It would be useful to warn on any invalid channel flags here.  Probably also\n> useful to log the flags you are setting.\n> \n> @@ +307,5 @@\n> > +\n> > +    // Set request headers.\n> > +    let headers = this._headers;\n> > +    for (let key in headers) {\n> > +      if (key == 'authorization') {\n> \n> magic strings should be pulled into constants, FWIW\n> \n> @@ +429,5 @@\n> > +    }\n> > +\n> > +    delete this._inputStream;\n> > +\n> > +    this.onComplete(null);\n> \n> Why are you explicitly passing `null` here instead of letting it be\n> `undefined`?\n> \n> @@ +470,5 @@\n> > +\n> > +  notifyCertProblem: function notifyCertProblem(socketInfo, sslStatus, targetHost) {\n> > +    this._log.warn(\"Invalid HTTPS certificate encountered!\");\n> > +    // Suppress invalid HTTPS certificate warnings in the UI.\n> > +    // (The request will still fail.)\n> \n> You should have a test for this.  I don't see one.", "attachment_id": null, "time": "2011-07-13T00:15:27Z", "count": 0, "is_private": false, "tags": [], "id": 5588018, "bug_id": 671130}, {"id": 5588042, "tags": [], "count": 1, "is_private": false, "bug_id": 671130, "creation_time": "2011-07-13T00:27:34Z", "raw_text": "> FWIW, I don't think this is good enough yet to be taken into toolkit or\n> network as-is.\n\nBecause of the things you mentioned here, or because of other things?\n\n> > + *       return;\n> > + *     }\n> > + *     // Process body data and reset it so we don't process the same data twice.\n> > + *     processIncrementalData(this.response.body);\n> > + *     this.response.body = \"\";\n> \n> Why are you setting this to the empty string?\n\n(Note: this is just the example in the comment.)\n\nI'm resetting the string so that processIncrementalData() would only ever get the new data from onStartRequest passed in. I suppose I could alter the example in a way that would not have us modify this.response.body. But having the ability to truncate 'body' as we process it is quite useful in terms of memory efficiency. E.g. with Sync it can happen that we download several megabytes in one go and there's no need to keep that whole string in memory.\n\n> @@ +160,5 @@\n> > +   * Flag to indicate the status of the request.\n> > +   *\n> > +   * One of NOT_SENT, SENT, IN_PROGRESS, COMPLETED, ABORTED.\n> > +   */\n> > +  status: null,\n> \n> Shouldn't this default to `NOT_SENT`?\n\nYeah, good point. I could set it to NOT_SENT here and save a line in the constructor.\n\n> > +   * up to millisecond granularity.)\n> > +   *\n> > +   * 0 for no timeout.\n> > +   */\n> > +  timeout: null,\n> \n> Shouldn't this default to `0`, not `null`?\n\nCould do that, yeah.\n\n> > +   * timeouts.\n> > +   * \n> > +   * @param error\n> > +   *        Error that occurred while making the request, null if there\n> > +   *        was no error.\n> \n> More details on what the error object looks like would be nice here.\n\nIt will be a Components.Exception (so I guess an nsIXPCException). I'll add that to the comment.\n\n> > +    }\n> > +\n> > +    delete this._inputStream;\n> > +\n> > +    this.onComplete(null);\n> \n> Why are you explicitly passing `null` here instead of letting it be\n> `undefined`?\n\nTo explicitly acknowledge the existence of the 'error' parameter. If we passed nothing (=undefined), it could easily be confused with an actual bug, since JS defaults to undefined for uninitialized vars, parameters and missing attributes. Using 'null' means we know the parameter exists but we don't have a value for it.\n\n> > +  notifyCertProblem: function notifyCertProblem(socketInfo, sslStatus, targetHost) {\n> > +    this._log.warn(\"Invalid HTTPS certificate encountered!\");\n> > +    // Suppress invalid HTTPS certificate warnings in the UI.\n> > +    // (The request will still fail.)\n> \n> You should have a test for this.  I don't see one.\n\nThat thought briefly crossed my mind, but I couldn't work out how to write one. Got any pointers by any chance? If not I'll dig through netwerk...\n\nAgreed on all the other points. Will address them in a patch.", "author": "philipp@weitershausen.de", "time": "2011-07-13T00:27:34Z", "attachment_id": null, "text": "> FWIW, I don't think this is good enough yet to be taken into toolkit or\n> network as-is.\n\nBecause of the things you mentioned here, or because of other things?\n\n> > + *       return;\n> > + *     }\n> > + *     // Process body data and reset it so we don't process the same data twice.\n> > + *     processIncrementalData(this.response.body);\n> > + *     this.response.body = \"\";\n> \n> Why are you setting this to the empty string?\n\n(Note: this is just the example in the comment.)\n\nI'm resetting the string so that processIncrementalData() would only ever get the new data from onStartRequest passed in. I suppose I could alter the example in a way that would not have us modify this.response.body. But having the ability to truncate 'body' as we process it is quite useful in terms of memory efficiency. E.g. with Sync it can happen that we download several megabytes in one go and there's no need to keep that whole string in memory.\n\n> @@ +160,5 @@\n> > +   * Flag to indicate the status of the request.\n> > +   *\n> > +   * One of NOT_SENT, SENT, IN_PROGRESS, COMPLETED, ABORTED.\n> > +   */\n> > +  status: null,\n> \n> Shouldn't this default to `NOT_SENT`?\n\nYeah, good point. I could set it to NOT_SENT here and save a line in the constructor.\n\n> > +   * up to millisecond granularity.)\n> > +   *\n> > +   * 0 for no timeout.\n> > +   */\n> > +  timeout: null,\n> \n> Shouldn't this default to `0`, not `null`?\n\nCould do that, yeah.\n\n> > +   * timeouts.\n> > +   * \n> > +   * @param error\n> > +   *        Error that occurred while making the request, null if there\n> > +   *        was no error.\n> \n> More details on what the error object looks like would be nice here.\n\nIt will be a Components.Exception (so I guess an nsIXPCException). I'll add that to the comment.\n\n> > +    }\n> > +\n> > +    delete this._inputStream;\n> > +\n> > +    this.onComplete(null);\n> \n> Why are you explicitly passing `null` here instead of letting it be\n> `undefined`?\n\nTo explicitly acknowledge the existence of the 'error' parameter. If we passed nothing (=undefined), it could easily be confused with an actual bug, since JS defaults to undefined for uninitialized vars, parameters and missing attributes. Using 'null' means we know the parameter exists but we don't have a value for it.\n\n> > +  notifyCertProblem: function notifyCertProblem(socketInfo, sslStatus, targetHost) {\n> > +    this._log.warn(\"Invalid HTTPS certificate encountered!\");\n> > +    // Suppress invalid HTTPS certificate warnings in the UI.\n> > +    // (The request will still fail.)\n> \n> You should have a test for this.  I don't see one.\n\nThat thought briefly crossed my mind, but I couldn't work out how to write one. Got any pointers by any chance? If not I'll dig through netwerk...\n\nAgreed on all the other points. Will address them in a patch.", "creator": "philipp@weitershausen.de"}, {"bug_id": 671130, "tags": [], "count": 2, "is_private": false, "id": 6904007, "text": "Philipp, do you have a patch for this hanging around in your queue, or should we drop this back into the bucket?", "creator": "bugzilla@twinql.com", "author": "bugzilla@twinql.com", "attachment_id": null, "time": "2012-12-11T23:23:25Z", "creation_time": "2012-12-11T23:23:25Z", "raw_text": "Philipp, do you have a patch for this hanging around in your queue, or should we drop this back into the bucket?"}, {"count": 3, "is_private": false, "tags": [], "id": 6909037, "bug_id": 671130, "creation_time": "2012-12-13T01:23:18Z", "raw_text": "(In reply to Richard Newman [:rnewman] from comment #2)\n> Philipp, do you have a patch for this hanging around in your queue\n\nI don't.", "text": "(In reply to Richard Newman [:rnewman] from comment #2)\n> Philipp, do you have a patch for this hanging around in your queue\n\nI don't.", "attachment_id": null, "time": "2012-12-13T01:23:18Z", "creator": "philipp@weitershausen.de", "author": "philipp@weitershausen.de"}]}}}