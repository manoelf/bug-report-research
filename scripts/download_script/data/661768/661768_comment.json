{"bugs": {"661768": {"comments": [{"creator": "rjesup@jesup.org", "count": 0, "text": "When doing BindToTree() for an anchor element in the Dromaeo tests, it calls UpdateState() which calls LinkState(), which looks up the URI in a history hash.  This blocks possible performance improvements which depend on deferring URI normalization (see  bug 268200).\n\nSince displaying a link requires coloring it properly, it will probably need to be normalized when displayed.  If having been visited affects layout, then it would need to be normalized on reflow/layout.  If JS code checks the link status, that would require normalization.  There are probably other cases, and I'm not sure it can be deferred enough to make bug 268200's plan to defer normalization effective (at least in non-benchmark cases).\n\n(filed at bz's request)", "author": "rjesup@jesup.org", "id": 5510543, "bug_id": 661768, "is_private": false, "creation_time": "2011-06-03T08:14:00Z", "time": "2011-06-03T08:14:00Z", "raw_text": "When doing BindToTree() for an anchor element in the Dromaeo tests, it calls UpdateState() which calls LinkState(), which looks up the URI in a history hash.  This blocks possible performance improvements which depend on deferring URI normalization (see  bug 268200).\n\nSince displaying a link requires coloring it properly, it will probably need to be normalized when displayed.  If having been visited affects layout, then it would need to be normalized on reflow/layout.  If JS code checks the link status, that would require normalization.  There are probably other cases, and I'm not sure it can be deferred enough to make bug 268200's plan to defer normalization effective (at least in non-benchmark cases).\n\n(filed at bz's request)", "attachment_id": null, "tags": []}, {"raw_text": "General plan is to try constructing the URI as we do now but not starting the history lookup unless we're actually resolving style, so that unrelated state updates don't trigger the history lookup.", "time": "2011-06-03T17:41:28Z", "bug_id": 661768, "id": 5511314, "count": 1, "text": "General plan is to try constructing the URI as we do now but not starting the history lookup unless we're actually resolving style, so that unrelated state updates don't trigger the history lookup.", "author": "bzbarsky@mit.edu", "tags": [], "attachment_id": null, "is_private": false, "creation_time": "2011-06-03T17:41:28Z", "creator": "bzbarsky@mit.edu"}, {"raw_text": "(Assuming you didn't really want to unassign)", "time": "2011-06-04T07:17:41Z", "count": 2, "text": "(Assuming you didn't really want to unassign)", "author": "Ms2ger@gmail.com", "id": 5513114, "bug_id": 661768, "attachment_id": null, "tags": [], "creator": "Ms2ger@gmail.com", "is_private": false, "creation_time": "2011-06-04T07:17:41Z"}, {"id": 5513507, "bug_id": 661768, "is_private": false, "creation_time": "2011-06-04T18:47:45Z", "creator": "rjesup@jesup.org", "author": "rjesup@jesup.org", "text": "Note from bug 268200 that it's also doing ResetLinkState() on UnBindFromTree, which causes a history operation.", "count": 3, "tags": [], "time": "2011-06-04T18:47:45Z", "attachment_id": null, "raw_text": "Note from bug 268200 that it's also doing ResetLinkState() on UnBindFromTree, which causes a history operation."}, {"creator": "bzbarsky@mit.edu", "creation_time": "2020-03-10T22:27:18Z", "is_private": false, "attachment_id": null, "tags": [], "author": "bzbarsky@mit.edu", "text": "I believe the combination of bug 1355540 and bug 1378218 fixed this.  Does that look about right?", "count": 4, "id": 14688088, "bug_id": 661768, "time": "2020-03-10T22:27:18Z", "raw_text": "I believe the combination of bug 1355540 and bug 1378218 fixed this.  Does that look about right?"}, {"tags": [], "raw_text": "(In reply to Boris Zbarsky [:bzbarsky] from comment #4)\n> I believe the combination of bug 1355540 and bug 1378218 fixed this.  Does that look about right?\n\nNot sure... that cut the hashtable overhead (using segmentedvector/etc) and removed some other overhead, but I don't think that addresses comment 0 or comment 1.  A profile might help.   \n\nThe idea here was to unblock some of the ideas like https://bugzilla.mozilla.org/show_bug.cgi?id=268200#c13", "attachment_id": null, "time": "2020-03-12T20:49:22Z", "is_private": false, "creation_time": "2020-03-12T20:49:22Z", "id": 14692321, "bug_id": 661768, "count": 5, "text": "(In reply to Boris Zbarsky [:bzbarsky] from comment #4)\n> I believe the combination of bug 1355540 and bug 1378218 fixed this.  Does that look about right?\n\nNot sure... that cut the hashtable overhead (using segmentedvector/etc) and removed some other overhead, but I don't think that addresses comment 0 or comment 1.  A profile might help.   \n\nThe idea here was to unblock some of the ideas like https://bugzilla.mozilla.org/show_bug.cgi?id=268200#c13", "author": "rjesup@jesup.org", "creator": "rjesup@jesup.org"}, {"text": "Looking at the code, the key is that `HTMLAnchorElement::BindToTree` now calls `RegisterPendingLinkUpdate` which:\n\n1) Calls `SetHasPendingLinkUpdate()`, which prevents any history lookup stuff happening until `ClearHasPendingLinkUpdate`.  See the `HasPendingLinkUpdate()` check in `Link::LinkState()`, in particular.\n2) Adds the link to a list of links to update, which does not involve getting its URI or doing history lookups.\n3) Schedules an idle-priority runnable that for each link calls `ClearHasPendingLinkUpdate` and then if the link is still in the doc calls `UpdateLinkState`, which is what triggers the history lookup.\n\nSo the practical effect is that we defer the history lookup to an idle runnable, which seems like it addresses what comment 0 and comment 1 were about, except more so: even the URI construction is deferred.  That's helped by the fact that the \"is a link\" check now just checks for nonempty href rather than checking that the href could in fact be turned into a valid `nsIURI`.", "count": 6, "author": "bzbarsky@mit.edu", "id": 14692334, "bug_id": 661768, "time": "2020-03-12T20:56:47Z", "raw_text": "Looking at the code, the key is that `HTMLAnchorElement::BindToTree` now calls `RegisterPendingLinkUpdate` which:\n\n1) Calls `SetHasPendingLinkUpdate()`, which prevents any history lookup stuff happening until `ClearHasPendingLinkUpdate`.  See the `HasPendingLinkUpdate()` check in `Link::LinkState()`, in particular.\n2) Adds the link to a list of links to update, which does not involve getting its URI or doing history lookups.\n3) Schedules an idle-priority runnable that for each link calls `ClearHasPendingLinkUpdate` and then if the link is still in the doc calls `UpdateLinkState`, which is what triggers the history lookup.\n\nSo the practical effect is that we defer the history lookup to an idle runnable, which seems like it addresses what comment 0 and comment 1 were about, except more so: even the URI construction is deferred.  That's helped by the fact that the \"is a link\" check now just checks for nonempty href rather than checking that the href could in fact be turned into a valid `nsIURI`.", "creator": "bzbarsky@mit.edu", "creation_time": "2020-03-12T20:56:47Z", "is_private": false, "attachment_id": null, "tags": []}, {"raw_text": "Given that this was first brought up 9 years ago,  maybe we need some new data to support whether this is still useful?   Also,  should this be marked as a defect?  It sounds like an enhancement instead.   Marking it as qf:p3 unless we have some recent data to support it's need.", "time": "2020-03-13T16:43:13Z", "bug_id": 661768, "id": 14693898, "text": "Given that this was first brought up 9 years ago,  maybe we need some new data to support whether this is still useful?   Also,  should this be marked as a defect?  It sounds like an enhancement instead.   Marking it as qf:p3 unless we have some recent data to support it's need.", "count": 7, "author": "dpalmeiro@mozilla.com", "tags": [], "attachment_id": null, "is_private": false, "creation_time": "2020-03-13T16:43:13Z", "creator": "dpalmeiro@mozilla.com"}]}}, "comments": {}}