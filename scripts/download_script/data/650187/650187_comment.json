{"bugs": {"650187": {"comments": [{"bug_id": 650187, "text": "emptyShapes is usually NULL and when it's not is a malloc'd sparse array that has two empty shapes, only one of which is really used?\n\nRemoving this would make bug 638015 a lot easier & faster. Right now to get the empty shape we'd have to inline:\n  0: guard on obj.shape\n  1: load obj.slots[proto_slot]\n  2: load (1).emptyShapes\n  3: guard (2) not NULL\n  4: load *((1) + 0)\n  5: guard (4).clasp == js_ObjectClass\n  6: load *((1) + X)\n  7: guard (6) not NULL\n\nIdeally we could just stick proto + emptyShape directly onto the closure object itself, and reduce this to:\n  0: load callee.ctor_prototype\n  1: guard (0) not NULL\n  2: load callee.ctor_emptyShape\n  3: guard (2) not NULL\n\nGetting rid of the shape guard is most important since then there would be no need to handle polymorphism.", "attachment_id": null, "creation_time": "2011-04-15T02:21:52Z", "tags": [], "creator": "dvander@alliedmods.net", "raw_text": "emptyShapes is usually NULL and when it's not is a malloc'd sparse array that has two empty shapes, only one of which is really used?\n\nRemoving this would make bug 638015 a lot easier & faster. Right now to get the empty shape we'd have to inline:\n  0: guard on obj.shape\n  1: load obj.slots[proto_slot]\n  2: load (1).emptyShapes\n  3: guard (2) not NULL\n  4: load *((1) + 0)\n  5: guard (4).clasp == js_ObjectClass\n  6: load *((1) + X)\n  7: guard (6) not NULL\n\nIdeally we could just stick proto + emptyShape directly onto the closure object itself, and reduce this to:\n  0: load callee.ctor_prototype\n  1: guard (0) not NULL\n  2: load callee.ctor_emptyShape\n  3: guard (2) not NULL\n\nGetting rid of the shape guard is most important since then there would be no need to handle polymorphism.", "id": 5411127, "is_private": false, "count": 0, "author": "dvander@alliedmods.net", "time": "2011-04-15T02:21:52Z"}, {"is_private": false, "count": 1, "time": "2011-04-15T02:31:35Z", "author": "bhackett1024@gmail.com", "id": 5411132, "attachment_id": null, "creation_time": "2011-04-15T02:31:35Z", "tags": [], "creator": "bhackett1024@gmail.com", "raw_text": "Hmm, once created the empty shapes on an object don't go away and don't change.  So an identity guard on the value from obj.slots[proto_slot] would eliminate the need for 2-7.  Not disputing the desire to get rid of emptyShapes, but I think the reason for doing so is more for object evisceration than scripted-new path simplification.\n\nWhere do the empty shapes get stored for objects not created by scripted new?", "bug_id": 650187, "text": "Hmm, once created the empty shapes on an object don't go away and don't change.  So an identity guard on the value from obj.slots[proto_slot] would eliminate the need for 2-7.  Not disputing the desire to get rid of emptyShapes, but I think the reason for doing so is more for object evisceration than scripted-new path simplification.\n\nWhere do the empty shapes get stored for objects not created by scripted new?"}, {"is_private": false, "author": "dvander@alliedmods.net", "id": 5411151, "attachment_id": null, "tags": [], "creation_time": "2011-04-15T02:47:33Z", "bug_id": 650187, "count": 2, "time": "2011-04-15T02:47:33Z", "creator": "dvander@alliedmods.net", "raw_text": "Constructors can be polymorphic, I would like to not have identity/shape guards so we can despecialize patterns like in v8-raytrace.", "text": "Constructors can be polymorphic, I would like to not have identity/shape guards so we can despecialize patterns like in v8-raytrace."}]}}, "comments": {}}