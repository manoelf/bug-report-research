{"comments": {}, "bugs": {"632422": {"comments": [{"bug_id": 632422, "creation_time": "2011-02-08T17:09:29Z", "tags": [], "attachment_id": null, "id": 5263405, "author": "rain@sunshowers.io", "is_private": false, "text": "STR:\n\nComponents.utils.import(\"resource://gre/modules/Services.jsm\");\nvar ct1 = Services.tm.currentThread;\nvar ct2 = Components.classes[\"@mozilla.org/thread-manager;1\"].getService(Components.interfaces.nsIThreadManager).currentThread;\nct1 === ct2\n\nreturns false. ct1 == ct2 returns true.", "raw_text": "STR:\n\nComponents.utils.import(\"resource://gre/modules/Services.jsm\");\nvar ct1 = Services.tm.currentThread;\nvar ct2 = Components.classes[\"@mozilla.org/thread-manager;1\"].getService(Components.interfaces.nsIThreadManager).currentThread;\nct1 === ct2\n\nreturns false. ct1 == ct2 returns true.", "creator": "rain@sunshowers.io", "time": "2011-02-08T17:09:29Z", "count": 0}, {"id": 5263453, "is_private": false, "author": "bzbarsky@mit.edu", "bug_id": 632422, "attachment_id": null, "creation_time": "2011-02-08T17:20:05Z", "tags": [], "count": 1, "time": "2011-02-08T17:20:05Z", "text": "This is expected, no?  They're distinct objects; if you try to add expandos to one they won't show up on the other, for example.", "creator": "bzbarsky@mit.edu", "raw_text": "This is expected, no?  They're distinct objects; if you try to add expandos to one they won't show up on the other, for example."}, {"text": "And in particular, Services and the code above live in different scopes, so can't get a hit on the wrappednative cache, I would think.", "raw_text": "And in particular, Services and the code above live in different scopes, so can't get a hit on the wrappednative cache, I would think.", "creator": "bzbarsky@mit.edu", "time": "2011-02-08T17:21:03Z", "count": 2, "bug_id": 632422, "creation_time": "2011-02-08T17:21:03Z", "tags": [], "attachment_id": null, "id": 5263456, "author": "bzbarsky@mit.edu", "is_private": false}, {"tags": [], "creation_time": "2011-02-08T17:21:42Z", "attachment_id": null, "raw_text": "But maybe the cache should be per-compartment, not per-scope?", "creator": "bzbarsky@mit.edu", "bug_id": 632422, "text": "But maybe the cache should be per-compartment, not per-scope?", "is_private": false, "time": "2011-02-08T17:21:42Z", "author": "bzbarsky@mit.edu", "count": 3, "id": 5263459}, {"author": "bent.mozilla@gmail.com", "is_private": false, "id": 5263468, "attachment_id": null, "creation_time": "2011-02-08T17:26:53Z", "tags": [], "bug_id": 632422, "count": 4, "time": "2011-02-08T17:26:53Z", "creator": "bent.mozilla@gmail.com", "raw_text": "/me likes WONTFIX for this.", "text": "/me likes WONTFIX for this."}, {"id": 5263470, "time": "2011-02-08T17:27:28Z", "author": "benjamin@smedbergs.us", "count": 5, "is_private": false, "text": "I don't think so: we don't want one JSM to be able to pollute these objects for another JSM.\n\nUnless of course we take my suggestion and don't allow expandos on XPCOM objects from chrome at all, in which case per-compartment would be fine.", "bug_id": 632422, "raw_text": "I don't think so: we don't want one JSM to be able to pollute these objects for another JSM.\n\nUnless of course we take my suggestion and don't allow expandos on XPCOM objects from chrome at all, in which case per-compartment would be fine.", "creator": "benjamin@smedbergs.us", "tags": [], "creation_time": "2011-02-08T17:27:28Z", "attachment_id": null}, {"attachment_id": null, "tags": [], "creation_time": "2011-02-08T18:30:58Z", "creator": "rain@sunshowers.io", "raw_text": "From the perspective of an XPCOM user, I think it makes sense that Services.tm !== the service if you get it directly, but it doesn't intuitively make sense that something you get from the service differs based on which scope the service is in. In particular, it means that current getService code cannot be replaced wholesale with the Services equivalent, since stuff like Array.indexOf breaks.", "bug_id": 632422, "text": "From the perspective of an XPCOM user, I think it makes sense that Services.tm !== the service if you get it directly, but it doesn't intuitively make sense that something you get from the service differs based on which scope the service is in. In particular, it means that current getService code cannot be replaced wholesale with the Services equivalent, since stuff like Array.indexOf breaks.", "is_private": false, "count": 6, "author": "rain@sunshowers.io", "time": "2011-02-08T18:30:58Z", "id": 5263651}, {"raw_text": "I don't understand the last comment at all.", "creator": "benjamin@smedbergs.us", "text": "I don't understand the last comment at all.", "time": "2011-02-08T18:52:00Z", "count": 7, "tags": [], "creation_time": "2011-02-08T18:52:00Z", "attachment_id": null, "bug_id": 632422, "author": "benjamin@smedbergs.us", "is_private": false, "id": 5263725}, {"text": "If I have code somewhere that looks like:\n\nvar thread = Components.classes[\"@mozilla.org/thread-manager;1\"].getService(Components.interfaces.nsIThreadManager).currentThread;\nif (arr.indexOf(thread) != -1) { ... }\n\nI can't replace it with\n\nvar thread = Services.tm.currentThread;\nif (arr.indexOf(thread) != -1) { ... }", "creator": "rain@sunshowers.io", "raw_text": "If I have code somewhere that looks like:\n\nvar thread = Components.classes[\"@mozilla.org/thread-manager;1\"].getService(Components.interfaces.nsIThreadManager).currentThread;\nif (arr.indexOf(thread) != -1) { ... }\n\nI can't replace it with\n\nvar thread = Services.tm.currentThread;\nif (arr.indexOf(thread) != -1) { ... }", "count": 8, "time": "2011-02-08T18:56:41Z", "bug_id": 632422, "attachment_id": null, "creation_time": "2011-02-08T18:56:41Z", "tags": [], "id": 5263748, "is_private": false, "author": "rain@sunshowers.io"}, {"bug_id": 632422, "tags": [], "creation_time": "2011-02-08T19:05:22Z", "attachment_id": null, "id": 5263783, "is_private": false, "author": "mrbkap@gmail.com", "text": "(In reply to comment #5)\n> I don't think so: we don't want one JSM to be able to pollute these objects for\n> another JSM.\n\nBy default, XPConnect doesn't allow you to add expandos to an object unless it has a scriptable helper that explicitly sets the right flags (USE_JSSTUB_FOR_{SET,ADD}PROPERTY or WANT_{ADD,SET}PROPERTY). The only pollution really would be through Object.prototype. The reason being (as I understand it) is that we can't reflect expandos into C++, so unless your object explicitly says \"I can deal with my reflections into different languages being different\" we don't allow the reflections to differ.", "raw_text": "(In reply to comment #5)\n> I don't think so: we don't want one JSM to be able to pollute these objects for\n> another JSM.\n\nBy default, XPConnect doesn't allow you to add expandos to an object unless it has a scriptable helper that explicitly sets the right flags (USE_JSSTUB_FOR_{SET,ADD}PROPERTY or WANT_{ADD,SET}PROPERTY). The only pollution really would be through Object.prototype. The reason being (as I understand it) is that we can't reflect expandos into C++, so unless your object explicitly says \"I can deal with my reflections into different languages being different\" we don't allow the reflections to differ.", "creator": "mrbkap@gmail.com", "time": "2011-02-08T19:05:22Z", "count": 9}]}}}