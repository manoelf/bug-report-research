{"comments": {}, "bugs": {"641341": {"comments": [{"creator": "bzbarsky@mit.edu", "raw_text": "On my mac, 50% of the total time is reflow (the rest is painting).\n\nAlmost a third of the reflow time is CalculateHypotheticalBox. Almost half of that is self time; the rest is the nsLineBox::IndexOf call the line iterator constructor makes.\n\nWould it make any sense to search backwards within lines when searching back from the line cursor?  Are we even hitting that here?\n\nThe self time is the IsEmpty() calls in AreAllEarlierInFlowFramesEmpty, looks like.  Not sure what we can do about those.", "text": "On my mac, 50% of the total time is reflow (the rest is painting).\n\nAlmost a third of the reflow time is CalculateHypotheticalBox. Almost half of that is self time; the rest is the nsLineBox::IndexOf call the line iterator constructor makes.\n\nWould it make any sense to search backwards within lines when searching back from the line cursor?  Are we even hitting that here?\n\nThe self time is the IsEmpty() calls in AreAllEarlierInFlowFramesEmpty, looks like.  Not sure what we can do about those.", "count": 0, "time": "2011-03-13T17:43:39Z", "attachment_id": null, "tags": [], "creation_time": "2011-03-13T17:43:39Z", "bug_id": 641341, "author": "bzbarsky@mit.edu", "is_private": false, "id": 5341944}, {"author": "MatsPalmgren_bugz@use.startmail.com", "is_private": false, "id": 5342316, "creation_time": "2011-03-13T23:59:54Z", "tags": [], "attachment_id": 519059, "bug_id": 641341, "time": "2011-03-13T23:59:54Z", "count": 1, "raw_text": "Using \"lineBox->CachedIsEmpty()\" is valid at this point, right?\nIf so, then if it's true it follows that all frames on that line\nbefore the place-holder must be empty, so we can skip the whole\nAreAllEarlierInFlowFramesEmpty() loop.\n\nThis makes the default 30x30 test about 9% faster in a local\nopt build for me (Linux x86-64).", "creator": "MatsPalmgren_bugz@use.startmail.com", "text": "Created attachment 519059\nwip (wdiff)\n\nUsing \"lineBox->CachedIsEmpty()\" is valid at this point, right?\nIf so, then if it's true it follows that all frames on that line\nbefore the place-holder must be empty, so we can skip the whole\nAreAllEarlierInFlowFramesEmpty() loop.\n\nThis makes the default 30x30 test about 9% faster in a local\nopt build for me (Linux x86-64)."}, {"text": "(In reply to comment #1)\n> Using \"lineBox->CachedIsEmpty()\" is valid at this point, right?\n\nYes.", "raw_text": "(In reply to comment #1)\n> Using \"lineBox->CachedIsEmpty()\" is valid at this point, right?\n\nYes.", "creator": "roc@ocallahan.org", "time": "2011-03-14T02:19:00Z", "count": 2, "bug_id": 641341, "creation_time": "2011-03-14T02:19:00Z", "tags": [], "attachment_id": null, "id": 5342441, "is_private": false, "author": "roc@ocallahan.org"}, {"is_private": false, "author": "bzbarsky@mit.edu", "id": 5343066, "tags": [], "creation_time": "2011-03-14T14:11:10Z", "attachment_id": null, "bug_id": 641341, "time": "2011-03-14T14:11:10Z", "count": 3, "raw_text": "Yeah, 9% about matches my profiler data (1/2 * 1/3 * 0.5).\n\nCan we do something about the line iterator too?  I'm not sure what; searching backwards in the line box won't actually do the right thing...", "creator": "bzbarsky@mit.edu", "text": "Yeah, 9% about matches my profiler data (1/2 * 1/3 * 0.5).\n\nCan we do something about the line iterator too?  I'm not sure what; searching backwards in the line box won't actually do the right thing..."}, {"creator": "roc@ocallahan.org", "raw_text": "I think nsAbsoluteContainingBlock::Reflow could keep a line cursor containing the current line of kidFrame's placeholder. The line cursor should only need to advance forward.", "text": "I think nsAbsoluteContainingBlock::Reflow could keep a line cursor containing the current line of kidFrame's placeholder. The line cursor should only need to advance forward.", "count": 4, "time": "2011-03-14T21:34:49Z", "attachment_id": null, "creation_time": "2011-03-14T21:34:49Z", "tags": [], "bug_id": 641341, "is_private": false, "author": "roc@ocallahan.org", "id": 5344356}, {"count": 5, "author": "bzbarsky@mit.edu", "time": "2011-03-14T21:42:02Z", "is_private": false, "id": 5344373, "creator": "bzbarsky@mit.edu", "raw_text": "The thing is, in this case there aren't that many lines (30 at most).  It's just that each line has lots of stuff on it... so for your average new abs pos kid, we have to look at 900/2 placeholders (not counting the walls!) to find the \"right\" line.", "attachment_id": null, "tags": [], "creation_time": "2011-03-14T21:42:02Z", "text": "The thing is, in this case there aren't that many lines (30 at most).  It's just that each line has lots of stuff on it... so for your average new abs pos kid, we have to look at 900/2 placeholders (not counting the walls!) to find the \"right\" line.", "bug_id": 641341}, {"count": 6, "time": "2011-03-14T21:50:56Z", "text": "Created attachment 519247\nwip8\n\nFwiw, I tried something like that, this gave an additional 3% improvement.", "creator": "MatsPalmgren_bugz@use.startmail.com", "raw_text": "Fwiw, I tried something like that, this gave an additional 3% improvement.", "id": 5344405, "is_private": false, "author": "MatsPalmgren_bugz@use.startmail.com", "bug_id": 641341, "attachment_id": 519247, "tags": [], "creation_time": "2011-03-14T21:50:56Z"}, {"time": "2011-03-16T05:09:28Z", "count": 7, "raw_text": "Caching the last child frame on the LineCursor property gives a significant\nimprovement.  Also optimized the dual direction line iteration a bit, it\nwon't give much for this test but I think it might be good when there are\nmany lines and the cursor is near either end.  When there is no line cursor\n(we start from the first line) is such a case.", "creator": "MatsPalmgren_bugz@use.startmail.com", "text": "Created attachment 519594\nwip28\n\nCaching the last child frame on the LineCursor property gives a significant\nimprovement.  Also optimized the dual direction line iteration a bit, it\nwon't give much for this test but I think it might be good when there are\nmany lines and the cursor is near either end.  When there is no line cursor\n(we start from the first line) is such a case.", "is_private": false, "author": "MatsPalmgren_bugz@use.startmail.com", "id": 5347591, "creation_time": "2011-03-16T05:09:28Z", "tags": [], "attachment_id": 519594, "bug_id": 641341}, {"id": 5347597, "time": "2011-03-16T05:12:44Z", "author": "MatsPalmgren_bugz@use.startmail.com", "count": 8, "is_private": false, "text": "Created attachment 519595\nprevious patches rolled into one\n\nWith all patches I get a 33% improvement in a local Linux x86-64 opt build.", "bug_id": 641341, "raw_text": "With all patches I get a 33% improvement in a local Linux x86-64 opt build.", "creator": "MatsPalmgren_bugz@use.startmail.com", "tags": [], "creation_time": "2011-03-16T05:12:44Z", "attachment_id": 519595}, {"creation_time": "2011-06-01T15:01:24Z", "tags": [], "attachment_id": null, "raw_text": "opera pass this test amazingly", "creator": "mr.7ramy@gmail.com", "bug_id": 641341, "text": "opera pass this test amazingly", "is_private": false, "author": "mr.7ramy@gmail.com", "time": "2011-06-01T15:01:24Z", "count": 9, "id": 5506110}, {"author": "bzbarsky@mit.edu", "is_private": false, "id": 5506148, "attachment_id": null, "tags": [], "creation_time": "2011-06-01T15:12:59Z", "bug_id": 641341, "count": 10, "time": "2011-06-01T15:12:59Z", "creator": "bzbarsky@mit.edu", "raw_text": "Mats, are you actively working on this?  If not, should someone else pick it up?", "text": "Mats, are you actively working on this?  If not, should someone else pick it up?"}, {"creator": "MatsPalmgren_bugz@use.startmail.com", "raw_text": "I'm not actively working on this.  It's probably worth taking some of\nthese patches, at least the first one.  Feel free to pick it up.", "text": "I'm not actively working on this.  It's probably worth taking some of\nthese patches, at least the first one.  Feel free to pick it up.", "count": 11, "time": "2011-06-01T20:40:01Z", "attachment_id": null, "tags": [], "creation_time": "2011-06-01T20:40:01Z", "bug_id": 641341, "is_private": false, "author": "MatsPalmgren_bugz@use.startmail.com", "id": 5507145}, {"text": "Is this bug similar to the slowness when visiting http://mazery.sjackson.net/ ?", "raw_text": "Is this bug similar to the slowness when visiting http://mazery.sjackson.net/ ?", "creator": "mp3geek@gmail.com", "time": "2011-09-12T04:00:03Z", "count": 12, "bug_id": 641341, "tags": [], "creation_time": "2011-09-12T04:00:03Z", "attachment_id": null, "id": 5713711, "is_private": false, "author": "mp3geek@gmail.com"}, {"id": 5713811, "is_private": false, "count": 13, "author": "roc@ocallahan.org", "time": "2011-09-12T06:33:14Z", "bug_id": 641341, "text": "(In reply to mdew from comment #12)\n> Is this bug similar to the slowness when visiting\n> http://mazery.sjackson.net/ ?\n\nNo, that seems to use canvas, not tables (and Firefox is a lot faster than Chrome on that page for me).", "attachment_id": null, "tags": [], "creation_time": "2011-09-12T06:33:14Z", "creator": "roc@ocallahan.org", "raw_text": "(In reply to mdew from comment #12)\n> Is this bug similar to the slowness when visiting\n> http://mazery.sjackson.net/ ?\n\nNo, that seems to use canvas, not tables (and Firefox is a lot faster than Chrome on that page for me)."}, {"creation_time": "2011-09-28T13:44:29Z", "tags": [], "attachment_id": null, "bug_id": 641341, "is_private": false, "author": "rjesup@jesup.org", "id": 5742962, "raw_text": "See jprof profile (Fedora x64 Xeon) in https://bugzilla.mozilla.org/attachment.cgi?id=563041\n\nSee also bug 626927, though that has a different cause.", "creator": "rjesup@jesup.org", "text": "See jprof profile (Fedora x64 Xeon) in https://bugzilla.mozilla.org/attachment.cgi?id=563041\n\nSee also bug 626927, though that has a different cause.", "time": "2011-09-28T13:44:29Z", "count": 14}, {"attachment_id": null, "tags": [], "creation_time": "2011-09-28T13:49:48Z", "creator": "rjesup@jesup.org", "raw_text": "FYI, in my case 80% is ::Paint(), ~17% is Reflow.\n\nOf the 80%, 38% is PaintForFrame(), 24% nsIFrame::BuildDisplayListForStackingContext(), and 18.4% nsDisplayList::ComputeVisibilityForRoot()", "bug_id": 641341, "text": "FYI, in my case 80% is ::Paint(), ~17% is Reflow.\n\nOf the 80%, 38% is PaintForFrame(), 24% nsIFrame::BuildDisplayListForStackingContext(), and 18.4% nsDisplayList::ComputeVisibilityForRoot()", "is_private": false, "count": 15, "time": "2011-09-28T13:49:48Z", "author": "rjesup@jesup.org", "id": 5742982}, {"count": 16, "time": "2011-09-30T07:29:19Z", "text": "Here's a thought.  What about stashing the pointer to the line box on the abs pos frame, or on its placeholder, in a property?   We could do that during reflow....", "creator": "bzbarsky@mit.edu", "raw_text": "Here's a thought.  What about stashing the pointer to the line box on the abs pos frame, or on its placeholder, in a property?   We could do that during reflow....", "id": 5748837, "author": "bzbarsky@mit.edu", "is_private": false, "bug_id": 641341, "attachment_id": null, "tags": [], "creation_time": "2011-09-30T07:29:19Z"}, {"count": 17, "time": "2011-09-30T09:45:39Z", "text": "That's tricky because it has to be updated as the placeholder (or its ancestors) get pushed and pulled around.", "creator": "roc@ocallahan.org", "raw_text": "That's tricky because it has to be updated as the placeholder (or its ancestors) get pushed and pulled around.", "id": 5749006, "is_private": false, "author": "roc@ocallahan.org", "bug_id": 641341, "attachment_id": null, "creation_time": "2011-09-30T09:45:39Z", "tags": []}, {"id": 5749472, "time": "2011-09-30T14:51:48Z", "author": "bzbarsky@mit.edu", "count": 18, "is_private": false, "text": "Ah, pulling and pushing ancestors, yeah.  :(", "bug_id": 641341, "raw_text": "Ah, pulling and pushing ancestors, yeah.  :(", "creator": "bzbarsky@mit.edu", "tags": [], "creation_time": "2011-09-30T14:51:48Z", "attachment_id": null}, {"id": 5750780, "is_private": false, "count": 19, "time": "2011-09-30T21:38:08Z", "author": "roc@ocallahan.org", "bug_id": 641341, "text": "Alternatively we could give nsInlineFrames and nsPlaceholderFrames a direct pointer to the line-box if and only if they're immediate children of the line box/block. Then you could find the line-box for any placeholder by walking up the ancestors looking for the pointer.", "attachment_id": null, "creation_time": "2011-09-30T21:38:08Z", "tags": [], "creator": "roc@ocallahan.org", "raw_text": "Alternatively we could give nsInlineFrames and nsPlaceholderFrames a direct pointer to the line-box if and only if they're immediate children of the line box/block. Then you could find the line-box for any placeholder by walking up the ancestors looking for the pointer."}, {"creator": "bzbarsky@mit.edu", "raw_text": "That could end up with a fair amount of cost if there are lots of inlines.\n\nWould it make sense to cache the line box on the placeholder when reflowing the placeholder?  By the time we need to calculate the hypothetical box, the placeholder has been reflowed, presumably, to get the horizontal position....", "attachment_id": null, "creation_time": "2011-10-03T15:26:50Z", "tags": [], "text": "That could end up with a fair amount of cost if there are lots of inlines.\n\nWould it make sense to cache the line box on the placeholder when reflowing the placeholder?  By the time we need to calculate the hypothetical box, the placeholder has been reflowed, presumably, to get the horizontal position....", "bug_id": 641341, "count": 20, "author": "bzbarsky@mit.edu", "time": "2011-10-03T15:26:50Z", "is_private": false, "id": 5754149}, {"id": 5755368, "is_private": false, "count": 21, "time": "2011-10-03T21:22:04Z", "author": "roc@ocallahan.org", "bug_id": 641341, "text": "Yes!", "attachment_id": null, "tags": [], "creation_time": "2011-10-03T21:22:04Z", "creator": "roc@ocallahan.org", "raw_text": "Yes!"}, {"text": "OK, I'm going to try that.  I think it should give us simpler code than Mats' last patch, with about the same speedup.  It does rely on the invariant that we reflow the placeholder before the abs pos frame.  If we think this is not reliable across incremental reflows, we can clear the cached line box somewhere...", "bug_id": 641341, "creator": "bzbarsky@mit.edu", "raw_text": "OK, I'm going to try that.  I think it should give us simpler code than Mats' last patch, with about the same speedup.  It does rely on the invariant that we reflow the placeholder before the abs pos frame.  If we think this is not reliable across incremental reflows, we can clear the cached line box somewhere...", "attachment_id": null, "creation_time": "2011-10-04T02:14:09Z", "tags": [], "id": 5756226, "count": 22, "author": "bzbarsky@mit.edu", "time": "2011-10-04T02:14:09Z", "is_private": false}, {"creation_time": "2011-10-04T02:29:12Z", "tags": [], "attachment_id": 564435, "bug_id": 641341, "is_private": false, "author": "bzbarsky@mit.edu", "id": 5756251, "raw_text": "", "creator": "bzbarsky@mit.edu", "text": "Created attachment 564435\nPerhaps like so", "time": "2011-10-04T02:29:12Z", "count": 23}, {"id": 5756659, "author": "release@mozilla.com", "is_private": false, "bug_id": 641341, "tags": [], "creation_time": "2011-10-04T07:01:51Z", "attachment_id": null, "time": "2011-10-04T07:01:51Z", "count": 24, "text": "Try run for 90b41fd48aea is complete.\nDetailed breakdown of the results available here:\n    https://tbpl.mozilla.org/?tree=Try&rev=90b41fd48aea\nResults (out of 71 total builds):\n    success: 66\n    warnings: 4\n    failure: 1\nBuilds available at http://ftp.mozilla.org/pub/mozilla.org/firefox/try-builds/bzbarsky@mozilla.com-90b41fd48aea", "raw_text": "Try run for 90b41fd48aea is complete.\nDetailed breakdown of the results available here:\n    https://tbpl.mozilla.org/?tree=Try&rev=90b41fd48aea\nResults (out of 71 total builds):\n    success: 66\n    warnings: 4\n    failure: 1\nBuilds available at http://ftp.mozilla.org/pub/mozilla.org/firefox/try-builds/bzbarsky@mozilla.com-90b41fd48aea", "creator": "release@mozilla.com"}, {"bug_id": 641341, "attachment_id": null, "tags": [], "creation_time": "2011-10-04T20:37:30Z", "id": 5758449, "author": "roc@ocallahan.org", "is_private": false, "text": "(In reply to Boris Zbarsky (:bz) from comment #22)\n> OK, I'm going to try that.  I think it should give us simpler code than\n> Mats' last patch, with about the same speedup.  It does rely on the\n> invariant that we reflow the placeholder before the abs pos frame.\n\nI don't believe this invariant holds. If something inside an abs-pos frame is dirty, nsBlockFrame::ChildIsDirty does nothing to dirty the placeholder or its line, nor does PresShell::FrameNeedsReflow.\n\nAnother approach could be to cache state in nsAbsoluteContainingBlock::Reflow that keeps track of which line we're on and the last placeholder in the line that we reflowed, and pass that state as a parameter to ReflowAbsoluteFrame and poke it into nsHTMLReflowState. Then CalculateHypotheticalBox can start its search for the placeholder from the last placeholder.", "creator": "roc@ocallahan.org", "raw_text": "(In reply to Boris Zbarsky (:bz) from comment #22)\n> OK, I'm going to try that.  I think it should give us simpler code than\n> Mats' last patch, with about the same speedup.  It does rely on the\n> invariant that we reflow the placeholder before the abs pos frame.\n\nI don't believe this invariant holds. If something inside an abs-pos frame is dirty, nsBlockFrame::ChildIsDirty does nothing to dirty the placeholder or its line, nor does PresShell::FrameNeedsReflow.\n\nAnother approach could be to cache state in nsAbsoluteContainingBlock::Reflow that keeps track of which line we're on and the last placeholder in the line that we reflowed, and pass that state as a parameter to ReflowAbsoluteFrame and poke it into nsHTMLReflowState. Then CalculateHypotheticalBox can start its search for the placeholder from the last placeholder.", "count": 25, "time": "2011-10-04T20:37:30Z"}, {"count": 26, "author": "bzbarsky@mit.edu", "time": "2011-10-04T21:03:03Z", "is_private": false, "id": 5758541, "creator": "bzbarsky@mit.edu", "raw_text": "> If something inside an abs-pos frame is dirty, nsBlockFrame::ChildIsDirty does nothing to\n> dirty the placeholder or its line, nor does PresShell::FrameNeedsReflow.\n\nBut in that case the placeholder's line is valid, no?  We only need to worry about the cache storing an incorrect line, and in that case the invariant I mentioned should hold and keep that from lasting until we get to this code.", "attachment_id": null, "tags": [], "creation_time": "2011-10-04T21:03:03Z", "text": "> If something inside an abs-pos frame is dirty, nsBlockFrame::ChildIsDirty does nothing to\n> dirty the placeholder or its line, nor does PresShell::FrameNeedsReflow.\n\nBut in that case the placeholder's line is valid, no?  We only need to worry about the cache storing an incorrect line, and in that case the invariant I mentioned should hold and keep that from lasting until we get to this code.", "bug_id": 641341}, {"count": 27, "time": "2011-10-04T23:23:03Z", "text": "True.", "creator": "roc@ocallahan.org", "raw_text": "True.", "id": 5759053, "author": "roc@ocallahan.org", "is_private": false, "bug_id": 641341, "attachment_id": null, "creation_time": "2011-10-04T23:23:03Z", "tags": []}, {"raw_text": "Review of attachment 564435:\n-----------------------------------------------------------------\n\nI think you should probably just make the cached line box a regular field of nsPlaceholderFrame. Almost all abs-pos placeholders will end up having that property. If we're worried about the word of space in placeholders for floats, we could make abs-pos placeholders a tiny subclass of nsPlaceholderFrame.\n\n::: layout/generic/nsHTMLReflowState.cpp\n@@ +984,5 @@\n>          // all the frames before it are empty.  In that case, it would\n>          // have been just before this line.\n>          // XXXbz the line box is not fully reflowed yet if our\n>          // containing block is relatively positioned...\n> +        bool found = false;\n\nWhy did you move \"found\" out?", "creator": "roc@ocallahan.org", "text": "Comment on attachment 564435\nPerhaps like so\n\nReview of attachment 564435:\n-----------------------------------------------------------------\n\nI think you should probably just make the cached line box a regular field of nsPlaceholderFrame. Almost all abs-pos placeholders will end up having that property. If we're worried about the word of space in placeholders for floats, we could make abs-pos placeholders a tiny subclass of nsPlaceholderFrame.\n\n::: layout/generic/nsHTMLReflowState.cpp\n@@ +984,5 @@\n>          // all the frames before it are empty.  In that case, it would\n>          // have been just before this line.\n>          // XXXbz the line box is not fully reflowed yet if our\n>          // containing block is relatively positioned...\n> +        bool found = false;\n\nWhy did you move \"found\" out?", "time": "2011-10-04T23:26:09Z", "count": 28, "creation_time": "2011-10-04T23:26:09Z", "tags": [], "attachment_id": 564435, "bug_id": 641341, "author": "roc@ocallahan.org", "is_private": false, "id": 5759059}, {"id": 5759328, "count": 29, "time": "2011-10-05T02:40:57Z", "author": "bzbarsky@mit.edu", "is_private": false, "text": "Comment on attachment 564435\nPerhaps like so\n\n> I think you should probably just make the cached line box a regular field of\n> nsPlaceholderFrame.\n\nHmm.  Yeah, fair.  That probably actually uses less memory than the property in most cases.\n\n> Why did you move \"found\" out?\n\nBy mistake.  ;)", "bug_id": 641341, "creator": "bzbarsky@mit.edu", "raw_text": "> I think you should probably just make the cached line box a regular field of\n> nsPlaceholderFrame.\n\nHmm.  Yeah, fair.  That probably actually uses less memory than the property in most cases.\n\n> Why did you move \"found\" out?\n\nBy mistake.  ;)", "attachment_id": 564435, "creation_time": "2011-10-05T02:40:57Z", "tags": []}, {"time": "2011-10-05T02:59:22Z", "count": 30, "raw_text": "", "creator": "bzbarsky@mit.edu", "text": "Created attachment 564745\nSpeed up CalculateHypotheticalBox for the case of a block containing a bunch of lines but absolutely no in-flows anywhere.", "is_private": false, "author": "bzbarsky@mit.edu", "id": 5759357, "creation_time": "2011-10-05T02:59:22Z", "tags": [], "attachment_id": 564745, "bug_id": 641341}, {"tags": [], "creation_time": "2011-10-05T03:08:10Z", "attachment_id": null, "bug_id": 641341, "is_private": false, "author": "roc@ocallahan.org", "id": 5759372, "raw_text": "Oh, can you add a comment to GetCachedLineBox indicating that it's only OK to call this if the caller ensures that the placeholder has been reflowed since any changes to the frame tree that could affect the line-box?", "creator": "roc@ocallahan.org", "text": "Oh, can you add a comment to GetCachedLineBox indicating that it's only OK to call this if the caller ensures that the placeholder has been reflowed since any changes to the frame tree that could affect the line-box?", "time": "2011-10-05T03:08:10Z", "count": 31}, {"id": 5759377, "author": "bzbarsky@mit.edu", "is_private": false, "bug_id": 641341, "tags": [], "creation_time": "2011-10-05T03:15:09Z", "attachment_id": null, "time": "2011-10-05T03:15:09Z", "count": 32, "text": "Yes, absolutely.", "raw_text": "Yes, absolutely.", "creator": "bzbarsky@mit.edu"}, {"text": "https://hg.mozilla.org/integration/mozilla-inbound/rev/0cd9ed297f73", "raw_text": "https://hg.mozilla.org/integration/mozilla-inbound/rev/0cd9ed297f73", "creator": "bzbarsky@mit.edu", "time": "2011-10-05T03:51:03Z", "count": 33, "bug_id": 641341, "tags": [], "creation_time": "2011-10-05T03:51:03Z", "attachment_id": null, "id": 5759415, "is_private": false, "author": "bzbarsky@mit.edu"}, {"is_private": false, "author": "mak@mozilla.com", "id": 5759937, "creation_time": "2011-10-05T12:11:56Z", "tags": [], "attachment_id": null, "bug_id": 641341, "time": "2011-10-05T12:11:56Z", "count": 34, "raw_text": "https://hg.mozilla.org/mozilla-central/rev/0cd9ed297f73", "creator": "mak@mozilla.com", "text": "https://hg.mozilla.org/mozilla-central/rev/0cd9ed297f73"}, {"attachment_id": null, "tags": [], "creation_time": "2011-10-05T15:58:11Z", "bug_id": 641341, "is_private": false, "author": "rjesup@jesup.org", "id": 5760443, "creator": "rjesup@jesup.org", "raw_text": "A rough test on my very fast Xeon went from 85 seconds (see bug 641340) to 82 seconds with this patch.  So this may have helped a little, but it doesn't look like it helped a lot. (Were any before/after profiles taken?  I could re-profile (I took one a few weeks ago) and compare.)  From my previous test, on the same system Chrome takes 4.5 seconds (close to 20x faster).  On my Win7 laptop (Lenovo W520 - also SandyBridge core i7 (2820QM in this case), but on the order of 1/2 as fast as the desktop generally) in IE9 it took 34 seconds, and on Aurora 9.0a2 (without this patch) it takes (drumroll) 339 seconds.  beat 10x as long by 1 second!  Given the lack of improvement on my desktop machine, I suspect this patch won't help much (not that it's bad).", "text": "A rough test on my very fast Xeon went from 85 seconds (see bug 641340) to 82 seconds with this patch.  So this may have helped a little, but it doesn't look like it helped a lot. (Were any before/after profiles taken?  I could re-profile (I took one a few weeks ago) and compare.)  From my previous test, on the same system Chrome takes 4.5 seconds (close to 20x faster).  On my Win7 laptop (Lenovo W520 - also SandyBridge core i7 (2820QM in this case), but on the order of 1/2 as fast as the desktop generally) in IE9 it took 34 seconds, and on Aurora 9.0a2 (without this patch) it takes (drumroll) 339 seconds.  beat 10x as long by 1 second!  Given the lack of improvement on my desktop machine, I suspect this patch won't help much (not that it's bad).", "count": 35, "time": "2011-10-05T15:58:11Z"}, {"text": "> A rough test on my very fast Xeon went from 85 seconds (see bug 641340) to 82 seconds\n\nHow many measurements did you take?  This test is _very_ noisy and timing-dependent.\n\n> Were any before/after profiles taken? \n\nYes, of course.  Before the patch painting was about 50% of the total test time for the slice I profiled; after the patch it's closer to 60%.  If we assume painting speed is unchanged and number of paints is unchanged, that means that \"new time\" = \"old time\"*50/60.\n\nGiven that the maximum expected win was about 16% (see comment 0, which tells you exactly how much time the hotspot this bug is about was taking), that seems about right.", "bug_id": 641341, "raw_text": "> A rough test on my very fast Xeon went from 85 seconds (see bug 641340) to 82 seconds\n\nHow many measurements did you take?  This test is _very_ noisy and timing-dependent.\n\n> Were any before/after profiles taken? \n\nYes, of course.  Before the patch painting was about 50% of the total test time for the slice I profiled; after the patch it's closer to 60%.  If we assume painting speed is unchanged and number of paints is unchanged, that means that \"new time\" = \"old time\"*50/60.\n\nGiven that the maximum expected win was about 16% (see comment 0, which tells you exactly how much time the hotspot this bug is about was taking), that seems about right.", "creator": "bzbarsky@mit.edu", "tags": [], "creation_time": "2011-10-05T16:11:27Z", "attachment_id": null, "id": 5760482, "author": "bzbarsky@mit.edu", "time": "2011-10-05T16:11:27Z", "count": 36, "is_private": false}, {"id": 5760511, "author": "zlip.792@gmail.com", "is_private": false, "bug_id": 641341, "attachment_id": null, "creation_time": "2011-10-05T16:22:06Z", "tags": [], "count": 37, "time": "2011-10-05T16:22:06Z", "text": "My test system (i7 2600k at stock) with FF Nightly (70e4de45a0d0)with new profile showed just 75 seconds and with this bug fix in build (38a487da2def}, I got only 54 seconds.\nTest is with 30*30 maze, performed only once, both with new profile.", "creator": "zlip.792@gmail.com", "raw_text": "My test system (i7 2600k at stock) with FF Nightly (70e4de45a0d0)with new profile showed just 75 seconds and with this bug fix in build (38a487da2def}, I got only 54 seconds.\nTest is with 30*30 maze, performed only once, both with new profile."}, {"raw_text": "Is this bug really \"resolved\" I'm not seeing firefox nightly even coming close chrome, and even IE.\n\nOn a lowly AMD 4800+:\nIE9: 25 seconds (30x30)\nChrome: 12 seconds (30x30)\nFirefox: 154 seconnds\n\nI've re-run these tests a few times over, getting pretty much the same results (give or take a few seconds).", "creator": "mp3geek@gmail.com", "tags": [], "creation_time": "2011-10-05T23:56:43Z", "attachment_id": null, "text": "Is this bug really \"resolved\" I'm not seeing firefox nightly even coming close chrome, and even IE.\n\nOn a lowly AMD 4800+:\nIE9: 25 seconds (30x30)\nChrome: 12 seconds (30x30)\nFirefox: 154 seconnds\n\nI've re-run these tests a few times over, getting pretty much the same results (give or take a few seconds).", "bug_id": 641341, "author": "mp3geek@gmail.com", "time": "2011-10-05T23:56:43Z", "count": 38, "is_private": false, "id": 5762110}, {"bug_id": 641341, "tags": [], "creation_time": "2011-10-05T23:58:43Z", "attachment_id": null, "id": 5762117, "author": "dholbert@mozilla.com", "is_private": false, "text": "Your nightly was built before this was landed on mozilla-central (this morning, Comment 34).  Hopefully you'll see improved results in tomorrow's nightly.", "raw_text": "Your nightly was built before this was landed on mozilla-central (this morning, Comment 34).  Hopefully you'll see improved results in tomorrow's nightly.", "creator": "dholbert@mozilla.com", "time": "2011-10-05T23:58:43Z", "count": 39}, {"is_private": false, "author": "bzbarsky@mit.edu", "time": "2011-10-06T00:04:03Z", "count": 40, "id": 5762130, "tags": [], "creation_time": "2011-10-06T00:04:03Z", "attachment_id": null, "raw_text": "> Is this bug really \"resolved\"\n\nYes.  This bug wasn't \"make it as fast as other browsers\".  It was \"1/6 of the time we're spending is in this function; we can get rid of it\".  That's pretty obvious if you actually read comment 0 or comment 36.\n\nThere are other bugs that cover other things that we're slow on in this testcase.", "creator": "bzbarsky@mit.edu", "bug_id": 641341, "text": "> Is this bug really \"resolved\"\n\nYes.  This bug wasn't \"make it as fast as other browsers\".  It was \"1/6 of the time we're spending is in this function; we can get rid of it\".  That's pretty obvious if you actually read comment 0 or comment 36.\n\nThere are other bugs that cover other things that we're slow on in this testcase."}, {"time": "2011-10-27T15:32:43Z", "count": 41, "text": "For me this seems still not fixed :\n\nSafari 5.1.1 = 5,2 seconds\nChrome 16.0.886.0 (Developer Build 101724 Windows) = 6.8s\nIE9 = 19s\n\nFF Nightly build October 25 (32 and 64 bit) = i did not hat time enough to wait for the end", "raw_text": "For me this seems still not fixed :\n\nSafari 5.1.1 = 5,2 seconds\nChrome 16.0.886.0 (Developer Build 101724 Windows) = 6.8s\nIE9 = 19s\n\nFF Nightly build October 25 (32 and 64 bit) = i did not hat time enough to wait for the end", "creator": "frank.zimmer@web.de", "id": 5808925, "is_private": false, "author": "frank.zimmer@web.de", "bug_id": 641341, "creation_time": "2011-10-27T15:32:43Z", "tags": [], "attachment_id": null}, {"count": 42, "time": "2011-10-27T16:01:28Z", "author": "rjesup@jesup.org", "is_private": false, "id": 5809008, "creator": "rjesup@jesup.org", "raw_text": "As mentioned in comment 40 by bz, this bug was to reduce the overhead of one part of the problem, which accounted only for about 1/6th of the runtime, so even if it had been reduced to 0 by this bug, the test would only be ~1/6th faster.  See the other bugs in this group.", "attachment_id": null, "tags": [], "creation_time": "2011-10-27T16:01:28Z", "text": "As mentioned in comment 40 by bz, this bug was to reduce the overhead of one part of the problem, which accounted only for about 1/6th of the runtime, so even if it had been reduced to 0 by this bug, the test would only be ~1/6th faster.  See the other bugs in this group.", "bug_id": 641341}, {"time": "2011-11-07T05:30:43Z", "count": 43, "text": "> It does rely on the invariant that we reflow the placeholder before the abs pos frame. \n\nTurns out this is not true for cases when the containing block of the abs pos frame is a rel-pos inline or a rel pos block splitting across columns, because the placeholder might get pushed to a later continuation while the abs pos frame is reflowed after the first continuation is done.  Of course that means that in those case the layout ends up wrong with the old code, but that's probably better than crashing as in bug 696175.\n\nI just backed this out on inbound to fix bug 696175 for now.  Once we finish up bug 524925 we can do abs pos reflow later and fix this again.", "raw_text": "> It does rely on the invariant that we reflow the placeholder before the abs pos frame. \n\nTurns out this is not true for cases when the containing block of the abs pos frame is a rel-pos inline or a rel pos block splitting across columns, because the placeholder might get pushed to a later continuation while the abs pos frame is reflowed after the first continuation is done.  Of course that means that in those case the layout ends up wrong with the old code, but that's probably better than crashing as in bug 696175.\n\nI just backed this out on inbound to fix bug 696175 for now.  Once we finish up bug 524925 we can do abs pos reflow later and fix this again.", "creator": "bzbarsky@mit.edu", "id": 5829941, "author": "bzbarsky@mit.edu", "is_private": false, "bug_id": 641341, "tags": [], "creation_time": "2011-11-07T05:30:43Z", "attachment_id": null}, {"id": 6449005, "is_private": false, "author": "mayankleoboy1@gmail.com", "bug_id": 641341, "attachment_id": null, "creation_time": "2012-07-06T02:56:58Z", "tags": [], "count": 44, "time": "2012-07-06T02:56:58Z", "text": "this is the only benchmark that mnakes /firefox look bad in the latest Toms Hardware :Web browser Grand Prix.\nhttp://www.tomshardware.com/reviews/windows-7-chrome-20-firefox-13-opera-12,3228-8.html", "creator": "mayankleoboy1@gmail.com", "raw_text": "this is the only benchmark that mnakes /firefox look bad in the latest Toms Hardware :Web browser Grand Prix.\nhttp://www.tomshardware.com/reviews/windows-7-chrome-20-firefox-13-opera-12,3228-8.html"}, {"id": 6451891, "is_private": false, "count": 45, "author": "bzbarsky@mit.edu", "time": "2012-07-07T00:36:16Z", "bug_id": 641341, "text": "Yes, we do know that...", "attachment_id": null, "tags": [], "creation_time": "2012-07-07T00:36:16Z", "creator": "bzbarsky@mit.edu", "raw_text": "Yes, we do know that..."}, {"raw_text": "Though accelerated Direct2D Performance seems to have improved significantly already also in the maze test still have to test on the IGP but it looks very nice in Multimedia tasks already much much better then some days back :)", "creator": "nvidiadx@arcor.de", "text": "Though accelerated Direct2D Performance seems to have improved significantly already also in the maze test still have to test on the IGP but it looks very nice in Multimedia tasks already much much better then some days back :)", "time": "2012-08-19T10:58:11Z", "count": 46, "creation_time": "2012-08-19T10:58:11Z", "tags": [], "attachment_id": null, "bug_id": 641341, "is_private": false, "author": "nvidiadx@arcor.de", "id": 6565642}, {"text": "I was restricting myself for a long time now to DX9 (layers) because of the bad Direct2D Performance seems slowly that isn't needed anymore also the frame drops seem to have lowered nicely and also the extensions are more stable in that regards :)\nI guess all the new Profiling tools introduced really pay of now :)", "bug_id": 641341, "raw_text": "I was restricting myself for a long time now to DX9 (layers) because of the bad Direct2D Performance seems slowly that isn't needed anymore also the frame drops seem to have lowered nicely and also the extensions are more stable in that regards :)\nI guess all the new Profiling tools introduced really pay of now :)", "creator": "nvidiadx@arcor.de", "creation_time": "2012-08-19T11:03:49Z", "tags": [], "attachment_id": null, "id": 6565647, "time": "2012-08-19T11:03:49Z", "author": "nvidiadx@arcor.de", "count": 47, "is_private": false}, {"creator": "nvidiadx@arcor.de", "raw_text": "Also https://bugzilla.mozilla.org/show_bug.cgi?id=698297 shows very significant render improvements :)", "text": "Also https://bugzilla.mozilla.org/show_bug.cgi?id=698297 shows very significant render improvements :)", "count": 48, "time": "2012-08-19T11:19:04Z", "attachment_id": null, "tags": [], "creation_time": "2012-08-19T11:19:04Z", "bug_id": 641341, "author": "nvidiadx@arcor.de", "is_private": false, "id": 6565654}, {"id": 6565723, "is_private": false, "time": "2012-08-19T14:01:05Z", "author": "mayankleoboy1@gmail.com", "count": 49, "bug_id": 641341, "text": "This has really improved within a few days . :)  Very good performance. Not still comparable to other browsers, but much better than previous firefox performance. Congratulations!\n\nWhich patch/set of patched made this happen?", "tags": [], "creation_time": "2012-08-19T14:01:05Z", "attachment_id": null, "raw_text": "This has really improved within a few days . :)  Very good performance. Not still comparable to other browsers, but much better than previous firefox performance. Congratulations!\n\nWhich patch/set of patched made this happen?", "creator": "mayankleoboy1@gmail.com"}, {"raw_text": "Bug 524925.\n\nBoris, should we wontfix this bug now? I think post-bug-524925 this isn't needed.", "creator": "roc@ocallahan.org", "text": "Bug 524925.\n\nBoris, should we wontfix this bug now? I think post-bug-524925 this isn't needed.", "time": "2012-08-20T11:22:35Z", "count": 50, "tags": [], "creation_time": "2012-08-20T11:22:35Z", "attachment_id": null, "bug_id": 641341, "is_private": false, "author": "roc@ocallahan.org", "id": 6566864}, {"attachment_id": null, "creation_time": "2012-08-20T17:09:12Z", "tags": [], "bug_id": 641341, "is_private": false, "author": "MatsPalmgren_bugz@use.startmail.com", "id": 6567754, "creator": "MatsPalmgren_bugz@use.startmail.com", "raw_text": "Chrome 23 (Canary) takes ~6 seconds for a 30x30 maze.  Nightly 2012-08-02\ntakes ~16 seconds.  There's no reflow methods showing up in a shark\nbuild.  The results are:\n\nRunning (Self)          Symbol Name\n1886.0ms   7.2%         isalloc_validate\n    1040.0ms    3.9%        ozone_size\n    664.0ms     2.5%        ozone_free_definite_size\n    172.0ms     0.6%        ozone_free\n    5.0ms       0.0%        free\n    5.0ms       0.0%        ozone_realloc\n973.0ms    3.7%         aa_render_shape\n705.0ms    2.7%         _ZL11SearchTableP12PLDHashTablePKvj15PLDHashOperator\n524.0ms    2.0%         memmove$VARIANT$sse42\n455.0ms    1.7%         _spin_lock$VARIANT$mp\n443.0ms    1.6%         resample_byte_h_4cpp_vector\n436.0ms    1.6%         arena_dalloc\n368.0ms    1.4%         nsRegion::SetToElements(unsigned int)\n367.0ms    1.4%         arena_malloc\n305.0ms    1.1%         mozilla::(anonymous namespace)::ContainerState::ProcessDisplayItems(nsDisplayList const&, mozilla::FrameLayerBuilder::Clip&, unsigned int)\n... the rest is < 1% ...\n\nSo I would say this bug is worksforme.  I think we should still consider\ntaking some of the suggested improvements though even though it doesn't\nimpact this particular test anymore (at least the first patch seems\nworth it without adding much risk).\n\nBTW, is it reasonable that isalloc_validate takes this much time?", "text": "Chrome 23 (Canary) takes ~6 seconds for a 30x30 maze.  Nightly 2012-08-02\ntakes ~16 seconds.  There's no reflow methods showing up in a shark\nbuild.  The results are:\n\nRunning (Self)          Symbol Name\n1886.0ms   7.2%         isalloc_validate\n    1040.0ms    3.9%        ozone_size\n    664.0ms     2.5%        ozone_free_definite_size\n    172.0ms     0.6%        ozone_free\n    5.0ms       0.0%        free\n    5.0ms       0.0%        ozone_realloc\n973.0ms    3.7%         aa_render_shape\n705.0ms    2.7%         _ZL11SearchTableP12PLDHashTablePKvj15PLDHashOperator\n524.0ms    2.0%         memmove$VARIANT$sse42\n455.0ms    1.7%         _spin_lock$VARIANT$mp\n443.0ms    1.6%         resample_byte_h_4cpp_vector\n436.0ms    1.6%         arena_dalloc\n368.0ms    1.4%         nsRegion::SetToElements(unsigned int)\n367.0ms    1.4%         arena_malloc\n305.0ms    1.1%         mozilla::(anonymous namespace)::ContainerState::ProcessDisplayItems(nsDisplayList const&, mozilla::FrameLayerBuilder::Clip&, unsigned int)\n... the rest is < 1% ...\n\nSo I would say this bug is worksforme.  I think we should still consider\ntaking some of the suggested improvements though even though it doesn't\nimpact this particular test anymore (at least the first patch seems\nworth it without adding much risk).\n\nBTW, is it reasonable that isalloc_validate takes this much time?", "count": 51, "time": "2012-08-20T17:09:12Z"}, {"id": 6567807, "count": 52, "time": "2012-08-20T17:22:09Z", "author": "MatsPalmgren_bugz@use.startmail.com", "is_private": false, "text": "> Chrome 23 (Canary) takes ~6 seconds for a 30x30 maze.\n\nNote that this is after a Shift+Reload.  If you close the dialog and\nstart a new run without doing Shift+Reload Chrome will take a different\n(shorter) path through the maze, which takes 1.8 seconds.\n(this could of course influence our comparative score quite badly\ndepending on how these sites perform their tests)", "bug_id": 641341, "creator": "MatsPalmgren_bugz@use.startmail.com", "raw_text": "> Chrome 23 (Canary) takes ~6 seconds for a 30x30 maze.\n\nNote that this is after a Shift+Reload.  If you close the dialog and\nstart a new run without doing Shift+Reload Chrome will take a different\n(shorter) path through the maze, which takes 1.8 seconds.\n(this could of course influence our comparative score quite badly\ndepending on how these sites perform their tests)", "attachment_id": null, "creation_time": "2012-08-20T17:22:09Z", "tags": []}, {"is_private": false, "author": "mayankleoboy1@gmail.com", "id": 6567886, "tags": [], "creation_time": "2012-08-20T17:38:27Z", "attachment_id": null, "bug_id": 641341, "time": "2012-08-20T17:38:27Z", "count": 53, "raw_text": "with the latest nightly, a strange behaviour occurs. as soon as the maze starts solving,nightly is blazing fast.Faster than chrome But very quickly, it slows down. Thst is, after going maybe 25-30 steps, the solving slows down a lot.\n\nif you refresh the tab and start solving the maze again, it again start very fast but tapers very quickly.", "creator": "mayankleoboy1@gmail.com", "text": "with the latest nightly, a strange behaviour occurs. as soon as the maze starts solving,nightly is blazing fast.Faster than chrome But very quickly, it slows down. Thst is, after going maybe 25-30 steps, the solving slows down a lot.\n\nif you refresh the tab and start solving the maze again, it again start very fast but tapers very quickly."}, {"author": "brunis@gmail.com", "is_private": false, "id": 6568257, "attachment_id": null, "tags": [], "creation_time": "2012-08-20T19:20:42Z", "bug_id": 641341, "count": 54, "time": "2012-08-20T19:20:42Z", "creator": "brunis@gmail.com", "raw_text": "(In reply to mayankleoboy1 from comment #53)\n> with the latest nightly, a strange behaviour occurs. as soon as the maze\n> starts solving,nightly is blazing fast.Faster than chrome But very quickly,\n> it slows down. Thst is, after going maybe 25-30 steps, the solving slows\n> down a lot.\n> \n> if you refresh the tab and start solving the maze again, it again start very\n> fast but tapers very quickly.\n\nI can confirm this strange behaviour but only on Windows.. Linux runs fast all the way through.\n\nI'm sure you already know, but test speeds vary alot depending on maze. Would be nice with a configurable seed, so you could test the same maze on different browsers/builds.", "text": "(In reply to mayankleoboy1 from comment #53)\n> with the latest nightly, a strange behaviour occurs. as soon as the maze\n> starts solving,nightly is blazing fast.Faster than chrome But very quickly,\n> it slows down. Thst is, after going maybe 25-30 steps, the solving slows\n> down a lot.\n> \n> if you refresh the tab and start solving the maze again, it again start very\n> fast but tapers very quickly.\n\nI can confirm this strange behaviour but only on Windows.. Linux runs fast all the way through.\n\nI'm sure you already know, but test speeds vary alot depending on maze. Would be nice with a configurable seed, so you could test the same maze on different browsers/builds."}, {"raw_text": "The first maze generated is still same.", "creator": "zefling@ikilote.net", "text": "The first maze generated is still same.", "time": "2012-08-20T19:50:40Z", "count": 55, "tags": [], "creation_time": "2012-08-20T19:50:40Z", "attachment_id": null, "bug_id": 641341, "author": "zefling@ikilote.net", "is_private": false, "id": 6568348}, {"text": "(In reply to Robert O'Callahan (:roc) (Mozilla Corporation) from comment #50)\n> Bug 524925.\n\nActually I meant bug 691651.\n\nWe need to make it faster still. Bug 776190 tracks further improvements.", "raw_text": "(In reply to Robert O'Callahan (:roc) (Mozilla Corporation) from comment #50)\n> Bug 524925.\n\nActually I meant bug 691651.\n\nWe need to make it faster still. Bug 776190 tracks further improvements.", "creator": "roc@ocallahan.org", "time": "2012-08-21T04:56:53Z", "count": 56, "bug_id": 641341, "creation_time": "2012-08-21T04:56:53Z", "tags": [], "attachment_id": null, "id": 6569776, "author": "roc@ocallahan.org", "is_private": false}, {"author": "bzbarsky@mit.edu", "is_private": false, "id": 6571009, "attachment_id": null, "creation_time": "2012-08-21T16:15:49Z", "tags": [], "bug_id": 641341, "count": 57, "time": "2012-08-21T16:15:49Z", "creator": "bzbarsky@mit.edu", "raw_text": "Could people PLEASE stop spamming the bug, as well as every other bug related to maze solver?  I really didn't need literally dozens of mails about this.  :(\n\nWe know it got faster, per comment 56.  We know it's still quadratic as comment 53 describes.  That's bug 691645, which is clearly hanging off bug 776190.\n\nMats, I agree that it's still worth making some of the changes here.  I'm not going to have time to drive them in.  Will you?\n\nResummarizing to the remaining issue, but it might make sense to file a new bug for it without all the baggage of this one...", "text": "Could people PLEASE stop spamming the bug, as well as every other bug related to maze solver?  I really didn't need literally dozens of mails about this.  :(\n\nWe know it got faster, per comment 56.  We know it's still quadratic as comment 53 describes.  That's bug 691645, which is clearly hanging off bug 776190.\n\nMats, I agree that it's still worth making some of the changes here.  I'm not going to have time to drive them in.  Will you?\n\nResummarizing to the remaining issue, but it might make sense to file a new bug for it without all the baggage of this one..."}, {"id": 6571015, "author": "bzbarsky@mit.edu", "time": "2012-08-21T16:16:39Z", "count": 58, "is_private": false, "text": "And to be clear, I don't think we should overrotate on this, short of taking notes on how this could generally be done better for servo.  So I'd also be ok with a wontfix.", "bug_id": 641341, "raw_text": "And to be clear, I don't think we should overrotate on this, short of taking notes on how this could generally be done better for servo.  So I'd also be ok with a wontfix.", "creator": "bzbarsky@mit.edu", "tags": [], "creation_time": "2012-08-21T16:16:39Z", "attachment_id": null}]}}}