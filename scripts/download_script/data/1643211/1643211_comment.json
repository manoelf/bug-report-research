{"comments": {}, "bugs": {"1643211": {"comments": [{"author": "agashlin+bz@gmail.com", "tags": [], "creator": "agashlin+bz@gmail.com", "attachment_id": null, "id": 14861943, "bug_id": 1643211, "count": 0, "is_private": false, "raw_text": "A BCJ filter works by converting relative offsets into absolute positions in code, to increase redundancy by representing all references to a position by the same bytes. This assumes that the files are executables and performs a simple disassembly to locate the relative offsets. This disassembly is optimized for speed and doesn't have to be completely accurate, but inaccurately-identified targets will reduce compressibility. Also, some relative offsets are likely to be fairly common (e.g. short-distance branches), while the positions they refer to are individually referenced more rarely. Generally these issues are more than offset by the improvement in commonly-referenced code.\n\nOur update .mars use this on each file in the update, whether it is a wholly new file or a BSDiff patch. In the case of a patch this analysis is not as valuable because the patch contains pieces of new code at arbitrary positions, so relative offsets will not translate reliably to the same absolute position.\n\nThe upshot is that using BCJ increases patch size. Here are the effects on recent partial updates of disabling BCJ:\n\nupdate | arch | BCJ | no BCJ | decrease\n---| --- | --- | --- | ---\n76.0-77.0 | win32 | 12,554,866 | 12,274,570 | 280,296\n76.0-77.0 | win64 | 12,444,221 | 12,137,601 | 306,620\n2020-06-01-09-38-12 - 2020-06-01-21-42-28 | win32 | 7,486,437 | 7,441,697 | 44,740\n2020-06-01-09-38-12_2020-06-01-21-42-28 | win64 | 8,450,892 | 8,353,316 | 97,576\n\nIt's not a big difference, but it is simple to fix.", "text": "A BCJ filter works by converting relative offsets into absolute positions in code, to increase redundancy by representing all references to a position by the same bytes. This assumes that the files are executables and performs a simple disassembly to locate the relative offsets. This disassembly is optimized for speed and doesn't have to be completely accurate, but inaccurately-identified targets will reduce compressibility. Also, some relative offsets are likely to be fairly common (e.g. short-distance branches), while the positions they refer to are individually referenced more rarely. Generally these issues are more than offset by the improvement in commonly-referenced code.\n\nOur update .mars use this on each file in the update, whether it is a wholly new file or a BSDiff patch. In the case of a patch this analysis is not as valuable because the patch contains pieces of new code at arbitrary positions, so relative offsets will not translate reliably to the same absolute position.\n\nThe upshot is that using BCJ increases patch size. Here are the effects on recent partial updates of disabling BCJ:\n\nupdate | arch | BCJ | no BCJ | decrease\n---| --- | --- | --- | ---\n76.0-77.0 | win32 | 12,554,866 | 12,274,570 | 280,296\n76.0-77.0 | win64 | 12,444,221 | 12,137,601 | 306,620\n2020-06-01-09-38-12 - 2020-06-01-21-42-28 | win32 | 7,486,437 | 7,441,697 | 44,740\n2020-06-01-09-38-12_2020-06-01-21-42-28 | win64 | 8,450,892 | 8,353,316 | 97,576\n\nIt's not a big difference, but it is simple to fix.", "time": "2020-06-04T01:35:02Z", "creation_time": "2020-06-04T01:35:02Z"}, {"author": "agashlin+bz@gmail.com", "tags": [], "creator": "agashlin+bz@gmail.com", "attachment_id": 9154059, "id": 14861961, "bug_id": 1643211, "count": 1, "is_private": false, "raw_text": "", "creation_time": "2020-06-04T01:51:47Z", "time": "2020-06-04T01:51:47Z", "text": "Created attachment 9154059\nBug 1643211 - Don't use BCJ on patches. r?nthomas"}, {"raw_text": "I wonder also about using the BCJ filter on non-executable data like the omni.ja files. Does disabling it there have any impact?", "creation_time": "2020-06-04T13:41:25Z", "text": "I wonder also about using the BCJ filter on non-executable data like the omni.ja files. Does disabling it there have any impact?", "time": "2020-06-04T13:41:25Z", "is_private": false, "count": 2, "bug_id": 1643211, "id": 14862822, "creator": "catlee@mozilla.com", "attachment_id": null, "author": "catlee@mozilla.com", "tags": []}, {"raw_text": "Good question. On x86/x64 (the only arches we use BCJ on), the only [opcodes used](https://git.tukaani.org/?p=xz.git;a=blob;f=src/liblzma/simple/x86.c;h=5d1509bb227807497ce34afe797bd5bb8faae9b5;hb=cd69a5a6c16c289f6f8e2823b03c72289472270f#l50) are 0xE8 (CALL near) and 0xE9 (JMP near), and as omni.ja is mostly ASCII text < 0x80 this shouldn't come up too often. For 77.0:\n\nfile | BCJ | no BCJ | decrease\n--- | --- | --- | ---\nomni.ja | 4,816,116 | 4,803,712 | 12,404\nbrowser/omni.ja | 11,836,084 | 11,837,088 | -1,004\n\nIt's weird that the size goes up slightly with browser/omni.ja, at that level it's likely just noise.\n\nI didn't want to include something like this in the patch because it's a little more complicated to check for these files, and adding a \"non-exe\" list would be a pain to maintain for little benefit.", "time": "2020-06-04T16:49:01Z", "is_private": false, "count": 3, "bug_id": 1643211, "id": 14863350, "creator": "agashlin+bz@gmail.com", "text": "Good question. On x86/x64 (the only arches we use BCJ on), the only [opcodes used](https://git.tukaani.org/?p=xz.git;a=blob;f=src/liblzma/simple/x86.c;h=5d1509bb227807497ce34afe797bd5bb8faae9b5;hb=cd69a5a6c16c289f6f8e2823b03c72289472270f#l50) are 0xE8 (CALL near) and 0xE9 (JMP near), and as omni.ja is mostly ASCII text < 0x80 this shouldn't come up too often. For 77.0:\n\nfile | BCJ | no BCJ | decrease\n--- | --- | --- | ---\nomni.ja | 4,816,116 | 4,803,712 | 12,404\nbrowser/omni.ja | 11,836,084 | 11,837,088 | -1,004\n\nIt's weird that the size goes up slightly with browser/omni.ja, at that level it's likely just noise.\n\nI didn't want to include something like this in the patch because it's a little more complicated to check for these files, and adding a \"non-exe\" list would be a pain to maintain for little benefit.", "creation_time": "2020-06-04T16:49:01Z", "attachment_id": null, "author": "agashlin+bz@gmail.com", "tags": []}, {"author": "catlee@mozilla.com", "tags": [], "creator": "catlee@mozilla.com", "attachment_id": null, "id": 14865310, "bug_id": 1643211, "count": 4, "is_private": false, "raw_text": "Weird, I have the opposite results with nightly:\n\nfile | BCJ | no BCJ | decrease\n----| --- | ----| ----\nomni.ja | 5,004,308 | 4,991,108 | 13,200\nbrowser/omni.ja | 12,909,728 | 12,905,312 | 4,416\n\nIn any case, it's a pretty small difference for these two files. There are a few other non-executable files in the updates, but those are definitely the largest.", "creation_time": "2020-06-05T14:13:29Z", "time": "2020-06-05T14:13:29Z", "text": "Weird, I have the opposite results with nightly:\n\nfile | BCJ | no BCJ | decrease\n----| --- | ----| ----\nomni.ja | 5,004,308 | 4,991,108 | 13,200\nbrowser/omni.ja | 12,909,728 | 12,905,312 | 4,416\n\nIn any case, it's a pretty small difference for these two files. There are a few other non-executable files in the updates, but those are definitely the largest."}, {"count": 5, "text": "Pushed by agashlin@mozilla.com:\nhttps://hg.mozilla.org/integration/autoland/rev/ad757ab87752\nDon't use BCJ on patches. r=sfraser", "creation_time": "2020-06-08T18:04:43Z", "time": "2020-06-08T18:04:43Z", "raw_text": "Pushed by agashlin@mozilla.com:\nhttps://hg.mozilla.org/integration/autoland/rev/ad757ab87752\nDon't use BCJ on patches. r=sfraser", "is_private": false, "attachment_id": null, "creator": "pulsebot@bots.tld", "tags": [], "author": "pulsebot@bots.tld", "bug_id": 1643211, "id": 14870078}, {"creator": "dluca@mozilla.com", "attachment_id": null, "author": "dluca@mozilla.com", "tags": ["bugherder"], "bug_id": 1643211, "id": 14870560, "count": 6, "raw_text": "https://hg.mozilla.org/mozilla-central/rev/ad757ab87752", "time": "2020-06-08T21:40:54Z", "text": "https://hg.mozilla.org/mozilla-central/rev/ad757ab87752", "creation_time": "2020-06-08T21:40:54Z", "is_private": false}]}}}