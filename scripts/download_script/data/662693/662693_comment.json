{"comments": {}, "bugs": {"662693": {"comments": [{"is_private": false, "creation_time": "2011-06-08T00:33:55Z", "creator": "dholbert@mozilla.com", "tags": [], "attachment_id": null, "bug_id": 662693, "id": 5518868, "count": 0, "text": "IIUC, part of the problem in bug 662242 is that we're serializing a nsIURI *as a nsIURI*, when we should be serializing it as a nsISupports.\n\nThe problem is that old builds begin their serializing using the (old) nsIURI IID, which new builds don't understand when de-serializing.\n\nIf instead we QI to nsISupports before serializing, then (as long as nsISupports IID doesn't change) we'll still be able to de-serialize, regardless of the nsIURI IID.\n\nSo, I think we need this change to prevent more instances of bug 662242 when the nsIURI IID next gets changed...", "author": "dholbert@mozilla.com", "raw_text": "IIUC, part of the problem in bug 662242 is that we're serializing a nsIURI *as a nsIURI*, when we should be serializing it as a nsISupports.\n\nThe problem is that old builds begin their serializing using the (old) nsIURI IID, which new builds don't understand when de-serializing.\n\nIf instead we QI to nsISupports before serializing, then (as long as nsISupports IID doesn't change) we'll still be able to de-serialize, regardless of the nsIURI IID.\n\nSo, I think we need this change to prevent more instances of bug 662242 when the nsIURI IID next gets changed...", "time": "2011-06-08T00:33:55Z"}, {"bug_id": 662693, "id": 5518872, "count": 1, "text": "See bug 524245 for another area of code where we applied this same sort of fix, a while back.", "author": "dholbert@mozilla.com", "time": "2011-06-08T00:34:51Z", "raw_text": "See bug 524245 for another area of code where we applied this same sort of fix, a while back.", "is_private": false, "creation_time": "2011-06-08T00:34:51Z", "creator": "dholbert@mozilla.com", "tags": [], "attachment_id": null}, {"creation_time": "2011-09-20T05:53:23Z", "is_private": false, "creator": "VYV03354@nifty.ne.jp", "tags": [], "attachment_id": null, "id": 5724904, "bug_id": 662693, "author": "VYV03354@nifty.ne.jp", "count": 2, "text": "> If instead we QI to nsISupports before serializing, then (as long as nsISupports \n> IID doesn't change)\nThe nsISupports IID is going to be changed by bug 391275...", "raw_text": "> If instead we QI to nsISupports before serializing, then (as long as nsISupports \n> IID doesn't change)\nThe nsISupports IID is going to be changed by bug 391275...", "time": "2011-09-20T05:53:23Z"}, {"time": "2011-09-20T06:17:15Z", "raw_text": "At which point sessionstore is well and truly screwed for the update across that change, at least for anything that involves principals...\n\nUnless, of course, we hardcode the old nsISupports IID in the object stream code in the process.", "id": 5724927, "bug_id": 662693, "author": "bzbarsky@mit.edu", "count": 3, "text": "At which point sessionstore is well and truly screwed for the update across that change, at least for anything that involves principals...\n\nUnless, of course, we hardcode the old nsISupports IID in the object stream code in the process.", "tags": [], "attachment_id": null, "is_private": false, "creation_time": "2011-09-20T06:17:15Z", "creator": "bzbarsky@mit.edu"}, {"tags": [], "raw_text": "And I must note that serializing the nsISupports IID is pretty silly.  Wish the code were not doing that.  :(", "attachment_id": null, "time": "2011-09-20T06:19:30Z", "creation_time": "2011-09-20T06:19:30Z", "is_private": false, "bug_id": 662693, "id": 5724930, "count": 4, "text": "And I must note that serializing the nsISupports IID is pretty silly.  Wish the code were not doing that.  :(", "author": "bzbarsky@mit.edu", "creator": "bzbarsky@mit.edu"}, {"id": 5725175, "bug_id": 662693, "is_private": false, "creation_time": "2011-09-20T10:25:36Z", "creator": "benjamin@smedbergs.us", "count": 5, "text": "For persistent datastores we should be serializing it as \"nsIURI\" not \"IID to any particular interface\", and make sure that deserialization works across the versions we care about. No?", "author": "benjamin@smedbergs.us", "tags": [], "time": "2011-09-20T10:25:36Z", "raw_text": "For persistent datastores we should be serializing it as \"nsIURI\" not \"IID to any particular interface\", and make sure that deserialization works across the versions we care about. No?", "attachment_id": null}, {"attachment_id": null, "raw_text": "In my ideal world, yes.  That's not how the object output stream works right now....  :(", "time": "2011-09-20T16:24:51Z", "tags": [], "author": "bzbarsky@mit.edu", "text": "In my ideal world, yes.  That's not how the object output stream works right now....  :(", "count": 6, "creator": "bzbarsky@mit.edu", "is_private": false, "creation_time": "2011-09-20T16:24:51Z", "bug_id": 662693, "id": 5725802}, {"creator": "ehsan.akhgari@gmail.com", "author": "ehsan.akhgari@gmail.com", "count": 7, "text": "So, what kinds of objects do we serialize here?  Relying on IIDs not changing is really fragile...\n\nCan you please point me to the code responsible here too?  This area is new to me...", "id": 5725845, "bug_id": 662693, "is_private": false, "creation_time": "2011-09-20T16:36:51Z", "time": "2011-09-20T16:36:51Z", "attachment_id": null, "raw_text": "So, what kinds of objects do we serialize here?  Relying on IIDs not changing is really fragile...\n\nCan you please point me to the code responsible here too?  This area is new to me...", "tags": []}, {"attachment_id": null, "raw_text": "\"Here\" as in session restore?\n\nI believe we serialize nsIPrincipal objects, which transitively involves serializing nsIURI objects.  Both have several different concrete implementations.\n\nThe relevant code that's most likely to be an issue here is nsPrincipal::Write, nsBinaryOutputStream::WriteCompoundObject, and nsBinaryInputStream::ReadObject.\n\nNote that this last already has some hackery to deal with nsIURI issues, which is precisely what this bug is about.", "time": "2011-09-20T16:47:28Z", "tags": [], "author": "bzbarsky@mit.edu", "count": 8, "text": "\"Here\" as in session restore?\n\nI believe we serialize nsIPrincipal objects, which transitively involves serializing nsIURI objects.  Both have several different concrete implementations.\n\nThe relevant code that's most likely to be an issue here is nsPrincipal::Write, nsBinaryOutputStream::WriteCompoundObject, and nsBinaryInputStream::ReadObject.\n\nNote that this last already has some hackery to deal with nsIURI issues, which is precisely what this bug is about.", "creator": "bzbarsky@mit.edu", "creation_time": "2011-09-20T16:47:28Z", "is_private": false, "id": 5725889, "bug_id": 662693}, {"tags": [], "attachment_id": null, "is_private": false, "creation_time": "2011-09-20T22:47:08Z", "creator": "ehsan.akhgari@gmail.com", "raw_text": "Hmm, well, hacking around this kind of stuff seems to have precedent :(  I don't have much to add to comment 5, but I'm afraid we might need to hack around this for now.  But that makes me die a little bit inside.", "time": "2011-09-20T22:47:08Z", "bug_id": 662693, "id": 5727023, "count": 9, "text": "Hmm, well, hacking around this kind of stuff seems to have precedent :(  I don't have much to add to comment 5, but I'm afraid we might need to hack around this for now.  But that makes me die a little bit inside.", "author": "ehsan.akhgari@gmail.com"}]}}}