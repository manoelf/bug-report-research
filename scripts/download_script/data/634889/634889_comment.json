{"comments": {}, "bugs": {"634889": {"comments": [{"id": 5286088, "time": "2011-02-17T14:05:45Z", "tags": [], "raw_text": "M-C of 16 Feb 11 + patch below (suggested by zpao) to indicate when\ntab restore is complete.  jemalloc build.  Startup + restore of 20\ncad-comic.com tabs.\n\nAccording to the patch, tabs are restored after about 18 billion\ninstructions (vertical black line in both pictures).  However, there's\na strikingly straight slope up after that point, from around 27\nbillion to 47 billion instructions.  It's only at that point that a\nmemory use plateau is achieved.", "bug_id": 634889, "creation_time": "2011-02-17T14:05:45Z", "is_private": false, "count": 0, "text": "M-C of 16 Feb 11 + patch below (suggested by zpao) to indicate when\ntab restore is complete.  jemalloc build.  Startup + restore of 20\ncad-comic.com tabs.\n\nAccording to the patch, tabs are restored after about 18 billion\ninstructions (vertical black line in both pictures).  However, there's\na strikingly straight slope up after that point, from around 27\nbillion to 47 billion instructions.  It's only at that point that a\nmemory use plateau is achieved.", "author": "jseward@acm.org", "creator": "jseward@acm.org", "attachment_id": null}, {"creator": "jseward@acm.org", "attachment_id": 513105, "count": 1, "text": "Created attachment 513105\npage level profile\n\nPage level profile; tab restore complete at the vertical black line", "author": "jseward@acm.org", "tags": [], "creation_time": "2011-02-17T14:07:43Z", "bug_id": 634889, "raw_text": "Page level profile; tab restore complete at the vertical black line", "is_private": false, "id": 5286095, "time": "2011-02-17T14:07:43Z"}, {"text": "Created attachment 513112\nheap (malloc) level profile\n\nLeaking seems to be in the C++ heap, so I re-ran profiling that.\nBlack line again marks tab restore completion.  Striking slope\nup in the lowermost red band.  The extra memory is allocated by\n\nhuge_malloc\n  posix_memalign\n    XPConnectGCChunkAllocator::doAlloc()\n      PickChunk(JSRuntime*)\n        RefillFinalizableFreeList(JSContext*, unsigned int)\n          T.2837 (gsgcinlines.h:127)\n            js::mjit::stubs::NewInitObject(Js::VMFrame*, JSObject*)\n              ??? (mjit created code)\n                js::mjit::EnterMethodJit\n                  js::mjit::JaegerShot\n                    js::RunScript\n                      js::Invoke\n                        js::ExternalInvoke\n                          JS_CallFunctionValue\n                            nsJSContext::CallEventHandler\n                              nsGlobalWindow::RunTimeout\n                                nsGlobalWindow::TimerCallback\n                                  nsTimerImpl::Fire\n                                    nsTimerEvent::Run\n                                      nsThread::ProcessNextEvent", "count": 2, "author": "jseward@acm.org", "time": "2011-02-17T14:21:17Z", "id": 5286116, "raw_text": "Leaking seems to be in the C++ heap, so I re-ran profiling that.\nBlack line again marks tab restore completion.  Striking slope\nup in the lowermost red band.  The extra memory is allocated by\n\nhuge_malloc\n  posix_memalign\n    XPConnectGCChunkAllocator::doAlloc()\n      PickChunk(JSRuntime*)\n        RefillFinalizableFreeList(JSContext*, unsigned int)\n          T.2837 (gsgcinlines.h:127)\n            js::mjit::stubs::NewInitObject(Js::VMFrame*, JSObject*)\n              ??? (mjit created code)\n                js::mjit::EnterMethodJit\n                  js::mjit::JaegerShot\n                    js::RunScript\n                      js::Invoke\n                        js::ExternalInvoke\n                          JS_CallFunctionValue\n                            nsJSContext::CallEventHandler\n                              nsGlobalWindow::RunTimeout\n                                nsGlobalWindow::TimerCallback\n                                  nsTimerImpl::Fire\n                                    nsTimerEvent::Run\n                                      nsThread::ProcessNextEvent", "creation_time": "2011-02-17T14:21:17Z", "bug_id": 634889, "creator": "jseward@acm.org", "tags": [], "is_private": false, "attachment_id": 513112}, {"tags": [], "creator": "jseward@acm.org", "bug_id": 634889, "creation_time": "2011-02-17T14:24:17Z", "raw_text": "(In reply to comment #0)\n> M-C of 16 Feb 11 + patch below (suggested by zpao)\n\nOops, forgot to show the patch.  Is below.\n\nAlso, I should say, compared to profiles I have for M-C of 6 Jan 11 on\nthe same workload, this slope up is new -- I haven't seen it before.\n\n\n\ndiff --git a/browser/components/sessionstore/src/nsSessionStore.js b/browser/components/sessionstore/src/nsSessionStore.js\n--- a/browser/components/sessionstore/src/nsSessionStore.js\n+++ b/browser/components/sessionstore/src/nsSessionStore.js\n@@ -3981,18 +3981,20 @@ SessionStoreService.prototype = {\n    * Attempt to remove the tabs progress listener from the window.\n    *\n    * @param aWindow\n    *        The window from which to remove our progress listener from\n    */\n   _removeTabsProgressListener: function sss__removeTabsProgressListener(aWindow) {\n     // If there are no tabs left to restore (or restoring) in this window, then\n     // we can safely remove the progress listener from this window.\n-    if (!aWindow.__SS_tabsToRestore)\n+    if (!aWindow.__SS_tabsToRestore) {\n       aWindow.gBrowser.removeTabsProgressListener(gRestoreTabsProgressListener);\n+      dump(\"XXXXXXXXXXXXXXXX session restore complete\\n\");\n+    }\n   },\n \n   /**\n    * Remove the session history listener from the tab's browser if there is one.\n    *\n    * @param aTab\n    *        The tab who's browser to remove the listener\n    */", "is_private": false, "attachment_id": null, "text": "(In reply to comment #0)\n> M-C of 16 Feb 11 + patch below (suggested by zpao)\n\nOops, forgot to show the patch.  Is below.\n\nAlso, I should say, compared to profiles I have for M-C of 6 Jan 11 on\nthe same workload, this slope up is new -- I haven't seen it before.\n\n\n\ndiff --git a/browser/components/sessionstore/src/nsSessionStore.js b/browser/components/sessionstore/src/nsSessionStore.js\n--- a/browser/components/sessionstore/src/nsSessionStore.js\n+++ b/browser/components/sessionstore/src/nsSessionStore.js\n@@ -3981,18 +3981,20 @@ SessionStoreService.prototype = {\n    * Attempt to remove the tabs progress listener from the window.\n    *\n    * @param aWindow\n    *        The window from which to remove our progress listener from\n    */\n   _removeTabsProgressListener: function sss__removeTabsProgressListener(aWindow) {\n     // If there are no tabs left to restore (or restoring) in this window, then\n     // we can safely remove the progress listener from this window.\n-    if (!aWindow.__SS_tabsToRestore)\n+    if (!aWindow.__SS_tabsToRestore) {\n       aWindow.gBrowser.removeTabsProgressListener(gRestoreTabsProgressListener);\n+      dump(\"XXXXXXXXXXXXXXXX session restore complete\\n\");\n+    }\n   },\n \n   /**\n    * Remove the session history listener from the tab's browser if there is one.\n    *\n    * @param aTab\n    *        The tab who's browser to remove the listener\n    */", "count": 3, "id": 5286121, "time": "2011-02-17T14:24:17Z", "author": "jseward@acm.org"}, {"id": 5286681, "author": "gal@uci.edu", "time": "2011-02-17T17:37:59Z", "text": "I am not sure leak is the right word here. The JS heap has a size limit. Until that is reached, we keep growing it. That heap is allocated dynamically.", "count": 4, "attachment_id": null, "is_private": false, "creator": "gal@uci.edu", "tags": [], "raw_text": "I am not sure leak is the right word here. The JS heap has a size limit. Until that is reached, we keep growing it. That heap is allocated dynamically.", "bug_id": 634889, "creation_time": "2011-02-17T17:37:59Z"}, {"count": 5, "text": "To be fair I'm not sure the marker you have for \"session is restored\" is completely correct (I know it's what I told you to use to get as close as possible with 1 line).\n\nIt should indicate that we've gotten Ci.nsIWebProgressListener.STATE_STOP && Ci.nsIWebProgressListener.STATE_IS_NETWORK && Ci.nsIWebProgressListener.STATE_IS_WINDOW from each tab's browser. But I'm pretty sure that doesn't necessarily mean all loading is necessarily done (and some requests made via JS probably aren't accounted for).\n\nSessionstore also does some further work in each tab on the document \"load\" matching the url we have saved (for restoring form data).\n\nWith a bit more work we might be able to get a slightly more accurate \"we're done loading everything\" time.\n\nLet me know if there's anything I can do to help here.", "time": "2011-02-17T18:50:59Z", "author": "paul@oshannessy.com", "id": 5286942, "creation_time": "2011-02-17T18:50:59Z", "bug_id": 634889, "raw_text": "To be fair I'm not sure the marker you have for \"session is restored\" is completely correct (I know it's what I told you to use to get as close as possible with 1 line).\n\nIt should indicate that we've gotten Ci.nsIWebProgressListener.STATE_STOP && Ci.nsIWebProgressListener.STATE_IS_NETWORK && Ci.nsIWebProgressListener.STATE_IS_WINDOW from each tab's browser. But I'm pretty sure that doesn't necessarily mean all loading is necessarily done (and some requests made via JS probably aren't accounted for).\n\nSessionstore also does some further work in each tab on the document \"load\" matching the url we have saved (for restoring form data).\n\nWith a bit more work we might be able to get a slightly more accurate \"we're done loading everything\" time.\n\nLet me know if there's anything I can do to help here.", "tags": [], "creator": "paul@oshannessy.com", "is_private": false, "attachment_id": null}]}}}