{"comments": {}, "bugs": {"703132": {"comments": [{"bug_id": 703132, "id": 5853978, "is_private": false, "count": 0, "tags": [], "attachment_id": null, "time": "2011-11-16T23:59:51Z", "text": "Noticed that Firefox 7 on my local machine was significantly faster than Firefox 11 nightly at running:\nhttp://stepheneb.github.com/webgl-matrix-benchmarks/matrix_benchmark.html\n\nPattern held in Linux and Windows, 32 bit and 64 bit, Firefox 7 and 8 (fast) vs Firefox 9, 10 and 11 (slow)\n\nDisabling TI did appear to slightly improve scores, but not as much as performance in older versions.\n\nGiven these matrix libraries are heavily used by most WebGL out there, it seemed worth filing a bug about.\n\nBrowser Library Multiplication  Translation Scaling Rotation (Arbitrary axis)   Rotation (X axis)   Transpose   Inverse Inverse 3x3 Vector Transformation   Average\nFF7  closure 11.37   25.94   22.75   2.14    2.10    35.74   12.84   27.92   26.28   18.57\nFF11 closure 6.90    14.08   9.10    1.74    1.73    24.51   5.74    13.26   20.87   10.88\n\nFF7  TDLFast 10.24   24.27   29.46   2.01    2.28    30.98   10.17           15.63\nFF11 TLDFast 6.44    8.40    30.06   1.71    2.29    29.76   4.86            11.93\n\n... and so on.", "raw_text": "Noticed that Firefox 7 on my local machine was significantly faster than Firefox 11 nightly at running:\nhttp://stepheneb.github.com/webgl-matrix-benchmarks/matrix_benchmark.html\n\nPattern held in Linux and Windows, 32 bit and 64 bit, Firefox 7 and 8 (fast) vs Firefox 9, 10 and 11 (slow)\n\nDisabling TI did appear to slightly improve scores, but not as much as performance in older versions.\n\nGiven these matrix libraries are heavily used by most WebGL out there, it seemed worth filing a bug about.\n\nBrowser Library Multiplication  Translation Scaling Rotation (Arbitrary axis)   Rotation (X axis)   Transpose   Inverse Inverse 3x3 Vector Transformation   Average\nFF7  closure 11.37   25.94   22.75   2.14    2.10    35.74   12.84   27.92   26.28   18.57\nFF11 closure 6.90    14.08   9.10    1.74    1.73    24.51   5.74    13.26   20.87   10.88\n\nFF7  TDLFast 10.24   24.27   29.46   2.01    2.28    30.98   10.17           15.63\nFF11 TLDFast 6.44    8.40    30.06   1.71    2.29    29.76   4.86            11.93\n\n... and so on.", "creation_time": "2011-11-16T23:59:51Z", "author": "bugs@m8y.org", "creator": "bugs@m8y.org"}, {"author": "dmandelin@mozilla.com", "creator": "dmandelin@mozilla.com", "bug_id": 703132, "id": 5864242, "tags": [], "count": 1, "is_private": false, "time": "2011-11-22T01:00:35Z", "attachment_id": null, "text": "From IRC:\n\n<bhackett> I looked at one of the tests being done there\n<bhackett> I wish it was easier to isolate subpieces of that page for profiling\n<bhackett> it was a matrix multiplication in the closure library\n<bhackett> basically a fully unrolled loop accessing constant indexes of a typed array\n<bhackett> I suspect the problem is bad codegen due to a lack of CSE\n<bhackett> but need to confirm\n<dmandelin> do you know why it got slower? did it used to trace?\n<bhackett> yeah\n<dmandelin> ah, ok\n<dmandelin> ok, i'll post in that bug\n<dmandelin> thanks\n<bhackett> ok\n<bhackett> I'm hoping to look some more at that later this week\n<bhackett> have also been thinking about an easy fix, but the real solution will be to just push forward on IonMonkey\n<dmandelin> ok, i'll leave it on tracking status for now, in case you get the easy fix\n<bhackett> the easy fix may be worth it if this unrolled-constant-index pattern is pervasive in the regressing bits of the page\n<dmandelin> ok\n\nSo, this used to trace before TI, and it benefited from the tracer's CSE, which isn't present in JM or JM+TI. IM will have that optimization, so long-term, this should only get better. Thanks for the test cases and report--this should help us.\n\nFor now, Brian may have an easy fix, but otherwise, in the absence of specific programs that stop working because of the regression, this isn't urgent.", "creation_time": "2011-11-22T01:00:35Z", "raw_text": "From IRC:\n\n<bhackett> I looked at one of the tests being done there\n<bhackett> I wish it was easier to isolate subpieces of that page for profiling\n<bhackett> it was a matrix multiplication in the closure library\n<bhackett> basically a fully unrolled loop accessing constant indexes of a typed array\n<bhackett> I suspect the problem is bad codegen due to a lack of CSE\n<bhackett> but need to confirm\n<dmandelin> do you know why it got slower? did it used to trace?\n<bhackett> yeah\n<dmandelin> ah, ok\n<dmandelin> ok, i'll post in that bug\n<dmandelin> thanks\n<bhackett> ok\n<bhackett> I'm hoping to look some more at that later this week\n<bhackett> have also been thinking about an easy fix, but the real solution will be to just push forward on IonMonkey\n<dmandelin> ok, i'll leave it on tracking status for now, in case you get the easy fix\n<bhackett> the easy fix may be worth it if this unrolled-constant-index pattern is pervasive in the regressing bits of the page\n<dmandelin> ok\n\nSo, this used to trace before TI, and it benefited from the tracer's CSE, which isn't present in JM or JM+TI. IM will have that optimization, so long-term, this should only get better. Thanks for the test cases and report--this should help us.\n\nFor now, Brian may have an easy fix, but otherwise, in the absence of specific programs that stop working because of the regression, this isn't urgent."}, {"author": "bugs@m8y.org", "creator": "bugs@m8y.org", "raw_text": "Hm. All you need are specific programs that use any of these javascript matrix libraries? :)\n\nOk, I shall embark on a project of testing before/after in all the demos on planet webgl tomorrow.\n\nThese libs are all used after all.\n\nUnless your suspicion is that the actual uses aren't as intensive, which seems a little unlikely.", "creation_time": "2011-12-03T02:16:30Z", "attachment_id": null, "time": "2011-12-03T02:16:30Z", "text": "Hm. All you need are specific programs that use any of these javascript matrix libraries? :)\n\nOk, I shall embark on a project of testing before/after in all the demos on planet webgl tomorrow.\n\nThese libs are all used after all.\n\nUnless your suspicion is that the actual uses aren't as intensive, which seems a little unlikely.", "id": 5890128, "tags": [], "is_private": false, "count": 2, "bug_id": 703132}, {"author": "dmandelin@mozilla.com", "creator": "dmandelin@mozilla.com", "raw_text": "(In reply to nemo from comment #2)\n> Hm. All you need are specific programs that use any of these javascript\n> matrix libraries? :)\n\nWe'll want to optimize these someday. That's why they're linked to JaegerWebSpeed and infer-perf-regress. To be a high priority right now, we'd need examples where the user experience is significantly expected. If it's measurably slower, but good enough to run the app, then it's good enough for now.", "creation_time": "2011-12-03T02:24:34Z", "attachment_id": null, "time": "2011-12-03T02:24:34Z", "text": "(In reply to nemo from comment #2)\n> Hm. All you need are specific programs that use any of these javascript\n> matrix libraries? :)\n\nWe'll want to optimize these someday. That's why they're linked to JaegerWebSpeed and infer-perf-regress. To be a high priority right now, we'd need examples where the user experience is significantly expected. If it's measurably slower, but good enough to run the app, then it's good enough for now.", "id": 5890136, "is_private": false, "count": 3, "tags": [], "bug_id": 703132}, {"count": 4, "is_private": false, "tags": [], "id": 5961629, "bug_id": 703132, "raw_text": "Does this need to be tracked any longer?", "creation_time": "2012-01-06T21:42:34Z", "text": "Does this need to be tracked any longer?", "time": "2012-01-06T21:42:34Z", "attachment_id": null, "creator": "akeybl@mozilla.com", "author": "akeybl@mozilla.com"}, {"creator": "bugs@m8y.org", "author": "bugs@m8y.org", "count": 5, "is_private": false, "tags": [], "id": 6822826, "bug_id": 703132, "raw_text": "Since someone just subscribed to this bug, I figured I'd rerun it in FF19 (Ion) and FF16 (no Ion) aaand FF7 (trace) as in initial report.\nClosure (FF7 was best w/ this lib)\n        mult    trans   scale   rot     rotX    trans   inv     inv3x3  vectr   Average\nFF7     11.42   26.21   22.65   2.17    2.18    36.34   13.22   28.22   26.35   18.75\nFF16    7.03    14.87   9.23    1.63    1.74    26.77   5.83    13.16   21.60   11.32\nFF19    12.53   20.54   14.90   2.09    2.07    40.19   15.87   24.82   32.13   18.35\n\nTDLFast (FF19 was best at this, FF16 sucked least at this)\n        mult    trans   scale   rot     rotX    trans   inv     inv3x3  vectr   Average\nFF7     10.35   24.42   29.43   2.14    2.40    29.92   10.39                   15.58\nFF16    6.41    7.75    31.56   1.73    2.27    30.64   5.03                    12.20\nFF19    14.29   9.63    65.77   1.78    58.46   76.18   11.12                   33.89\n\nWhile FF19 is still quite a bit slower at some individual operations  (FF7 2.5x faster at TDLFast transpose, 1.5x faster at Closure scale)  FF19 is now doing rather well, so I imagine unless you guys feel like filing IonSpeed bugs for those specific operations, the overall complaint about significant slowdowns after removal of tracing doesn't apply any more and I guess this should be closed?", "creation_time": "2012-11-14T22:01:26Z", "text": "Since someone just subscribed to this bug, I figured I'd rerun it in FF19 (Ion) and FF16 (no Ion) aaand FF7 (trace) as in initial report.\nClosure (FF7 was best w/ this lib)\n        mult    trans   scale   rot     rotX    trans   inv     inv3x3  vectr   Average\nFF7     11.42   26.21   22.65   2.17    2.18    36.34   13.22   28.22   26.35   18.75\nFF16    7.03    14.87   9.23    1.63    1.74    26.77   5.83    13.16   21.60   11.32\nFF19    12.53   20.54   14.90   2.09    2.07    40.19   15.87   24.82   32.13   18.35\n\nTDLFast (FF19 was best at this, FF16 sucked least at this)\n        mult    trans   scale   rot     rotX    trans   inv     inv3x3  vectr   Average\nFF7     10.35   24.42   29.43   2.14    2.40    29.92   10.39                   15.58\nFF16    6.41    7.75    31.56   1.73    2.27    30.64   5.03                    12.20\nFF19    14.29   9.63    65.77   1.78    58.46   76.18   11.12                   33.89\n\nWhile FF19 is still quite a bit slower at some individual operations  (FF7 2.5x faster at TDLFast transpose, 1.5x faster at Closure scale)  FF19 is now doing rather well, so I imagine unless you guys feel like filing IonSpeed bugs for those specific operations, the overall complaint about significant slowdowns after removal of tracing doesn't apply any more and I guess this should be closed?", "time": "2012-11-14T22:01:26Z", "attachment_id": null}, {"raw_text": "Filing individual bugs on the things that are still slow, blocking this one, seems like a great idea.\n\nBonus points for reduced testcases showing the slowdown....", "creation_time": "2012-11-14T22:18:54Z", "time": "2012-11-14T22:18:54Z", "attachment_id": null, "text": "Filing individual bugs on the things that are still slow, blocking this one, seems like a great idea.\n\nBonus points for reduced testcases showing the slowdown....", "id": 6822917, "tags": [], "count": 6, "is_private": false, "bug_id": 703132, "author": "bzbarsky@mit.edu", "creator": "bzbarsky@mit.edu"}, {"time": "2013-06-29T23:42:54Z", "attachment_id": 769441, "text": "Created attachment 769441\nChromium 28 vs Safari 6.0.5 vs FF 25a1\n\nI just did some comparisons with the competition, with the results screenshot'd and attached.\n\nThe results are pretty interesting: overall, we trounce Chromium and Safari here, nice. Except for Inverse and Inverse 3x3 (where the top results are close), we also win every single benchmark, when only comparing the top results across frameworks.\n\nAfter that, it gets a bit more complicated, with results all over the map.\n\nFor example, at TLDMath's Vector Transformation, we're the slowest, with Chromium more than 6x as fast.\n\n\nHaving said all this, I don't actually think that we have that much to gain from tracking this, given that the test cases are hard to reduce and that there's nothing much wrong to begin with.", "creation_time": "2013-06-29T23:42:54Z", "raw_text": "I just did some comparisons with the competition, with the results screenshot'd and attached.\n\nThe results are pretty interesting: overall, we trounce Chromium and Safari here, nice. Except for Inverse and Inverse 3x3 (where the top results are close), we also win every single benchmark, when only comparing the top results across frameworks.\n\nAfter that, it gets a bit more complicated, with results all over the map.\n\nFor example, at TLDMath's Vector Transformation, we're the slowest, with Chromium more than 6x as fast.\n\n\nHaving said all this, I don't actually think that we have that much to gain from tracking this, given that the test cases are hard to reduce and that there's nothing much wrong to begin with.", "bug_id": 703132, "id": 7588542, "count": 7, "is_private": false, "tags": [], "author": "till@tillschneidereit.net", "creator": "till@tillschneidereit.net"}, {"author": "till@tillschneidereit.net", "creator": "till@tillschneidereit.net", "id": 7588543, "tags": [], "is_private": false, "count": 8, "bug_id": 703132, "raw_text": "Thus, closing.", "creation_time": "2013-06-29T23:43:32Z", "time": "2013-06-29T23:43:32Z", "attachment_id": null, "text": "Thus, closing."}, {"author": "bzbarsky@mit.edu", "creator": "bzbarsky@mit.edu", "raw_text": "Wait.  Why is being 6x slower on the non-microbenchmark not a problem?", "creation_time": "2013-06-30T05:08:34Z", "time": "2013-06-30T05:08:34Z", "attachment_id": null, "text": "Wait.  Why is being 6x slower on the non-microbenchmark not a problem?", "id": 7588744, "is_private": false, "count": 9, "tags": [], "bug_id": 703132}, {"creator": "till@tillschneidereit.net", "author": "till@tillschneidereit.net", "text": "Mmh, I guess you're right - we should at least make an attempt to look into the bad outliers. Will do that now.\n\nFirst guess: they create lots of objects using `new Klass()` (http://jsperf.com/new-vs-object-create/6)", "time": "2013-06-30T10:45:55Z", "attachment_id": null, "raw_text": "Mmh, I guess you're right - we should at least make an attempt to look into the bad outliers. Will do that now.\n\nFirst guess: they create lots of objects using `new Klass()` (http://jsperf.com/new-vs-object-create/6)", "creation_time": "2013-06-30T10:45:55Z", "bug_id": 703132, "count": 10, "is_private": false, "tags": [], "id": 7588870}]}}}