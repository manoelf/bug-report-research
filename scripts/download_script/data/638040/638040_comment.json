{"bugs": {"638040": {"comments": [{"id": 5314633, "author": "jimb@mozilla.com", "time": "2011-03-02T09:29:55Z", "count": 0, "text": "When setting an operation callback, it should be possible to provide a pointer to be passed through to the function, so that operation callback functions wouldn't necessarily need to rely on global variables or JSContext-specific data to do their job.\n\nIf we wanted to be typesafe in high C++ fashion, we could replace the operation callback function with an instance of a class derived from something like:\n\nclass OperationCallback {\n  virtual Invoke(JSContext *cx);\n};\n\nThen the 'this' argument would do the job of the proposed closure argument.", "is_private": false, "attachment_id": null, "creator": "jimb@mozilla.com", "tags": [], "raw_text": "When setting an operation callback, it should be possible to provide a pointer to be passed through to the function, so that operation callback functions wouldn't necessarily need to rely on global variables or JSContext-specific data to do their job.\n\nIf we wanted to be typesafe in high C++ fashion, we could replace the operation callback function with an instance of a class derived from something like:\n\nclass OperationCallback {\n  virtual Invoke(JSContext *cx);\n};\n\nThen the 'this' argument would do the job of the proposed closure argument.", "creation_time": "2011-03-02T09:29:55Z", "bug_id": 638040}]}}, "comments": {}}