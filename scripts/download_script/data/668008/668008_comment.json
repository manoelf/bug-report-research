{"bugs": {"668008": {"comments": [{"text": "=== Walkthrough ===\n\nWhen Gfx features need to check if a feature is blacklisted, they use GfxInfo::GetFeatureStatus(). Here's for example what D3D9 layers do in gfx/layers/d3d9/LayerManagerD3D9.cpp:\n\n  PRBool forceAccelerate =\n    Preferences::GetBool(\"layers.acceleration.force-enabled\", PR_FALSE);\n\n  nsCOMPtr<nsIGfxInfo> gfxInfo = do_GetService(\"@mozilla.org/gfx/info;1\");\n  if (gfxInfo) {\n    PRInt32 status;\n    if (NS_SUCCEEDED(gfxInfo->GetFeatureStatus(nsIGfxInfo::FEATURE_DIRECT3D_9_LAYERS, &status))) {\n      if (status != nsIGfxInfo::FEATURE_NO_INFO && !forceAccelerate)\n      {\n        NS_WARNING(\"Direct3D 9-accelerated layers are not supported on this system.\");\n        return PR_FALSE;\n      }\n    }\n  }\n\nThe nsIGfxInfo interface is defined in widget/public/nsIGfxInfo.idl.\n\nGfxInfo is implemented in:\nwidget/src/windows/GfxInfo.cpp       on Windows\nwidget/src/cocoa/GfxInfo.mm          on Mac\nwidget/src/xpwidget/GfxInfoX11.cpp   on X11\n\nMoreover, it inherits GfxInfoBase, defined in widget/src/xpwidgets/GfxInfoBase.*\n\nThe only reason why this is in widget/ is that it's a place where we already had platform-specific code. The widget==platform equation is false however on X11, which is why we put that part in xpwidgets.\n\nThe information is obtained in different ways for each platform. Mac is the most sane, we get the info from CGL (Core GL). On Windows, we get the info from the windows registry, and that fails miserably on dual-GPU systems (bug 628129). On X11, we get it by having a separate process create a GL context and call glGetString (see bug 639842). The key to understanding why we did this, is that during Firefox 4 development time, we had tons of crashes during D3D/GL initialization with buggy drivers. So we had to either find ways to get driver info that didn't involve D3D/GL initialization (like the registry on Windows), or do it in a separate process (as we do on X11).\n\nThe entries in the blacklist are described on this wiki page (which must be kept up-to-date wrt the code at all times):\nhttps://wiki.mozilla.org/Blocklisting/Blocked_Graphics_Drivers\nNotice that it has bug links to all the bugs behind these blacklist entries.\n\nIn addition to the built-in blacklist, a downloaded blacklist is also used (bug 625160). Currently it only is implemented on Windows, and generalizing that to other platforms is important (bug 668004).\n\nSince the downloaded blacklist got implemented on Windows (bug 625160), blacklisting decisions are cached as preferences (the gfx.blacklist.*) preferences and only reevaluated every 24 hours. This means that if you were blacklisted and upgraded your drivers, you're still blacklisted for 24 hours until it reevaluates. That sucks big time, confuses users and makes bugs harder for us to understand. Bug 653102 is about fixing that.\n\n=== What needs to be done ===\n\nbug 628129: Make GPU blacklisting logic aware of dual GPU systems\n  Short term, top priority, possibly challenging but does not require experience. Probably only needed on Windows. Ask Jeff or Joe or Bas about the D3D API bits.\n\nbug 653102: Do Not Cache the blacklisting decisions; instead cache the downloaded blacklist entries and reevaluate everytime\n  Short term, important priority, may require some experience with GfxInfoBase etc, but not too much. This is going to change stuff that was introduced in bug 625160 so you will need to discuss with Joe.\n\nbug 668004: Generalize the downloaded GPU blacklist to non-Windows platforms\n  Medium term, quite important but less than the above, may require some experience with GfxInfoBase etc, but not too much. This generalizes work done in bug 625160 on Windows, so you will need to discuss with Joe.\n\nbug 651981: The whole GfxInfo API is known to suck\n  Long term, important but not an immediate priority, requires experience. I can be your contact for the C++ side, talk to Gavin for the JS side (notice that this API is used by the JS code in about:support and so it needs to have good JS-API-taste).", "time": "2011-06-28T20:21:45Z", "bug_id": 668008, "tags": [], "creation_time": "2011-06-28T20:21:45Z", "author": "jacob.benoit.1@gmail.com", "count": 0, "is_private": false, "creator": "jacob.benoit.1@gmail.com", "id": 5562617, "raw_text": "=== Walkthrough ===\n\nWhen Gfx features need to check if a feature is blacklisted, they use GfxInfo::GetFeatureStatus(). Here's for example what D3D9 layers do in gfx/layers/d3d9/LayerManagerD3D9.cpp:\n\n  PRBool forceAccelerate =\n    Preferences::GetBool(\"layers.acceleration.force-enabled\", PR_FALSE);\n\n  nsCOMPtr<nsIGfxInfo> gfxInfo = do_GetService(\"@mozilla.org/gfx/info;1\");\n  if (gfxInfo) {\n    PRInt32 status;\n    if (NS_SUCCEEDED(gfxInfo->GetFeatureStatus(nsIGfxInfo::FEATURE_DIRECT3D_9_LAYERS, &status))) {\n      if (status != nsIGfxInfo::FEATURE_NO_INFO && !forceAccelerate)\n      {\n        NS_WARNING(\"Direct3D 9-accelerated layers are not supported on this system.\");\n        return PR_FALSE;\n      }\n    }\n  }\n\nThe nsIGfxInfo interface is defined in widget/public/nsIGfxInfo.idl.\n\nGfxInfo is implemented in:\nwidget/src/windows/GfxInfo.cpp       on Windows\nwidget/src/cocoa/GfxInfo.mm          on Mac\nwidget/src/xpwidget/GfxInfoX11.cpp   on X11\n\nMoreover, it inherits GfxInfoBase, defined in widget/src/xpwidgets/GfxInfoBase.*\n\nThe only reason why this is in widget/ is that it's a place where we already had platform-specific code. The widget==platform equation is false however on X11, which is why we put that part in xpwidgets.\n\nThe information is obtained in different ways for each platform. Mac is the most sane, we get the info from CGL (Core GL). On Windows, we get the info from the windows registry, and that fails miserably on dual-GPU systems (bug 628129). On X11, we get it by having a separate process create a GL context and call glGetString (see bug 639842). The key to understanding why we did this, is that during Firefox 4 development time, we had tons of crashes during D3D/GL initialization with buggy drivers. So we had to either find ways to get driver info that didn't involve D3D/GL initialization (like the registry on Windows), or do it in a separate process (as we do on X11).\n\nThe entries in the blacklist are described on this wiki page (which must be kept up-to-date wrt the code at all times):\nhttps://wiki.mozilla.org/Blocklisting/Blocked_Graphics_Drivers\nNotice that it has bug links to all the bugs behind these blacklist entries.\n\nIn addition to the built-in blacklist, a downloaded blacklist is also used (bug 625160). Currently it only is implemented on Windows, and generalizing that to other platforms is important (bug 668004).\n\nSince the downloaded blacklist got implemented on Windows (bug 625160), blacklisting decisions are cached as preferences (the gfx.blacklist.*) preferences and only reevaluated every 24 hours. This means that if you were blacklisted and upgraded your drivers, you're still blacklisted for 24 hours until it reevaluates. That sucks big time, confuses users and makes bugs harder for us to understand. Bug 653102 is about fixing that.\n\n=== What needs to be done ===\n\nbug 628129: Make GPU blacklisting logic aware of dual GPU systems\n  Short term, top priority, possibly challenging but does not require experience. Probably only needed on Windows. Ask Jeff or Joe or Bas about the D3D API bits.\n\nbug 653102: Do Not Cache the blacklisting decisions; instead cache the downloaded blacklist entries and reevaluate everytime\n  Short term, important priority, may require some experience with GfxInfoBase etc, but not too much. This is going to change stuff that was introduced in bug 625160 so you will need to discuss with Joe.\n\nbug 668004: Generalize the downloaded GPU blacklist to non-Windows platforms\n  Medium term, quite important but less than the above, may require some experience with GfxInfoBase etc, but not too much. This generalizes work done in bug 625160 on Windows, so you will need to discuss with Joe.\n\nbug 651981: The whole GfxInfo API is known to suck\n  Long term, important but not an immediate priority, requires experience. I can be your contact for the C++ side, talk to Gavin for the JS side (notice that this API is used by the JS code in about:support and so it needs to have good JS-API-taste).", "attachment_id": null}, {"raw_text": "", "attachment_id": null, "id": 14471390, "count": 1, "creator": "nical.bugzilla@gmail.com", "is_private": false, "time": "2019-11-06T14:53:16Z", "tags": [], "bug_id": 668008, "text": "*** Bug 1285569 has been marked as a duplicate of this bug. ***", "author": "nical.bugzilla@gmail.com", "creation_time": "2019-11-06T14:53:16Z"}]}}, "comments": {}}