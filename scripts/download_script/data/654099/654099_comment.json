{"comments": {}, "bugs": {"654099": {"comments": [{"attachment_id": null, "author": "chrisccoulson@ubuntu.com", "tags": [], "time": "2011-05-02T14:10:57Z", "count": 0, "creator": "chrisccoulson@ubuntu.com", "bug_id": 654099, "id": 5442889, "raw_text": "We're seeing quite a lot of users in Ubuntu reporting that intl.accept_languages is being modified to contain the non-localized value \"chrome://global/locale/intl.properties\" after upgrading to Firefox 4. A common side effect of this is that Google sites are setting users languages to Cherokee. intl.accept_languages should be a complex value, and the real value is shipped in the translation xpi's.\n\nI've also seen this once, and it happened almost immediately after manually forcing a sync of all my preferences. Once it happened, the broken value propagated to all of my profiles, although this might be coincidental and it's not easily reproducible.\n\nHere's a transcript of some conversation on #developers (and explains why I've reported a bug against sync):\n\n<chrisccoulson> are you seeing bugs from users where intl.accept_languages pref is getting set somehow to the literal value \"chrome://global/locale/intl.properties\" (rather than being localized)?\n<glandium> chrisccoulson: that probably means your language pack doesn't set it\n<chrisccoulson> glandium, hmmm, our language packs are setting it :/\n (we just distribute the mozilla.org xpi's for language packs)\n i saw it too, after sync'ing my preferences\n but we are getting lots of people reporting this in ubuntu now after upgrading to firefox 4\n<glandium> chrisccoulson: though, where do you see \"chrome://global/locale/intl.properties\" as the value ?\n<chrisccoulson> glandium, in about:config and in the accept header too\n<glandium> chrisccoulson: In about:config, that could be expected\n<chrisccoulson> it's causing google sites to mis-detect the language\n google is setting users language to cherokee ;)\n<glandium> chrisccoulson: the http code is supposed to use the proper API (GetComplexValue)\n<bz> chrisccoulson: I've seen one or two reports of that, yes\n<chrisccoulson> glandium, it is. but the preference is just getting messed up somewhere :/\n and i'm really stuck for tracking it down\n<glandium> chrisccoulson: you should get these people to check that chrome://global/locale/intl.properties contains the right thing\n<bz> chrisccoulson: can you debug?\n chrisccoulson: I assume you can reproduce reliably, right?\n<chrisccoulson> glandium, it does. if the user resets the value in about:config, then it restores to the correct value and google starts working correctly\n<bz> hmm\n<chrisccoulson> bz - i can't reproduce reliably, which is why i'm having such a hard time debugging it :/\n<bz> so about:config claims the value is modified?\n<glandium> ah, it's set to chrome://global/locale/intl.properties in the user profile ?\n<chrisccoulson> i only saw it once after synchronizing my preferences, and then the broken value propagated to all of my profiles\n<glandium> ewong|build: no idea. catlee would know\n<chrisccoulson> bz - yes, about:config claims that the value is modified\n<chrisccoulson> which makes me wonder if some extension is breaking it\n<bz> chrisccoulson: gimme a sec\n<bz> so.... \n<bz> intl.accept_languages is not supposed to be a localized pref, last I checked\n<smontagu> bz: I don't think that's correct\n<chrisccoulson> bz - hmm, but it's set to chrome://global/locale/intl.properties in greprefs.js\n<bz> at least over here the value about:config shows for me is just \"en-us, en\"\n<glandium> bz: what smontagu says\n<bz> but that may be because about:config does getComplexValue?\n* smontagu remembers it being localized for a logn time\n<glandium> bz: it didn't last time I checked but that could have changed\n* bz searches\n<bz> so yeah\n<glandium> it actually might be doing it now seeing how few chrome:// data i have in about:config\n<bz> about:config seems to load the locaized value\n er, localized value\n one sec\n 300       case gPrefBranch.PREF_STRING:\n 301         pref.valueCol = gPrefBranch.getComplexValue(prefName, nsISupportsString).data;\n 302         // Try in case it's a localized string (will throw an exception if not)\n 303         if (pref.lockCol == PREF_IS_DEFAULT_VALUE &&\n 304             /^chrome:\\/\\/.+\\/locale\\/.+\\.properties/.test(pref.valueCol))\n 305           pref.valueCol = gPrefBranch.getComplexValue(prefName, nsIPrefLocalizedString).data;\n 306         break;\n sez about:config\n<-- otzi has quit (Quit: Changing server)\n<bz> (the source for it, that is)\n<Pike> \"interesting\"\n<glandium> that must be rather new\n<bz> which explains what I'm seeing\n but....\n hg blame says hg@1\n* bz won't bother looking at the cvs blame\n<bz> ok\n so HTTP does:\n<glandium> weird, i'm pretty sure about:config wasn't displaying the localized strings pretty recently\n<bz> 1074         nsCOMPtr<nsIPrefLocalizedString> pls;\n 1075         prefs->GetComplexValue(INTL_ACCEPT_LANGUAGES,\n 1076                                 NS_GET_IID(nsIPrefLocalizedString),\n 1077                                 getter_AddRefs(pls));\n<Pike> glandium: I don't remember it doing anything but that, really\n<bz> and then nsPrefBranch::GetComplexValue does....\n 231     PRBool  bNeedDefault = PR_FALSE;\n ...\n 237       if (!PREF_HasUserPref(pref) && !PREF_PrefIsLocked(pref)) {\n 238         bNeedDefault = PR_TRUE;\n 239       }\n 242     // if we need to fetch the default value, do that instead, otherwise use the\n 243     // value we pulled in at the top of this function\n 244     if (bNeedDefault) {\n 246       rv = GetDefaultFromPropertiesFile(pref, getter_Copies(utf16String));\n<-- Mnyromyr has quit (Quit: ChatZilla 0.9.86.1 [SeaMonkey 2.0.14/20110420230004])\n<bz> 250     } else {\n 251       rv = GetCharPref(aPrefName, getter_Copies(utf8String));\n<glandium> Pike: yeah, i must have smoked something, because i checked in 3.6 and 3.5, and they did\n<bz> alright\n So if you have a user-set value for a localized-string pref, it just doesn't work\n so if you have someone going around setting prefs to their current value, say, that someone will break localized string prefs\n nice\n<glandium> bz: yeah, that's a kind of known issue, though i don't know if it's intentional\n* bz neither\n<bz> chrisccoulson: I bet you're right about some extension screwing this up\n* smontagu is puzzled again\n<highlight_me> yeah, it's always an extension that screws things up :P\n<chrisccoulson> bz - does http://mxr.mozilla.org/mozilla-central/source/services/sync/modules/ext/Preferences.js#157 work for localized prefs?\n<smontagu> I have used a user-set value for intl.accept_languages since like forever\n<bz> yes, but did you user-set it to chrome://something.properties ?\n or did you set it to the actual string you wanted to be used?\n<chrisccoulson> shouldn't it be nsIPrefLocalizedString?\n<smontagu> to the string I wanted to use\n<bz> right\n the prefs code uses the string as-is if it's user-set\n and if not, it looks for the .properties file and gets it from there\n<chrisccoulson> (note, i only saw this mess up after forcing a sync, and intl.accept_languages is a pref that is synchronized)\n<bz> so if you user-set it to the chrome://something.properties thing, you lose\n<bz> chrisccoulson: oh, _interesting_\n chrisccoulson: I wonder whether sync could be clobbering it!\n<bz> https://bugzilla.mozilla.org/show_bug.cgi?id=652934\n fwiw\n<chrisccoulson> bz - that's what i'm starting to think\n bz - thanks\n<bz> not sure that's the same as your issue\n since in that case it has the en-ie as well\n<bz> chrisccoulson: we should probably just get a clean Sync bug filed\n chrisccoulson: esp. if you can confirm that Sync causes this\n<chrisccoulson> bz - i only saw it happen once, so it could be purely coincidental\n<bz> Still worth checking, imho\n it's got method and opportunity!\n and motive\n<chrisccoulson> bz - want me to file that?\n<-- highlight_me has quit (Quit: Exit, Close)\n<bz> so the only question is whether it's the criminal\n please!", "is_private": false, "creation_time": "2011-05-02T14:10:57Z", "text": "We're seeing quite a lot of users in Ubuntu reporting that intl.accept_languages is being modified to contain the non-localized value \"chrome://global/locale/intl.properties\" after upgrading to Firefox 4. A common side effect of this is that Google sites are setting users languages to Cherokee. intl.accept_languages should be a complex value, and the real value is shipped in the translation xpi's.\n\nI've also seen this once, and it happened almost immediately after manually forcing a sync of all my preferences. Once it happened, the broken value propagated to all of my profiles, although this might be coincidental and it's not easily reproducible.\n\nHere's a transcript of some conversation on #developers (and explains why I've reported a bug against sync):\n\n<chrisccoulson> are you seeing bugs from users where intl.accept_languages pref is getting set somehow to the literal value \"chrome://global/locale/intl.properties\" (rather than being localized)?\n<glandium> chrisccoulson: that probably means your language pack doesn't set it\n<chrisccoulson> glandium, hmmm, our language packs are setting it :/\n (we just distribute the mozilla.org xpi's for language packs)\n i saw it too, after sync'ing my preferences\n but we are getting lots of people reporting this in ubuntu now after upgrading to firefox 4\n<glandium> chrisccoulson: though, where do you see \"chrome://global/locale/intl.properties\" as the value ?\n<chrisccoulson> glandium, in about:config and in the accept header too\n<glandium> chrisccoulson: In about:config, that could be expected\n<chrisccoulson> it's causing google sites to mis-detect the language\n google is setting users language to cherokee ;)\n<glandium> chrisccoulson: the http code is supposed to use the proper API (GetComplexValue)\n<bz> chrisccoulson: I've seen one or two reports of that, yes\n<chrisccoulson> glandium, it is. but the preference is just getting messed up somewhere :/\n and i'm really stuck for tracking it down\n<glandium> chrisccoulson: you should get these people to check that chrome://global/locale/intl.properties contains the right thing\n<bz> chrisccoulson: can you debug?\n chrisccoulson: I assume you can reproduce reliably, right?\n<chrisccoulson> glandium, it does. if the user resets the value in about:config, then it restores to the correct value and google starts working correctly\n<bz> hmm\n<chrisccoulson> bz - i can't reproduce reliably, which is why i'm having such a hard time debugging it :/\n<bz> so about:config claims the value is modified?\n<glandium> ah, it's set to chrome://global/locale/intl.properties in the user profile ?\n<chrisccoulson> i only saw it once after synchronizing my preferences, and then the broken value propagated to all of my profiles\n<glandium> ewong|build: no idea. catlee would know\n<chrisccoulson> bz - yes, about:config claims that the value is modified\n<chrisccoulson> which makes me wonder if some extension is breaking it\n<bz> chrisccoulson: gimme a sec\n<bz> so.... \n<bz> intl.accept_languages is not supposed to be a localized pref, last I checked\n<smontagu> bz: I don't think that's correct\n<chrisccoulson> bz - hmm, but it's set to chrome://global/locale/intl.properties in greprefs.js\n<bz> at least over here the value about:config shows for me is just \"en-us, en\"\n<glandium> bz: what smontagu says\n<bz> but that may be because about:config does getComplexValue?\n* smontagu remembers it being localized for a logn time\n<glandium> bz: it didn't last time I checked but that could have changed\n* bz searches\n<bz> so yeah\n<glandium> it actually might be doing it now seeing how few chrome:// data i have in about:config\n<bz> about:config seems to load the locaized value\n er, localized value\n one sec\n 300       case gPrefBranch.PREF_STRING:\n 301         pref.valueCol = gPrefBranch.getComplexValue(prefName, nsISupportsString).data;\n 302         // Try in case it's a localized string (will throw an exception if not)\n 303         if (pref.lockCol == PREF_IS_DEFAULT_VALUE &&\n 304             /^chrome:\\/\\/.+\\/locale\\/.+\\.properties/.test(pref.valueCol))\n 305           pref.valueCol = gPrefBranch.getComplexValue(prefName, nsIPrefLocalizedString).data;\n 306         break;\n sez about:config\n<-- otzi has quit (Quit: Changing server)\n<bz> (the source for it, that is)\n<Pike> \"interesting\"\n<glandium> that must be rather new\n<bz> which explains what I'm seeing\n but....\n hg blame says hg@1\n* bz won't bother looking at the cvs blame\n<bz> ok\n so HTTP does:\n<glandium> weird, i'm pretty sure about:config wasn't displaying the localized strings pretty recently\n<bz> 1074         nsCOMPtr<nsIPrefLocalizedString> pls;\n 1075         prefs->GetComplexValue(INTL_ACCEPT_LANGUAGES,\n 1076                                 NS_GET_IID(nsIPrefLocalizedString),\n 1077                                 getter_AddRefs(pls));\n<Pike> glandium: I don't remember it doing anything but that, really\n<bz> and then nsPrefBranch::GetComplexValue does....\n 231     PRBool  bNeedDefault = PR_FALSE;\n ...\n 237       if (!PREF_HasUserPref(pref) && !PREF_PrefIsLocked(pref)) {\n 238         bNeedDefault = PR_TRUE;\n 239       }\n 242     // if we need to fetch the default value, do that instead, otherwise use the\n 243     // value we pulled in at the top of this function\n 244     if (bNeedDefault) {\n 246       rv = GetDefaultFromPropertiesFile(pref, getter_Copies(utf16String));\n<-- Mnyromyr has quit (Quit: ChatZilla 0.9.86.1 [SeaMonkey 2.0.14/20110420230004])\n<bz> 250     } else {\n 251       rv = GetCharPref(aPrefName, getter_Copies(utf8String));\n<glandium> Pike: yeah, i must have smoked something, because i checked in 3.6 and 3.5, and they did\n<bz> alright\n So if you have a user-set value for a localized-string pref, it just doesn't work\n so if you have someone going around setting prefs to their current value, say, that someone will break localized string prefs\n nice\n<glandium> bz: yeah, that's a kind of known issue, though i don't know if it's intentional\n* bz neither\n<bz> chrisccoulson: I bet you're right about some extension screwing this up\n* smontagu is puzzled again\n<highlight_me> yeah, it's always an extension that screws things up :P\n<chrisccoulson> bz - does http://mxr.mozilla.org/mozilla-central/source/services/sync/modules/ext/Preferences.js#157 work for localized prefs?\n<smontagu> I have used a user-set value for intl.accept_languages since like forever\n<bz> yes, but did you user-set it to chrome://something.properties ?\n or did you set it to the actual string you wanted to be used?\n<chrisccoulson> shouldn't it be nsIPrefLocalizedString?\n<smontagu> to the string I wanted to use\n<bz> right\n the prefs code uses the string as-is if it's user-set\n and if not, it looks for the .properties file and gets it from there\n<chrisccoulson> (note, i only saw this mess up after forcing a sync, and intl.accept_languages is a pref that is synchronized)\n<bz> so if you user-set it to the chrome://something.properties thing, you lose\n<bz> chrisccoulson: oh, _interesting_\n chrisccoulson: I wonder whether sync could be clobbering it!\n<bz> https://bugzilla.mozilla.org/show_bug.cgi?id=652934\n fwiw\n<chrisccoulson> bz - that's what i'm starting to think\n bz - thanks\n<bz> not sure that's the same as your issue\n since in that case it has the en-ie as well\n<bz> chrisccoulson: we should probably just get a clean Sync bug filed\n chrisccoulson: esp. if you can confirm that Sync causes this\n<chrisccoulson> bz - i only saw it happen once, so it could be purely coincidental\n<bz> Still worth checking, imho\n it's got method and opportunity!\n and motive\n<chrisccoulson> bz - want me to file that?\n<-- highlight_me has quit (Quit: Exit, Close)\n<bz> so the only question is whether it's the criminal\n please!"}, {"attachment_id": null, "author": "smontagu@smontagu.org", "is_private": false, "creation_time": "2011-05-02T16:11:51Z", "text": "Bug 647063 may be the same issue.", "id": 5443191, "raw_text": "Bug 647063 may be the same issue.", "count": 1, "tags": [], "time": "2011-05-02T16:11:51Z", "creator": "smontagu@smontagu.org", "bug_id": 654099}, {"time": "2011-05-02T16:43:08Z", "is_private": false, "attachment_id": null, "bug_id": 654099, "count": 2, "creator": "philipp@weitershausen.de", "tags": [], "raw_text": "(In reply to comment #1)\n> Bug 647063 may be the same issue.\n\nAs may bug 616500.", "id": 5443282, "text": "(In reply to comment #1)\n> Bug 647063 may be the same issue.\n\nAs may bug 616500.", "creation_time": "2011-05-02T16:43:08Z", "author": "philipp@weitershausen.de"}, {"is_private": false, "time": "2011-12-10T23:25:26Z", "attachment_id": null, "text": "*** Bug 580833 has been marked as a duplicate of this bug. ***", "creation_time": "2011-12-10T23:25:26Z", "raw_text": "", "id": 5906769, "bug_id": 654099, "count": 3, "tags": [], "creator": "bugzilla@twinql.com", "author": "bugzilla@twinql.com"}, {"attachment_id": null, "is_private": false, "time": "2014-09-17T01:50:00Z", "author": "bugzilla@twinql.com", "raw_text": "I think the root cause for this is:\n\ntoolkit/modules/Preferences.jsm:\n\n  _get: function(prefName, defaultValue) {\n    switch (this._prefSvc.getPrefType(prefName)) {\n      case Ci.nsIPrefBranch.PREF_STRING:\n        return this._prefSvc.getComplexValue(prefName, Ci.nsISupportsString).data;\n\n\nIn the case of localizable prefs, that should be gCV(prefName, Ci.nsIPrefLocalizedString) to get the right value. I think the code as written will grab intl.properties instead of actually reading the real value.\n\nBut even that might be broken -- when syncing between two Firefoxes with different locales.\n\nI suspect there needs to be more sophisticated handling here altogether.", "id": 9320635, "text": "I think the root cause for this is:\n\ntoolkit/modules/Preferences.jsm:\n\n  _get: function(prefName, defaultValue) {\n    switch (this._prefSvc.getPrefType(prefName)) {\n      case Ci.nsIPrefBranch.PREF_STRING:\n        return this._prefSvc.getComplexValue(prefName, Ci.nsISupportsString).data;\n\n\nIn the case of localizable prefs, that should be gCV(prefName, Ci.nsIPrefLocalizedString) to get the right value. I think the code as written will grab intl.properties instead of actually reading the real value.\n\nBut even that might be broken -- when syncing between two Firefoxes with different locales.\n\nI suspect there needs to be more sophisticated handling here altogether.", "creation_time": "2014-09-17T01:50:00Z", "bug_id": 654099, "tags": [], "creator": "bugzilla@twinql.com", "count": 4}, {"author": "gavin.sharp@gmail.com", "attachment_id": null, "bug_id": 654099, "tags": [], "count": 5, "time": "2014-09-20T19:56:16Z", "creator": "gavin.sharp@gmail.com", "raw_text": "(In reply to Richard Newman [:rnewman] from comment #4)\n> I think the code as written will grab intl.properties instead of actually reading\n> the real value.\n\nIt will indeed, but that's not necessarily a problem if it sets the pref the same way (setComplexValue(..., nsISupportsString)), as long as that URI resolves to something that exists and contains a value for that pref in both Firefoxes. It's hard to think of cases where that wouldn't hold, but that probably explains why this isn't affecting most Sync users.", "id": 9338229, "text": "(In reply to Richard Newman [:rnewman] from comment #4)\n> I think the code as written will grab intl.properties instead of actually reading\n> the real value.\n\nIt will indeed, but that's not necessarily a problem if it sets the pref the same way (setComplexValue(..., nsISupportsString)), as long as that URI resolves to something that exists and contains a value for that pref in both Firefoxes. It's hard to think of cases where that wouldn't hold, but that probably explains why this isn't affecting most Sync users.", "creation_time": "2014-09-20T19:56:16Z", "is_private": false}, {"attachment_id": null, "is_private": false, "time": "2015-06-23T11:15:30Z", "author": "math.parent@gmail.com", "id": 10415535, "raw_text": "#438031 is also a dupe.", "creation_time": "2015-06-23T11:15:30Z", "text": "#438031 is also a dupe.", "count": 6, "creator": "math.parent@gmail.com", "tags": [], "bug_id": 654099}]}}}