{"comments": {}, "bugs": {"640911": {"comments": [{"id": 5338667, "author": "standard8@mozilla.com", "is_private": false, "bug_id": 640911, "attachment_id": null, "creation_time": "2011-03-11T10:47:49Z", "tags": [], "count": 0, "time": "2011-03-11T10:47:49Z", "text": "+++ This bug was initially created as a clone of Bug #640629 +++\n\nWhen timers are created, there is no extra reference held until they fire.  That means that if the variable storing the timer object goes out of scope, it's susceptible to a GC which will destroy the timer without it ever firing.\n\n\nThere's an instance of this in MailUtils.js setStringPropertyOnFolderAndDescendents, I think it means that we could not set properties on all folders as we're expecting to.", "creator": "standard8@mozilla.com", "raw_text": "+++ This bug was initially created as a clone of Bug #640629 +++\n\nWhen timers are created, there is no extra reference held until they fire.  That means that if the variable storing the timer object goes out of scope, it's susceptible to a GC which will destroy the timer without it ever firing.\n\n\nThere's an instance of this in MailUtils.js setStringPropertyOnFolderAndDescendents, I think it means that we could not set properties on all folders as we're expecting to."}, {"text": "It looks like the timer does not participate in cycle collection and so that usage might turn out to be safe (if ill-advised) because the timer is closed over by the callback.  I made a comment on bug 640629 asking that question...", "creator": "bugmail@asutherland.org", "raw_text": "It looks like the timer does not participate in cycle collection and so that usage might turn out to be safe (if ill-advised) because the timer is closed over by the callback.  I made a comment on bug 640629 asking that question...", "count": 1, "time": "2011-03-11T21:28:04Z", "bug_id": 640911, "attachment_id": null, "creation_time": "2011-03-11T21:28:04Z", "tags": [], "id": 5339972, "is_private": false, "author": "bugmail@asutherland.org"}, {"text": "Comments on the bug indicate that because of the current lack of cycle collection on nsITimer, the current usage is indeed safe, but that we should not depend on it.  So we should change the code but it is unlikely to be causing test failures or functional failure at the current time.", "bug_id": 640911, "creator": "bugmail@asutherland.org", "raw_text": "Comments on the bug indicate that because of the current lack of cycle collection on nsITimer, the current usage is indeed safe, but that we should not depend on it.  So we should change the code but it is unlikely to be causing test failures or functional failure at the current time.", "attachment_id": null, "tags": [], "creation_time": "2011-03-11T22:05:10Z", "id": 5340087, "count": 2, "author": "bugmail@asutherland.org", "time": "2011-03-11T22:05:10Z", "is_private": false}, {"is_private": false, "author": "vseerror@lehigh.edu", "id": 6399218, "attachment_id": null, "creation_time": "2012-06-18T11:04:26Z", "tags": [], "bug_id": 640911, "count": 3, "time": "2012-06-18T11:04:26Z", "creator": "vseerror@lehigh.edu", "raw_text": "(In reply to Andrew Sutherland (:asuth) from comment #2)\n> Comments on the bug indicate that because of the current lack of cycle\n> collection on nsITimer, the current usage is indeed safe, but that we should\n> not depend on it.  So we should change the code but it is unlikely to be\n> causing test failures or functional failure at the current time.\n\ncould this have changed in last few months?", "text": "(In reply to Andrew Sutherland (:asuth) from comment #2)\n> Comments on the bug indicate that because of the current lack of cycle\n> collection on nsITimer, the current usage is indeed safe, but that we should\n> not depend on it.  So we should change the code but it is unlikely to be\n> causing test failures or functional failure at the current time.\n\ncould this have changed in last few months?"}]}}}