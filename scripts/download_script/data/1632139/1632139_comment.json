{"comments": {}, "bugs": {"1632139": {"comments": [{"tags": [], "time": "2020-04-22T13:34:35Z", "creator": "jcoppeard@mozilla.com", "raw_text": "Currently the GC heap thresholds for each zone are recalculated:\n  1) Once when we finish foreground sweeping in the zone, and then\n  2) Periodically when sweeping background things in the zone\n\nSince the threashold is based on the retained GC bytes in the zone and this value is not correct until background sweeping has finished, the value calculated for a zone changes substantially over the course of a single GC.  Specifically, there is a large increase in the threshold when forground sweeping finishes and then it falls linearly as more data is freed until it reaches its final value.\n\nIt would make more sense to calculate this once at the end, when the size of retained data is know, but when we tried that we discovered that some benchmarks (mainly splay latency) rely on the current behaviour.\n\nSplay is a benchmark that contantly allocates, yet the size of reachable data remains roughly constant.  Currently we end up triggering incremental GC slices which allows us to have a resonable score on the latency part of the benchmark.\n\nThe effect of only recalculating zone thresholds at the end of the GC is that we exceed the non-incremental threshold during the GC, and this introduces pauses that greatly reduce our latency score.  This is because the initial increase in the threshold prevents non-incremental GC from kicking in while we are sweeping.\n\nThe solution to all of this is probably to raise the non-incremental threshold, but I don't want to do that until we've got some fallback in place to make sure the GC is keeping up with allocation.  Instead the aim of this bug is to calculate the thresholds once at the end but add an explicit hack to increase the non-incremental threshold during background sweeping so that we don't regress our benchmark scores.", "count": 0, "creation_time": "2020-04-22T13:34:35Z", "is_private": false, "bug_id": 1632139, "author": "jcoppeard@mozilla.com", "id": 14771600, "attachment_id": null, "text": "Currently the GC heap thresholds for each zone are recalculated:\n  1) Once when we finish foreground sweeping in the zone, and then\n  2) Periodically when sweeping background things in the zone\n\nSince the threashold is based on the retained GC bytes in the zone and this value is not correct until background sweeping has finished, the value calculated for a zone changes substantially over the course of a single GC.  Specifically, there is a large increase in the threshold when forground sweeping finishes and then it falls linearly as more data is freed until it reaches its final value.\n\nIt would make more sense to calculate this once at the end, when the size of retained data is know, but when we tried that we discovered that some benchmarks (mainly splay latency) rely on the current behaviour.\n\nSplay is a benchmark that contantly allocates, yet the size of reachable data remains roughly constant.  Currently we end up triggering incremental GC slices which allows us to have a resonable score on the latency part of the benchmark.\n\nThe effect of only recalculating zone thresholds at the end of the GC is that we exceed the non-incremental threshold during the GC, and this introduces pauses that greatly reduce our latency score.  This is because the initial increase in the threshold prevents non-incremental GC from kicking in while we are sweeping.\n\nThe solution to all of this is probably to raise the non-incremental threshold, but I don't want to do that until we've got some fallback in place to make sure the GC is keeping up with allocation.  Instead the aim of this bug is to calculate the thresholds once at the end but add an explicit hack to increase the non-incremental threshold during background sweeping so that we don't regress our benchmark scores."}, {"id": 14771606, "author": "jcoppeard@mozilla.com", "attachment_id": 9142381, "text": "Created attachment 9142381\nBug 1632139 - Recalculate GC thresholds once at the end of GC r=sfink!", "is_private": false, "bug_id": 1632139, "raw_text": "", "count": 1, "creation_time": "2020-04-22T13:36:44Z", "tags": [], "creator": "jcoppeard@mozilla.com", "time": "2020-04-22T13:36:44Z"}, {"tags": [], "creator": "pulsebot@bots.tld", "time": "2020-04-24T06:31:48Z", "raw_text": "Pushed by jcoppeard@mozilla.com:\nhttps://hg.mozilla.org/integration/autoland/rev/48fa3b9b098e\nRecalculate GC thresholds once at the end of GC r=sfink", "creation_time": "2020-04-24T06:31:48Z", "count": 2, "is_private": false, "bug_id": 1632139, "attachment_id": null, "id": 14775639, "author": "pulsebot@bots.tld", "text": "Pushed by jcoppeard@mozilla.com:\nhttps://hg.mozilla.org/integration/autoland/rev/48fa3b9b098e\nRecalculate GC thresholds once at the end of GC r=sfink"}, {"time": "2020-04-24T16:32:53Z", "creator": "csabou@mozilla.com", "is_private": false, "bug_id": 1632139, "tags": ["bugherder"], "text": "https://hg.mozilla.org/mozilla-central/rev/48fa3b9b098e", "count": 3, "creation_time": "2020-04-24T16:32:53Z", "id": 14776674, "author": "csabou@mozilla.com", "attachment_id": null, "raw_text": "https://hg.mozilla.org/mozilla-central/rev/48fa3b9b098e"}]}}}