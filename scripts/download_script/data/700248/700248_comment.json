{"bugs": {"700248": {"comments": [{"bug_id": 700248, "id": 5830102, "count": 0, "is_private": false, "tags": [], "time": "2011-11-07T10:00:00Z", "attachment_id": null, "text": "nsScriptLoader uses nsIStreamLoader to request the whole script file as a contiguous byte buffer from Necko. This has to mean that Necko does some extra copying. Also, the conversion to UTF-16 can happen synchronously for large amounts of input.\n\nConsider using the lower-level network stream APIs and incrementally converting the input to UTF-16 on each OnDataAvailable call.\n\nPossible disadvantages include the UTF-16 data being larger than the byte data and more copying possibly happening on the UTF-16 side.\n\n(Perhaps instead of buffering up the UTF-16 data, the data should be pushed piecemeal to the JS parser immediately. Is that supported?)", "creation_time": "2011-11-07T10:00:00Z", "raw_text": "nsScriptLoader uses nsIStreamLoader to request the whole script file as a contiguous byte buffer from Necko. This has to mean that Necko does some extra copying. Also, the conversion to UTF-16 can happen synchronously for large amounts of input.\n\nConsider using the lower-level network stream APIs and incrementally converting the input to UTF-16 on each OnDataAvailable call.\n\nPossible disadvantages include the UTF-16 data being larger than the byte data and more copying possibly happening on the UTF-16 side.\n\n(Perhaps instead of buffering up the UTF-16 data, the data should be pushed piecemeal to the JS parser immediately. Is that supported?)", "author": "hsivonen@mozilla.com", "creator": "hsivonen@mozilla.com"}, {"creator": "bzbarsky@mit.edu", "author": "bzbarsky@mit.edu", "is_private": false, "count": 1, "tags": [], "id": 5830983, "bug_id": 700248, "raw_text": "The JS engine needs the UTF-16 data in a single chunk.\n\nFor the rest, you're basically proposing that we use nsIUnicharStreamLoader, right?  Now that this hands in an nsAString, not an actual nsIUnicharInputStream, it seems like it's exactly what you want.\n\nAnd yes, that will involve some realloc activity for the UTF-16 buffer...", "creation_time": "2011-11-07T16:23:52Z", "text": "The JS engine needs the UTF-16 data in a single chunk.\n\nFor the rest, you're basically proposing that we use nsIUnicharStreamLoader, right?  Now that this hands in an nsAString, not an actual nsIUnicharInputStream, it seems like it's exactly what you want.\n\nAnd yes, that will involve some realloc activity for the UTF-16 buffer...", "attachment_id": null, "time": "2011-11-07T16:23:52Z"}, {"author": "hsivonen@mozilla.com", "creator": "hsivonen@mozilla.com", "bug_id": 700248, "id": 5833442, "count": 2, "is_private": false, "tags": [], "attachment_id": null, "time": "2011-11-08T08:30:59Z", "text": "(In reply to Boris Zbarsky (:bz) from comment #1)\n> The JS engine needs the UTF-16 data in a single chunk.\n\nHow deeply is that set in stone? That is, does the code organization of the JS parser preclude opening an incremental parsing API where the app could push PRUnichar buffers to the JS engine and the JS engine would parse each buffer incrementally (like the HTML and XML parsers do)? Obviously, the whole point would be that the JS parser could actually consume buffers incrementally instead of just collecting everything into a big buffer first internally.\n\n> For the rest, you're basically proposing that we use nsIUnicharStreamLoader,\n> right?\n\nProbably. I didn't know such a thing existed.\n\n> And yes, that will involve some realloc activity for the UTF-16 buffer...\n\nYeah, this is a \"consider\" bug. It's unclear if changes are worthwhile.", "creation_time": "2011-11-08T08:30:59Z", "raw_text": "(In reply to Boris Zbarsky (:bz) from comment #1)\n> The JS engine needs the UTF-16 data in a single chunk.\n\nHow deeply is that set in stone? That is, does the code organization of the JS parser preclude opening an incremental parsing API where the app could push PRUnichar buffers to the JS engine and the JS engine would parse each buffer incrementally (like the HTML and XML parsers do)? Obviously, the whole point would be that the JS parser could actually consume buffers incrementally instead of just collecting everything into a big buffer first internally.\n\n> For the rest, you're basically proposing that we use nsIUnicharStreamLoader,\n> right?\n\nProbably. I didn't know such a thing existed.\n\n> And yes, that will involve some realloc activity for the UTF-16 buffer...\n\nYeah, this is a \"consider\" bug. It's unclear if changes are worthwhile."}, {"author": "bzbarsky@mit.edu", "creator": "bzbarsky@mit.edu", "bug_id": 700248, "id": 5833764, "tags": [], "is_private": false, "count": 3, "time": "2011-11-08T12:47:13Z", "attachment_id": null, "text": "> How deeply is that set in stone?\n\nI'd check with the JSeng folks.  I seem to recall they had some sort of streaming capability that the shell used and nuked it for better parsing performance.  But I could be wrong.", "raw_text": "> How deeply is that set in stone?\n\nI'd check with the JSeng folks.  I seem to recall they had some sort of streaming capability that the shell used and nuked it for better parsing performance.  But I could be wrong.", "creation_time": "2011-11-08T12:47:13Z"}, {"bug_id": 700248, "id": 13435312, "tags": [], "is_private": false, "count": 4, "time": "2018-06-29T04:40:08Z", "attachment_id": null, "text": "https://bugzilla.mozilla.org/show_bug.cgi?id=1472046\n\nMove all DOM bugs that haven't been updated in more than 3 years and has no one currently assigned to P5.\n\nIf you have questions, please contact :mdaly.", "creation_time": "2018-06-29T04:40:08Z", "raw_text": "https://bugzilla.mozilla.org/show_bug.cgi?id=1472046\n\nMove all DOM bugs that haven't been updated in more than 3 years and has no one currently assigned to P5.\n\nIf you have questions, please contact :mdaly.", "author": "bug-husbandry-bot@mozilla.bugs", "creator": "bug-husbandry-bot@mozilla.bugs"}]}}, "comments": {}}