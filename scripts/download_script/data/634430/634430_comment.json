{"bugs": {"634430": {"comments": [{"raw_text": "Marc Schoenefeld reported the following to security@mozilla.org:\n\n(I tried the PoC on OSX and didn't get the crash, only the \"Stop Script\" case he describes below.)\n\n\nHi,\n\nwith Ffx 3.6.13, there is a suspicious looking crash with navigator.registerProtocolHandler(a,b,c);\n\nIt crashes on Mac OSX and Win XP / SP3, automatic crash analysis claims it is exploitable on Windows. Ffx/Linux (only tested Fedora 14/x86_64) doesn't seem to crash, but doesn't react to pressing \"Stop Script\", so it's DoS here too.\n\nTo reproduce:\n\nsh runit.sh\nfirefox http://127.0.0.1:9000/regframe.html\n\nThe files:\n\nregframe loads the exploit page 100 times into an iframe.\nregister2.html performs the registerProtocolHandler\n\nThe analysis:\n\nWindows XP/SP3\n\n(c9c.a14): Break instruction exception - code 80000003 (first chance)\neax=7ffde000 ebx=00000001 ecx=00000002 edx=00000003 esi=00000004\nedi=00000005\neip=7c90120e esp=0587ffcc ebp=0587fff4 iopl=0         nv up ei pl zr na\npe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=0038  gs=0000\nefl=00000246\nntdll!DbgBreakPoint:\n7c90120e cc              int     3\n0:019> g\n(c9c.588): Access violation - code c0000005 (first chance)\nFirst chance exceptions are reported before any exception handling.\nThis exception may be expected and handled.\neax=07ea0072 ebx=00010000 ecx=0012e6d8 edx=0012e708 esi=07d74928\nedi=0012e6d0\neip=003074d7 esp=0012e528 ebp=0012e6d8 iopl=0         nv up ei pl nz ac\npe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=0038  gs=0000\nefl=00210216\njs3250+0x74d7:\n003074d7 6689040e        mov     word ptr [esi+ecx],ax\nds:0023:07ea3000=????\n\n0:000> !MSEC.exploitable\n*** ERROR: Module load completed but symbols could not be loaded for\nC:\\Program Files\\Mozilla Firefox\\js3250.dll\n*** ERROR: Module load completed but symbols could not be loaded for\nC:\\Program Files\\Mozilla Firefox\\xul.dll\nExploitability Classification: EXPLOITABLE\nRecommended Bug Title: Exploitable - User Mode Write AV starting at\njs3250+0x00000000000074d7 (Hash=0x3f104c57.0x277d1b19)\n\nUser mode write access violations that are not near NULL are exploitable.\n\nOSX\n\nfirefox-bin(16416,0xa01c1540) malloc: *** mmap(size=143491072) failed\n(error code=12)\n*** error: can't allocate region\n*** set a breakpoint in malloc_error_break to debug\nfirefox-bin(16416,0xa01c1540) malloc: *** mmap(size=286982144) failed\n(error code=12)\n*** error: can't allocate region\n*** set a breakpoint in malloc_error_break to debug\nfirefox-bin(16416,0xa01c1540) malloc: *** mmap(size=239149056) failed\n(error code=12)\n*** error: can't allocate region\n*** set a breakpoint in malloc_error_break to debug\nterminate called after throwing an instance of 'std::bad_alloc'\n  what():  std::bad_alloc\nAbort trap\n\nCheers\nMarc", "tags": [], "is_private": false, "creation_time": "2011-02-15T23:10:23Z", "text": "Created attachment 512613\ntestcase (crashes Firefox)\n\nMarc Schoenefeld reported the following to security@mozilla.org:\n\n(I tried the PoC on OSX and didn't get the crash, only the \"Stop Script\" case he describes below.)\n\n\nHi,\n\nwith Ffx 3.6.13, there is a suspicious looking crash with navigator.registerProtocolHandler(a,b,c);\n\nIt crashes on Mac OSX and Win XP / SP3, automatic crash analysis claims it is exploitable on Windows. Ffx/Linux (only tested Fedora 14/x86_64) doesn't seem to crash, but doesn't react to pressing \"Stop Script\", so it's DoS here too.\n\nTo reproduce:\n\nsh runit.sh\nfirefox http://127.0.0.1:9000/regframe.html\n\nThe files:\n\nregframe loads the exploit page 100 times into an iframe.\nregister2.html performs the registerProtocolHandler\n\nThe analysis:\n\nWindows XP/SP3\n\n(c9c.a14): Break instruction exception - code 80000003 (first chance)\neax=7ffde000 ebx=00000001 ecx=00000002 edx=00000003 esi=00000004\nedi=00000005\neip=7c90120e esp=0587ffcc ebp=0587fff4 iopl=0         nv up ei pl zr na\npe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=0038  gs=0000\nefl=00000246\nntdll!DbgBreakPoint:\n7c90120e cc              int     3\n0:019> g\n(c9c.588): Access violation - code c0000005 (first chance)\nFirst chance exceptions are reported before any exception handling.\nThis exception may be expected and handled.\neax=07ea0072 ebx=00010000 ecx=0012e6d8 edx=0012e708 esi=07d74928\nedi=0012e6d0\neip=003074d7 esp=0012e528 ebp=0012e6d8 iopl=0         nv up ei pl nz ac\npe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=0038  gs=0000\nefl=00210216\njs3250+0x74d7:\n003074d7 6689040e        mov     word ptr [esi+ecx],ax\nds:0023:07ea3000=????\n\n0:000> !MSEC.exploitable\n*** ERROR: Module load completed but symbols could not be loaded for\nC:\\Program Files\\Mozilla Firefox\\js3250.dll\n*** ERROR: Module load completed but symbols could not be loaded for\nC:\\Program Files\\Mozilla Firefox\\xul.dll\nExploitability Classification: EXPLOITABLE\nRecommended Bug Title: Exploitable - User Mode Write AV starting at\njs3250+0x00000000000074d7 (Hash=0x3f104c57.0x277d1b19)\n\nUser mode write access violations that are not near NULL are exploitable.\n\nOSX\n\nfirefox-bin(16416,0xa01c1540) malloc: *** mmap(size=143491072) failed\n(error code=12)\n*** error: can't allocate region\n*** set a breakpoint in malloc_error_break to debug\nfirefox-bin(16416,0xa01c1540) malloc: *** mmap(size=286982144) failed\n(error code=12)\n*** error: can't allocate region\n*** set a breakpoint in malloc_error_break to debug\nfirefox-bin(16416,0xa01c1540) malloc: *** mmap(size=239149056) failed\n(error code=12)\n*** error: can't allocate region\n*** set a breakpoint in malloc_error_break to debug\nterminate called after throwing an instance of 'std::bad_alloc'\n  what():  std::bad_alloc\nAbort trap\n\nCheers\nMarc", "attachment_id": 512613, "id": 5281451, "count": 0, "bug_id": 634430, "time": "2011-02-15T23:10:23Z", "author": "brandon@hackmill.com", "creator": "brandon@hackmill.com"}, {"time": "2011-02-15T23:11:03Z", "bug_id": 634430, "count": 1, "creator": "brandon@hackmill.com", "author": "brandon@hackmill.com", "tags": [], "is_private": false, "raw_text": "", "text": "Created attachment 512614\niframe content for testcase", "attachment_id": 512614, "id": 5281452, "creation_time": "2011-02-15T23:11:03Z"}, {"id": 5281456, "attachment_id": 512615, "text": "Created attachment 512615\nrunit.sh (runs local webserver)", "creation_time": "2011-02-15T23:11:34Z", "is_private": false, "tags": [], "raw_text": "", "creator": "brandon@hackmill.com", "author": "brandon@hackmill.com", "time": "2011-02-15T23:11:34Z", "bug_id": 634430, "count": 2}, {"is_private": false, "tags": [], "time": "2011-02-16T03:47:51Z", "count": 3, "raw_text": "Brandon, this is branch-only?  I don't seem to hit this on Mac trunk...", "bug_id": 634430, "author": "bzbarsky@mit.edu", "attachment_id": null, "id": 5282153, "text": "Brandon, this is branch-only?  I don't seem to hit this on Mac trunk...", "creator": "bzbarsky@mit.edu", "creation_time": "2011-02-16T03:47:51Z"}, {"creation_time": "2011-02-16T17:55:23Z", "text": "I'm not sure.  I didn't hit it at all on either 1.9.2 or trunk, but Marc saw the crashes on 1.9.2 so that's how I filed the bug.", "creator": "brandon@hackmill.com", "attachment_id": null, "id": 5283492, "author": "brandon@hackmill.com", "bug_id": 634430, "raw_text": "I'm not sure.  I didn't hit it at all on either 1.9.2 or trunk, but Marc saw the crashes on 1.9.2 so that's how I filed the bug.", "count": 4, "time": "2011-02-16T17:55:23Z", "tags": [], "is_private": false}, {"creation_time": "2011-06-23T18:42:17Z", "text": "Still dies on OSX , Windows XP SP3 and on some Linux installations (saw reboot with Ffx on Fedora 14). Looks like this bug is missing flags for the other platforms. \n\nFwiw, SeaMonkey OSX dies too:\n\nThread 0 Crashed:  Dispatch queue: com.apple.main-thread\n0   libSystem.B.dylib             \t0x93e5a156 __kill + 10\n1   libSystem.B.dylib             \t0x93e5a148 kill$UNIX2003 + 32\n2   libSystem.B.dylib             \t0x93eec899 raise + 26\n3   libSystem.B.dylib             \t0x93f029b8 abort + 93\n4   libstdc++.6.dylib             \t0x96c93fda __gnu_cxx::__verbose_terminate_handler() + 433\n5   libstdc++.6.dylib             \t0x96c9217a __cxxabiv1::__terminate(void (*)()) + 10\n6   libstdc++.6.dylib             \t0x96c921ba __cxxabiv1::__unexpected(void (*)()) + 0\n7   libstdc++.6.dylib             \t0x96c922b8 __gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Exception*) + 0\n8   libstdc++.6.dylib             \t0x96c92658 operator new(unsigned long) + 101\n9   org.mozilla.seamonkey         \t0x0019df67 std::vector<unsigned short, std::allocator<unsigned short> >::_M_fill_insert(__gnu_cxx::__normal_iterator<unsigned short*, std::vector<unsigned short, std::allocator<unsigned short> > >, unsigned long, unsigned short const&) + 1541975\n10  libsuite.dylib                \t0x01765fcf NSGetModule + 63311\n11  org.mozilla.seamonkey         \t0x005448cc non-virtual thunk to nsPrintSession::Release() + 2888268\n12  org.mozilla.seamonkey         \t0x00545b0c non-virtual thunk to nsPrintSession::Release() + 2892940\n13  org.mozilla.seamonkey         \t0x002980ad non-virtual thunk to nsPrintSession::Release() + 84525\n14  org.mozilla.seamonkey         \t0x002982ca non-virtual thunk to nsPrintSession::Release() + 85066\n15  org.mozilla.seamonkey         \t0x007fd249 non-virtual thunk to nsPrintSession::Release() + 5741513\n16  org.mozilla.seamonkey         \t0x00800804 non-virtual thunk to nsPrintSession::Release() + 5755268\n17  org.mozilla.seamonkey         \t0x0080daf3 non-virtual thunk to nsPrintSession::Release() + 5809267\n18  org.mozilla.seamonkey         \t0x008120d8 non-virtual thunk to nsPrintSession::Release() + 5827160\n19  org.mozilla.seamonkey         \t0x00812433 non-virtual thunk to nsPrintSession::Release() + 5828019\n20  org.mozilla.seamonkey         \t0x00812d9e non-virtual thunk to nsPrintSession::Release() + 5830430\n21  org.mozilla.seamonkey         \t0x000d1338 std::vector<unsigned short, std::allocator<unsigned short> >::_M_fill_insert(__gnu_cxx::__normal_iterator<unsigned short*, std::vector<unsigned short, std::allocator<unsigned short> > >, unsigned long, unsigned short const&) + 703272\n22  org.mozilla.seamonkey         \t0x000d5d12 std::vector<unsigned short, std::allocator<unsigned short> >::_M_fill_insert(__gnu_cxx::__normal_iterator<unsigned short*, std::vector<unsigned short, std::allocator<unsigned short> > >, unsigned long, unsigned short const&) + 722178\n23  org.mozilla.seamonkey         \t0x000596bc std::vector<unsigned short, std::allocator<unsigned short> >::_M_fill_insert(__gnu_cxx::__normal_iterator<unsigned short*, std::vector<unsigned short, std::allocator<unsigned short> > >, unsigned long, unsigned short const&) + 212652\n24  org.mozilla.seamonkey         \t0x00059a08 std::vector<unsigned short, std::allocator<unsigned short> >::_M_fill_insert(__gnu_cxx::__normal_iterator<unsigned short*, std::vector<unsigned short, std::allocator<unsigned short> > >, unsigned long, unsigned short const&) + 213496\n25  libxpcom_core.dylib           \t0x0109c81d NS_AsyncCopy(nsIInputStream*, nsIOutputStream*, nsIEventTarget*, nsAsyncCopyMode, unsigned int, void (*)(void*, unsigned int), void*) + 1165\n26  libxpcom_core.dylib           \t0x010b9f3a NS_SetGlobalThreadObserver(nsIThreadObserver*) + 2202\n27  libxpcom_core.dylib           \t0x0107a4b7 NS_ProcessPendingEvents_P(nsIThread*, unsigned int) + 71\n28  org.mozilla.seamonkey         \t0x00278041 void std::__adjust_heap<__gnu_cxx::__normal_iterator<nsRefPtr<imgCacheEntry>*, std::vector<nsRefPtr<imgCacheEntry>, std::allocator<nsRefPtr<imgCacheEntry> > > >, int, nsRefPtr<imgCacheEntry>, bool (*)(nsRefPtr<imgCacheEntry> const&, nsRefPtr<imgCacheEntry> const&)>(__gnu_cxx::__normal_iterator<nsRefPtr<imgCacheEntry>*, std::vector<nsRefPtr<imgCacheEntry>, std::allocator<nsRefPtr<imgCacheEntry> > > >, int, int, nsRefPtr<imgCacheEntry>, bool (*)(nsRefPtr<imgCacheEntry> const&, nsRefPtr<imgCacheEntry> const&)) + 467153\n29  org.mozilla.seamonkey         \t0x0024641d void std::__adjust_heap<__gnu_cxx::__normal_iterator<nsRefPtr<imgCacheEntry>*, std::vector<nsRefPtr<imgCacheEntry>, std::allocator<nsRefPtr<imgCacheEntry> > > >, int, nsRefPtr<imgCacheEntry>, bool (*)(nsRefPtr<imgCacheEntry> const&, nsRefPtr<imgCacheEntry> const&)>(__gnu_cxx::__normal_iterator<nsRefPtr<imgCacheEntry>*, std::vector<nsRefPtr<imgCacheEntry>, std::allocator<nsRefPtr<imgCacheEntry> > > >, int, int, nsRefPtr<imgCacheEntry>, bool (*)(nsRefPtr<imgCacheEntry> const&, nsRefPtr<imgCacheEntry> const&)) + 263341\n30  com.apple.CoreFoundation      \t0x97bef4cb __CFRunLoopDoSources0 + 1563\n31  com.apple.CoreFoundation      \t0x97becf8f __CFRunLoopRun + 1071\n32  com.apple.CoreFoundation      \t0x97bec464 CFRunLoopRunSpecific + 452\n33  com.apple.CoreFoundation      \t0x97bec291 CFRunLoopRunInMode + 97\n34  com.apple.HIToolbox           \t0x9919ee04 RunCurrentEventLoopInMode + 392\n35  com.apple.HIToolbox           \t0x9919ebb9 ReceiveNextEventCommon + 354\n36  com.apple.HIToolbox           \t0x9919ea3e BlockUntilNextEventMatchingListInMode + 81\n37  com.apple.AppKit              \t0x90ab678d _DPSNextEvent + 847\n38  com.apple.AppKit              \t0x90ab5fce -[NSApplication nextEventMatchingMask:untilDate:inMode:dequeue:] + 156\n39  com.apple.AppKit              \t0x90a78247 -[NSApplication run] + 821\n40  org.mozilla.seamonkey         \t0x00245b48 void std::__adjust_heap<__gnu_cxx::__normal_iterator<nsRefPtr<imgCacheEntry>*, std::vector<nsRefPtr<imgCacheEntry>, std::allocator<nsRefPtr<imgCacheEntry> > > >, int, nsRefPtr<imgCacheEntry>, bool (*)(nsRefPtr<imgCacheEntry> const&, nsRefPtr<imgCacheEntry> const&)>(__gnu_cxx::__normal_iterator<nsRefPtr<imgCacheEntry>*, std::vector<nsRefPtr<imgCacheEntry>, std::allocator<nsRefPtr<imgCacheEntry> > > >, int, int, nsRefPtr<imgCacheEntry>, bool (*)(nsRefPtr<imgCacheEntry> const&, nsRefPtr<imgCacheEntry> const&)) + 261080\n41  org.mozilla.seamonkey         \t0x008e2cb7 JNIEnv_::CallStaticObjectMethod(_jclass*, _jmethodID*, ...) + 450519\n42  org.mozilla.seamonkey         \t0x000081f8 XRE_main + 9432\n43  org.mozilla.seamonkey         \t0x00003ca3 start + 2131\n44  org.mozilla.seamonkey         \t0x00003552 start + 258\n45  org.mozilla.seamonkey         \t0x00003479 start + 41", "creator": "marc@beauchamp.de", "attachment_id": null, "id": 5551757, "author": "marc@beauchamp.de", "bug_id": 634430, "raw_text": "Still dies on OSX , Windows XP SP3 and on some Linux installations (saw reboot with Ffx on Fedora 14). Looks like this bug is missing flags for the other platforms. \n\nFwiw, SeaMonkey OSX dies too:\n\nThread 0 Crashed:  Dispatch queue: com.apple.main-thread\n0   libSystem.B.dylib             \t0x93e5a156 __kill + 10\n1   libSystem.B.dylib             \t0x93e5a148 kill$UNIX2003 + 32\n2   libSystem.B.dylib             \t0x93eec899 raise + 26\n3   libSystem.B.dylib             \t0x93f029b8 abort + 93\n4   libstdc++.6.dylib             \t0x96c93fda __gnu_cxx::__verbose_terminate_handler() + 433\n5   libstdc++.6.dylib             \t0x96c9217a __cxxabiv1::__terminate(void (*)()) + 10\n6   libstdc++.6.dylib             \t0x96c921ba __cxxabiv1::__unexpected(void (*)()) + 0\n7   libstdc++.6.dylib             \t0x96c922b8 __gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Exception*) + 0\n8   libstdc++.6.dylib             \t0x96c92658 operator new(unsigned long) + 101\n9   org.mozilla.seamonkey         \t0x0019df67 std::vector<unsigned short, std::allocator<unsigned short> >::_M_fill_insert(__gnu_cxx::__normal_iterator<unsigned short*, std::vector<unsigned short, std::allocator<unsigned short> > >, unsigned long, unsigned short const&) + 1541975\n10  libsuite.dylib                \t0x01765fcf NSGetModule + 63311\n11  org.mozilla.seamonkey         \t0x005448cc non-virtual thunk to nsPrintSession::Release() + 2888268\n12  org.mozilla.seamonkey         \t0x00545b0c non-virtual thunk to nsPrintSession::Release() + 2892940\n13  org.mozilla.seamonkey         \t0x002980ad non-virtual thunk to nsPrintSession::Release() + 84525\n14  org.mozilla.seamonkey         \t0x002982ca non-virtual thunk to nsPrintSession::Release() + 85066\n15  org.mozilla.seamonkey         \t0x007fd249 non-virtual thunk to nsPrintSession::Release() + 5741513\n16  org.mozilla.seamonkey         \t0x00800804 non-virtual thunk to nsPrintSession::Release() + 5755268\n17  org.mozilla.seamonkey         \t0x0080daf3 non-virtual thunk to nsPrintSession::Release() + 5809267\n18  org.mozilla.seamonkey         \t0x008120d8 non-virtual thunk to nsPrintSession::Release() + 5827160\n19  org.mozilla.seamonkey         \t0x00812433 non-virtual thunk to nsPrintSession::Release() + 5828019\n20  org.mozilla.seamonkey         \t0x00812d9e non-virtual thunk to nsPrintSession::Release() + 5830430\n21  org.mozilla.seamonkey         \t0x000d1338 std::vector<unsigned short, std::allocator<unsigned short> >::_M_fill_insert(__gnu_cxx::__normal_iterator<unsigned short*, std::vector<unsigned short, std::allocator<unsigned short> > >, unsigned long, unsigned short const&) + 703272\n22  org.mozilla.seamonkey         \t0x000d5d12 std::vector<unsigned short, std::allocator<unsigned short> >::_M_fill_insert(__gnu_cxx::__normal_iterator<unsigned short*, std::vector<unsigned short, std::allocator<unsigned short> > >, unsigned long, unsigned short const&) + 722178\n23  org.mozilla.seamonkey         \t0x000596bc std::vector<unsigned short, std::allocator<unsigned short> >::_M_fill_insert(__gnu_cxx::__normal_iterator<unsigned short*, std::vector<unsigned short, std::allocator<unsigned short> > >, unsigned long, unsigned short const&) + 212652\n24  org.mozilla.seamonkey         \t0x00059a08 std::vector<unsigned short, std::allocator<unsigned short> >::_M_fill_insert(__gnu_cxx::__normal_iterator<unsigned short*, std::vector<unsigned short, std::allocator<unsigned short> > >, unsigned long, unsigned short const&) + 213496\n25  libxpcom_core.dylib           \t0x0109c81d NS_AsyncCopy(nsIInputStream*, nsIOutputStream*, nsIEventTarget*, nsAsyncCopyMode, unsigned int, void (*)(void*, unsigned int), void*) + 1165\n26  libxpcom_core.dylib           \t0x010b9f3a NS_SetGlobalThreadObserver(nsIThreadObserver*) + 2202\n27  libxpcom_core.dylib           \t0x0107a4b7 NS_ProcessPendingEvents_P(nsIThread*, unsigned int) + 71\n28  org.mozilla.seamonkey         \t0x00278041 void std::__adjust_heap<__gnu_cxx::__normal_iterator<nsRefPtr<imgCacheEntry>*, std::vector<nsRefPtr<imgCacheEntry>, std::allocator<nsRefPtr<imgCacheEntry> > > >, int, nsRefPtr<imgCacheEntry>, bool (*)(nsRefPtr<imgCacheEntry> const&, nsRefPtr<imgCacheEntry> const&)>(__gnu_cxx::__normal_iterator<nsRefPtr<imgCacheEntry>*, std::vector<nsRefPtr<imgCacheEntry>, std::allocator<nsRefPtr<imgCacheEntry> > > >, int, int, nsRefPtr<imgCacheEntry>, bool (*)(nsRefPtr<imgCacheEntry> const&, nsRefPtr<imgCacheEntry> const&)) + 467153\n29  org.mozilla.seamonkey         \t0x0024641d void std::__adjust_heap<__gnu_cxx::__normal_iterator<nsRefPtr<imgCacheEntry>*, std::vector<nsRefPtr<imgCacheEntry>, std::allocator<nsRefPtr<imgCacheEntry> > > >, int, nsRefPtr<imgCacheEntry>, bool (*)(nsRefPtr<imgCacheEntry> const&, nsRefPtr<imgCacheEntry> const&)>(__gnu_cxx::__normal_iterator<nsRefPtr<imgCacheEntry>*, std::vector<nsRefPtr<imgCacheEntry>, std::allocator<nsRefPtr<imgCacheEntry> > > >, int, int, nsRefPtr<imgCacheEntry>, bool (*)(nsRefPtr<imgCacheEntry> const&, nsRefPtr<imgCacheEntry> const&)) + 263341\n30  com.apple.CoreFoundation      \t0x97bef4cb __CFRunLoopDoSources0 + 1563\n31  com.apple.CoreFoundation      \t0x97becf8f __CFRunLoopRun + 1071\n32  com.apple.CoreFoundation      \t0x97bec464 CFRunLoopRunSpecific + 452\n33  com.apple.CoreFoundation      \t0x97bec291 CFRunLoopRunInMode + 97\n34  com.apple.HIToolbox           \t0x9919ee04 RunCurrentEventLoopInMode + 392\n35  com.apple.HIToolbox           \t0x9919ebb9 ReceiveNextEventCommon + 354\n36  com.apple.HIToolbox           \t0x9919ea3e BlockUntilNextEventMatchingListInMode + 81\n37  com.apple.AppKit              \t0x90ab678d _DPSNextEvent + 847\n38  com.apple.AppKit              \t0x90ab5fce -[NSApplication nextEventMatchingMask:untilDate:inMode:dequeue:] + 156\n39  com.apple.AppKit              \t0x90a78247 -[NSApplication run] + 821\n40  org.mozilla.seamonkey         \t0x00245b48 void std::__adjust_heap<__gnu_cxx::__normal_iterator<nsRefPtr<imgCacheEntry>*, std::vector<nsRefPtr<imgCacheEntry>, std::allocator<nsRefPtr<imgCacheEntry> > > >, int, nsRefPtr<imgCacheEntry>, bool (*)(nsRefPtr<imgCacheEntry> const&, nsRefPtr<imgCacheEntry> const&)>(__gnu_cxx::__normal_iterator<nsRefPtr<imgCacheEntry>*, std::vector<nsRefPtr<imgCacheEntry>, std::allocator<nsRefPtr<imgCacheEntry> > > >, int, int, nsRefPtr<imgCacheEntry>, bool (*)(nsRefPtr<imgCacheEntry> const&, nsRefPtr<imgCacheEntry> const&)) + 261080\n41  org.mozilla.seamonkey         \t0x008e2cb7 JNIEnv_::CallStaticObjectMethod(_jclass*, _jmethodID*, ...) + 450519\n42  org.mozilla.seamonkey         \t0x000081f8 XRE_main + 9432\n43  org.mozilla.seamonkey         \t0x00003ca3 start + 2131\n44  org.mozilla.seamonkey         \t0x00003552 start + 258\n45  org.mozilla.seamonkey         \t0x00003479 start + 41", "count": 5, "time": "2011-06-23T18:42:17Z", "tags": [], "is_private": false}, {"text": "It does not die immediately, sometimes after clicking \"Continue\" on \"Unresponsive script\"", "creator": "marc@beauchamp.de", "id": 5551796, "attachment_id": null, "author": "marc@beauchamp.de", "creation_time": "2011-06-23T18:51:41Z", "time": "2011-06-23T18:51:41Z", "tags": [], "is_private": false, "bug_id": 634430, "raw_text": "It does not die immediately, sometimes after clicking \"Continue\" on \"Unresponsive script\"", "count": 6}, {"bug_id": 634430, "raw_text": "Any progress here?", "count": 7, "time": "2011-09-12T18:04:57Z", "tags": [], "is_private": false, "creation_time": "2011-09-12T18:04:57Z", "creator": "marc@beauchamp.de", "text": "Any progress here?", "id": 5714370, "attachment_id": null, "author": "marc@beauchamp.de"}, {"count": 8, "raw_text": "With Firefox 46 on Mac OS X the testcase got up to 34Gb (virtual, my machine is only 16Gb) before I killed it. Another run got up to 63Gb before the OS made me kill it. No \"slow script\" dialog even though Firefox was completely locked up. I do get \"allocation errors\" on the  a = a +a +a  line.\n\nIf I change that line to a += 'a'; then it spins up the CPU for several seconds and gets back to normal. Without the allocation failures it's getting all the way through the 1024 registerProtocolHandler calls in each frame (all unique registrations) instead of fewer than 20 loops per frame.\n\nThis is still a DoS but it doesn't need to be hidden. The DOS-yness appears to be due to the string concatenations which we have other bugs on.", "bug_id": 634430, "is_private": false, "tags": [], "time": "2016-05-02T19:17:11Z", "creation_time": "2016-05-02T19:17:11Z", "author": "dveditz@mozilla.com", "id": 11375184, "attachment_id": null, "text": "With Firefox 46 on Mac OS X the testcase got up to 34Gb (virtual, my machine is only 16Gb) before I killed it. Another run got up to 63Gb before the OS made me kill it. No \"slow script\" dialog even though Firefox was completely locked up. I do get \"allocation errors\" on the  a = a +a +a  line.\n\nIf I change that line to a += 'a'; then it spins up the CPU for several seconds and gets back to normal. Without the allocation failures it's getting all the way through the 1024 registerProtocolHandler calls in each frame (all unique registrations) instead of fewer than 20 loops per frame.\n\nThis is still a DoS but it doesn't need to be hidden. The DOS-yness appears to be due to the string concatenations which we have other bugs on.", "creator": "dveditz@mozilla.com"}]}}, "comments": {}}