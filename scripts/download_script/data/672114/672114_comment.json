{"bugs": {"672114": {"comments": [{"bug_id": 672114, "text": "User Agent: Mozilla/5.0 (X11; Linux i686; rv:5.0) Gecko/20100101 Firefox/5.0\nBuild ID: 20110615151330\n\nSteps to reproduce:\n\nWe are developing a solution where image-data is streamed from a servlet continously.\nHere's a stripped-down version of what we are doing:\n\nfunction StartImageRequest() {\n  var\timg = new Image();  \n  img.src = 'ImageStreamer?&rand='+randParam; //Some random ID to avoid caching\n  img.onload = new function() {\n\t   var canvas = document.getElementById('canvas');\n\t   var ctx = canvas.getContext('2d');\n\t   ctx.drawImage(img, 0, 0);\n           StartImageRequest();\n  };\n}\n\nIf there is any interest, I could provide a ready-to-run testcase to demonstrate the problem.\n\nBuild identifier: Mozilla/5.0 (X11; Linux i686; rv:5.0) Gecko/20100101 Firefox/5.0\n\n\nActual results:\n\nWhen running the script above, the first few hundred iterations work fine, but suddenly FixFox's pixmap memory useage grows without limit - on my system about 50mb/s.\nWhen it reached 500mb, I had to kill FireFox because my system felt choppy and was swapping.\n\n\nExpected results:\n\nFireFox should somehow restrict the amount of pixmap memory it reserves.", "tags": [], "attachment_id": null, "raw_text": "User Agent: Mozilla/5.0 (X11; Linux i686; rv:5.0) Gecko/20100101 Firefox/5.0\nBuild ID: 20110615151330\n\nSteps to reproduce:\n\nWe are developing a solution where image-data is streamed from a servlet continously.\nHere's a stripped-down version of what we are doing:\n\nfunction StartImageRequest() {\n  var\timg = new Image();  \n  img.src = 'ImageStreamer?&rand='+randParam; //Some random ID to avoid caching\n  img.onload = new function() {\n\t   var canvas = document.getElementById('canvas');\n\t   var ctx = canvas.getContext('2d');\n\t   ctx.drawImage(img, 0, 0);\n           StartImageRequest();\n  };\n}\n\nIf there is any interest, I could provide a ready-to-run testcase to demonstrate the problem.\n\nBuild identifier: Mozilla/5.0 (X11; Linux i686; rv:5.0) Gecko/20100101 Firefox/5.0\n\n\nActual results:\n\nWhen running the script above, the first few hundred iterations work fine, but suddenly FixFox's pixmap memory useage grows without limit - on my system about 50mb/s.\nWhen it reached 500mb, I had to kill FireFox because my system felt choppy and was swapping.\n\n\nExpected results:\n\nFireFox should somehow restrict the amount of pixmap memory it reserves.", "creation_time": "2011-07-17T14:06:20Z", "time": "2011-07-17T14:06:20Z", "creator": "linuxhippy@gmail.com", "author": "linuxhippy@gmail.com", "count": 0, "id": 5595458, "is_private": false}, {"author": "mozilla@ahlblom.eu", "creator": "mozilla@ahlblom.eu", "creation_time": "2011-07-17T15:08:20Z", "time": "2011-07-17T15:08:20Z", "is_private": false, "id": 5595489, "count": 1, "tags": [], "bug_id": 672114, "text": "I don't know much about the details, but quite a lot has happened with the memory management i Firefox recently.\n\nAre you able to verify the issue with the latest nightly?\nhttps://nightly.mozilla.org/\n\n\nAnd a testcase would be fine to have, so people can compare different versions of Firefox.", "raw_text": "I don't know much about the details, but quite a lot has happened with the memory management i Firefox recently.\n\nAre you able to verify the issue with the latest nightly?\nhttps://nightly.mozilla.org/\n\n\nAnd a testcase would be fine to have, so people can compare different versions of Firefox.", "attachment_id": null}, {"tags": [], "bug_id": 672114, "text": "still happens with: Mozilla/5.0 (X11; Linux i686; rv:8.0a1) Gecko/20110717 Firefox/8.0a1\n\nI'll submit a self-containing testcase soon.", "raw_text": "still happens with: Mozilla/5.0 (X11; Linux i686; rv:8.0a1) Gecko/20110717 Firefox/8.0a1\n\nI'll submit a self-containing testcase soon.", "attachment_id": null, "author": "linuxhippy@gmail.com", "time": "2011-07-17T20:42:37Z", "creation_time": "2011-07-17T20:42:37Z", "creator": "linuxhippy@gmail.com", "id": 5595673, "count": 2, "is_private": false}, {"raw_text": "", "attachment_id": 546441, "tags": [], "text": "Created attachment 546441\ntestcase", "bug_id": 672114, "is_private": false, "count": 3, "id": 5595699, "author": "linuxhippy@gmail.com", "creator": "linuxhippy@gmail.com", "creation_time": "2011-07-17T21:23:34Z", "time": "2011-07-17T21:23:34Z"}, {"attachment_id": null, "raw_text": "The testcase includes a small http server with a servlet, which simply streams down the png image also contained in the archive.\n\nIt should be quite simple:\n1. unpack the archive\n2. change into the \"testcase\" directory\n3. start the sample server: java -jar testcase.jar \n4. open Testcase.html in FireFox\n\nFirefox should after a short time consume quite a lot video memory, on my system the groth-rate is about ~50mb/s.", "text": "The testcase includes a small http server with a servlet, which simply streams down the png image also contained in the archive.\n\nIt should be quite simple:\n1. unpack the archive\n2. change into the \"testcase\" directory\n3. start the sample server: java -jar testcase.jar \n4. open Testcase.html in FireFox\n\nFirefox should after a short time consume quite a lot video memory, on my system the groth-rate is about ~50mb/s.", "bug_id": 672114, "tags": [], "count": 4, "id": 5595701, "is_private": false, "time": "2011-07-17T21:27:19Z", "creation_time": "2011-07-17T21:27:19Z", "creator": "linuxhippy@gmail.com", "author": "linuxhippy@gmail.com"}, {"raw_text": "graphics or imagelib....", "attachment_id": null, "text": "graphics or imagelib....", "bug_id": 672114, "tags": [], "is_private": false, "count": 5, "id": 5595965, "author": "bugzilla@mversen.de", "creator": "bugzilla@mversen.de", "time": "2011-07-18T06:02:03Z", "creation_time": "2011-07-18T06:02:03Z"}, {"id": 5596317, "count": 6, "is_private": false, "author": "bzbarsky@mit.edu", "creation_time": "2011-07-18T13:30:03Z", "time": "2011-07-18T13:30:03Z", "creator": "bzbarsky@mit.edu", "raw_text": "I wonder whether we stop GCing as often after a bit, so all those images are sticking around for a while...", "attachment_id": null, "tags": [], "text": "I wonder whether we stop GCing as often after a bit, so all those images are sticking around for a while...", "bug_id": 672114}, {"bug_id": 672114, "text": "Sorry, my conclusion was wrong - its not image loading, its canvas creation what is causing our problems.\n\nWe frequently load images, and need to read the values of a few pixels - therefor we have to create a canvas. However it seems Mozilla's GC doesn't keep track of the native resources consumed by canvas, and because we don't generate a lot of garbage it doesn't clean up agressivly enough:\n\nfunction torture() {\n   while(true) {\n    var cmdCanvas = document.createElement('canvas');\n\tcmdCanvas.setAttribute('width', 100);\n\tcmdCanvas.setAttribute('height', 100);\n\tvar cmdCtx = cmdCanvas.getContext('2d');\n\tcmdCtx.fillRect(10, 10, 10, 10);\n   }\t\n}", "tags": [], "author": "linuxhippy@gmail.com", "time": "2011-07-18T20:38:11Z", "creation_time": "2011-07-18T20:38:11Z", "creator": "linuxhippy@gmail.com", "raw_text": "Sorry, my conclusion was wrong - its not image loading, its canvas creation what is causing our problems.\n\nWe frequently load images, and need to read the values of a few pixels - therefor we have to create a canvas. However it seems Mozilla's GC doesn't keep track of the native resources consumed by canvas, and because we don't generate a lot of garbage it doesn't clean up agressivly enough:\n\nfunction torture() {\n   while(true) {\n    var cmdCanvas = document.createElement('canvas');\n\tcmdCanvas.setAttribute('width', 100);\n\tcmdCanvas.setAttribute('height', 100);\n\tvar cmdCtx = cmdCanvas.getContext('2d');\n\tcmdCtx.fillRect(10, 10, 10, 10);\n   }\t\n}", "id": 5597473, "count": 7, "is_private": false, "attachment_id": null}, {"attachment_id": null, "raw_text": "> its canvas creation what is causing our problems.\n\nAh, that thought had crossed my mind, but comment 0 was explicitly NOT creating new canvases.\n\n> it seems Mozilla's GC doesn't keep track of the native resources consumed by\n> canvas\n\nExcept it does, in theory.  See bug 591358 comment 38 (which is a change to do just that).....\n\nThat said, to collect a canvas we need to CC too, not just GC.  Is it possible we're not triggering CC anywhere during these repeated canvas creations?", "tags": [], "bug_id": 672114, "text": "> its canvas creation what is causing our problems.\n\nAh, that thought had crossed my mind, but comment 0 was explicitly NOT creating new canvases.\n\n> it seems Mozilla's GC doesn't keep track of the native resources consumed by\n> canvas\n\nExcept it does, in theory.  See bug 591358 comment 38 (which is a change to do just that).....\n\nThat said, to collect a canvas we need to CC too, not just GC.  Is it possible we're not triggering CC anywhere during these repeated canvas creations?", "is_private": false, "count": 8, "id": 5598375, "creator": "bzbarsky@mit.edu", "time": "2011-07-19T02:59:44Z", "creation_time": "2011-07-19T02:59:44Z", "author": "bzbarsky@mit.edu"}, {"bug_id": 672114, "text": "(In reply to comment #7)\n> function torture() {\n>    while(true) {\n>     var cmdCanvas = document.createElement('canvas');\n> \tcmdCanvas.setAttribute('width', 100);\n> \tcmdCanvas.setAttribute('height', 100);\n> \tvar cmdCtx = cmdCanvas.getContext('2d');\n> \tcmdCtx.fillRect(10, 10, 10, 10);\n>    }\t\n> }\nEndless loop sure is bad, even without any gc/cc problems.\nWould it be possible to get a testcase which isn't such loop.", "tags": [], "attachment_id": null, "raw_text": "(In reply to comment #7)\n> function torture() {\n>    while(true) {\n>     var cmdCanvas = document.createElement('canvas');\n> \tcmdCanvas.setAttribute('width', 100);\n> \tcmdCanvas.setAttribute('height', 100);\n> \tvar cmdCtx = cmdCanvas.getContext('2d');\n> \tcmdCtx.fillRect(10, 10, 10, 10);\n>    }\t\n> }\nEndless loop sure is bad, even without any gc/cc problems.\nWould it be possible to get a testcase which isn't such loop.", "creation_time": "2011-07-19T09:16:50Z", "time": "2011-07-19T09:16:50Z", "creator": "bugs@pettay.fi", "author": "bugs@pettay.fi", "count": 9, "id": 5598668, "is_private": false}, {"bug_id": 672114, "text": "If I change the loop to use setTimeout, gc/cc is called often and\nmemory usage stays pretty low.", "tags": [], "raw_text": "If I change the loop to use setTimeout, gc/cc is called often and\nmemory usage stays pretty low.", "attachment_id": null, "author": "bugs@pettay.fi", "time": "2011-07-19T09:28:59Z", "creation_time": "2011-07-19T09:28:59Z", "creator": "bugs@pettay.fi", "id": 5598679, "count": 10, "is_private": false}, {"creation_time": "2011-07-19T12:08:19Z", "time": "2011-07-19T12:08:19Z", "creator": "linuxhippy@gmail.com", "author": "linuxhippy@gmail.com", "count": 11, "id": 5598830, "is_private": false, "tags": [], "text": "On our real-world application it is basically an endless loop too, polling for a server-response:\n\nfunction ImageRequest() {\n  img = new Image();  \n  img.src = \"ImageStreamer?rand=\"+parseInt(Math.random() * 99999999);\n  img.onload = handleResponse;\n}\n\nfunction handleResponse() {\n  //create a temporary canvas and do some magic\n  ImageRequest();\n}\n\nSo even when running local, there's a lot of other stuff going on (http transfer, image decoding) - it even switches a lot between native and JS code.\nThe endless loop was just introduced to make the testcase shorter.", "bug_id": 672114, "attachment_id": null, "raw_text": "On our real-world application it is basically an endless loop too, polling for a server-response:\n\nfunction ImageRequest() {\n  img = new Image();  \n  img.src = \"ImageStreamer?rand=\"+parseInt(Math.random() * 99999999);\n  img.onload = handleResponse;\n}\n\nfunction handleResponse() {\n  //create a temporary canvas and do some magic\n  ImageRequest();\n}\n\nSo even when running local, there's a lot of other stuff going on (http transfer, image decoding) - it even switches a lot between native and JS code.\nThe endless loop was just introduced to make the testcase shorter."}, {"time": "2011-07-19T12:20:13Z", "creation_time": "2011-07-19T12:20:13Z", "creator": "bugs@pettay.fi", "text": "that doesn't look like (synchronous) endless loop, since handleResponse is \ncalled asynchronously when load event is dispatched.\nwhile(true); is quite different beast.", "bug_id": 672114, "tags": [], "author": "bugs@pettay.fi", "count": 12, "id": 5598842, "is_private": false, "attachment_id": null, "raw_text": "that doesn't look like (synchronous) endless loop, since handleResponse is \ncalled asynchronously when load event is dispatched.\nwhile(true); is quite different beast."}, {"tags": [], "text": "Yeah, the code in comment 11 should act similarly to what Olli mentioned in cmomment 10...\n\nThat said, was comment 10 tested on Firefox 5 or a nightly?  It's possible that the behavior is different now.", "bug_id": 672114, "attachment_id": null, "raw_text": "Yeah, the code in comment 11 should act similarly to what Olli mentioned in cmomment 10...\n\nThat said, was comment 10 tested on Firefox 5 or a nightly?  It's possible that the behavior is different now.", "time": "2011-07-19T14:48:34Z", "creation_time": "2011-07-19T14:48:34Z", "creator": "bzbarsky@mit.edu", "author": "bzbarsky@mit.edu", "id": 5599081, "count": 13, "is_private": false}, {"is_private": false, "id": 5599087, "count": 14, "creator": "bugs@pettay.fi", "time": "2011-07-19T14:53:03Z", "creation_time": "2011-07-19T14:53:03Z", "author": "bugs@pettay.fi", "attachment_id": null, "raw_text": "I was using Nightly. Nightly was used also in comment 2", "tags": [], "text": "I was using Nightly. Nightly was used also in comment 2", "bug_id": 672114}, {"creator": "bzbarsky@mit.edu", "creation_time": "2011-07-19T14:59:29Z", "time": "2011-07-19T14:59:29Z", "author": "bzbarsky@mit.edu", "is_private": false, "count": 15, "id": 5599103, "bug_id": 672114, "text": "Hmm, yeah.\n\nThe testcase attached in comment 3 doesn't create new canvases, by the way.  Clemens, does that testcase actually show the problem for you?", "tags": [], "attachment_id": null, "raw_text": "Hmm, yeah.\n\nThe testcase attached in comment 3 doesn't create new canvases, by the way.  Clemens, does that testcase actually show the problem for you?"}, {"tags": [], "bug_id": 672114, "text": "With the testcase in Comment 3 I can get Firefox to consume 1.6GB of RAM (RES), however the pixmap memory consumption seems to stay steady at ~10mb.\n\nSo while FF still behaves bad, its way better than before.", "raw_text": "With the testcase in Comment 3 I can get Firefox to consume 1.6GB of RAM (RES), however the pixmap memory consumption seems to stay steady at ~10mb.\n\nSo while FF still behaves bad, its way better than before.", "attachment_id": null, "author": "linuxhippy@gmail.com", "creator": "linuxhippy@gmail.com", "creation_time": "2013-04-04T19:54:18Z", "time": "2013-04-04T19:54:18Z", "is_private": false, "count": 16, "id": 7278659}]}}, "comments": {}}