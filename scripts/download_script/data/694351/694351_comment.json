{"bugs": {"694351": {"comments": [{"time": "2011-10-13T16:52:53Z", "raw_text": "We need a Cairo backend for the new 2D API. It's currently in development in the cairo branch of the graphics branch: http://hg.mozilla.org/projects/graphics", "id": 5780436, "bug_id": 694351, "author": "joe@drew.ca", "text": "We need a Cairo backend for the new 2D API. It's currently in development in the cairo branch of the graphics branch: http://hg.mozilla.org/projects/graphics", "count": 0, "tags": [], "attachment_id": null, "is_private": false, "creation_time": "2011-10-13T16:52:53Z", "creator": "joe@drew.ca"}, {"tags": [], "attachment_id": 579173, "raw_text": "This implements significantly more of the API. It's probably ready for review.", "time": "2011-12-06T01:52:54Z", "creation_time": "2011-12-06T01:52:54Z", "is_private": false, "id": 5893856, "bug_id": 694351, "author": "joe@drew.ca", "text": "Created attachment 579173\nimplement significantly more of the cairo backend\n\nThis implements significantly more of the API. It's probably ready for review.", "count": 1, "creator": "joe@drew.ca"}, {"creation_time": "2011-12-14T18:21:25Z", "is_private": false, "id": 5916242, "bug_id": 694351, "text": "Comment on attachment 579173\nimplement significantly more of the cairo backend\n\nReview of attachment 579173:\n-----------------------------------------------------------------\n\nMostly seems reasonable.\n\n::: ../../../mozilla-central/gfx/2d/DrawTargetCairo.cpp\n@@ +247,5 @@\n>  }\n>  \n> +cairo_pattern_t*\n> +GfxPatternToCairoPattern(const Pattern& aPattern, Float aAlpha)\n> +{\n\nI'd rather this function not return NULL. That keeps the caller from needing to check for NULL\n\n@@ +265,5 @@\n> +      const SurfacePattern& pattern = static_cast<const SurfacePattern&>(aPattern);\n> +      cairo_surface_t* surf = NULL;\n> +\n> +      if (pattern.mSurface->GetType() == SURFACE_CAIRO) {\n> +        const SourceSurfaceCairo* sourcesurf = static_cast<const SourceSurfaceCairo*>(pattern.mSurface.get());\n\nsourcesurf is not a great name.\n\n@@ +267,5 @@\n> +\n> +      if (pattern.mSurface->GetType() == SURFACE_CAIRO) {\n> +        const SourceSurfaceCairo* sourcesurf = static_cast<const SourceSurfaceCairo*>(pattern.mSurface.get());\n> +        surf = sourcesurf->GetSurface();\n> +        cairo_surface_reference(surf);\n\nmight be worth adding a comment that we're referencing this to match up with image_surface_create()\n\n@@ +279,5 @@\n> +        surf = cairo_image_surface_create_for_data(sourcesurf->GetData(),\n> +                                                   GfxFormatToCairoFormat(sourcesurf->GetFormat()),\n> +                                                   sourcesurf->GetSize().width,\n> +                                                   sourcesurf->GetSize().height,\n> +                                                   sourcesurf->Stride());\n\nIt looks like this cairo_image_surface is holding an implicit reference to the DataSourceSurface. I feel like it would be better if this was explicit, or at least documented.\n\n@@ +294,5 @@\n> +    case PATTERN_LINEAR_GRADIENT:\n> +    {\n> +      const LinearGradientPattern& pattern = static_cast<const LinearGradientPattern&>(aPattern);\n> +      RefPtr<GradientStops> stops = pattern.mStops;\n> +      if (stops->GetBackendType() == BACKEND_CAIRO) {\n\nWe should perhaps assert this condition instead of silently ignoring non cairo ones.\n\n@@ +302,5 @@\n> +        const std::vector<GradientStop>& stops =\n> +          static_cast<GradientStopsCairo*>(pattern.mStops.get())->GetStops();\n> +        for (std::vector<GradientStop>::const_iterator i = stops.begin();\n> +             i != stops.end();\n> +             ++i) {\n\nThis loop would probably easier to read if you just used an index instead of an iterator. afaik that's what the other backends do.\n\n@@ +462,5 @@\n> +\n> +  SourceSurfaceCairo* sourcesurf = static_cast<SourceSurfaceCairo*>(aSurface);\n> +\n> +  Float width = aSurface->GetSize().width,\n> +        height = aSurface->GetSize().height;\n\nnot having Float here surprised me.\n\n@@ +508,5 @@\n> +\n> +  cairo_identity_matrix(mContext);\n> +  cairo_translate(mContext, aDest.x, aDest.y);\n> +\n> +  cairo_mask_surface(mContext, blursurf, aOffset.x, aOffset.y);\n\nblursurf is leaked\n\n@@ +540,5 @@\n> +    std::vector<double> dashes(aStrokeOptions.mDashLength);\n> +    for (size_t i = 0; i < aStrokeOptions.mDashLength; ++i) {\n> +      dashes[i] = aStrokeOptions.mDashPattern[i];\n> +    }\n> +    cairo_set_dash(aCtx, &dashes[0], aStrokeOptions.mDashLength,\n\nother backends use &dashes.begin() or something like that. Both are crappy.\n\n@@ +565,5 @@\n> +  if (needIntermediate) {\n> +    cairo_push_group_with_content(mContext, CAIRO_CONTENT_COLOR_ALPHA);\n> +\n> +    // Don't want operators to be applied twice\n> +    cairo_set_operator(mContext, CAIRO_OPERATOR_SOURCE);\n\nIt might be better to use CAIRO_OPERATOR_OVER here for improved performance.\n\n@@ +588,5 @@\n> +        cairo_fill(mContext);\n> +      } else {\n> +        cairo_clip(mContext);\n> +        cairo_paint(mContext);\n> +      }\n\nAren't fill() and clip()/paint() the same?\n\n@@ +618,5 @@\n> +DrawTargetCairo::CopySurface(SourceSurface *aSurface,\n> +                             const IntRect &aSourceRect,\n> +                             const IntPoint &aDestination)\n> +{\n> +  PrepareForDrawing(mContext);\n\nThis needs an implementation\n\n@@ +677,2 @@\n>    }\n>  \n\nIt doesn't seem like this handles global alpha properly.\n\n::: ../../../mozilla-central/gfx/2d/SourceSurfaceCairo.cpp\n@@ +136,5 @@\n> +    cairo_t* ctx = cairo_create(imageSurf);\n> +    cairo_pattern_t* pat = cairo_pattern_create_for_surface(mSurface);\n> +    cairo_set_source(ctx, pat);\n> +    cairo_paint(ctx);\n> +    cairo_destroy(ctx);\n\nyou leak the pattern and could probably just use cairo_set_source_surface()", "count": 2, "author": "jmuizelaar@mozilla.com", "creator": "jmuizelaar@mozilla.com", "tags": [], "raw_text": "Review of attachment 579173:\n-----------------------------------------------------------------\n\nMostly seems reasonable.\n\n::: ../../../mozilla-central/gfx/2d/DrawTargetCairo.cpp\n@@ +247,5 @@\n>  }\n>  \n> +cairo_pattern_t*\n> +GfxPatternToCairoPattern(const Pattern& aPattern, Float aAlpha)\n> +{\n\nI'd rather this function not return NULL. That keeps the caller from needing to check for NULL\n\n@@ +265,5 @@\n> +      const SurfacePattern& pattern = static_cast<const SurfacePattern&>(aPattern);\n> +      cairo_surface_t* surf = NULL;\n> +\n> +      if (pattern.mSurface->GetType() == SURFACE_CAIRO) {\n> +        const SourceSurfaceCairo* sourcesurf = static_cast<const SourceSurfaceCairo*>(pattern.mSurface.get());\n\nsourcesurf is not a great name.\n\n@@ +267,5 @@\n> +\n> +      if (pattern.mSurface->GetType() == SURFACE_CAIRO) {\n> +        const SourceSurfaceCairo* sourcesurf = static_cast<const SourceSurfaceCairo*>(pattern.mSurface.get());\n> +        surf = sourcesurf->GetSurface();\n> +        cairo_surface_reference(surf);\n\nmight be worth adding a comment that we're referencing this to match up with image_surface_create()\n\n@@ +279,5 @@\n> +        surf = cairo_image_surface_create_for_data(sourcesurf->GetData(),\n> +                                                   GfxFormatToCairoFormat(sourcesurf->GetFormat()),\n> +                                                   sourcesurf->GetSize().width,\n> +                                                   sourcesurf->GetSize().height,\n> +                                                   sourcesurf->Stride());\n\nIt looks like this cairo_image_surface is holding an implicit reference to the DataSourceSurface. I feel like it would be better if this was explicit, or at least documented.\n\n@@ +294,5 @@\n> +    case PATTERN_LINEAR_GRADIENT:\n> +    {\n> +      const LinearGradientPattern& pattern = static_cast<const LinearGradientPattern&>(aPattern);\n> +      RefPtr<GradientStops> stops = pattern.mStops;\n> +      if (stops->GetBackendType() == BACKEND_CAIRO) {\n\nWe should perhaps assert this condition instead of silently ignoring non cairo ones.\n\n@@ +302,5 @@\n> +        const std::vector<GradientStop>& stops =\n> +          static_cast<GradientStopsCairo*>(pattern.mStops.get())->GetStops();\n> +        for (std::vector<GradientStop>::const_iterator i = stops.begin();\n> +             i != stops.end();\n> +             ++i) {\n\nThis loop would probably easier to read if you just used an index instead of an iterator. afaik that's what the other backends do.\n\n@@ +462,5 @@\n> +\n> +  SourceSurfaceCairo* sourcesurf = static_cast<SourceSurfaceCairo*>(aSurface);\n> +\n> +  Float width = aSurface->GetSize().width,\n> +        height = aSurface->GetSize().height;\n\nnot having Float here surprised me.\n\n@@ +508,5 @@\n> +\n> +  cairo_identity_matrix(mContext);\n> +  cairo_translate(mContext, aDest.x, aDest.y);\n> +\n> +  cairo_mask_surface(mContext, blursurf, aOffset.x, aOffset.y);\n\nblursurf is leaked\n\n@@ +540,5 @@\n> +    std::vector<double> dashes(aStrokeOptions.mDashLength);\n> +    for (size_t i = 0; i < aStrokeOptions.mDashLength; ++i) {\n> +      dashes[i] = aStrokeOptions.mDashPattern[i];\n> +    }\n> +    cairo_set_dash(aCtx, &dashes[0], aStrokeOptions.mDashLength,\n\nother backends use &dashes.begin() or something like that. Both are crappy.\n\n@@ +565,5 @@\n> +  if (needIntermediate) {\n> +    cairo_push_group_with_content(mContext, CAIRO_CONTENT_COLOR_ALPHA);\n> +\n> +    // Don't want operators to be applied twice\n> +    cairo_set_operator(mContext, CAIRO_OPERATOR_SOURCE);\n\nIt might be better to use CAIRO_OPERATOR_OVER here for improved performance.\n\n@@ +588,5 @@\n> +        cairo_fill(mContext);\n> +      } else {\n> +        cairo_clip(mContext);\n> +        cairo_paint(mContext);\n> +      }\n\nAren't fill() and clip()/paint() the same?\n\n@@ +618,5 @@\n> +DrawTargetCairo::CopySurface(SourceSurface *aSurface,\n> +                             const IntRect &aSourceRect,\n> +                             const IntPoint &aDestination)\n> +{\n> +  PrepareForDrawing(mContext);\n\nThis needs an implementation\n\n@@ +677,2 @@\n>    }\n>  \n\nIt doesn't seem like this handles global alpha properly.\n\n::: ../../../mozilla-central/gfx/2d/SourceSurfaceCairo.cpp\n@@ +136,5 @@\n> +    cairo_t* ctx = cairo_create(imageSurf);\n> +    cairo_pattern_t* pat = cairo_pattern_create_for_surface(mSurface);\n> +    cairo_set_source(ctx, pat);\n> +    cairo_paint(ctx);\n> +    cairo_destroy(ctx);\n\nyou leak the pattern and could probably just use cairo_set_source_surface()", "attachment_id": 579173, "time": "2011-12-14T18:21:25Z"}, {"creator": "joe@drew.ca", "is_private": false, "creation_time": "2012-01-05T17:02:19Z", "attachment_id": null, "tags": [], "count": 3, "text": "(In reply to Jeff Muizelaar [:jrmuizel] from comment #2)\n\n> @@ +677,2 @@\n> >    }\n> >  \n> \n> It doesn't seem like this handles global alpha properly.\n\nThis *should* be handled properly after the path patch, which simplifies the handling of patterns significantly.", "author": "joe@drew.ca", "bug_id": 694351, "id": 5957453, "time": "2012-01-05T17:02:19Z", "raw_text": "(In reply to Jeff Muizelaar [:jrmuizel] from comment #2)\n\n> @@ +677,2 @@\n> >    }\n> >  \n> \n> It doesn't seem like this handles global alpha properly.\n\nThis *should* be handled properly after the path patch, which simplifies the handling of patterns significantly."}, {"raw_text": "I'm morphing this into a metabug.", "time": "2012-01-05T21:29:01Z", "count": 4, "text": "I'm morphing this into a metabug.", "author": "joe@drew.ca", "id": 5958504, "bug_id": 694351, "attachment_id": null, "tags": [], "creator": "joe@drew.ca", "creation_time": "2012-01-05T21:29:01Z", "is_private": false}, {"tags": [], "time": "2012-03-22T20:41:47Z", "raw_text": "Joe, what work remains to be done here?", "attachment_id": null, "bug_id": 694351, "id": 6163619, "creation_time": "2012-03-22T20:41:47Z", "is_private": false, "creator": "roc@ocallahan.org", "text": "Joe, what work remains to be done here?", "count": 5, "author": "roc@ocallahan.org"}, {"tags": [], "time": "2012-03-22T20:46:12Z", "raw_text": "The rest of the gfx::DrawTarget API needs to be implemented (not much left), and then we need to fix all reftest failures. Probably ~2-3 weeks of work.", "attachment_id": null, "id": 6163646, "bug_id": 694351, "is_private": false, "creation_time": "2012-03-22T20:46:12Z", "creator": "joe@drew.ca", "count": 6, "text": "The rest of the gfx::DrawTarget API needs to be implemented (not much left), and then we need to fix all reftest failures. Probably ~2-3 weeks of work.", "author": "joe@drew.ca"}]}}, "comments": {}}