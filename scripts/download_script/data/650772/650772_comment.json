{"bugs": {"650772": {"comments": [{"creator": "landry@openbsd.org", "raw_text": "Currently, i have a bunch of local patches (for widget/src/qt/nsSound.cpp, widget/src/gtk2/nsBidiKeyboard.cpp, widget/src/gtk2/nsScreenManagerGtk.cpp, etc for most PR_LoadLibrary() calls removing the .X version from the lib name parameter passed as argument.\nie:\n-        gtklib = PR_LoadLibrary(\"libgtk-x11-2.0.so.0\");\n+        gtklib = PR_LoadLibrary(\"libgtk-x11-2.0.so\");\n\nThis is needed for two reasons:\n- OpenBSD doesn't install libs with symlinks like Linux and other Unices do, libfoo.so.X doesn't exist. We only install libfoo.so.X.Y, where X.Y comes from the ports tree infrastructure.\n-  There can be libfoo.so.2.0 and libfoo.so.1.1 installed at the same time, so OpenBSD's loader (ld.so) takes care of loading the correct library when dlopen() is asked for libfoo.so.\n\nOf course all my local patches for removing the .X from PR_LoadLibrary parameter are not upstreamable, so i was wondering if pr_LoadLibraryByPathname() in pr/src/linking/prlink.c could be amended (of course within #ifdef __OpenBSD__) so that anything after .so was stripped out, likely in the #if defined(XP_UNIX) block right before dlopen() call.\n\nI'd like an opinion from someone used to NSPR internal, and if that's positive i'll start working on a patch implementing that.", "text": "Currently, i have a bunch of local patches (for widget/src/qt/nsSound.cpp, widget/src/gtk2/nsBidiKeyboard.cpp, widget/src/gtk2/nsScreenManagerGtk.cpp, etc for most PR_LoadLibrary() calls removing the .X version from the lib name parameter passed as argument.\nie:\n-        gtklib = PR_LoadLibrary(\"libgtk-x11-2.0.so.0\");\n+        gtklib = PR_LoadLibrary(\"libgtk-x11-2.0.so\");\n\nThis is needed for two reasons:\n- OpenBSD doesn't install libs with symlinks like Linux and other Unices do, libfoo.so.X doesn't exist. We only install libfoo.so.X.Y, where X.Y comes from the ports tree infrastructure.\n-  There can be libfoo.so.2.0 and libfoo.so.1.1 installed at the same time, so OpenBSD's loader (ld.so) takes care of loading the correct library when dlopen() is asked for libfoo.so.\n\nOf course all my local patches for removing the .X from PR_LoadLibrary parameter are not upstreamable, so i was wondering if pr_LoadLibraryByPathname() in pr/src/linking/prlink.c could be amended (of course within #ifdef __OpenBSD__) so that anything after .so was stripped out, likely in the #if defined(XP_UNIX) block right before dlopen() call.\n\nI'd like an opinion from someone used to NSPR internal, and if that's positive i'll start working on a patch implementing that.", "count": 0, "time": "2011-04-18T13:17:10Z", "attachment_id": null, "creation_time": "2011-04-18T13:17:10Z", "tags": [], "bug_id": 650772, "is_private": false, "author": "landry@openbsd.org", "id": 5415516}, {"id": 5424922, "is_private": false, "count": 1, "author": "landry@openbsd.org", "time": "2011-04-21T20:48:56Z", "bug_id": 650772, "text": "To make a demo of the actual problem, here's a little C program and its associated result on OpenBSD (of course, the library is libXinerama.so.5.0, but the version changes over time...) - PR_LoadLibrary(\"libXinerama.so.1\") code stolen from widget/src/gtk2/nsScreenManagerGtk.cpp :\n\n$cat nsprdlopen.c                    \n#include <nspr/prtypes.h>\n#include <nspr/prlink.h>\n#include <stdio.h>\n\nint main()\n{\n\tPRLibrary *mXineramalib;\n\tmXineramalib = PR_LoadLibrary(\"libXinerama.so\");\n\tif (mXineramalib)\n\t\tprintf(\"Success!!\\n\");\n\telse printf (\"LoadLibrary failed\\n\");\n\tmXineramalib = PR_LoadLibrary(\"libXinerama.so.1\");\n\tif (mXineramalib)\n\t\tprintf(\"Success!!\\n\");\n\telse printf (\"LoadLibrary failed\\n\");\n\tmXineramalib = PR_LoadLibrary(\"libXinerama.so.5.0\");\n\tif (mXineramalib)\n\t\tprintf(\"Success!!\\n\");\n\telse printf (\"LoadLibrary failed\\n\");\n}\n$./nsprdlopen                                                                   \nSuccess!!\nLoadLibrary failed\nSuccess!!", "attachment_id": null, "tags": [], "creation_time": "2011-04-21T20:48:56Z", "creator": "landry@openbsd.org", "raw_text": "To make a demo of the actual problem, here's a little C program and its associated result on OpenBSD (of course, the library is libXinerama.so.5.0, but the version changes over time...) - PR_LoadLibrary(\"libXinerama.so.1\") code stolen from widget/src/gtk2/nsScreenManagerGtk.cpp :\n\n$cat nsprdlopen.c                    \n#include <nspr/prtypes.h>\n#include <nspr/prlink.h>\n#include <stdio.h>\n\nint main()\n{\n\tPRLibrary *mXineramalib;\n\tmXineramalib = PR_LoadLibrary(\"libXinerama.so\");\n\tif (mXineramalib)\n\t\tprintf(\"Success!!\\n\");\n\telse printf (\"LoadLibrary failed\\n\");\n\tmXineramalib = PR_LoadLibrary(\"libXinerama.so.1\");\n\tif (mXineramalib)\n\t\tprintf(\"Success!!\\n\");\n\telse printf (\"LoadLibrary failed\\n\");\n\tmXineramalib = PR_LoadLibrary(\"libXinerama.so.5.0\");\n\tif (mXineramalib)\n\t\tprintf(\"Success!!\\n\");\n\telse printf (\"LoadLibrary failed\\n\");\n}\n$./nsprdlopen                                                                   \nSuccess!!\nLoadLibrary failed\nSuccess!!"}, {"raw_text": "We should fix the callers of PR_LoadLibrary that need this behavior.\nPR_LoadLibrary should faithfully pass its pathname argument to\ndlopen.\n\nIn your nsprdlopen.c test program, it seems that you should test\n\"libXinerama.so.5\" instead of \"libXinerama.so.1\" in the second\nPR_LoadLibrary call.\n\nIt seems that if OpenBSD's loader (ld.so) is willing  to handle\na libfoo.so argument intelligently, it should also be willing\nto handle a libfoo.so.X argument intelligently to make porting\nto OpenBSD easier.", "creator": "wtc@google.com", "text": "We should fix the callers of PR_LoadLibrary that need this behavior.\nPR_LoadLibrary should faithfully pass its pathname argument to\ndlopen.\n\nIn your nsprdlopen.c test program, it seems that you should test\n\"libXinerama.so.5\" instead of \"libXinerama.so.1\" in the second\nPR_LoadLibrary call.\n\nIt seems that if OpenBSD's loader (ld.so) is willing  to handle\na libfoo.so argument intelligently, it should also be willing\nto handle a libfoo.so.X argument intelligently to make porting\nto OpenBSD easier.", "time": "2011-04-21T21:01:02Z", "count": 2, "tags": [], "creation_time": "2011-04-21T21:01:02Z", "attachment_id": null, "bug_id": 650772, "author": "wtc@google.com", "is_private": false, "id": 5424962}, {"count": 3, "time": "2011-04-22T06:45:55Z", "creator": "landry@openbsd.org", "raw_text": "(In reply to comment #2)\n> We should fix the callers of PR_LoadLibrary that need this behavior.\n> PR_LoadLibrary should faithfully pass its pathname argument to\n> dlopen.\n\nThat looked easier to me to 'fix' PR_LoadLibrary() only in one place, instead of fixing the multiple callers, and also the callers that might be added in the future. As of now, theres ~15 callers (in OpenBSD, 11 of them are patched to remove the .X) with a fixed version number which doesn't match OpenBSD, and lots of others where the libSpec comes from a variable.\n\n> In your nsprdlopen.c test program, it seems that you should test\n> \"libXinerama.so.5\" instead of \"libXinerama.so.1\" in the second\n> PR_LoadLibrary call.\n\nIf i try to load libXinerama.so.5, it works. But the current code in nsScreenManagerGtk.cpp tries to load libXinerama.so.1, which doesnt exist.\n\nProblem is, the .X changes over time when libraries are updated, be it for Xinerama, gtk, gnome-2, Xss, etc.. and you don't control it. It doesn't make sense to track the 'real version' in OpenBSD, so falling back to just looking for .so without version looks simpler.\n\n> It seems that if OpenBSD's loader (ld.so) is willing  to handle\n> a libfoo.so argument intelligently, it should also be willing\n> to handle a libfoo.so.X argument intelligently to make porting\n> to OpenBSD easier.\n\nWhat do you suggest ?\nFixing all callers to do\n+#ifdef __OpenBSD__\n+PR_LoadLibrary(\"libfoo.so\")\n+#else\nPR_LoadLibrary(\"libfoo.so.X\")\n+#endif\n\nI find that rather ugly. stripping whatever is after .so in the argument passed to PR_LoadLibrary() looks simpler to me.\n\nOr maybe right after the current dlopen call(), in a #ifdef __OpenBSD__ block, if dlopen() failed strip the libSpec, and retry dlopen() ?", "text": "(In reply to comment #2)\n> We should fix the callers of PR_LoadLibrary that need this behavior.\n> PR_LoadLibrary should faithfully pass its pathname argument to\n> dlopen.\n\nThat looked easier to me to 'fix' PR_LoadLibrary() only in one place, instead of fixing the multiple callers, and also the callers that might be added in the future. As of now, theres ~15 callers (in OpenBSD, 11 of them are patched to remove the .X) with a fixed version number which doesn't match OpenBSD, and lots of others where the libSpec comes from a variable.\n\n> In your nsprdlopen.c test program, it seems that you should test\n> \"libXinerama.so.5\" instead of \"libXinerama.so.1\" in the second\n> PR_LoadLibrary call.\n\nIf i try to load libXinerama.so.5, it works. But the current code in nsScreenManagerGtk.cpp tries to load libXinerama.so.1, which doesnt exist.\n\nProblem is, the .X changes over time when libraries are updated, be it for Xinerama, gtk, gnome-2, Xss, etc.. and you don't control it. It doesn't make sense to track the 'real version' in OpenBSD, so falling back to just looking for .so without version looks simpler.\n\n> It seems that if OpenBSD's loader (ld.so) is willing  to handle\n> a libfoo.so argument intelligently, it should also be willing\n> to handle a libfoo.so.X argument intelligently to make porting\n> to OpenBSD easier.\n\nWhat do you suggest ?\nFixing all callers to do\n+#ifdef __OpenBSD__\n+PR_LoadLibrary(\"libfoo.so\")\n+#else\nPR_LoadLibrary(\"libfoo.so.X\")\n+#endif\n\nI find that rather ugly. stripping whatever is after .so in the argument passed to PR_LoadLibrary() looks simpler to me.\n\nOr maybe right after the current dlopen call(), in a #ifdef __OpenBSD__ block, if dlopen() failed strip the libSpec, and retry dlopen() ?", "is_private": false, "author": "landry@openbsd.org", "id": 5425795, "attachment_id": null, "creation_time": "2011-04-22T06:45:55Z", "tags": [], "bug_id": 650772}, {"tags": [], "creation_time": "2011-04-22T18:32:50Z", "attachment_id": null, "bug_id": 650772, "is_private": false, "author": "wtc@google.com", "id": 5426676, "raw_text": "Can you cd into the directory where libXinerama.so.5.0 is installed, and\nrun the command\n    ls -l libXinerama.so*\n?\n\nWhat is the output?", "creator": "wtc@google.com", "text": "Can you cd into the directory where libXinerama.so.5.0 is installed, and\nrun the command\n    ls -l libXinerama.so*\n?\n\nWhat is the output?", "time": "2011-04-22T18:32:50Z", "count": 4}, {"bug_id": 650772, "text": "Seems i haven't made myself clear enough. For each library installed on the system, there's libfoo.a, libfoo.la, and libfoo.so.X.Y, where you can't know in advance X.Y since it changes over time when libs are updated (ie major bumped when functions are removed/abi changes, minor bumped when functions are added). The loader is smart in the sense that it will open libfoo.so.X.Y if asked for libfoo.so or libfoo.so.X.\n\nAnd there's no symlink with so.X -> so.X.Y.Z between libs like linux does.\n\n/usr/X11R6/lib/libXinerama.a\n/usr/X11R6/lib/libXinerama.la\n/usr/X11R6/lib/libXinerama.so.5.0\n\n/usr/local/lib/libgtk-x11-2.0.a\n/usr/local/lib/libgtk-x11-2.0.la\n/usr/local/lib/libgtk-x11-2.0.so.2200.0", "attachment_id": null, "tags": [], "creation_time": "2011-04-23T07:36:03Z", "creator": "landry@openbsd.org", "raw_text": "Seems i haven't made myself clear enough. For each library installed on the system, there's libfoo.a, libfoo.la, and libfoo.so.X.Y, where you can't know in advance X.Y since it changes over time when libs are updated (ie major bumped when functions are removed/abi changes, minor bumped when functions are added). The loader is smart in the sense that it will open libfoo.so.X.Y if asked for libfoo.so or libfoo.so.X.\n\nAnd there's no symlink with so.X -> so.X.Y.Z between libs like linux does.\n\n/usr/X11R6/lib/libXinerama.a\n/usr/X11R6/lib/libXinerama.la\n/usr/X11R6/lib/libXinerama.so.5.0\n\n/usr/local/lib/libgtk-x11-2.0.a\n/usr/local/lib/libgtk-x11-2.0.la\n/usr/local/lib/libgtk-x11-2.0.so.2200.0", "id": 5427775, "is_private": false, "count": 5, "time": "2011-04-23T07:36:03Z", "author": "landry@openbsd.org"}, {"tags": [], "creation_time": "2011-05-04T20:30:09Z", "attachment_id": 530126, "raw_text": "Here's a first version of a patch implementing this. If the first dlopen() fails, we strip major.minor from name, and retry dlopen() with the stripped name.\n\nWith that patch, PR_LoadLibrary(\"libXinerama.so.1\") is now successful, even if only libXinerama.so.5.0 is present on the system. The previous testcase coverage works.\n\nWhat's your opinion ?", "creator": "landry@openbsd.org", "bug_id": 650772, "text": "Created attachment 530126\nIf dlopen() fails on OpenBSD retry with major.minor stripped after .so\n\nHere's a first version of a patch implementing this. If the first dlopen() fails, we strip major.minor from name, and retry dlopen() with the stripped name.\n\nWith that patch, PR_LoadLibrary(\"libXinerama.so.1\") is now successful, even if only libXinerama.so.5.0 is present on the system. The previous testcase coverage works.\n\nWhat's your opinion ?", "is_private": false, "author": "landry@openbsd.org", "time": "2011-05-04T20:30:09Z", "count": 6, "id": 5449350}, {"attachment_id": 530129, "tags": [], "creation_time": "2011-05-04T20:35:54Z", "bug_id": 650772, "is_private": false, "author": "landry@openbsd.org", "id": 5449370, "creator": "landry@openbsd.org", "raw_text": "Better patch putting the strncpy outside of the if(!h) block, so that we ensure sname is set before unconditionally being assigned later to lm->name.", "text": "Created attachment 530129\nIf dlopen() fails on OpenBSD retry with major.minor stripped after .so\n\nBetter patch putting the strncpy outside of the if(!h) block, so that we ensure sname is set before unconditionally being assigned later to lm->name.", "count": 7, "time": "2011-05-04T20:35:54Z"}, {"id": 5450409, "author": "pka@datatech.ru", "time": "2011-05-05T08:13:00Z", "count": 8, "is_private": false, "text": "Landry, there is something wrong with your approach.\n\nWhen \"libfoo.so.2.0 and libfoo.so.1.1 installed at the same time\", which one will be loaded by [dlopen(libfoo.so)] ?\n\nDynloader can't choose, that's application responsibility. Application must supply major version, because major change means loss of backward compatibility.\n\nIt addition, with your approach you have to patch all applications which do versioned dynamic library loading, not only NSPR/Mozilla. Have you ?", "bug_id": 650772, "raw_text": "Landry, there is something wrong with your approach.\n\nWhen \"libfoo.so.2.0 and libfoo.so.1.1 installed at the same time\", which one will be loaded by [dlopen(libfoo.so)] ?\n\nDynloader can't choose, that's application responsibility. Application must supply major version, because major change means loss of backward compatibility.\n\nIt addition, with your approach you have to patch all applications which do versioned dynamic library loading, not only NSPR/Mozilla. Have you ?", "creator": "pka@datatech.ru", "tags": [], "creation_time": "2011-05-05T08:13:00Z", "attachment_id": null}, {"is_private": false, "count": 9, "time": "2011-05-05T08:38:46Z", "author": "landry@openbsd.org", "id": 5450438, "attachment_id": null, "tags": [], "creation_time": "2011-05-05T08:38:46Z", "creator": "landry@openbsd.org", "raw_text": "(In reply to comment #8)\n> Landry, there is something wrong with your approach.\n> \n> When \"libfoo.so.2.0 and libfoo.so.1.1 installed at the same time\", which one\n> will be loaded by [dlopen(libfoo.so)] ?\n\nI'm not the one who wrote ld.so, but from my understanding dlopen(\"libfoo.so\") is smart in the sense that it opens the lib with the highest major.minor, which is what the user generally wants.\n\nFor a binary, ld.so loads the library registered in the binary's dependencies (objdump -p | grep NEEDED)\n\nIt's quite rare that several versions of the same lib are present, that's only when a binary not yet upgraded by the pkg tools still needs the 'old' version registered in its dependencies. In the case of dlopen(), that's different.\n\nSee for reference : http://www.openbsd.org/cgi-bin/man.cgi?query=dlopen\nand http://www.openbsd.org/cgi-bin/man.cgi?query=ld.so\n\n> Dynloader can't choose, that's application responsibility. Application must\n> supply major version, because major change means loss of backward\n> compatibility.\n\nThat's why on OpenBSD, major.minor is overridden and controlled by the ports infrastructure. So whatever happens, the approach of 'supply the major version of the lib we want to dlopen()' in PR_LoadLibrary() won't work.\n\n> It addition, with your approach you have to patch all applications which do\n> versioned dynamic library loading, not only NSPR/Mozilla. Have you ?\n\nThat's what the infrastructure of the portstree does (ie we have our own libtool which takes care of overriding the versionning with the one set in the portstree), and there are some patches in it to fix the rare offending dlopen() calls.\n\nFor example, i have 7 or 8 patches in each of the mozilla ports, which would go away if PR_LoadLibrary() is 'fixed' by the patch.", "bug_id": 650772, "text": "(In reply to comment #8)\n> Landry, there is something wrong with your approach.\n> \n> When \"libfoo.so.2.0 and libfoo.so.1.1 installed at the same time\", which one\n> will be loaded by [dlopen(libfoo.so)] ?\n\nI'm not the one who wrote ld.so, but from my understanding dlopen(\"libfoo.so\") is smart in the sense that it opens the lib with the highest major.minor, which is what the user generally wants.\n\nFor a binary, ld.so loads the library registered in the binary's dependencies (objdump -p | grep NEEDED)\n\nIt's quite rare that several versions of the same lib are present, that's only when a binary not yet upgraded by the pkg tools still needs the 'old' version registered in its dependencies. In the case of dlopen(), that's different.\n\nSee for reference : http://www.openbsd.org/cgi-bin/man.cgi?query=dlopen\nand http://www.openbsd.org/cgi-bin/man.cgi?query=ld.so\n\n> Dynloader can't choose, that's application responsibility. Application must\n> supply major version, because major change means loss of backward\n> compatibility.\n\nThat's why on OpenBSD, major.minor is overridden and controlled by the ports infrastructure. So whatever happens, the approach of 'supply the major version of the lib we want to dlopen()' in PR_LoadLibrary() won't work.\n\n> It addition, with your approach you have to patch all applications which do\n> versioned dynamic library loading, not only NSPR/Mozilla. Have you ?\n\nThat's what the infrastructure of the portstree does (ie we have our own libtool which takes care of overriding the versionning with the one set in the portstree), and there are some patches in it to fix the rare offending dlopen() calls.\n\nFor example, i have 7 or 8 patches in each of the mozilla ports, which would go away if PR_LoadLibrary() is 'fixed' by the patch."}, {"id": 5450480, "count": 10, "time": "2011-05-05T09:35:31Z", "author": "pka@datatech.ru", "is_private": false, "text": "(In reply to comment #9)\n> (In reply to comment #8)\n> > When \"libfoo.so.2.0 and libfoo.so.1.1 installed at the same time\", which one\n> > will be loaded by [dlopen(libfoo.so)] ?\n> \n> I'm not the one who wrote ld.so, but from my understanding dlopen(\"libfoo.so\")\n> is smart in the sense that it opens the lib with the highest major.minor, which\n> is what the user generally wants.\n> \n> For a binary, ld.so loads the library registered in the binary's dependencies\n> (objdump -p | grep NEEDED)\n\nYou are confusing load-time and run-time dynamic linking.\n\n  1) load-time: object deps are recorded in the binary (objdump ...), resolved during object load. No need not to dlopen() at run-time.\n\n  2) run-time: application invokes dlopen(libfoo). In this case, object binary has no records about foo (otherwise, foo would already be loaded). Only application knows (in it's mind), which version of foo it wants.\n\n> ... dlopen(\"libfoo.so\") ... opens the lib with the highest major.minor\n\nIncorrect. If application is designed to work with v1.0, and you put v2.0 under, the application will most likely crash.\n\n> It's quite rare that several versions of the same lib are present, that's only\n> when a binary not yet upgraded by the pkg tools still needs the 'old' version\n> registered in its dependencies.\n\nIncorrect. Some applications will upgrade to the foo.2.0 faster, some - slower, some - will not upgrade at all, staying with v1.0. You can not force all applications in the system to use the single version of the library.\n\nIn addition, there are closed-source applications, which you can't even patch and recompile. What will you do, if such application [dlopen(libfoo.so.1)] ?", "bug_id": 650772, "creator": "pka@datatech.ru", "raw_text": "(In reply to comment #9)\n> (In reply to comment #8)\n> > When \"libfoo.so.2.0 and libfoo.so.1.1 installed at the same time\", which one\n> > will be loaded by [dlopen(libfoo.so)] ?\n> \n> I'm not the one who wrote ld.so, but from my understanding dlopen(\"libfoo.so\")\n> is smart in the sense that it opens the lib with the highest major.minor, which\n> is what the user generally wants.\n> \n> For a binary, ld.so loads the library registered in the binary's dependencies\n> (objdump -p | grep NEEDED)\n\nYou are confusing load-time and run-time dynamic linking.\n\n  1) load-time: object deps are recorded in the binary (objdump ...), resolved during object load. No need not to dlopen() at run-time.\n\n  2) run-time: application invokes dlopen(libfoo). In this case, object binary has no records about foo (otherwise, foo would already be loaded). Only application knows (in it's mind), which version of foo it wants.\n\n> ... dlopen(\"libfoo.so\") ... opens the lib with the highest major.minor\n\nIncorrect. If application is designed to work with v1.0, and you put v2.0 under, the application will most likely crash.\n\n> It's quite rare that several versions of the same lib are present, that's only\n> when a binary not yet upgraded by the pkg tools still needs the 'old' version\n> registered in its dependencies.\n\nIncorrect. Some applications will upgrade to the foo.2.0 faster, some - slower, some - will not upgrade at all, staying with v1.0. You can not force all applications in the system to use the single version of the library.\n\nIn addition, there are closed-source applications, which you can't even patch and recompile. What will you do, if such application [dlopen(libfoo.so.1)] ?", "attachment_id": null, "creation_time": "2011-05-05T09:35:31Z", "tags": []}, {"count": 11, "time": "2011-05-05T11:32:14Z", "creator": "landry@openbsd.org", "raw_text": "(In reply to comment #10)\n> (In reply to comment #9)\n> > (In reply to comment #8)\n> > > When \"libfoo.so.2.0 and libfoo.so.1.1 installed at the same time\", which one\n> > > will be loaded by [dlopen(libfoo.so)] ?\n> > \n> > I'm not the one who wrote ld.so, but from my understanding dlopen(\"libfoo.so\")\n> > is smart in the sense that it opens the lib with the highest major.minor, which\n> > is what the user generally wants.\n> > \n> > For a binary, ld.so loads the library registered in the binary's dependencies\n> > (objdump -p | grep NEEDED)\n> \n> You are confusing load-time and run-time dynamic linking.\n\nI know the difference, thanks.\n\n>   1) load-time: object deps are recorded in the binary (objdump ...), resolved\n> during object load. No need not to dlopen() at run-time.\n> \n>   2) run-time: application invokes dlopen(libfoo). In this case, object binary\n> has no records about foo (otherwise, foo would already be loaded). Only\n> application knows (in it's mind), which version of foo it wants.\n\nAnd in that particular case, it asks for a version of foo which will never match what is currently installed, since the versions are different on OpenBSD.\n\n> > ... dlopen(\"libfoo.so\") ... opens the lib with the highest major.minor\n> \n> Incorrect. If application is designed to work with v1.0, and you put v2.0\n> under, the application will most likely crash.\n> \n> > It's quite rare that several versions of the same lib are present, that's only\n> > when a binary not yet upgraded by the pkg tools still needs the 'old' version\n> > registered in its dependencies.\n> \n> Incorrect. Some applications will upgrade to the foo.2.0 faster, some - slower,\n> some - will not upgrade at all, staying with v1.0. You can not force all\n> applications in the system to use the single version of the library.\n\nThat's what we do in OpenBSD, ie the portstree controls/adapts ports when needed, and generally there's only a single version of the lib installed. And it works fine so far.\n\n> In addition, there are closed-source applications, which you can't even patch\n> and recompile. What will you do, if such application [dlopen(libfoo.so.1)] ?\n\nClosed source applications providing binaries for OpenBSD ? gimme a break.. like if adobe was going to provide a binary flash player for the bsds.\n\nWhatever does dlopen(libfoo.so.X) will break anyway, since the libfoo.so.X they expect _doesn't exist_, but is rather libfoo.so.Y.Z where Y.Z is a moving target (ie bumped when API changes).\n\nAs of now, the model of asking for a particular version of libfoo.so works on other OSes (with the upstream versionning kept, and the symlink maze), but not on OpenBSD. Like it or not, things are this way, that's a particularity, and we have to live with it, hence actually patching all callers of PR_LoadLibrary().\n\nWhen opening that issue, my only goal was to simplify the patching currently done to have things working ootb. I'm not giving an opinion on different models, i only want to ease maintenance of mozilla ports on OpenBSD and push my patches upstream in a portable way.", "text": "(In reply to comment #10)\n> (In reply to comment #9)\n> > (In reply to comment #8)\n> > > When \"libfoo.so.2.0 and libfoo.so.1.1 installed at the same time\", which one\n> > > will be loaded by [dlopen(libfoo.so)] ?\n> > \n> > I'm not the one who wrote ld.so, but from my understanding dlopen(\"libfoo.so\")\n> > is smart in the sense that it opens the lib with the highest major.minor, which\n> > is what the user generally wants.\n> > \n> > For a binary, ld.so loads the library registered in the binary's dependencies\n> > (objdump -p | grep NEEDED)\n> \n> You are confusing load-time and run-time dynamic linking.\n\nI know the difference, thanks.\n\n>   1) load-time: object deps are recorded in the binary (objdump ...), resolved\n> during object load. No need not to dlopen() at run-time.\n> \n>   2) run-time: application invokes dlopen(libfoo). In this case, object binary\n> has no records about foo (otherwise, foo would already be loaded). Only\n> application knows (in it's mind), which version of foo it wants.\n\nAnd in that particular case, it asks for a version of foo which will never match what is currently installed, since the versions are different on OpenBSD.\n\n> > ... dlopen(\"libfoo.so\") ... opens the lib with the highest major.minor\n> \n> Incorrect. If application is designed to work with v1.0, and you put v2.0\n> under, the application will most likely crash.\n> \n> > It's quite rare that several versions of the same lib are present, that's only\n> > when a binary not yet upgraded by the pkg tools still needs the 'old' version\n> > registered in its dependencies.\n> \n> Incorrect. Some applications will upgrade to the foo.2.0 faster, some - slower,\n> some - will not upgrade at all, staying with v1.0. You can not force all\n> applications in the system to use the single version of the library.\n\nThat's what we do in OpenBSD, ie the portstree controls/adapts ports when needed, and generally there's only a single version of the lib installed. And it works fine so far.\n\n> In addition, there are closed-source applications, which you can't even patch\n> and recompile. What will you do, if such application [dlopen(libfoo.so.1)] ?\n\nClosed source applications providing binaries for OpenBSD ? gimme a break.. like if adobe was going to provide a binary flash player for the bsds.\n\nWhatever does dlopen(libfoo.so.X) will break anyway, since the libfoo.so.X they expect _doesn't exist_, but is rather libfoo.so.Y.Z where Y.Z is a moving target (ie bumped when API changes).\n\nAs of now, the model of asking for a particular version of libfoo.so works on other OSes (with the upstream versionning kept, and the symlink maze), but not on OpenBSD. Like it or not, things are this way, that's a particularity, and we have to live with it, hence actually patching all callers of PR_LoadLibrary().\n\nWhen opening that issue, my only goal was to simplify the patching currently done to have things working ootb. I'm not giving an opinion on different models, i only want to ease maintenance of mozilla ports on OpenBSD and push my patches upstream in a portable way.", "author": "landry@openbsd.org", "is_private": false, "id": 5450591, "attachment_id": null, "tags": [], "creation_time": "2011-05-05T11:32:14Z", "bug_id": 650772}, {"count": 12, "time": "2011-05-06T19:59:15Z", "creator": "wtc@google.com", "raw_text": "Landry: thank you for the patch and the explanation in comment 5.\n\nThe correct fix is for an application to load libXinerama.so.5\non OpenBSD.  It is wrong for Mozilla to assume that the file\nname is libXinerama.so.1 on all Unix platforms:\nhttp://mxr.mozilla.org/mozilla-central/source/widget/src/gtk2/nsScreenManagerGtk.cpp#177\n\nIt seems that the OpenBSD libXinerama.so package owner created\na porting problem for OpenBSD by using a different library major\nversion from other Unix platforms (5 vs. 1).", "text": "Comment on attachment 530129\nIf dlopen() fails on OpenBSD retry with major.minor stripped after .so\n\nLandry: thank you for the patch and the explanation in comment 5.\n\nThe correct fix is for an application to load libXinerama.so.5\non OpenBSD.  It is wrong for Mozilla to assume that the file\nname is libXinerama.so.1 on all Unix platforms:\nhttp://mxr.mozilla.org/mozilla-central/source/widget/src/gtk2/nsScreenManagerGtk.cpp#177\n\nIt seems that the OpenBSD libXinerama.so package owner created\na porting problem for OpenBSD by using a different library major\nversion from other Unix platforms (5 vs. 1).", "is_private": false, "author": "wtc@google.com", "id": 5454223, "attachment_id": 530129, "creation_time": "2011-05-06T19:59:15Z", "tags": [], "bug_id": 650772}, {"text": "(In reply to comment #12)\n> Comment on attachment 530129 [details] [review]\n> If dlopen() fails on OpenBSD retry with major.minor stripped after .so\n> \n> Landry: thank you for the patch and the explanation in comment 5.\n> \n> The correct fix is for an application to load libXinerama.so.5\n> on OpenBSD.  It is wrong for Mozilla to assume that the file\n> name is libXinerama.so.1 on all Unix platforms:\n> http://mxr.mozilla.org/mozilla-central/source/widget/src/gtk2/\n> nsScreenManagerGtk.cpp#177\n\nThe issue with that is that we would need to fix ALL PR_LoadLibrary() callers, and that EVERYTIME the major changes. It doesn't happen often for libXinerama, but happens quite often for some libs (ie happens at each gtk 'major' update for example). I wouldnt want to have to reopen a bug report each time a library loaded by mozilla changes in the ports-tree.\n\n> It seems that the OpenBSD libXinerama.so package owner created\n> a porting problem for OpenBSD by using a different library major\n> version from other Unix platforms (5 vs. 1).\n\nIt's not a package, it's in the basesystem. OpenBSD follows strict rules regarding ABI/API changes and library versionning, other oses don't follow the same rules.", "creator": "landry@openbsd.org", "raw_text": "(In reply to comment #12)\n> Comment on attachment 530129 [details] [review]\n> If dlopen() fails on OpenBSD retry with major.minor stripped after .so\n> \n> Landry: thank you for the patch and the explanation in comment 5.\n> \n> The correct fix is for an application to load libXinerama.so.5\n> on OpenBSD.  It is wrong for Mozilla to assume that the file\n> name is libXinerama.so.1 on all Unix platforms:\n> http://mxr.mozilla.org/mozilla-central/source/widget/src/gtk2/\n> nsScreenManagerGtk.cpp#177\n\nThe issue with that is that we would need to fix ALL PR_LoadLibrary() callers, and that EVERYTIME the major changes. It doesn't happen often for libXinerama, but happens quite often for some libs (ie happens at each gtk 'major' update for example). I wouldnt want to have to reopen a bug report each time a library loaded by mozilla changes in the ports-tree.\n\n> It seems that the OpenBSD libXinerama.so package owner created\n> a porting problem for OpenBSD by using a different library major\n> version from other Unix platforms (5 vs. 1).\n\nIt's not a package, it's in the basesystem. OpenBSD follows strict rules regarding ABI/API changes and library versionning, other oses don't follow the same rules.", "count": 13, "time": "2011-05-07T09:39:00Z", "bug_id": 650772, "attachment_id": null, "tags": [], "creation_time": "2011-05-07T09:39:00Z", "id": 5455128, "author": "landry@openbsd.org", "is_private": false}, {"is_private": false, "author": "landry@openbsd.org", "id": 5542275, "attachment_id": null, "tags": [], "creation_time": "2011-06-20T11:41:41Z", "bug_id": 650772, "count": 14, "time": "2011-06-20T11:41:41Z", "creator": "landry@openbsd.org", "raw_text": "So, since all sane and simple approaches were rejected, i guess it's time to create a new bug report patching all offending PR_LoadLibrary() callers ?\n\nIe for example in gfx/thebes/GLContextProviderGLX.cpp :\n\n+#ifdef __OpenBSD__\n+        const char *libGLfilename = \"libGL.so\";\n+#else\n         const char *libGLfilename = \"libGL.so.1\";\n+#endif\n\nThat's fugly, but since it seems to be what you want.... and NO, i won't add a major number, since it's prone to change at each library update.", "text": "So, since all sane and simple approaches were rejected, i guess it's time to create a new bug report patching all offending PR_LoadLibrary() callers ?\n\nIe for example in gfx/thebes/GLContextProviderGLX.cpp :\n\n+#ifdef __OpenBSD__\n+        const char *libGLfilename = \"libGL.so\";\n+#else\n         const char *libGLfilename = \"libGL.so.1\";\n+#endif\n\nThat's fugly, but since it seems to be what you want.... and NO, i won't add a major number, since it's prone to change at each library update."}, {"count": 15, "time": "2011-09-21T10:47:34Z", "creator": "landry@openbsd.org", "raw_text": "Ok, i've discussed a bit more this issue with our developers, and our dlopen works in two cases :\n- give it the full path of the lib : \"/usr/X11R6/lib/libGL.so.12.0\", where of course 12.0 is not guaranteed over time, and doesn't necessarly mean the same thing as libGL.so.1 on linux.\n- give it \"libGL.so\" only, and it will figure out which library to open.\n\nIf you give it libGL.so.1, it won't find it and error out.\n\nFixing all the callers of PR_LoadLibrary() is a real hassle, and all the OpenBSD developers i've talked to about that issue agree with me that given our dlopen() works, the best way to fix that is in PR_LoadLibrary itself, striping what's passed after .so. Wan-Teh, could you please reconsider your opinion on the patch ? I've started fixing the callers, and so far the patches (bug #667325 and bug #687320) were ignored/waiting in bugzilla. Given that the patch only touches OpenBSD, there can't be a regression for other oses, and only improvements for us.", "text": "Ok, i've discussed a bit more this issue with our developers, and our dlopen works in two cases :\n- give it the full path of the lib : \"/usr/X11R6/lib/libGL.so.12.0\", where of course 12.0 is not guaranteed over time, and doesn't necessarly mean the same thing as libGL.so.1 on linux.\n- give it \"libGL.so\" only, and it will figure out which library to open.\n\nIf you give it libGL.so.1, it won't find it and error out.\n\nFixing all the callers of PR_LoadLibrary() is a real hassle, and all the OpenBSD developers i've talked to about that issue agree with me that given our dlopen() works, the best way to fix that is in PR_LoadLibrary itself, striping what's passed after .so. Wan-Teh, could you please reconsider your opinion on the patch ? I've started fixing the callers, and so far the patches (bug #667325 and bug #687320) were ignored/waiting in bugzilla. Given that the patch only touches OpenBSD, there can't be a regression for other oses, and only improvements for us.", "is_private": false, "author": "landry@openbsd.org", "id": 5727814, "attachment_id": null, "tags": [], "creation_time": "2011-09-21T10:47:34Z", "bug_id": 650772}, {"time": "2011-09-21T13:09:33Z", "count": 16, "text": "Comment on attachment 530129\nIf dlopen() fails on OpenBSD retry with major.minor stripped after .so\n\nAsking for ted's feedback, based on suggestions from other folks..", "raw_text": "Asking for ted's feedback, based on suggestions from other folks..", "creator": "landry@openbsd.org", "id": 5727964, "author": "landry@openbsd.org", "is_private": false, "bug_id": 650772, "creation_time": "2011-09-21T13:09:33Z", "tags": [], "attachment_id": 530129}, {"raw_text": "Landry: I am sorry I cannot take this patch.\n\nPR_LoadLibrary is the cross-platform abstraction of dlopen.\nYour asking me to change PR_LoadLibrary would be like my asking\nthe dlopen maintainers to change dlopen.  NSPR is not used\nby just Mozilla products.  Other NSPR clients may not want\nthis automatic retry behavior.  I am sure I would get the\nsame answer from the dlopen maintainers.", "creator": "wtc@google.com", "text": "Comment on attachment 530129\nIf dlopen() fails on OpenBSD retry with major.minor stripped after .so\n\nLandry: I am sorry I cannot take this patch.\n\nPR_LoadLibrary is the cross-platform abstraction of dlopen.\nYour asking me to change PR_LoadLibrary would be like my asking\nthe dlopen maintainers to change dlopen.  NSPR is not used\nby just Mozilla products.  Other NSPR clients may not want\nthis automatic retry behavior.  I am sure I would get the\nsame answer from the dlopen maintainers.", "time": "2011-09-22T00:20:45Z", "count": 17, "creation_time": "2011-09-22T00:20:45Z", "tags": [], "attachment_id": 530129, "bug_id": 650772, "is_private": false, "author": "wtc@google.com", "id": 5729771}, {"creation_time": "2011-09-22T00:44:08Z", "tags": [], "attachment_id": null, "bug_id": 650772, "author": "benjamin@smedbergs.us", "is_private": false, "id": 5729814, "raw_text": "We should make this WONTFIX, I believe. I agree that magic retry behavior in NSPR is not the right solution, and the calling code should be modified.", "creator": "benjamin@smedbergs.us", "text": "We should make this WONTFIX, I believe. I agree that magic retry behavior in NSPR is not the right solution, and the calling code should be modified.", "time": "2011-09-22T00:44:08Z", "count": 18}, {"id": 5730339, "is_private": false, "count": 19, "author": "landry@openbsd.org", "time": "2011-09-22T09:42:33Z", "bug_id": 650772, "text": "Your call.(In reply to Wan-Teh Chang from comment #17)\n> Comment on attachment 530129\n> If dlopen() fails on OpenBSD retry with major.minor stripped after .so\n> \n> Landry: I am sorry I cannot take this patch.\n> \n> PR_LoadLibrary is the cross-platform abstraction of dlopen.\n> Your asking me to change PR_LoadLibrary would be like my asking\n> the dlopen maintainers to change dlopen.  NSPR is not used\n> by just Mozilla products.  Other NSPR clients may not want\n> this automatic retry behavior.  I am sure I would get the\n> same answer from the dlopen maintainers.\n\nIn our case, the dlopen maintainers on OpenBSD agreed that fixing that in PR_LoadLibrary was the way to go. Oh well, your call.", "attachment_id": null, "tags": [], "creation_time": "2011-09-22T09:42:33Z", "creator": "landry@openbsd.org", "raw_text": "Your call.(In reply to Wan-Teh Chang from comment #17)\n> Comment on attachment 530129\n> If dlopen() fails on OpenBSD retry with major.minor stripped after .so\n> \n> Landry: I am sorry I cannot take this patch.\n> \n> PR_LoadLibrary is the cross-platform abstraction of dlopen.\n> Your asking me to change PR_LoadLibrary would be like my asking\n> the dlopen maintainers to change dlopen.  NSPR is not used\n> by just Mozilla products.  Other NSPR clients may not want\n> this automatic retry behavior.  I am sure I would get the\n> same answer from the dlopen maintainers.\n\nIn our case, the dlopen maintainers on OpenBSD agreed that fixing that in PR_LoadLibrary was the way to go. Oh well, your call."}, {"bug_id": 650772, "text": "(In reply to Benjamin Smedberg  [:bsmedberg] from comment #18)\n> We should make this WONTFIX, I believe. I agree that magic retry behavior in\n> NSPR is not the right solution, and the calling code should be modified.\n\nWell.. so we should sprinkle ugly #ifdef __OpenBSD__ around all the PR_LoadLibrary() callers ? don't you agree this is just looking plain wrong ? And given the lack of feedback i had in bug #667325 and bug #687320, do you realize how this is a painful task for me ?", "attachment_id": null, "creation_time": "2011-09-22T09:47:44Z", "tags": [], "creator": "landry@openbsd.org", "raw_text": "(In reply to Benjamin Smedberg  [:bsmedberg] from comment #18)\n> We should make this WONTFIX, I believe. I agree that magic retry behavior in\n> NSPR is not the right solution, and the calling code should be modified.\n\nWell.. so we should sprinkle ugly #ifdef __OpenBSD__ around all the PR_LoadLibrary() callers ? don't you agree this is just looking plain wrong ? And given the lack of feedback i had in bug #667325 and bug #687320, do you realize how this is a painful task for me ?", "id": 5730344, "is_private": false, "count": 20, "time": "2011-09-22T09:47:44Z", "author": "landry@openbsd.org"}, {"count": 21, "time": "2011-09-23T14:07:15Z", "text": "Comment on attachment 530129\nIf dlopen() fails on OpenBSD retry with major.minor stripped after .so\n\nDeferring to wtc here.", "creator": "ted@mielczarek.org", "raw_text": "Deferring to wtc here.", "id": 5733540, "author": "ted@mielczarek.org", "is_private": false, "bug_id": 650772, "attachment_id": 530129, "tags": [], "creation_time": "2011-09-23T14:07:15Z"}]}}, "comments": {}}