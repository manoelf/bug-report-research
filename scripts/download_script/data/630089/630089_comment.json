{"bugs": {"630089": {"comments": [{"id": 5239084, "count": 0, "text": "Judging by http://hg.mozilla.org/mozilla-central/rev/f1af6bb87895, it was cross-site XHR that took us from having a blocked xslt stylesheet load just quietly fail to having a Yellow Screen of Death. Test case is in the tree - either uncomment the commented out bits of http://mxr.mozilla.org/mozilla-central/source/content/base/test/test_bug428847.html?force=1 or change the todo to an is if I've landed my patch in bug 628966. Expected is that the mochitest frame will be blank, actual is a \"Error loading stylesheet: A network error occurred\nloading an XSLT stylesheet\" YSoD.\n\nNomming for blocking2.0 because bug 428847 blocked 1.9, when we didn't want to break XHTML pages that have bogus PIs, like we're apparently about to do with 2.0.", "is_private": false, "tags": [], "creation_time": "2011-01-31T01:55:01Z", "raw_text": "Judging by http://hg.mozilla.org/mozilla-central/rev/f1af6bb87895, it was cross-site XHR that took us from having a blocked xslt stylesheet load just quietly fail to having a Yellow Screen of Death. Test case is in the tree - either uncomment the commented out bits of http://mxr.mozilla.org/mozilla-central/source/content/base/test/test_bug428847.html?force=1 or change the todo to an is if I've landed my patch in bug 628966. Expected is that the mochitest frame will be blank, actual is a \"Error loading stylesheet: A network error occurred\nloading an XSLT stylesheet\" YSoD.\n\nNomming for blocking2.0 because bug 428847 blocked 1.9, when we didn't want to break XHTML pages that have bogus PIs, like we're apparently about to do with 2.0.", "bug_id": 630089, "creator": "philringnalda@gmail.com", "author": "philringnalda@gmail.com", "attachment_id": null, "time": "2011-01-31T01:55:01Z"}, {"bug_id": 630089, "text": "Jonas, can you take a look?\n\nThat said, this didn't regress the exact issue bug 428847 was actually about, as far as I can tell.  In particular, in 3.6 (and 3.5, and 3.0) if your XSLT PI points to a nonexistent file you get a YSOD.  Same thing if your XLST PI points to a file that's not allowed to be loaded in 4.0.\n\nAm I just missing something?", "is_private": false, "id": 5239747, "count": 1, "raw_text": "Jonas, can you take a look?\n\nThat said, this didn't regress the exact issue bug 428847 was actually about, as far as I can tell.  In particular, in 3.6 (and 3.5, and 3.0) if your XSLT PI points to a nonexistent file you get a YSOD.  Same thing if your XLST PI points to a file that's not allowed to be loaded in 4.0.\n\nAm I just missing something?", "creation_time": "2011-01-31T14:57:57Z", "tags": [], "time": "2011-01-31T14:57:57Z", "attachment_id": null, "author": "bzbarsky@mit.edu", "creator": "bzbarsky@mit.edu"}, {"id": 5239793, "count": 2, "raw_text": "Huh, I took bug 428847 at face value for what it and the test said it was about, which was \"never mind whether there's a file there or not, if you aren't allowed to load it don't YSoD.\" So what was it actually about? Or is the change that before we wouldn't load it, so we wouldn't know it doesn't exist, but now we're looking for cross-origin headers so we do load it and give it the treatment we used to give same-origin 404s?", "text": "Huh, I took bug 428847 at face value for what it and the test said it was about, which was \"never mind whether there's a file there or not, if you aren't allowed to load it don't YSoD.\" So what was it actually about? Or is the change that before we wouldn't load it, so we wouldn't know it doesn't exist, but now we're looking for cross-origin headers so we do load it and give it the treatment we used to give same-origin 404s?", "is_private": false, "bug_id": 630089, "creator": "philringnalda@gmail.com", "attachment_id": null, "author": "philringnalda@gmail.com", "time": "2011-01-31T15:24:52Z", "tags": [], "creation_time": "2011-01-31T15:24:52Z"}, {"tags": [], "creation_time": "2011-01-31T15:31:46Z", "count": 3, "id": 5239803, "is_private": false, "text": "Bug 428847 fixed cases in which we threw due to asyncOpen failing.  It didn't fix other network failure cases (and in particular, looks like didn't fix some of the testcases attached to that bug).", "author": "bzbarsky@mit.edu", "creator": "bzbarsky@mit.edu", "attachment_id": null, "time": "2011-01-31T15:31:46Z", "raw_text": "Bug 428847 fixed cases in which we threw due to asyncOpen failing.  It didn't fix other network failure cases (and in particular, looks like didn't fix some of the testcases attached to that bug).", "bug_id": 630089}, {"bug_id": 630089, "raw_text": "Not blocking on this.", "time": "2011-02-01T20:55:56Z", "attachment_id": null, "creator": "jonas@sicking.cc", "author": "jonas@sicking.cc", "text": "Not blocking on this.", "is_private": false, "count": 4, "id": 5243977, "tags": [], "creation_time": "2011-02-01T20:55:56Z"}, {"bug_id": 630089, "raw_text": "Considering the age of bug and it seems to be fixed as comment#4 and bug 628966. Closing the bug as resolved:fixed. Feel free to reopen if this is still an issue.", "time": "2016-05-19T20:43:32Z", "author": "kkumari@softvision.com", "creator": "kkumari@softvision.com", "attachment_id": null, "is_private": false, "text": "Considering the age of bug and it seems to be fixed as comment#4 and bug 628966. Closing the bug as resolved:fixed. Feel free to reopen if this is still an issue.", "count": 5, "id": 11423665, "tags": [], "creation_time": "2016-05-19T20:43:32Z"}, {"creation_time": "2016-05-19T21:12:14Z", "tags": [], "count": 6, "id": 11423748, "text": "Um... how is this possibly fixed?  Comment 4 says nothing about fixing, and bug 628966 doesn't look related....", "is_private": false, "author": "bzbarsky@mit.edu", "creator": "bzbarsky@mit.edu", "attachment_id": null, "time": "2016-05-19T21:12:14Z", "raw_text": "Um... how is this possibly fixed?  Comment 4 says nothing about fixing, and bug 628966 doesn't look related....", "bug_id": 630089}, {"time": "2016-05-20T04:34:11Z", "attachment_id": null, "author": "kkumari@softvision.com", "creator": "kkumari@softvision.com", "tags": [], "creation_time": "2016-05-20T04:34:11Z", "text": "My bad...I read previous comments and misunderstood the relation between this defect and details in bug 628966. Thanks for reopening it!", "is_private": false, "bug_id": 630089, "id": 11424517, "raw_text": "My bad...I read previous comments and misunderstood the relation between this defect and details in bug 628966. Thanks for reopening it!", "count": 7}, {"tags": [], "creation_time": "2016-08-21T22:02:16Z", "id": 11642488, "count": 8, "is_private": false, "text": "Created attachment 8783352\n630089-silently-ignore-cors-failures-to-load-xml-stylesheets.diff\n\nHere's a patch which ignores CORS failures when fetching xml-stylesheets. It passes the todo'd mochitest.\n\nA try run seems fine: https://treeherder.mozilla.org/#/jobs?repo=try&revision=b8f74611286d\n\nIf this seems like a reasonable fix, then I can also add a test-specific XSL file to the tree, rather than having it try to load one from another test.", "author": "wisniewskit@gmail.com", "creator": "wisniewskit@gmail.com", "attachment_id": 8783352, "time": "2016-08-21T22:02:16Z", "raw_text": "Here's a patch which ignores CORS failures when fetching xml-stylesheets. It passes the todo'd mochitest.\n\nA try run seems fine: https://treeherder.mozilla.org/#/jobs?repo=try&revision=b8f74611286d\n\nIf this seems like a reasonable fix, then I can also add a test-specific XSL file to the tree, rather than having it try to load one from another test.", "bug_id": 630089}, {"raw_text": "Peter or Jonas (with the latter not really an option now, I guess) would be better reviewers here in terms of understanding the semantics of this stuff.  For example, why should CORS failures be treated differently from 404 response or server connection reset in this code?\n\nNote also that NS_ERROR_DOM_BAD_URI does NOT mean CORS failure.  It can happen for other reasons....", "id": 11645512, "count": 9, "is_private": false, "bug_id": 630089, "text": "Comment on attachment 8783352\n630089-silently-ignore-cors-failures-to-load-xml-stylesheets.diff\n\nPeter or Jonas (with the latter not really an option now, I guess) would be better reviewers here in terms of understanding the semantics of this stuff.  For example, why should CORS failures be treated differently from 404 response or server connection reset in this code?\n\nNote also that NS_ERROR_DOM_BAD_URI does NOT mean CORS failure.  It can happen for other reasons....", "attachment_id": 8783352, "author": "bzbarsky@mit.edu", "creator": "bzbarsky@mit.edu", "time": "2016-08-22T19:53:18Z", "creation_time": "2016-08-22T19:53:18Z", "tags": []}, {"bug_id": 630089, "raw_text": "Friendly review ping, since it's been a month. Peter, is there someone else you feel should tackle this instead?", "time": "2016-09-22T13:04:18Z", "creator": "wisniewskit@gmail.com", "author": "wisniewskit@gmail.com", "attachment_id": null, "text": "Friendly review ping, since it's been a month. Peter, is there someone else you feel should tackle this instead?", "is_private": false, "count": 10, "id": 11729172, "tags": [], "creation_time": "2016-09-22T13:04:18Z"}, {"is_private": false, "text": "I'm sort of puzzled too, what's special about CORS that we'd treat it differently from other failures?", "count": 11, "id": 11730679, "tags": [], "creation_time": "2016-09-22T20:11:48Z", "bug_id": 630089, "raw_text": "I'm sort of puzzled too, what's special about CORS that we'd treat it differently from other failures?", "time": "2016-09-22T20:11:48Z", "attachment_id": null, "author": "peterv@propagandism.org", "creator": "peterv@propagandism.org"}, {"raw_text": "You shouldn't change the existing testcase but add new ones. And as bz already pointed out, NS_ERROR_DOM_BAD_URI is more generic than CORS failures.", "bug_id": 630089, "attachment_id": 8783352, "author": "peterv@propagandism.org", "creator": "peterv@propagandism.org", "time": "2016-09-22T20:14:24Z", "count": 12, "id": 11730684, "text": "Comment on attachment 8783352\n630089-silently-ignore-cors-failures-to-load-xml-stylesheets.diff\n\nYou shouldn't change the existing testcase but add new ones. And as bz already pointed out, NS_ERROR_DOM_BAD_URI is more generic than CORS failures.", "is_private": false, "creation_time": "2016-09-22T20:14:24Z", "tags": []}, {"time": "2016-09-25T18:52:02Z", "creator": "wisniewskit@gmail.com", "author": "wisniewskit@gmail.com", "attachment_id": null, "creation_time": "2016-09-25T18:52:02Z", "tags": [], "text": ">NS_ERROR_DOM_BAD_URI is more generic than CORS failures.\n\nHmm. How should I go about distinguishing that it's a CORS failure? Perhaps also find a way to check that that the channel's loadInfo->GetTainting() == LoadTainting::CORS ?\n\n\n>You shouldn't change the existing testcase but add new ones.\n\nI take it that that I should at least change the existing testcase by getting rid of the todo(), since that's what the new test will be handling?", "bug_id": 630089, "is_private": false, "id": 11735630, "raw_text": ">NS_ERROR_DOM_BAD_URI is more generic than CORS failures.\n\nHmm. How should I go about distinguishing that it's a CORS failure? Perhaps also find a way to check that that the channel's loadInfo->GetTainting() == LoadTainting::CORS ?\n\n\n>You shouldn't change the existing testcase but add new ones.\n\nI take it that that I should at least change the existing testcase by getting rid of the todo(), since that's what the new test will be handling?", "count": 13}, {"bug_id": 630089, "raw_text": "(Friendly ni request ping, see comment 13).", "time": "2016-10-17T13:12:54Z", "author": "wisniewskit@gmail.com", "creator": "wisniewskit@gmail.com", "attachment_id": null, "is_private": false, "text": "(Friendly ni request ping, see comment 13).", "id": 11790580, "count": 14, "creation_time": "2016-10-17T13:12:54Z", "tags": []}, {"text": "See comment 11.", "is_private": false, "id": 14541516, "count": 15, "creation_time": "2019-12-11T18:54:43Z", "tags": [], "bug_id": 630089, "raw_text": "See comment 11.", "time": "2019-12-11T18:54:43Z", "attachment_id": null, "creator": "peterv@propagandism.org", "author": "peterv@propagandism.org"}]}}, "comments": {}}