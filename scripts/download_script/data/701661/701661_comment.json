{"bugs": {"701661": {"comments": [{"bug_id": 701661, "text": "Created attachment 573772\nFF8-fonts : output of lsof -p |grep Font\n\nUser Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_6_8) AppleWebKit/535.7 (KHTML, like Gecko) Chrome/16.0.912.4 Safari/535.7\n\nSteps to reproduce:\n\nMacOS X 10.6.8, Firefox 8.0, beta channel, version from two days ago (9/11/2011)\n\nJust ran lsof -p <firefox pid> on my machine to see how many network connections were open.\n\n\nActual results:\n\nI just saw that FF keeps an open file descriptor for every single font in my system, awsting a *lot* of resources, it has currently 543 open fd for the fonts...\n\n\nExpected results:\n\nI do not expect any font to remain opened during the lifetime of the process.", "tags": [], "attachment_id": 573772, "raw_text": "User Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_6_8) AppleWebKit/535.7 (KHTML, like Gecko) Chrome/16.0.912.4 Safari/535.7\n\nSteps to reproduce:\n\nMacOS X 10.6.8, Firefox 8.0, beta channel, version from two days ago (9/11/2011)\n\nJust ran lsof -p <firefox pid> on my machine to see how many network connections were open.\n\n\nActual results:\n\nI just saw that FF keeps an open file descriptor for every single font in my system, awsting a *lot* of resources, it has currently 543 open fd for the fonts...\n\n\nExpected results:\n\nI do not expect any font to remain opened during the lifetime of the process.", "creator": "roberto@keltia.net", "time": "2011-11-11T11:13:07Z", "creation_time": "2011-11-11T11:13:07Z", "author": "roberto@keltia.net", "is_private": false, "count": 0, "id": 5842410}, {"count": 1, "id": 5845108, "is_private": false, "author": "jd.bugzilla@gmail.com", "time": "2011-11-13T04:18:46Z", "creation_time": "2011-11-13T04:18:46Z", "creator": "jd.bugzilla@gmail.com", "raw_text": "> User Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_6_8) AppleWebKit/535.7\n> (KHTML, like Gecko) Chrome/16.0.912.4 Safari/535.7\n\n???", "attachment_id": null, "bug_id": 701661, "text": "> User Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_6_8) AppleWebKit/535.7\n> (KHTML, like Gecko) Chrome/16.0.912.4 Safari/535.7\n\n???", "tags": []}, {"bug_id": 701661, "text": "> awsting a *lot* of resources\n\nWhat sort?\n\n> I do not expect any font to remain opened during the lifetime of the process.\n\nDo you expect us to cache all the font data for all the fonts in memory instead?  That seems strictly worse, no?", "tags": [], "attachment_id": null, "raw_text": "> awsting a *lot* of resources\n\nWhat sort?\n\n> I do not expect any font to remain opened during the lifetime of the process.\n\nDo you expect us to cache all the font data for all the fonts in memory instead?  That seems strictly worse, no?", "time": "2011-11-13T04:47:08Z", "creation_time": "2011-11-13T04:47:08Z", "creator": "bzbarsky@mit.edu", "author": "bzbarsky@mit.edu", "id": 5845123, "count": 2, "is_private": false}, {"raw_text": "(In reply to John Daggett (:jtd) from comment #1)\n> > User Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_6_8) AppleWebKit/535.7\n> > (KHTML, like Gecko) Chrome/16.0.912.4 Safari/535.7\n> \n> ???\n\nThe bug report was submitted with Chrome yes.", "attachment_id": null, "text": "(In reply to John Daggett (:jtd) from comment #1)\n> > User Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_6_8) AppleWebKit/535.7\n> > (KHTML, like Gecko) Chrome/16.0.912.4 Safari/535.7\n> \n> ???\n\nThe bug report was submitted with Chrome yes.", "bug_id": 701661, "tags": [], "id": 5845686, "count": 3, "is_private": false, "author": "roberto@keltia.net", "creation_time": "2011-11-13T22:37:21Z", "time": "2011-11-13T22:37:21Z", "creator": "roberto@keltia.net"}, {"tags": [], "text": "(In reply to Boris Zbarsky (:bz) from comment #2)\n> > awsting a *lot* of resources\n> \n> What sort?\n\nI wrote it, open file descriptors.\n \n> > I do not expect any font to remain opened during the lifetime of the process.\n> \n> Do you expect us to cache all the font data for all the fonts in memory\n> instead?  That seems strictly worse, no?\n\nUh, do you really need to have a *open* handle on every single present font in a given system whether you use it or not?  You know that you can open, read and close a file during the lifetime of a process, right?  That you can also only cache fonts you need, right?\n\nIf you have a really good reason to keep all of them open, pray do tell, I am very interested.", "bug_id": 701661, "raw_text": "(In reply to Boris Zbarsky (:bz) from comment #2)\n> > awsting a *lot* of resources\n> \n> What sort?\n\nI wrote it, open file descriptors.\n \n> > I do not expect any font to remain opened during the lifetime of the process.\n> \n> Do you expect us to cache all the font data for all the fonts in memory\n> instead?  That seems strictly worse, no?\n\nUh, do you really need to have a *open* handle on every single present font in a given system whether you use it or not?  You know that you can open, read and close a file during the lifetime of a process, right?  That you can also only cache fonts you need, right?\n\nIf you have a really good reason to keep all of them open, pray do tell, I am very interested.", "attachment_id": null, "author": "roberto@keltia.net", "creation_time": "2011-11-13T22:41:50Z", "time": "2011-11-13T22:41:50Z", "creator": "roberto@keltia.net", "count": 4, "id": 5845689, "is_private": false}, {"tags": [], "text": "> I wrote it, open file descriptors.\n\nLast I checked the limit on the number of open file descriptors on OSX was pretty high; 500 fds is not a big deal as far as I can tell.\n\n> whether you use it or not\n\nGiven that CSS specifies per-character fallback, whether we use a font depends on the exact characters on the page...\n\n> You know that you can open, read and close a file during the lifetime of a process,\n> right?\n\nYes, and that takes time.\n\nThat said, this is worth looking into, which is why the bug is still open.  The first question is whether we're holding the fds or whether system libraries are...", "bug_id": 701661, "raw_text": "> I wrote it, open file descriptors.\n\nLast I checked the limit on the number of open file descriptors on OSX was pretty high; 500 fds is not a big deal as far as I can tell.\n\n> whether you use it or not\n\nGiven that CSS specifies per-character fallback, whether we use a font depends on the exact characters on the page...\n\n> You know that you can open, read and close a file during the lifetime of a process,\n> right?\n\nYes, and that takes time.\n\nThat said, this is worth looking into, which is why the bug is still open.  The first question is whether we're holding the fds or whether system libraries are...", "attachment_id": null, "author": "bzbarsky@mit.edu", "creation_time": "2011-11-13T22:49:30Z", "time": "2011-11-13T22:49:30Z", "creator": "bzbarsky@mit.edu", "count": 5, "id": 5845692, "is_private": false}, {"author": "jfkthame@gmail.com", "creation_time": "2011-11-13T22:58:34Z", "time": "2011-11-13T22:58:34Z", "creator": "jfkthame@gmail.com", "count": 6, "id": 5845697, "is_private": false, "text": "We don't open the font files directly, we access font data via the Core Graphics, Core Text and Cocoa APIs. In particular, we create a CGFontRef for each font in the system in order to read data such as character maps, and it seems likely that the OS keeps the file open as long as that font reference exists.\n\nIt would be possible to dispose of these font references and re-create them on demand whenever we need to use a given font, but this would add some overhead (I'm not sure how much, but we could measure this); it's also not clear to me that keeping the font references alive is actually a problem.", "bug_id": 701661, "tags": [], "raw_text": "We don't open the font files directly, we access font data via the Core Graphics, Core Text and Cocoa APIs. In particular, we create a CGFontRef for each font in the system in order to read data such as character maps, and it seems likely that the OS keeps the file open as long as that font reference exists.\n\nIt would be possible to dispose of these font references and re-create them on demand whenever we need to use a given font, but this would add some overhead (I'm not sure how much, but we could measure this); it's also not clear to me that keeping the font references alive is actually a problem.", "attachment_id": null}, {"text": "(In reply to Jonathan Kew (:jfkthame) from comment #6)\n> We don't open the font files directly, we access font data via the Core\n> Graphics, Core Text and Cocoa APIs. In particular, we create a CGFontRef for\n> each font in the system in order to read data such as character maps, and it\n> seems likely that the OS keeps the file open as long as that font reference\n> exists.\n\nI just looked at Chrome and processes are also having open file descriptors for fonts but each one has between 2 and 10 more or less, not all of them.\n\n> It would be possible to dispose of these font references and re-create them\n> on demand whenever we need to use a given font, but this would add some\n> overhead (I'm not sure how much, but we could measure this); it's also not\n> clear to me that keeping the font references alive is actually a problem.\n\nFirefox is often seen as wasting resources and memory (with good reasons), I'd say that anything that can change that is good, especially that you have taken measures to keep memory consumption down in 8 and later...", "bug_id": 701661, "tags": [], "attachment_id": null, "raw_text": "(In reply to Jonathan Kew (:jfkthame) from comment #6)\n> We don't open the font files directly, we access font data via the Core\n> Graphics, Core Text and Cocoa APIs. In particular, we create a CGFontRef for\n> each font in the system in order to read data such as character maps, and it\n> seems likely that the OS keeps the file open as long as that font reference\n> exists.\n\nI just looked at Chrome and processes are also having open file descriptors for fonts but each one has between 2 and 10 more or less, not all of them.\n\n> It would be possible to dispose of these font references and re-create them\n> on demand whenever we need to use a given font, but this would add some\n> overhead (I'm not sure how much, but we could measure this); it's also not\n> clear to me that keeping the font references alive is actually a problem.\n\nFirefox is often seen as wasting resources and memory (with good reasons), I'd say that anything that can change that is good, especially that you have taken measures to keep memory consumption down in 8 and later...", "time": "2011-11-13T23:06:53Z", "creation_time": "2011-11-13T23:06:53Z", "creator": "roberto@keltia.net", "author": "roberto@keltia.net", "count": 7, "id": 5845702, "is_private": false}, {"attachment_id": null, "raw_text": "I'm not sure I buy the argument that reducing open file descriptor count at the cost of more memory and/or CPU usage is a good move, even purely from the perception-management angle (e.g people are more likely to look at memory or CPU usage than they are to look at lsof).\n\nIf the open fd count can be reduced without any other costs, then sure.", "tags": [], "text": "I'm not sure I buy the argument that reducing open file descriptor count at the cost of more memory and/or CPU usage is a good move, even purely from the perception-management angle (e.g people are more likely to look at memory or CPU usage than they are to look at lsof).\n\nIf the open fd count can be reduced without any other costs, then sure.", "bug_id": 701661, "id": 5845718, "count": 8, "is_private": false, "creation_time": "2011-11-13T23:25:33Z", "time": "2011-11-13T23:25:33Z", "creator": "bzbarsky@mit.edu", "author": "bzbarsky@mit.edu"}, {"raw_text": "is this more a footprint issue, than perf?", "attachment_id": null, "tags": [], "bug_id": 701661, "text": "is this more a footprint issue, than perf?", "is_private": false, "id": 5891815, "count": 9, "author": "vseerror@lehigh.edu", "creator": "vseerror@lehigh.edu", "time": "2011-12-05T00:03:23Z", "creation_time": "2011-12-05T00:03:23Z"}, {"attachment_id": null, "raw_text": "Boris, should this bug be considered or should we close it? (for background, I was pinged about the status of this bug on Twitter ;) )", "tags": [], "text": "Boris, should this bug be considered or should we close it? (for background, I was pinged about the status of this bug on Twitter ;) )", "bug_id": 701661, "id": 11967982, "count": 10, "is_private": false, "time": "2017-01-09T19:23:27Z", "creation_time": "2017-01-09T19:23:27Z", "creator": "pascalc@gmail.com", "author": "pascalc@gmail.com"}, {"text": "Up to the people actually familiar with our font subsystem.  See comment 6.", "bug_id": 701661, "tags": [], "attachment_id": null, "raw_text": "Up to the people actually familiar with our font subsystem.  See comment 6.", "creator": "bzbarsky@mit.edu", "creation_time": "2017-01-09T19:54:31Z", "time": "2017-01-09T19:54:31Z", "author": "bzbarsky@mit.edu", "is_private": false, "count": 11, "id": 11968093}, {"is_private": false, "attachment_id": null, "count": 12, "id": 11968127, "raw_text": "Thanks Boris, Jonathan any opinion about this bug?", "creator": "pascalc@gmail.com", "time": "2017-01-09T20:03:54Z", "creation_time": "2017-01-09T20:03:54Z", "author": "pascalc@gmail.com", "tags": [], "text": "Thanks Boris, Jonathan any opinion about this bug?", "bug_id": 701661}, {"attachment_id": null, "raw_text": "I don't really see the point and/or optimization leading to have 500+ fonts opened all the time, knowing that you will use maybe 10 or them.  It is a waste of resources.", "tags": [], "bug_id": 701661, "text": "I don't really see the point and/or optimization leading to have 500+ fonts opened all the time, knowing that you will use maybe 10 or them.  It is a waste of resources.", "count": 13, "id": 11968618, "is_private": false, "creation_time": "2017-01-09T22:53:19Z", "time": "2017-01-09T22:53:19Z", "creator": "roberto@keltia.net", "author": "roberto@keltia.net"}, {"time": "2017-01-16T16:10:02Z", "creation_time": "2017-01-16T16:10:02Z", "creator": "jfkthame@gmail.com", "author": "jfkthame@gmail.com", "id": 11985198, "count": 14, "is_private": false, "bug_id": 701661, "text": "I did a bit of tracing here. This appears to be caused by behavior that is internal to the macOS font system, and not something we can readily control.\n\nIn order to fully support localized font family names (e.g. the family named \"Heiti TC\" in English also has several other names, \"\u9ed1\u9ad4-\u7e41\", \"\u9ed2\u4f53-\u7e41\", \"Heiti-\ubc88\uccb4\", \"\u9ed1\u4f53-\u7e41\"), as required by the CSS Fonts spec[1], we do not simply recognize the single family name returned by an API like CTFontManagerCopyAvailableFontFamilyNames(), we iterate over the available fonts (in the background, shortly after startup), loading the 'name' table of each font and checking for the presence of localized names. It seems that when we use CTFontCopyTable() to load the 'name' table, the Core Text font system (or maybe underlying Core Graphics code) opens the font file. And even though we subsequently CFRelease the font object we created, the file is not closed.\n\nWhat I'm guessing happens is that just calling CTFontManagerCopyAvailableFontFamilyNames doesn't need to open font files, because the system has already cached the list; but once we explicitly instantiate a given font (in order to access its 'name' table), the system opens the file, and then doesn't close it (even though we release the font) until the process terminates.\n\nSubsequently, we also cache CGFont references in the MacOSFontEntry for each face (I think this happens on first use of the face), which might also serve to hold font files open. However, AFAICS it looks like even if we were to avoid caching these (which is what I was thinking of in comment 6), this won't actually result in the files being closed.\n\n\n[1] \"Some font formats allow fonts to carry multiple localizations of the family name. User agents must recognize and correctly match all of these names independent of the underlying platform localization, system API used or document encoding.\" https://drafts.csswg.org/css-fonts-3/#font-family-prop", "tags": [], "attachment_id": null, "raw_text": "I did a bit of tracing here. This appears to be caused by behavior that is internal to the macOS font system, and not something we can readily control.\n\nIn order to fully support localized font family names (e.g. the family named \"Heiti TC\" in English also has several other names, \"\u9ed1\u9ad4-\u7e41\", \"\u9ed2\u4f53-\u7e41\", \"Heiti-\ubc88\uccb4\", \"\u9ed1\u4f53-\u7e41\"), as required by the CSS Fonts spec[1], we do not simply recognize the single family name returned by an API like CTFontManagerCopyAvailableFontFamilyNames(), we iterate over the available fonts (in the background, shortly after startup), loading the 'name' table of each font and checking for the presence of localized names. It seems that when we use CTFontCopyTable() to load the 'name' table, the Core Text font system (or maybe underlying Core Graphics code) opens the font file. And even though we subsequently CFRelease the font object we created, the file is not closed.\n\nWhat I'm guessing happens is that just calling CTFontManagerCopyAvailableFontFamilyNames doesn't need to open font files, because the system has already cached the list; but once we explicitly instantiate a given font (in order to access its 'name' table), the system opens the file, and then doesn't close it (even though we release the font) until the process terminates.\n\nSubsequently, we also cache CGFont references in the MacOSFontEntry for each face (I think this happens on first use of the face), which might also serve to hold font files open. However, AFAICS it looks like even if we were to avoid caching these (which is what I was thinking of in comment 6), this won't actually result in the files being closed.\n\n\n[1] \"Some font formats allow fonts to carry multiple localizations of the family name. User agents must recognize and correctly match all of these names independent of the underlying platform localization, system API used or document encoding.\" https://drafts.csswg.org/css-fonts-3/#font-family-prop"}, {"id": 11985208, "count": 15, "is_private": false, "creation_time": "2017-01-16T16:16:42Z", "time": "2017-01-16T16:16:42Z", "creator": "jfkthame@gmail.com", "author": "jfkthame@gmail.com", "attachment_id": null, "raw_text": "IMO, unless there is evidence that the open font files are in fact causing problems (e.g. causing something to fail or perform poorly because some kind of resource is exhausted), there's nothing to do here.\n\nI suppose the \"problem\" would largely go away if, for example, we were to save all the info about the available fonts -- including localized names, etc. -- in the startupCache instead of querying the fonts themselves; we've talked at times about doing that kind of thing. It could be tricky to get reliably right, though, given the various ways in which the collection of available fonts may change (both through manual installation/removal of files and via system APIs that activate/deactivate font resources).", "tags": [], "text": "IMO, unless there is evidence that the open font files are in fact causing problems (e.g. causing something to fail or perform poorly because some kind of resource is exhausted), there's nothing to do here.\n\nI suppose the \"problem\" would largely go away if, for example, we were to save all the info about the available fonts -- including localized names, etc. -- in the startupCache instead of querying the fonts themselves; we've talked at times about doing that kind of thing. It could be tricky to get reliably right, though, given the various ways in which the collection of available fonts may change (both through manual installation/removal of files and via system APIs that activate/deactivate font resources).", "bug_id": 701661}, {"creator": "bzbarsky@mit.edu", "creation_time": "2017-01-16T16:22:57Z", "time": "2017-01-16T16:22:57Z", "author": "bzbarsky@mit.edu", "is_private": false, "id": 11985216, "count": 16, "tags": [], "text": "Jonathan, do you know offhand whether Chrome supports localized family names?", "bug_id": 701661, "attachment_id": null, "raw_text": "Jonathan, do you know offhand whether Chrome supports localized family names?"}, {"id": 11985224, "count": 17, "is_private": false, "time": "2017-01-16T16:28:09Z", "creation_time": "2017-01-16T16:28:09Z", "creator": "jfkthame@gmail.com", "author": "jfkthame@gmail.com", "attachment_id": null, "raw_text": "(In reply to Boris Zbarsky [:bz] (still a bit busy) from comment #16)\n> Jonathan, do you know offhand whether Chrome supports localized family names?\n\nIt doesn't appear to, at least on macOS:\n\ndata:text/html;charset=utf-8,<div style=\"font:36px %E9%BB%91%E9%AB%94-%E7%B9%81, monospace\">foo bar\n\ndisplays \"foo bar\" in the default monospaced font using Chrome, whereas it correctly uses the Heiti TC font (which has distinctive Avant Garde-like Latin letters) in Firefox.", "tags": [], "bug_id": 701661, "text": "(In reply to Boris Zbarsky [:bz] (still a bit busy) from comment #16)\n> Jonathan, do you know offhand whether Chrome supports localized family names?\n\nIt doesn't appear to, at least on macOS:\n\ndata:text/html;charset=utf-8,<div style=\"font:36px %E9%BB%91%E9%AB%94-%E7%B9%81, monospace\">foo bar\n\ndisplays \"foo bar\" in the default monospaced font using Chrome, whereas it correctly uses the Heiti TC font (which has distinctive Avant Garde-like Latin letters) in Firefox."}, {"author": "bzbarsky@mit.edu", "creator": "bzbarsky@mit.edu", "time": "2017-01-16T16:33:52Z", "creation_time": "2017-01-16T16:33:52Z", "is_private": false, "count": 18, "id": 11985234, "tags": [], "bug_id": 701661, "text": "OK, well, that explains why Chrome has fewer open file descriptors, in spite of the CoreText behavior.  ;)", "raw_text": "OK, well, that explains why Chrome has fewer open file descriptors, in spite of the CoreText behavior.  ;)", "attachment_id": null}, {"creator": "jfkthame@gmail.com", "creation_time": "2017-01-16T16:49:14Z", "time": "2017-01-16T16:49:14Z", "author": "jfkthame@gmail.com", "is_private": false, "count": 19, "id": 11985265, "tags": [], "text": "Safari, on the other hand, does seem to recognize some localized names, though not all of them. E.g. for Heiti TC (a font targeted at Traditional Chinese), it accepts the Trad Chinese name, but not the Japanese or Korean ones; for Songti SC (targeted at Simplified Chinese), it accepts the Simplified Chinese name but not the Traditional variant.\n\nI'm guessing this may be based on Cocoa behavior, where NSFontManager (or something) may have loaded localized names for certain fonts/locales.\n\n(I believe IE accepted localized font names on Windows, too -- possibly depending on the OS locale setting -- but I'm not on my Windows machine just now to confirm that, and I don't know if Edge behaves the same as old IE versions in this regard. But my recollection is that certain Windows CJK fonts were commonly referred to using localized names in CSS found in the wild.)", "bug_id": 701661, "attachment_id": null, "raw_text": "Safari, on the other hand, does seem to recognize some localized names, though not all of them. E.g. for Heiti TC (a font targeted at Traditional Chinese), it accepts the Trad Chinese name, but not the Japanese or Korean ones; for Songti SC (targeted at Simplified Chinese), it accepts the Simplified Chinese name but not the Traditional variant.\n\nI'm guessing this may be based on Cocoa behavior, where NSFontManager (or something) may have loaded localized names for certain fonts/locales.\n\n(I believe IE accepted localized font names on Windows, too -- possibly depending on the OS locale setting -- but I'm not on my Windows machine just now to confirm that, and I don't know if Edge behaves the same as old IE versions in this regard. But my recollection is that certain Windows CJK fonts were commonly referred to using localized names in CSS found in the wild.)"}, {"raw_text": "", "attachment_id": null, "text": "*** Bug 1717409 has been marked as a duplicate of this bug. ***", "bug_id": 701661, "tags": [], "id": 15465515, "count": 20, "is_private": false, "author": "jfkthame@gmail.com", "time": "2021-06-25T20:22:29Z", "creation_time": "2021-06-25T20:22:29Z", "creator": "jfkthame@gmail.com"}, {"author": "jfkthame@gmail.com", "creator": "jfkthame@gmail.com", "time": "2021-06-25T20:24:23Z", "creation_time": "2021-06-25T20:24:23Z", "is_private": false, "count": 21, "id": 15465521, "bug_id": 701661, "text": "*** Bug 1640242 has been marked as a duplicate of this bug. ***", "tags": [], "raw_text": "", "attachment_id": null}]}}, "comments": {}}