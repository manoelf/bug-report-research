{"bugs": {"708384": {"comments": [{"author": "jorendorff@mozilla.com", "time": "2011-12-07T20:50:01Z", "attachment_id": null, "text": "In the browser, event handlers go through nsJSContext::CompileEventHandler and nsJSContext::BindCompiledEventHandler. The result is a function unlike anything we can create in the shell. So we have no shell tests for event-handler-like functions.\n\nThere are three things going on here.\n\n1. XPConnect makes it possible to build objects that have other objects on the scope chain (DOM Elements are like this whether they have event handlers or not).\n\n2. The event handler code is compiled without the compile-and-go option.\n\n3. The resulting function is then cloned onto a DOM object, which becomes the scope chain for the clone.\n\nWe can do (3) using the shell's clone() function. If (1) and (2) were possible, I think we'd be all set.", "creator": "jorendorff@mozilla.com", "raw_text": "In the browser, event handlers go through nsJSContext::CompileEventHandler and nsJSContext::BindCompiledEventHandler. The result is a function unlike anything we can create in the shell. So we have no shell tests for event-handler-like functions.\n\nThere are three things going on here.\n\n1. XPConnect makes it possible to build objects that have other objects on the scope chain (DOM Elements are like this whether they have event handlers or not).\n\n2. The event handler code is compiled without the compile-and-go option.\n\n3. The resulting function is then cloned onto a DOM object, which becomes the scope chain for the clone.\n\nWe can do (3) using the shell's clone() function. If (1) and (2) were possible, I think we'd be all set.", "creation_time": "2011-12-07T20:50:01Z", "bug_id": 708384, "id": 5898389, "tags": [], "is_private": false, "count": 0}]}}, "comments": {}}