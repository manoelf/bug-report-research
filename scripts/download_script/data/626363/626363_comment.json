{"comments": {}, "bugs": {"626363": {"comments": [{"id": 5204688, "text": "In security/manager/chrome/pipnss/pipnss.properties, several strings have a l10n note that indicate they are limited to 32 or 64 bytes. For some locales, their alphabetic letters require at least 2 bytes per character in UTF-8 encoding. The result is that translated strings longer than 16 characters are truncated, and it almost impossible to shorten some of those strings to 16 characters or less.\n\nProposed solution: make the limitation 32 characters instead of 32 bytes (the space is enough for 32 characters), or add a variable (string) in pipnss.properties that enables the localizer to change the string length in bytes (or alternatively the line width).\n\nHow to reproduce:\nGo to the Preferences window > Advanced > Encryption > Security Devices.", "time": "2011-01-17T10:47:25Z", "is_private": false, "creation_time": "2011-01-17T10:47:25Z", "creator": "linux.anas@gmail.com", "count": 0, "raw_text": "In security/manager/chrome/pipnss/pipnss.properties, several strings have a l10n note that indicate they are limited to 32 or 64 bytes. For some locales, their alphabetic letters require at least 2 bytes per character in UTF-8 encoding. The result is that translated strings longer than 16 characters are truncated, and it almost impossible to shorten some of those strings to 16 characters or less.\n\nProposed solution: make the limitation 32 characters instead of 32 bytes (the space is enough for 32 characters), or add a variable (string) in pipnss.properties that enables the localizer to change the string length in bytes (or alternatively the line width).\n\nHow to reproduce:\nGo to the Preferences window > Advanced > Encryption > Security Devices.", "attachment_id": null, "bug_id": 626363, "tags": [], "author": "linux.anas@gmail.com"}, {"bug_id": 626363, "attachment_id": null, "author": "linux.anas@gmail.com", "tags": [], "count": 1, "raw_text": "By the way, all rtl locales are affected. Some other locales may be too.", "creation_time": "2011-01-17T10:48:33Z", "creator": "linux.anas@gmail.com", "is_private": false, "time": "2011-01-17T10:48:33Z", "text": "By the way, all rtl locales are affected. Some other locales may be too.", "id": 5204691}, {"creator": "l10n@mozilla.com", "creation_time": "2011-01-17T16:29:01Z", "is_private": false, "time": "2011-01-17T16:29:01Z", "id": 5205195, "text": "Kai added those comments in bug 90956, and I can't see why the limitations are there. Kai?", "author": "l10n@mozilla.com", "tags": [], "bug_id": 626363, "attachment_id": null, "raw_text": "Kai added those comments in bug 90956, and I can't see why the limitations are there. Kai?", "count": 2}, {"raw_text": "This doesn't have anything to do with right-to-left support.", "count": 3, "tags": [], "author": "ehsan.akhgari@gmail.com", "attachment_id": null, "bug_id": 626363, "is_private": false, "text": "This doesn't have anything to do with right-to-left support.", "id": 5205813, "time": "2011-01-17T21:11:57Z", "creator": "ehsan.akhgari@gmail.com", "creation_time": "2011-01-17T21:11:57Z"}, {"count": 4, "time": "2011-04-14T15:28:59Z", "id": 5409493, "raw_text": "Short answer: No, we cannot increase the sizes, because we are using a standard interface that has a size limitation.\n\nLong answer:\n\nMozilla uses NSS as its crypto toolkit.\nThere is a standard called PKCS#11 that describes \"devices\" that perform crypto operations.\n\"Devices\" can be either \"hardware\" or \"software\".\nNSS has followed the strategy to use the PKCS#11 interfaces to allow to work with third party crypto modules, that can be used as plugins into NSS.\nAs a matter of simplification, NSS uses the same interface for some internal modules, too.\nThese modules include the storage module for your private keys (software security device) and the list of trusted root certificates (builtin module).\n\nThe strings you have referenced are the identifiers used for our internal PKCS#11 modules, and they must follow the size restrictions that are described by the PKCS 11 interface documentation.\n\nI don't have good ideas what to recommend, other than \"try to be creative with a short name\" or \"just keep the original english name\".\n\nUnfortunately this must be resolved as WONTFIX.\n\nWell. In theory someone could implement a solution that always keeps the short strings in the device emulation, and changes all our displaying code to dynamically detect whenever we work with a builtin module, and dynamically replace the strings with localized strings.", "text": "Short answer: No, we cannot increase the sizes, because we are using a standard interface that has a size limitation.\n\nLong answer:\n\nMozilla uses NSS as its crypto toolkit.\nThere is a standard called PKCS#11 that describes \"devices\" that perform crypto operations.\n\"Devices\" can be either \"hardware\" or \"software\".\nNSS has followed the strategy to use the PKCS#11 interfaces to allow to work with third party crypto modules, that can be used as plugins into NSS.\nAs a matter of simplification, NSS uses the same interface for some internal modules, too.\nThese modules include the storage module for your private keys (software security device) and the list of trusted root certificates (builtin module).\n\nThe strings you have referenced are the identifiers used for our internal PKCS#11 modules, and they must follow the size restrictions that are described by the PKCS 11 interface documentation.\n\nI don't have good ideas what to recommend, other than \"try to be creative with a short name\" or \"just keep the original english name\".\n\nUnfortunately this must be resolved as WONTFIX.\n\nWell. In theory someone could implement a solution that always keeps the short strings in the device emulation, and changes all our displaying code to dynamically detect whenever we work with a builtin module, and dynamically replace the strings with localized strings.", "is_private": false, "bug_id": 626363, "attachment_id": null, "creation_time": "2011-04-14T15:28:59Z", "author": "kaie@kuix.de", "creator": "kaie@kuix.de", "tags": []}, {"time": "2011-04-23T08:24:50Z", "id": 5427803, "text": "> Well. In theory someone could implement a solution that\n> always keeps the short strings in the device emulation,\n> and changes all our displaying code to dynamically\n> detect whenever we work with a builtin module, and\n> dynamically replace the strings with localized strings.\n\nI think this is the right solution. But, it is a low priority.", "is_private": false, "creation_time": "2011-04-23T08:24:50Z", "creator": "brian@briansmith.org", "count": 5, "raw_text": "> Well. In theory someone could implement a solution that\n> always keeps the short strings in the device emulation,\n> and changes all our displaying code to dynamically\n> detect whenever we work with a builtin module, and\n> dynamically replace the strings with localized strings.\n\nI think this is the right solution. But, it is a low priority.", "bug_id": 626363, "attachment_id": null, "author": "brian@briansmith.org", "tags": []}]}}}