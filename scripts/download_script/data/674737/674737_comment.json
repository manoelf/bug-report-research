{"bugs": {"674737": {"comments": [{"attachment_id": null, "raw_text": "I'm not familiar with the Bluetooth protocol, but the goals are the same as for WebUSB (674718), just for Bluetooth.  Hopefully a lot of code can be shared, especially the permission model.  Can crib off of existing APIs.", "id": 5617998, "creator": "cjones.bugs@gmail.com", "is_private": false, "count": 0, "author": "cjones.bugs@gmail.com", "creation_time": "2011-07-27T22:29:41Z", "time": "2011-07-27T22:29:41Z", "bug_id": 674737, "tags": [], "text": "I'm not familiar with the Bluetooth protocol, but the goals are the same as for WebUSB (674718), just for Bluetooth.  Hopefully a lot of code can be shared, especially the permission model.  Can crib off of existing APIs."}, {"bug_id": 674737, "count": 1, "id": 5672267, "raw_text": "Some time ago in BONDI initiative a WebAPI for Bluetooth was drafted [1]. \n\nAs you may see the main editor was Jim O'Leary from rococo software [2], which is a company that developed a Java Bluetooth API (JSR-82) shipped on millions of phones. Due to that I think it may be a good starting point (at least from a functional point of view). If I remember properly I think Aplix Web Runtime implemented (at least partially) this API.\n\n[1] http://bondi.omtp.org/1.5/pwd-2/bluetooth.htm\n[2] http://www.rococosoft.com/", "attachment_id": null, "text": "Some time ago in BONDI initiative a WebAPI for Bluetooth was drafted [1]. \n\nAs you may see the main editor was Jim O'Leary from rococo software [2], which is a company that developed a Java Bluetooth API (JSR-82) shipped on millions of phones. Due to that I think it may be a good starting point (at least from a functional point of view). If I remember properly I think Aplix Web Runtime implemented (at least partially) this API.\n\n[1] http://bondi.omtp.org/1.5/pwd-2/bluetooth.htm\n[2] http://www.rococosoft.com/", "tags": [], "time": "2011-08-23T16:45:07Z", "creation_time": "2011-08-23T16:45:07Z", "author": "daniel.colomabaiges@telefonica.com", "is_private": false, "creator": "daniel.colomabaiges@telefonica.com"}, {"creation_time": "2011-09-01T11:04:46Z", "author": "johan.hedberg@gmail.com", "text": "Bluetooth is a quite complex stack of various protocols and profiles which allow you to do a wide variety of things, some of which are actually useful in practice and many which aren't. I'd therefore start off by creating a fairly minimal list of important use-cases the API needs to enable and then start drafting the API based on that.\n\nIf we take as an example a web application or game that wants to talk over Bluetooth to other remote instances of its kind the following set of API features could be useful:\n\n- Remote Device discovery\n\n- Pairing\n\n- Service discovery (in some stacks, like the Linux BlueZ this part is automatically performed after pairing, so you don't necessarily need a separate API for it). The minimum thing it should provide to the application is a list of profile UUIDs that a remote device supports.\n\n- Iterating through a list of remote devices the user has configured into use. This isn't necessarily a list of paired devices since not all devices will require pairing (e.g. this is optional for Bluetooth mice and it's likely that many upcoming single mode Bluetooth Low Energy devices wont have security).\n\n- Initiating connections as a client, both for RFCOMM and L2CAP. In its simplest form the only input parameters that should be needed are the remote address and the UUID of the profile that should be connected to. The stack should be able to handle the rest. It's a bit worrying that the bondi spec mentioned in the previous comment focuses mostly on RFCOMM support since RFCOMM is essentially a deprecated protocol (e.g. the Bluetooth SIG wont be coming out with any new RFCOMM based profiles anymore but are actively updating specs to use the new enhance L2CAP features. \n\n- Accepting incoming connections as server, both for RFCOMM and L2CAP. Here also the simplest API would be just a single UUID and whether this is a RFCOMM or L2CAP service. The stack should then be able to allocate the next free RFCOMM channel or PSM as well as construct a local SDP service record with the relevant UUIDs as well as the selected PSM or RFCOMM channel. There should also be the ability to set a security level for the service as well as whether the service requires authorization of incoming connections.", "time": "2011-09-01T11:04:46Z", "tags": [], "is_private": false, "creator": "johan.hedberg@gmail.com", "id": 5693237, "attachment_id": null, "raw_text": "Bluetooth is a quite complex stack of various protocols and profiles which allow you to do a wide variety of things, some of which are actually useful in practice and many which aren't. I'd therefore start off by creating a fairly minimal list of important use-cases the API needs to enable and then start drafting the API based on that.\n\nIf we take as an example a web application or game that wants to talk over Bluetooth to other remote instances of its kind the following set of API features could be useful:\n\n- Remote Device discovery\n\n- Pairing\n\n- Service discovery (in some stacks, like the Linux BlueZ this part is automatically performed after pairing, so you don't necessarily need a separate API for it). The minimum thing it should provide to the application is a list of profile UUIDs that a remote device supports.\n\n- Iterating through a list of remote devices the user has configured into use. This isn't necessarily a list of paired devices since not all devices will require pairing (e.g. this is optional for Bluetooth mice and it's likely that many upcoming single mode Bluetooth Low Energy devices wont have security).\n\n- Initiating connections as a client, both for RFCOMM and L2CAP. In its simplest form the only input parameters that should be needed are the remote address and the UUID of the profile that should be connected to. The stack should be able to handle the rest. It's a bit worrying that the bondi spec mentioned in the previous comment focuses mostly on RFCOMM support since RFCOMM is essentially a deprecated protocol (e.g. the Bluetooth SIG wont be coming out with any new RFCOMM based profiles anymore but are actively updating specs to use the new enhance L2CAP features. \n\n- Accepting incoming connections as server, both for RFCOMM and L2CAP. Here also the simplest API would be just a single UUID and whether this is a RFCOMM or L2CAP service. The stack should then be able to allocate the next free RFCOMM channel or PSM as well as construct a local SDP service record with the relevant UUIDs as well as the selected PSM or RFCOMM channel. There should also be the ability to set a security level for the service as well as whether the service requires authorization of incoming connections.", "bug_id": 674737, "count": 2}, {"bug_id": 674737, "count": 3, "id": 5693254, "attachment_id": null, "raw_text": "Don't forget pairing using NFC", "creation_time": "2011-09-01T11:17:59Z", "author": "webmaster@keryx.se", "text": "Don't forget pairing using NFC", "time": "2011-09-01T11:17:59Z", "tags": [], "is_private": false, "creator": "webmaster@keryx.se"}, {"count": 4, "creator": "gal@uci.edu", "is_private": false, "time": "2011-12-25T02:42:50Z", "tags": [], "bug_id": 674737, "text": "This is an initial API sketch. Discussion very welcome.\n\nnavigator.bluetooth.adaptor => currently selected default adaptor object\n\nadaptor object:\n\nadaptor.address\n\nvar request = adaptor.queryAdaptorState();\nrequest.onresult = function(state) {\n    state.name, state.enabled, state.discovering (boolean), state.scanMode, state.bondedDevices (array of devices)\n}\nrequest.onerror = function(error)\n\nadaptor.setName() // sets the friendly name\nadaptor.startDiscovery() // trigger a new discovery\nadaptor.ondiscovery\nadaptor.ondiscoveryfinished\nadaptor.ondevicefound = function(device) {\n}\nadaptor.onerror = function(error) {\n}\n\nadaptor.listen(name, uuid, { insecure: true })\nadaptor.onconnect = function(socket) {\n  // no data is received until this event has fired, so we can attach the right receive handler in here\n}\n\ndevice object:\n\ndevice.address\ndevice.majorDeviceClass (string)\ndevice.deviceClass (string)\ndevice.services (object with a property of value 'true' for each service supported)\n\nvar request = device.queryDeviceState();\nrequest.onresult = function(state) {\n  state.name, state.bonded, state.uuids (object with property of value 'true' for each uuid)\n}\nrequest.onerror = function(error)\n\ndevice.startServiceDiscovery(); // trigger a new service discovery\ndevice.onservicediscovery\ndevice.onservicediscoveryfinished\ndevice.onservicefound = function(uuid) {\n}\ndevice.onerror = function(error) {\n}\n\ndevice.connect(uuid)\ndevice.onconnect = function(socket) {\n  // no data is received until this event has fired, so we can attach the right receive handler in here\n}\n\nsocket object:\n\nsocket.device: remote device (object)\nsocket.onreceive = function(arraybuffer) {\n}\nsocket.send(arraybuffer, offset[=0], bytes[=all])\nsocket.close()\nsocket.onerror = function(error) {\n}", "author": "gal@uci.edu", "creation_time": "2011-12-25T02:42:50Z", "raw_text": "This is an initial API sketch. Discussion very welcome.\n\nnavigator.bluetooth.adaptor => currently selected default adaptor object\n\nadaptor object:\n\nadaptor.address\n\nvar request = adaptor.queryAdaptorState();\nrequest.onresult = function(state) {\n    state.name, state.enabled, state.discovering (boolean), state.scanMode, state.bondedDevices (array of devices)\n}\nrequest.onerror = function(error)\n\nadaptor.setName() // sets the friendly name\nadaptor.startDiscovery() // trigger a new discovery\nadaptor.ondiscovery\nadaptor.ondiscoveryfinished\nadaptor.ondevicefound = function(device) {\n}\nadaptor.onerror = function(error) {\n}\n\nadaptor.listen(name, uuid, { insecure: true })\nadaptor.onconnect = function(socket) {\n  // no data is received until this event has fired, so we can attach the right receive handler in here\n}\n\ndevice object:\n\ndevice.address\ndevice.majorDeviceClass (string)\ndevice.deviceClass (string)\ndevice.services (object with a property of value 'true' for each service supported)\n\nvar request = device.queryDeviceState();\nrequest.onresult = function(state) {\n  state.name, state.bonded, state.uuids (object with property of value 'true' for each uuid)\n}\nrequest.onerror = function(error)\n\ndevice.startServiceDiscovery(); // trigger a new service discovery\ndevice.onservicediscovery\ndevice.onservicediscoveryfinished\ndevice.onservicefound = function(uuid) {\n}\ndevice.onerror = function(error) {\n}\n\ndevice.connect(uuid)\ndevice.onconnect = function(socket) {\n  // no data is received until this event has fired, so we can attach the right receive handler in here\n}\n\nsocket object:\n\nsocket.device: remote device (object)\nsocket.onreceive = function(arraybuffer) {\n}\nsocket.send(arraybuffer, offset[=0], bytes[=all])\nsocket.close()\nsocket.onerror = function(error) {\n}", "attachment_id": null, "id": 5939023}, {"raw_text": "(In reply to Andreas Gal :gal from comment #4)\n> var request = adaptor.queryAdaptorState();\n> request.onresult = function(state) {\n>     state.name, state.enabled, state.discovering (boolean), state.scanMode,\n> state.bondedDevices (array of devices)\n> }\n> request.onerror = function(error)\n\n> var request = device.queryDeviceState();\n> request.onresult = function(state) {\n>   state.name, state.bonded, state.uuids (object with property of value\n> 'true' for each uuid)\n> }\n> request.onerror = function(error)\n\nNit:\nRequests object usually have a onsuccess function (and 'success' event), not onresult/result.\nIn addition, there is an event object passed to the method, not a state object. This event object can contain a state object. But what seems to be more usual is that request has a result attribute that is a state object.\nSo, we should have:\nvar request = adaptor.queryAdaptorState();\nrequest.onsuccess = function() {\n  var state = request.result;\n  state.name, state.enabled, state.discovering (boolean), state.scanMode, state.bondedDevices (array of devices)\n}\n\nI unfortunately can't really give any more interesting feedback on the API: I know nothing about Bluetooth.\n\nOh, btw, it might be interesting to add that draft to the wiki.", "attachment_id": null, "id": 5939199, "count": 5, "is_private": false, "creator": "mounir@lamouri.fr", "text": "(In reply to Andreas Gal :gal from comment #4)\n> var request = adaptor.queryAdaptorState();\n> request.onresult = function(state) {\n>     state.name, state.enabled, state.discovering (boolean), state.scanMode,\n> state.bondedDevices (array of devices)\n> }\n> request.onerror = function(error)\n\n> var request = device.queryDeviceState();\n> request.onresult = function(state) {\n>   state.name, state.bonded, state.uuids (object with property of value\n> 'true' for each uuid)\n> }\n> request.onerror = function(error)\n\nNit:\nRequests object usually have a onsuccess function (and 'success' event), not onresult/result.\nIn addition, there is an event object passed to the method, not a state object. This event object can contain a state object. But what seems to be more usual is that request has a result attribute that is a state object.\nSo, we should have:\nvar request = adaptor.queryAdaptorState();\nrequest.onsuccess = function() {\n  var state = request.result;\n  state.name, state.enabled, state.discovering (boolean), state.scanMode, state.bondedDevices (array of devices)\n}\n\nI unfortunately can't really give any more interesting feedback on the API: I know nothing about Bluetooth.\n\nOh, btw, it might be interesting to add that draft to the wiki.", "tags": [], "time": "2011-12-25T11:49:32Z", "bug_id": 674737, "creation_time": "2011-12-25T11:49:32Z", "author": "mounir@lamouri.fr"}, {"id": 5939371, "attachment_id": null, "raw_text": "#5 sounds good. Once Kyle had a chance to give some feedback (he knows bluetooth) we will put this on the wiki and mail it to dev-webapi.", "creation_time": "2011-12-25T17:17:31Z", "author": "gal@uci.edu", "text": "#5 sounds good. Once Kyle had a chance to give some feedback (he knows bluetooth) we will put this on the wiki and mail it to dev-webapi.", "tags": [], "time": "2011-12-25T17:17:31Z", "bug_id": 674737, "is_private": false, "creator": "gal@uci.edu", "count": 6}, {"author": "kyle@nonpolynomial.com", "creation_time": "2011-12-27T20:04:44Z", "bug_id": 674737, "tags": [], "time": "2011-12-27T20:04:44Z", "text": "From what I know of bluetooth (My knowledge of bluetooth now stretches back a full week :P ), this looks sane for doing the low level device enum work. It seems to be missing any way to actually bond with the device (passing secret keys, etc...), but I'm not exactly sure what the flow of that looks like quite yet, I've mostly been figuring out how to get the services started on gonk. \n\nI'm guessing we'll probably specialize more on top of this once we get into services (HID, headsets, etc...) but I think we can get through device enumeration with this.", "creator": "kyle@nonpolynomial.com", "is_private": false, "count": 7, "id": 5941440, "attachment_id": null, "raw_text": "From what I know of bluetooth (My knowledge of bluetooth now stretches back a full week :P ), this looks sane for doing the low level device enum work. It seems to be missing any way to actually bond with the device (passing secret keys, etc...), but I'm not exactly sure what the flow of that looks like quite yet, I've mostly been figuring out how to get the services started on gonk. \n\nI'm guessing we'll probably specialize more on top of this once we get into services (HID, headsets, etc...) but I think we can get through device enumeration with this."}, {"id": 5941497, "attachment_id": null, "raw_text": "Yeah, I left out some binding stuff and also high-level service abstractions (most bluetooth stacks directly support stuff like \"headset\" so you don't have to pipe audio data back and forth). Lets get started with this, I will spec out the rest as well.", "author": "gal@uci.edu", "creation_time": "2011-12-27T20:35:42Z", "tags": [], "bug_id": 674737, "time": "2011-12-27T20:35:42Z", "text": "Yeah, I left out some binding stuff and also high-level service abstractions (most bluetooth stacks directly support stuff like \"headset\" so you don't have to pipe audio data back and forth). Lets get started with this, I will spec out the rest as well.", "creator": "gal@uci.edu", "is_private": false, "count": 8}, {"count": 9, "is_private": false, "creator": "curtisk@mozilla.com", "text": "assinged to me for sec action to schedule a meeting", "bug_id": 674737, "tags": [], "time": "2012-03-28T21:18:53Z", "creation_time": "2012-03-28T21:18:53Z", "author": "curtisk@mozilla.com", "raw_text": "assinged to me for sec action to schedule a meeting", "attachment_id": null, "id": 6179674}, {"is_private": false, "creator": "mike@w3.org", "count": 10, "creation_time": "2015-04-13T01:08:54Z", "author": "mike@w3.org", "text": "Wondering if this bug now should be resolved in favor of https://bugzilla.mozilla.org/show_bug.cgi?id=1053673", "tags": [], "bug_id": 674737, "time": "2015-04-13T01:08:54Z", "attachment_id": null, "raw_text": "Wondering if this bug now should be resolved in favor of https://bugzilla.mozilla.org/show_bug.cgi?id=1053673", "id": 10145829}, {"count": 11, "creator": "wilsonpage@mozilla.com", "is_private": false, "tags": [], "bug_id": 674737, "time": "2016-03-15T07:52:48Z", "text": "Is this the bug we should be tracking for WebBluetooth [1] APIs across Gecko? Can we get a status update? \n\nBluetooth is going to be a critical API for us if web-apps are going to play in the connected-devices space. Chrome is shipping (behind a flag) and is already evangelising its use.\n\n[1] https://webbluetoothcg.github.io/web-bluetooth/", "author": "wilsonpage@mozilla.com", "creation_time": "2016-03-15T07:52:48Z", "raw_text": "Is this the bug we should be tracking for WebBluetooth [1] APIs across Gecko? Can we get a status update? \n\nBluetooth is going to be a critical API for us if web-apps are going to play in the connected-devices space. Chrome is shipping (behind a flag) and is already evangelising its use.\n\n[1] https://webbluetoothcg.github.io/web-bluetooth/", "attachment_id": null, "id": 11246778}, {"count": 12, "is_private": false, "creator": "thinker.li@gmail.com", "text": "Ben Tian would know better.", "tags": [], "time": "2016-03-15T08:39:16Z", "bug_id": 674737, "creation_time": "2016-03-15T08:39:16Z", "author": "thinker.li@gmail.com", "raw_text": "Ben Tian would know better.", "attachment_id": null, "id": 11246848}, {"id": 11246895, "raw_text": "(In reply to Wilson Page [:wilsonpage] from comment #11)\n> Is this the bug we should be tracking for WebBluetooth [1] APIs across\n> Gecko? Can we get a status update? \n\nWilson,\n\nWebBluetooth API implementation in Gecko is suspended now, since Platform team regards the API 1) has security problem [1] and 2) is low priority. You may use the non-standard API [2] in Gecko already.\n\n[1] https://github.com/WebBluetoothCG/web-bluetooth/issues/46\n[2] https://developer.mozilla.org/en-US/docs/Mozilla/Firefox_OS/API/Bluetooth_API#Gatt_interfaces", "attachment_id": null, "text": "(In reply to Wilson Page [:wilsonpage] from comment #11)\n> Is this the bug we should be tracking for WebBluetooth [1] APIs across\n> Gecko? Can we get a status update? \n\nWilson,\n\nWebBluetooth API implementation in Gecko is suspended now, since Platform team regards the API 1) has security problem [1] and 2) is low priority. You may use the non-standard API [2] in Gecko already.\n\n[1] https://github.com/WebBluetoothCG/web-bluetooth/issues/46\n[2] https://developer.mozilla.org/en-US/docs/Mozilla/Firefox_OS/API/Bluetooth_API#Gatt_interfaces", "bug_id": 674737, "tags": [], "time": "2016-03-15T09:05:51Z", "creation_time": "2016-03-15T09:05:51Z", "author": "ben.tian@gmail.com", "count": 13, "is_private": false, "creator": "ben.tian@gmail.com"}, {"creator": "wilsonpage@mozilla.com", "is_private": false, "author": "wilsonpage@mozilla.com", "creation_time": "2016-03-15T20:22:22Z", "tags": [], "time": "2016-03-15T20:22:22Z", "text": "(In reply to Ben Tian [:btian] from comment #13)\n> You may use the non-standard API [2] in Gecko already.\n\nThis looks like it's only available for fxos devices. Sounds like Mozilla should be working with Google to iron out these issues. Is that happening?\n\nI'm concerned if work on this is halted with no indication of moving forward. Without this API connected-devices teams will have to build many experiences as native apps.\n\nBen, can we re-open the discussion here with the relevant people?", "attachment_id": null, "raw_text": "(In reply to Ben Tian [:btian] from comment #13)\n> You may use the non-standard API [2] in Gecko already.\n\nThis looks like it's only available for fxos devices. Sounds like Mozilla should be working with Google to iron out these issues. Is that happening?\n\nI'm concerned if work on this is halted with no indication of moving forward. Without this API connected-devices teams will have to build many experiences as native apps.\n\nBen, can we re-open the discussion here with the relevant people?", "id": 11249220, "count": 14, "bug_id": 674737}, {"attachment_id": null, "raw_text": "@Ben: Has the Platform team validated the concerns in https://github.com/WebBluetoothCG/web-bluetooth/issues/46, or is it just that we don't know, and they don't think it's worth investing the resources to find out?", "id": 11249909, "creator": "jyasskin@gmail.com", "is_private": false, "author": "jyasskin@gmail.com", "creation_time": "2016-03-15T23:34:12Z", "time": "2016-03-15T23:34:12Z", "tags": [], "text": "@Ben: Has the Platform team validated the concerns in https://github.com/WebBluetoothCG/web-bluetooth/issues/46, or is it just that we don't know, and they don't think it's worth investing the resources to find out?", "count": 15, "bug_id": 674737}, {"count": 16, "creator": "ben.tian@gmail.com", "is_private": false, "tags": [], "time": "2016-03-16T01:52:39Z", "bug_id": 674737, "text": "(In reply to Jeffrey Yasskin from comment #15)\n> @Ben: Has the Platform team validated the concerns in\n> https://github.com/WebBluetoothCG/web-bluetooth/issues/46, or is it just\n> that we don't know, and they don't think it's worth investing the resources\n> to find out?\n\nJeffrey,\n\nAFAIK, :ekr from Mozilla has discussed the security concern with you but he's not convinced. Also I don't know the rationale behind the low priority decision. ni? :ekr to recap discussion.\n\n:ekr, can you help recap your discussion with Jeffrey and maybe answer his question above?", "author": "ben.tian@gmail.com", "creation_time": "2016-03-16T01:52:39Z", "raw_text": "(In reply to Jeffrey Yasskin from comment #15)\n> @Ben: Has the Platform team validated the concerns in\n> https://github.com/WebBluetoothCG/web-bluetooth/issues/46, or is it just\n> that we don't know, and they don't think it's worth investing the resources\n> to find out?\n\nJeffrey,\n\nAFAIK, :ekr from Mozilla has discussed the security concern with you but he's not convinced. Also I don't know the rationale behind the low priority decision. ni? :ekr to recap discussion.\n\n:ekr, can you help recap your discussion with Jeffrey and maybe answer his question above?", "attachment_id": null, "id": 11250250}, {"bug_id": 674737, "count": 17, "author": "ben.tian@gmail.com", "creation_time": "2016-03-16T01:57:32Z", "time": "2016-03-16T01:57:32Z", "tags": [], "text": "(In reply to Wilson Page [:wilsonpage] from comment #14)\n> This looks like it's only available for fxos devices. Sounds like Mozilla\n> should be working with Google to iron out these issues. Is that happening?\n\nPlease see comment 16.\n\n> I'm concerned if work on this is halted with no indication of moving\n> forward. Without this API connected-devices teams will have to build many\n> experiences as native apps.\n>\n> Ben, can we re-open the discussion here with the relevant people?\n\nI've ni?d ekr and Jeffrey from Google is here.", "creator": "ben.tian@gmail.com", "is_private": false, "id": 11250262, "attachment_id": null, "raw_text": "(In reply to Wilson Page [:wilsonpage] from comment #14)\n> This looks like it's only available for fxos devices. Sounds like Mozilla\n> should be working with Google to iron out these issues. Is that happening?\n\nPlease see comment 16.\n\n> I'm concerned if work on this is halted with no indication of moving\n> forward. Without this API connected-devices teams will have to build many\n> experiences as native apps.\n>\n> Ben, can we re-open the discussion here with the relevant people?\n\nI've ni?d ekr and Jeffrey from Google is here."}, {"attachment_id": null, "raw_text": "Ah, ok. I do owe ekr@ an essay about the tradeoffs we're facing here between forcing people onto native apps vs accepting imperfect security in web apps. None of the concerns he mentioned to me were related to the keyboard threat in https://github.com/WebBluetoothCG/web-bluetooth/issues/46.", "id": 11250306, "is_private": false, "creator": "jyasskin@gmail.com", "count": 18, "creation_time": "2016-03-16T02:26:43Z", "author": "jyasskin@gmail.com", "text": "Ah, ok. I do owe ekr@ an essay about the tradeoffs we're facing here between forcing people onto native apps vs accepting imperfect security in web apps. None of the concerns he mentioned to me were related to the keyboard threat in https://github.com/WebBluetoothCG/web-bluetooth/issues/46.", "time": "2016-03-16T02:26:43Z", "tags": [], "bug_id": 674737}, {"is_private": false, "creator": "ekr@rtfm.com", "count": 19, "creation_time": "2016-03-16T04:27:18Z", "author": "ekr@rtfm.com", "text": "The prioritization decision comes from platform management. Given that, we're backburnering the security analysis.", "tags": [], "bug_id": 674737, "time": "2016-03-16T04:27:18Z", "attachment_id": null, "raw_text": "The prioritization decision comes from platform management. Given that, we're backburnering the security analysis.", "id": 11250435}, {"text": "A post by Lukasz Olejnik around the privacy issues related to this API:\nhttps://blog.lukaszolejnik.com/w3c-web-bluetooth-api-privacy/\n\nMight be good to read over the above if we reconsider working on this API in the future.", "bug_id": 674737, "tags": [], "time": "2016-10-26T11:37:15Z", "creation_time": "2016-10-26T11:37:15Z", "author": "mcaceres@mozilla.com", "count": 20, "is_private": false, "creator": "mcaceres@mozilla.com", "id": 11814213, "raw_text": "A post by Lukasz Olejnik around the privacy issues related to this API:\nhttps://blog.lukaszolejnik.com/w3c-web-bluetooth-api-privacy/\n\nMight be good to read over the above if we reconsider working on this API in the future.", "attachment_id": null}, {"creator": "mwoolley@bluetooth.com", "is_private": false, "count": 21, "author": "mwoolley@bluetooth.com", "creation_time": "2017-10-16T10:47:33Z", "tags": [], "time": "2017-10-16T10:47:33Z", "bug_id": 674737, "text": "Hello, I work for the Bluetooth SIG. \n\nI'm interested in the potential which a W3C standard Bluetooth LE API for browsers offers, though I not also some of the concerns raised by others. I'd welcome seeing work actively underway between the various parties to see if issues can be satisfactorily addressed. Bluetooth LE APIs are in most other platforms, including the various smartphone platforms. Bluetooth is going to be used increasingly in enterprise computing scenarios and as such, cloud technology with web applications rather than native desktop applications is likely to be the preferred architecture.\n\nAside from expressing our support, is there anything more tangible which the Bluetooth SIG might be able to contribute? I'd be happy to discuss by phone or face to face.\n\nThanks\n\nMartin", "attachment_id": null, "raw_text": "Hello, I work for the Bluetooth SIG. \n\nI'm interested in the potential which a W3C standard Bluetooth LE API for browsers offers, though I not also some of the concerns raised by others. I'd welcome seeing work actively underway between the various parties to see if issues can be satisfactorily addressed. Bluetooth LE APIs are in most other platforms, including the various smartphone platforms. Bluetooth is going to be used increasingly in enterprise computing scenarios and as such, cloud technology with web applications rather than native desktop applications is likely to be the preferred architecture.\n\nAside from expressing our support, is there anything more tangible which the Bluetooth SIG might be able to contribute? I'd be happy to discuss by phone or face to face.\n\nThanks\n\nMartin", "id": 12762406}, {"raw_text": "", "attachment_id": null, "id": 13062871, "count": 22, "creator": "kyle@nonpolynomial.com", "is_private": false, "time": "2018-02-23T00:08:26Z", "bug_id": 674737, "tags": [], "text": "*** Bug 1438764 has been marked as a duplicate of this bug. ***", "author": "kyle@nonpolynomial.com", "creation_time": "2018-02-23T00:08:26Z"}, {"attachment_id": null, "raw_text": "We are currently evaluating feasibility of WebBluetooth, and will update both our platform position (https://github.com/mozilla/standards-positions) and this bug once that is finished. Due to resource constraints, this evaluation make some time, so we ask for your patience while this work happens.", "id": 13062891, "creator": "kyle@nonpolynomial.com", "is_private": false, "count": 23, "author": "kyle@nonpolynomial.com", "creation_time": "2018-02-23T00:11:16Z", "bug_id": 674737, "tags": [], "time": "2018-02-23T00:11:16Z", "text": "We are currently evaluating feasibility of WebBluetooth, and will update both our platform position (https://github.com/mozilla/standards-positions) and this bug once that is finished. Due to resource constraints, this evaluation make some time, so we ask for your patience while this work happens."}, {"raw_text": "Thanks, Kyle. I would love to have the opportunity to talk to the team about this, if possible.\n\nMartin\nBluetooth SIG", "attachment_id": null, "id": 13063309, "is_private": false, "creator": "mwoolley@bluetooth.com", "text": "Thanks, Kyle. I would love to have the opportunity to talk to the team about this, if possible.\n\nMartin\nBluetooth SIG", "tags": [], "time": "2018-02-23T06:55:17Z", "creation_time": "2018-02-23T06:55:17Z", "author": "mwoolley@bluetooth.com", "count": 24, "bug_id": 674737}, {"author": "kyle@nonpolynomial.com", "creation_time": "2018-02-23T07:00:33Z", "tags": [], "time": "2018-02-23T07:00:33Z", "bug_id": 674737, "text": "I pretty much am the team, so feel free to throw me an email at qdot@mozilla.com.", "creator": "kyle@nonpolynomial.com", "is_private": false, "count": 25, "id": 13063320, "attachment_id": null, "raw_text": "I pretty much am the team, so feel free to throw me an email at qdot@mozilla.com."}, {"author": "brentkimmel@brentkimmel.com", "creation_time": "2018-02-23T21:30:46Z", "bug_id": 674737, "tags": [], "time": "2018-02-23T21:30:46Z", "text": "I'm not from a SIG or anything, but as a good citizen of the \"Open Web\" I want to second Martin's sentiment regarding how important this standard is to the Web. I believe that like Service Worker, the Mozilla team is the most important catalyst in the conversion of this from \"One-off experiment\" to \"responsibly implemented feature of the web\".", "creator": "brentkimmel@brentkimmel.com", "is_private": false, "count": 26, "id": 13065332, "attachment_id": null, "raw_text": "I'm not from a SIG or anything, but as a good citizen of the \"Open Web\" I want to second Martin's sentiment regarding how important this standard is to the Web. I believe that like Service Worker, the Mozilla team is the most important catalyst in the conversion of this from \"One-off experiment\" to \"responsibly implemented feature of the web\"."}, {"text": "As a teacher of IoT and CS, I find many students wanting to integrate their BLE devices into their web applications.  I strongly feel this standard should be implemented soon.", "tags": [], "time": "2018-05-01T21:32:27Z", "bug_id": 674737, "creation_time": "2018-05-01T21:32:27Z", "author": "eeisaman@auburnschl.edu", "count": 27, "is_private": false, "creator": "eeisaman@auburnschl.edu", "id": 13247203, "raw_text": "As a teacher of IoT and CS, I find many students wanting to integrate their BLE devices into their web applications.  I strongly feel this standard should be implemented soon.", "attachment_id": null}, {"count": 28, "is_private": false, "creator": "jaustin@vernier.com", "text": "Just wondering what the status is on this discussion. It appears that maybe the security concerns have been somewhat satisfied? Has any development work been done to implement Web Bluetooth in Firefox?", "tags": [], "time": "2019-01-14T17:03:28Z", "bug_id": 674737, "creation_time": "2019-01-14T17:03:28Z", "author": "jaustin@vernier.com", "raw_text": "Just wondering what the status is on this discussion. It appears that maybe the security concerns have been somewhat satisfied? Has any development work been done to implement Web Bluetooth in Firefox?", "attachment_id": null, "id": 13861188}, {"bug_id": 674737, "count": 29, "id": 15720971, "attachment_id": null, "raw_text": "What is the current status of WebBluetooth in Firefox?  Has it stalled?", "creation_time": "2022-01-06T05:30:01Z", "author": "rhills@medimorphosis.com.au", "text": "What is the current status of WebBluetooth in Firefox?  Has it stalled?", "tags": [], "time": "2022-01-06T05:30:01Z", "is_private": false, "creator": "rhills@medimorphosis.com.au"}, {"bug_id": 674737, "count": 30, "id": 15721025, "raw_text": "My impression is that work on Web Bluetooth never started. I work for the Bluetooth SIG and would like to repeat an offer I made in the past. If there's anything I can do to help address whatever issues are preventing this feature being implemented in Firefox, please let me know. I can't help with resourcing but I can certainly help people get up to date with the Bluetooth Low Energy of today. Over to you :-)", "attachment_id": null, "text": "My impression is that work on Web Bluetooth never started. I work for the Bluetooth SIG and would like to repeat an offer I made in the past. If there's anything I can do to help address whatever issues are preventing this feature being implemented in Firefox, please let me know. I can't help with resourcing but I can certainly help people get up to date with the Bluetooth Low Energy of today. Over to you :-)", "time": "2022-01-06T07:51:31Z", "tags": [], "creation_time": "2022-01-06T07:51:31Z", "author": "mwoolley@bluetooth.com", "is_private": false, "creator": "mwoolley@bluetooth.com"}, {"attachment_id": null, "raw_text": "The current Mozilla position on this API according to their Standards Positions page is that it is harmful:\n\n1. Public dashboard summary: https://mozilla.github.io/standards-positions/#web-bluetooth\n\n2. More detailed discussion: https://github.com/mozilla/standards-positions/issues/95#issuecomment-644962468", "id": 15723063, "is_private": false, "creator": "hzbz@pm.me", "count": 31, "creation_time": "2022-01-07T18:33:02Z", "author": "hzbz@pm.me", "text": "The current Mozilla position on this API according to their Standards Positions page is that it is harmful:\n\n1. Public dashboard summary: https://mozilla.github.io/standards-positions/#web-bluetooth\n\n2. More detailed discussion: https://github.com/mozilla/standards-positions/issues/95#issuecomment-644962468", "tags": [], "time": "2022-01-07T18:33:02Z", "bug_id": 674737}]}}, "comments": {}}