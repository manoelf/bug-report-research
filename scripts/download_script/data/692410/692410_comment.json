{"bugs": {"692410": {"comments": [{"creator": "zajec5@gmail.com", "author": "zajec5@gmail.com", "bug_id": 692410, "count": 0, "is_private": false, "tags": [], "id": 5762925, "text": "Created attachment 565172\ndrag.and.drop.html\n\nUser Agent: Opera/9.80 (X11; Linux i686; U; pl) Presto/2.9.168 Version/11.51\n\nSteps to reproduce:\n\nI called event.setDragImage(...) *before* restyling original element. I expected browser to create drag feedback using old styles and *after that* apply new styles for original element.\n\n\nActual results:\n\nGecko seemed to execute event.setDragImage(...) not immediately, but after executing whole dragstart handler.\n\n\nExpected results:\n\nLook of dragged element (the original one) should be slightly different than drag feedback element (the one under the cursor).", "time": "2011-10-06T10:13:05Z", "attachment_id": 565172, "creation_time": "2011-10-06T10:13:05Z", "raw_text": "User Agent: Opera/9.80 (X11; Linux i686; U; pl) Presto/2.9.168 Version/11.51\n\nSteps to reproduce:\n\nI called event.setDragImage(...) *before* restyling original element. I expected browser to create drag feedback using old styles and *after that* apply new styles for original element.\n\n\nActual results:\n\nGecko seemed to execute event.setDragImage(...) not immediately, but after executing whole dragstart handler.\n\n\nExpected results:\n\nLook of dragged element (the original one) should be slightly different than drag feedback element (the one under the cursor)."}, {"creator": "zajec5@gmail.com", "author": "zajec5@gmail.com", "tags": [], "count": 1, "is_private": false, "id": 5762928, "bug_id": 692410, "raw_text": "I've originally reported this issue in:\nMessage-ID: <CACna6rzq6C5ZcmNK5D77fFsdCYdVYz11z9RYZBSKpCCNgr-EUQ@mail.gmail.com>\n\nInteresting: Webkit is affected by the same issue, see https://bugs.webkit.org/show_bug.cgi?id=69165", "creation_time": "2011-10-06T10:14:38Z", "text": "I've originally reported this issue in:\nMessage-ID: <CACna6rzq6C5ZcmNK5D77fFsdCYdVYz11z9RYZBSKpCCNgr-EUQ@mail.gmail.com>\n\nInteresting: Webkit is affected by the same issue, see https://bugs.webkit.org/show_bug.cgi?id=69165", "time": "2011-10-06T10:14:38Z", "attachment_id": null}, {"bug_id": 692410, "tags": [], "is_private": false, "count": 2, "id": 5763080, "text": "setDragImage stores a pointer to the node.  The actual drag bitmap is generated as the default action of the dragstart event, which is of course after your style change.\n\nThe spec does seem to require that the bitmap generation happen synchronously under setDragImage...", "attachment_id": null, "time": "2011-10-06T12:21:16Z", "creation_time": "2011-10-06T12:21:16Z", "raw_text": "setDragImage stores a pointer to the node.  The actual drag bitmap is generated as the default action of the dragstart event, which is of course after your style change.\n\nThe spec does seem to require that the bitmap generation happen synchronously under setDragImage...", "creator": "bzbarsky@mit.edu", "author": "bzbarsky@mit.edu"}, {"bug_id": 692410, "tags": [], "is_private": false, "count": 3, "id": 5763098, "text": "(In reply to Boris Zbarsky (:bz) from comment #2)\n> setDragImage stores a pointer to the node.  The actual drag bitmap is\n> generated as the default action of the dragstart event, which is of course\n> after your style change.\n\nIt sounds sane to render drag feedback after 'dragstart' finishes, scripter is allowed to call \"setDrawImage\" multiple times, and we would get flickering drag feedback the other way.\n\nIf we assume setDragImage should generate bitmap immediately, we could probably\n1) Generate hidden bitmap every time setDragImage is called\n2) Render hidden bitmap as drag feedback after executing whole 'dragstart' handler.\n\n\n> The spec does seem to require that the bitmap generation happen\n> synchronously under setDragImage...\n\nShould we ask WHATWG to clarify that?\n\n\nP.S.\nSorry for choosing wrong Component, thanks for fixing.", "creator": "zajec5@gmail.com", "author": "zajec5@gmail.com", "attachment_id": null, "time": "2011-10-06T12:36:09Z", "creation_time": "2011-10-06T12:36:09Z", "raw_text": "(In reply to Boris Zbarsky (:bz) from comment #2)\n> setDragImage stores a pointer to the node.  The actual drag bitmap is\n> generated as the default action of the dragstart event, which is of course\n> after your style change.\n\nIt sounds sane to render drag feedback after 'dragstart' finishes, scripter is allowed to call \"setDrawImage\" multiple times, and we would get flickering drag feedback the other way.\n\nIf we assume setDragImage should generate bitmap immediately, we could probably\n1) Generate hidden bitmap every time setDragImage is called\n2) Render hidden bitmap as drag feedback after executing whole 'dragstart' handler.\n\n\n> The spec does seem to require that the bitmap generation happen\n> synchronously under setDragImage...\n\nShould we ask WHATWG to clarify that?\n\n\nP.S.\nSorry for choosing wrong Component, thanks for fixing."}, {"creator": "bzbarsky@mit.edu", "author": "bzbarsky@mit.edu", "raw_text": "> 1) Generate hidden bitmap every time setDragImage is called\n> 2) Render hidden bitmap as drag feedback after executing whole 'dragstart' handler.\n\nYeah, that's what the spec calls for right now.\n\n> Should we ask WHATWG to clarify that?\n\nWell, the current spec is clear enough.... just not what we implement.\n\nIt may be worth suggesting a spec change if neither we nor webkit do what it says right now, though.", "creation_time": "2011-10-06T13:39:40Z", "text": "> 1) Generate hidden bitmap every time setDragImage is called\n> 2) Render hidden bitmap as drag feedback after executing whole 'dragstart' handler.\n\nYeah, that's what the spec calls for right now.\n\n> Should we ask WHATWG to clarify that?\n\nWell, the current spec is clear enough.... just not what we implement.\n\nIt may be worth suggesting a spec change if neither we nor webkit do what it says right now, though.", "time": "2011-10-06T13:39:40Z", "attachment_id": null, "tags": [], "is_private": false, "count": 4, "id": 5763185, "bug_id": 692410}, {"bug_id": 692410, "tags": [], "is_private": false, "count": 5, "id": 5764048, "text": "Thanks Boris. I've downloaded Firefox sources and tried to understand the code. AFAIU the current order is something like this:\n\nJS call of setDragImage results in:\n1) content/events/src/nsDOMDataTransfer.cpp\nnsDOMDataTransfer::SetDragImage\nThis function sets class's mDragImage variable to the node.\n\n\"dragstart\" handler finishes and following function is called:\n2) content/events/src/nsEventStateManager.cpp\nnsEventStateManager::DoDefaultDragStart\nThis function reads element from which we generate image.\nIt gets image (node) reference by GetDragImage call.\nThen it finally calls InvokeDragSessionWithImage\n\n3) widget/src/xpwidgets/nsBaseDragService.cpp\nnsBaseDragService::InvokeDragSessionWithImage\nThis functions sets class's mDragImage variable\n\nAfter some time I believe the following function gets called:\n4) widget/src/xpwidgets/nsBaseDragService.cpp\nnsBaseDragService::DrawDrag\nI guess this functions finally generates bitmap from node with:\nnsIPresShell* presShell = GetPresShellForContent(dragNode);", "creator": "zajec5@gmail.com", "author": "zajec5@gmail.com", "attachment_id": null, "time": "2011-10-06T18:10:31Z", "raw_text": "Thanks Boris. I've downloaded Firefox sources and tried to understand the code. AFAIU the current order is something like this:\n\nJS call of setDragImage results in:\n1) content/events/src/nsDOMDataTransfer.cpp\nnsDOMDataTransfer::SetDragImage\nThis function sets class's mDragImage variable to the node.\n\n\"dragstart\" handler finishes and following function is called:\n2) content/events/src/nsEventStateManager.cpp\nnsEventStateManager::DoDefaultDragStart\nThis function reads element from which we generate image.\nIt gets image (node) reference by GetDragImage call.\nThen it finally calls InvokeDragSessionWithImage\n\n3) widget/src/xpwidgets/nsBaseDragService.cpp\nnsBaseDragService::InvokeDragSessionWithImage\nThis functions sets class's mDragImage variable\n\nAfter some time I believe the following function gets called:\n4) widget/src/xpwidgets/nsBaseDragService.cpp\nnsBaseDragService::DrawDrag\nI guess this functions finally generates bitmap from node with:\nnsIPresShell* presShell = GetPresShellForContent(dragNode);", "creation_time": "2011-10-06T18:10:31Z"}, {"raw_text": "Now the question, how we should fix this issue? I can see two ways of doing this:\n\n1) Generate bitmap early, right after SetDragImage gets called\nThis probably would require doing GetPresShellForContent in nsDOMDataTransfer::SetDragImage, changing a lot of types (return type of GetDragImage, parameter of InvokeDragSessionWithImage, etc.). Getting this working without breaking functions like addElement could be really tricky.\n\n2) Clone the node pointed by SetDragImage to avoid propagation of changes performed on the original node. This would let us avoid problem with restyling of original element after SetDragImage call. Maybe this sounds a little more hacky, but should be much easier to implement.\n\nWhat do you think about that ideas?", "creation_time": "2011-10-06T18:18:53Z", "time": "2011-10-06T18:18:53Z", "attachment_id": null, "text": "Now the question, how we should fix this issue? I can see two ways of doing this:\n\n1) Generate bitmap early, right after SetDragImage gets called\nThis probably would require doing GetPresShellForContent in nsDOMDataTransfer::SetDragImage, changing a lot of types (return type of GetDragImage, parameter of InvokeDragSessionWithImage, etc.). Getting this working without breaking functions like addElement could be really tricky.\n\n2) Clone the node pointed by SetDragImage to avoid propagation of changes performed on the original node. This would let us avoid problem with restyling of original element after SetDragImage call. Maybe this sounds a little more hacky, but should be much easier to implement.\n\nWhat do you think about that ideas?", "id": 5764085, "tags": [], "count": 6, "is_private": false, "bug_id": 692410, "author": "zajec5@gmail.com", "creator": "zajec5@gmail.com"}, {"creator": "bzbarsky@mit.edu", "author": "bzbarsky@mit.edu", "bug_id": 692410, "tags": [], "is_private": false, "count": 7, "id": 5764183, "text": "#2 is actually a pain, because styles depend on the exact position in the DOM tree, so getting the styles to work right on the clone would be very complicated.\n\nGenerating the image bitmap early or changing the spec are the ways to go here....", "attachment_id": null, "time": "2011-10-06T18:40:53Z", "raw_text": "#2 is actually a pain, because styles depend on the exact position in the DOM tree, so getting the styles to work right on the clone would be very complicated.\n\nGenerating the image bitmap early or changing the spec are the ways to go here....", "creation_time": "2011-10-06T18:40:53Z"}, {"bug_id": 692410, "count": 8, "is_private": false, "tags": [], "id": 5764185, "text": "Oh, and comment 5 is pretty much spot-on; the actual bitmap generation happens in the DrawDragForImage calls in DrawDrag.", "creator": "bzbarsky@mit.edu", "attachment_id": null, "time": "2011-10-06T18:42:04Z", "author": "bzbarsky@mit.edu", "raw_text": "Oh, and comment 5 is pretty much spot-on; the actual bitmap generation happens in the DrawDragForImage calls in DrawDrag.", "creation_time": "2011-10-06T18:42:04Z"}, {"id": 5764229, "is_private": false, "count": 9, "tags": [], "bug_id": 692410, "creation_time": "2011-10-06T18:54:35Z", "raw_text": "Safari does the same thing that we do.", "time": "2011-10-06T18:54:35Z", "attachment_id": null, "author": "enndeakin@gmail.com", "creator": "enndeakin@gmail.com", "text": "Safari does the same thing that we do."}, {"bug_id": 692410, "tags": [], "count": 10, "is_private": false, "id": 5765743, "text": "(In reply to Neil Deakin from comment #9)\n> Safari does the same thing that we do.\n\nSafari is Webkit based and this engine is know to be also affected by this issue. See comment 1", "time": "2011-10-07T06:24:31Z", "attachment_id": null, "creation_time": "2011-10-07T06:24:31Z", "raw_text": "(In reply to Neil Deakin from comment #9)\n> Safari does the same thing that we do.\n\nSafari is Webkit based and this engine is know to be also affected by this issue. See comment 1", "creator": "zajec5@gmail.com", "author": "zajec5@gmail.com"}, {"raw_text": "Bulk-downgrade of unassigned, >=5 years untouched DOM/Storage bugs' priority.\n\nIf you have reason to believe this is wrong (especially for the severity), please write a comment and ni :jstutte.", "creation_time": "2020-12-16T11:13:18Z", "attachment_id": null, "time": "2020-12-16T11:13:18Z", "text": "Bulk-downgrade of unassigned, >=5 years untouched DOM/Storage bugs' priority.\n\nIf you have reason to believe this is wrong (especially for the severity), please write a comment and ni :jstutte.", "id": 15178491, "is_private": false, "count": 11, "tags": [], "bug_id": 692410, "author": "jstutte@mozilla.com", "creator": "jstutte@mozilla.com"}]}}, "comments": {}}