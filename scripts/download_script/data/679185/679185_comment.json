{"comments": {}, "bugs": {"679185": {"comments": [{"creator": "netzen@gmail.com", "is_private": false, "creation_time": "2011-08-15T23:05:29Z", "attachment_id": 553295, "tags": [], "author": "netzen@gmail.com", "count": 0, "text": "Created attachment 553295\nSteps to reproduce (Must run as file:// URL though)\n\nIf you copy (Ctrl+C) from an HTML page that has an anchor with an absolute URL specified such as <a href=\"/test/\">test</a>, and you paste it into a content editable field, it will strip out the link but keep the anchor tag.\n\nThe problem seems to happen on paste and not on copy because you can copy from a different browser and paste in Firefox and the problem is still present.  Other browsers preserve the links whether they are absolute or include the URL scheme. We only work if the URL scheme is present such as <a href=\"http://test/\">test</a>. \n\nFurthermore, if you copy from Firefox and paste in another browser it preserves the link, so we are generating the CF_HTML correctly.  \n\nSo we are either not parsing the CF_HTML correctly, or we have some other measure that is stripping out the link once it reaches the DOM.", "id": 5655519, "bug_id": 679185, "raw_text": "If you copy (Ctrl+C) from an HTML page that has an anchor with an absolute URL specified such as <a href=\"/test/\">test</a>, and you paste it into a content editable field, it will strip out the link but keep the anchor tag.\n\nThe problem seems to happen on paste and not on copy because you can copy from a different browser and paste in Firefox and the problem is still present.  Other browsers preserve the links whether they are absolute or include the URL scheme. We only work if the URL scheme is present such as <a href=\"http://test/\">test</a>. \n\nFurthermore, if you copy from Firefox and paste in another browser it preserves the link, so we are generating the CF_HTML correctly.  \n\nSo we are either not parsing the CF_HTML correctly, or we have some other measure that is stripping out the link once it reaches the DOM.", "time": "2011-08-15T23:05:29Z"}, {"tags": [], "raw_text": "Strangely enough you need to save the attachment so it loads from a file URL to reproduce with that file.\n\nYou can also reproduce this problem though from an http location.  Simply go into IE and load slashdot.org, and copy the link that looks like: \nRead the 11 comments\nPaste it in the same field as the attachment and it will strip the link. \n\nCopy/pasting from and to Firefox for that link will paste the link correctly.  So I think this is related to parsing the CF_HTML somehow.", "attachment_id": null, "time": "2011-08-15T23:12:46Z", "creation_time": "2011-08-15T23:12:46Z", "is_private": false, "id": 5655541, "bug_id": 679185, "count": 1, "text": "Strangely enough you need to save the attachment so it loads from a file URL to reproduce with that file.\n\nYou can also reproduce this problem though from an http location.  Simply go into IE and load slashdot.org, and copy the link that looks like: \nRead the 11 comments\nPaste it in the same field as the attachment and it will strip the link. \n\nCopy/pasting from and to Firefox for that link will paste the link correctly.  So I think this is related to parsing the CF_HTML somehow.", "author": "netzen@gmail.com", "creator": "netzen@gmail.com"}, {"time": "2011-08-15T23:40:41Z", "raw_text": "I think this happens because nsTreeSanitizer::SanitizeAttributes tries to sanitize the href attribute on the anchor element.  I _think_ that we should just not do that.\n\nBrian, does this also happen with Firefox 5?", "author": "ehsan.akhgari@gmail.com", "text": "I think this happens because nsTreeSanitizer::SanitizeAttributes tries to sanitize the href attribute on the anchor element.  I _think_ that we should just not do that.\n\nBrian, does this also happen with Firefox 5?", "count": 2, "id": 5655634, "bug_id": 679185, "attachment_id": null, "tags": [], "creator": "ehsan.akhgari@gmail.com", "is_private": false, "creation_time": "2011-08-15T23:40:41Z"}, {"tags": [], "time": "2011-08-16T00:06:36Z", "raw_text": "This happens with Firefox 5 and nightly yes.\nThanks for the tips I'll start looking there when I start on this task.", "attachment_id": null, "id": 5655696, "bug_id": 679185, "creation_time": "2011-08-16T00:06:36Z", "is_private": false, "creator": "netzen@gmail.com", "text": "This happens with Firefox 5 and nightly yes.\nThanks for the tips I'll start looking there when I start on this task.", "count": 3, "author": "netzen@gmail.com"}, {"tags": [], "raw_text": "As it turns out the file:// URI bug and the IE bug are 2 completely different bugs.  I posted the IE bug in Bug 680115.  I will use this ticket for the file:// URI bug.", "attachment_id": null, "time": "2011-08-18T16:17:05Z", "is_private": false, "creation_time": "2011-08-18T16:17:05Z", "bug_id": 679185, "id": 5662661, "count": 4, "text": "As it turns out the file:// URI bug and the IE bug are 2 completely different bugs.  I posted the IE bug in Bug 680115.  I will use this ticket for the file:// URI bug.", "author": "netzen@gmail.com", "creator": "netzen@gmail.com"}, {"tags": [], "time": "2011-08-18T16:30:27Z", "raw_text": "So the problem with copy / paste from a file:// URL is that during sanitizing, nsScriptSecuurityManager::CheckLoadURIWithPrincipal returns NS_ERROR_DOM_BAD_URI because \"checkloaduri\" is on.\n\nBut \"checkloaduri\" is defined to be: \n\"checkloaduri will disable file:// URLs on pages from a network (http: https: ftp:) source, for security reasons.\"\nWe are trying to paste on a  file:// URL... not an http:, https, nor ftp: URL.\nSo it should be allowed.\n\nnsHTMLEditor::ParseFragment calls nsTreeSanitizer::Sanitize which in turn calls nsTreeSanitizer::SanitizeURL which in turn obtains the security manager and calls rv = secMan->CheckLoadURIWithPrincipal(sNullPrincipal, attrURI, flags);\n\nThe null principal is what makes the function secMan->CheckLoadURIWithPrincipal fail towards the end because we do:\nrv = LookupPolicy with the null principal and \"checkloaduri\".  The call succeeds but the security level is set to uninitialized.\nThe return check does:\nif (NS_SUCCEEDED(rv) && secLevel.level == SCRIPT_SECURITY_ALL_ACCESS)\n{\n  return NS_OK;\n}\nreturn NS_ERROR_DOM_BAD_URI;\n\n\nsince secLevel.level was uninitialized because of the null principal we were always returning NS_ERROR_DOM_BAD_URI for file URIs from calls to nsTreeSanitizer::Sanitize.", "attachment_id": 554113, "id": 5662702, "bug_id": 679185, "creation_time": "2011-08-18T16:30:27Z", "is_private": false, "creator": "netzen@gmail.com", "count": 5, "text": "Created attachment 554113\nPatch for null principal causing removed links\n\nSo the problem with copy / paste from a file:// URL is that during sanitizing, nsScriptSecuurityManager::CheckLoadURIWithPrincipal returns NS_ERROR_DOM_BAD_URI because \"checkloaduri\" is on.\n\nBut \"checkloaduri\" is defined to be: \n\"checkloaduri will disable file:// URLs on pages from a network (http: https: ftp:) source, for security reasons.\"\nWe are trying to paste on a  file:// URL... not an http:, https, nor ftp: URL.\nSo it should be allowed.\n\nnsHTMLEditor::ParseFragment calls nsTreeSanitizer::Sanitize which in turn calls nsTreeSanitizer::SanitizeURL which in turn obtains the security manager and calls rv = secMan->CheckLoadURIWithPrincipal(sNullPrincipal, attrURI, flags);\n\nThe null principal is what makes the function secMan->CheckLoadURIWithPrincipal fail towards the end because we do:\nrv = LookupPolicy with the null principal and \"checkloaduri\".  The call succeeds but the security level is set to uninitialized.\nThe return check does:\nif (NS_SUCCEEDED(rv) && secLevel.level == SCRIPT_SECURITY_ALL_ACCESS)\n{\n  return NS_OK;\n}\nreturn NS_ERROR_DOM_BAD_URI;\n\n\nsince secLevel.level was uninitialized because of the null principal we were always returning NS_ERROR_DOM_BAD_URI for file URIs from calls to nsTreeSanitizer::Sanitize.", "author": "netzen@gmail.com"}, {"text": "Comment on attachment 554113\nPatch for null principal causing removed links\n\nI believe we use a null principal here quite on purpose; in particular, sanitizing HTML in a file:// context should not allow the result to link to file:// images, right?.\n\nI think that Ehsan is right.  We should probably use the codebase principal of attrURI for <a href>, since the only reason we sanitize that is to strip out javascript: and the like....", "count": 6, "author": "bzbarsky@mit.edu", "id": 5672955, "bug_id": 679185, "time": "2011-08-23T20:49:51Z", "raw_text": "I believe we use a null principal here quite on purpose; in particular, sanitizing HTML in a file:// context should not allow the result to link to file:// images, right?.\n\nI think that Ehsan is right.  We should probably use the codebase principal of attrURI for <a href>, since the only reason we sanitize that is to strip out javascript: and the like....", "creator": "bzbarsky@mit.edu", "creation_time": "2011-08-23T20:49:51Z", "is_private": false, "attachment_id": 554113, "tags": []}, {"text": "Bulk-downgrade of unassigned, >=5 years untouched DOM/Storage bugs' priority and severity.\n\nIf you have reason to believe this is wrong, please write a comment and ni :jstutte.", "count": 7, "author": "jstutte@mozilla.com", "bug_id": 679185, "id": 15175688, "raw_text": "Bulk-downgrade of unassigned, >=5 years untouched DOM/Storage bugs' priority and severity.\n\nIf you have reason to believe this is wrong, please write a comment and ni :jstutte.", "time": "2020-12-15T07:15:24Z", "creator": "jstutte@mozilla.com", "is_private": false, "creation_time": "2020-12-15T07:15:24Z", "attachment_id": null, "tags": []}]}}}