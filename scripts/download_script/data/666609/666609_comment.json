{"bugs": {"666609": {"comments": [{"creator": "jmuizelaar@mozilla.com", "author": "jmuizelaar@mozilla.com", "is_private": false, "count": 0, "tags": [], "id": 5551276, "bug_id": 666609, "raw_text": "For example:\n\n#import <Foundation/Foundation.h>\n#include <algorithm>\nvoid f()\n{\n@try {\n} @catch(NSException *_exn) {\n}\n}\n\ngives the following errors:\n\nreduc.mm:5: error: stray \u2018@\u2019 in program\nreduc.mm:6: error: stray \u2018@\u2019 in program", "creation_time": "2011-06-23T16:26:14Z", "text": "For example:\n\n#import <Foundation/Foundation.h>\n#include <algorithm>\nvoid f()\n{\n@try {\n} @catch(NSException *_exn) {\n}\n}\n\ngives the following errors:\n\nreduc.mm:5: error: stray \u2018@\u2019 in program\nreduc.mm:6: error: stray \u2018@\u2019 in program", "time": "2011-06-23T16:26:14Z", "attachment_id": null}, {"id": 5551445, "is_private": false, "count": 1, "tags": [], "bug_id": 666609, "creation_time": "2011-06-23T17:25:29Z", "raw_text": "Odd. I wouldn't think -fno-exceptions would imply -fno-objc-exceptions. If you stick -fobj-exceptions in the CXXFLAGS after -fno-exceptions, does this compile?", "time": "2011-06-23T17:25:29Z", "attachment_id": null, "text": "Odd. I wouldn't think -fno-exceptions would imply -fno-objc-exceptions. If you stick -fobj-exceptions in the CXXFLAGS after -fno-exceptions, does this compile?", "author": "ted@mielczarek.org", "creator": "ted@mielczarek.org"}, {"creator": "jmuizelaar@mozilla.com", "author": "jmuizelaar@mozilla.com", "raw_text": "(In reply to comment #1)\n> Odd. I wouldn't think -fno-exceptions would imply -fno-objc-exceptions. If\n> you stick -fobj-exceptions in the CXXFLAGS after -fno-exceptions, does this\n> compile?\n\nNo.\n\nBuilding with:\ng++ -c -fno-exceptions -fobjc-exceptions reduc.mm\ngives the error\n\ntaking out #include <algorithm> fixes it.", "creation_time": "2011-06-23T17:31:22Z", "text": "(In reply to comment #1)\n> Odd. I wouldn't think -fno-exceptions would imply -fno-objc-exceptions. If\n> you stick -fobj-exceptions in the CXXFLAGS after -fno-exceptions, does this\n> compile?\n\nNo.\n\nBuilding with:\ng++ -c -fno-exceptions -fobjc-exceptions reduc.mm\ngives the error\n\ntaking out #include <algorithm> fixes it.", "attachment_id": null, "time": "2011-06-23T17:31:22Z", "tags": [], "is_private": false, "count": 2, "id": 5551462, "bug_id": 666609}, {"raw_text": "Okay, that's odd. We wrap the STL headers in order to force exceptions off. For GCC, the template is here:\nhttp://mxr.mozilla.org/mozilla-central/source/config/gcc-stl-wrapper.template.h\n\nPresumably the bug lies in there somewhere, or in one of the headers it includes. You can find the generated version in $objdir/dist/stl_wrappers/algorithm", "creation_time": "2011-06-23T17:43:28Z", "text": "Okay, that's odd. We wrap the STL headers in order to force exceptions off. For GCC, the template is here:\nhttp://mxr.mozilla.org/mozilla-central/source/config/gcc-stl-wrapper.template.h\n\nPresumably the bug lies in there somewhere, or in one of the headers it includes. You can find the generated version in $objdir/dist/stl_wrappers/algorithm", "attachment_id": null, "time": "2011-06-23T17:43:28Z", "count": 3, "is_private": false, "tags": [], "id": 5551506, "bug_id": 666609, "creator": "ted@mielczarek.org", "author": "ted@mielczarek.org"}, {"creator": "cjones.bugs@gmail.com", "author": "cjones.bugs@gmail.com", "text": "I don't fully understand ... the error in comment 0 sure sounds like lack of objc exceptions, and the same error in comment 2 sounds like more of same.  If you remove the -fno-exceptions from the compile line entirely, what happens?  (That might trump -fobjc-exceptions.)", "attachment_id": null, "time": "2011-06-23T17:54:07Z", "creation_time": "2011-06-23T17:54:07Z", "raw_text": "I don't fully understand ... the error in comment 0 sure sounds like lack of objc exceptions, and the same error in comment 2 sounds like more of same.  If you remove the -fno-exceptions from the compile line entirely, what happens?  (That might trump -fobjc-exceptions.)", "bug_id": 666609, "is_private": false, "count": 4, "tags": [], "id": 5551549}, {"raw_text": "Removing -fno-exceptions fixes the problem.", "creation_time": "2011-06-23T18:08:42Z", "attachment_id": null, "time": "2011-06-23T18:08:42Z", "author": "jmuizelaar@mozilla.com", "text": "Removing -fno-exceptions fixes the problem.", "creator": "jmuizelaar@mozilla.com", "id": 5551616, "count": 5, "is_private": false, "tags": [], "bug_id": 666609}, {"raw_text": "(In reply to comment #3)\n> Okay, that's odd. We wrap the STL headers in order to force exceptions off.\n> For GCC, the template is here:\n> http://mxr.mozilla.org/mozilla-central/source/config/gcc-stl-wrapper.\n> template.h\n> \n> Presumably the bug lies in there somewhere, or in one of the headers it\n> includes. You can find the generated version in\n> $objdir/dist/stl_wrappers/algorithm\n\nI was reproducing the problem with out using our wrappers. Perhaps they're not getting picked up?", "creation_time": "2011-06-23T18:09:44Z", "time": "2011-06-23T18:09:44Z", "attachment_id": null, "text": "(In reply to comment #3)\n> Okay, that's odd. We wrap the STL headers in order to force exceptions off.\n> For GCC, the template is here:\n> http://mxr.mozilla.org/mozilla-central/source/config/gcc-stl-wrapper.\n> template.h\n> \n> Presumably the bug lies in there somewhere, or in one of the headers it\n> includes. You can find the generated version in\n> $objdir/dist/stl_wrappers/algorithm\n\nI was reproducing the problem with out using our wrappers. Perhaps they're not getting picked up?", "id": 5551618, "count": 6, "is_private": false, "tags": [], "bug_id": 666609, "author": "jmuizelaar@mozilla.com", "creator": "jmuizelaar@mozilla.com"}, {"bug_id": 666609, "id": 5551630, "tags": [], "is_private": false, "count": 7, "time": "2011-06-23T18:13:29Z", "attachment_id": null, "text": "(In reply to comment #6)\n> (In reply to comment #3)\n> > Okay, that's odd. We wrap the STL headers in order to force exceptions off.\n> > For GCC, the template is here:\n> > http://mxr.mozilla.org/mozilla-central/source/config/gcc-stl-wrapper.\n> > template.h\n> > \n> > Presumably the bug lies in there somewhere, or in one of the headers it\n> > includes. You can find the generated version in\n> > $objdir/dist/stl_wrappers/algorithm\n\nI don't have a $objdir/dist/stl_wrappers directory or any files named 'algorithm' in my objdir", "raw_text": "(In reply to comment #6)\n> (In reply to comment #3)\n> > Okay, that's odd. We wrap the STL headers in order to force exceptions off.\n> > For GCC, the template is here:\n> > http://mxr.mozilla.org/mozilla-central/source/config/gcc-stl-wrapper.\n> > template.h\n> > \n> > Presumably the bug lies in there somewhere, or in one of the headers it\n> > includes. You can find the generated version in\n> > $objdir/dist/stl_wrappers/algorithm\n\nI don't have a $objdir/dist/stl_wrappers directory or any files named 'algorithm' in my objdir", "creation_time": "2011-06-23T18:13:29Z", "author": "jmuizelaar@mozilla.com", "creator": "jmuizelaar@mozilla.com"}, {"author": "cjones.bugs@gmail.com", "creator": "cjones.bugs@gmail.com", "id": 5551642, "tags": [], "count": 8, "is_private": false, "bug_id": 666609, "creation_time": "2011-06-23T18:16:32Z", "raw_text": "For gcc, the wrappers just ensure that (C++) exceptions are off.  My guess here would be that <algorithm> and <vector> end up pulling in some objc-specific library code that doesn't honor -fno-(objc)-exceptions.", "attachment_id": null, "time": "2011-06-23T18:16:32Z", "text": "For gcc, the wrappers just ensure that (C++) exceptions are off.  My guess here would be that <algorithm> and <vector> end up pulling in some objc-specific library code that doesn't honor -fno-(objc)-exceptions."}, {"creator": "cjones.bugs@gmail.com", "author": "cjones.bugs@gmail.com", "is_private": false, "count": 9, "tags": [], "id": 5551652, "bug_id": 666609, "raw_text": "What do these\n\nSTL_FLAGS\t\t= -I$(DIST)/stl_wrappers\nWRAP_STL_INCLUDES\t= 1\nMOZ_MSVC_STL_WRAP__Throw= \nMOZ_MSVC_STL_WRAP__RAISE= \n\nsay in your $objdir/config/autoconf.mk?", "creation_time": "2011-06-23T18:17:58Z", "text": "What do these\n\nSTL_FLAGS\t\t= -I$(DIST)/stl_wrappers\nWRAP_STL_INCLUDES\t= 1\nMOZ_MSVC_STL_WRAP__Throw= \nMOZ_MSVC_STL_WRAP__RAISE= \n\nsay in your $objdir/config/autoconf.mk?", "time": "2011-06-23T18:17:58Z", "attachment_id": null}, {"bug_id": 666609, "id": 5551671, "is_private": false, "count": 10, "tags": [], "time": "2011-06-23T18:21:33Z", "attachment_id": null, "text": "STL_FLAGS\t\t=\nWRAP_STL_INCLUDES\t=\nMOZ_MSVC_STL_WRAP__Throw= \nMOZ_MSVC_STL_WRAP__RAISE= \n\nOn both 10.5 and 10.6", "raw_text": "STL_FLAGS\t\t=\nWRAP_STL_INCLUDES\t=\nMOZ_MSVC_STL_WRAP__Throw= \nMOZ_MSVC_STL_WRAP__RAISE= \n\nOn both 10.5 and 10.6", "creation_time": "2011-06-23T18:21:33Z", "author": "jmuizelaar@mozilla.com", "creator": "jmuizelaar@mozilla.com"}, {"raw_text": "Looks like that's due to a gcc bug that was fixed in 4.2, if I read gcc's bugzilla correctly.  Thanks apple.  That's not good but not The Real Bug.", "creation_time": "2011-06-23T18:39:45Z", "text": "Looks like that's due to a gcc bug that was fixed in 4.2, if I read gcc's bugzilla correctly.  Thanks apple.  That's not good but not The Real Bug.", "creator": "cjones.bugs@gmail.com", "author": "cjones.bugs@gmail.com", "time": "2011-06-23T18:39:45Z", "attachment_id": null, "tags": [], "is_private": false, "count": 11, "id": 5551751, "bug_id": 666609}, {"creator": "ted@mielczarek.org", "author": "ted@mielczarek.org", "bug_id": 666609, "tags": [], "count": 12, "is_private": false, "id": 5710997, "text": "Somewhat related: bug 685927.", "time": "2011-09-09T17:32:55Z", "attachment_id": null, "raw_text": "Somewhat related: bug 685927.", "creation_time": "2011-09-09T17:32:55Z"}, {"bug_id": 666609, "id": 5946322, "count": 13, "is_private": false, "tags": [], "time": "2011-12-30T02:58:36Z", "attachment_id": null, "text": "A reduced test case is\n\n#include <exception_defines.h>\nvoid f()\n{\n@try {\n} @finally {\n}\n}\n\nexception_defines redefines 'try' and 'catch' which explains why this goes bad:\n\n#ifndef __EXCEPTIONS\n// Iff -fno-exceptions, transform error handling code to work without it.\n# define try      if (true)\n# define catch(X) if (false)\n# define __throw_exception_again\n#else\n// Else proceed normally.\n# define __throw_exception_again throw\n#endif", "raw_text": "A reduced test case is\n\n#include <exception_defines.h>\nvoid f()\n{\n@try {\n} @finally {\n}\n}\n\nexception_defines redefines 'try' and 'catch' which explains why this goes bad:\n\n#ifndef __EXCEPTIONS\n// Iff -fno-exceptions, transform error handling code to work without it.\n# define try      if (true)\n# define catch(X) if (false)\n# define __throw_exception_again\n#else\n// Else proceed normally.\n# define __throw_exception_again throw\n#endif", "creation_time": "2011-12-30T02:58:36Z", "author": "jmuizelaar@mozilla.com", "creator": "jmuizelaar@mozilla.com"}, {"creator": "jmuizelaar@mozilla.com", "author": "jmuizelaar@mozilla.com", "bug_id": 666609, "is_private": false, "count": 14, "tags": [], "id": 5946324, "text": "adding\n\n#define __EXCEPTIONS\n\nat the beginning of the file seems to avoid this redefinition.", "time": "2011-12-30T03:01:00Z", "attachment_id": null, "creation_time": "2011-12-30T03:01:00Z", "raw_text": "adding\n\n#define __EXCEPTIONS\n\nat the beginning of the file seems to avoid this redefinition."}, {"author": "jmuizelaar@mozilla.com", "creator": "jmuizelaar@mozilla.com", "id": 5946326, "is_private": false, "count": 15, "tags": [], "bug_id": 666609, "raw_text": "Alternatively, using \n#define _EXCEPTION_DEFINES_H\nmight be cleaner", "creation_time": "2011-12-30T03:08:16Z", "time": "2011-12-30T03:08:16Z", "attachment_id": null, "text": "Alternatively, using \n#define _EXCEPTION_DEFINES_H\nmight be cleaner"}]}}, "comments": {}}