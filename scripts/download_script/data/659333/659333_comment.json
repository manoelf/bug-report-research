{"bugs": {"659333": {"comments": [{"tags": [], "creator": "mingyiliu@yahoo.com", "creation_time": "2011-05-24T15:27:56Z", "bug_id": 659333, "raw_text": "User-Agent:       Mozilla/5.0 (Windows NT 5.1; rv:2.0.1) Gecko/20100101 Firefox/4.0.1\nBuild Identifier: Mozilla/5.0 (Windows NT 5.1; rv:2.0.1) Gecko/20100101 Firefox/4.0.1\n\nWe have multiple JSON data files on server. When loading one 48 MB JSON in FF4, it was fine and consumes 430 MB memory. When loading another 62 MB JSON in another tab, FF4 crashes (not just the tab, the browser goes down).  This is very reproduciable. Our JSON data are proprietary but they're simple & very shallow structures composed of arrays and hashes no more than 3 levels deep, very ordinary except for their large sizes.\n\nWhile it's understandable that browser can't deal with unreasonably large data, but FF4 should probably stay open (crashing just one tab is probably OK but not the browser).\n\nThe Google Chrome 11 on the other hand used much less memory parsing the 48 MB JSON (220 MB vs. the 430 MB used by FF), but it also crashed once I tried to load a few tabs with such large data.  However, Chrome only crashed the new tabs where I tried to load more large JSON data, not the old tabs that had large JSON data opened or the browser itself. Interestingly, though, Chrome also crashed the tab every time I tried to load the 62 MB JSON even if it's the only tab open. I guess Chrome set a lower limit on max tab memory consumption.\n\nReproducible: Always\n\nSteps to Reproduce:\n1. Load a large JSON object (~60 MB).\n2. Open a new tab and load another obj with similar size.\n3. Repeat 1-2 if needed.\n4. Entire FF4 crashes.\n\nActual Results:  \nFF4 browser crashes.\n\nExpected Results:  \nBrowser stays open, only crash the tab, or refuse to load the JSON and warn user about it.\n\nMy WinXP 32-bit laptop has 3 GB memory.\nThis crash happens on new profiles with NO addons or existing profiles with addons disabled, or profiles with addons enabled.", "attachment_id": null, "is_private": false, "text": "User-Agent:       Mozilla/5.0 (Windows NT 5.1; rv:2.0.1) Gecko/20100101 Firefox/4.0.1\nBuild Identifier: Mozilla/5.0 (Windows NT 5.1; rv:2.0.1) Gecko/20100101 Firefox/4.0.1\n\nWe have multiple JSON data files on server. When loading one 48 MB JSON in FF4, it was fine and consumes 430 MB memory. When loading another 62 MB JSON in another tab, FF4 crashes (not just the tab, the browser goes down).  This is very reproduciable. Our JSON data are proprietary but they're simple & very shallow structures composed of arrays and hashes no more than 3 levels deep, very ordinary except for their large sizes.\n\nWhile it's understandable that browser can't deal with unreasonably large data, but FF4 should probably stay open (crashing just one tab is probably OK but not the browser).\n\nThe Google Chrome 11 on the other hand used much less memory parsing the 48 MB JSON (220 MB vs. the 430 MB used by FF), but it also crashed once I tried to load a few tabs with such large data.  However, Chrome only crashed the new tabs where I tried to load more large JSON data, not the old tabs that had large JSON data opened or the browser itself. Interestingly, though, Chrome also crashed the tab every time I tried to load the 62 MB JSON even if it's the only tab open. I guess Chrome set a lower limit on max tab memory consumption.\n\nReproducible: Always\n\nSteps to Reproduce:\n1. Load a large JSON object (~60 MB).\n2. Open a new tab and load another obj with similar size.\n3. Repeat 1-2 if needed.\n4. Entire FF4 crashes.\n\nActual Results:  \nFF4 browser crashes.\n\nExpected Results:  \nBrowser stays open, only crash the tab, or refuse to load the JSON and warn user about it.\n\nMy WinXP 32-bit laptop has 3 GB memory.\nThis crash happens on new profiles with NO addons or existing profiles with addons disabled, or profiles with addons enabled.", "count": 0, "id": 5489440, "time": "2011-05-24T15:27:56Z", "author": "mingyiliu@yahoo.com"}, {"id": 5489497, "time": "2011-05-24T15:48:56Z", "tags": [], "bug_id": 659333, "creation_time": "2011-05-24T15:48:56Z", "raw_text": "BTW, I also feel that if FF4 developers could take a look into why Chrome11 uses just half the RAM FF4 used to parse and hold the same 48 MB JSON data, it could be very helpful too for FF4 to support JS apps.", "is_private": false, "text": "BTW, I also feel that if FF4 developers could take a look into why Chrome11 uses just half the RAM FF4 used to parse and hold the same 48 MB JSON data, it could be very helpful too for FF4 to support JS apps.", "count": 1, "author": "mingyiliu@yahoo.com", "creator": "mingyiliu@yahoo.com", "attachment_id": null}, {"attachment_id": null, "creator": "xtc4uall@gmail.com", "author": "xtc4uall@gmail.com", "count": 2, "text": "Do you get a CrashID or WinDbg Tracelog by Chance?\nhttps://developer.mozilla.org/En/How_to_get_a_stacktrace_for_a_bug_report", "is_private": false, "bug_id": 659333, "creation_time": "2011-05-24T17:34:16Z", "raw_text": "Do you get a CrashID or WinDbg Tracelog by Chance?\nhttps://developer.mozilla.org/En/How_to_get_a_stacktrace_for_a_bug_report", "tags": [], "time": "2011-05-24T17:34:16Z", "id": 5489827}, {"count": 3, "text": "It's bp-5da1db9a-abb8-4b7e-abfc-68cf22110525", "author": "mingyiliu@yahoo.com", "creator": "mingyiliu@yahoo.com", "attachment_id": null, "time": "2011-05-25T13:12:00Z", "id": 5492076, "raw_text": "It's bp-5da1db9a-abb8-4b7e-abfc-68cf22110525", "creation_time": "2011-05-25T13:12:00Z", "bug_id": 659333, "tags": [], "is_private": false}, {"time": "2011-05-25T13:34:10Z", "author": "mingyiliu@yahoo.com", "id": 5492111, "text": "Just installed FF5b2 and it crashed same way. CrashID is: bp-b2c7347a-4fd7-45cf-8f28-801142110525 and I disabled all addons this time.", "count": 4, "attachment_id": null, "is_private": false, "creation_time": "2011-05-25T13:34:10Z", "bug_id": 659333, "raw_text": "Just installed FF5b2 and it crashed same way. CrashID is: bp-b2c7347a-4fd7-45cf-8f28-801142110525 and I disabled all addons this time.", "tags": [], "creator": "mingyiliu@yahoo.com"}, {"creator": "xtc4uall@gmail.com", "attachment_id": null, "text": "Signature\tmozalloc_abort(char const* const) | mozalloc_handle_oom() | jArray<unsigned short, int>::newJArray(int)\nUUID\tb2c7347a-4fd7-45cf-8f28-801142110525\nUptime\t6.8 minutes\nLast Crash\t1528 seconds (25.5 minutes) before submission\nInstall Age\t548 seconds (9.1 minutes) since version was first installed.\nInstall Time\t2011-05-25 13:21:05\nProduct\tFirefox\nVersion\t5.0\nBuild ID\t20110517192056\nRelease Channel\tbeta\nBranch\t2.2\nOS\tWindows NT\nOS Version\t5.1.2600 Service Pack 3\nCPU\tx86\nCPU Info\tGenuineIntel family 6 model 15 stepping 11\nCrash Reason\tEXCEPTION_BREAKPOINT\nCrash Address\t0x7f1a39\nUser Comments\tsame scenario as reported in https://bugzilla.mozilla.org/show_bug.cgi?id=659333\nApp Notes \tCisco VPN\nAdapterVendorID: 8086, AdapterDeviceID: 2a02, AdapterDriverVersion: 6.14.10.4785\nD3D10 Layers? D3D10 Layers-\nD3D9 Layers? D3D9 Layers-\n\nFrame \tModule \tSignature \tSource\n0 \tmozalloc.dll \tmozalloc_abort(char const* const) \tmemory/mozalloc/mozalloc_abort.cpp:77\n1 \tmozalloc.dll \tmozalloc_handle_oom() \tmemory/mozalloc/mozalloc_oom.cpp:54\n2 \txul.dll \tjArray<unsigned short,int>::newJArray(int) \tparser/html/jArray.h:57\n3 \txul.dll \tnsHtml5TreeBuilder::accumulateCharacters(unsigned short const*,int,int) \t\n4 \txul.dll \tnsHtml5TreeBuilder::characters(unsigned short const*,int,int) \tparser/html/nsHtml5TreeBuilder.cpp:417\n5 \txul.dll \tnsHtml5Tokenizer::stateLoop(int,unsigned short,int,unsigned short*,int,int,int) \tparser/html/nsHtml5Tokenizer.cpp:3265\n6 \txul.dll \tnsHtml5Tokenizer::tokenizeBuffer(nsHtml5UTF16Buffer*) \tparser/html/nsHtml5Tokenizer.cpp:391\n7 \txul.dll \tnsHtml5Parser::ParseHtml5Fragment(nsAString_internal const&,nsIContent*,nsIAtom*,int,int,int) \tparser/html/nsHtml5Parser.cpp:537\n8 \txul.dll \tnsGenericHTMLElement::SetInnerHTML(nsAString_internal const&) \tcontent/html/content/src/nsGenericHTMLElement.cpp:757\n9 \txul.dll \tnsIDOMNSHTMLElement_SetInnerHTML \tobj-firefox/js/src/xpconnect/src/dom_quickstubs.cpp:21359\n10 \tmozjs.dll \tjs::Shape::set(JSContext*,JSObject*,bool,js::Value*) \tjs/src/jsscopeinlines.h:278\n11 \tmozjs.dll \tjs_SetPropertyHelper(JSContext*,JSObject*,int,unsigned int,js::Value*,int) \tjs/src/jsobj.cpp:5592\n12 \tmozjs.dll \tjs::mjit::stubs::SetName<0>(js::VMFrame&,JSAtom*) \tjs/src/methodjit/StubCalls.cpp:260\n13 \t\t@0x6eaed9f \t\n14 \tmozjs.dll \tjs::Interpret(JSContext*,JSStackFrame*,unsigned int,JSInterpMode) \tjs/src/jsinterp.cpp:4710", "count": 5, "author": "xtc4uall@gmail.com", "tags": [], "raw_text": "Signature\tmozalloc_abort(char const* const) | mozalloc_handle_oom() | jArray<unsigned short, int>::newJArray(int)\nUUID\tb2c7347a-4fd7-45cf-8f28-801142110525\nUptime\t6.8 minutes\nLast Crash\t1528 seconds (25.5 minutes) before submission\nInstall Age\t548 seconds (9.1 minutes) since version was first installed.\nInstall Time\t2011-05-25 13:21:05\nProduct\tFirefox\nVersion\t5.0\nBuild ID\t20110517192056\nRelease Channel\tbeta\nBranch\t2.2\nOS\tWindows NT\nOS Version\t5.1.2600 Service Pack 3\nCPU\tx86\nCPU Info\tGenuineIntel family 6 model 15 stepping 11\nCrash Reason\tEXCEPTION_BREAKPOINT\nCrash Address\t0x7f1a39\nUser Comments\tsame scenario as reported in https://bugzilla.mozilla.org/show_bug.cgi?id=659333\nApp Notes \tCisco VPN\nAdapterVendorID: 8086, AdapterDeviceID: 2a02, AdapterDriverVersion: 6.14.10.4785\nD3D10 Layers? D3D10 Layers-\nD3D9 Layers? D3D9 Layers-\n\nFrame \tModule \tSignature \tSource\n0 \tmozalloc.dll \tmozalloc_abort(char const* const) \tmemory/mozalloc/mozalloc_abort.cpp:77\n1 \tmozalloc.dll \tmozalloc_handle_oom() \tmemory/mozalloc/mozalloc_oom.cpp:54\n2 \txul.dll \tjArray<unsigned short,int>::newJArray(int) \tparser/html/jArray.h:57\n3 \txul.dll \tnsHtml5TreeBuilder::accumulateCharacters(unsigned short const*,int,int) \t\n4 \txul.dll \tnsHtml5TreeBuilder::characters(unsigned short const*,int,int) \tparser/html/nsHtml5TreeBuilder.cpp:417\n5 \txul.dll \tnsHtml5Tokenizer::stateLoop(int,unsigned short,int,unsigned short*,int,int,int) \tparser/html/nsHtml5Tokenizer.cpp:3265\n6 \txul.dll \tnsHtml5Tokenizer::tokenizeBuffer(nsHtml5UTF16Buffer*) \tparser/html/nsHtml5Tokenizer.cpp:391\n7 \txul.dll \tnsHtml5Parser::ParseHtml5Fragment(nsAString_internal const&,nsIContent*,nsIAtom*,int,int,int) \tparser/html/nsHtml5Parser.cpp:537\n8 \txul.dll \tnsGenericHTMLElement::SetInnerHTML(nsAString_internal const&) \tcontent/html/content/src/nsGenericHTMLElement.cpp:757\n9 \txul.dll \tnsIDOMNSHTMLElement_SetInnerHTML \tobj-firefox/js/src/xpconnect/src/dom_quickstubs.cpp:21359\n10 \tmozjs.dll \tjs::Shape::set(JSContext*,JSObject*,bool,js::Value*) \tjs/src/jsscopeinlines.h:278\n11 \tmozjs.dll \tjs_SetPropertyHelper(JSContext*,JSObject*,int,unsigned int,js::Value*,int) \tjs/src/jsobj.cpp:5592\n12 \tmozjs.dll \tjs::mjit::stubs::SetName<0>(js::VMFrame&,JSAtom*) \tjs/src/methodjit/StubCalls.cpp:260\n13 \t\t@0x6eaed9f \t\n14 \tmozjs.dll \tjs::Interpret(JSContext*,JSStackFrame*,unsigned int,JSInterpMode) \tjs/src/jsinterp.cpp:4710", "creation_time": "2011-05-25T23:09:51Z", "bug_id": 659333, "is_private": false, "id": 5493743, "time": "2011-05-25T23:09:51Z"}, {"count": 6, "text": "This is an OOM crash. I find it interesting that we're crashing under a SetInnerHTML call instead of the JSON parsing code as I would have expected. Does this happen because we build a visual representation or something?", "id": 5493799, "author": "josh@joshmatthews.net", "time": "2011-05-25T23:36:01Z", "creator": "josh@joshmatthews.net", "tags": [], "raw_text": "This is an OOM crash. I find it interesting that we're crashing under a SetInnerHTML call instead of the JSON parsing code as I would have expected. Does this happen because we build a visual representation or something?", "bug_id": 659333, "creation_time": "2011-05-25T23:36:01Z", "is_private": false, "attachment_id": null}, {"author": "bzbarsky@mit.edu", "text": "No way to tell given the complete lack of any actual HTML code showing the problem.\n\nReporter, can you please provide a URL to such code?", "count": 7, "attachment_id": null, "creator": "bzbarsky@mit.edu", "id": 5494058, "time": "2011-05-26T01:57:09Z", "is_private": false, "tags": [], "raw_text": "No way to tell given the complete lack of any actual HTML code showing the problem.\n\nReporter, can you please provide a URL to such code?", "creation_time": "2011-05-26T01:57:09Z", "bug_id": 659333}, {"time": "2011-05-26T13:43:50Z", "id": 5494785, "raw_text": "FWIW, OOMing with the HTML parser on the stack is not a parser bug. It's a consequence of the decision to transition to \"infallible\" malloc.", "bug_id": 659333, "creation_time": "2011-05-26T13:43:50Z", "tags": [], "is_private": false, "text": "FWIW, OOMing with the HTML parser on the stack is not a parser bug. It's a consequence of the decision to transition to \"infallible\" malloc.", "count": 8, "author": "hsivonen@mozilla.com", "creator": "hsivonen@mozilla.com", "attachment_id": null}, {"attachment_id": null, "creator": "bzbarsky@mit.edu", "author": "bzbarsky@mit.edu", "count": 9, "text": "Well, that depends.  If the HTML parser is allocating something whose size is explicitly under page control using the infallible allocator, that's an HTML parser bug.\n\nBut it's hard to say anything specific without a way to reproduce.", "is_private": false, "tags": [], "creation_time": "2011-05-26T15:48:22Z", "bug_id": 659333, "raw_text": "Well, that depends.  If the HTML parser is allocating something whose size is explicitly under page control using the infallible allocator, that's an HTML parser bug.\n\nBut it's hard to say anything specific without a way to reproduce.", "id": 5495074, "time": "2011-05-26T15:48:22Z"}, {"creator": "mingyiliu@yahoo.com", "attachment_id": null, "count": 10, "text": "You're right. It's not JSON.parse that failed. It was failing during setting innerHTML.  I did not realize that because my 2-yr-old code was failing recently due to users opening multiple tabs of large JSON data.  But in reality, the code was using Extjs library's Ext.Element.load() call, which would take a wrapped HTMLElement, put in a loading animation and text in the element, sends an ajax call, and when it's back, updating the element with the req.responseTEXT, then call the callback user sent in.  And the failure step was really on innerHTML after I did some testing to confirm.\n\nI can't post any proprietary JSON data/script, so I made up the following reproducible way of producing the browser crash without using Extjs.  Server script (bigJSON.pl) is below:\n\n#!/user/bin/perl\n\n# test browers' abilities in handling big JSON objects\n\nuse strict;\nuse CGI qw/:standard -debug/;\nuse JSON;\n\nmy $size = param('size') || 50;\n\nprint \"Content-type: text/javascript\\n\\n\";\n\nmy $json = {data => []};\nmy $s;\nwhile(1)\n{\n  my $obj = {};\n  for(my $i = 0; $i < 30; $i++)\n  {\n    $obj->{getKey()} = 'abcd';\n  }\n  $s += 420;\n  push(@{$json->{data}}, $obj);\n  last if $s >= $size * 1000000;\n}\nprint to_json($json);\n\nsub getKey\n{\n  my @s;\n  for(my $i = 0; $i < 4; $i++)\n  {\n    push(@s, chr(ord('a') + rand(25)));\n  }\n  return join('', @s);\n}\n\nNow here's the frontend bioJSON.html file:\n\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n\n<html>\n<head>\n  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n  <title>Test Big JSON</title>\n  <script type=\"text/javascript\">\n    function getJSON() {\n      var req = new XMLHttpRequest();\n      req.open('GET', 'http://my-cgi-bin/bigJSON.pl?size=55', true); // size is in MB, change size to test browser tolerance\n      req.onreadystatechange = function (aEvt) {\n        if (req.readyState == 4) {\n           if(req.status == 200)\n           {\n//              alert('back from server');\n             document.getElementById('test').innerHTML = req.responseText;\n//              alert('loaded');\n             window.testjson = JSON.parse(req.responseText);\n//              alert('parsed');\n           }\n           else\n            dump(\"Error loading page\\n\");\n        }\n      };\n      req.send(null);\n    }\n  </script>\n</head>\n<body onload=\"getJSON()\">\n<div id=\"test\">\n</div>\n</body>\n</html>\n\nIn my 3 GB laptop, 3 tabs of bigJSON.html will cause FF5b2 fail.  If one comments out the innerHTML line, it's very hard to get FF to crash (it usually just refuses to load or sends an out-of-memory error), although I don't remember if it's 100% not failing.", "author": "mingyiliu@yahoo.com", "tags": [], "creation_time": "2011-05-26T16:19:59Z", "bug_id": 659333, "raw_text": "You're right. It's not JSON.parse that failed. It was failing during setting innerHTML.  I did not realize that because my 2-yr-old code was failing recently due to users opening multiple tabs of large JSON data.  But in reality, the code was using Extjs library's Ext.Element.load() call, which would take a wrapped HTMLElement, put in a loading animation and text in the element, sends an ajax call, and when it's back, updating the element with the req.responseTEXT, then call the callback user sent in.  And the failure step was really on innerHTML after I did some testing to confirm.\n\nI can't post any proprietary JSON data/script, so I made up the following reproducible way of producing the browser crash without using Extjs.  Server script (bigJSON.pl) is below:\n\n#!/user/bin/perl\n\n# test browers' abilities in handling big JSON objects\n\nuse strict;\nuse CGI qw/:standard -debug/;\nuse JSON;\n\nmy $size = param('size') || 50;\n\nprint \"Content-type: text/javascript\\n\\n\";\n\nmy $json = {data => []};\nmy $s;\nwhile(1)\n{\n  my $obj = {};\n  for(my $i = 0; $i < 30; $i++)\n  {\n    $obj->{getKey()} = 'abcd';\n  }\n  $s += 420;\n  push(@{$json->{data}}, $obj);\n  last if $s >= $size * 1000000;\n}\nprint to_json($json);\n\nsub getKey\n{\n  my @s;\n  for(my $i = 0; $i < 4; $i++)\n  {\n    push(@s, chr(ord('a') + rand(25)));\n  }\n  return join('', @s);\n}\n\nNow here's the frontend bioJSON.html file:\n\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n\n<html>\n<head>\n  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n  <title>Test Big JSON</title>\n  <script type=\"text/javascript\">\n    function getJSON() {\n      var req = new XMLHttpRequest();\n      req.open('GET', 'http://my-cgi-bin/bigJSON.pl?size=55', true); // size is in MB, change size to test browser tolerance\n      req.onreadystatechange = function (aEvt) {\n        if (req.readyState == 4) {\n           if(req.status == 200)\n           {\n//              alert('back from server');\n             document.getElementById('test').innerHTML = req.responseText;\n//              alert('loaded');\n             window.testjson = JSON.parse(req.responseText);\n//              alert('parsed');\n           }\n           else\n            dump(\"Error loading page\\n\");\n        }\n      };\n      req.send(null);\n    }\n  </script>\n</head>\n<body onload=\"getJSON()\">\n<div id=\"test\">\n</div>\n</body>\n</html>\n\nIn my 3 GB laptop, 3 tabs of bigJSON.html will cause FF5b2 fail.  If one comments out the innerHTML line, it's very hard to get FF to crash (it usually just refuses to load or sends an out-of-memory error), although I don't remember if it's 100% not failing.", "is_private": false, "id": 5495182, "time": "2011-05-26T16:19:59Z"}, {"creator": "hsivonen@mozilla.com", "tags": [], "raw_text": "Looks like this is simply a matter of the text accumulation buffer in the HTML parser's tree builder hitting OOM as it is try to grow to accommodate a lot of text.", "bug_id": 659333, "creation_time": "2011-05-26T18:17:03Z", "attachment_id": null, "is_private": false, "count": 11, "text": "Looks like this is simply a matter of the text accumulation buffer in the HTML parser's tree builder hitting OOM as it is try to grow to accommodate a lot of text.", "id": 5495631, "author": "hsivonen@mozilla.com", "time": "2011-05-26T18:17:03Z"}, {"creator": "silaghipaul@gmail.com", "attachment_id": null, "count": 12, "text": "*** Bug 834144 has been marked as a duplicate of this bug. ***", "author": "silaghipaul@gmail.com", "tags": [], "bug_id": 659333, "creation_time": "2013-01-29T10:29:04Z", "raw_text": "", "is_private": false, "id": 7048214, "time": "2013-01-29T10:29:04Z"}, {"attachment_id": null, "creator": "inoyakaigor@ya.ru", "author": "inoyakaigor@ya.ru", "text": "I confirm that there is such a bug. Firefox  consume a lot of memory when processing large arrays of data JSON and finally crashed. Sample data can be viewed at this link https://www.dropbox.com/s/rdh7jy6tlz6ogjg/twitter_json_data.json. Site where falls when parsing http://json.parser.online.fr/\n\n(excuse me for bad english, i used google translate)", "count": 13, "is_private": false, "tags": [], "bug_id": 659333, "creation_time": "2014-06-17T11:11:52Z", "raw_text": "I confirm that there is such a bug. Firefox  consume a lot of memory when processing large arrays of data JSON and finally crashed. Sample data can be viewed at this link https://www.dropbox.com/s/rdh7jy6tlz6ogjg/twitter_json_data.json. Site where falls when parsing http://json.parser.online.fr/\n\n(excuse me for bad english, i used google translate)", "id": 8939340, "time": "2014-06-17T11:11:52Z"}, {"creator": "svip@fastmail.com", "tags": [], "raw_text": "Alternative steps to reproduce:\n\n1. Go to http://json.parser.online.fr/\n2. Load contents of attachment into input field.\n3. Firefox crashes.", "bug_id": 659333, "creation_time": "2015-02-02T13:10:09Z", "is_private": false, "attachment_id": 8557891, "text": "Created attachment 8557891\nA large JSON data set\n\nAlternative steps to reproduce:\n\n1. Go to http://json.parser.online.fr/\n2. Load contents of attachment into input field.\n3. Firefox crashes.", "count": 14, "id": 9869266, "author": "svip@fastmail.com", "time": "2015-02-02T13:10:09Z"}, {"id": 9869678, "time": "2015-02-02T15:19:07Z", "is_private": false, "tags": [], "bug_id": 659333, "creation_time": "2015-02-02T15:19:07Z", "raw_text": "With STR of comment#14, I got a different regression window in comment#0.\nAnd I filed Bug 1128528.", "author": "alice0775@gmail.com", "count": 15, "text": "With STR of comment#14, I got a different regression window in comment#0.\nAnd I filed Bug 1128528.", "attachment_id": null, "creator": "alice0775@gmail.com"}]}}, "comments": {}}