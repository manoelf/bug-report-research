{"bugs": {"643646": {"comments": [{"author": "dmandelin@mozilla.com", "attachment_id": null, "bug_id": 643646, "creator": "dmandelin@mozilla.com", "time": "2011-03-22T00:34:56Z", "tags": [], "count": 0, "raw_text": "The usual. 2x difference here.", "id": 5358890, "text": "The usual. 2x difference here.", "creation_time": "2011-03-22T00:34:56Z", "is_private": false}, {"attachment_id": null, "is_private": false, "time": "2011-03-23T00:34:15Z", "author": "dmandelin@mozilla.com", "text": "The test is complicated and seems hard to simplify. It really just runs a lot of regexes against a lot of texts. There is a hierarchy: there are 12 \"blocks\" run by functions with names runBlock0 ... runBlock11. The earlier blocks have longer run time than the later ones. It seems we are rather slower on the first few blocks, but equal or faster on most of the later blocks.\n\nEach block runs a bunch of loops, where each loop usually runs just one regex. I examined block 0 in detail. It runs 19 loops, the first one 6511 iterations, then decreasing down to 85 iterations for the last. Again, the earlier loops generally run longer. Loops 1-5 take up a good portion of the total. And again, v8/nocs is faster on the earlier, long-running blocks, but the results vary more toward the end.\n\nIt looks like a fair chunk of our slowdown is from these two regexes:\n\n    /^ba/\n    /(((\\w+):\\/\\/)([^\\/:]*)(:(\\d+))?)?([^#?]*)(\\?([^#]*))?(#(.*))?/\n\nIf I take off the \"^\" from the first one, we are faster. So they might have some special handling for that. I'm not sure about the second regex. We don't seem to be falling back to PCRE.\n\nIf I run just the first loop (re0 and s0) with 'perf stat', I get:\n\n Performance counter stats for '/home/dmandelin/sources/v8/shell --nocrankshaft\n/home/dmandelin/things/vbench/re/re1.js':\n\n     137.956482  task-clock-msecs         #      0.995 CPUs\n              1  context-switches         #      0.000 M/sec\n              2  CPU-migrations           #      0.000 M/sec\n           1422  page-faults              #      0.010 M/sec\n      442418798  cycles                   #   3206.945 M/sec\n      984708882  instructions             #      2.226 IPC\n         339112  cache-references         #      2.458 M/sec\n          56490  cache-misses             #      0.409 M/sec\n\n    0.138706128  seconds time elapsed\n\n Performance counter stats for '/home/dmandelin/sources/tracemonkey/js/src/o32/shell/js -a -m /home/dmandelin/things/vbench/re/re1.js':\n\n     201.616454  task-clock-msecs         #      0.995 CPUs\n              1  context-switches         #      0.000 M/sec\n              0  CPU-migrations           #      0.000 M/sec\n           1089  page-faults              #      0.005 M/sec\n      646635540  cycles                   #   3207.256 M/sec\n     1341038081  instructions             #      2.074 IPC\n          95372  cache-references         #      0.473 M/sec\n          38913  cache-misses             #      0.193 M/sec\n\n    0.202561741  seconds time elapsed\n\nIt looks like v8 just executes proportionally fewer instructions.\n\nI'm not inclined to dig too much deeper here before refreshing the Yarr import and seeing how things look there. Otherwise, it looks like a lot of detail, where to improve our score we just have to examine our compiled code for each regex that takes a lot of time, figure out how to improve it, etc.", "creation_time": "2011-03-23T00:34:15Z", "raw_text": "The test is complicated and seems hard to simplify. It really just runs a lot of regexes against a lot of texts. There is a hierarchy: there are 12 \"blocks\" run by functions with names runBlock0 ... runBlock11. The earlier blocks have longer run time than the later ones. It seems we are rather slower on the first few blocks, but equal or faster on most of the later blocks.\n\nEach block runs a bunch of loops, where each loop usually runs just one regex. I examined block 0 in detail. It runs 19 loops, the first one 6511 iterations, then decreasing down to 85 iterations for the last. Again, the earlier loops generally run longer. Loops 1-5 take up a good portion of the total. And again, v8/nocs is faster on the earlier, long-running blocks, but the results vary more toward the end.\n\nIt looks like a fair chunk of our slowdown is from these two regexes:\n\n    /^ba/\n    /(((\\w+):\\/\\/)([^\\/:]*)(:(\\d+))?)?([^#?]*)(\\?([^#]*))?(#(.*))?/\n\nIf I take off the \"^\" from the first one, we are faster. So they might have some special handling for that. I'm not sure about the second regex. We don't seem to be falling back to PCRE.\n\nIf I run just the first loop (re0 and s0) with 'perf stat', I get:\n\n Performance counter stats for '/home/dmandelin/sources/v8/shell --nocrankshaft\n/home/dmandelin/things/vbench/re/re1.js':\n\n     137.956482  task-clock-msecs         #      0.995 CPUs\n              1  context-switches         #      0.000 M/sec\n              2  CPU-migrations           #      0.000 M/sec\n           1422  page-faults              #      0.010 M/sec\n      442418798  cycles                   #   3206.945 M/sec\n      984708882  instructions             #      2.226 IPC\n         339112  cache-references         #      2.458 M/sec\n          56490  cache-misses             #      0.409 M/sec\n\n    0.138706128  seconds time elapsed\n\n Performance counter stats for '/home/dmandelin/sources/tracemonkey/js/src/o32/shell/js -a -m /home/dmandelin/things/vbench/re/re1.js':\n\n     201.616454  task-clock-msecs         #      0.995 CPUs\n              1  context-switches         #      0.000 M/sec\n              0  CPU-migrations           #      0.000 M/sec\n           1089  page-faults              #      0.005 M/sec\n      646635540  cycles                   #   3207.256 M/sec\n     1341038081  instructions             #      2.074 IPC\n          95372  cache-references         #      0.473 M/sec\n          38913  cache-misses             #      0.193 M/sec\n\n    0.202561741  seconds time elapsed\n\nIt looks like v8 just executes proportionally fewer instructions.\n\nI'm not inclined to dig too much deeper here before refreshing the Yarr import and seeing how things look there. Otherwise, it looks like a lot of detail, where to improve our score we just have to examine our compiled code for each regex that takes a lot of time, figure out how to improve it, etc.", "id": 5361486, "bug_id": 643646, "tags": [], "creator": "dmandelin@mozilla.com", "count": 1}, {"author": "marco.perez@bluewin.ch", "id": 6583639, "raw_text": "", "creation_time": "2012-08-25T17:16:47Z", "text": "*** Bug 736976 has been marked as a duplicate of this bug. ***", "creator": "marco.perez@bluewin.ch", "tags": [], "count": 2, "bug_id": 643646, "attachment_id": null, "is_private": false, "time": "2012-08-25T17:16:47Z"}]}}, "comments": {}}