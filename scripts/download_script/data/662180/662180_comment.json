{"bugs": {"662180": {"comments": [{"raw_text": "Let's face it: most people use (or ought to be using) SSL connections for their mail. As long as we don't support SSL in fakeserver, we are testing distinct configurations from what our users use.\n\nNotes: mochitest uses ssltunnel to test SSL connections, which is basically a proxy which forwards from its listening port to another listening port.\n\nAnother option which should be tested is STARTTLS, which ssltunnel probably cannot support without us getting crafty (which I may do anyways ^_^). If we do not go with using the vanilla ssltunnel binary, we must either use C++ or jsctypes to implement part of the code, since we do not expose enough NSS APIs in JS. Most annoyingly, we need the raw fd's to use with NSS, and I don't think there is any XPCOM API (even [noscript] !) that allows us to grab the fd for a socket set up via XPCOM socket stuff.", "time": "2011-06-05T19:51:33Z", "text": "Let's face it: most people use (or ought to be using) SSL connections for their mail. As long as we don't support SSL in fakeserver, we are testing distinct configurations from what our users use.\n\nNotes: mochitest uses ssltunnel to test SSL connections, which is basically a proxy which forwards from its listening port to another listening port.\n\nAnother option which should be tested is STARTTLS, which ssltunnel probably cannot support without us getting crafty (which I may do anyways ^_^). If we do not go with using the vanilla ssltunnel binary, we must either use C++ or jsctypes to implement part of the code, since we do not expose enough NSS APIs in JS. Most annoyingly, we need the raw fd's to use with NSS, and I don't think there is any XPCOM API (even [noscript] !) that allows us to grab the fd for a socket set up via XPCOM socket stuff.", "count": 0, "author": "Pidgeot18@gmail.com", "bug_id": 662180, "id": 5514241, "attachment_id": null, "tags": [], "creator": "Pidgeot18@gmail.com", "is_private": false, "creation_time": "2011-06-05T19:51:33Z"}, {"is_private": false, "creation_time": "2011-06-06T16:41:49Z", "creator": "Pidgeot18@gmail.com", "tags": [], "attachment_id": null, "bug_id": 662180, "id": 5515277, "author": "Pidgeot18@gmail.com", "text": "So here is the basic crazy idea I thought up last night: when we want to do SSL, we proxy the data that nsMailServer sends/receives to another connection that uses ssltunnel to do encryption/decryption. We should be able to achieve starttls by delaying the start of this ssltunnel proxy until when we initiate the SSL handshake.", "count": 1, "raw_text": "So here is the basic crazy idea I thought up last night: when we want to do SSL, we proxy the data that nsMailServer sends/receives to another connection that uses ssltunnel to do encryption/decryption. We should be able to achieve starttls by delaying the start of this ssltunnel proxy until when we initiate the SSL handshake.", "time": "2011-06-06T16:41:49Z"}, {"creator": "mozilla@davidbienvenu.org", "author": "mozilla@davidbienvenu.org", "count": 2, "text": "(In reply to comment #1)\n> So here is the basic crazy idea I thought up last night: when we want to do\n> SSL, we proxy the data that nsMailServer sends/receives to another\n> connection that uses ssltunnel to do encryption/decryption. We should be\n> able to achieve starttls by delaying the start of this ssltunnel proxy until\n> when we initiate the SSL handshake.\n\nCan we count on all the machines that run tests having ssltunnel in a place that we can use it from xpcshell?", "id": 5515328, "bug_id": 662180, "creation_time": "2011-06-06T17:02:23Z", "is_private": false, "time": "2011-06-06T17:02:23Z", "attachment_id": null, "raw_text": "(In reply to comment #1)\n> So here is the basic crazy idea I thought up last night: when we want to do\n> SSL, we proxy the data that nsMailServer sends/receives to another\n> connection that uses ssltunnel to do encryption/decryption. We should be\n> able to achieve starttls by delaying the start of this ssltunnel proxy until\n> when we initiate the SSL handshake.\n\nCan we count on all the machines that run tests having ssltunnel in a place that we can use it from xpcshell?", "tags": []}, {"is_private": false, "creation_time": "2011-06-06T17:06:10Z", "bug_id": 662180, "id": 5515340, "author": "Pidgeot18@gmail.com", "text": "ssltunnel is built for mochitests, and I do see it in my objdir, but I don't run packaged tests so I don't know what gets dropped where. It seems the more annoying part is the certs database which appears to be necessary, but I can't seem to find where m-c sticks their database.\n\nIf worst comes to worst, it should be possible to implement most of the ssltunnel functionality we need via jsctypes; the main sticking point is that we need PRFileDesc* objects for the streams instead of nsIInputStream and friends. But I don't want to go with that approach if ssltunnel can be made to work.", "count": 3, "creator": "Pidgeot18@gmail.com", "tags": [], "attachment_id": null, "raw_text": "ssltunnel is built for mochitests, and I do see it in my objdir, but I don't run packaged tests so I don't know what gets dropped where. It seems the more annoying part is the certs database which appears to be necessary, but I can't seem to find where m-c sticks their database.\n\nIf worst comes to worst, it should be possible to implement most of the ssltunnel functionality we need via jsctypes; the main sticking point is that we need PRFileDesc* objects for the streams instead of nsIInputStream and friends. But I don't want to go with that approach if ssltunnel can be made to work.", "time": "2011-06-06T17:06:10Z"}, {"bug_id": 662180, "id": 5515346, "is_private": false, "creation_time": "2011-06-06T17:07:44Z", "creator": "mozilla@davidbienvenu.org", "author": "mozilla@davidbienvenu.org", "text": "Maybe Clint knows aout the cert db w/ mochitests.", "count": 4, "tags": [], "time": "2011-06-06T17:07:44Z", "attachment_id": null, "raw_text": "Maybe Clint knows aout the cert db w/ mochitests."}, {"time": "2011-06-06T18:42:56Z", "raw_text": "The certs db is built during any build with --enable-tests (which should be the default). It may be dependent on mochitests, so perhaps you have to build them to get it.  If you do make package-tests in your objdir, you should get the certs built into your dist/test-package-stage directory.  it lives in the certs directory. \n\nIf you just need a database to play with for now, just download a packaged tests zip from the FTP directories and use that. (the certs wind up in the certs folder).\n\nDoes that answer the question?\n\nIf you have more questions w.r.t. ssltunnel itself, I know that Jonathan worked on it a bit when he was working on getting websockets support coded in.  So, I've cc'd him in case he can answer some of the explicit ssltunnel questions.", "author": "cmtalbert@gmail.com", "count": 5, "text": "The certs db is built during any build with --enable-tests (which should be the default). It may be dependent on mochitests, so perhaps you have to build them to get it.  If you do make package-tests in your objdir, you should get the certs built into your dist/test-package-stage directory.  it lives in the certs directory. \n\nIf you just need a database to play with for now, just download a packaged tests zip from the FTP directories and use that. (the certs wind up in the certs folder).\n\nDoes that answer the question?\n\nIf you have more questions w.r.t. ssltunnel itself, I know that Jonathan worked on it a bit when he was working on getting websockets support coded in.  So, I've cc'd him in case he can answer some of the explicit ssltunnel questions.", "id": 5515613, "bug_id": 662180, "attachment_id": null, "tags": [], "creator": "cmtalbert@gmail.com", "is_private": false, "creation_time": "2011-06-06T18:42:56Z"}, {"count": 6, "text": "Thx very much for the info, Clint! jcranmer, is that helpful?", "author": "mozilla@davidbienvenu.org", "creator": "mozilla@davidbienvenu.org", "creation_time": "2011-06-07T14:51:45Z", "is_private": false, "bug_id": 662180, "id": 5517404, "raw_text": "Thx very much for the info, Clint! jcranmer, is that helpful?", "attachment_id": null, "time": "2011-06-07T14:51:45Z", "tags": []}, {"text": "Okay, I see the certs db now, so I can have a chance to play with it ^_^.", "count": 7, "author": "Pidgeot18@gmail.com", "id": 5518883, "bug_id": 662180, "time": "2011-06-08T00:41:22Z", "raw_text": "Okay, I see the certs db now, so I can have a chance to play with it ^_^.", "creator": "Pidgeot18@gmail.com", "is_private": false, "creation_time": "2011-06-08T00:41:22Z", "attachment_id": null, "tags": []}, {"time": "2011-06-08T13:21:32Z", "attachment_id": null, "raw_text": "Do feel free to hack ssltunnel as necessary, its sole purpose is to be a test tool. Honza (:mayhemer) has done most of the hacking on it lately, so you can direct reviews his way.", "tags": [], "creator": "ted@mielczarek.org", "author": "ted@mielczarek.org", "count": 8, "text": "Do feel free to hack ssltunnel as necessary, its sole purpose is to be a test tool. Honza (:mayhemer) has done most of the hacking on it lately, so you can direct reviews his way.", "bug_id": 662180, "id": 5519559, "creation_time": "2011-06-08T13:21:32Z", "is_private": false}, {"attachment_id": 538438, "raw_text": "Brief sketch of what this would entail (I think this can read/write SSL data, but telnet -z ssl was balking for me about self-signed certs, so I didn't press too closely).\n\nThings that are nowhere near solved:\n1. Controlling which certificates get used.\n2. Starting up ssltunnel.\n3. Multiple connections. With this approach, we can't have two SSL connections in the handshake stage at the same time.\n\nPotential solutions:\nA. Start and shutdown ssltunnel every time we need to use it in a test via nsIProcess.\n   Advantages: no changes to m-c\n   Disadvantages: seems error-prone, need either one configuration file that\n     handles every case or need to switch between several config files\nB. Implement nsISSLServerSocket (with STARTTLS support, of course)\n   Advantages: I think this gives us maximum flexibility, if ported to m-c,\n     could be used by extensions\n   Disadvantages: requires a lot of implementation and needs more SSL knowledge\n     than I have\nC. Modify ssltunnel to use IPC control instead of config files\n   Advantages: solves config file issue\n   Disadvantages: only good general IPC m-c has right now is sockets... and I'm\n     also starting to get annoyed trying to keep track of streams (already up to\n     6 per connection)\nD. Use xpcshell to generate multiple processes for some tests\n   Advantages: should be relatively easy to do with manifests, solves starting\n     up ssltunnel\n   Disadvantages: IPC issues still remain, m-c needs changes\nE. Do #D and come up with a clean IPC in the process?\n   Advantages: May fix IPC issues\n   Disadvantages: have to come up with better IPC :-(\n\nNone of these options seem particularly appealing, but I think B is probably the best in the long run, although it's probably the most work.", "time": "2011-06-10T05:32:50Z", "tags": [], "author": "Pidgeot18@gmail.com", "count": 9, "text": "Created attachment 538438\nSketch of approach\n\nBrief sketch of what this would entail (I think this can read/write SSL data, but telnet -z ssl was balking for me about self-signed certs, so I didn't press too closely).\n\nThings that are nowhere near solved:\n1. Controlling which certificates get used.\n2. Starting up ssltunnel.\n3. Multiple connections. With this approach, we can't have two SSL connections in the handshake stage at the same time.\n\nPotential solutions:\nA. Start and shutdown ssltunnel every time we need to use it in a test via nsIProcess.\n   Advantages: no changes to m-c\n   Disadvantages: seems error-prone, need either one configuration file that\n     handles every case or need to switch between several config files\nB. Implement nsISSLServerSocket (with STARTTLS support, of course)\n   Advantages: I think this gives us maximum flexibility, if ported to m-c,\n     could be used by extensions\n   Disadvantages: requires a lot of implementation and needs more SSL knowledge\n     than I have\nC. Modify ssltunnel to use IPC control instead of config files\n   Advantages: solves config file issue\n   Disadvantages: only good general IPC m-c has right now is sockets... and I'm\n     also starting to get annoyed trying to keep track of streams (already up to\n     6 per connection)\nD. Use xpcshell to generate multiple processes for some tests\n   Advantages: should be relatively easy to do with manifests, solves starting\n     up ssltunnel\n   Disadvantages: IPC issues still remain, m-c needs changes\nE. Do #D and come up with a clean IPC in the process?\n   Advantages: May fix IPC issues\n   Disadvantages: have to come up with better IPC :-(\n\nNone of these options seem particularly appealing, but I think B is probably the best in the long run, although it's probably the most work.", "creator": "Pidgeot18@gmail.com", "is_private": false, "creation_time": "2011-06-10T05:32:50Z", "bug_id": 662180, "id": 5524303}, {"attachment_id": null, "raw_text": "tl;dr: The approach I have here falls hard, and I don't think I want to continue down this exact line. Layers may be worth saving, if we hardcode them. Finally, I don't think I'm going to continue doing work until there's a better plan in place for this sort of stuff.\n\n\nHaving some experience with the layer-based architecture now, here are my thoughts:\n\nMy original use cases were supporting SSL and LDAP's BER-conversion as layers. After thinking about it some more, I thought that IMAP's tagging and parsing conversion might benefit from being pulled out in a layer compared to the current hackish approach, and that perhaps I could test mail-over-proxy and charset concerns via layers as well.\n\nNow, I'm not so sure. First off, writing a generalized asynchronous pump for the SSL layer that might work for other layers is just plain annoying. Much better, I think, to just have a single input/output stream to worry about and shove SSL off to some other management places (hence why I was wishing to opt for option B: if we can promote an XPCOM socket transport to SSL (as a server), we let NSS worry about the real input/output and we just get decrypted data).\n\nThe other thing is that it's hard to be general about layers when each one wants to pass data to and from in different ways:\n* Proxy, SSL: communicate via async sockets\n* charset: needs to do binary array<->JS string conversion (or malformed JS string<->true JS string)\n* line buffering: could do either binary arrays or strings, but doing both depending on lower layers is annoying\n* IMAP-parser wants to output to generic args\n* LDAP-parser needs to output back to binary arrays, and may need buffering\n\nOh yeah, and everyone needs to communicate data back and forth to individual layers, particularly SSL (starttls, mainly), charset (don't want to translate message bodies! [actually, we may want to, if we want to test \"evil\" transcoders ;-)]), line buffering (is this line part of a command or not), and *-parser (how do we format the arguments?).\n\nIs this worth saving? Perhaps, but its ambition needs to be tamped down dramatically. There's really not many levels that are actually needed: if we really want to test mail-over-proxy, we can either spin up httpd.js for that or use this proxyserver.py thingy I found laying around somewhere and ignore it in the maild.js stack (which might be a better real-world approximation anyways). Everyone else pretty much has to be in a specific order, although I'm having mental issues trying to figure out where to place charset conversion (probably after line buffering, since I can always change line buffering to output binary arrays instead of strings); at thatp oint, it's a matter of merely enabling or disabling one for a test, with perhaps some variability in the parser layer.\n\nMultiple asynchronous communication in particular is something that I do NOT want to do: while I can easily handle the servers outputting data any old time they please, trying to figure out which stream wants me to send which data where via the layers approach is a maintenance nightmare. I've actually stored this as two distinct patches locally, where moving line buffering to a layer is the first patch and adding the SSL layer is the second one. The first patch is probably worth keeping, so it's the SSL+async layers patch that I'm considering trashing.\n\n\nAnyways, this is about as far as I am willing to go for now. This is a proof-of-concept which appears to at least partially work (telnet found the certificate at least), so if someone feels compelled that this is absolutely the right way to go, they can charge on ahead. However, going any further would require a fair amount of investment in some architecture decision which I don't feel qualified to make. If we do end up fully using ssltunnel largely as it stands, furthermore, I want to wait until after fakeserver-ipc happens so that I have a clearer idea of what the implications of multiple processes in xpcshell are.", "time": "2011-06-10T06:16:32Z", "tags": [], "author": "Pidgeot18@gmail.com", "text": "tl;dr: The approach I have here falls hard, and I don't think I want to continue down this exact line. Layers may be worth saving, if we hardcode them. Finally, I don't think I'm going to continue doing work until there's a better plan in place for this sort of stuff.\n\n\nHaving some experience with the layer-based architecture now, here are my thoughts:\n\nMy original use cases were supporting SSL and LDAP's BER-conversion as layers. After thinking about it some more, I thought that IMAP's tagging and parsing conversion might benefit from being pulled out in a layer compared to the current hackish approach, and that perhaps I could test mail-over-proxy and charset concerns via layers as well.\n\nNow, I'm not so sure. First off, writing a generalized asynchronous pump for the SSL layer that might work for other layers is just plain annoying. Much better, I think, to just have a single input/output stream to worry about and shove SSL off to some other management places (hence why I was wishing to opt for option B: if we can promote an XPCOM socket transport to SSL (as a server), we let NSS worry about the real input/output and we just get decrypted data).\n\nThe other thing is that it's hard to be general about layers when each one wants to pass data to and from in different ways:\n* Proxy, SSL: communicate via async sockets\n* charset: needs to do binary array<->JS string conversion (or malformed JS string<->true JS string)\n* line buffering: could do either binary arrays or strings, but doing both depending on lower layers is annoying\n* IMAP-parser wants to output to generic args\n* LDAP-parser needs to output back to binary arrays, and may need buffering\n\nOh yeah, and everyone needs to communicate data back and forth to individual layers, particularly SSL (starttls, mainly), charset (don't want to translate message bodies! [actually, we may want to, if we want to test \"evil\" transcoders ;-)]), line buffering (is this line part of a command or not), and *-parser (how do we format the arguments?).\n\nIs this worth saving? Perhaps, but its ambition needs to be tamped down dramatically. There's really not many levels that are actually needed: if we really want to test mail-over-proxy, we can either spin up httpd.js for that or use this proxyserver.py thingy I found laying around somewhere and ignore it in the maild.js stack (which might be a better real-world approximation anyways). Everyone else pretty much has to be in a specific order, although I'm having mental issues trying to figure out where to place charset conversion (probably after line buffering, since I can always change line buffering to output binary arrays instead of strings); at thatp oint, it's a matter of merely enabling or disabling one for a test, with perhaps some variability in the parser layer.\n\nMultiple asynchronous communication in particular is something that I do NOT want to do: while I can easily handle the servers outputting data any old time they please, trying to figure out which stream wants me to send which data where via the layers approach is a maintenance nightmare. I've actually stored this as two distinct patches locally, where moving line buffering to a layer is the first patch and adding the SSL layer is the second one. The first patch is probably worth keeping, so it's the SSL+async layers patch that I'm considering trashing.\n\n\nAnyways, this is about as far as I am willing to go for now. This is a proof-of-concept which appears to at least partially work (telnet found the certificate at least), so if someone feels compelled that this is absolutely the right way to go, they can charge on ahead. However, going any further would require a fair amount of investment in some architecture decision which I don't feel qualified to make. If we do end up fully using ssltunnel largely as it stands, furthermore, I want to wait until after fakeserver-ipc happens so that I have a clearer idea of what the implications of multiple processes in xpcshell are.", "count": 10, "creator": "Pidgeot18@gmail.com", "creation_time": "2011-06-10T06:16:32Z", "is_private": false, "bug_id": 662180, "id": 5524337}, {"raw_text": "Bienvenu: could you tell me what your thoughts on this architecture design are, particularly a response to comment 9? (No real way to request feedback on a comment, so this proof-of-concept patch is the best proxy I have...)", "time": "2011-06-10T06:18:49Z", "id": 5524339, "bug_id": 662180, "text": "Comment on attachment 538438\nSketch of approach\n\nBienvenu: could you tell me what your thoughts on this architecture design are, particularly a response to comment 9? (No real way to request feedback on a comment, so this proof-of-concept patch is the best proxy I have...)", "count": 11, "author": "Pidgeot18@gmail.com", "tags": [], "attachment_id": 538438, "is_private": false, "creation_time": "2011-06-10T06:18:49Z", "creator": "Pidgeot18@gmail.com"}, {"creator": "Pidgeot18@gmail.com", "author": "Pidgeot18@gmail.com", "count": 12, "text": "Oh yeah, for what it's worth, bug 242448 has a prototype patch which basically allows server sockets to utilize socket providers and then adds a lot of work to get the socket provider for SSL stuff to support socket listening. I doubt I understand NSS well enough to update that patch and know how to use it (while it doubtless handles the generic case better, I don't see how to select specific certificates for testing).\n\nThe other implementation idea I had was to grab the PRFileDesc* for the socket and then make a layer which binds SSL server stuff onto that: lower level but easier to understand. That is impossible without modifying m-c, since sockets don't expose PRFileDesc* in any way I can get to it, so it's either duplicate nsServerSocket or modify m-c.", "id": 5526405, "bug_id": 662180, "creation_time": "2011-06-11T03:01:34Z", "is_private": false, "time": "2011-06-11T03:01:34Z", "attachment_id": null, "raw_text": "Oh yeah, for what it's worth, bug 242448 has a prototype patch which basically allows server sockets to utilize socket providers and then adds a lot of work to get the socket provider for SSL stuff to support socket listening. I doubt I understand NSS well enough to update that patch and know how to use it (while it doubtless handles the generic case better, I don't see how to select specific certificates for testing).\n\nThe other implementation idea I had was to grab the PRFileDesc* for the socket and then make a layer which binds SSL server stuff onto that: lower level but easier to understand. That is impossible without modifying m-c, since sockets don't expose PRFileDesc* in any way I can get to it, so it's either duplicate nsServerSocket or modify m-c.", "tags": []}, {"time": "2011-06-13T16:25:02Z", "raw_text": "One test for the layer strategy is - would it allow you to easily implement COMPRESS=DEFLATE in a layer? Along with SSL at the same time? See http://tools.ietf.org/html/rfc4978. Like STARTTLS, this would require a layer to be added after the connection is established.", "count": 13, "text": "Comment on attachment 538438\nSketch of approach\n\nOne test for the layer strategy is - would it allow you to easily implement COMPRESS=DEFLATE in a layer? Along with SSL at the same time? See http://tools.ietf.org/html/rfc4978. Like STARTTLS, this would require a layer to be added after the connection is established.", "author": "mozilla@davidbienvenu.org", "id": 5528919, "bug_id": 662180, "attachment_id": 538438, "tags": [], "creator": "mozilla@davidbienvenu.org", "creation_time": "2011-06-13T16:25:02Z", "is_private": false}, {"bug_id": 662180, "id": 5529079, "creation_time": "2011-06-13T17:20:01Z", "is_private": false, "creator": "Pidgeot18@gmail.com", "count": 14, "text": "It still seems to be doable via hard-coded layer ordering:\n\nclient <-> SSL <-> SASL <-> compression <-> line <-> charset <-> treat <-> server\n\nAlthough it does bring up interesting edge cases: what if I did COMPRESS=DEFLATE, then SSL, then SASL (if we use, e.g., GSSAPI to sign/encrypt the entire layer as opposed to just auth).", "author": "Pidgeot18@gmail.com", "tags": [], "time": "2011-06-13T17:20:01Z", "raw_text": "It still seems to be doable via hard-coded layer ordering:\n\nclient <-> SSL <-> SASL <-> compression <-> line <-> charset <-> treat <-> server\n\nAlthough it does bring up interesting edge cases: what if I did COMPRESS=DEFLATE, then SSL, then SASL (if we use, e.g., GSSAPI to sign/encrypt the entire layer as opposed to just auth).", "attachment_id": null}, {"raw_text": "(In reply to comment #14)\n\n> Although it does bring up interesting edge cases: what if I did\n> COMPRESS=DEFLATE, then SSL, then SASL (if we use, e.g., GSSAPI to\n> sign/encrypt the entire layer as opposed to just auth).\n\nif I'm understanding you correctly, we would not do that (STARTTLS and GSSAPI would always come before COMPRESS=DEFLATE). But shouldn't you be able to adjust the order of those layers based on the commands received from the client?", "time": "2011-06-13T17:28:40Z", "id": 5529109, "bug_id": 662180, "author": "mozilla@davidbienvenu.org", "count": 15, "text": "(In reply to comment #14)\n\n> Although it does bring up interesting edge cases: what if I did\n> COMPRESS=DEFLATE, then SSL, then SASL (if we use, e.g., GSSAPI to\n> sign/encrypt the entire layer as opposed to just auth).\n\nif I'm understanding you correctly, we would not do that (STARTTLS and GSSAPI would always come before COMPRESS=DEFLATE). But shouldn't you be able to adjust the order of those layers based on the commands received from the client?", "tags": [], "attachment_id": null, "is_private": false, "creation_time": "2011-06-13T17:28:40Z", "creator": "mozilla@davidbienvenu.org"}, {"bug_id": 662180, "id": 5533298, "creation_time": "2011-06-15T05:52:55Z", "is_private": false, "creator": "Pidgeot18@gmail.com", "text": "Created attachment 539439\nSSL without layers\n\nI've given some more thought to layers over the past few days, and I've come to the conclusion that, while layers are a useful addition to fakeserver, they aren't well-suited for SSL, since SSL is sufficiently different and annoying that a generalization that handles SSL causes issues for other people. Thus this is an approach which uses ssltunnel but doesn't handle layers. This doesn't mean I'm abandoning it, it just means that I am going to move layer implementation into another bug where its power can be more readily harnessed, e.g., charset layers or compress=deflate.\n\nThe good news is I can confirm that this works, as in, I have carried on an NNTP conversation via telnet -z ssl and a modified qaserver that inits the SSL layer. The bad news is that this requires ssltunnel to be run outside of the process... and my investigation into how mochitest runs ssltunnel can basically be summarized as \"it's thoroughly baked into the test framework and automation scripts.\"\n\nOptions:\n1. Try to figure out how to invoke ssltunnel from xpcshell itself. I can probably do it fairly easily for regular testing environments, but I would need some hand-holding to figure out how to get it working in the packaged-test world.\n2. Modify xpcshell framework to invoke ssltunnel. Apparently mochitest and xpcshell use different automation APIs, so this may not be much easier.\n3. Screw ssltunnel and implement SSL server sockets. Fixes process invocation problems, but disables starttls (probably)\n4. Screw ssltunnel and write a fakeserver-utils library that implements SSL by reaching down to NSS itself. This may require native code, although at this level I could possibly do it with jsctypes.", "count": 16, "author": "Pidgeot18@gmail.com", "tags": [], "time": "2011-06-15T05:52:55Z", "raw_text": "I've given some more thought to layers over the past few days, and I've come to the conclusion that, while layers are a useful addition to fakeserver, they aren't well-suited for SSL, since SSL is sufficiently different and annoying that a generalization that handles SSL causes issues for other people. Thus this is an approach which uses ssltunnel but doesn't handle layers. This doesn't mean I'm abandoning it, it just means that I am going to move layer implementation into another bug where its power can be more readily harnessed, e.g., charset layers or compress=deflate.\n\nThe good news is I can confirm that this works, as in, I have carried on an NNTP conversation via telnet -z ssl and a modified qaserver that inits the SSL layer. The bad news is that this requires ssltunnel to be run outside of the process... and my investigation into how mochitest runs ssltunnel can basically be summarized as \"it's thoroughly baked into the test framework and automation scripts.\"\n\nOptions:\n1. Try to figure out how to invoke ssltunnel from xpcshell itself. I can probably do it fairly easily for regular testing environments, but I would need some hand-holding to figure out how to get it working in the packaged-test world.\n2. Modify xpcshell framework to invoke ssltunnel. Apparently mochitest and xpcshell use different automation APIs, so this may not be much easier.\n3. Screw ssltunnel and implement SSL server sockets. Fixes process invocation problems, but disables starttls (probably)\n4. Screw ssltunnel and write a fakeserver-utils library that implements SSL by reaching down to NSS itself. This may require native code, although at this level I could possibly do it with jsctypes.", "attachment_id": 539439}, {"tags": [], "attachment_id": null, "is_private": false, "creation_time": "2011-06-15T12:33:29Z", "creator": "ted@mielczarek.org", "raw_text": "Honza has a patch in bug 466524 that implements running ssltunnel via xpcshell in order to test SSL in xpcshell unit tests.", "time": "2011-06-15T12:33:29Z", "id": 5533644, "bug_id": 662180, "text": "Honza has a patch in bug 466524 that implements running ssltunnel via xpcshell in order to test SSL in xpcshell unit tests.", "count": 17, "author": "ted@mielczarek.org"}, {"creation_time": "2011-06-20T02:11:42Z", "is_private": false, "creator": "Pidgeot18@gmail.com", "tags": [], "attachment_id": 540376, "id": 5541816, "bug_id": 662180, "author": "Pidgeot18@gmail.com", "count": 18, "text": "Created attachment 540376\nSSL, with STARTTLS support\n\nNot quite ready for review yet, but I'd thought I'd mention the latest milestone: I now have both SSL connections and STARTTLS working and in tests. At this point, all that should be necessary is cleanup and submitting to try for testing, as well as untangling which patches this depends on (my patch queue is a bit long at this point).", "raw_text": "Not quite ready for review yet, but I'd thought I'd mention the latest milestone: I now have both SSL connections and STARTTLS working and in tests. At this point, all that should be necessary is cleanup and submitting to try for testing, as well as untangling which patches this depends on (my patch queue is a bit long at this point).", "time": "2011-06-20T02:11:42Z"}, {"bug_id": 662180, "id": 5581177, "author": "Pidgeot18@gmail.com", "text": "I have a locally working approach, but it appears that the buildbots don't unpack ssltunnel to the bin/ directory, which prevents this from working on tinderbox...", "count": 19, "time": "2011-07-08T16:49:44Z", "raw_text": "I have a locally working approach, but it appears that the buildbots don't unpack ssltunnel to the bin/ directory, which prevents this from working on tinderbox...", "creation_time": "2011-07-08T16:49:44Z", "is_private": false, "creator": "Pidgeot18@gmail.com", "tags": [], "attachment_id": null}, {"tags": [], "raw_text": "Buildbot try and try-unittest masters have this patch:\n\n http://pastebin.mozilla.org/1269650\n\nWhen we're ready I can land the patch and apply it to the Buildbot production master as well.", "attachment_id": null, "time": "2011-07-11T20:29:29Z", "creation_time": "2011-07-11T20:29:29Z", "is_private": false, "bug_id": 662180, "id": 5585236, "count": 20, "text": "Buildbot try and try-unittest masters have this patch:\n\n http://pastebin.mozilla.org/1269650\n\nWhen we're ready I can land the patch and apply it to the Buildbot production master as well.", "author": "jhopkins@mozilla.com", "creator": "jhopkins@mozilla.com"}, {"creator": "Pidgeot18@gmail.com", "text": "Created attachment 615348\nPart 1: Implement a layer-based framework for fakeserver\n\n(Not strictly necessary for SSL support, but it makes doing this easier)", "count": 21, "author": "Pidgeot18@gmail.com", "id": 6225962, "bug_id": 662180, "is_private": false, "creation_time": "2012-04-16T16:03:07Z", "time": "2012-04-16T16:03:07Z", "raw_text": "(Not strictly necessary for SSL support, but it makes doing this easier)", "attachment_id": 615348, "tags": []}, {"creator": "Pidgeot18@gmail.com", "creation_time": "2012-04-16T16:04:25Z", "is_private": false, "attachment_id": 615349, "tags": [], "author": "Pidgeot18@gmail.com", "count": 22, "text": "Created attachment 615349\nPart 2: Implement SSL compatibility layer\n\nThis does the SSL. It has robustness issues due to raciness with process creation for ssltunnel, and I'm not 100% sure that the SSL certificate stuff is at all correct...", "bug_id": 662180, "id": 6225970, "time": "2012-04-16T16:04:25Z", "raw_text": "This does the SSL. It has robustness issues due to raciness with process creation for ssltunnel, and I'm not 100% sure that the SSL certificate stuff is at all correct..."}, {"tags": [], "time": "2015-09-25T12:46:22Z", "raw_text": "Removing myslef on all the bugs I'm cced on. Please NI me if you need something on MailNews Core bugs from me.", "attachment_id": null, "bug_id": 662180, "id": 10776054, "is_private": false, "creation_time": "2015-09-25T12:46:22Z", "creator": "ludovic@hirlimann.net", "count": 23, "text": "Removing myslef on all the bugs I'm cced on. Please NI me if you need something on MailNews Core bugs from me.", "author": "ludovic@hirlimann.net"}]}}, "comments": {}}