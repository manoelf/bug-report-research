{"bugs": {"670898": {"comments": [{"creator": "jvarga@mozilla.com", "is_private": false, "count": 0, "author": "jvarga@mozilla.com", "creation_time": "2011-07-12T11:23:12Z", "bug_id": 670898, "tags": [], "time": "2011-07-12T11:23:12Z", "text": "", "attachment_id": null, "raw_text": "", "id": 5586376}, {"id": 5586390, "raw_text": "command API attributes were recently renamed in the spec:\nhttp://html5.org/tools/web-apps-tracker?from=6285&to=6286\nso the shadowing of attributes in derived interfaces got removed too\n\nhowever, we should consider to add a new attribute e.g. .commandState instead, this attribute would return an object with all these attributes\n\nsee https://bugzilla.mozilla.org/show_bug.cgi?id=617528#c71\n\nHTML5 context menu bug is not blocked by this for now", "attachment_id": null, "bug_id": 670898, "tags": [], "time": "2011-07-12T11:37:56Z", "text": "command API attributes were recently renamed in the spec:\nhttp://html5.org/tools/web-apps-tracker?from=6285&to=6286\nso the shadowing of attributes in derived interfaces got removed too\n\nhowever, we should consider to add a new attribute e.g. .commandState instead, this attribute would return an object with all these attributes\n\nsee https://bugzilla.mozilla.org/show_bug.cgi?id=617528#c71\n\nHTML5 context menu bug is not blocked by this for now", "author": "jvarga@mozilla.com", "creation_time": "2011-07-12T11:37:56Z", "count": 1, "creator": "jvarga@mozilla.com", "is_private": false}, {"is_private": false, "creator": "mounir@lamouri.fr", "text": "(In reply to comment #1)\n> however, we should consider to add a new attribute e.g. .commandState\n> instead, this attribute would return an object with all these attributes\n> \n> see https://bugzilla.mozilla.org/show_bug.cgi?id=617528#c71\n\nJan, you told me Cameron and Olli agreed. I do agree too given that I did propose that solution.\nDoes someone disagree? However, you could probably mention that solution in a W3 bug (or open a new one) and implement it here.", "time": "2011-07-12T14:22:19Z", "tags": [], "creation_time": "2011-07-12T14:22:19Z", "author": "mounir@lamouri.fr", "raw_text": "(In reply to comment #1)\n> however, we should consider to add a new attribute e.g. .commandState\n> instead, this attribute would return an object with all these attributes\n> \n> see https://bugzilla.mozilla.org/show_bug.cgi?id=617528#c71\n\nJan, you told me Cameron and Olli agreed. I do agree too given that I did propose that solution.\nDoes someone disagree? However, you could probably mention that solution in a W3 bug (or open a new one) and implement it here.", "attachment_id": null, "id": 5586595, "count": 2, "bug_id": 670898}, {"raw_text": "What is the advantage of such a state object from a page author's point of view?", "attachment_id": null, "id": 5586756, "count": 3, "creator": "jonas@sicking.cc", "is_private": false, "time": "2011-07-12T15:56:59Z", "tags": [], "bug_id": 670898, "text": "What is the advantage of such a state object from a page author's point of view?", "author": "jonas@sicking.cc", "creation_time": "2011-07-12T15:56:59Z"}, {"text": "(In reply to comment #3)\n> What is the advantage of such a state object from a page author's point of\n> view?\n\nChecking if an element is used as a command would be more natural:\nif (element.commandObject !== null) {\n}\n\nAlso, checking if the browser support the feature could be done with:\nif (element.commandObject !== undefined) {\n}\nWhich seems better than checking a random attribute or all of them.\n\nGenerally speaking, it would prevent polluting HTMLElement and will remove the \"command\" prefix for all command API related attributes.", "time": "2011-07-12T16:10:42Z", "bug_id": 670898, "tags": [], "creation_time": "2011-07-12T16:10:42Z", "author": "mounir@lamouri.fr", "count": 4, "is_private": false, "creator": "mounir@lamouri.fr", "id": 5586782, "raw_text": "(In reply to comment #3)\n> What is the advantage of such a state object from a page author's point of\n> view?\n\nChecking if an element is used as a command would be more natural:\nif (element.commandObject !== null) {\n}\n\nAlso, checking if the browser support the feature could be done with:\nif (element.commandObject !== undefined) {\n}\nWhich seems better than checking a random attribute or all of them.\n\nGenerally speaking, it would prevent polluting HTMLElement and will remove the \"command\" prefix for all command API related attributes.", "attachment_id": null}, {"creator": "ian@hixie.ch", "is_private": false, "count": 5, "author": "ian@hixie.ch", "creation_time": "2011-07-12T19:00:43Z", "bug_id": 670898, "tags": [], "time": "2011-07-12T19:00:43Z", "text": "Replace commandObject with commandType and that's exactly how the spec currently works, no?", "attachment_id": null, "raw_text": "Replace commandObject with commandType and that's exactly how the spec currently works, no?", "id": 5587282}, {"is_private": false, "creator": "jvarga@mozilla.com", "count": 6, "creation_time": "2011-07-16T11:03:40Z", "author": "jvarga@mozilla.com", "text": ".getCommandInfo(out DOMString aType, out DOMString aLabel, ...) would be nice too\nhowever I just found out that WebIDL doesn't support \"out\" parameters :)", "time": "2011-07-16T11:03:40Z", "bug_id": 670898, "tags": [], "attachment_id": null, "raw_text": ".getCommandInfo(out DOMString aType, out DOMString aLabel, ...) would be nice too\nhowever I just found out that WebIDL doesn't support \"out\" parameters :)", "id": 5594803}, {"bug_id": 670898, "count": 7, "text": "sorry, I forgot to mention that it would be a good compromise IMO\nit doesn't pollute the namespace so much and there's no need to create a helper object.\n\nwould it be possible to add support for out arguments ?", "time": "2011-07-16T11:19:15Z", "tags": [], "creation_time": "2011-07-16T11:19:15Z", "author": "jvarga@mozilla.com", "is_private": false, "creator": "jvarga@mozilla.com", "id": 5594813, "raw_text": "sorry, I forgot to mention that it would be a good compromise IMO\nit doesn't pollute the namespace so much and there's no need to create a helper object.\n\nwould it be possible to add support for out arguments ?", "attachment_id": null}, {"is_private": false, "creator": "cam@mcc.id.au", "creation_time": "2011-07-16T22:11:45Z", "author": "cam@mcc.id.au", "text": "Not really, since JS can't pass primitive values by reference.", "time": "2011-07-16T22:11:45Z", "tags": [], "attachment_id": null, "raw_text": "Not really, since JS can't pass primitive values by reference.", "id": 5595159, "count": 8, "bug_id": 670898}, {"bug_id": 670898, "count": 9, "time": "2011-07-27T07:36:06Z", "tags": [], "text": "ok, so the original spec contained these new attributes:\n.commandType, .label, .icon, .disabled, .checked\n\nAn objection was raised that this pollutes the event namespace (onfoo=\"\")\nand it was proposed to use an object called e.g. .commandState that would contain these attributes.\n\nNow, the attributes are:\n.commandType, .commandLabel, .commandIcon, .commandHidden, .commandDisabled, .commandChecked\n\nThey were renamed to fix other problem (shadowing of attributes).\n\nI think that authors won't use such \"long\" variable names in onfoo=\"\", so it should be a bit less problematic.\n\nActually, the editing API looks similar:\nexecCommand()\nqueryCommandEnabled()\nqueryCommandIndeterm()\n...\n\nNow, I'm not sure if it is good or bad :)", "author": "jvarga@mozilla.com", "creation_time": "2011-07-27T07:36:06Z", "creator": "jvarga@mozilla.com", "is_private": false, "id": 5615959, "raw_text": "ok, so the original spec contained these new attributes:\n.commandType, .label, .icon, .disabled, .checked\n\nAn objection was raised that this pollutes the event namespace (onfoo=\"\")\nand it was proposed to use an object called e.g. .commandState that would contain these attributes.\n\nNow, the attributes are:\n.commandType, .commandLabel, .commandIcon, .commandHidden, .commandDisabled, .commandChecked\n\nThey were renamed to fix other problem (shadowing of attributes).\n\nI think that authors won't use such \"long\" variable names in onfoo=\"\", so it should be a bit less problematic.\n\nActually, the editing API looks similar:\nexecCommand()\nqueryCommandEnabled()\nqueryCommandIndeterm()\n...\n\nNow, I'm not sure if it is good or bad :)", "attachment_id": null}]}}, "comments": {}}