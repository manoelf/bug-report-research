{"bugs": {"676100": {"comments": [{"raw_text": "The templates in smime/cmsasn1.c related to key agreement contain a number of errors.  In some places, the templates do not match the data structures to which they refer and in other cases they do not match the ASN.1 as specified in RFC 5652.  This patch attempts to address the problems, which are as follows:\n\n1) In NSSCMSOriginatorIdentifierOrKeyTemplate, subjectKeyIdentifier and originatorKey are incorrectly marked as having EXPLICIT tagging and the tags are incorrect.\n\n2) NSSCMSRecipientKeyIdentifierTemplate did not match the NSSCMSRecipientKeyIdentifier as each item in NSSCMSRecipientKeyIdentifier is of type \"SECItem *\", but the template did not treat them as pointers.\n\n3) NSSCMSRecipientEncryptedKeyTemplate incorrectly treated encryptedKey as a BIT STRING rather than an OCTET STRING.\n\n4) NSSCMSRecipientInfoTemplate incorrectly marked kari and kekri as having EXPLICIT tagging.\n\n5) ukm in NSSCMSKeyAgreeRecipientInfo is of type \"SECItem *\", but it is not treated as a pointer in NSSCMSKeyAgreeRecipientInfoTemplate.  In this case I corrected the problem by changing the type of ukm to \"SECItem\" in NSSCMSKeyAgreeRecipientInfo.  I did this since the sample (commented out) code in NSS_CMSUtil_EncryptSymKey_ESDH also treats ukm as if it were of type \"SECItem\" rather than \"SECItem *\".  (NOTE:  When I made this change to smime/cmst.h I found that  I couldn't simply recompile the code as not all files that needed to be recompiled got recompiled, so I had to run make clean and then recompile from scratch to get the code to compile correctly.)\n\nI have tested most of these changes by doing interoperability testing with Microsoft Outlook 2010 to verify that these changes lead to correct encoding and parsing of ECDH encrypted CMS messages. (I don't have any examples of messages encrypted using static-static ECDH, so I have no examples of messages in which the subjectKeyIdentifier choice of OriginatorIdentifierOrKey is used.)", "attachment_id": 550216, "bug_id": 676100, "text": "Created attachment 550216\nPatch to correct Templates for key agreement in smime/cmsasn1.c\n\nThe templates in smime/cmsasn1.c related to key agreement contain a number of errors.  In some places, the templates do not match the data structures to which they refer and in other cases they do not match the ASN.1 as specified in RFC 5652.  This patch attempts to address the problems, which are as follows:\n\n1) In NSSCMSOriginatorIdentifierOrKeyTemplate, subjectKeyIdentifier and originatorKey are incorrectly marked as having EXPLICIT tagging and the tags are incorrect.\n\n2) NSSCMSRecipientKeyIdentifierTemplate did not match the NSSCMSRecipientKeyIdentifier as each item in NSSCMSRecipientKeyIdentifier is of type \"SECItem *\", but the template did not treat them as pointers.\n\n3) NSSCMSRecipientEncryptedKeyTemplate incorrectly treated encryptedKey as a BIT STRING rather than an OCTET STRING.\n\n4) NSSCMSRecipientInfoTemplate incorrectly marked kari and kekri as having EXPLICIT tagging.\n\n5) ukm in NSSCMSKeyAgreeRecipientInfo is of type \"SECItem *\", but it is not treated as a pointer in NSSCMSKeyAgreeRecipientInfoTemplate.  In this case I corrected the problem by changing the type of ukm to \"SECItem\" in NSSCMSKeyAgreeRecipientInfo.  I did this since the sample (commented out) code in NSS_CMSUtil_EncryptSymKey_ESDH also treats ukm as if it were of type \"SECItem\" rather than \"SECItem *\".  (NOTE:  When I made this change to smime/cmst.h I found that  I couldn't simply recompile the code as not all files that needed to be recompiled got recompiled, so I had to run make clean and then recompile from scratch to get the code to compile correctly.)\n\nI have tested most of these changes by doing interoperability testing with Microsoft Outlook 2010 to verify that these changes lead to correct encoding and parsing of ECDH encrypted CMS messages. (I don't have any examples of messages encrypted using static-static ECDH, so I have no examples of messages in which the subjectKeyIdentifier choice of OriginatorIdentifierOrKey is used.)", "tags": [], "is_private": false, "id": 5628888, "count": 0, "author": "dcooper16@gmail.com", "creator": "dcooper16@gmail.com", "time": "2011-08-02T21:37:04Z", "creation_time": "2011-08-02T21:37:04Z"}, {"tags": [], "text": "Comment on attachment 550216\nPatch to correct Templates for key agreement in smime/cmsasn1.c\n\nDavid , you need to set review flags if you want your patches to get into the tree.", "bug_id": 676100, "attachment_id": 550216, "raw_text": "David , you need to set review flags if you want your patches to get into the tree.", "time": "2011-08-03T07:33:45Z", "creation_time": "2011-08-03T07:33:45Z", "creator": "ludovic@hirlimann.net", "author": "ludovic@hirlimann.net", "count": 1, "id": 5629857, "is_private": false}, {"creator": "kaie@kuix.de", "time": "2011-08-04T19:15:43Z", "creation_time": "2011-08-04T19:15:43Z", "author": "kaie@kuix.de", "is_private": false, "count": 2, "id": 5633946, "tags": [], "text": "Hi Nalin, Bob Relyea has proposed, this patch should be tested thoroughly (once reviewed). CC'ing you FYI.", "bug_id": 676100, "attachment_id": null, "raw_text": "Hi Nalin, Bob Relyea has proposed, this patch should be tested thoroughly (once reviewed). CC'ing you FYI."}, {"creator": "nelson@bolyard.me", "time": "2011-08-04T22:23:17Z", "creation_time": "2011-08-04T22:23:17Z", "author": "nelson@bolyard.me", "is_private": false, "count": 3, "id": 5634529, "tags": [], "text": "NSS has one encoder and two decoders for ASN.1 BERT/DER.\nThe combination of OPTIONAL and INLINE in the same template is supported only\nby one decoder, not the encoder, and then only for string-ish primitive types,\nnot constructed types.  The usual and preferred solution to this is to make optional items NOT be inline, but rather be POINTER.  That works with all \nour encoders and decoders.  Please don't create templates that cannot be \nencoded by our encoder.\n\nThere are several different situations in ASN.1 where an item is encoded with \nEXPLICIT encoding, even though the ASN.1 for it says it is implicit.  For all\nsuch situations, our encoders and deciders require that the template say \nEXPLICIT, regardless of the ASN.1 abstract notation says.  In the past, there\nhave been many errors (now corrected) where the template did not say EXPLICIT\nin those cases.  All such cases known have been fixed.  \n\nThis patch takes several templates that are presently EXPLICIT, and removes\nthe EXPLICIT from them.  Without more study than I have time for now, I am \nnot sure if any of these are cases where EXPLICIT encoding is required \ndespite the ASN.1 saying it is implicit, but that possibility concerns me.\nIt would be a real shame if any of those fixes got undone.", "bug_id": 676100, "attachment_id": null, "raw_text": "NSS has one encoder and two decoders for ASN.1 BERT/DER.\nThe combination of OPTIONAL and INLINE in the same template is supported only\nby one decoder, not the encoder, and then only for string-ish primitive types,\nnot constructed types.  The usual and preferred solution to this is to make optional items NOT be inline, but rather be POINTER.  That works with all \nour encoders and decoders.  Please don't create templates that cannot be \nencoded by our encoder.\n\nThere are several different situations in ASN.1 where an item is encoded with \nEXPLICIT encoding, even though the ASN.1 for it says it is implicit.  For all\nsuch situations, our encoders and deciders require that the template say \nEXPLICIT, regardless of the ASN.1 abstract notation says.  In the past, there\nhave been many errors (now corrected) where the template did not say EXPLICIT\nin those cases.  All such cases known have been fixed.  \n\nThis patch takes several templates that are presently EXPLICIT, and removes\nthe EXPLICIT from them.  Without more study than I have time for now, I am \nnot sure if any of these are cases where EXPLICIT encoding is required \ndespite the ASN.1 saying it is implicit, but that possibility concerns me.\nIt would be a real shame if any of those fixes got undone."}, {"attachment_id": 551096, "raw_text": "", "tags": [], "bug_id": 676100, "text": "Created attachment 551096\nMicrosoft Outlook 2007 email encrypted using both RSA and ECDH.  Recipients identified via IssuerAndSerialNumber.", "is_private": false, "id": 5636301, "count": 4, "creator": "dcooper16@gmail.com", "time": "2011-08-05T18:17:25Z", "creation_time": "2011-08-05T18:17:25Z", "author": "dcooper16@gmail.com"}, {"count": 5, "id": 5636312, "is_private": false, "creation_time": "2011-08-05T18:20:25Z", "time": "2011-08-05T18:20:25Z", "creator": "dcooper16@gmail.com", "author": "dcooper16@gmail.com", "attachment_id": 551098, "raw_text": "", "bug_id": 676100, "text": "Created attachment 551098\nMicrosoft Outlook 2010 email encrypted using both RSA and ECDH.  Recipients identified via SubjectKeyIdentifier.", "tags": []}, {"tags": [], "bug_id": 676100, "text": "Created attachment 551104\nThunderbird email encrypted using ECDH.  User keying material present.\n\nThis message was created using Thunderbird with the patch from this bug along with the patches from bug #591640, bug #676108, and bug #676118 applied.  The encoding in this message is similar to that created by Outlook 2007 (attachment 551096), except that the optional UserKeyingMaterial field is included.\n\nIn case it helps in the review of this patch, I have attached three email messages.  All three of the emails use the originatorKey choice of OriginatorIdentifierOrKey.  I do not know of any examples of the other two choices of OriginatorIdentifierOrKey being used (the other two options would only be used in static-static DH, static-static ECDH, or MQV).  Of course, all three messages also include a recipient encrypted key.\n\nFor the NSSCMSRecipientInfo, the messages include examples of both key transport (for RSA) and key agreement (for ECDH), but not KEKRecipientInfo.\n\nThe message that I created using a patched version of Thunderbird includes UserKeyingMaterial, whereas the messages created using Outlook do not.  I have verified that Outlook can decrypt the messages created using Thunderbird with the ukm field and that Thunderbird can decrypt the messages created using Outlook without the ukm field.  (These templates also work if I modify NSS to not include a ukm in the messages that it creates.)\n\nThe message created by Outlook 2010 uses the NSSCMSRecipientKeyIdentifierTemplate, but only the subjectKeyIdentifier field is present.  Also, I have only decoded messages that identify recipients via subjectKeyIdentifier.  All of the messages that I have encoded have identified recipients via IssuerAndSerialNumber.", "attachment_id": 551104, "raw_text": "This message was created using Thunderbird with the patch from this bug along with the patches from bug #591640, bug #676108, and bug #676118 applied.  The encoding in this message is similar to that created by Outlook 2007 (attachment 551096), except that the optional UserKeyingMaterial field is included.\n\nIn case it helps in the review of this patch, I have attached three email messages.  All three of the emails use the originatorKey choice of OriginatorIdentifierOrKey.  I do not know of any examples of the other two choices of OriginatorIdentifierOrKey being used (the other two options would only be used in static-static DH, static-static ECDH, or MQV).  Of course, all three messages also include a recipient encrypted key.\n\nFor the NSSCMSRecipientInfo, the messages include examples of both key transport (for RSA) and key agreement (for ECDH), but not KEKRecipientInfo.\n\nThe message that I created using a patched version of Thunderbird includes UserKeyingMaterial, whereas the messages created using Outlook do not.  I have verified that Outlook can decrypt the messages created using Thunderbird with the ukm field and that Thunderbird can decrypt the messages created using Outlook without the ukm field.  (These templates also work if I modify NSS to not include a ukm in the messages that it creates.)\n\nThe message created by Outlook 2010 uses the NSSCMSRecipientKeyIdentifierTemplate, but only the subjectKeyIdentifier field is present.  Also, I have only decoded messages that identify recipients via subjectKeyIdentifier.  All of the messages that I have encoded have identified recipients via IssuerAndSerialNumber.", "creator": "dcooper16@gmail.com", "time": "2011-08-05T18:44:32Z", "creation_time": "2011-08-05T18:44:32Z", "author": "dcooper16@gmail.com", "is_private": false, "id": 5636366, "count": 6}, {"attachment_id": null, "raw_text": "(In reply to Nelson Bolyard (seldom reads bugmail) from comment #3)\n> NSS has one encoder and two decoders for ASN.1 BERT/DER.\n> The combination of OPTIONAL and INLINE in the same template is supported only\n> by one decoder, not the encoder, and then only for string-ish primitive\n> types,\n> not constructed types.  The usual and preferred solution to this is to make\n> optional items NOT be inline, but rather be POINTER.  That works with all \n> our encoders and decoders.  Please don't create templates that cannot be \n> encoded by our encoder.\n\nOkay.  I'll admit that I don't fully understand all of the options in these templates.  In this case (NSSCMSRecipientKeyIdentifierTemplate) I encountered a problem trying to decrypt a message that was encrypted using Outlook 2010 (such as in attachment 551098) in which the recipient was identified by subjectKeyIdentifier.  I noticed that the corresponding template was incorrect and made a change that allowed me to correctly parse the message.  (As noted, when creating encrypted messages NSS always identifies recipients using IssuerAndSerialNumber so I only testing the decoding side of this template.) So, what should the template for NSSCMSRecipientKeyIdentifierTemplate be?\n\n> There are several different situations in ASN.1 where an item is encoded\n> with \n> EXPLICIT encoding, even though the ASN.1 for it says it is implicit.  For all\n> such situations, our encoders and deciders require that the template say \n> EXPLICIT, regardless of the ASN.1 abstract notation says.  In the past, there\n> have been many errors (now corrected) where the template did not say EXPLICIT\n> in those cases.  All such cases known have been fixed.\n\nI did find a couple of instances in which the SEC_ASN1_EXPLICIT tag was included even though doing so wouldn't seem to align with the ASN.1.  However, the only instances that I saw seemed different than in these cases.  For example, they both used SEC_ASN1_SUB(SEC_AnyTemplate) even though the underlying ASN.1 was not ANY.  My guess is that the templates that I made changes to in this patch had simply never been used before now and so errors in them went undetected.\n\n> This patch takes several templates that are presently EXPLICIT, and removes\n> the EXPLICIT from them.  Without more study than I have time for now, I am \n> not sure if any of these are cases where EXPLICIT encoding is required \n> despite the ASN.1 saying it is implicit, but that possibility concerns me.\n> It would be a real shame if any of those fixes got undone.\n\nMy patch removes SEC_ASN1_EXPLICIT from four places in two templates.  As noted in comment 6, I have created and parsed messages that include the originatorKey choice of OriginatorIdentifierOrKey and the kari choice of RecipientInfo, and so I know that encoding/decoding did not work correctly for these items until I changed the templates.  The two untested cases seem sufficiently similar that I would be surprised if SEC_ASN1_EXPLICIT was appropriate for them.", "text": "(In reply to Nelson Bolyard (seldom reads bugmail) from comment #3)\n> NSS has one encoder and two decoders for ASN.1 BERT/DER.\n> The combination of OPTIONAL and INLINE in the same template is supported only\n> by one decoder, not the encoder, and then only for string-ish primitive\n> types,\n> not constructed types.  The usual and preferred solution to this is to make\n> optional items NOT be inline, but rather be POINTER.  That works with all \n> our encoders and decoders.  Please don't create templates that cannot be \n> encoded by our encoder.\n\nOkay.  I'll admit that I don't fully understand all of the options in these templates.  In this case (NSSCMSRecipientKeyIdentifierTemplate) I encountered a problem trying to decrypt a message that was encrypted using Outlook 2010 (such as in attachment 551098) in which the recipient was identified by subjectKeyIdentifier.  I noticed that the corresponding template was incorrect and made a change that allowed me to correctly parse the message.  (As noted, when creating encrypted messages NSS always identifies recipients using IssuerAndSerialNumber so I only testing the decoding side of this template.) So, what should the template for NSSCMSRecipientKeyIdentifierTemplate be?\n\n> There are several different situations in ASN.1 where an item is encoded\n> with \n> EXPLICIT encoding, even though the ASN.1 for it says it is implicit.  For all\n> such situations, our encoders and deciders require that the template say \n> EXPLICIT, regardless of the ASN.1 abstract notation says.  In the past, there\n> have been many errors (now corrected) where the template did not say EXPLICIT\n> in those cases.  All such cases known have been fixed.\n\nI did find a couple of instances in which the SEC_ASN1_EXPLICIT tag was included even though doing so wouldn't seem to align with the ASN.1.  However, the only instances that I saw seemed different than in these cases.  For example, they both used SEC_ASN1_SUB(SEC_AnyTemplate) even though the underlying ASN.1 was not ANY.  My guess is that the templates that I made changes to in this patch had simply never been used before now and so errors in them went undetected.\n\n> This patch takes several templates that are presently EXPLICIT, and removes\n> the EXPLICIT from them.  Without more study than I have time for now, I am \n> not sure if any of these are cases where EXPLICIT encoding is required \n> despite the ASN.1 saying it is implicit, but that possibility concerns me.\n> It would be a real shame if any of those fixes got undone.\n\nMy patch removes SEC_ASN1_EXPLICIT from four places in two templates.  As noted in comment 6, I have created and parsed messages that include the originatorKey choice of OriginatorIdentifierOrKey and the kari choice of RecipientInfo, and so I know that encoding/decoding did not work correctly for these items until I changed the templates.  The two untested cases seem sufficiently similar that I would be surprised if SEC_ASN1_EXPLICIT was appropriate for them.", "bug_id": 676100, "tags": [], "is_private": false, "id": 5636446, "count": 7, "creator": "dcooper16@gmail.com", "creation_time": "2011-08-05T19:13:59Z", "time": "2011-08-05T19:13:59Z", "author": "dcooper16@gmail.com"}, {"attachment_id": null, "raw_text": "(In reply to David Cooper from comment #7)\n> In this case (NSSCMSRecipientKeyIdentifierTemplate) I\n> encountered a problem trying to decrypt a message that was encrypted using\n> Outlook 2010 (such as in attachment 551098 [details]) in which the recipient\n> was identified by subjectKeyIdentifier.  I noticed that the corresponding\n> template was incorrect and made a change that allowed me to correctly parse\n> the message.\n\nI can't really comment on the changes proposed by your patch, but from what I remember when working on bug 559243, I don't think that the NSSCMSRecipientKeyIdentifierTemplate is relevant for decrypting this sort of Outlook 2010 messages - only the NSSCMSRecipientIdentifierTemplate had to be fixed at the time.\n\n(Note well: I'm not saying that the changes you're suggesting for NSSCMSRecipientKeyIdentifierTemplate are unnecessary or even incorrect, I'm simply pointing out that they are not needed for the typical \"decrypt an Outlook-2010-generated message\" case.)", "tags": [], "bug_id": 676100, "text": "(In reply to David Cooper from comment #7)\n> In this case (NSSCMSRecipientKeyIdentifierTemplate) I\n> encountered a problem trying to decrypt a message that was encrypted using\n> Outlook 2010 (such as in attachment 551098 [details]) in which the recipient\n> was identified by subjectKeyIdentifier.  I noticed that the corresponding\n> template was incorrect and made a change that allowed me to correctly parse\n> the message.\n\nI can't really comment on the changes proposed by your patch, but from what I remember when working on bug 559243, I don't think that the NSSCMSRecipientKeyIdentifierTemplate is relevant for decrypting this sort of Outlook 2010 messages - only the NSSCMSRecipientIdentifierTemplate had to be fixed at the time.\n\n(Note well: I'm not saying that the changes you're suggesting for NSSCMSRecipientKeyIdentifierTemplate are unnecessary or even incorrect, I'm simply pointing out that they are not needed for the typical \"decrypt an Outlook-2010-generated message\" case.)", "is_private": false, "id": 5637477, "count": 8, "creator": "mozbgz@velox.ch", "time": "2011-08-06T10:28:36Z", "creation_time": "2011-08-06T10:28:36Z", "author": "mozbgz@velox.ch"}, {"tags": [], "text": "(In reply to Kaspar Brand from comment #8)\n> I can't really comment on the changes proposed by your patch, but from what\n> I remember when working on bug 559243, I don't think that the\n> NSSCMSRecipientKeyIdentifierTemplate is relevant for decrypting this sort of\n> Outlook 2010 messages - only the NSSCMSRecipientIdentifierTemplate had to be\n> fixed at the time.\n\nOk, meanwhile I realized that the message in attachment 551098 has a KeyAgreeRecipientInfo (kari) part, and this one uses the RecipientKeyIdentifier type to identify a recipient's encrypted key, so it's very well possible that this template needs to be adjusted. Please ignore my earlier statement.", "bug_id": 676100, "attachment_id": null, "raw_text": "(In reply to Kaspar Brand from comment #8)\n> I can't really comment on the changes proposed by your patch, but from what\n> I remember when working on bug 559243, I don't think that the\n> NSSCMSRecipientKeyIdentifierTemplate is relevant for decrypting this sort of\n> Outlook 2010 messages - only the NSSCMSRecipientIdentifierTemplate had to be\n> fixed at the time.\n\nOk, meanwhile I realized that the message in attachment 551098 has a KeyAgreeRecipientInfo (kari) part, and this one uses the RecipientKeyIdentifier type to identify a recipient's encrypted key, so it's very well possible that this template needs to be adjusted. Please ignore my earlier statement.", "creator": "mozbgz@velox.ch", "creation_time": "2011-08-07T14:01:52Z", "time": "2011-08-07T14:01:52Z", "author": "mozbgz@velox.ch", "is_private": false, "count": 9, "id": 5638230}, {"author": "dcooper16@gmail.com", "creator": "dcooper16@gmail.com", "creation_time": "2011-08-12T13:57:59Z", "time": "2011-08-12T13:57:59Z", "is_private": false, "count": 10, "id": 5649830, "text": "Created attachment 552646\nPatch to correct Templates for key agreement in smime/cmsasn1.c\n\n(In reply to Nelson Bolyard (seldom reads bugmail) from comment #3)\n> NSS has one encoder and two decoders for ASN.1 BERT/DER.\n> The combination of OPTIONAL and INLINE in the same template is supported only\n> by one decoder, not the encoder, and then only for string-ish primitive\n> types,\n> not constructed types.  The usual and preferred solution to this is to make\n> optional items NOT be inline, but rather be POINTER.  That works with all \n> our encoders and decoders.  Please don't create templates that cannot be \n> encoded by our encoder.\n\nOkay, I modified NSSCMSRecipientKeyIdentifierTemplate so that it doensn't use SEC_ASN1_INLINE.  I also verified that I could encode and decode messages using all elements of the template.  In the process of making these changes, I looked more closely at the ASN.1 for RecipientKeyIdentifier and noticed that there were more problems with the template.  The current template treats RecipientKeyIdentifier as if it were a SEQUENCE of three OCTET STRINGs.  However, the actual ASN.1 is\n\n   RecipientKeyIdentifier ::= SEQUENCE {\n     subjectKeyIdentifier SubjectKeyIdentifier,\n     date GeneralizedTime OPTIONAL,\n     other OtherKeyAttribute OPTIONAL }\n\n   OtherKeyAttribute ::= SEQUENCE {\n     keyAttrId OBJECT IDENTIFIER,\n     keyAttr ANY DEFINED BY keyAttrId OPTIONAL }\n\nSo, I modified the template elements for date and other so that they match the ASN.1.  I also noticed that OtherKeyAttribute is also used by KEKIdentifier, which is defined as:\n\n   KEKIdentifier ::= SEQUENCE {\n     keyIdentifier OCTET STRING,\n     date GeneralizedTime OPTIONAL,\n     other OtherKeyAttribute OPTIONAL }\n\nThe template for KEKIdentifier had similar problems and so I fixed that one as well.  Again, I also verified that I could both encode and decode messages using all of the elements of these templates that I changed.\n\n> There are several different situations in ASN.1 where an item is encoded\n> with \n> EXPLICIT encoding, even though the ASN.1 for it says it is implicit.  For all\n> such situations, our encoders and deciders require that the template say \n> EXPLICIT, regardless of the ASN.1 abstract notation says.  In the past, there\n> have been many errors (now corrected) where the template did not say EXPLICIT\n> in those cases.  All such cases known have been fixed.\n>\n> This patch takes several templates that are presently EXPLICIT, and removes\n> the EXPLICIT from them.  Without more study than I have time for now, I am \n> not sure if any of these are cases where EXPLICIT encoding is required \n> despite the ASN.1 saying it is implicit, but that possibility concerns me.\n> It would be a real shame if any of those fixes got undone.\n\nI have now also encoded and decoded messages using the subjectKeyIdentifier choice of OriginatorIdentifierOrKey and the kekri choice of RecipientInfo and verified that encoding works correctly for these items with SEC_ASN1_EXPLICIT removed.  I did, however, discover one more encoding problem during these tests.  The subjectKeyIdentifier choice of OriginatorIdentifierOrKey was incorrectly marked as SEC_ASN1_CONSTRUCTED, which was resulting in the wrong tag being assign, so I removed that as well.", "bug_id": 676100, "tags": [], "raw_text": "(In reply to Nelson Bolyard (seldom reads bugmail) from comment #3)\n> NSS has one encoder and two decoders for ASN.1 BERT/DER.\n> The combination of OPTIONAL and INLINE in the same template is supported only\n> by one decoder, not the encoder, and then only for string-ish primitive\n> types,\n> not constructed types.  The usual and preferred solution to this is to make\n> optional items NOT be inline, but rather be POINTER.  That works with all \n> our encoders and decoders.  Please don't create templates that cannot be \n> encoded by our encoder.\n\nOkay, I modified NSSCMSRecipientKeyIdentifierTemplate so that it doensn't use SEC_ASN1_INLINE.  I also verified that I could encode and decode messages using all elements of the template.  In the process of making these changes, I looked more closely at the ASN.1 for RecipientKeyIdentifier and noticed that there were more problems with the template.  The current template treats RecipientKeyIdentifier as if it were a SEQUENCE of three OCTET STRINGs.  However, the actual ASN.1 is\n\n   RecipientKeyIdentifier ::= SEQUENCE {\n     subjectKeyIdentifier SubjectKeyIdentifier,\n     date GeneralizedTime OPTIONAL,\n     other OtherKeyAttribute OPTIONAL }\n\n   OtherKeyAttribute ::= SEQUENCE {\n     keyAttrId OBJECT IDENTIFIER,\n     keyAttr ANY DEFINED BY keyAttrId OPTIONAL }\n\nSo, I modified the template elements for date and other so that they match the ASN.1.  I also noticed that OtherKeyAttribute is also used by KEKIdentifier, which is defined as:\n\n   KEKIdentifier ::= SEQUENCE {\n     keyIdentifier OCTET STRING,\n     date GeneralizedTime OPTIONAL,\n     other OtherKeyAttribute OPTIONAL }\n\nThe template for KEKIdentifier had similar problems and so I fixed that one as well.  Again, I also verified that I could both encode and decode messages using all of the elements of these templates that I changed.\n\n> There are several different situations in ASN.1 where an item is encoded\n> with \n> EXPLICIT encoding, even though the ASN.1 for it says it is implicit.  For all\n> such situations, our encoders and deciders require that the template say \n> EXPLICIT, regardless of the ASN.1 abstract notation says.  In the past, there\n> have been many errors (now corrected) where the template did not say EXPLICIT\n> in those cases.  All such cases known have been fixed.\n>\n> This patch takes several templates that are presently EXPLICIT, and removes\n> the EXPLICIT from them.  Without more study than I have time for now, I am \n> not sure if any of these are cases where EXPLICIT encoding is required \n> despite the ASN.1 saying it is implicit, but that possibility concerns me.\n> It would be a real shame if any of those fixes got undone.\n\nI have now also encoded and decoded messages using the subjectKeyIdentifier choice of OriginatorIdentifierOrKey and the kekri choice of RecipientInfo and verified that encoding works correctly for these items with SEC_ASN1_EXPLICIT removed.  I did, however, discover one more encoding problem during these tests.  The subjectKeyIdentifier choice of OriginatorIdentifierOrKey was incorrectly marked as SEC_ASN1_CONSTRUCTED, which was resulting in the wrong tag being assign, so I removed that as well.", "attachment_id": 552646}, {"tags": [], "text": "In reply to comment 10, \nThanks, David, for doing all this work on NSS.", "bug_id": 676100, "attachment_id": null, "raw_text": "In reply to comment 10, \nThanks, David, for doing all this work on NSS.", "creator": "nelson@bolyard.me", "time": "2011-08-18T02:23:38Z", "creation_time": "2011-08-18T02:23:38Z", "author": "nelson@bolyard.me", "is_private": false, "count": 11, "id": 5661588}, {"is_private": false, "count": 12, "id": 6125582, "author": "dcooper16@gmail.com", "creator": "dcooper16@gmail.com", "creation_time": "2012-03-08T21:07:43Z", "time": "2012-03-08T21:07:43Z", "raw_text": "I didn't make any changes to the patch.  I just updated it so that it works with the current (i.e., HEAD) code in CVS.", "attachment_id": 604172, "text": "Created attachment 604172\nPatch to correct Templates for key agreement in smime/cmsasn.c\n\nI didn't make any changes to the patch.  I just updated it so that it works with the current (i.e., HEAD) code in CVS.", "bug_id": 676100, "tags": []}, {"is_private": false, "id": 14344260, "count": 13, "creator": "dcooper16@gmail.com", "time": "2019-09-05T18:26:09Z", "creation_time": "2019-09-05T18:26:09Z", "author": "dcooper16@gmail.com", "attachment_id": 9090787, "raw_text": "This is a patch to correct some errors in the Templates for CMS -- particularly the parts used for key agreement. It was originally submitted several years ago, but review of it stopped for some reason. I have not made any changes to the patch, I just updated it so that it can be applied to the current NSS code.", "tags": [], "text": "Created attachment 9090787\nPatch to correct Templates for key agreement in smime/cmsasn.c\n\nThis is a patch to correct some errors in the Templates for CMS -- particularly the parts used for key agreement. It was originally submitted several years ago, but review of it stopped for some reason. I have not made any changes to the patch, I just updated it so that it can be applied to the current NSS code.", "bug_id": 676100}, {"attachment_id": 9090787, "raw_text": "I'm not a reviewer for this code.", "bug_id": 676100, "text": "Comment on attachment 9090787\nPatch to correct Templates for key agreement in smime/cmsasn.c\n\nI'm not a reviewer for this code.", "tags": [], "count": 14, "id": 14344300, "is_private": false, "creation_time": "2019-09-05T18:43:37Z", "time": "2019-09-05T18:43:37Z", "creator": "kwierso@gmail.com", "author": "kwierso@gmail.com"}, {"author": "kaie@kuix.de", "creator": "kaie@kuix.de", "creation_time": "2019-09-06T13:32:39Z", "time": "2019-09-06T13:32:39Z", "is_private": false, "count": 15, "id": 14345849, "tags": [], "text": "This isn't easy to review and be certain about the results. How could we be certain that it doesn't introduce any regressions? We have a set of CMS test messages and Thunderbird tests them. If the tests still pass, can we be certain it doesn't introduce regressions?\n\nI think we need automated tests cases for the class of CMS messages that you are fixing. The tests should fail with the existing code, and work with your new code. How could we get those? Could you describe the messages we need to produce? Someone will have to extend the tests in nss/tests/smime/", "bug_id": 676100, "raw_text": "This isn't easy to review and be certain about the results. How could we be certain that it doesn't introduce any regressions? We have a set of CMS test messages and Thunderbird tests them. If the tests still pass, can we be certain it doesn't introduce regressions?\n\nI think we need automated tests cases for the class of CMS messages that you are fixing. The tests should fail with the existing code, and work with your new code. How could we get those? Could you describe the messages we need to produce? Someone will have to extend the tests in nss/tests/smime/", "attachment_id": null}, {"author": "dcooper16@gmail.com", "time": "2019-09-06T19:18:37Z", "creation_time": "2019-09-06T19:18:37Z", "creator": "dcooper16@gmail.com", "count": 16, "id": 14346559, "is_private": false, "tags": [], "text": "Created attachment 9091128\nECDH S/MIME tests\n\n(In reply to Kai Engert (:kaie:) from comment #15)\n> This isn't easy to review and be certain about the results. How could we be certain that it doesn't introduce any regressions? We have a set of CMS test messages and Thunderbird tests them. If the tests still pass, can we be certain it doesn't introduce regressions?\n\nCertainly it should be carefully reviewed before it is accepted. However, I do not believe it is an overly large concern for two reasons:\n\n* The changes in the templates are only related to the parts of the ASN.1 used with key agreement, which isn't yet fully supported. So, my guess is that the parts of the templates the patch changes haven't been used.\n\n* For most of the changes, it is very easy to see by looking at the ASN.1 in RFC 5652 that the current templates are wrong.\n\n> I think we need automated tests cases for the class of CMS messages that you are fixing. The tests should fail with the existing code, and work with your new code. How could we get those? Could you describe the messages we need to produce? Someone will have to extend the tests in nss/tests/smime/\n\nThis patch is a start. It adds one new set of tests in which a message is encrypted for a recipient with an elliptic curve key, the resulting file is decrypted, and then the result is compared against the original plaintext.\n\nThis patch also modifies the test involving sending an encrypted message to multiple recipients so that one of the recipients has an elliptic curve key.\n\nI see that the nss/tests directory includes a few uses of OpenSSL. Perhaps some more tests could be added that involve (1) encrypting a message using OpenSSL and then decrypting the result using cmsutil and (2) encrypting a message using cmsutil and then decrypting the result using OpenSSL.\n\n(Note that the ECDH tests in this patch will only work if the patch to fix bug #676118 is also applied.)", "bug_id": 676100, "raw_text": "(In reply to Kai Engert (:kaie:) from comment #15)\n> This isn't easy to review and be certain about the results. How could we be certain that it doesn't introduce any regressions? We have a set of CMS test messages and Thunderbird tests them. If the tests still pass, can we be certain it doesn't introduce regressions?\n\nCertainly it should be carefully reviewed before it is accepted. However, I do not believe it is an overly large concern for two reasons:\n\n* The changes in the templates are only related to the parts of the ASN.1 used with key agreement, which isn't yet fully supported. So, my guess is that the parts of the templates the patch changes haven't been used.\n\n* For most of the changes, it is very easy to see by looking at the ASN.1 in RFC 5652 that the current templates are wrong.\n\n> I think we need automated tests cases for the class of CMS messages that you are fixing. The tests should fail with the existing code, and work with your new code. How could we get those? Could you describe the messages we need to produce? Someone will have to extend the tests in nss/tests/smime/\n\nThis patch is a start. It adds one new set of tests in which a message is encrypted for a recipient with an elliptic curve key, the resulting file is decrypted, and then the result is compared against the original plaintext.\n\nThis patch also modifies the test involving sending an encrypted message to multiple recipients so that one of the recipients has an elliptic curve key.\n\nI see that the nss/tests directory includes a few uses of OpenSSL. Perhaps some more tests could be added that involve (1) encrypting a message using OpenSSL and then decrypting the result using cmsutil and (2) encrypting a message using cmsutil and then decrypting the result using OpenSSL.\n\n(Note that the ECDH tests in this patch will only work if the patch to fix bug #676118 is also applied.)", "attachment_id": 9091128}, {"is_private": false, "count": 17, "id": 14371710, "author": "dcooper16@gmail.com", "creator": "dcooper16@gmail.com", "creation_time": "2019-09-19T14:20:01Z", "time": "2019-09-19T14:20:01Z", "raw_text": "I just submitted a patch to bug #676118 that obsoletes Attachment #9093918. The patch that I submitted to bug #676118 includes the contents of Attachment #9093918, but also includes several tests involving using cmsutil to decrypt messages that were encrypted with ECDH using OpenSSL.\n\nThese tests can be helpful in testing out the patch for this bug. Using the current NSS with the OpenSSL-created test messages results in the following error message:\n> cmsutil: failed to decode message.\n> cmsutil: problem decoding: SEC_ERROR_BAD_DER: security library: improperly formatted DER-encoded message.\n\ncmsutil fails before getting to the part addressed by bug #676118, since the parsing error occurs first.", "attachment_id": 9091128, "tags": [], "bug_id": 676100, "text": "Comment on attachment 9091128\nECDH S/MIME tests\n\nI just submitted a patch to bug #676118 that obsoletes Attachment #9093918. The patch that I submitted to bug #676118 includes the contents of Attachment #9093918, but also includes several tests involving using cmsutil to decrypt messages that were encrypted with ECDH using OpenSSL.\n\nThese tests can be helpful in testing out the patch for this bug. Using the current NSS with the OpenSSL-created test messages results in the following error message:\n> cmsutil: failed to decode message.\n> cmsutil: problem decoding: SEC_ERROR_BAD_DER: security library: improperly formatted DER-encoded message.\n\ncmsutil fails before getting to the part addressed by bug #676118, since the parsing error occurs first."}, {"attachment_id": null, "raw_text": "Just to set expectations here - I have basically no background in these ASN.1 updates, and thus these reviews are not straightforward to me. Friday I'm tagging NSS_3_47_BETA1 with a release the following week, so I expect to start looking at these in earnest for NSS 3.48.", "tags": [], "bug_id": 676100, "text": "Just to set expectations here - I have basically no background in these ASN.1 updates, and thus these reviews are not straightforward to me. Friday I'm tagging NSS_3_47_BETA1 with a release the following week, so I expect to start looking at these in earnest for NSS 3.48.", "id": 14414796, "count": 18, "is_private": false, "creation_time": "2019-10-09T17:41:58Z", "time": "2019-10-09T17:41:58Z", "creator": "jc@insufficient.coffee", "author": "jc@insufficient.coffee"}, {"bug_id": 676100, "text": "(In reply to J.C. Jones [:jcj] (he/him) from comment #18)\n> Just to set expectations here - I have basically no background in these ASN.1 updates, and thus these reviews are not straightforward to me. Friday I'm tagging NSS_3_47_BETA1 with a release the following week, so I expect to start looking at these in earnest for NSS 3.48.\n\nThat's okay. I understand that everyone wants to be certain that this patch doesn't accidentally break any existing code in the process of fixing the templates for key agreement algorithms. From my point of view, I think it would be great if this bug and bug #676118 could be addressed in time for the fixes to appear in Thunderbird 76, which I am guessing will be released around August 2020. I don't know when the fixes would to need to make it into NSS for that to happen.\n\nIf there is anything I can do to help with the review of these patches, please let me know.", "tags": [], "attachment_id": null, "raw_text": "(In reply to J.C. Jones [:jcj] (he/him) from comment #18)\n> Just to set expectations here - I have basically no background in these ASN.1 updates, and thus these reviews are not straightforward to me. Friday I'm tagging NSS_3_47_BETA1 with a release the following week, so I expect to start looking at these in earnest for NSS 3.48.\n\nThat's okay. I understand that everyone wants to be certain that this patch doesn't accidentally break any existing code in the process of fixing the templates for key agreement algorithms. From my point of view, I think it would be great if this bug and bug #676118 could be addressed in time for the fixes to appear in Thunderbird 76, which I am guessing will be released around August 2020. I don't know when the fixes would to need to make it into NSS for that to happen.\n\nIf there is anything I can do to help with the review of these patches, please let me know.", "creator": "dcooper16@gmail.com", "time": "2019-10-09T19:47:49Z", "creation_time": "2019-10-09T19:47:49Z", "author": "dcooper16@gmail.com", "is_private": false, "count": 19, "id": 14415058}]}}, "comments": {}}