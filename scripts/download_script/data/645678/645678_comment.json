{"comments": {}, "bugs": {"645678": {"comments": [{"bug_id": 645678, "raw_text": "User-Agent:       Mozilla/5.0 (Windows; U; Windows NT 6.1; en-GB; rv:1.9.2.16) Gecko/20110319 Firefox/3.6.16 GTB7.1\nBuild Identifier: \n\nI was in contact with some mozdevs back in january about this issue, and they got me to test a GC Stats build (unfortunately they never got back to me about getting a build again as i lost it during a drive transfer)\n\nAnyway, it seems there are a few notable extensions that severely impact the GC Delay when installed end enabled, and it seems the devs of those extensions aren't likely to touch the issue (likely due to a lack of understanding of the matter).\n\nAnyhow, the extensions worst off in my testing of the delay (using the gc delay dial on http://hacks.mozilla.org/2010/01/javascript-speedups-in-firefox-3-6/) and otherwise generally feeling the difference (through hiccups and stutters/skipping) are Adblock plus, Google toolbar, Ebay Toolbar and session manager (though session manager appears to be ok in Fx4)\n\nUsing the dial i measured these stats the entire time i was running these extensions individually\n\nEbay sidebar - increases the length by 7ms (24ms total)\nGoogle Toolbar - increases the length by 10-12ms (27-29ms total)\nAdblock Plus - Increases the length by 10-15ms (30-31ms total)\nSession Manager - Increases the length by 6-10ms (22-25 total on 3.6.x) (15-19ms on Fx4).\n\nSome of my other extensions start with a high delay (27ish all up) but settle down into around 17ms average after the first couple of cycles.\n\nThis issue is basically to get feedback from Mozdevs on the potential reasons for my findings and helping the ExtDevs to apply any possible fixes.\n\nReproducible: Always\n\nSteps to Reproduce:\n1. Install one of the specified extensions\n2. Browse around some animated gif or flash enabled sites\n3. use the GC Delay metre on http://hacks.mozilla.org/2010/01/javascript-speedups-in-firefox-3-6/\n\nActual Results:  \nGC Delay can easily be put over 40ms by running a combination of these extensions and skip during animated content playback.\n\nExpected Results:  \nSmoothness would be nice :D\n\nI know this is an issue caused by certain extensions but the underlying cause is in developers not having a clear understanding of how to minimise the impact of their extension(s) on the firefox garbage collection.", "count": 0, "time": "2011-03-28T14:02:48Z", "tags": [], "is_private": false, "creation_time": "2011-03-28T14:02:48Z", "text": "User-Agent:       Mozilla/5.0 (Windows; U; Windows NT 6.1; en-GB; rv:1.9.2.16) Gecko/20110319 Firefox/3.6.16 GTB7.1\nBuild Identifier: \n\nI was in contact with some mozdevs back in january about this issue, and they got me to test a GC Stats build (unfortunately they never got back to me about getting a build again as i lost it during a drive transfer)\n\nAnyway, it seems there are a few notable extensions that severely impact the GC Delay when installed end enabled, and it seems the devs of those extensions aren't likely to touch the issue (likely due to a lack of understanding of the matter).\n\nAnyhow, the extensions worst off in my testing of the delay (using the gc delay dial on http://hacks.mozilla.org/2010/01/javascript-speedups-in-firefox-3-6/) and otherwise generally feeling the difference (through hiccups and stutters/skipping) are Adblock plus, Google toolbar, Ebay Toolbar and session manager (though session manager appears to be ok in Fx4)\n\nUsing the dial i measured these stats the entire time i was running these extensions individually\n\nEbay sidebar - increases the length by 7ms (24ms total)\nGoogle Toolbar - increases the length by 10-12ms (27-29ms total)\nAdblock Plus - Increases the length by 10-15ms (30-31ms total)\nSession Manager - Increases the length by 6-10ms (22-25 total on 3.6.x) (15-19ms on Fx4).\n\nSome of my other extensions start with a high delay (27ish all up) but settle down into around 17ms average after the first couple of cycles.\n\nThis issue is basically to get feedback from Mozdevs on the potential reasons for my findings and helping the ExtDevs to apply any possible fixes.\n\nReproducible: Always\n\nSteps to Reproduce:\n1. Install one of the specified extensions\n2. Browse around some animated gif or flash enabled sites\n3. use the GC Delay metre on http://hacks.mozilla.org/2010/01/javascript-speedups-in-firefox-3-6/\n\nActual Results:  \nGC Delay can easily be put over 40ms by running a combination of these extensions and skip during animated content playback.\n\nExpected Results:  \nSmoothness would be nice :D\n\nI know this is an issue caused by certain extensions but the underlying cause is in developers not having a clear understanding of how to minimise the impact of their extension(s) on the firefox garbage collection.", "creator": "danialhorton@gmail.com", "attachment_id": null, "id": 5374162, "author": "danialhorton@gmail.com"}, {"bug_id": 645678, "count": 1, "time": "2011-03-28T14:13:48Z", "creator": "bzbarsky@mit.edu", "author": "bzbarsky@mit.edu", "raw_text": "Anreas, your intern might be interested in this!", "is_private": false, "tags": [], "creation_time": "2011-03-28T14:13:48Z", "id": 5374197, "attachment_id": null, "text": "Anreas, your intern might be interested in this!"}, {"author": "danialhorton@gmail.com", "creator": "danialhorton@gmail.com", "time": "2011-03-28T14:21:05Z", "count": 2, "bug_id": 645678, "attachment_id": null, "id": 5374219, "text": "ahaha, it was you, Andreas and Gregor that i was directed to iirc.\n\nI should've made an artifact for the issue then so it could be tracked better but i had a overdue transfer of my hardware to a new case that i had been putting off and finally decided to do it that week.\n\n\"To: Roc\nCc: Danial Horton ; Gregor Wagner ; Boris Zbarsky\nSubject: Re: extensions vs garbage collector\n\nI don't think anyone has looked at this systematically. We should first \ntry to figure out what part of GC (or CC, which is more likely the source \nhere IMO) is affected. Gregor has some define that outputs extra timing info \nduring GC. We should start with that. Danial, if we give you some \ninstructions how to collect more precise GC statistics, do you want to give \nthat a try?\"\n\nI did initially get the GC stats build from Gregor, but It went missing when i replaced my downloads drive :\\", "creation_time": "2011-03-28T14:21:05Z", "is_private": false, "tags": [], "raw_text": "ahaha, it was you, Andreas and Gregor that i was directed to iirc.\n\nI should've made an artifact for the issue then so it could be tracked better but i had a overdue transfer of my hardware to a new case that i had been putting off and finally decided to do it that week.\n\n\"To: Roc\nCc: Danial Horton ; Gregor Wagner ; Boris Zbarsky\nSubject: Re: extensions vs garbage collector\n\nI don't think anyone has looked at this systematically. We should first \ntry to figure out what part of GC (or CC, which is more likely the source \nhere IMO) is affected. Gregor has some define that outputs extra timing info \nduring GC. We should start with that. Danial, if we give you some \ninstructions how to collect more precise GC statistics, do you want to give \nthat a try?\"\n\nI did initially get the GC stats build from Gregor, but It went missing when i replaced my downloads drive :\\"}, {"count": 3, "bug_id": 645678, "time": "2011-03-28T14:27:35Z", "author": "bzbarsky@mit.edu", "creator": "bzbarsky@mit.edu", "raw_text": "ccing Gregor too.", "is_private": false, "tags": [], "creation_time": "2011-03-28T14:27:35Z", "attachment_id": null, "id": 5374244, "text": "ccing Gregor too."}, {"creation_time": "2011-03-28T17:47:02Z", "attachment_id": null, "id": 5374802, "text": "(In reply to comment #0)\n> I know this is an issue caused by certain extensions but the underlying cause\n> is in developers not having a clear understanding of how to minimise the impact\n> of their extension(s) on the firefox garbage collection.\n\nI would certainly be interested in knowing how an extension (and Adblock Plus in particular) can have an influence on GC delays. This is the first time I hear about it.", "raw_text": "(In reply to comment #0)\n> I know this is an issue caused by certain extensions but the underlying cause\n> is in developers not having a clear understanding of how to minimise the impact\n> of their extension(s) on the firefox garbage collection.\n\nI would certainly be interested in knowing how an extension (and Adblock Plus in particular) can have an influence on GC delays. This is the first time I hear about it.", "is_private": false, "tags": [], "author": "ecfbugzilla@palant.de", "creator": "ecfbugzilla@palant.de", "count": 4, "bug_id": 645678, "time": "2011-03-28T17:47:02Z"}, {"author": "danialhorton@gmail.com", "creator": "danialhorton@gmail.com", "time": "2011-03-28T18:02:18Z", "count": 5, "bug_id": 645678, "text": "It was the GC test that i noticed it in, Andrea's is probably right about it being CC, but i assure you the findings were reproduced in a fresh profile after i noticed then in my usual profile.\n\nThe reproduction with ABP was with a subscription however, it is not reproducible without a ad database so i expect where ABP is concerned its part of having all those subscription strings loaded.\n\nmy original mail to Rob(ROC)\n\n\"Ebay sidebar - increases the length by 7ms\nGoogle Toolbar - increases the length by 10-12ms\nAdblock Plus - Increases the length by 10-15ms\nSession Manager - Increases the length by 6-10ms\n\nwith no extensions loaded, my average is 18ms, with only these loaded it \npeaks at 45ms\"\n\nHad to sort through a few thousand sent mails to find that.", "id": 5374861, "attachment_id": null, "creation_time": "2011-03-28T18:02:18Z", "tags": [], "is_private": false, "raw_text": "It was the GC test that i noticed it in, Andrea's is probably right about it being CC, but i assure you the findings were reproduced in a fresh profile after i noticed then in my usual profile.\n\nThe reproduction with ABP was with a subscription however, it is not reproducible without a ad database so i expect where ABP is concerned its part of having all those subscription strings loaded.\n\nmy original mail to Rob(ROC)\n\n\"Ebay sidebar - increases the length by 7ms\nGoogle Toolbar - increases the length by 10-12ms\nAdblock Plus - Increases the length by 10-15ms\nSession Manager - Increases the length by 6-10ms\n\nwith no extensions loaded, my average is 18ms, with only these loaded it \npeaks at 45ms\"\n\nHad to sort through a few thousand sent mails to find that."}, {"creation_time": "2011-03-28T18:13:06Z", "author": "danialhorton@gmail.com", "creator": "danialhorton@gmail.com", "text": "finding the reasons for this would likely be only worth it for short term anyway, the compartmentalised GC might stop this from being so obvious to those of us sensitive to skippy animations.", "id": 5374905, "attachment_id": null, "count": 6, "bug_id": 645678, "raw_text": "finding the reasons for this would likely be only worth it for short term anyway, the compartmentalised GC might stop this from being so obvious to those of us sensitive to skippy animations.", "tags": [], "is_private": false, "time": "2011-03-28T18:13:06Z"}, {"author": "bzbarsky@mit.edu", "creator": "bzbarsky@mit.edu", "time": "2011-03-28T18:23:21Z", "count": 7, "bug_id": 645678, "text": "Wladimir, the simplest way an extension can affect the length of a gc delay is by creating a lot of objects.  The bigger the heap, the longer it takes to walk it.  If the extension causes a lot of object churn (so destroys objects in addition to creating them), you also have to finalize all those objects.\n\nThe simplest way an extension can affect the length of the cc delay is by effectively leaking DOM nodes (holding on to them after the relevant DOM document has been unloaded).  We optimize cc traversals to shortcircuit for nodes that are in a DOM tree, but if you drag around a bunch of disconnected nodes, that will cost.\n\nFor anyone who cares: In Firefox 4, you can flip the boolean preference \"javascript.options.mem.log\" to true in about:config to have us log gc and cc times and some additional information about how much is being collected to the error console.  It might be worth seeing whether the extensions above increase gc or cc times, for a start.", "attachment_id": null, "id": 5374959, "creation_time": "2011-03-28T18:23:21Z", "tags": [], "is_private": false, "raw_text": "Wladimir, the simplest way an extension can affect the length of a gc delay is by creating a lot of objects.  The bigger the heap, the longer it takes to walk it.  If the extension causes a lot of object churn (so destroys objects in addition to creating them), you also have to finalize all those objects.\n\nThe simplest way an extension can affect the length of the cc delay is by effectively leaking DOM nodes (holding on to them after the relevant DOM document has been unloaded).  We optimize cc traversals to shortcircuit for nodes that are in a DOM tree, but if you drag around a bunch of disconnected nodes, that will cost.\n\nFor anyone who cares: In Firefox 4, you can flip the boolean preference \"javascript.options.mem.log\" to true in about:config to have us log gc and cc times and some additional information about how much is being collected to the error console.  It might be worth seeing whether the extensions above increase gc or cc times, for a start."}, {"creator": "danialhorton@gmail.com", "author": "danialhorton@gmail.com", "bug_id": 645678, "count": 8, "time": "2011-03-28T18:29:38Z", "creation_time": "2011-03-28T18:29:38Z", "id": 5374977, "attachment_id": null, "text": "just thought i should mention the testing of my other extensions, and surprisingly the ones i most expected to affect it actually didn't.\n\nAll these results are in Fx4, and reproduced in 3.6.12 (at the time) i've marked those where the results differed in the older browser. The first value is the minimum / settled in result after a few moments when the cycle collector does its first couple of runs i would assume, the second value is max, most usually right after startup.\n\n13-15ms unloaded\n\nAdblock Plus\t\t30-31ms\nAdd-on Reporter\t\t15-18ms\nBBCode\t\t\t16-18ms\nCache Status\t\t18-21ms\nConsole 2\t\t14-23ms\nDefault Full Zoom\t13-16ms\nDivX HiQ\t\t17-20ms\nDivX Html5 video\t16-19ms\nDownload Status Bar\t16-18ms\nElement Hiding Helper\t15ms\nElement Properties\t\t16ms\nEnglish Australian Dictionary\t15-17ms\nFacebook chat notifications\t15-17ms\nFasterfox Lite\t\t12-17ms\nFlashgot\t\t15-17ms\nFlashblock\t\t15-19ms\nGoogle Toolbar\t\t27-29ms\nIE Tab Plus\t\t14-17ms\nImage Toolbar\t\t14-17ms\nImage Zoom\t\t14-17ms\nJava Console\t\t15-17ms\nLogitech Device Detection\t14-17ms\nNetusage extension\t14-17ms (themes don't effect delay)\nOpenSearchFox\t\t14-19ms\nOptimizeGoogle\t\t17-24ms (this one starts high and drops to normal and stays there)\nPersonas\t\t14-18ms\nRamback\t\t\t13-17ms\nSQLite Manager\t\t14ms\nSQLite Optimizer\t14-19ms\nSearch Site\t\t13-23ms\nSession Manager\t\t15-19ms (Results in Fx4)(22-25 total on 3.6.x)\nStatus-4-evar\t\t15-17ms (tested in Fx4)\nStatusbarEx\t\t16-21ms\nTabMix Plus\t\t20ms\nUpdate Channel Selector\t16-19ms\nUser Agent Switcher\t16-20\nVacuum Places Improved\t16-21ms\nVeoh Extension\t\t17ms\nXul Profiler\t\tI could not get an adequate measurement of this one, it was actually the worst extension whether run with the others or not, it immediately added 20+MS to the results\n\nI'll enable ABP in a new profile and enable that setting Boris", "raw_text": "just thought i should mention the testing of my other extensions, and surprisingly the ones i most expected to affect it actually didn't.\n\nAll these results are in Fx4, and reproduced in 3.6.12 (at the time) i've marked those where the results differed in the older browser. The first value is the minimum / settled in result after a few moments when the cycle collector does its first couple of runs i would assume, the second value is max, most usually right after startup.\n\n13-15ms unloaded\n\nAdblock Plus\t\t30-31ms\nAdd-on Reporter\t\t15-18ms\nBBCode\t\t\t16-18ms\nCache Status\t\t18-21ms\nConsole 2\t\t14-23ms\nDefault Full Zoom\t13-16ms\nDivX HiQ\t\t17-20ms\nDivX Html5 video\t16-19ms\nDownload Status Bar\t16-18ms\nElement Hiding Helper\t15ms\nElement Properties\t\t16ms\nEnglish Australian Dictionary\t15-17ms\nFacebook chat notifications\t15-17ms\nFasterfox Lite\t\t12-17ms\nFlashgot\t\t15-17ms\nFlashblock\t\t15-19ms\nGoogle Toolbar\t\t27-29ms\nIE Tab Plus\t\t14-17ms\nImage Toolbar\t\t14-17ms\nImage Zoom\t\t14-17ms\nJava Console\t\t15-17ms\nLogitech Device Detection\t14-17ms\nNetusage extension\t14-17ms (themes don't effect delay)\nOpenSearchFox\t\t14-19ms\nOptimizeGoogle\t\t17-24ms (this one starts high and drops to normal and stays there)\nPersonas\t\t14-18ms\nRamback\t\t\t13-17ms\nSQLite Manager\t\t14ms\nSQLite Optimizer\t14-19ms\nSearch Site\t\t13-23ms\nSession Manager\t\t15-19ms (Results in Fx4)(22-25 total on 3.6.x)\nStatus-4-evar\t\t15-17ms (tested in Fx4)\nStatusbarEx\t\t16-21ms\nTabMix Plus\t\t20ms\nUpdate Channel Selector\t16-19ms\nUser Agent Switcher\t16-20\nVacuum Places Improved\t16-21ms\nVeoh Extension\t\t17ms\nXul Profiler\t\tI could not get an adequate measurement of this one, it was actually the worst extension whether run with the others or not, it immediately added 20+MS to the results\n\nI'll enable ABP in a new profile and enable that setting Boris", "is_private": false, "tags": []}, {"creator": "ws.bugzilla@starkov.name", "author": "ws.bugzilla@starkov.name", "time": "2011-03-28T18:42:37Z", "bug_id": 645678, "count": 9, "id": 5375012, "attachment_id": null, "text": "Some results on my Firefox 4.0, Windows 7 64-bit (32-bit Firefox):\n\nAfter 24 hours with a bunch of open tabs:\n  CC: collected: 6 (6 waiting for GC), suspected: 359, duration: 80 ms.\n  GC: full, duration: 113 ms.\n\nDisabled all extensions, restarted, let it settle for a few minutes:\n  CC: collected: 0 (0 waiting for GC), suspected: 260, duration: 7 ms.\n  GC: full, duration: 22 ms.\n\nRe-enabled all extensions, restarted, let it settle for a few minutes:\n  CC: collected: 0 (0 waiting for GC), suspected: 331, duration: 15 ms.\n  GC: full, duration: 52 ms.\n\nI have 19 extensions installed. So just having them installed does add to GC time, but the worse issue is that the GC/CC durations grow over time.", "creation_time": "2011-03-28T18:42:37Z", "is_private": false, "tags": [], "raw_text": "Some results on my Firefox 4.0, Windows 7 64-bit (32-bit Firefox):\n\nAfter 24 hours with a bunch of open tabs:\n  CC: collected: 6 (6 waiting for GC), suspected: 359, duration: 80 ms.\n  GC: full, duration: 113 ms.\n\nDisabled all extensions, restarted, let it settle for a few minutes:\n  CC: collected: 0 (0 waiting for GC), suspected: 260, duration: 7 ms.\n  GC: full, duration: 22 ms.\n\nRe-enabled all extensions, restarted, let it settle for a few minutes:\n  CC: collected: 0 (0 waiting for GC), suspected: 331, duration: 15 ms.\n  GC: full, duration: 52 ms.\n\nI have 19 extensions installed. So just having them installed does add to GC time, but the worse issue is that the GC/CC durations grow over time."}, {"tags": [], "is_private": false, "time": "2011-03-28T18:43:35Z", "count": 10, "bug_id": 645678, "raw_text": "Alright, in ABP's case it is definitely GC, \n\nWent from 10-12ms to 18-19ms in Fx4, that is reduced a bit from 3.6.x though", "author": "danialhorton@gmail.com", "text": "Alright, in ABP's case it is definitely GC, \n\nWent from 10-12ms to 18-19ms in Fx4, that is reduced a bit from 3.6.x though", "creator": "danialhorton@gmail.com", "id": 5375015, "attachment_id": null, "creation_time": "2011-03-28T18:43:35Z"}, {"raw_text": "i take that back actually. the results increased again to 24ms with a subscription enabled in ABP after letting it settle in and then CC increased to 9ms (was 3ms prior)", "is_private": false, "tags": [], "creation_time": "2011-03-28T18:46:59Z", "attachment_id": null, "id": 5375025, "text": "i take that back actually. the results increased again to 24ms with a subscription enabled in ABP after letting it settle in and then CC increased to 9ms (was 3ms prior)", "count": 11, "bug_id": 645678, "time": "2011-03-28T18:46:59Z", "author": "danialhorton@gmail.com", "creator": "danialhorton@gmail.com"}, {"is_private": false, "tags": [], "raw_text": "Roman, thats not unusual, the more in use (not allocated, if i read correctly) memory the longer cycles will take to trace it all.\n\ni think part of the benefits of compartmentalised GC was concurrent, generational and partial collection? (not sure on the partial!)", "id": 5375032, "attachment_id": null, "text": "Roman, thats not unusual, the more in use (not allocated, if i read correctly) memory the longer cycles will take to trace it all.\n\ni think part of the benefits of compartmentalised GC was concurrent, generational and partial collection? (not sure on the partial!)", "creation_time": "2011-03-28T18:50:00Z", "time": "2011-03-28T18:50:00Z", "bug_id": 645678, "count": 12, "creator": "danialhorton@gmail.com", "author": "danialhorton@gmail.com"}, {"author": "danne.da@gmail.com", "creator": "danne.da@gmail.com", "count": 13, "bug_id": 645678, "time": "2011-03-28T21:38:49Z", "creation_time": "2011-03-28T21:38:49Z", "attachment_id": null, "id": 5375709, "text": "Some results (on a Mac), order is oldest to newest. These were taken after the browser had been used for a few hours. Before copying these stats I had closed all windows and cleared all history and cache except cookies.\n\n\nOpened a new window:\nCC timestamp: 1301347454708036, collected: 5662 (5662 waiting for GC), suspected: 5771, duration: 282 ms.\nGC mode: full, timestamp: 1301347453540811, duration: 151 ms.\n\nLet it settle:\nCC timestamp: 1301347464087034, collected: 0 (0 waiting for GC), suspected: 373, duration: 236 ms.\nGC mode: full, timestamp: 1301347458849302, duration: 140 ms.\n\nNavigated to new page:\nCC timestamp: 1301347513612811, collected: 20 (20 waiting for GC), suspected: 1904, duration: 241 ms.\nGC mode: full, timestamp: 1301347512438588, duration: 139 ms.\n\n\n\nMem stats:\nmalloc/allocated & malloc/zone0/committed: ~224MB\nmalloc/mapped & malloc/zone0/allocated: ~300MB\nfirefox-bin: ~415MB\nplugin-container (flash): ~180MB\n\nI don't usually notice any slowdowns until firefox-bin is stuck above 560 MB or so. Will check these stats the next time the memory usage climbs to that level.\n\nExtensions, latest (dev) version available:\nAdBlock\nDownThemAll\nFlashgot\nNoScript\nScriptish\nTab Mix Plus", "raw_text": "Some results (on a Mac), order is oldest to newest. These were taken after the browser had been used for a few hours. Before copying these stats I had closed all windows and cleared all history and cache except cookies.\n\n\nOpened a new window:\nCC timestamp: 1301347454708036, collected: 5662 (5662 waiting for GC), suspected: 5771, duration: 282 ms.\nGC mode: full, timestamp: 1301347453540811, duration: 151 ms.\n\nLet it settle:\nCC timestamp: 1301347464087034, collected: 0 (0 waiting for GC), suspected: 373, duration: 236 ms.\nGC mode: full, timestamp: 1301347458849302, duration: 140 ms.\n\nNavigated to new page:\nCC timestamp: 1301347513612811, collected: 20 (20 waiting for GC), suspected: 1904, duration: 241 ms.\nGC mode: full, timestamp: 1301347512438588, duration: 139 ms.\n\n\n\nMem stats:\nmalloc/allocated & malloc/zone0/committed: ~224MB\nmalloc/mapped & malloc/zone0/allocated: ~300MB\nfirefox-bin: ~415MB\nplugin-container (flash): ~180MB\n\nI don't usually notice any slowdowns until firefox-bin is stuck above 560 MB or so. Will check these stats the next time the memory usage climbs to that level.\n\nExtensions, latest (dev) version available:\nAdBlock\nDownThemAll\nFlashgot\nNoScript\nScriptish\nTab Mix Plus", "is_private": false, "tags": []}, {"creation_time": "2011-03-28T21:45:39Z", "creator": "danne.da@gmail.com", "text": "While writing up that comment I got this (oldest to newest): 8 CC - 1 GC - 1 CC - 1 GC - 8 CC. Each of the 8 CC's looked like this, except the first in each set which had a suspected value of around 400-500.\n\nCC timestamp: 1301348272056317, collected: 0 (0 waiting for GC), suspected: 1109, duration: 264 ms.\n\nSuspected was between 1000 and 1100 in all of them, except the first which was around 420.", "attachment_id": null, "id": 5375731, "author": "danne.da@gmail.com", "bug_id": 645678, "raw_text": "While writing up that comment I got this (oldest to newest): 8 CC - 1 GC - 1 CC - 1 GC - 8 CC. Each of the 8 CC's looked like this, except the first in each set which had a suspected value of around 400-500.\n\nCC timestamp: 1301348272056317, collected: 0 (0 waiting for GC), suspected: 1109, duration: 264 ms.\n\nSuspected was between 1000 and 1100 in all of them, except the first which was around 420.", "count": 14, "time": "2011-03-28T21:45:39Z", "tags": [], "is_private": false}, {"creation_time": "2011-03-29T00:51:17Z", "author": "bzbarsky@mit.edu", "attachment_id": null, "id": 5376344, "text": "> CC timestamp: 1301348272056317, collected: 0 (0 waiting for GC), suspected:\n> 1109, duration: 264 ms.\n\nYeah, so what that's telling me is that someone is keeping a bunch of DOM objects (probably) alive but not inside documents and we're taking a lot of time traversing them during cycle-collection....", "creator": "bzbarsky@mit.edu", "count": 15, "raw_text": "> CC timestamp: 1301348272056317, collected: 0 (0 waiting for GC), suspected:\n> 1109, duration: 264 ms.\n\nYeah, so what that's telling me is that someone is keeping a bunch of DOM objects (probably) alive but not inside documents and we're taking a lot of time traversing them during cycle-collection....", "bug_id": 645678, "is_private": false, "tags": [], "time": "2011-03-29T00:51:17Z"}, {"bug_id": 645678, "raw_text": "(In reply to comment #7)\n> The simplest way an extension can affect the length of the cc delay is by\n> effectively leaking DOM nodes (holding on to them after the relevant DOM\n> document has been unloaded).\n\nThat would be the redirect detection hack in Adblock Plus. I could confirm that it causes CC to run twice by attaching data from the previous content policy call (including a DOM node) to the corresponding HTTP channel (via nsIWritablePropertyBag). This data can then be used in onChannelRedirect to get the required context info. Unfortunately, there is no \"this channel is done\" notification that would allow removing data from the channel. I tried http-on-examine-response and http-on-examine-cached-response notifications but they are triggered before redirect processing. And since redirect processing is now asynchronous I don't know how long I need to wait after http-on-examine-response until it is clear that the data will no longer be used.", "count": 16, "time": "2011-03-29T16:51:10Z", "tags": [], "is_private": false, "creation_time": "2011-03-29T16:51:10Z", "text": "(In reply to comment #7)\n> The simplest way an extension can affect the length of the cc delay is by\n> effectively leaking DOM nodes (holding on to them after the relevant DOM\n> document has been unloaded).\n\nThat would be the redirect detection hack in Adblock Plus. I could confirm that it causes CC to run twice by attaching data from the previous content policy call (including a DOM node) to the corresponding HTTP channel (via nsIWritablePropertyBag). This data can then be used in onChannelRedirect to get the required context info. Unfortunately, there is no \"this channel is done\" notification that would allow removing data from the channel. I tried http-on-examine-response and http-on-examine-cached-response notifications but they are triggered before redirect processing. And since redirect processing is now asynchronous I don't know how long I need to wait after http-on-examine-response until it is clear that the data will no longer be used.", "creator": "ecfbugzilla@palant.de", "id": 5377828, "attachment_id": null, "author": "ecfbugzilla@palant.de"}, {"creator": "bzbarsky@mit.edu", "author": "bzbarsky@mit.edu", "time": "2011-03-29T16:59:48Z", "bug_id": 645678, "count": 17, "attachment_id": null, "id": 5377861, "text": "> attaching data from the previous content policy call (including a DOM node) to\n> the corresponding HTTP channel\n\nUh... You're having the channel hold a strong ref to the DOM node?  If you're doing that, you're almost certainly just leaking the world for tab lifetime (specifically, the new document holds a ref to the channel it was loaded from, which holds a ref to the DOM node, which is likely keeping its owner document alive, which keeps alive the channel _that_ was loaded from, etc, so that all the documents ever loaded in that tab are alive until the tab gets closed).\n\nWorse yet, even if you close the tab you might leak permanently: channels don't participate in cycle collection, so if there's a ref through the node you stuck on the channel to the document that was loaded from the channel you will get a permanent leak.\n\n> Unfortunately, there is no \"this channel is done\" notification\n\nAnd of course you filed a bug on that instead of just leaking the world, right?\n\nFor what it's worth, there is such a notification as far as I can see: a combination of onChannelRedirect to know when a new channel is being switched to and onStartRequest to know when there will be no more redirects.\n\nPlease feel free to mail me to discuss the details!", "creation_time": "2011-03-29T16:59:48Z", "is_private": false, "tags": [], "raw_text": "> attaching data from the previous content policy call (including a DOM node) to\n> the corresponding HTTP channel\n\nUh... You're having the channel hold a strong ref to the DOM node?  If you're doing that, you're almost certainly just leaking the world for tab lifetime (specifically, the new document holds a ref to the channel it was loaded from, which holds a ref to the DOM node, which is likely keeping its owner document alive, which keeps alive the channel _that_ was loaded from, etc, so that all the documents ever loaded in that tab are alive until the tab gets closed).\n\nWorse yet, even if you close the tab you might leak permanently: channels don't participate in cycle collection, so if there's a ref through the node you stuck on the channel to the document that was loaded from the channel you will get a permanent leak.\n\n> Unfortunately, there is no \"this channel is done\" notification\n\nAnd of course you filed a bug on that instead of just leaking the world, right?\n\nFor what it's worth, there is such a notification as far as I can see: a combination of onChannelRedirect to know when a new channel is being switched to and onStartRequest to know when there will be no more redirects.\n\nPlease feel free to mail me to discuss the details!"}, {"author": "ecfbugzilla@palant.de", "creator": "ecfbugzilla@palant.de", "text": "Please retest with https://adblockplus.org/devbuilds/adblockplus/adblockplus-1.3.6a.2946.xpi - this issue should be fixed. I am using nsITraceableChannel to clean up now, with the unfortunate side-effect that redirect blocking is broken in Fennec 4.0 (due to bug 646373).", "id": 5379957, "attachment_id": null, "creation_time": "2011-03-30T11:31:39Z", "tags": [], "is_private": false, "time": "2011-03-30T11:31:39Z", "count": 18, "bug_id": 645678, "raw_text": "Please retest with https://adblockplus.org/devbuilds/adblockplus/adblockplus-1.3.6a.2946.xpi - this issue should be fixed. I am using nsITraceableChannel to clean up now, with the unfortunate side-effect that redirect blocking is broken in Fennec 4.0 (due to bug 646373)."}, {"attachment_id": null, "id": 5379968, "text": "(In reply to comment #18)\n> Please retest with\n> https://adblockplus.org/devbuilds/adblockplus/adblockplus-1.3.6a.2946.xpi -\n> this issue should be fixed. I am using nsITraceableChannel to clean up now,\n> with the unfortunate side-effect that redirect blocking is broken in Fennec 4.0\n> (due to bug 646373).\n\nTesting this: http://hacks.mozilla.org/2010/01/javascript-speedups-in-firefox-3-6/\n\nFrame delay: 17ms\nGC Delay: First 47ms, then 35ms, then 30ms\n\nCompared to running the same on the 28th of March\nFrame delay: 5ms\nGC Delay: ~20-25ms\n\nError console (oldest to newest):\nCC timestamp: 1301485224274593, collected: 0 (0 waiting for GC), suspected: 247, duration: 22 ms.\nCC timestamp: 1301485273844285, collected: 0 (0 waiting for GC), suspected: 1130, duration: 25 ms.\nCC timestamp: 1301485320443862, collected: 0 (0 waiting for GC), suspected: 1156, duration: 24 ms.\n\nBrowser has been running for less than 5 minutes at the moment.", "creation_time": "2011-03-30T11:42:36Z", "is_private": false, "tags": [], "raw_text": "(In reply to comment #18)\n> Please retest with\n> https://adblockplus.org/devbuilds/adblockplus/adblockplus-1.3.6a.2946.xpi -\n> this issue should be fixed. I am using nsITraceableChannel to clean up now,\n> with the unfortunate side-effect that redirect blocking is broken in Fennec 4.0\n> (due to bug 646373).\n\nTesting this: http://hacks.mozilla.org/2010/01/javascript-speedups-in-firefox-3-6/\n\nFrame delay: 17ms\nGC Delay: First 47ms, then 35ms, then 30ms\n\nCompared to running the same on the 28th of March\nFrame delay: 5ms\nGC Delay: ~20-25ms\n\nError console (oldest to newest):\nCC timestamp: 1301485224274593, collected: 0 (0 waiting for GC), suspected: 247, duration: 22 ms.\nCC timestamp: 1301485273844285, collected: 0 (0 waiting for GC), suspected: 1130, duration: 25 ms.\nCC timestamp: 1301485320443862, collected: 0 (0 waiting for GC), suspected: 1156, duration: 24 ms.\n\nBrowser has been running for less than 5 minutes at the moment.", "author": "danne.da@gmail.com", "creator": "danne.da@gmail.com", "time": "2011-03-30T11:42:36Z", "count": 19, "bug_id": 645678}, {"count": 20, "bug_id": 645678, "raw_text": "This just popped up:\n\nError: [Exception... \"Component returned failure code: 0x80004005 (NS_ERROR_FAILURE) [nsIStreamListener.onStartRequest]\"  nsresult: \"0x80004005 (NS_ERROR_FAILURE)\"  location: \"JS frame :: chrome://adblockplus-modules/content/Utils.jsm :: <TOP_LEVEL> :: line 663\"  data: no]\nSource File: chrome://adblockplus-modules/content/Utils.jsm\nLine: 663", "tags": [], "is_private": false, "time": "2011-03-30T11:45:31Z", "creation_time": "2011-03-30T11:45:31Z", "author": "danne.da@gmail.com", "creator": "danne.da@gmail.com", "text": "This just popped up:\n\nError: [Exception... \"Component returned failure code: 0x80004005 (NS_ERROR_FAILURE) [nsIStreamListener.onStartRequest]\"  nsresult: \"0x80004005 (NS_ERROR_FAILURE)\"  location: \"JS frame :: chrome://adblockplus-modules/content/Utils.jsm :: <TOP_LEVEL> :: line 663\"  data: no]\nSource File: chrome://adblockplus-modules/content/Utils.jsm\nLine: 663", "attachment_id": null, "id": 5379973}, {"raw_text": "The exception doesn't mean anything - it is one that is usually being swallowed, it only became visible because now there is JavaScript on the stack. As to your results, I'm not sure how much a run with half a dozen extensions means, especially when performed several days after the comparison run (as opposed to minutes). Anyway, my question was mainly directed to Danial Horton.", "tags": [], "is_private": false, "creation_time": "2011-03-30T11:50:32Z", "text": "The exception doesn't mean anything - it is one that is usually being swallowed, it only became visible because now there is JavaScript on the stack. As to your results, I'm not sure how much a run with half a dozen extensions means, especially when performed several days after the comparison run (as opposed to minutes). Anyway, my question was mainly directed to Danial Horton.", "attachment_id": null, "id": 5379978, "bug_id": 645678, "count": 21, "time": "2011-03-30T11:50:32Z", "creator": "ecfbugzilla@palant.de", "author": "ecfbugzilla@palant.de"}, {"author": "ecfbugzilla@palant.de", "attachment_id": null, "id": 5380072, "creator": "ecfbugzilla@palant.de", "text": "Never mind, I can see that the delays caused by Adblock Plus in Firefox 3.6 are basically the same - while in Firefox 4 they were almost beyond measurable from the start. So there are two issues here. First was keeping DOM nodes alive which in this test caused delays of 2-3 ms (that's what I've seen in Firefox 4 and fixed now). The other was having many objects in memory - that's Adblock Plus filter data which is still causing significant delays in Firefox 3.6 (proportional to the number of filters) while having basically no impact in Firefox 4 (thanks to compartments I guess). I guess I'll just leave that second issue alone unless somebody has a great suggestion on minimizing this impact.", "creation_time": "2011-03-30T13:04:01Z", "is_private": false, "tags": [], "time": "2011-03-30T13:04:01Z", "count": 22, "raw_text": "Never mind, I can see that the delays caused by Adblock Plus in Firefox 3.6 are basically the same - while in Firefox 4 they were almost beyond measurable from the start. So there are two issues here. First was keeping DOM nodes alive which in this test caused delays of 2-3 ms (that's what I've seen in Firefox 4 and fixed now). The other was having many objects in memory - that's Adblock Plus filter data which is still causing significant delays in Firefox 3.6 (proportional to the number of filters) while having basically no impact in Firefox 4 (thanks to compartments I guess). I guess I'll just leave that second issue alone unless somebody has a great suggestion on minimizing this impact.", "bug_id": 645678}, {"raw_text": "re: comment 16:\n\n> And since redirect processing is now asynchronous I don't know how long I need\n> to wait after http-on-examine-response until it is clear that the data will no\n> longer be used.\n\nWladimir:\n\nWe now have nsIRedirectResultListener, which will tell you the result of a redirect (i.e. whether it went through, or got cancelled and the old channel is being used).  Is that enough for your purposes?", "tags": [], "is_private": false, "creation_time": "2011-03-31T09:10:20Z", "text": "re: comment 16:\n\n> And since redirect processing is now asynchronous I don't know how long I need\n> to wait after http-on-examine-response until it is clear that the data will no\n> longer be used.\n\nWladimir:\n\nWe now have nsIRedirectResultListener, which will tell you the result of a redirect (i.e. whether it went through, or got cancelled and the old channel is being used).  Is that enough for your purposes?", "id": 5382751, "attachment_id": null, "bug_id": 645678, "count": 23, "time": "2011-03-31T09:10:20Z", "creator": "jduell.mcbugs@gmail.com", "author": "jduell.mcbugs@gmail.com"}, {"tags": [], "is_private": false, "raw_text": "Hold that thought:  I just realized that nsIRedirectResultListener is not supported right now on the child process.  Filed bug 646774.", "text": "Hold that thought:  I just realized that nsIRedirectResultListener is not supported right now on the child process.  Filed bug 646774.", "id": 5382769, "attachment_id": null, "creation_time": "2011-03-31T09:19:30Z", "time": "2011-03-31T09:19:30Z", "bug_id": 645678, "count": 24, "creator": "jduell.mcbugs@gmail.com", "author": "jduell.mcbugs@gmail.com"}, {"bug_id": 645678, "count": 25, "time": "2011-03-31T11:00:27Z", "creator": "ecfbugzilla@palant.de", "author": "ecfbugzilla@palant.de", "raw_text": "@Jason: Neither are http-on-examine-response/http-on-examine-cached-response supported on the child process so it wouldn't help much. The current solution with nsITraceableChannel is more reliable anyway so I think that I'll stick with it - now that only needs to start working with e10s.", "tags": [], "is_private": false, "creation_time": "2011-03-31T11:00:27Z", "text": "@Jason: Neither are http-on-examine-response/http-on-examine-cached-response supported on the child process so it wouldn't help much. The current solution with nsITraceableChannel is more reliable anyway so I think that I'll stick with it - now that only needs to start working with e10s.", "id": 5382866, "attachment_id": null}]}}}