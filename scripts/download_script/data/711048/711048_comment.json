{"comments": {}, "bugs": {"711048": {"comments": [{"is_private": false, "creation_time": "2011-12-15T14:58:44Z", "creator": "HerbEppel@gmail.com", "tags": [], "attachment_id": null, "id": 5918731, "bug_id": 711048, "text": "User Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:8.0) Gecko/20100101 Firefox/8.0\nBuild ID: 20111104165243\n\nSteps to reproduce:\n\nDeactivating Quick Filter by clicking on the pin\n\n\nActual results:\n\nQuick Filter is deactivated, but current search term is not cleared\n\n\nExpected results:\n\nCurrent search term should be cleared. \nSee discussion at http://groups.google.com/group/mozilla.support.thunderbird/browse_thread/thread/40a867c638c25cac/", "count": 0, "author": "HerbEppel@gmail.com", "raw_text": "User Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:8.0) Gecko/20100101 Firefox/8.0\nBuild ID: 20111104165243\n\nSteps to reproduce:\n\nDeactivating Quick Filter by clicking on the pin\n\n\nActual results:\n\nQuick Filter is deactivated, but current search term is not cleared\n\n\nExpected results:\n\nCurrent search term should be cleared. \nSee discussion at http://groups.google.com/group/mozilla.support.thunderbird/browse_thread/thread/40a867c638c25cac/", "time": "2011-12-15T14:58:44Z"}, {"creator": "vseerror@lehigh.edu", "is_private": false, "creation_time": "2011-12-15T15:15:00Z", "attachment_id": null, "tags": [], "author": "vseerror@lehigh.edu", "count": 1, "text": "should it clear all settings to default, or just clear the text field?", "bug_id": 711048, "id": 5918780, "time": "2011-12-15T15:15:00Z", "raw_text": "should it clear all settings to default, or just clear the text field?"}, {"time": "2011-12-15T15:20:53Z", "raw_text": "Mmmm, good question. I don't really use the settings, and I was primarily thinking of the text field (in order to avoid having to click on the x to clear the field), but I dare say it would make sense to reset the settings at the same time.", "attachment_id": null, "tags": [], "creator": "HerbEppel@gmail.com", "text": "Mmmm, good question. I don't really use the settings, and I was primarily thinking of the text field (in order to avoid having to click on the x to clear the field), but I dare say it would make sense to reset the settings at the same time.", "count": 2, "author": "HerbEppel@gmail.com", "id": 5918801, "bug_id": 711048, "is_private": false, "creation_time": "2011-12-15T15:20:53Z"}, {"tags": [], "attachment_id": 602092, "is_private": false, "creation_time": "2012-03-01T21:53:15Z", "creator": "acelists@atlas.sk", "raw_text": "", "time": "2012-03-01T21:53:15Z", "id": 6107387, "bug_id": 711048, "count": 3, "text": "Created attachment 602092\nquick and dirty patch", "author": "acelists@atlas.sk"}, {"author": "bugmail@asutherland.org", "text": "Comment on attachment 602092\nquick and dirty patch\n\nThanks for jumping into fixing this!\n\n_testHelperResetFilterState does a lot more than you probably want.  It will nuke the state of things that should be sticky, like which of the text filter options (subject, body, etc.) are in use.  filterer.clear() is probably what you want.\n\nInstead of adding an \"oncommand\" item to the toolbar that directly pokes at stuff, you should use \"command\" and add a command to QuickFilterBarMuxer's supportsCommand/isCommandEnabled/doCommand hierarchy.  Then you can have the logic that checks if the state changed.\n\nThe quick filter bar has pretty good mozmill test coverage, so you would want to add a test for this functionality.  Specifically, you will need to modify mail/test/mozmill/quick-filter-bar/test-sticky-filter-logic.js.  The specific cases I would want to make sure are covered are:\n1) verifies that clicking the 'pin' to activate it does not clear any existing filter state.\n2) verifies that clicking the pin to deactivate it does clear state, but does not lose persisted state of the text filters.\n\nI think the existing tests do not cover #1, so you would need to add that.  It looks like test_sticky_tags covers the clearing of #2 (after changing folders, which would be removed), but does not verify the potential state loss.  You might want to check for state loss in a separate test by altering the text filters from default as part of a test.  test-filter-logic.js's test_filter_text_constraints_propagate does something similar and could form a good basis.", "count": 4, "bug_id": 711048, "id": 6107496, "raw_text": "Thanks for jumping into fixing this!\n\n_testHelperResetFilterState does a lot more than you probably want.  It will nuke the state of things that should be sticky, like which of the text filter options (subject, body, etc.) are in use.  filterer.clear() is probably what you want.\n\nInstead of adding an \"oncommand\" item to the toolbar that directly pokes at stuff, you should use \"command\" and add a command to QuickFilterBarMuxer's supportsCommand/isCommandEnabled/doCommand hierarchy.  Then you can have the logic that checks if the state changed.\n\nThe quick filter bar has pretty good mozmill test coverage, so you would want to add a test for this functionality.  Specifically, you will need to modify mail/test/mozmill/quick-filter-bar/test-sticky-filter-logic.js.  The specific cases I would want to make sure are covered are:\n1) verifies that clicking the 'pin' to activate it does not clear any existing filter state.\n2) verifies that clicking the pin to deactivate it does clear state, but does not lose persisted state of the text filters.\n\nI think the existing tests do not cover #1, so you would need to add that.  It looks like test_sticky_tags covers the clearing of #2 (after changing folders, which would be removed), but does not verify the potential state loss.  You might want to check for state loss in a separate test by altering the text filters from default as part of a test.  test-filter-logic.js's test_filter_text_constraints_propagate does something similar and could form a good basis.", "time": "2012-03-01T22:23:07Z", "creator": "bugmail@asutherland.org", "is_private": false, "creation_time": "2012-03-01T22:23:07Z", "attachment_id": 602092, "tags": []}, {"is_private": false, "creation_time": "2012-03-01T22:40:12Z", "id": 6107541, "bug_id": 711048, "count": 5, "text": "Thanks for great analysis. I tried filterer.clear() before settling for _testHelperResetFilterState but it somehow didn't work. Maybe I was getting filterer wrongly. I think I can also follow you on the \"command\" stuff.\nBut the rest is beyond me :(", "author": "acelists@atlas.sk", "creator": "acelists@atlas.sk", "tags": [], "raw_text": "Thanks for great analysis. I tried filterer.clear() before settling for _testHelperResetFilterState but it somehow didn't work. Maybe I was getting filterer wrongly. I think I can also follow you on the \"command\" stuff.\nBut the rest is beyond me :(", "attachment_id": null, "time": "2012-03-01T22:40:12Z"}, {"text": "Right, calling clear updates the state of the filterer, but you still need to update the UI.  One would basically want to imitate what cmdEscapeFilterStack does.  It calls userHitEscape which returns true if pressing escape actually did anything, and then it updates the search and updates the UI.\n\nIn this case, filterer.clear would need to be altered to return the value of clearAllFilterValues so similar logic could be used.\n\nIs there a particular aspect that you are feeling uncomfortable with?  If it's the mozmill tests, there is some basic documentation on our mozmill tests here, and people on the IRC channel or Standard8 or myself will gladly help you through getting up to speed on them:\nhttps://developer.mozilla.org/en/Thunderbird/Thunderbird_MozMill_Testing", "count": 6, "author": "bugmail@asutherland.org", "bug_id": 711048, "id": 6107641, "raw_text": "Right, calling clear updates the state of the filterer, but you still need to update the UI.  One would basically want to imitate what cmdEscapeFilterStack does.  It calls userHitEscape which returns true if pressing escape actually did anything, and then it updates the search and updates the UI.\n\nIn this case, filterer.clear would need to be altered to return the value of clearAllFilterValues so similar logic could be used.\n\nIs there a particular aspect that you are feeling uncomfortable with?  If it's the mozmill tests, there is some basic documentation on our mozmill tests here, and people on the IRC channel or Standard8 or myself will gladly help you through getting up to speed on them:\nhttps://developer.mozilla.org/en/Thunderbird/Thunderbird_MozMill_Testing", "time": "2012-03-01T22:58:06Z", "creator": "bugmail@asutherland.org", "creation_time": "2012-03-01T22:58:06Z", "is_private": false, "attachment_id": null, "tags": []}, {"is_private": false, "creation_time": "2012-03-02T20:09:40Z", "id": 6110364, "bug_id": 711048, "author": "acelists@atlas.sk", "text": "(In reply to Andrew Sutherland (:asuth) from comment #6)\n> In this case, filterer.clear would need to be altered to return the value of\n> clearAllFilterValues so similar logic could be used.\n\nI didn't understand this part.\n\nI am at this now:\n+    else if (aCommand == \"cmd_resetSearchTerm\") {\n+      if (!document.getElementById(\"qfb-sticky\").checked) {\n+        let filterer = this.maybeActiveFilterer;\n+        if (!filterer || !filterer.visible)\n+          return;\n+\n+        filterer.clear();\n+        this.updateSearch();\n+        this.reflectFiltererState(filterer,\n+                                  this.tabmail.currentTabInfo.folderDisplay);\n+      }\n\nIt seems to work better now, does not reset the selection of subject/body/sender .", "count": 7, "creator": "acelists@atlas.sk", "tags": [], "attachment_id": null, "raw_text": "(In reply to Andrew Sutherland (:asuth) from comment #6)\n> In this case, filterer.clear would need to be altered to return the value of\n> clearAllFilterValues so similar logic could be used.\n\nI didn't understand this part.\n\nI am at this now:\n+    else if (aCommand == \"cmd_resetSearchTerm\") {\n+      if (!document.getElementById(\"qfb-sticky\").checked) {\n+        let filterer = this.maybeActiveFilterer;\n+        if (!filterer || !filterer.visible)\n+          return;\n+\n+        filterer.clear();\n+        this.updateSearch();\n+        this.reflectFiltererState(filterer,\n+                                  this.tabmail.currentTabInfo.folderDisplay);\n+      }\n\nIt seems to work better now, does not reset the selection of subject/body/sender .", "time": "2012-03-02T20:09:40Z"}, {"creator": "bugmail@asutherland.org", "count": 8, "text": "(In reply to :aceman from comment #7)\n> (In reply to Andrew Sutherland (:asuth) from comment #6)\n> > In this case, filterer.clear would need to be altered to return the value of\n> > clearAllFilterValues so similar logic could be used.\n> \n> I didn't understand this part.\n\nAh, I meant that the clear method looks like this:\n\n  clear: function MFS_clear() {\n    QuickFilterManager.clearAllFilterValues(this.filterValues);\n  },\n\nbut it would be better if it added a return and looked like:\n\n  clear: function MFS_clear() {\n    return QuickFilterManager.clearAllFilterValues(this.filterValues);\n  },\n\nBecause the docs of clearAllFilterValues say:\n\n  /**\n   * Reset the state of all filters given the provided values.\n   *\n   * @return true if we actually cleared something, false if there was nothing\n   *     to clear.\n   */\n\nso that way the caller of clear can check the return value of clear.  If it returns false, there is no need to re-issue the search or update the UI because nothing actually changed.\n\n> I am at this now:\n> +    else if (aCommand == \"cmd_resetSearchTerm\") {\n> +      if (!document.getElementById(\"qfb-sticky\").checked) {\n> +        let filterer = this.maybeActiveFilterer;\n> +        if (!filterer || !filterer.visible)\n> +          return;\n> +\n> +        filterer.clear();\n> +        this.updateSearch();\n> +        this.reflectFiltererState(filterer,\n> +                                 \n> this.tabmail.currentTabInfo.folderDisplay);\n> +      }\n> \n> It seems to work better now, does not reset the selection of\n> subject/body/sender .\n\nYes, this looks much better.  I would also change the name of \"cmd_resetSearchTerm\" to \"cmd_quickFilterStickyChanged\" or something that helps indicate that we are tightly coupled to the sticky/pin button and not intending to be a generic way to clear the quick filter.", "author": "bugmail@asutherland.org", "id": 6110479, "bug_id": 711048, "creation_time": "2012-03-02T20:38:24Z", "is_private": false, "time": "2012-03-02T20:38:24Z", "raw_text": "(In reply to :aceman from comment #7)\n> (In reply to Andrew Sutherland (:asuth) from comment #6)\n> > In this case, filterer.clear would need to be altered to return the value of\n> > clearAllFilterValues so similar logic could be used.\n> \n> I didn't understand this part.\n\nAh, I meant that the clear method looks like this:\n\n  clear: function MFS_clear() {\n    QuickFilterManager.clearAllFilterValues(this.filterValues);\n  },\n\nbut it would be better if it added a return and looked like:\n\n  clear: function MFS_clear() {\n    return QuickFilterManager.clearAllFilterValues(this.filterValues);\n  },\n\nBecause the docs of clearAllFilterValues say:\n\n  /**\n   * Reset the state of all filters given the provided values.\n   *\n   * @return true if we actually cleared something, false if there was nothing\n   *     to clear.\n   */\n\nso that way the caller of clear can check the return value of clear.  If it returns false, there is no need to re-issue the search or update the UI because nothing actually changed.\n\n> I am at this now:\n> +    else if (aCommand == \"cmd_resetSearchTerm\") {\n> +      if (!document.getElementById(\"qfb-sticky\").checked) {\n> +        let filterer = this.maybeActiveFilterer;\n> +        if (!filterer || !filterer.visible)\n> +          return;\n> +\n> +        filterer.clear();\n> +        this.updateSearch();\n> +        this.reflectFiltererState(filterer,\n> +                                 \n> this.tabmail.currentTabInfo.folderDisplay);\n> +      }\n> \n> It seems to work better now, does not reset the selection of\n> subject/body/sender .\n\nYes, this looks much better.  I would also change the name of \"cmd_resetSearchTerm\" to \"cmd_quickFilterStickyChanged\" or something that helps indicate that we are tightly coupled to the sticky/pin button and not intending to be a generic way to clear the quick filter.", "attachment_id": null, "tags": []}, {"creator": "acelists@atlas.sk", "text": "(In reply to Andrew Sutherland (:asuth) from comment #8)\n>   clear: function MFS_clear() {\n>     QuickFilterManager.clearAllFilterValues(this.filterValues);\n>   },\n> \n> but it would be better if it added a return and looked like:\n> \n>   clear: function MFS_clear() {\n>     return QuickFilterManager.clearAllFilterValues(this.filterValues);\n>   },\n> \n> Because the docs of clearAllFilterValues say:\n\nI can add this.\nBut how will this help my patch? Should I check if the return is false and then do nothing of the refreshing?", "count": 9, "author": "acelists@atlas.sk", "bug_id": 711048, "id": 6110524, "creation_time": "2012-03-02T20:48:01Z", "is_private": false, "time": "2012-03-02T20:48:01Z", "raw_text": "(In reply to Andrew Sutherland (:asuth) from comment #8)\n>   clear: function MFS_clear() {\n>     QuickFilterManager.clearAllFilterValues(this.filterValues);\n>   },\n> \n> but it would be better if it added a return and looked like:\n> \n>   clear: function MFS_clear() {\n>     return QuickFilterManager.clearAllFilterValues(this.filterValues);\n>   },\n> \n> Because the docs of clearAllFilterValues say:\n\nI can add this.\nBut how will this help my patch? Should I check if the return is false and then do nothing of the refreshing?", "attachment_id": null, "tags": []}, {"time": "2012-04-03T00:54:33Z", "attachment_id": 602092, "raw_text": "Yeah, after playing around with this, it seems to work the way I think it should\u2026\n\nui-r=me!\n\nThanks,\nBlake.", "tags": [], "creator": "bwinton@latte.ca", "author": "bwinton@latte.ca", "count": 10, "text": "Comment on attachment 602092\nquick and dirty patch\n\nYeah, after playing around with this, it seems to work the way I think it should\u2026\n\nui-r=me!\n\nThanks,\nBlake.", "id": 6192017, "bug_id": 711048, "creation_time": "2012-04-03T00:54:33Z", "is_private": false}, {"tags": [], "raw_text": "Asuth, could you answer comment 8 so I can continue?", "attachment_id": null, "time": "2012-04-15T13:10:50Z", "is_private": false, "creation_time": "2012-04-15T13:10:50Z", "id": 6224057, "bug_id": 711048, "text": "Asuth, could you answer comment 8 so I can continue?", "count": 11, "author": "acelists@atlas.sk", "creator": "acelists@atlas.sk"}, {"time": "2012-04-15T14:56:17Z", "attachment_id": null, "raw_text": "I mean comment 9.", "tags": [], "creator": "acelists@atlas.sk", "author": "acelists@atlas.sk", "count": 12, "text": "I mean comment 9.", "bug_id": 711048, "id": 6224151, "is_private": false, "creation_time": "2012-04-15T14:56:17Z"}, {"id": 6224505, "bug_id": 711048, "is_private": false, "creation_time": "2012-04-15T23:07:47Z", "creator": "bugmail@asutherland.org", "count": 13, "text": "(In reply to :aceman from comment #12)\n> I mean comment 9.\n\nSorry, I didn't realize you were blocked on that question.\n\n(In reply to :aceman from comment #9)\n> I can add this.\n> But how will this help my patch? Should I check if the return is false and\n> then do nothing of the refreshing?\n\nThe benefit is primarily consistency with the existing code, but there is also benefit from not poking the DOM when there would be no net effect to poking it.\n\nYes.", "author": "bugmail@asutherland.org", "tags": [], "time": "2012-04-15T23:07:47Z", "raw_text": "(In reply to :aceman from comment #12)\n> I mean comment 9.\n\nSorry, I didn't realize you were blocked on that question.\n\n(In reply to :aceman from comment #9)\n> I can add this.\n> But how will this help my patch? Should I check if the return is false and\n> then do nothing of the refreshing?\n\nThe benefit is primarily consistency with the existing code, but there is also benefit from not poking the DOM when there would be no net effect to poking it.\n\nYes.", "attachment_id": null}, {"time": "2012-05-12T16:13:28Z", "raw_text": "Ok, taking advantage of the return value of .clear().\n\nBut there is a problem, the patch does not work for me. The sticky does not stick when changing folders. The stickyness comes back when removing the \"command\" attribute on the sticky toolbarbutton. It does not come back when just removing the code (for stickyChanged command) in \"doCommand()\". I do not understand it.", "author": "acelists@atlas.sk", "text": "Created attachment 623436\npatch\n\nOk, taking advantage of the return value of .clear().\n\nBut there is a problem, the patch does not work for me. The sticky does not stick when changing folders. The stickyness comes back when removing the \"command\" attribute on the sticky toolbarbutton. It does not come back when just removing the code (for stickyChanged command) in \"doCommand()\". I do not understand it.", "count": 14, "bug_id": 711048, "id": 6303063, "attachment_id": 623436, "tags": [], "creator": "acelists@atlas.sk", "is_private": false, "creation_time": "2012-05-12T16:13:28Z"}, {"author": "bugmail@asutherland.org", "count": 15, "text": "Comment on attachment 623436\npatch\n\nReview of attachment 623436:\n-----------------------------------------------------------------\n\n(In reply to :aceman from comment #14)\n> But there is a problem, the patch does not work for me. The sticky does not\n> stick when changing folders. The stickyness comes back when removing the\n> \"command\" attribute on the sticky toolbarbutton. It does not come back when\n> just removing the code (for stickyChanged command) in \"doCommand()\". I do\n> not understand it.\n\nYour change to add the \"command\" attribute must be altering the XUL widget's behavior in regards to firing the command event.\n\nHere is where we define the logic that actually persists the change to the sticky state (see line 349 for the defineFilter comment block):\nhttp://mxr.mozilla.org/comm-central/source/mail/base/modules/quickFilterManager.js#560\n\nWe hang our \"command\" listener on the the specified domId of \"qfb-sticky\", but it's probably deciding to not fire the event or it's firing it at the \"command\" element you added instead.  You can probably change the domId to reference the command and then alter the onCommand handler to explicitly lookup the qfb-sticky checkbox for the check.  (I don't think the XUL command element exposes the checked state?)", "bug_id": 711048, "id": 6304158, "time": "2012-05-14T03:42:01Z", "raw_text": "Review of attachment 623436:\n-----------------------------------------------------------------\n\n(In reply to :aceman from comment #14)\n> But there is a problem, the patch does not work for me. The sticky does not\n> stick when changing folders. The stickyness comes back when removing the\n> \"command\" attribute on the sticky toolbarbutton. It does not come back when\n> just removing the code (for stickyChanged command) in \"doCommand()\". I do\n> not understand it.\n\nYour change to add the \"command\" attribute must be altering the XUL widget's behavior in regards to firing the command event.\n\nHere is where we define the logic that actually persists the change to the sticky state (see line 349 for the defineFilter comment block):\nhttp://mxr.mozilla.org/comm-central/source/mail/base/modules/quickFilterManager.js#560\n\nWe hang our \"command\" listener on the the specified domId of \"qfb-sticky\", but it's probably deciding to not fire the event or it's firing it at the \"command\" element you added instead.  You can probably change the domId to reference the command and then alter the onCommand handler to explicitly lookup the qfb-sticky checkbox for the check.  (I don't think the XUL command element exposes the checked state?)", "creator": "bugmail@asutherland.org", "creation_time": "2012-05-14T03:42:01Z", "is_private": false, "attachment_id": 623436, "tags": []}, {"is_private": false, "creation_time": "2012-06-02T17:20:03Z", "bug_id": 711048, "id": 6358290, "author": "acelists@atlas.sk", "count": 16, "text": "But it is strange because it worked some time ago. Maybe it was the version with oncommand (comment 3) that worked.\nI think I didn't understand what is the suggested workaround.\nBut anyway, I am not familiar enough with this code and the feature requested does not interest me. I would not want to create a test. So I'll better leave the patch for somebody more interested.", "creator": "acelists@atlas.sk", "tags": [], "attachment_id": null, "raw_text": "But it is strange because it worked some time ago. Maybe it was the version with oncommand (comment 3) that worked.\nI think I didn't understand what is the suggested workaround.\nBut anyway, I am not familiar enough with this code and the feature requested does not interest me. I would not want to create a test. So I'll better leave the patch for somebody more interested.", "time": "2012-06-02T17:20:03Z"}]}}}