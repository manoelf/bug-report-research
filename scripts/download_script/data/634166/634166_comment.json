{"bugs": {"634166": {"comments": [{"attachment_id": null, "time": "2011-02-15T03:45:29Z", "is_private": false, "author": "mrbkap@gmail.com", "bug_id": 634166, "count": 0, "tags": [], "creator": "mrbkap@gmail.com", "text": "We've had examples where code forgot to check argc before reading a slot from argv. In these cases, anything can happen, from finding a \"double\" to finding an old object that happened to have been left on the stack. It appears that because the memory that we pass to native functions is just in the middle of the contiguous stack, it's likely to be in the middle of a block of memory that is otherwise \"allocated\" but hasn't been set-up for the function call.\n\nWould it be possible to add annotations or something so that valgrind would see these reads as being reading uninitialized memory?\n\ndvander also suggested that this might be something to throw static analysis at instead of valgrind.", "creation_time": "2011-02-15T03:45:29Z", "raw_text": "We've had examples where code forgot to check argc before reading a slot from argv. In these cases, anything can happen, from finding a \"double\" to finding an old object that happened to have been left on the stack. It appears that because the memory that we pass to native functions is just in the middle of the contiguous stack, it's likely to be in the middle of a block of memory that is otherwise \"allocated\" but hasn't been set-up for the function call.\n\nWould it be possible to add annotations or something so that valgrind would see these reads as being reading uninitialized memory?\n\ndvander also suggested that this might be something to throw static analysis at instead of valgrind.", "id": 5278962}, {"id": 5279040, "raw_text": "You could mark the memory just after argv as inaccessible with Valgrind, yes.  Question is, what is that memory?  Is it something that's accessed?  If so, that'll lead to false positive errors.", "creation_time": "2011-02-15T04:32:07Z", "is_private": false, "text": "You could mark the memory just after argv as inaccessible with Valgrind, yes.  Question is, what is that memory?  Is it something that's accessed?  If so, that'll lead to false positive errors.", "time": "2011-02-15T04:32:07Z", "creator": "n.nethercote@gmail.com", "count": 1, "tags": [], "bug_id": 634166, "attachment_id": null, "author": "n.nethercote@gmail.com"}, {"attachment_id": null, "author": "mail@lukewagner.name", "id": 5279076, "raw_text": "At all times there is an exact top-of-stack (in the general case, evaluated by StackSpace::firstUnused).  Usually its just cx->regs->sp.  Rather than trying to notify valgrind on every push/pop (hard), perhaps we could have a mechanism for telling valgrind the address of a variable which acts as the top of a stack?  That way there would only be a handful of places to update; mostly StackSpace/JSContext memfuns.", "creation_time": "2011-02-15T05:00:01Z", "is_private": false, "text": "At all times there is an exact top-of-stack (in the general case, evaluated by StackSpace::firstUnused).  Usually its just cx->regs->sp.  Rather than trying to notify valgrind on every push/pop (hard), perhaps we could have a mechanism for telling valgrind the address of a variable which acts as the top of a stack?  That way there would only be a handful of places to update; mostly StackSpace/JSContext memfuns.", "time": "2011-02-15T05:00:01Z", "creator": "mail@lukewagner.name", "tags": [], "count": 2, "bug_id": 634166}, {"time": "2011-02-28T23:59:08Z", "tags": [], "count": 3, "creator": "mrbkap@gmail.com", "bug_id": 634166, "id": 5310164, "raw_text": "How worried are we about the interpreter/a JIT reading off the end of the stack? Do you think it'd be worth simply marking the end of the stack when calling into natives/getters/setters and then expanding the end of the stack when we return?", "is_private": false, "creation_time": "2011-02-28T23:59:08Z", "text": "How worried are we about the interpreter/a JIT reading off the end of the stack? Do you think it'd be worth simply marking the end of the stack when calling into natives/getters/setters and then expanding the end of the stack when we return?", "attachment_id": null, "author": "mrbkap@gmail.com"}]}}, "comments": {}}