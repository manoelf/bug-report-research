{"comments": {}, "bugs": {"691174": {"comments": [{"creator": "justin.lebar+bug@gmail.com", "author": "justin.lebar+bug@gmail.com", "text": "My analysis from bug 688979 indicates that about 8% of mallocs in the browser are from strings:\n\n109135 malloc's ( 4%):\n  malloc at memory/jemalloc/jemalloc.c:6075\n  nsStringBuffer::Alloc(unsigned long) at xpcom/string/src/nsSubstring.cpp:210\n  nsAString_internal::MutatePrep(unsigned int, unsigned short**, unsigned int*) at xpcom/string/src/nsTSubstring.cpp:164\n98183 malloc's ( 4%):\n  malloc at memory/jemalloc/jemalloc.c:6075\n  nsStringBuffer::Alloc(unsigned long) at xpcom/string/src/../../../../src/xpcom/string/src/nsSubstring.cpp:210\n  nsACString_internal::MutatePrep(unsigned int, char**, unsigned int*) at xpcom/string/src/../../../../src/xpcom/string/src/nsTSubstring.cpp:164\n\n(In this test run, I started up the browser, loaded gmail, nytimes, slashdot, and CNN, and then closed the browser.)\n\nUsing nsAutoTArray instead of nsTArray in the CSS engine resulted in a 2-3% RSS reduction (bug 681755 comment 31).  It's possible we'd see a similar improvement by using nsAuto{C,}String in place of ns{C,}String in a few key places.", "attachment_id": null, "time": "2011-10-02T18:16:48Z", "raw_text": "My analysis from bug 688979 indicates that about 8% of mallocs in the browser are from strings:\n\n109135 malloc's ( 4%):\n  malloc at memory/jemalloc/jemalloc.c:6075\n  nsStringBuffer::Alloc(unsigned long) at xpcom/string/src/nsSubstring.cpp:210\n  nsAString_internal::MutatePrep(unsigned int, unsigned short**, unsigned int*) at xpcom/string/src/nsTSubstring.cpp:164\n98183 malloc's ( 4%):\n  malloc at memory/jemalloc/jemalloc.c:6075\n  nsStringBuffer::Alloc(unsigned long) at xpcom/string/src/../../../../src/xpcom/string/src/nsSubstring.cpp:210\n  nsACString_internal::MutatePrep(unsigned int, char**, unsigned int*) at xpcom/string/src/../../../../src/xpcom/string/src/nsTSubstring.cpp:164\n\n(In this test run, I started up the browser, loaded gmail, nytimes, slashdot, and CNN, and then closed the browser.)\n\nUsing nsAutoTArray instead of nsTArray in the CSS engine resulted in a 2-3% RSS reduction (bug 681755 comment 31).  It's possible we'd see a similar improvement by using nsAuto{C,}String in place of ns{C,}String in a few key places.", "creation_time": "2011-10-02T18:16:48Z", "bug_id": 691174, "is_private": false, "count": 0, "tags": [], "id": 5752914}, {"bug_id": 691174, "id": 5754713, "tags": [], "count": 1, "is_private": false, "attachment_id": null, "time": "2011-10-03T18:27:38Z", "text": "How does one gather the stats to know if there are stack strings which are easy wins?", "creation_time": "2011-10-03T18:27:38Z", "raw_text": "How does one gather the stats to know if there are stack strings which are easy wins?", "author": "benjamin@smedbergs.us", "creator": "benjamin@smedbergs.us"}, {"text": "In theory, the analysis can use deeper backtraces, which would let us see where those strings are being allocated.  That, plus an indication of how long those allocations last, would help us find stack strings which are easy wins.\n\nBut for some reason it starts giving me funky backtraces around depth 6 or 7, which is how deep you need to go to break out of the string code.  Once I figure this out, I'll post more data in this bug.", "time": "2011-10-03T18:51:36Z", "attachment_id": null, "raw_text": "In theory, the analysis can use deeper backtraces, which would let us see where those strings are being allocated.  That, plus an indication of how long those allocations last, would help us find stack strings which are easy wins.\n\nBut for some reason it starts giving me funky backtraces around depth 6 or 7, which is how deep you need to go to break out of the string code.  Once I figure this out, I'll post more data in this bug.", "creation_time": "2011-10-03T18:51:36Z", "bug_id": 691174, "is_private": false, "count": 2, "tags": [], "id": 5754790, "creator": "justin.lebar+bug@gmail.com", "author": "justin.lebar+bug@gmail.com"}]}}}