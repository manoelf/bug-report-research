{"comments": {}, "bugs": {"665810": {"comments": [{"id": 5544319, "raw_text": "Currently, the only way to create a full-fleged global into which to load scripts, from JavaScript, is via the Cu.Sandbox. While these function well for their intended uses in sandboxed code, such as Jetpack plugins and user scripts, the new global, unlike those created by Cu.import, resides in its own compartment.\n\nFor privileged code, this means that objects that pass into and out of code for these compartment is wrapped in needless proxies. I can't say much for the performance impact of these proxies, but they have other drawbacks, including the inability to wrap E4X objects and therefore pass them in and out of Sandboxes. I've personally also had other issues, in using Mozmill, where any attempt to use evalInSandbox when a sandbox was anywhere in the call stack resulted in the code being evaluated with a primitive JS version.\n\nIt would therefore be beneficial for code such as the Add-on Manager and MozMill to be able to create non-Sandbox globals, similar or identical to those used by Cu.import, into which to load their code via means such as the subscript loader.\n\nAs a corollary of this bug, it would be useful to be able to load code into these and other objects with the evalInSandbox function, or another function which similarly allows the specification of the JavaScript version and source file names and line numbers. If necessary, I'll file for this separately.", "attachment_id": null, "text": "Currently, the only way to create a full-fleged global into which to load scripts, from JavaScript, is via the Cu.Sandbox. While these function well for their intended uses in sandboxed code, such as Jetpack plugins and user scripts, the new global, unlike those created by Cu.import, resides in its own compartment.\n\nFor privileged code, this means that objects that pass into and out of code for these compartment is wrapped in needless proxies. I can't say much for the performance impact of these proxies, but they have other drawbacks, including the inability to wrap E4X objects and therefore pass them in and out of Sandboxes. I've personally also had other issues, in using Mozmill, where any attempt to use evalInSandbox when a sandbox was anywhere in the call stack resulted in the code being evaluated with a primitive JS version.\n\nIt would therefore be beneficial for code such as the Add-on Manager and MozMill to be able to create non-Sandbox globals, similar or identical to those used by Cu.import, into which to load their code via means such as the subscript loader.\n\nAs a corollary of this bug, it would be useful to be able to load code into these and other objects with the evalInSandbox function, or another function which similarly allows the specification of the JavaScript version and source file names and line numbers. If necessary, I'll file for this separately.", "bug_id": 665810, "time": "2011-06-21T00:46:29Z", "tags": [], "creation_time": "2011-06-21T00:46:29Z", "author": "kmaglione+bmo@mozilla.com", "count": 0, "is_private": false, "creator": "kmaglione+bmo@mozilla.com"}, {"attachment_id": null, "raw_text": "> resides in its own compartment\n\nJS is moving to a 1-1 identification of compartments and globals, so as long as you're creating a new global you will always be creating a new compartment in the very near future.  See bug 650353.", "id": 5545564, "is_private": false, "creator": "bzbarsky@mit.edu", "count": 1, "creation_time": "2011-06-21T15:49:01Z", "author": "bzbarsky@mit.edu", "text": "> resides in its own compartment\n\nJS is moving to a 1-1 identification of compartments and globals, so as long as you're creating a new global you will always be creating a new compartment in the very near future.  See bug 650353.", "time": "2011-06-21T15:49:01Z", "bug_id": 665810, "tags": []}]}}}