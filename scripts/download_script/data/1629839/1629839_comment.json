{"comments": {}, "bugs": {"1629839": {"comments": [{"creator": "achronop@gmail.com", "creation_time": "2020-04-14T12:10:24Z", "time": "2020-04-14T12:10:24Z", "count": 0, "tags": [], "id": 14753861, "author": "achronop@gmail.com", "text": "This bug is for crash report bp-3d1796a9-b704-4049-abed-1ff470200413.\n\n```\nTop 10 frames of crashing thread:\n\n0 XUL RustMozCrash mozglue/static/rust/wrappers.cpp:17\n1 XUL mozglue_static::panic_hook mozglue/static/rust/lib.rs:89\n2 XUL core::ops::function::Fn::call src/libcore/ops/function.rs:72\n3 XUL std::panicking::rust_panic_with_hook src/libstd/panicking.rs:475\n4 XUL rust_begin_unwind src/libstd/panicking.rs:375\n5 XUL core::panicking::panic_fmt src/libcore/panicking.rs:84\n6 XUL core::panicking::panic src/libcore/panicking.rs:51\n7 XUL cubeb_coreaudio::backend::buffer_manager::BufferManager::push_silent_data third_party/rust/cubeb-coreaudio/src/backend/buffer_manager.rs\n8 XUL cubeb_coreaudio::backend::audiounit_output_callback third_party/rust/cubeb-coreaudio/src/backend/mod.rs:615\n9 CoreAudio CoreAudio@0xca1e \n\n```", "raw_text": "This bug is for crash report bp-3d1796a9-b704-4049-abed-1ff470200413.\n\n```\nTop 10 frames of crashing thread:\n\n0 XUL RustMozCrash mozglue/static/rust/wrappers.cpp:17\n1 XUL mozglue_static::panic_hook mozglue/static/rust/lib.rs:89\n2 XUL core::ops::function::Fn::call src/libcore/ops/function.rs:72\n3 XUL std::panicking::rust_panic_with_hook src/libstd/panicking.rs:475\n4 XUL rust_begin_unwind src/libstd/panicking.rs:375\n5 XUL core::panicking::panic_fmt src/libcore/panicking.rs:84\n6 XUL core::panicking::panic src/libcore/panicking.rs:51\n7 XUL cubeb_coreaudio::backend::buffer_manager::BufferManager::push_silent_data third_party/rust/cubeb-coreaudio/src/backend/buffer_manager.rs\n8 XUL cubeb_coreaudio::backend::audiounit_output_callback third_party/rust/cubeb-coreaudio/src/backend/mod.rs:615\n9 CoreAudio CoreAudio@0xca1e \n\n```", "is_private": false, "attachment_id": null, "bug_id": 1629839}, {"raw_text": "Crashing here https://doc.rust-lang.org/src/core/slice/mod.rs.html#1081.\n\nLooks like we're requesting more input data than `INPUT_BUFFER_CAPACITY`. I think this can happen with the following setup:\n\nInput stereo at 192kHz (for example on an external professional sound card, this is pretty common), output at 44.1kHz, IO buffer size at 512 frames (because we're doing a WebRTC call with AEC on)\n\nIf we don't have input data, we need to push:\n\n```\n>>> (192000 / 44100.)  * 512 * @\n4458.231292517007\n```\n\nframes, which is bigger than [out limit](https://hg.mozilla.org/mozilla-central/annotate/481cca186e7c098a7ddd4d246976342b5d35e5a4/third_party/rust/cubeb-coreaudio/src/backend/buffer_manager.rs#l18) of 4096.\n\nBumping this twofold in size would make it work in this scenario, but one could have even more channels than stereo (I think we support it the days).\n\nChunmin, do we support more than stereo input?", "text": "Crashing here https://doc.rust-lang.org/src/core/slice/mod.rs.html#1081.\n\nLooks like we're requesting more input data than `INPUT_BUFFER_CAPACITY`. I think this can happen with the following setup:\n\nInput stereo at 192kHz (for example on an external professional sound card, this is pretty common), output at 44.1kHz, IO buffer size at 512 frames (because we're doing a WebRTC call with AEC on)\n\nIf we don't have input data, we need to push:\n\n```\n>>> (192000 / 44100.)  * 512 * @\n4458.231292517007\n```\n\nframes, which is bigger than [out limit](https://hg.mozilla.org/mozilla-central/annotate/481cca186e7c098a7ddd4d246976342b5d35e5a4/third_party/rust/cubeb-coreaudio/src/backend/buffer_manager.rs#l18) of 4096.\n\nBumping this twofold in size would make it work in this scenario, but one could have even more channels than stereo (I think we support it the days).\n\nChunmin, do we support more than stereo input?", "is_private": false, "creator": "padenot@mozilla.com", "id": 14754135, "creation_time": "2020-04-14T13:59:37Z", "author": "padenot@mozilla.com", "bug_id": 1629839, "count": 1, "tags": [], "attachment_id": null, "time": "2020-04-14T13:59:37Z"}, {"creator": "cchang@mozilla.com", "creation_time": "2020-04-14T15:11:02Z", "count": 2, "tags": [], "time": "2020-04-14T15:11:02Z", "raw_text": "(In reply to Paul Adenot (:padenot) from comment #1)\n> Chunmin, do we support more than stereo input?\n\n*cubeb-coreaudio* doesn't check the input settings inside so we follow the general [cubeb policy here](https://searchfox.org/mozilla-central/rev/2cd2d511c0d94a34fb7fa3b746f54170ee759e35/third_party/rust/cubeb-sys/libcubeb/src/cubeb.c#83): The valid input channel range is from `1` to `8`(included).\n\n> Crashing here https://doc.rust-lang.org/src/core/slice/mod.rs.html#1081.\n> \n> Looks like we're requesting more input data than `INPUT_BUFFER_CAPACITY`. I think this can happen with the following setup:\n> \n> Input stereo at 192kHz (for example on an external professional sound card, this is pretty common), output at 44.1kHz, IO buffer size at 512 frames (because we're doing a WebRTC call with AEC on)\n> \n> If we don't have input data, we need to push:\n> \n> ```\n> >>> (192000 / 44100.)  * 512 * @\n> 4458.231292517007\n> ```\n> \n> frames, which is bigger than [out limit](https://hg.mozilla.org/mozilla-central/annotate/481cca186e7c098a7ddd4d246976342b5d35e5a4/third_party/rust/cubeb-coreaudio/src/backend/buffer_manager.rs#l18) of 4096.\n> \n\nAn alternative approach is appending the silence data in the `LinearInputBuffer`, [which can happen](https://hg.mozilla.org/mozilla-central/annotate/481cca186e7c098a7ddd4d246976342b5d35e5a4/third_party/rust/cubeb-coreaudio/src/backend/buffer_manager.rs#l129) when the `needed_samples` is greater than the samples we have in the buffer, so we don't need to worry about the size of `BufferManager`. The `LinearInputBuffer` is a `Vec<T>` so its size can grow as it needs until the process is out of memory. What do you think?", "text": "(In reply to Paul Adenot (:padenot) from comment #1)\n> Chunmin, do we support more than stereo input?\n\n*cubeb-coreaudio* doesn't check the input settings inside so we follow the general [cubeb policy here](https://searchfox.org/mozilla-central/rev/2cd2d511c0d94a34fb7fa3b746f54170ee759e35/third_party/rust/cubeb-sys/libcubeb/src/cubeb.c#83): The valid input channel range is from `1` to `8`(included).\n\n> Crashing here https://doc.rust-lang.org/src/core/slice/mod.rs.html#1081.\n> \n> Looks like we're requesting more input data than `INPUT_BUFFER_CAPACITY`. I think this can happen with the following setup:\n> \n> Input stereo at 192kHz (for example on an external professional sound card, this is pretty common), output at 44.1kHz, IO buffer size at 512 frames (because we're doing a WebRTC call with AEC on)\n> \n> If we don't have input data, we need to push:\n> \n> ```\n> >>> (192000 / 44100.)  * 512 * @\n> 4458.231292517007\n> ```\n> \n> frames, which is bigger than [out limit](https://hg.mozilla.org/mozilla-central/annotate/481cca186e7c098a7ddd4d246976342b5d35e5a4/third_party/rust/cubeb-coreaudio/src/backend/buffer_manager.rs#l18) of 4096.\n> \n\nAn alternative approach is appending the silence data in the `LinearInputBuffer`, [which can happen](https://hg.mozilla.org/mozilla-central/annotate/481cca186e7c098a7ddd4d246976342b5d35e5a4/third_party/rust/cubeb-coreaudio/src/backend/buffer_manager.rs#l129) when the `needed_samples` is greater than the samples we have in the buffer, so we don't need to worry about the size of `BufferManager`. The `LinearInputBuffer` is a `Vec<T>` so its size can grow as it needs until the process is out of memory. What do you think?", "is_private": false, "id": 14754336, "author": "cchang@mozilla.com", "bug_id": 1629839, "attachment_id": null}, {"bug_id": 1629839, "attachment_id": null, "is_private": false, "raw_text": "Bump the priority to P1 since it could cause difficulties to use WebRTC, which is the top priority in this time.", "text": "Bump the priority to P1 since it could cause difficulties to use WebRTC, which is the top priority in this time.", "author": "cchang@mozilla.com", "id": 14754345, "tags": [], "count": 3, "time": "2020-04-14T15:16:45Z", "creation_time": "2020-04-14T15:16:45Z", "creator": "cchang@mozilla.com"}, {"author": "padenot@mozilla.com", "id": 14757254, "is_private": false, "raw_text": "Up for review upstream: https://github.com/ChunMinChang/cubeb-coreaudio-rs/pull/86", "text": "Up for review upstream: https://github.com/ChunMinChang/cubeb-coreaudio-rs/pull/86", "attachment_id": null, "bug_id": 1629839, "creation_time": "2020-04-15T17:02:29Z", "creator": "padenot@mozilla.com", "time": "2020-04-15T17:02:29Z", "tags": [], "count": 4}, {"creation_time": "2020-04-20T19:52:45Z", "id": 14767439, "author": "cchang@mozilla.com", "creator": "cchang@mozilla.com", "is_private": false, "text": "Created attachment 9141835\nGitHub Pull Request\n\nThe fix will be imported via bug 1631448", "raw_text": "The fix will be imported via bug 1631448", "time": "2020-04-20T19:52:45Z", "attachment_id": 9141835, "tags": [], "count": 5, "bug_id": 1629839}, {"author": "cchang@mozilla.com", "id": 14770663, "is_private": false, "text": "The fix is imported in bug 1631448", "raw_text": "The fix is imported in bug 1631448", "attachment_id": null, "bug_id": 1629839, "creation_time": "2020-04-22T01:43:36Z", "creator": "cchang@mozilla.com", "time": "2020-04-22T01:43:36Z", "tags": [], "count": 6}, {"creator": "padenot@mozilla.com", "creation_time": "2020-04-24T18:06:40Z", "count": 7, "tags": [], "time": "2020-04-24T18:06:40Z", "raw_text": "\nThis also fixes 1628411 on 76.\n\nPatches below (sha from upstream:\nhttps://github.com/ChunMinChang/cubeb-coreaudio-rs/)\n\ncommit e8b8a052d8ce716c6a6f846d3a6fd4deea2d5ed8\nAuthor: Paul Adenot <paul@paul.cx>\nDate:   Thu Apr 16 18:13:34 2020 +0200\n\n    Don't really push silence to the ring buffer (#86)\n\ncommit b49264bfce977b5ab3e84fb246235845f6720a6b\nAuthor: Chun-Min Chang <chun.m.chang@gmail.com>\nDate:   Thu Apr 9 13:29:24 2020 -0700\n\n    Remove unknown devices when querying devices in scope (#81)\n\n    BMO 1628411 shows we might get some devices whose `AudioObjectID` is\n    `kAudioObjectUnknown`. Not sure if it's normal but we can simply remove\n    them from the scoped-device list when it happens.\n\ncommit 27cf89ef920d1968c06e45f2a7903725d6b635cd\nAuthor: Paul Adenot <paul@paul.cx>\nDate:   Thu Apr 9 20:22:50 2020 +0200\n\n    Always pass all of the buffered input in the resampler (#79)", "text": "Created attachment 9143160\nBug 1629839 - Uplift three patches from cubeb-coreaudio-rs to 76. r?chunmin\n\n\nThis also fixes 1628411 on 76.\n\nPatches below (sha from upstream:\nhttps://github.com/ChunMinChang/cubeb-coreaudio-rs/)\n\ncommit e8b8a052d8ce716c6a6f846d3a6fd4deea2d5ed8\nAuthor: Paul Adenot <paul@paul.cx>\nDate:   Thu Apr 16 18:13:34 2020 +0200\n\n    Don't really push silence to the ring buffer (#86)\n\ncommit b49264bfce977b5ab3e84fb246235845f6720a6b\nAuthor: Chun-Min Chang <chun.m.chang@gmail.com>\nDate:   Thu Apr 9 13:29:24 2020 -0700\n\n    Remove unknown devices when querying devices in scope (#81)\n\n    BMO 1628411 shows we might get some devices whose `AudioObjectID` is\n    `kAudioObjectUnknown`. Not sure if it's normal but we can simply remove\n    them from the scoped-device list when it happens.\n\ncommit 27cf89ef920d1968c06e45f2a7903725d6b635cd\nAuthor: Paul Adenot <paul@paul.cx>\nDate:   Thu Apr 9 20:22:50 2020 +0200\n\n    Always pass all of the buffered input in the resampler (#79)", "is_private": false, "author": "padenot@mozilla.com", "id": 14776902, "bug_id": 1629839, "attachment_id": 9143160}, {"attachment_id": 9143162, "bug_id": 1629839, "author": "padenot@mozilla.com", "id": 14776905, "is_private": false, "raw_text": "\n\nDepends on D72420", "text": "Created attachment 9143162\nBug 1629839 - mach vendor rust. r?chunmin\n\n\n\nDepends on D72420", "time": "2020-04-24T18:07:08Z", "tags": [], "count": 8, "creation_time": "2020-04-24T18:07:08Z", "creator": "padenot@mozilla.com"}, {"count": 9, "tags": [], "time": "2020-04-24T18:10:05Z", "creator": "padenot@mozilla.com", "creation_time": "2020-04-24T18:10:05Z", "bug_id": 1629839, "attachment_id": 9143163, "text": "Created attachment 9143163\nuplift-76.patch\n\nRyan, this contain both fixes (bug 1628411 and bug 1629839).", "raw_text": "Ryan, this contain both fixes (bug 1628411 and bug 1629839).", "is_private": false, "id": 14776907, "author": "padenot@mozilla.com"}, {"bug_id": 1629839, "attachment_id": 9143163, "is_private": false, "raw_text": "### Beta/Release Uplift Approval Request\n* **User impact if declined**: This fixes two crashes that occur on 76, on macOS: bug 1628411 and bug 1629839.\n\nThe first crash occurs when users have a changed their audio preferences from the default to something else with either a high sample-rate or a high-channel count (or both). This doesn't necessarily need special hardware. The second one occur with setups we don't know about, so we side-step an assert and skip a device when doing a specific operation on the list of device present on the machine.\n* **Is this code covered by automated tests?**: No\n* **Has the fix been verified in Nightly?**: Yes\n* **Needs manual test from QE?**: No\n* **If yes, steps to reproduce**: \n* **List of other uplifts needed**: None\n* **Risk to taking this patch**: Low\n* **Why is the change risky/not risky? (and alternatives if risky)**: This has baked on Nightly for some time, and is the minimum amount of code possible to fix those without drifting away too much from what has been proven to work in Nightly. I've built a beta locally and re-did the scenario I did when fixing bug 1629839.\n\n(The other one is even less risky and we don't know how to test, it likely require special hardware/software/configuration).\n* **String changes made/needed**:", "text": "Comment on attachment 9143163\nuplift-76.patch\n\n### Beta/Release Uplift Approval Request\n* **User impact if declined**: This fixes two crashes that occur on 76, on macOS: bug 1628411 and bug 1629839.\n\nThe first crash occurs when users have a changed their audio preferences from the default to something else with either a high sample-rate or a high-channel count (or both). This doesn't necessarily need special hardware. The second one occur with setups we don't know about, so we side-step an assert and skip a device when doing a specific operation on the list of device present on the machine.\n* **Is this code covered by automated tests?**: No\n* **Has the fix been verified in Nightly?**: Yes\n* **Needs manual test from QE?**: No\n* **If yes, steps to reproduce**: \n* **List of other uplifts needed**: None\n* **Risk to taking this patch**: Low\n* **Why is the change risky/not risky? (and alternatives if risky)**: This has baked on Nightly for some time, and is the minimum amount of code possible to fix those without drifting away too much from what has been proven to work in Nightly. I've built a beta locally and re-did the scenario I did when fixing bug 1629839.\n\n(The other one is even less risky and we don't know how to test, it likely require special hardware/software/configuration).\n* **String changes made/needed**:", "id": 14776926, "author": "padenot@mozilla.com", "tags": [], "count": 10, "time": "2020-04-24T18:19:12Z", "creation_time": "2020-04-24T18:19:12Z", "creator": "padenot@mozilla.com"}, {"tags": [], "count": 11, "time": "2020-04-27T13:47:24Z", "creation_time": "2020-04-27T13:47:24Z", "creator": "ryanvm@gmail.com", "bug_id": 1629839, "attachment_id": 9143163, "is_private": false, "text": "Comment on attachment 9143163\nuplift-76.patch\n\nFixes some cubeb crashes. Approved for 76.0rc1.", "raw_text": "Fixes some cubeb crashes. Approved for 76.0rc1.", "author": "ryanvm@gmail.com", "id": 14781557}, {"attachment_id": null, "bug_id": 1629839, "id": 14781579, "author": "ryanvm@gmail.com", "is_private": false, "text": "https://hg.mozilla.org/releases/mozilla-beta/rev/2401b08c64c0\nhttps://hg.mozilla.org/releases/mozilla-beta/rev/39428a673db2", "raw_text": "https://hg.mozilla.org/releases/mozilla-beta/rev/2401b08c64c0\nhttps://hg.mozilla.org/releases/mozilla-beta/rev/39428a673db2", "time": "2020-04-27T13:58:22Z", "tags": ["bugherder", "uplift"], "count": 12, "creation_time": "2020-04-27T13:58:22Z", "creator": "ryanvm@gmail.com"}]}}}