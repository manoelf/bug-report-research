{"comments": {}, "bugs": {"704025": {"comments": [{"creator": "jruderman@gmail.com", "creation_time": "2011-11-21T00:18:07Z", "is_private": false, "attachment_id": null, "tags": [], "author": "jruderman@gmail.com", "count": 0, "text": "Using exponential decay would reduce memory use on visit, remove the need for idle-daily recomputation, and probably improve awesomebar results.\n\nDetails: https://wiki.mozilla.org/User:Jesse/NewFrecency", "bug_id": 704025, "id": 5861632, "raw_text": "Using exponential decay would reduce memory use on visit, remove the need for idle-daily recomputation, and probably improve awesomebar results.\n\nDetails: https://wiki.mozilla.org/User:Jesse/NewFrecency", "time": "2011-11-21T00:18:07Z"}, {"bug_id": 704025, "id": 5866881, "is_private": false, "creation_time": "2011-11-22T23:15:30Z", "creator": "n.nethercote@gmail.com", "count": 1, "text": "From a MemShrink POV this doesn't seem like a huge deal, esp. with bugs like 703427 possibly in the pipeline.  So we've made it a MemShrink:P2.  \n\nIt does sound like a good idea in general -- the current algorithm is very ad hoc.  But it's not clear to me who would implement it and how it would be evaluated.", "author": "n.nethercote@gmail.com", "tags": [], "time": "2011-11-22T23:15:30Z", "raw_text": "From a MemShrink POV this doesn't seem like a huge deal, esp. with bugs like 703427 possibly in the pipeline.  So we've made it a MemShrink:P2.  \n\nIt does sound like a good idea in general -- the current algorithm is very ad hoc.  But it's not clear to me who would implement it and how it would be evaluated.", "attachment_id": null}, {"tags": [], "attachment_id": null, "is_private": false, "creation_time": "2011-11-22T23:54:52Z", "creator": "mak@mozilla.com", "raw_text": "The advantages of this approach would be many:\n- The current painful point in visits addition is frecency recalculation, so this may speed up visits addition\n- The recalculation on idle-daily may be uneffective, for all those users who don't hit idle. Mobile users for example, but other categories may exist.\n- It's cheap, so would be suitable for all platforms, included Mobile.\n- Expiring old visits cannot \"regress\" frecency.\n\nThere are also downsides:\n- it needs careful testing, to check how well it matches compared to the old one.\n- while the old frecency also adapts to pages removals (by requesting a recalculation), this won't. Bumping down an unwanted match by the right amount may be harder.\n- while the old frecency adapts to bonus changes (for example if a page is unstarred, its frecency gets bumped down) this won't. More generically, the bonuses (bookmarked, typed, ...) handling has to be figured out yet.\n- while the old frecency can be rebuilt at any time, starting from the data in the database, this one can't be rebuilt, since it may be based on past and no more existing visits. A guessed one could be rebuilt with available data, but it may not be exactly the same.", "time": "2011-11-22T23:54:52Z", "id": 5867052, "bug_id": 704025, "count": 2, "text": "The advantages of this approach would be many:\n- The current painful point in visits addition is frecency recalculation, so this may speed up visits addition\n- The recalculation on idle-daily may be uneffective, for all those users who don't hit idle. Mobile users for example, but other categories may exist.\n- It's cheap, so would be suitable for all platforms, included Mobile.\n- Expiring old visits cannot \"regress\" frecency.\n\nThere are also downsides:\n- it needs careful testing, to check how well it matches compared to the old one.\n- while the old frecency also adapts to pages removals (by requesting a recalculation), this won't. Bumping down an unwanted match by the right amount may be harder.\n- while the old frecency adapts to bonus changes (for example if a page is unstarred, its frecency gets bumped down) this won't. More generically, the bonuses (bookmarked, typed, ...) handling has to be figured out yet.\n- while the old frecency can be rebuilt at any time, starting from the data in the database, this one can't be rebuilt, since it may be based on past and no more existing visits. A guessed one could be rebuilt with available data, but it may not be exactly the same.", "author": "mak@mozilla.com"}, {"time": "2011-12-01T21:05:39Z", "raw_text": "Marking as [Snappy:P2] because I don't think this is a huge source of pauses.", "attachment_id": null, "tags": [], "creator": "continuation@gmail.com", "text": "Marking as [Snappy:P2] because I don't think this is a huge source of pauses.", "count": 3, "author": "continuation@gmail.com", "id": 5886322, "bug_id": 704025, "is_private": false, "creation_time": "2011-12-01T21:05:39Z"}, {"is_private": false, "creation_time": "2019-02-02T00:16:17Z", "id": 13899371, "bug_id": 704025, "count": 4, "text": "While evaluating whether to do this in https://github.com/mozilla/application-services, I took the time to elaborate several cases that I found vague or confusing in https://wiki.mozilla.org/User:Jesse/NewFrecency.\n\nhttps://github.com/mozilla/application-services/issues/610#issuecomment-459908788\n\n> - while the old frecency also adapts to pages removals (by requesting a recalculation), this won't. Bumping down an unwanted match by the right amount may be harder.\n\nThis is addressed explicitly in that comment, since it's a big concern for sync. Inserting visits that took place in the past too.\n\n> - while the old frecency adapts to bonus changes (for example if a page is unstarred, its frecency gets bumped down) this won't. More generically, the bonuses (bookmarked, typed, ...) handling has to be figured out yet.\n\nand\n\n> - while the old frecency can be rebuilt at any time, starting from the data in the database, this one can't be rebuilt, since it may be based on past and no more existing visits. A guessed one could be rebuilt with available data, but it may not be exactly the same.\n\nNot listed explicitly, but at all times (with the exception of expiration, which can be handled in the case for bonus changes, but not for the 'rebuild everything' case) the frec_date column of each places entry should be `freq_score_to_freq_date(sum(score_modifier_for_visit(visit.visit_type, visit.visit_date, ...)))` (those functions are defined in that github link).\n\nThen, for the 'rebuild' case it's just a matter of executing that in a query for all rows. For the bonus case change, this just means you need to subtract the values for the visits that have their bonus changed, and add the new values.\n\nEdit:\n\n> but it may not be exactly the same.\n\nIt should be the same if you ignore\n\n- expiration\n- floating point roundoff\n- weird timestamp shenanigans.\n\n(Note that I'm not arguing this should be a higher priority or anything, just wanted to clarify those points now that I've gone through the trouble of figuring some of these details out)", "author": "chiovolonit@gmail.com", "creator": "chiovolonit@gmail.com", "tags": [], "raw_text": "While evaluating whether to do this in https://github.com/mozilla/application-services, I took the time to elaborate several cases that I found vague or confusing in https://wiki.mozilla.org/User:Jesse/NewFrecency.\n\nhttps://github.com/mozilla/application-services/issues/610#issuecomment-459908788\n\n> - while the old frecency also adapts to pages removals (by requesting a recalculation), this won't. Bumping down an unwanted match by the right amount may be harder.\n\nThis is addressed explicitly in that comment, since it's a big concern for sync. Inserting visits that took place in the past too.\n\n> - while the old frecency adapts to bonus changes (for example if a page is unstarred, its frecency gets bumped down) this won't. More generically, the bonuses (bookmarked, typed, ...) handling has to be figured out yet.\n\nand\n\n> - while the old frecency can be rebuilt at any time, starting from the data in the database, this one can't be rebuilt, since it may be based on past and no more existing visits. A guessed one could be rebuilt with available data, but it may not be exactly the same.\n\nNot listed explicitly, but at all times (with the exception of expiration, which can be handled in the case for bonus changes, but not for the 'rebuild everything' case) the frec_date column of each places entry should be `freq_score_to_freq_date(sum(score_modifier_for_visit(visit.visit_type, visit.visit_date, ...)))` (those functions are defined in that github link).\n\nThen, for the 'rebuild' case it's just a matter of executing that in a query for all rows. For the bonus case change, this just means you need to subtract the values for the visits that have their bonus changed, and add the new values.\n\nEdit:\n\n> but it may not be exactly the same.\n\nIt should be the same if you ignore\n\n- expiration\n- floating point roundoff\n- weird timestamp shenanigans.\n\n(Note that I'm not arguing this should be a higher priority or anything, just wanted to clarify those points now that I've gone through the trouble of figuring some of these details out)", "attachment_id": null, "time": "2019-02-02T00:16:17Z"}]}}}