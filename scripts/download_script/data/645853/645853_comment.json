{"comments": {}, "bugs": {"645853": {"comments": [{"id": 5375813, "is_private": false, "count": 0, "author": "fherrera@onirica.com", "time": "2011-03-28T21:56:56Z", "bug_id": 645853, "text": "If you have a nsAccessibleText element with n characters, if you query getCharacterExtents for n+1, if returns (0,0,0,0). \n\nHowever n+1 should be a valid offset. Imagine you have the text \"hello\" and you place the caret after the o:\n\nhello|\n012345\n\ncaretOffset for that accessible would be 5.\n\nthis is breaking orca synthesizing left mouse clicks over buttons, as it does:\nextents = text.getCharacterExtents(text.caretOffset,\n                                       pyatspi.DESKTOP_COORDS)\n\nand we are placing caretOffset after last character for focused buttons", "attachment_id": null, "creation_time": "2011-03-28T21:56:56Z", "tags": [], "creator": "fherrera@onirica.com", "raw_text": "If you have a nsAccessibleText element with n characters, if you query getCharacterExtents for n+1, if returns (0,0,0,0). \n\nHowever n+1 should be a valid offset. Imagine you have the text \"hello\" and you place the caret after the o:\n\nhello|\n012345\n\ncaretOffset for that accessible would be 5.\n\nthis is breaking orca synthesizing left mouse clicks over buttons, as it does:\nextents = text.getCharacterExtents(text.caretOffset,\n                                       pyatspi.DESKTOP_COORDS)\n\nand we are placing caretOffset after last character for focused buttons"}, {"id": 5376328, "is_private": false, "count": 1, "author": "fherrera@onirica.com", "time": "2011-03-29T00:45:24Z", "bug_id": 645853, "text": "Created attachment 522540\nOne possible solution\n\nThis could be a solution. However it's not clear that we return a box where the last character is when requested about the end.\n\nAnother solution would be to handle this case to return a box with zero area placed at the end. If for example last character extents are (100, 25, 105, 30), we could return (105,30,105,30) when asked about anything after the last character. (this option looks more correct to me, but maybe that could break some AT applications).", "attachment_id": 522540, "creation_time": "2011-03-29T00:45:24Z", "tags": [], "creator": "fherrera@onirica.com", "raw_text": "This could be a solution. However it's not clear that we return a box where the last character is when requested about the end.\n\nAnother solution would be to handle this case to return a box with zero area placed at the end. If for example last character extents are (100, 25, 105, 30), we could return (105,30,105,30) when asked about anything after the last character. (this option looks more correct to me, but maybe that could break some AT applications)."}, {"attachment_id": null, "creation_time": "2011-03-29T03:22:04Z", "tags": [], "creator": "surkov.alexander@gmail.com", "raw_text": "(In reply to comment #0)\n\nI bet you meant n (not n+1) should be a valid offset. For everything that is greater than n we should throw bad argument (it should be true for IA2, what does ATK says?). For n case it should be correct to return a box with zero width and non zero height (line height).", "bug_id": 645853, "text": "(In reply to comment #0)\n\nI bet you meant n (not n+1) should be a valid offset. For everything that is greater than n we should throw bad argument (it should be true for IA2, what does ATK says?). For n case it should be correct to return a box with zero width and non zero height (line height).", "is_private": false, "count": 2, "author": "surkov.alexander@gmail.com", "time": "2011-03-29T03:22:04Z", "id": 5376577}, {"id": 5377015, "is_private": false, "time": "2011-03-29T10:41:07Z", "author": "fherrera@onirica.com", "count": 3, "bug_id": 645853, "text": "(In reply to comment #2) \n> I bet you meant n (not n+1)\n\nYeah.\n\n> should be a valid offset. For everything that is\n> greater than n we should throw bad argument (it should be true for IA2, what\n> does ATK says?)\n\nATK is way more tolerant than us, and returns a \"line\" for any offset equal or bigger than charCount:\n\ngedit with:\n\nhello\n01234\n\nIn [2]: t = acc.queryText()\nIn [3]: t.characterCount\nOut[3]: 5\nIn [4]: t.getCharacterExtents(4, DESKTOP_COORDS)\nOut[4]: (43, 154, 9, 19)\nIn [5]: t.getCharacterExtents(5, DESKTOP_COORDS)\nOut[5]: (52, 154, 0, 19)\nIn [6]: t.getCharacterExtents(6, DESKTOP_COORDS)\nOut[6]: (52, 154, 0, 19)\nIn [7]: t.getCharacterExtents(7, DESKTOP_COORDS)\nOut[7]: (52, 154, 0, 19)\n\n\n> For n case it should be correct to return a box with zero\n> width and non zero height (line height).\n\nYeah, like gtk. I'll check it that couses problems to synth a click there (as we are returning caretOffset = charCount for buttons, and orca tries to click on the current character)", "creation_time": "2011-03-29T10:41:07Z", "tags": [], "attachment_id": null, "raw_text": "(In reply to comment #2) \n> I bet you meant n (not n+1)\n\nYeah.\n\n> should be a valid offset. For everything that is\n> greater than n we should throw bad argument (it should be true for IA2, what\n> does ATK says?)\n\nATK is way more tolerant than us, and returns a \"line\" for any offset equal or bigger than charCount:\n\ngedit with:\n\nhello\n01234\n\nIn [2]: t = acc.queryText()\nIn [3]: t.characterCount\nOut[3]: 5\nIn [4]: t.getCharacterExtents(4, DESKTOP_COORDS)\nOut[4]: (43, 154, 9, 19)\nIn [5]: t.getCharacterExtents(5, DESKTOP_COORDS)\nOut[5]: (52, 154, 0, 19)\nIn [6]: t.getCharacterExtents(6, DESKTOP_COORDS)\nOut[6]: (52, 154, 0, 19)\nIn [7]: t.getCharacterExtents(7, DESKTOP_COORDS)\nOut[7]: (52, 154, 0, 19)\n\n\n> For n case it should be correct to return a box with zero\n> width and non zero height (line height).\n\nYeah, like gtk. I'll check it that couses problems to synth a click there (as we are returning caretOffset = charCount for buttons, and orca tries to click on the current character)", "creator": "fherrera@onirica.com"}, {"creation_time": "2011-03-29T11:26:41Z", "tags": [], "attachment_id": 522640, "bug_id": 645853, "is_private": false, "author": "fherrera@onirica.com", "id": 5377056, "raw_text": "", "creator": "fherrera@onirica.com", "text": "Created attachment 522640\npatch returning box starting on the end of last char with 0 width and same height than last char", "time": "2011-03-29T11:26:41Z", "count": 4}, {"text": "We should move down this check to GetPosAndText --> GetBoundsForString", "creator": "fherrera@onirica.com", "raw_text": "We should move down this check to GetPosAndText --> GetBoundsForString", "count": 5, "time": "2011-04-06T17:47:18Z", "bug_id": 645853, "attachment_id": null, "creation_time": "2011-04-06T17:47:18Z", "tags": [], "id": 5392578, "author": "fherrera@onirica.com", "is_private": false}, {"is_private": false, "count": 6, "time": "2011-05-30T05:18:03Z", "author": "surkov.alexander@gmail.com", "id": 5500967, "attachment_id": 522640, "tags": [], "creation_time": "2011-05-30T05:18:03Z", "creator": "surkov.alexander@gmail.com", "raw_text": "cancelling review since Fernando works on different approach", "bug_id": 645853, "text": "Comment on attachment 522640\npatch returning box starting on the end of last char with 0 width and same height than last char\n\ncancelling review since Fernando works on different approach"}, {"id": 5586057, "is_private": false, "author": "surkov.alexander@gmail.com", "time": "2011-07-12T06:13:26Z", "count": 7, "bug_id": 645853, "text": "Fernando, friendly ping.", "tags": [], "creation_time": "2011-07-12T06:13:26Z", "attachment_id": null, "raw_text": "Fernando, friendly ping.", "creator": "surkov.alexander@gmail.com"}]}}}