{"bugs": {"693509": {"comments": [{"creation_time": "2011-10-11T01:23:29Z", "is_private": false, "creator": "surkov.alexander@gmail.com", "tags": [], "attachment_id": null, "bug_id": 693509, "id": 5773396, "author": "surkov.alexander@gmail.com", "text": "spun off bug 559766:\n\n(In reply to James Teh [:Jamie] from comment #20)\n> (In reply to alexander surkov from comment #19)\n> > You don't mean twice down arrow before NVDA says something, right? i.e.\n> > first down arrow open popup, second down arrow selects first item?\n> Ah. So that's what's happening. If this is the case, the autocomplete list\n> should probably gain focus on the first press of down/up arrow to make it\n> clear that keyboard focus has moved there. This would make the experience\n> similar to context menus.\n\ncontext menus don't take a focus but they are subject of menupopup_start/end events which are supposedly processed by you. That's the difference I can see between autocomplete list and context menu. On the another hand autocompletes are closer to comboboxes which aren't subject of menupopup_start/end events. Maybe they should be.", "count": 0, "time": "2011-10-11T01:23:29Z", "raw_text": "spun off bug 559766:\n\n(In reply to James Teh [:Jamie] from comment #20)\n> (In reply to alexander surkov from comment #19)\n> > You don't mean twice down arrow before NVDA says something, right? i.e.\n> > first down arrow open popup, second down arrow selects first item?\n> Ah. So that's what's happening. If this is the case, the autocomplete list\n> should probably gain focus on the first press of down/up arrow to make it\n> clear that keyboard focus has moved there. This would make the experience\n> similar to context menus.\n\ncontext menus don't take a focus but they are subject of menupopup_start/end events which are supposedly processed by you. That's the difference I can see between autocomplete list and context menu. On the another hand autocompletes are closer to comboboxes which aren't subject of menupopup_start/end events. Maybe they should be."}, {"creation_time": "2011-10-11T01:30:06Z", "is_private": false, "id": 5773411, "bug_id": 693509, "author": "jteh@mozilla.com", "text": "(In reply to alexander surkov from comment #0)\n> context menus don't take a focus but they are subject of menupopup_start/end\n> events which are supposedly processed by you.\nWe treat menupopupStart/End events as focus events. However, this may not be true for all ATs.\n\n> That's the difference I can\n> see between autocomplete list and context menu. On the another hand\n> autocompletes are closer to comboboxes which aren't subject of\n> menupopup_start/end events. Maybe they should be.\nThe difference between an autocomplete list and a combo box is that the combo box has focus before it is expanded. Once it is expanded, the first item immediately gains focus. In the case of autocomplete lists, nothing ever gets focus until the first item is selected, so the user has no idea that they have entered an autocomplete list.", "count": 1, "creator": "jteh@mozilla.com", "tags": [], "attachment_id": null, "raw_text": "(In reply to alexander surkov from comment #0)\n> context menus don't take a focus but they are subject of menupopup_start/end\n> events which are supposedly processed by you.\nWe treat menupopupStart/End events as focus events. However, this may not be true for all ATs.\n\n> That's the difference I can\n> see between autocomplete list and context menu. On the another hand\n> autocompletes are closer to comboboxes which aren't subject of\n> menupopup_start/end events. Maybe they should be.\nThe difference between an autocomplete list and a combo box is that the combo box has focus before it is expanded. Once it is expanded, the first item immediately gains focus. In the case of autocomplete lists, nothing ever gets focus until the first item is selected, so the user has no idea that they have entered an autocomplete list.", "time": "2011-10-11T01:30:06Z"}, {"raw_text": "autocomplete popup is a list so there's no popup accessible which is usually target of menupopup_start/end events and that makes autocompletes close to comboboxes. The problem should be valid for editable comboboxes which are different from autocompletes by role (not taking account slightly different behavior).\n\nIt appears we have two options:\n1) fire menupopup_start/end for editable comboboxes and autocompletes\n2) fire expanded state change events when autocomplete popup gets shown/hidden.\n\nJamie, you're up for 1)?", "time": "2011-10-11T01:47:27Z", "count": 2, "text": "autocomplete popup is a list so there's no popup accessible which is usually target of menupopup_start/end events and that makes autocompletes close to comboboxes. The problem should be valid for editable comboboxes which are different from autocompletes by role (not taking account slightly different behavior).\n\nIt appears we have two options:\n1) fire menupopup_start/end for editable comboboxes and autocompletes\n2) fire expanded state change events when autocomplete popup gets shown/hidden.\n\nJamie, you're up for 1)?", "author": "surkov.alexander@gmail.com", "bug_id": 693509, "id": 5773432, "attachment_id": null, "tags": [], "creator": "surkov.alexander@gmail.com", "creation_time": "2011-10-11T01:47:27Z", "is_private": false}, {"time": "2011-10-11T02:03:24Z", "raw_text": "(In reply to alexander surkov from comment #2)\n> autocomplete popup is a list so there's no popup accessible which is usually\n> target of menupopup_start/end events and that makes autocompletes close to\n> comboboxes.\nNot quite. With a combo box, the first item is selected automatically when you expand it, so there's never any point where the user doesn't know what has happened. With autocompletes, the user is left wondering what has happened on the first press.\n\n> 1) fire menupopup_start/end for editable comboboxes and autocompletes\nThis doesn't really make sense. As I noted, for us, a menuPopupStart is the same as focus, so it would achieve nothing.\n> 2) fire expanded state change events when autocomplete popup gets\n> shown/hidden.\nI thought of this one too and was going to suggest it. It still isn't quite right to me, as the user doesn't know they're now in the list. However, at least the user would be notified that the autocomplete has expanded, so they'll come to understand that the next arrow key will move to a list item. Out of these two options, I'll take option 2.", "bug_id": 693509, "id": 5773451, "text": "(In reply to alexander surkov from comment #2)\n> autocomplete popup is a list so there's no popup accessible which is usually\n> target of menupopup_start/end events and that makes autocompletes close to\n> comboboxes.\nNot quite. With a combo box, the first item is selected automatically when you expand it, so there's never any point where the user doesn't know what has happened. With autocompletes, the user is left wondering what has happened on the first press.\n\n> 1) fire menupopup_start/end for editable comboboxes and autocompletes\nThis doesn't really make sense. As I noted, for us, a menuPopupStart is the same as focus, so it would achieve nothing.\n> 2) fire expanded state change events when autocomplete popup gets\n> shown/hidden.\nI thought of this one too and was going to suggest it. It still isn't quite right to me, as the user doesn't know they're now in the list. However, at least the user would be notified that the autocomplete has expanded, so they'll come to understand that the next arrow key will move to a list item. Out of these two options, I'll take option 2.", "count": 3, "author": "jteh@mozilla.com", "tags": [], "attachment_id": null, "creation_time": "2011-10-11T02:03:24Z", "is_private": false, "creator": "jteh@mozilla.com"}, {"raw_text": "(In reply to James Teh [:Jamie] from comment #3)\n> (In reply to alexander surkov from comment #2)\n> > autocomplete popup is a list so there's no popup accessible which is usually\n> > target of menupopup_start/end events and that makes autocompletes close to\n> > comboboxes.\n> Not quite. With a combo box, the first item is selected automatically when\n> you expand it, so there's never any point where the user doesn't know what\n> has happened. With autocompletes, the user is left wondering what has\n> happened on the first press.\n\nexcept editable comboboxes\n\n> > 1) fire menupopup_start/end for editable comboboxes and autocompletes\n> This doesn't really make sense. As I noted, for us, a menuPopupStart is the\n> same as focus, so it would achieve nothing.\n\nI didn't understand why it doesn't make sense\n\n> > 2) fire expanded state change events when autocomplete popup gets\n> > shown/hidden.\n> I thought of this one too and was going to suggest it. It still isn't quite\n> right to me, as the user doesn't know they're now in the list. However, at\n> least the user would be notified that the autocomplete has expanded, so\n> they'll come to understand that the next arrow key will move to a list item.\n> Out of these two options, I'll take option 2.\n\nvisually focus stays on autocomplete textfield always, so that if AT users are notified about autocomplete list gets open/hidden then it sounds what we want. Treating menupopup_start/end as a focus makes you inconsistent with focused state and focus methods which might be not desired.\n\nHowever the 2nd approach has an implementation issue because autocomplete and autocomplete list may live in different documents and different processes (case of e10s enabled build), so we should be ready for crossprocess communications to fire expanded state change. That's something I would try to avoid.", "time": "2011-10-11T02:19:23Z", "author": "surkov.alexander@gmail.com", "text": "(In reply to James Teh [:Jamie] from comment #3)\n> (In reply to alexander surkov from comment #2)\n> > autocomplete popup is a list so there's no popup accessible which is usually\n> > target of menupopup_start/end events and that makes autocompletes close to\n> > comboboxes.\n> Not quite. With a combo box, the first item is selected automatically when\n> you expand it, so there's never any point where the user doesn't know what\n> has happened. With autocompletes, the user is left wondering what has\n> happened on the first press.\n\nexcept editable comboboxes\n\n> > 1) fire menupopup_start/end for editable comboboxes and autocompletes\n> This doesn't really make sense. As I noted, for us, a menuPopupStart is the\n> same as focus, so it would achieve nothing.\n\nI didn't understand why it doesn't make sense\n\n> > 2) fire expanded state change events when autocomplete popup gets\n> > shown/hidden.\n> I thought of this one too and was going to suggest it. It still isn't quite\n> right to me, as the user doesn't know they're now in the list. However, at\n> least the user would be notified that the autocomplete has expanded, so\n> they'll come to understand that the next arrow key will move to a list item.\n> Out of these two options, I'll take option 2.\n\nvisually focus stays on autocomplete textfield always, so that if AT users are notified about autocomplete list gets open/hidden then it sounds what we want. Treating menupopup_start/end as a focus makes you inconsistent with focused state and focus methods which might be not desired.\n\nHowever the 2nd approach has an implementation issue because autocomplete and autocomplete list may live in different documents and different processes (case of e10s enabled build), so we should be ready for crossprocess communications to fire expanded state change. That's something I would try to avoid.", "count": 4, "bug_id": 693509, "id": 5773473, "attachment_id": null, "tags": [], "creator": "surkov.alexander@gmail.com", "is_private": false, "creation_time": "2011-10-11T02:19:23Z"}, {"text": "We discussed this on IRC. I'm commenting here to record the findings. :)\n\n(In reply to alexander surkov from comment #4)\n> > > 1) fire menupopup_start/end for editable comboboxes and autocompletes\n> > This doesn't really make sense. As I noted, for us, a menuPopupStart is the\n> > same as focus, so it would achieve nothing.\n> I didn't understand why it doesn't make sense\nSorry. I thought you meant firing menuPopupStart on the editable text field, not the autocomplete list. Firing it on the list makes more sense. However, I didn't realise that the popup actually appears while the user is typing. Now that I know this, firing menuPopupStart on the list would be a very bad idea because it would throw the screen reader focus out of the editable text field, which is bad if the user wants to continue typing. In short, this option is a definite no.\n\n> > > 2) fire expanded state change events when autocomplete popup gets\n> > > shown/hidden.\n> However the 2nd approach has an implementation issue because autocomplete\n> and autocomplete list may live in different documents and different\n> processes (case of e10s enabled build), so we should be ready for\n> crossprocess communications to fire expanded state change. That's something\n> I would try to avoid.\nThis option is the best option we can come up with and seems to satisfy the requirements. The user would be notified that the autocomplete has expanded, but could continue typing otherwise undisturbed if not interested. However, given the difficulty of implementing this, in my opinion, it is extremely low priority. The current situation is usable once you understand how it works and I think there are far more important issues to solve right now.", "count": 5, "author": "jteh@mozilla.com", "id": 5773503, "bug_id": 693509, "time": "2011-10-11T02:40:46Z", "raw_text": "We discussed this on IRC. I'm commenting here to record the findings. :)\n\n(In reply to alexander surkov from comment #4)\n> > > 1) fire menupopup_start/end for editable comboboxes and autocompletes\n> > This doesn't really make sense. As I noted, for us, a menuPopupStart is the\n> > same as focus, so it would achieve nothing.\n> I didn't understand why it doesn't make sense\nSorry. I thought you meant firing menuPopupStart on the editable text field, not the autocomplete list. Firing it on the list makes more sense. However, I didn't realise that the popup actually appears while the user is typing. Now that I know this, firing menuPopupStart on the list would be a very bad idea because it would throw the screen reader focus out of the editable text field, which is bad if the user wants to continue typing. In short, this option is a definite no.\n\n> > > 2) fire expanded state change events when autocomplete popup gets\n> > > shown/hidden.\n> However the 2nd approach has an implementation issue because autocomplete\n> and autocomplete list may live in different documents and different\n> processes (case of e10s enabled build), so we should be ready for\n> crossprocess communications to fire expanded state change. That's something\n> I would try to avoid.\nThis option is the best option we can come up with and seems to satisfy the requirements. The user would be notified that the autocomplete has expanded, but could continue typing otherwise undisturbed if not interested. However, given the difficulty of implementing this, in my opinion, it is extremely low priority. The current situation is usable once you understand how it works and I think there are far more important issues to solve right now.", "creator": "jteh@mozilla.com", "creation_time": "2011-10-11T02:40:46Z", "is_private": false, "attachment_id": null, "tags": []}, {"raw_text": "marking as blocking bug 688480 which should be a fix for this bug.", "time": "2011-10-11T02:55:22Z", "id": 5773509, "bug_id": 693509, "author": "surkov.alexander@gmail.com", "count": 6, "text": "marking as blocking bug 688480 which should be a fix for this bug.", "tags": [], "attachment_id": null, "is_private": false, "creation_time": "2011-10-11T02:55:22Z", "creator": "surkov.alexander@gmail.com"}]}}, "comments": {}}