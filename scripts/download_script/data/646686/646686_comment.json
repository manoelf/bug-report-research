{"comments": {}, "bugs": {"646686": {"comments": [{"count": 0, "text": "Bug 646628 describes a situation in which user activity can put Sync into a non-working state, because the Authorization header set by Sync is apparently overwritten by this code:\n\n  http://mxr.mozilla.org/mozilla-central/source/netwerk/protocol/http/nsHttpChannelAuthProvider.cpp#221\n\nSetting the LOAD_ANONYMOUS load flag avoids the problem, but is a sledgehammer for this issue. It would be much nicer if there was a smaller hammer.\n\nAttached momentarily will be a trivial, untested patch which demonstrates the idea.\n\nThoughts, necko people?", "time": "2011-03-31T00:10:39Z", "author": "bugzilla@twinql.com", "id": 5381933, "creation_time": "2011-03-31T00:10:39Z", "bug_id": 646686, "raw_text": "Bug 646628 describes a situation in which user activity can put Sync into a non-working state, because the Authorization header set by Sync is apparently overwritten by this code:\n\n  http://mxr.mozilla.org/mozilla-central/source/netwerk/protocol/http/nsHttpChannelAuthProvider.cpp#221\n\nSetting the LOAD_ANONYMOUS load flag avoids the problem, but is a sledgehammer for this issue. It would be much nicer if there was a smaller hammer.\n\nAttached momentarily will be a trivial, untested patch which demonstrates the idea.\n\nThoughts, necko people?", "tags": [], "creator": "bugzilla@twinql.com", "is_private": false, "attachment_id": null}, {"id": 5381943, "time": "2011-03-31T00:12:51Z", "is_private": false, "tags": [], "bug_id": 646686, "creation_time": "2011-03-31T00:12:51Z", "raw_text": "How about changing the code not to set an Authorization header if one is present already, unless we tried it and it failed?", "author": "cbiesinger@gmail.com", "count": 1, "text": "How about changing the code not to set an Authorization header if one is present already, unless we tried it and it failed?", "attachment_id": null, "creator": "cbiesinger@gmail.com"}, {"creator": "bugzilla@twinql.com", "attachment_id": 523171, "text": "Created attachment 523171\nSketch implementation.", "count": 2, "author": "bugzilla@twinql.com", "tags": [], "bug_id": 646686, "creation_time": "2011-03-31T00:16:39Z", "raw_text": "", "is_private": false, "id": 5381956, "time": "2011-03-31T00:16:39Z"}, {"count": 3, "text": "(In reply to comment #1)\n> How about changing the code not to set an Authorization header if one is\n> present already, unless we tried it and it failed?\n\nThat's a reasonable alternative (though I don't think there's any advantage in, e.g., attempting to use the built-in credentials if the ones we supplied didn't work -- we'd rather just get the 401).\n\nThe main thing is that we have some way to not have our headers overwritten! :)", "id": 5381961, "author": "bugzilla@twinql.com", "time": "2011-03-31T00:19:12Z", "creator": "bugzilla@twinql.com", "tags": [], "raw_text": "(In reply to comment #1)\n> How about changing the code not to set an Authorization header if one is\n> present already, unless we tried it and it failed?\n\nThat's a reasonable alternative (though I don't think there's any advantage in, e.g., attempting to use the built-in credentials if the ones we supplied didn't work -- we'd rather just get the 401).\n\nThe main thing is that we have some way to not have our headers overwritten! :)", "bug_id": 646686, "creation_time": "2011-03-31T00:19:12Z", "is_private": false, "attachment_id": null}, {"tags": [], "raw_text": "Hasn't this been fixed with one of bug 654348 or bug 761479 or bug 776171?", "bug_id": 646686, "creation_time": "2013-02-26T18:18:47Z", "is_private": false, "id": 7144876, "time": "2013-02-26T18:18:47Z", "creator": "honzab.moz@firemni.cz", "attachment_id": null, "text": "Hasn't this been fixed with one of bug 654348 or bug 761479 or bug 776171?", "count": 4, "author": "honzab.moz@firemni.cz"}, {"count": 5, "text": "Without thoroughly studying those bugs, I don't think so.\n\n* This is not calling through XHR.\n* This bug is about the smallest possible hammer: LOAD_ANONYMOUS/mozAnon are very big hammers. Several people think that offering LOAD_NOCOOKIES, LOAD_NOAUTH, etc. would provide more flexibility.\n\nDiscussion about this is occurring on dev-platform:\n\nhttps://groups.google.com/forum/?fromgroups=#!topic/mozilla.dev.platform/pxBCKzxBMDA", "author": "bugzilla@twinql.com", "creator": "bugzilla@twinql.com", "attachment_id": null, "time": "2013-02-26T18:40:03Z", "id": 7144989, "raw_text": "Without thoroughly studying those bugs, I don't think so.\n\n* This is not calling through XHR.\n* This bug is about the smallest possible hammer: LOAD_ANONYMOUS/mozAnon are very big hammers. Several people think that offering LOAD_NOCOOKIES, LOAD_NOAUTH, etc. would provide more flexibility.\n\nDiscussion about this is occurring on dev-platform:\n\nhttps://groups.google.com/forum/?fromgroups=#!topic/mozilla.dev.platform/pxBCKzxBMDA", "creation_time": "2013-02-26T18:40:03Z", "bug_id": 646686, "tags": [], "is_private": false}, {"attachment_id": 523171, "is_private": false, "creator": "jduell.mcbugs@gmail.com", "tags": [], "raw_text": "Review of attachment 523171:\n-----------------------------------------------------------------\n\n::: netwerk/base/public/nsIRequest.idl\n@@ +223,5 @@\n> +    /**\n> +     * When set, this flag indicates that built-in HTTP Basic Auth should not\n> +     * be attempted for this request.\n> +     */\n> +    const unsigned long LOAD_BYPASS_BASIC_AUTH = 1 << 15;\n\n<<15 already taken by LOAD_FRESH_CONNECTION.\n\nAs discussed on IRC with bz, we only currently have one bit free (1<< 24). So it's time to suck it up and turn the definition of nsLoadFlags (in nsIRequest.idl) into 'unsigned long long'. That'll probably mean a lot of tedious changing of code in C++ that uses the API just to change the type.\nI've filed bug 846629 specifically for switching the loadFlags to 64 bit. Then we can add the LOAD_BYPASS_BASIC_AUTH here\n\n(Are you sure you only want to disable basic auth, and not all kinds of auth? NTLM, etc?)", "creation_time": "2013-03-01T04:55:27Z", "bug_id": 646686, "id": 7156972, "author": "jduell.mcbugs@gmail.com", "time": "2013-03-01T04:55:27Z", "count": 6, "text": "Comment on attachment 523171\nSketch implementation.\n\nReview of attachment 523171:\n-----------------------------------------------------------------\n\n::: netwerk/base/public/nsIRequest.idl\n@@ +223,5 @@\n> +    /**\n> +     * When set, this flag indicates that built-in HTTP Basic Auth should not\n> +     * be attempted for this request.\n> +     */\n> +    const unsigned long LOAD_BYPASS_BASIC_AUTH = 1 << 15;\n\n<<15 already taken by LOAD_FRESH_CONNECTION.\n\nAs discussed on IRC with bz, we only currently have one bit free (1<< 24). So it's time to suck it up and turn the definition of nsLoadFlags (in nsIRequest.idl) into 'unsigned long long'. That'll probably mean a lot of tedious changing of code in C++ that uses the API just to change the type.\nI've filed bug 846629 specifically for switching the loadFlags to 64 bit. Then we can add the LOAD_BYPASS_BASIC_AUTH here\n\n(Are you sure you only want to disable basic auth, and not all kinds of auth? NTLM, etc?)"}, {"time": "2013-03-01T05:14:24Z", "id": 7156989, "is_private": false, "bug_id": 646686, "creation_time": "2013-03-01T05:14:24Z", "raw_text": "Review of attachment 523171:\n-----------------------------------------------------------------\n\nHonza (or maybe jdm) is the right person to ask about whether the short-circuit in nsHttpChannelAuthProvider is the right thing to do.", "tags": [], "author": "jduell.mcbugs@gmail.com", "count": 7, "text": "Comment on attachment 523171\nSketch implementation.\n\nReview of attachment 523171:\n-----------------------------------------------------------------\n\nHonza (or maybe jdm) is the right person to ask about whether the short-circuit in nsHttpChannelAuthProvider is the right thing to do.", "attachment_id": 523171, "creator": "jduell.mcbugs@gmail.com"}, {"id": 7159396, "time": "2013-03-01T20:41:18Z", "is_private": false, "tags": [], "bug_id": 646686, "creation_time": "2013-03-01T20:41:18Z", "raw_text": "With what I know at the moment, I'm personally pretty against this bug.  Please see bug 646628 comment 9 first.", "author": "honzab.moz@firemni.cz", "text": "With what I know at the moment, I'm personally pretty against this bug.  Please see bug 646628 comment 9 first.", "count": 8, "attachment_id": null, "creator": "honzab.moz@firemni.cz"}, {"creator": "bugzilla@twinql.com", "attachment_id": null, "text": "(In reply to Honza Bambas (:mayhemer) from comment #8)\n> With what I know at the moment, I'm personally pretty against this bug. \n> Please see bug 646628 comment 9 first.\n\nSee my response there; in general, my assertion is that tightly coupling Firefox's auth system with its HTTP system is opposed to the idea of service client libraries; there needs to be a way for Necko users to prevent other layers of the stack from mucking around with requests.\n\nMaybe the solution is to allow nsIHttp* users to easily replace the nsHttpChannelAuthProvider for their channels? Is that possible?", "count": 9, "author": "bugzilla@twinql.com", "raw_text": "(In reply to Honza Bambas (:mayhemer) from comment #8)\n> With what I know at the moment, I'm personally pretty against this bug. \n> Please see bug 646628 comment 9 first.\n\nSee my response there; in general, my assertion is that tightly coupling Firefox's auth system with its HTTP system is opposed to the idea of service client libraries; there needs to be a way for Necko users to prevent other layers of the stack from mucking around with requests.\n\nMaybe the solution is to allow nsIHttp* users to easily replace the nsHttpChannelAuthProvider for their channels? Is that possible?", "bug_id": 646686, "creation_time": "2013-03-01T22:49:23Z", "tags": [], "is_private": false, "time": "2013-03-01T22:49:23Z", "id": 7159901}, {"tags": [], "raw_text": "Review of attachment 523171:\n-----------------------------------------------------------------\n\n::: netwerk/base/public/nsIRequest.idl\n@@ +223,5 @@\n> +    /**\n> +     * When set, this flag indicates that built-in HTTP Basic Auth should not\n> +     * be attempted for this request.\n> +     */\n> +    const unsigned long LOAD_BYPASS_BASIC_AUTH = 1 << 15;\n\nFirst, call this BYPASS_*BASIC*_AUTH is bad.  There are several other schemes for http auth.\n\nThis has to be named BYPASS_WWW_AUTHENTICATION.  We still want to auth with proxies, but the ANON flag already handles this.\n\n::: netwerk/protocol/http/nsHttpChannelAuthProvider.cpp\n@@ +215,5 @@\n>                                 mProxyIdent);\n>  \n> +    if (loadFlags & nsIRequest::LOAD_BYPASS_BASIC_AUTH) {\n> +        return NS_OK;\n> +    }\n\nWhen the server returns 401 for your provided credentials, we will try another round with cached credentials.\n\nProbably not what you and we want.\n\nMy proposal is to:\n- make LOAD_ANONYMOUS flag consist of the finer grained flags, where disable LOAD_WWW_AUTHENTICATION is one of them\n- replace LOAD_ANONYMOUS in this file with LOAD_WWW_AUTHENTICATION flag checks\n\n\nBTW, what cs is this patch based on?  On this place in the current code has to be check for the LOAD_ANONYMOUS flag..  The parent changes seems to be from Wed Mar 30 13:53:35 2011 !", "bug_id": 646686, "creation_time": "2013-03-11T19:09:42Z", "is_private": false, "id": 7190115, "time": "2013-03-11T19:09:42Z", "creator": "honzab.moz@firemni.cz", "attachment_id": 523171, "count": 10, "text": "Comment on attachment 523171\nSketch implementation.\n\nReview of attachment 523171:\n-----------------------------------------------------------------\n\n::: netwerk/base/public/nsIRequest.idl\n@@ +223,5 @@\n> +    /**\n> +     * When set, this flag indicates that built-in HTTP Basic Auth should not\n> +     * be attempted for this request.\n> +     */\n> +    const unsigned long LOAD_BYPASS_BASIC_AUTH = 1 << 15;\n\nFirst, call this BYPASS_*BASIC*_AUTH is bad.  There are several other schemes for http auth.\n\nThis has to be named BYPASS_WWW_AUTHENTICATION.  We still want to auth with proxies, but the ANON flag already handles this.\n\n::: netwerk/protocol/http/nsHttpChannelAuthProvider.cpp\n@@ +215,5 @@\n>                                 mProxyIdent);\n>  \n> +    if (loadFlags & nsIRequest::LOAD_BYPASS_BASIC_AUTH) {\n> +        return NS_OK;\n> +    }\n\nWhen the server returns 401 for your provided credentials, we will try another round with cached credentials.\n\nProbably not what you and we want.\n\nMy proposal is to:\n- make LOAD_ANONYMOUS flag consist of the finer grained flags, where disable LOAD_WWW_AUTHENTICATION is one of them\n- replace LOAD_ANONYMOUS in this file with LOAD_WWW_AUTHENTICATION flag checks\n\n\nBTW, what cs is this patch based on?  On this place in the current code has to be check for the LOAD_ANONYMOUS flag..  The parent changes seems to be from Wed Mar 30 13:53:35 2011 !", "author": "honzab.moz@firemni.cz"}, {"id": 12659007, "time": "2017-09-13T18:40:52Z", "tags": [], "bug_id": 646686, "creation_time": "2017-09-13T18:40:52Z", "raw_text": "Bulk change to priority: https://bugzilla.mozilla.org/show_bug.cgi?id=1399258", "is_private": false, "count": 11, "text": "Bulk change to priority: https://bugzilla.mozilla.org/show_bug.cgi?id=1399258", "author": "bug-husbandry-bot@mozilla.bugs", "creator": "bug-husbandry-bot@mozilla.bugs", "attachment_id": null}]}}}