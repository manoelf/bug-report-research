{"bugs": {"636586": {"comments": [{"creator": "carl@oddbird.net", "attachment_id": null, "count": 0, "text": "The /login call sends a USERTOKEN cookie which can be used in place of Basic Auth to authenticate further calls. For security, this token should be invalidated when /logout is called, or after a set expiry time.", "author": "carl@oddbird.net", "tags": [], "raw_text": "The /login call sends a USERTOKEN cookie which can be used in place of Basic Auth to authenticate further calls. For security, this token should be invalidated when /logout is called, or after a set expiry time.", "creation_time": "2011-02-24T22:19:20Z", "bug_id": 636586, "is_private": false, "id": 5302720, "time": "2011-02-24T22:19:20Z"}, {"count": 1, "text": "Added expiration time 1 hour and remove login token when logout method is called.", "author": "vadimk@utest.com", "creator": "vadimk@utest.com", "attachment_id": null, "time": "2011-02-27T03:15:08Z", "id": 5306887, "raw_text": "Added expiration time 1 hour and remove login token when logout method is called.", "creation_time": "2011-02-27T03:15:08Z", "bug_id": 636586, "tags": [], "is_private": false}, {"tags": [], "raw_text": "(In reply to comment #1)\n> Added expiration time 1 hour and remove login token when logout method is\n> called.\n\nGreat. I should have been more specific on expiration timeframe - I think one hour might be a bit too aggressive. It's a bit of a tradeoff between convenience for users and security, but the main thing is that it should expire eventually so if an attacker gets ahold of a token they can't save it and use it whenever. I'd been thinking more like several days or a week, rather than an hour.\n\nI'd say let's change it to a week, unless Aakash has a different opinion.", "bug_id": 636586, "creation_time": "2011-02-27T03:44:05Z", "is_private": false, "id": 5306897, "time": "2011-02-27T03:44:05Z", "creator": "carl@oddbird.net", "attachment_id": null, "count": 2, "text": "(In reply to comment #1)\n> Added expiration time 1 hour and remove login token when logout method is\n> called.\n\nGreat. I should have been more specific on expiration timeframe - I think one hour might be a bit too aggressive. It's a bit of a tradeoff between convenience for users and security, but the main thing is that it should expire eventually so if an attacker gets ahold of a token they can't save it and use it whenever. I'd been thinking more like several days or a week, rather than an hour.\n\nI'd say let's change it to a week, unless Aakash has a different opinion.", "author": "carl@oddbird.net"}, {"attachment_id": null, "creator": "vadimk@utest.com", "author": "vadimk@utest.com", "count": 3, "text": "It's 1 hour of inactivity. While user keeps sending requests, it should not expire at all. In any case, this parameter should be made configurable via maven settings.xml file or something like that....", "is_private": false, "tags": [], "raw_text": "It's 1 hour of inactivity. While user keeps sending requests, it should not expire at all. In any case, this parameter should be made configurable via maven settings.xml file or something like that....", "bug_id": 636586, "creation_time": "2011-02-27T03:53:18Z", "id": 5306900, "time": "2011-02-27T03:53:18Z"}, {"raw_text": "(In reply to comment #3)\n> It's 1 hour of inactivity. While user keeps sending requests, it should not\n> expire at all. In any case, this parameter should be made configurable via\n> maven settings.xml file or something like that....\n\nAh yes, one hour of inactivity is certainly better, though it still means a user will have to login again on any repeat visit, pretty much. \n\nConfigurable would be great.", "creation_time": "2011-02-27T04:06:35Z", "bug_id": 636586, "tags": [], "is_private": false, "time": "2011-02-27T04:06:35Z", "id": 5306904, "creator": "carl@oddbird.net", "attachment_id": null, "count": 4, "text": "(In reply to comment #3)\n> It's 1 hour of inactivity. While user keeps sending requests, it should not\n> expire at all. In any case, this parameter should be made configurable via\n> maven settings.xml file or something like that....\n\nAh yes, one hour of inactivity is certainly better, though it still means a user will have to login again on any repeat visit, pretty much. \n\nConfigurable would be great.", "author": "carl@oddbird.net"}, {"time": "2011-02-27T14:43:40Z", "author": "vadimk@utest.com", "id": 5307221, "text": "Added new variable to settings.xml. Make sure to update your settings file before building new version.\n\n<!-- Web Services -->\n<login.expiration.seconds>3600</login.expiration.seconds>", "count": 5, "is_private": false, "attachment_id": null, "bug_id": 636586, "creation_time": "2011-02-27T14:43:40Z", "raw_text": "Added new variable to settings.xml. Make sure to update your settings file before building new version.\n\n<!-- Web Services -->\n<login.expiration.seconds>3600</login.expiration.seconds>", "tags": [], "creator": "vadimk@utest.com"}, {"is_private": false, "tags": [], "bug_id": 636586, "creation_time": "2011-02-27T16:23:18Z", "raw_text": "(In reply to comment #5)\n> Added new variable to settings.xml. Make sure to update your settings file\n> before building new version.\n> \n> <!-- Web Services -->\n> <login.expiration.seconds>3600</login.expiration.seconds>\n\nIs this setting there but not functional yet? I tried changing it to 5 seconds, built a new version, but it wasn't expiring my token after 5 seconds of inactivity...", "id": 5307302, "time": "2011-02-27T16:23:18Z", "attachment_id": null, "creator": "carl@oddbird.net", "author": "carl@oddbird.net", "text": "(In reply to comment #5)\n> Added new variable to settings.xml. Make sure to update your settings file\n> before building new version.\n> \n> <!-- Web Services -->\n> <login.expiration.seconds>3600</login.expiration.seconds>\n\nIs this setting there but not functional yet? I tried changing it to 5 seconds, built a new version, but it wasn't expiring my token after 5 seconds of inactivity...", "count": 6}, {"is_private": false, "tags": [], "creation_time": "2011-02-28T17:48:27Z", "bug_id": 636586, "raw_text": "I don't think the fix here achieves the goal. If I'm not mistaken, you're setting an expiration time on the USERTOKEN cookie. But cookie expiration times are only advisory. This doesn't help with security at all - if the database is compromised and someone gets hold of a user token, the platform continues to accept it forever. (According to my test here, even if the user logs out the platform continues to accept the token).\n\nSetting expiration time on the cookie, or deleting the cookie, is not relevant here, because the client is not a browser, it's the UI app. The only change that will serve the security purpose is for the platform itself to invalidate the token internally so it will no longer be accepted as a valid credential after the expiration time or the user logout.", "id": 5308947, "time": "2011-02-28T17:48:27Z", "attachment_id": null, "creator": "carl@oddbird.net", "author": "carl@oddbird.net", "count": 7, "text": "I don't think the fix here achieves the goal. If I'm not mistaken, you're setting an expiration time on the USERTOKEN cookie. But cookie expiration times are only advisory. This doesn't help with security at all - if the database is compromised and someone gets hold of a user token, the platform continues to accept it forever. (According to my test here, even if the user logs out the platform continues to accept the token).\n\nSetting expiration time on the cookie, or deleting the cookie, is not relevant here, because the client is not a browser, it's the UI app. The only change that will serve the security purpose is for the platform itself to invalidate the token internally so it will no longer be accepted as a valid credential after the expiration time or the user logout."}, {"count": 8, "text": "yes, we need eventually to implement more robust solution, maybe persist token in db...\nI wouldn't consider it a very serious problem now, since the site will be open to community anyway...", "id": 5309912, "time": "2011-02-28T22:41:47Z", "author": "vadimk@utest.com", "tags": [], "creator": "vadimk@utest.com", "bug_id": 636586, "creation_time": "2011-02-28T22:41:47Z", "raw_text": "yes, we need eventually to implement more robust solution, maybe persist token in db...\nI wouldn't consider it a very serious problem now, since the site will be open to community anyway...", "attachment_id": null, "is_private": false}, {"is_private": false, "attachment_id": null, "raw_text": "(In reply to comment #8)\n> yes, we need eventually to implement more robust solution, maybe persist token\n> in db...\n> I wouldn't consider it a very serious problem now, since the site will be open\n> to community anyway...\n\nWell, it's open to the community, but with registration. Obviously some one who is able to get ahold of a user token for a privileged user could potentially do a lot of damage. I would say being open to the community makes it a higher priority to implement secure systems, because the profile is higher for possible attacks.", "bug_id": 636586, "creation_time": "2011-02-28T22:52:52Z", "creator": "carl@oddbird.net", "tags": [], "author": "carl@oddbird.net", "time": "2011-02-28T22:52:52Z", "id": 5309948, "text": "(In reply to comment #8)\n> yes, we need eventually to implement more robust solution, maybe persist token\n> in db...\n> I wouldn't consider it a very serious problem now, since the site will be open\n> to community anyway...\n\nWell, it's open to the community, but with registration. Obviously some one who is able to get ahold of a user token for a privileged user could potentially do a lot of damage. I would say being open to the community makes it a higher priority to implement secure systems, because the profile is higher for possible attacks.", "count": 9}, {"text": "A test for this bug is automated in my Lettuce tests.  Currently failing.", "count": 10, "author": "cameron@dawsoncode.com", "creator": "cameron@dawsoncode.com", "attachment_id": null, "id": 5339314, "time": "2011-03-11T17:46:18Z", "tags": [], "creation_time": "2011-03-11T17:46:18Z", "bug_id": 636586, "raw_text": "A test for this bug is automated in my Lettuce tests.  Currently failing.", "is_private": false}, {"is_private": false, "attachment_id": null, "creator": "cameron@dawsoncode.com", "tags": [], "raw_text": "Failing test scenario:\n\n  Scenario: Log in and out as user: (Bug 636586)                               # features/bugs/users.feature:7\n    Given I create the seed company and product with these names:              # features/steps.py:184\n      | company name    | product name |\n      | Massive Dynamic | Cortexiphan  |\n    And I create a new user with name \"Walter Bishop\"                          # features/steps_users.py:63\n    When I log in user with that name                                          # features/steps_users.py:150\n    Then I am logged in as the user with that name                             # features/steps_users.py:167\n    And when I log out the user with that name                                 # features/steps_users.py:140\n    Then that user is not logged in                                            # features/steps_users.py:182\n    Traceback (most recent call last):\n      File \"/Library/Python/2.6/site-packages/lettuce-0.1.20-py2.6.egg/lettuce/core.py\", line 81, in __call__\n        ret = self.function(self.step, *args, **kw)\n      File \"/Users/camerondawson/gitspace/tcm/tests/bdd/features/steps_users.py\", line 187, in user_not_logged_in\n        headers = headers, exp_status = 401)\n      File \"/Users/camerondawson/gitspace/tcm/tests/bdd/features/tcm_request_helper.py\", line 90, in do_get\n        return verify_status(exp_status, response, str(uri))\n      File \"/Users/camerondawson/gitspace/tcm/tests/bdd/features/tcm_request_helper.py\", line 50, in verify_status\n        eq_(response.status, exp_status, msg + \": \" + str(data))\n      File \"/Users/camerondawson/gitspace/tcm/tests/bdd/features/tcm_data_helper.py\", line 47, in eq_\n        assert exp == act, \"\\n\\tExp:%r\\n\\tAct:%r\\n%r\" % (exp, act, msg)\n    AssertionError: \n    \tExp:401\n    \tAct:200\n    '/tcm/services/v2/rest/users/current: {\"ns1.user\":[{\"@xsi.type\":\"ns1:user\",\"ns1.resourceIdentity\":{\"@id\":\"2\",\"@url\":\"http:\\\\/\\\\/localhost:8080\\\\/tcm\\\\/services\\\\/v2\\\\/rest\\\\/users\\\\/2\",\"@version\":\"0\",\"@xsi.type\":\"ns1:ResourceIdentity\"},\"ns1.timeline\":{\"@createDate\":\"2011-03-11T09:44:52-08:00\",\"@createdBy\":\"1\",\"@lastChangeDate\":\"2011-03-11T09:44:52-08:00\",\"@lastChangedBy\":\"1\",\"@xsi.type\":\"ns1:Timeline\"},\"ns1.companyId\":21,\"ns1.companyLocator\":{\"@id\":\"21\",\"@url\":\"http:\\\\/\\\\/localhost:8080\\\\/tcm\\\\/services\\\\/v2\\\\/rest\\\\/companies\\\\/21\",\"@xsi.type\":\"ns1:ResourceLocator\"},\"ns1.email\":\"WalterBishop@mozilla.com\",\"ns1.firstName\":\"Walter\",\"ns1.lastName\":\"Bishop\",\"ns1.password\":{\"@xsi.nil\":\"true\"},\"ns1.screenName\":\"WalterBishop\",\"ns1.userStatusId\":2}]}'", "bug_id": 636586, "creation_time": "2011-03-11T17:47:08Z", "id": 5339317, "author": "cameron@dawsoncode.com", "time": "2011-03-11T17:47:08Z", "text": "Failing test scenario:\n\n  Scenario: Log in and out as user: (Bug 636586)                               # features/bugs/users.feature:7\n    Given I create the seed company and product with these names:              # features/steps.py:184\n      | company name    | product name |\n      | Massive Dynamic | Cortexiphan  |\n    And I create a new user with name \"Walter Bishop\"                          # features/steps_users.py:63\n    When I log in user with that name                                          # features/steps_users.py:150\n    Then I am logged in as the user with that name                             # features/steps_users.py:167\n    And when I log out the user with that name                                 # features/steps_users.py:140\n    Then that user is not logged in                                            # features/steps_users.py:182\n    Traceback (most recent call last):\n      File \"/Library/Python/2.6/site-packages/lettuce-0.1.20-py2.6.egg/lettuce/core.py\", line 81, in __call__\n        ret = self.function(self.step, *args, **kw)\n      File \"/Users/camerondawson/gitspace/tcm/tests/bdd/features/steps_users.py\", line 187, in user_not_logged_in\n        headers = headers, exp_status = 401)\n      File \"/Users/camerondawson/gitspace/tcm/tests/bdd/features/tcm_request_helper.py\", line 90, in do_get\n        return verify_status(exp_status, response, str(uri))\n      File \"/Users/camerondawson/gitspace/tcm/tests/bdd/features/tcm_request_helper.py\", line 50, in verify_status\n        eq_(response.status, exp_status, msg + \": \" + str(data))\n      File \"/Users/camerondawson/gitspace/tcm/tests/bdd/features/tcm_data_helper.py\", line 47, in eq_\n        assert exp == act, \"\\n\\tExp:%r\\n\\tAct:%r\\n%r\" % (exp, act, msg)\n    AssertionError: \n    \tExp:401\n    \tAct:200\n    '/tcm/services/v2/rest/users/current: {\"ns1.user\":[{\"@xsi.type\":\"ns1:user\",\"ns1.resourceIdentity\":{\"@id\":\"2\",\"@url\":\"http:\\\\/\\\\/localhost:8080\\\\/tcm\\\\/services\\\\/v2\\\\/rest\\\\/users\\\\/2\",\"@version\":\"0\",\"@xsi.type\":\"ns1:ResourceIdentity\"},\"ns1.timeline\":{\"@createDate\":\"2011-03-11T09:44:52-08:00\",\"@createdBy\":\"1\",\"@lastChangeDate\":\"2011-03-11T09:44:52-08:00\",\"@lastChangedBy\":\"1\",\"@xsi.type\":\"ns1:Timeline\"},\"ns1.companyId\":21,\"ns1.companyLocator\":{\"@id\":\"21\",\"@url\":\"http:\\\\/\\\\/localhost:8080\\\\/tcm\\\\/services\\\\/v2\\\\/rest\\\\/companies\\\\/21\",\"@xsi.type\":\"ns1:ResourceLocator\"},\"ns1.email\":\"WalterBishop@mozilla.com\",\"ns1.firstName\":\"Walter\",\"ns1.lastName\":\"Bishop\",\"ns1.password\":{\"@xsi.nil\":\"true\"},\"ns1.screenName\":\"WalterBishop\",\"ns1.userStatusId\":2}]}'", "count": 11}]}}, "comments": {}}