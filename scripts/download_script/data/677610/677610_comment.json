{"comments": {}, "bugs": {"677610": {"comments": [{"creator": "marty.rosenberg@gmail.com", "is_private": false, "count": 0, "author": "marty.rosenberg@gmail.com", "creation_time": "2011-08-09T18:09:53Z", "tags": [], "bug_id": 677610, "time": "2011-08-09T18:09:53Z", "text": "we have these nifty pccounters which will say how many times every different opcode is hit in a run of the program.  I'd like to find out how many times various individual cases are hit in the assembler, both during assembly, and during the running of the assembled code.  e.g. not only how often do we generate\n\nadd S0, base, 0xf00\nldr rt, s0, index\n\nbut how frequently are these executed?", "attachment_id": null, "raw_text": "we have these nifty pccounters which will say how many times every different opcode is hit in a run of the program.  I'd like to find out how many times various individual cases are hit in the assembler, both during assembly, and during the running of the assembled code.  e.g. not only how often do we generate\n\nadd S0, base, 0xf00\nldr rt, s0, index\n\nbut how frequently are these executed?", "id": 5642792}, {"id": 5642864, "attachment_id": null, "raw_text": "Bug 676515 does some generalization for aspects of JM execution (number of stub calls made, approximate number of bytes of inline code and PIC stub code executed), including allowing counters to accumulate without affecting register allocation.  This is already on the JM branch.", "creation_time": "2011-08-09T18:31:53Z", "author": "bhackett1024@gmail.com", "text": "Bug 676515 does some generalization for aspects of JM execution (number of stub calls made, approximate number of bytes of inline code and PIC stub code executed), including allowing counters to accumulate without affecting register allocation.  This is already on the JM branch.", "bug_id": 677610, "tags": [], "time": "2011-08-09T18:31:53Z", "is_private": false, "creator": "bhackett1024@gmail.com", "count": 1}, {"id": 5649684, "raw_text": "so it turns out instrumenting code causes it to blow up... a lot.\nWhen this happens inside of a PIC, we will occasionally cause a pool to need to be flushed, when before we didn't.  Since we disallow pools inside of PIC's, this causes some issues.  That being said, it demonstrates most of the interesting features of the counters/probes/instrumentation that I'm planning on adding.", "attachment_id": 552635, "text": "Created attachment 552635\nrough test-- most tests fail assertions\n\nso it turns out instrumenting code causes it to blow up... a lot.\nWhen this happens inside of a PIC, we will occasionally cause a pool to need to be flushed, when before we didn't.  Since we disallow pools inside of PIC's, this causes some issues.  That being said, it demonstrates most of the interesting features of the counters/probes/instrumentation that I'm planning on adding.", "bug_id": 677610, "tags": [], "time": "2011-08-12T11:53:51Z", "creation_time": "2011-08-12T11:53:51Z", "author": "marty.rosenberg@gmail.com", "count": 2, "is_private": false, "creator": "marty.rosenberg@gmail.com"}, {"count": 3, "creator": "marty.rosenberg@gmail.com", "is_private": false, "time": "2011-08-19T19:06:33Z", "tags": [], "bug_id": 677610, "text": "Created attachment 554499\ntest that is much sketchier, but less likely to crash\n\nThe patch is in a state where I seem to be able to add a probe (almost) anywhere,\nand get results.\nHere are execution counts for pieces of code that I think can be optimized (at least in some cases)\nIf anyone is interested, you can see where i've inserted to probes in order to see\nwhat these counts mean.\n\n#sunspider\n                               .dtn:   911915\n                          .dtn.huge:   911915\n  .store64WithAddressOffsetPatch-ii:     1780\n  .store64WithAddressOffsetPatch-ir:      520\n                          .dumb_sub:    65587\n                            .double:  3869383\n                      .double.small:  3869383\n                            .base32: 17567154\n                       .base32.zero:  5147785\n                      .base32.small: 12419369\n      .load64WithAddressOffsetPatch:  1262982\n                         .null_move: 17998090\n                              .dt32: 147817513\n                        .dt32.small: 143137703\n                         .dt32.zero:  4679810\n                             .set32:   271127\n                          .set32.ra:       52\n                       .set32.ra.ot:       52\n                          .set32.rr:    35321\n                       .set32.rr.ot:    35321\n                          .set32.ri:   235754\n                       .set32.ri.ot:   235754\n\n#v8:\n                               .dtn:  2914470\n                          .dtn.huge:  2914470\n                          .dumb_sub:    69788\n                            .base32:  1066592\n                       .base32.zero:   341022\n                      .base32.small:   725570\n                            .double:  5641920\n                      .double.small:  5641920\n      .load64WithAddressOffsetPatch: 19981815\n  .store64WithAddressOffsetPatch-ir:    33721\n  .store64WithAddressOffsetPatch-ii:   333423\n                         .null_move: 80543537\n                              .dt32: 434065434\n                       .dt32.medium:  7622268\n                        .dt32.small: 393959618\n                         .dt32.zero: 32483548\n                             .set32:  4806421\n                          .set32.rr:   300486\n                       .set32.rr.ne:   127650\n                       .set32.rr.ot:   172836\n                          .set32.ri:  4505935\n                       .set32.ri.ne:  1456143\n                       .set32.ri.ot:  3049792\n\n#kraken:\n                               .dtn:   688316\n                          .dtn.huge:   688316\n                          .dumb_sub:    71127\n                            .double:   761152\n                      .double.small:   761152\n                            .base32: 56086471\n                       .base32.zero: 18333190\n                      .base32.small: 37753281\n  .store64WithAddressOffsetPatch-ii:     1999\n      .load64WithAddressOffsetPatch:  1507473\n  .store64WithAddressOffsetPatch-ir:     1216\n                         .null_move: 38000560\n                              .dt32: 273516389\n                        .dt32.small: 271443033\n                         .dt32.zero:  2073356\n                             .set32:  1842942\n                          .set32.rr:    17824\n                       .set32.rr.ot:    17824\n                       .set32.rr.ne:        0\n                          .set32.ri:  1825118\n                       .set32.ri.ot:  1825118", "author": "marty.rosenberg@gmail.com", "creation_time": "2011-08-19T19:06:33Z", "raw_text": "The patch is in a state where I seem to be able to add a probe (almost) anywhere,\nand get results.\nHere are execution counts for pieces of code that I think can be optimized (at least in some cases)\nIf anyone is interested, you can see where i've inserted to probes in order to see\nwhat these counts mean.\n\n#sunspider\n                               .dtn:   911915\n                          .dtn.huge:   911915\n  .store64WithAddressOffsetPatch-ii:     1780\n  .store64WithAddressOffsetPatch-ir:      520\n                          .dumb_sub:    65587\n                            .double:  3869383\n                      .double.small:  3869383\n                            .base32: 17567154\n                       .base32.zero:  5147785\n                      .base32.small: 12419369\n      .load64WithAddressOffsetPatch:  1262982\n                         .null_move: 17998090\n                              .dt32: 147817513\n                        .dt32.small: 143137703\n                         .dt32.zero:  4679810\n                             .set32:   271127\n                          .set32.ra:       52\n                       .set32.ra.ot:       52\n                          .set32.rr:    35321\n                       .set32.rr.ot:    35321\n                          .set32.ri:   235754\n                       .set32.ri.ot:   235754\n\n#v8:\n                               .dtn:  2914470\n                          .dtn.huge:  2914470\n                          .dumb_sub:    69788\n                            .base32:  1066592\n                       .base32.zero:   341022\n                      .base32.small:   725570\n                            .double:  5641920\n                      .double.small:  5641920\n      .load64WithAddressOffsetPatch: 19981815\n  .store64WithAddressOffsetPatch-ir:    33721\n  .store64WithAddressOffsetPatch-ii:   333423\n                         .null_move: 80543537\n                              .dt32: 434065434\n                       .dt32.medium:  7622268\n                        .dt32.small: 393959618\n                         .dt32.zero: 32483548\n                             .set32:  4806421\n                          .set32.rr:   300486\n                       .set32.rr.ne:   127650\n                       .set32.rr.ot:   172836\n                          .set32.ri:  4505935\n                       .set32.ri.ne:  1456143\n                       .set32.ri.ot:  3049792\n\n#kraken:\n                               .dtn:   688316\n                          .dtn.huge:   688316\n                          .dumb_sub:    71127\n                            .double:   761152\n                      .double.small:   761152\n                            .base32: 56086471\n                       .base32.zero: 18333190\n                      .base32.small: 37753281\n  .store64WithAddressOffsetPatch-ii:     1999\n      .load64WithAddressOffsetPatch:  1507473\n  .store64WithAddressOffsetPatch-ir:     1216\n                         .null_move: 38000560\n                              .dt32: 273516389\n                        .dt32.small: 271443033\n                         .dt32.zero:  2073356\n                             .set32:  1842942\n                          .set32.rr:    17824\n                       .set32.rr.ot:    17824\n                       .set32.rr.ne:        0\n                          .set32.ri:  1825118\n                       .set32.ri.ot:  1825118", "attachment_id": 554499, "id": 5666046}]}}}