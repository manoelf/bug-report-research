{"comments": {}, "bugs": {"692009": {"comments": [{"text": "Created attachment 564742\nstringValidateForm\n\nUser Agent: Mozilla/5.0 (Windows NT 5.1; rv:9.0a2) Gecko/20111004 Firefox/9.0a2\nBuild ID: 20111004042012\n\nSteps to reproduce:\n\nIn the peacekeeper stringValidateForm, all of the regular expressions are slower in Firefox (Aurora) vs Chrome.  I've made a test case that runs the code.  My numbers are:\n\nFirefox: elapsed time: 195\nChrome: elapsed time: 71\n\nThis is one of the worst peacekeeper tests", "count": 0, "author": "developer@ckiweb.com", "creator": "developer@ckiweb.com", "creation_time": "2011-10-05T02:49:10Z", "is_private": false, "bug_id": 692009, "id": 5759340, "raw_text": "User Agent: Mozilla/5.0 (Windows NT 5.1; rv:9.0a2) Gecko/20111004 Firefox/9.0a2\nBuild ID: 20111004042012\n\nSteps to reproduce:\n\nIn the peacekeeper stringValidateForm, all of the regular expressions are slower in Firefox (Aurora) vs Chrome.  I've made a test case that runs the code.  My numbers are:\n\nFirefox: elapsed time: 195\nChrome: elapsed time: 71\n\nThis is one of the worst peacekeeper tests", "attachment_id": 564742, "time": "2011-10-05T02:49:10Z", "tags": []}, {"text": "Created attachment 806612\nShell testcase\n\nSimple shell testcase. The bad news:\n\nd8:  575 ms\nSM: 1088 ms\n\nThe good news: we are about as fast as v8 on 4 of the 5 regular expressions now. The bad one is the email check, with that one commented out:\n\nd8: 391 ms\nSM: 387 ms\n\nSo what we need to make fast is this:\n\nfunction test() {\n    var t = new Date;\n    for (var i = 0; i < 1000000; i++) {\n\tinput = \"jaakko.alajoki@futuremark.com\";\n\tresult = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(input);\n    }\n    print(new Date - t);\n}\ntest();\n\nd8: 173 ms\nSM: 670 ms\n\nAnd indeed, a profile shows we're spending most time in Yarr::Interpreter::* :(", "count": 1, "author": "jdemooij@mozilla.com", "creator": "jdemooij@mozilla.com", "is_private": false, "creation_time": "2013-09-18T13:34:27Z", "bug_id": 692009, "id": 7874351, "raw_text": "Simple shell testcase. The bad news:\n\nd8:  575 ms\nSM: 1088 ms\n\nThe good news: we are about as fast as v8 on 4 of the 5 regular expressions now. The bad one is the email check, with that one commented out:\n\nd8: 391 ms\nSM: 387 ms\n\nSo what we need to make fast is this:\n\nfunction test() {\n    var t = new Date;\n    for (var i = 0; i < 1000000; i++) {\n\tinput = \"jaakko.alajoki@futuremark.com\";\n\tresult = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(input);\n    }\n    print(new Date - t);\n}\ntest();\n\nd8: 173 ms\nSM: 670 ms\n\nAnd indeed, a profile shows we're spending most time in Yarr::Interpreter::* :(", "attachment_id": 806612, "time": "2013-09-18T13:34:27Z", "tags": []}, {"author": "jdemooij@mozilla.com", "count": 2, "text": "Hannes do you happen to know why Yarr does not JIT this regular expression? Asking you because you've also looked into Octane-regexp.", "creator": "jdemooij@mozilla.com", "creation_time": "2013-09-18T13:37:53Z", "is_private": false, "bug_id": 692009, "id": 7874368, "attachment_id": null, "raw_text": "Hannes do you happen to know why Yarr does not JIT this regular expression? Asking you because you've also looked into Octane-regexp.", "time": "2013-09-18T13:37:53Z", "tags": []}, {"tags": [], "time": "2013-09-18T13:54:51Z", "raw_text": "Eh previous attachment had the bad regex commented out. Oops.", "attachment_id": 806620, "bug_id": 692009, "id": 7874443, "creation_time": "2013-09-18T13:54:51Z", "is_private": false, "creator": "jdemooij@mozilla.com", "count": 3, "text": "Created attachment 806620\nShell testcase\n\nEh previous attachment had the bad regex commented out. Oops.", "author": "jdemooij@mozilla.com"}, {"id": 7875079, "bug_id": 692009, "creation_time": "2013-09-18T16:00:51Z", "is_private": false, "creator": "hv1989@gmail.com", "count": 4, "text": "(In reply to Jan de Mooij [:jandem] from comment #2)\n> Hannes do you happen to know why Yarr does not JIT this regular expression?\n> Asking you because you've also looked into Octane-regexp.\n\nWe are failing due to this:\n        // We can currently only compile quantity 1 subpatterns that are\n        // not copies. We generate a copy in the case of a range quantifier,\n        // e.g. /(?:x){3,9}/, or /(?:x)+/ (These are effectively expanded to\n        // /(?:x){3,3}(?:x){0,6}/ and /(?:x)(?:x)*/ repectively). The problem\n        // comes where the subpattern is capturing, in which case we would\n        // need to restore the capture from the first subpattern upon a\n        // failure in the second.\n\n/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(input);\n\nSo we can't compile due to capturing subpattern atm.\n(anything)+ or (anything){4,7} are a problem and we stay in the interpreter.", "author": "hv1989@gmail.com", "tags": [], "time": "2013-09-18T16:00:51Z", "raw_text": "(In reply to Jan de Mooij [:jandem] from comment #2)\n> Hannes do you happen to know why Yarr does not JIT this regular expression?\n> Asking you because you've also looked into Octane-regexp.\n\nWe are failing due to this:\n        // We can currently only compile quantity 1 subpatterns that are\n        // not copies. We generate a copy in the case of a range quantifier,\n        // e.g. /(?:x){3,9}/, or /(?:x)+/ (These are effectively expanded to\n        // /(?:x){3,3}(?:x){0,6}/ and /(?:x)(?:x)*/ repectively). The problem\n        // comes where the subpattern is capturing, in which case we would\n        // need to restore the capture from the first subpattern upon a\n        // failure in the second.\n\n/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(input);\n\nSo we can't compile due to capturing subpattern atm.\n(anything)+ or (anything){4,7} are a problem and we stay in the interpreter.", "attachment_id": null}, {"raw_text": "Filed a WebKit bug: https://bugs.webkit.org/show_bug.cgi?id=122891", "attachment_id": null, "time": "2013-10-16T12:31:29Z", "tags": [], "count": 5, "text": "Filed a WebKit bug: https://bugs.webkit.org/show_bug.cgi?id=122891", "author": "jdemooij@mozilla.com", "creator": "jdemooij@mozilla.com", "is_private": false, "creation_time": "2013-10-16T12:31:29Z", "id": 7966697, "bug_id": 692009}, {"creation_time": "2014-05-14T09:57:25Z", "is_private": false, "bug_id": 692009, "id": 8790954, "count": 6, "text": "Bug 976446 will change this:\n\nBefore:\nbenchmark Elapsed time 50. Operations: 50000. Operations per second: 1000000\n\nAfter:\nbenchmark Elapsed time 42. Operations: 50000. Operations per second: 1190476.1904761903\n\nChrome is still king here:\nbenchmark Elapsed time 26. Operations: 50000. Operations per second: 1923076.9230769232\n\nWe assume this might be caused by the fact we have 16bit chars and chrome 8bit chars", "author": "hv1989@gmail.com", "creator": "hv1989@gmail.com", "tags": [], "raw_text": "Bug 976446 will change this:\n\nBefore:\nbenchmark Elapsed time 50. Operations: 50000. Operations per second: 1000000\n\nAfter:\nbenchmark Elapsed time 42. Operations: 50000. Operations per second: 1190476.1904761903\n\nChrome is still king here:\nbenchmark Elapsed time 26. Operations: 50000. Operations per second: 1923076.9230769232\n\nWe assume this might be caused by the fact we have 16bit chars and chrome 8bit chars", "attachment_id": null, "time": "2014-05-14T09:57:25Z"}, {"id": 9497436, "bug_id": 692009, "creation_time": "2014-10-24T15:10:42Z", "is_private": false, "creator": "bugs@pettay.fi", "count": 7, "text": "On 64bit linux, Nightly 42, Chrome 37.", "author": "bugs@pettay.fi", "tags": [], "time": "2014-10-24T15:10:42Z", "raw_text": "On 64bit linux, Nightly 42, Chrome 37.", "attachment_id": null}]}}}