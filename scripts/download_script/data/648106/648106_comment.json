{"comments": {}, "bugs": {"648106": {"comments": [{"creator": "igor@mir2.org", "raw_text": "Currently we allow to call JSContext::free outside the finalization phase to support the callers that use the method to release temporary memory. This implies that the implementation must take an extra branch to check for the background finalization thread. We should stop that and insist that those places should be switched to use Foreground::free_", "attachment_id": null, "creation_time": "2011-04-06T20:58:29Z", "tags": [], "text": "Currently we allow to call JSContext::free outside the finalization phase to support the callers that use the method to release temporary memory. This implies that the implementation must take an extra branch to check for the background finalization thread. We should stop that and insist that those places should be switched to use Foreground::free_", "bug_id": 648106, "count": 0, "author": "igor@mir2.org", "time": "2011-04-06T20:58:29Z", "is_private": false, "id": 5393145}, {"id": 5393208, "is_private": false, "count": 1, "author": "mail@lukewagner.name", "time": "2011-04-06T21:22:00Z", "bug_id": 648106, "text": "Alternatively, could we use the background-free thread for calls to free outside of finalization?", "attachment_id": null, "creation_time": "2011-04-06T21:22:00Z", "tags": [], "creator": "mail@lukewagner.name", "raw_text": "Alternatively, could we use the background-free thread for calls to free outside of finalization?"}, {"creator": "n.nethercote@gmail.com", "raw_text": "Is this just to save one branch per free?  Smells like premature optimization to me.  Do you have measurements indicating it'll be noticeable?", "text": "Is this just to save one branch per free?  Smells like premature optimization to me.  Do you have measurements indicating it'll be noticeable?", "count": 2, "time": "2011-04-06T23:01:16Z", "attachment_id": null, "creation_time": "2011-04-06T23:01:16Z", "tags": [], "bug_id": 648106, "author": "n.nethercote@gmail.com", "is_private": false, "id": 5393459}, {"bug_id": 648106, "tags": [], "creation_time": "2011-04-07T07:52:16Z", "attachment_id": null, "id": 5394089, "is_private": false, "author": "igor@mir2.org", "text": "(In reply to comment #2)\n> Is this just to save one branch per free? \n\nThis is about saving one branch per adding the pointer to the background free set. It should not affect the time the background thread takes to call the free.\n\n> Smells like premature optimization\n> to me.  Do you have measurements indicating it'll be noticeable?\n\nI should have filed this bug 588016. Although most of the speedup there came from lesser memory bandwidth, saving a branch per finalization helped as well (the patch avoided !cx->thread branch). So there are clear benefits from doing that.", "raw_text": "(In reply to comment #2)\n> Is this just to save one branch per free? \n\nThis is about saving one branch per adding the pointer to the background free set. It should not affect the time the background thread takes to call the free.\n\n> Smells like premature optimization\n> to me.  Do you have measurements indicating it'll be noticeable?\n\nI should have filed this bug 588016. Although most of the speedup there came from lesser memory bandwidth, saving a branch per finalization helped as well (the patch avoided !cx->thread branch). So there are clear benefits from doing that.", "creator": "igor@mir2.org", "time": "2011-04-07T07:52:16Z", "count": 3}, {"attachment_id": null, "tags": [], "creation_time": "2011-04-07T07:59:23Z", "bug_id": 648106, "author": "igor@mir2.org", "is_private": false, "id": 5394095, "creator": "igor@mir2.org", "raw_text": "(In reply to comment #1)\n> Alternatively, could we use the background-free thread for calls to free\n> outside of finalization?\n\nWhen the GC adds the thing to the background thread, it knows that that the thread is waiting. It allows to simplify quite few things.\n\nBut setting aside the question about the code complexity, why would one want to delay the release temporary allocated storage when it is still in the CPU caches and when its quick release allows for lesser heap fragmentation?", "text": "(In reply to comment #1)\n> Alternatively, could we use the background-free thread for calls to free\n> outside of finalization?\n\nWhen the GC adds the thing to the background thread, it knows that that the thread is waiting. It allows to simplify quite few things.\n\nBut setting aside the question about the code complexity, why would one want to delay the release temporary allocated storage when it is still in the CPU caches and when its quick release allows for lesser heap fragmentation?", "count": 4, "time": "2011-04-07T07:59:23Z"}, {"time": "2011-04-07T18:06:13Z", "count": 5, "text": "(In reply to comment #4)\nBecause free isn't free.  IIRC, on Mac, its quite expensive.  However, I haven't measured time spent in free outside finalization.", "raw_text": "(In reply to comment #4)\nBecause free isn't free.  IIRC, on Mac, its quite expensive.  However, I haven't measured time spent in free outside finalization.", "creator": "mail@lukewagner.name", "id": 5394730, "author": "mail@lukewagner.name", "is_private": false, "bug_id": 648106, "tags": [], "creation_time": "2011-04-07T18:06:13Z", "attachment_id": null}, {"id": 5406231, "author": "igor@mir2.org", "time": "2011-04-13T12:33:09Z", "count": 6, "is_private": false, "text": "(In reply to comment #5)\n> (In reply to comment #4)\n> Because free isn't free.  IIRC, on Mac, its quite expensive. \n\nOn Mac malloc has the same if not greater expensiveness. So outside the GC if the free call harms interactivity, then malloc would also be equally responsible. In those cases we better consider using a custom allocations like arena stack to avoid the overhead of malloc/free entirely.\n\nThis is outside the scope of this bug. Here I want to remove the useless cx->gcBackhround check in the JSContext::free_ both during the GC and outside it (replacing it with Foreground:: in that case) and fix the comments about the intended usage of the free methods.", "bug_id": 648106, "raw_text": "(In reply to comment #5)\n> (In reply to comment #4)\n> Because free isn't free.  IIRC, on Mac, its quite expensive. \n\nOn Mac malloc has the same if not greater expensiveness. So outside the GC if the free call harms interactivity, then malloc would also be equally responsible. In those cases we better consider using a custom allocations like arena stack to avoid the overhead of malloc/free entirely.\n\nThis is outside the scope of this bug. Here I want to remove the useless cx->gcBackhround check in the JSContext::free_ both during the GC and outside it (replacing it with Foreground:: in that case) and fix the comments about the intended usage of the free methods.", "creator": "igor@mir2.org", "tags": [], "creation_time": "2011-04-13T12:33:09Z", "attachment_id": null}, {"id": 5406235, "is_private": false, "author": "igor@mir2.org", "bug_id": 648106, "attachment_id": 525664, "creation_time": "2011-04-13T12:38:27Z", "tags": [], "count": 7, "time": "2011-04-13T12:38:27Z", "text": "Created attachment 525664\nv1\n\nThis is a work-in-progress patch where I temporary rename cx->free_ into cx->xfree_ to spot all the places that uses it and either keep the call there or replace it with Foreground::free_ when it is clear that the call is done outside the finalization.\n\nThe patch also fixes the regression from the recent allocation refactoring when the flat string chars are finalized on the foreground, not the background, due to the usage of JSRuntime::free_.", "creator": "igor@mir2.org", "raw_text": "This is a work-in-progress patch where I temporary rename cx->free_ into cx->xfree_ to spot all the places that uses it and either keep the call there or replace it with Foreground::free_ when it is clear that the call is done outside the finalization.\n\nThe patch also fixes the regression from the recent allocation refactoring when the flat string chars are finalized on the foreground, not the background, due to the usage of JSRuntime::free_."}]}}}