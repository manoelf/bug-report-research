{"comments": {}, "bugs": {"665000": {"comments": [{"author": "lukasblakk+bugs@gmail.com", "creator": "lukasblakk+bugs@gmail.com", "creation_time": "2011-06-17T14:51:29Z", "raw_text": "STR:\n\n1. Go to http://jsmad.org/ and click the play button\n2. After music starts, go to another tab in the same window as that tab\n3. Audio playback becomes choppy and returns to normal when you return focus to the tab with http://jsmad.org/ in it\n\nNote that if you have it open in another *window* and shift focus to another *window* the audio remains consistent in its playback.\n\nExpected results would be that switching tabs would not create choppiness in the audio playback.\n\nBuild identifier: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:5.0) Gecko/20100101 Firefox/5.0", "attachment_id": null, "time": "2011-06-17T14:51:29Z", "text": "STR:\n\n1. Go to http://jsmad.org/ and click the play button\n2. After music starts, go to another tab in the same window as that tab\n3. Audio playback becomes choppy and returns to normal when you return focus to the tab with http://jsmad.org/ in it\n\nNote that if you have it open in another *window* and shift focus to another *window* the audio remains consistent in its playback.\n\nExpected results would be that switching tabs would not create choppiness in the audio playback.\n\nBuild identifier: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:5.0) Gecko/20100101 Firefox/5.0", "id": 5539097, "count": 0, "is_private": false, "tags": [], "bug_id": 665000}, {"creator": "josh@joshmatthews.net", "author": "josh@joshmatthews.net", "raw_text": "I'm presuming this is due to the changes we made to deprioritizing background tabs.", "creation_time": "2011-06-17T15:01:11Z", "text": "I'm presuming this is due to the changes we made to deprioritizing background tabs.", "attachment_id": null, "time": "2011-06-17T15:01:11Z", "count": 1, "is_private": false, "tags": [], "id": 5539110, "bug_id": 665000}, {"tags": [], "is_private": false, "count": 2, "id": 5539222, "bug_id": 665000, "creation_time": "2011-06-17T16:04:32Z", "raw_text": "Sound like a bug in the js mp3 decoder, IMHO.\n\nIs this perhaps evang bug?", "text": "Sound like a bug in the js mp3 decoder, IMHO.\n\nIs this perhaps evang bug?", "time": "2011-06-17T16:04:32Z", "attachment_id": null, "creator": "bugs@pettay.fi", "author": "bugs@pettay.fi"}, {"creator": "david.humphrey@senecacollege.ca", "author": "david.humphrey@senecacollege.ca", "raw_text": "I think this is the sort of thing that bug 615946 is trying to address.  It's a perfect use case, imho.", "creation_time": "2011-06-17T16:16:32Z", "text": "I think this is the sort of thing that bug 615946 is trying to address.  It's a perfect use case, imho.", "time": "2011-06-17T16:16:32Z", "attachment_id": null, "count": 3, "is_private": false, "tags": [], "id": 5539242, "bug_id": 665000}, {"author": "bzbarsky@mit.edu", "creator": "bzbarsky@mit.edu", "id": 5539418, "tags": [], "is_private": false, "count": 4, "bug_id": 665000, "creation_time": "2011-06-17T17:32:40Z", "raw_text": "> I'm presuming this is due to the changes we made to deprioritizing background\n> tabs.\n\nAlmost certainly because it uses a timeout or interval timer to drive things somehow... and that's now firing more rarely.  The audiolib script certainly seems to involve some timers that might be affected.\n\nIt looks like it's relying on 250ms timeouts or so: if I set the background tab clamp at 250ms it skips very rarely.\n\nI can't test how Chrome behaves here, because this site doesn't work in Chrome at all (no sound).", "time": "2011-06-17T17:32:40Z", "attachment_id": null, "text": "> I'm presuming this is due to the changes we made to deprioritizing background\n> tabs.\n\nAlmost certainly because it uses a timeout or interval timer to drive things somehow... and that's now firing more rarely.  The audiolib script certainly seems to involve some timers that might be affected.\n\nIt looks like it's relying on 250ms timeouts or so: if I set the background tab clamp at 250ms it skips very rarely.\n\nI can't test how Chrome behaves here, because this site doesn't work in Chrome at all (no sound)."}, {"tags": [], "is_private": false, "count": 5, "id": 5539802, "bug_id": 665000, "raw_text": "Per discussion at http://news.ycombinator.com/item?id=2665607 Chrome does the same thing.  The developers of this mp3 decoder say that the problem is the limited buffer size of the library they're using, so they can't actually buffer up a full second's worth of audio at once.", "creation_time": "2011-06-17T20:12:01Z", "text": "Per discussion at http://news.ycombinator.com/item?id=2665607 Chrome does the same thing.  The developers of this mp3 decoder say that the problem is the limited buffer size of the library they're using, so they can't actually buffer up a full second's worth of audio at once.", "time": "2011-06-17T20:12:01Z", "attachment_id": null, "creator": "bzbarsky@mit.edu", "author": "bzbarsky@mit.edu"}, {"creation_time": "2011-06-19T14:23:23Z", "raw_text": "Hi, lead jsmad dev here, answering a few questions :)\n\n> Sound like a bug in the js mp3 decoder, IMHO.\n\nNo. The *decoder* has nothing to do with how playback is handled. If there's a bug in the playback, it's in player.js - which, I agree is not optimal anyway.\n\nThe demo works beautifully in Firefox 4.0.1, even when in a background tab. So as far as I'm concerned, this is a regression (I've encountered this bug on Firefox 6.0a2 at least).\n\nThis is where I wish Mozilla Devs in general cared a little more about multimedia in general. https://github.com/jussi-kalliokoski/audiolib.js/ has been around for some time, and it's what jsmad's demo is using.\n\nSo please, Olli, don't be so fast on the judgement guns.\n\n> Almost certainly because it uses a timeout or interval timer to drive things somehow... and that's now firing more rarely.  The audiolib script certainly seems to involve some timers that might be affected.\n\nThat's my understanding as well. However, the 250ms timeout in player.js is *not* directly related to audio playback - it's here to update the graphical progress bar, and work around some audio bugs that sometimes stop the refill function from being called *at all*. In that case I just reinitialize the device and refill is being called again.\n\n> I can't test how Chrome behaves here, because this site doesn't work in Chrome at all (no sound).\n\nAlthough I haven't personally got it to work under any version of Chrome, we have had reports that it works on Chrome 13.0 (Canary channel) and above if you go in 'about:flags', enable Web Audio API, restart, and try the demo again.\n\n> The developers of this mp3 decoder say that the problem is the limited buffer size of the library they're using, so they can't actually buffer up a full second's worth of audio at once.\n\nIndeed, if we could buffer 1s of audio at once the background tab bug in Firefox would probably not affect us anymore. But then the \"pause\" button would suffer some serious delay...\n\n> I think this is the sort of thing that bug 615946 is trying to address.  It's a perfect use case, imho.\n\nAudio workers certainly look really interesting - please don't tie them to the HTML5 audio tag, though, that would really suck.\n\nI'm looking forward to a time where we can just get rid of all those binary dependences because the JavaScript language and its implementations have evolved enough that the performance penalty is irrelevant.\n\nCheers!", "attachment_id": null, "time": "2011-06-19T14:23:23Z", "text": "Hi, lead jsmad dev here, answering a few questions :)\n\n> Sound like a bug in the js mp3 decoder, IMHO.\n\nNo. The *decoder* has nothing to do with how playback is handled. If there's a bug in the playback, it's in player.js - which, I agree is not optimal anyway.\n\nThe demo works beautifully in Firefox 4.0.1, even when in a background tab. So as far as I'm concerned, this is a regression (I've encountered this bug on Firefox 6.0a2 at least).\n\nThis is where I wish Mozilla Devs in general cared a little more about multimedia in general. https://github.com/jussi-kalliokoski/audiolib.js/ has been around for some time, and it's what jsmad's demo is using.\n\nSo please, Olli, don't be so fast on the judgement guns.\n\n> Almost certainly because it uses a timeout or interval timer to drive things somehow... and that's now firing more rarely.  The audiolib script certainly seems to involve some timers that might be affected.\n\nThat's my understanding as well. However, the 250ms timeout in player.js is *not* directly related to audio playback - it's here to update the graphical progress bar, and work around some audio bugs that sometimes stop the refill function from being called *at all*. In that case I just reinitialize the device and refill is being called again.\n\n> I can't test how Chrome behaves here, because this site doesn't work in Chrome at all (no sound).\n\nAlthough I haven't personally got it to work under any version of Chrome, we have had reports that it works on Chrome 13.0 (Canary channel) and above if you go in 'about:flags', enable Web Audio API, restart, and try the demo again.\n\n> The developers of this mp3 decoder say that the problem is the limited buffer size of the library they're using, so they can't actually buffer up a full second's worth of audio at once.\n\nIndeed, if we could buffer 1s of audio at once the background tab bug in Firefox would probably not affect us anymore. But then the \"pause\" button would suffer some serious delay...\n\n> I think this is the sort of thing that bug 615946 is trying to address.  It's a perfect use case, imho.\n\nAudio workers certainly look really interesting - please don't tie them to the HTML5 audio tag, though, that would really suck.\n\nI'm looking forward to a time where we can just get rid of all those binary dependences because the JavaScript language and its implementations have evolved enough that the performance penalty is irrelevant.\n\nCheers!", "id": 5541391, "count": 6, "is_private": false, "tags": [], "bug_id": 665000, "author": "amos@official.fm", "creator": "amos@official.fm"}, {"creator": "amos@official.fm", "author": "amos@official.fm", "is_private": false, "count": 7, "tags": [], "id": 5541432, "bug_id": 665000, "raw_text": "A proposed workaround, from http://www.opennet.ru/opennews/art.shtml?num=30921 comments, is to set 'dom.min_background_timeout_value' back to a low value such as 10, in about:config - then the demo works perfectly.\n\nIsn't there a way to *not* clamp audio callbacks? That would be enough for jsmad's usecase.", "creation_time": "2011-06-19T15:32:16Z", "text": "A proposed workaround, from http://www.opennet.ru/opennews/art.shtml?num=30921 comments, is to set 'dom.min_background_timeout_value' back to a low value such as 10, in about:config - then the demo works perfectly.\n\nIsn't there a way to *not* clamp audio callbacks? That would be enough for jsmad's usecase.", "time": "2011-06-19T15:32:16Z", "attachment_id": null}, {"creator": "bugs@pettay.fi", "author": "bugs@pettay.fi", "bug_id": 665000, "tags": [], "count": 8, "is_private": false, "id": 5541438, "text": "Jussi, as a temporary workaround, could the API use the postMessage()\nhack I mentioned yesterday.\n\nThe new Audio APIs should be designed so that timers aren't needed.", "time": "2011-06-19T15:42:52Z", "attachment_id": null, "creation_time": "2011-06-19T15:42:52Z", "raw_text": "Jussi, as a temporary workaround, could the API use the postMessage()\nhack I mentioned yesterday.\n\nThe new Audio APIs should be designed so that timers aren't needed."}, {"bug_id": 665000, "tags": [], "count": 9, "is_private": false, "id": 5541827, "text": "> Isn't there a way to *not* clamp audio callbacks?\n\nWe don't know they're \"audio callbacks\".  All we know is that the page is trying to run stuff off a timeout; in 99.99% of cases on the web right now doing that at the 4ms clamp is a waste of CPU power (and hence battery).... which is why the background tab clamp for timers is higher, just as it is in Chrome.\n\nFor a setInterval I suppose we could try to detect whether it touches audio APIs when it runs and if so not clamp it to the background clamp, but for nested setTimeout that's not really feasible either (because there is no good correlation between the setTimeout call and the code that runs when the timer fires).", "time": "2011-06-20T02:32:23Z", "attachment_id": null, "creation_time": "2011-06-20T02:32:23Z", "raw_text": "> Isn't there a way to *not* clamp audio callbacks?\n\nWe don't know they're \"audio callbacks\".  All we know is that the page is trying to run stuff off a timeout; in 99.99% of cases on the web right now doing that at the 4ms clamp is a waste of CPU power (and hence battery).... which is why the background tab clamp for timers is higher, just as it is in Chrome.\n\nFor a setInterval I suppose we could try to detect whether it touches audio APIs when it runs and if so not clamp it to the background clamp, but for nested setTimeout that's not really feasible either (because there is no good correlation between the setTimeout call and the code that runs when the timer fires).", "creator": "bzbarsky@mit.edu", "author": "bzbarsky@mit.edu"}, {"author": "jussi.kalliokoski@gmail.com", "creator": "jussi.kalliokoski@gmail.com", "creation_time": "2011-06-20T04:37:18Z", "raw_text": "Ok, I've made an optional workaround to audiolib.js , using a home-baked postMessage-based setInterval replacement.\n\nI don't know if it makes sense to detect whether it touches the Audio API, it would make more sense to have some way of creating a timer that works in the background as well, such as\n\nsetTimeout.createFixed(callback, timeout);\n\nThen on the other hand, if you know what you're doing, you can make it work anyway, with the postMessage, but that's a bit intruding, so if you need that functionality, you can't make it a default in a library, for instance.", "attachment_id": null, "time": "2011-06-20T04:37:18Z", "text": "Ok, I've made an optional workaround to audiolib.js , using a home-baked postMessage-based setInterval replacement.\n\nI don't know if it makes sense to detect whether it touches the Audio API, it would make more sense to have some way of creating a timer that works in the background as well, such as\n\nsetTimeout.createFixed(callback, timeout);\n\nThen on the other hand, if you know what you're doing, you can make it work anyway, with the postMessage, but that's a bit intruding, so if you need that functionality, you can't make it a default in a library, for instance.", "id": 5541903, "tags": [], "count": 10, "is_private": false, "bug_id": 665000}, {"creation_time": "2011-06-20T12:12:58Z", "raw_text": "> Then on the other hand, if you know what you're doing, you can make it work\n> anyway, with the postMessage, but that's a bit intruding, so if you need\n> that functionality, you can't make it a default in a library, for instance.\n\nJussi, you should try having it use the APIs and builds that Yury made here: http://async5.org/audiodata/workerAudio/play.html.", "author": "david.humphrey@senecacollege.ca", "attachment_id": null, "time": "2011-06-20T12:12:58Z", "creator": "david.humphrey@senecacollege.ca", "text": "> Then on the other hand, if you know what you're doing, you can make it work\n> anyway, with the postMessage, but that's a bit intruding, so if you need\n> that functionality, you can't make it a default in a library, for instance.\n\nJussi, you should try having it use the APIs and builds that Yury made here: http://async5.org/audiodata/workerAudio/play.html.", "id": 5542313, "tags": [], "count": 11, "is_private": false, "bug_id": 665000}, {"text": "By the way, Jussi added the postMessage workaround, and I've enabled it on jsmad.org - it works, but the UI is less responsive and it nows sometimes blocks for a split second whereas it did not do that before (with setTimeout)", "time": "2011-06-20T12:20:42Z", "attachment_id": null, "creation_time": "2011-06-20T12:20:42Z", "raw_text": "By the way, Jussi added the postMessage workaround, and I've enabled it on jsmad.org - it works, but the UI is less responsive and it nows sometimes blocks for a split second whereas it did not do that before (with setTimeout)", "bug_id": 665000, "tags": [], "is_private": false, "count": 12, "id": 5542326, "creator": "amos@official.fm", "author": "amos@official.fm"}, {"bug_id": 665000, "id": 5542367, "is_private": false, "count": 13, "tags": [], "time": "2011-06-20T12:58:43Z", "attachment_id": null, "text": "David: That's otherwise a great solution, but it would leave Fx4 and and Chrome out of the picture. That said, kudos to Yury and the rest of you for all the great work you've been doing with that, I've been watching the progress with enthusiasm.\n\nI have to confirm Amos' statement, using postMessage instead of setTimeout in this case is very intrusive and not so nice performance-wise, in this case, that's why I decided from the start to disable the behaviour in audiolib.js by default.\n\nIs there a way to feature detect audio workers?", "raw_text": "David: That's otherwise a great solution, but it would leave Fx4 and and Chrome out of the picture. That said, kudos to Yury and the rest of you for all the great work you've been doing with that, I've been watching the progress with enthusiasm.\n\nI have to confirm Amos' statement, using postMessage instead of setTimeout in this case is very intrusive and not so nice performance-wise, in this case, that's why I decided from the start to disable the behaviour in audiolib.js by default.\n\nIs there a way to feature detect audio workers?", "creation_time": "2011-06-20T12:58:43Z", "author": "jussi.kalliokoski@gmail.com", "creator": "jussi.kalliokoski@gmail.com"}, {"id": 5542383, "is_private": false, "count": 14, "tags": [], "bug_id": 665000, "raw_text": "As Jussi said, Audio Workers look really neat, but we have to worry about cross-browser here, and browser detection is not a viable solution.", "creation_time": "2011-06-20T13:13:34Z", "attachment_id": null, "time": "2011-06-20T13:13:34Z", "author": "amos@official.fm", "creator": "amos@official.fm", "text": "As Jussi said, Audio Workers look really neat, but we have to worry about cross-browser here, and browser detection is not a viable solution."}, {"author": "roc@ocallahan.org", "creator": "roc@ocallahan.org", "raw_text": "All the methods are browser-dependent at the moment.", "creation_time": "2011-06-20T13:18:04Z", "attachment_id": null, "time": "2011-06-20T13:18:04Z", "text": "All the methods are browser-dependent at the moment.", "id": 5542388, "tags": [], "is_private": false, "count": 15, "bug_id": 665000}, {"creator": "amos@official.fm", "author": "amos@official.fm", "bug_id": 665000, "is_private": false, "count": 16, "tags": [], "id": 5542389, "text": "(In reply to comment #15)\n> All the methods are browser-dependent at the moment.\n\nYes, obviously, but feature detection is much more desirable than browser detection. That way, if other vendors implement it, client code works without any modification. That was my point :)", "attachment_id": null, "time": "2011-06-20T13:19:52Z", "creation_time": "2011-06-20T13:19:52Z", "raw_text": "(In reply to comment #15)\n> All the methods are browser-dependent at the moment.\n\nYes, obviously, but feature detection is much more desirable than browser detection. That way, if other vendors implement it, client code works without any modification. That was my point :)"}, {"text": "Jussi, what about using postMessage + workers as a hack.\nhttp://mozilla.pettay.fi/moztests/audio/audio.html seems to work in \nbackground tabs.\nIt uses a trivial worker\nhttp://mozilla.pettay.fi/moztests/audio/audioworker.js", "creator": "bugs@pettay.fi", "author": "bugs@pettay.fi", "attachment_id": null, "time": "2011-06-20T14:47:44Z", "raw_text": "Jussi, what about using postMessage + workers as a hack.\nhttp://mozilla.pettay.fi/moztests/audio/audio.html seems to work in \nbackground tabs.\nIt uses a trivial worker\nhttp://mozilla.pettay.fi/moztests/audio/audioworker.js", "creation_time": "2011-06-20T14:47:44Z", "bug_id": 665000, "tags": [], "is_private": false, "count": 17, "id": 5542526}, {"id": 5542534, "tags": [], "is_private": false, "count": 18, "bug_id": 665000, "raw_text": "That was a very quick hack and the example itself (copied from\nhttps://wiki.mozilla.org/Audio_Data_API#Complete_Example:_Creating_a_Web_Based_Tone_Generator)\ndoesn't seem to handle errors in all the cases.", "creation_time": "2011-06-20T14:51:22Z", "attachment_id": null, "time": "2011-06-20T14:51:22Z", "text": "That was a very quick hack and the example itself (copied from\nhttps://wiki.mozilla.org/Audio_Data_API#Complete_Example:_Creating_a_Web_Based_Tone_Generator)\ndoesn't seem to handle errors in all the cases.", "author": "bugs@pettay.fi", "creator": "bugs@pettay.fi"}, {"creation_time": "2011-06-20T16:42:07Z", "raw_text": "Olli, I implemented the inline worker (with blob urls) that we discussed about into the hack in audiolib.js, where BlobBuilder is available, and that's working nice, otherwise it will fall back to the postMessage loveliness. But I think the options are still not so nice:\n\n1. Use postMessage for Fx4 and Fx5, and Fx6+ will have the worker hack. The problem is that Fx4 doesn't need the background work hack to be enabled, and actually would be better without it.\n\n2. Browser detect (I wish there was some way to feature detect whether you can trust the timeouts to do what you tell them to), and disable the hack for Fx4.", "text": "Olli, I implemented the inline worker (with blob urls) that we discussed about into the hack in audiolib.js, where BlobBuilder is available, and that's working nice, otherwise it will fall back to the postMessage loveliness. But I think the options are still not so nice:\n\n1. Use postMessage for Fx4 and Fx5, and Fx6+ will have the worker hack. The problem is that Fx4 doesn't need the background work hack to be enabled, and actually would be better without it.\n\n2. Browser detect (I wish there was some way to feature detect whether you can trust the timeouts to do what you tell them to), and disable the hack for Fx4.", "creator": "jussi.kalliokoski@gmail.com", "time": "2011-06-20T16:42:07Z", "attachment_id": null, "author": "jussi.kalliokoski@gmail.com", "count": 19, "is_private": false, "tags": [], "id": 5542828, "bug_id": 665000}, {"tags": [], "count": 20, "is_private": false, "id": 5543710, "bug_id": 665000, "creation_time": "2011-06-20T21:28:24Z", "raw_text": "This is 5-specific since we added the clamping in FF5, but we're not going to track this for tomorrow's release.", "text": "This is 5-specific since we added the clamping in FF5, but we're not going to track this for tomorrow's release.", "time": "2011-06-20T21:28:24Z", "attachment_id": null, "creator": "bugzilla@johnath.com", "author": "bugzilla@johnath.com"}, {"raw_text": "We'll be tracking this for 5 and 6 since we may learn from 5 that we should adjust how aggressively we clamp timeouts in background tabs and adjust in 6 based on what we learn.", "creation_time": "2011-06-21T22:00:07Z", "text": "We'll be tracking this for 5 and 6 since we may learn from 5 that we should adjust how aggressively we clamp timeouts in background tabs and adjust in 6 based on what we learn.", "attachment_id": null, "time": "2011-06-21T22:00:07Z", "is_private": false, "count": 21, "tags": [], "id": 5546717, "bug_id": 665000, "creator": "jstenback+bmo@gmail.com", "author": "jstenback+bmo@gmail.com"}, {"attachment_id": null, "time": "2011-07-07T21:50:56Z", "text": "no longer going to track this instance of the problem.", "creation_time": "2011-07-07T21:50:56Z", "raw_text": "no longer going to track this instance of the problem.", "bug_id": 665000, "id": 5579686, "tags": [], "count": 22, "is_private": false, "author": "asa@mozilla.com", "creator": "asa@mozilla.com"}, {"author": "grantgalitz@gmail.com", "creator": "grantgalitz@gmail.com", "creation_time": "2011-12-24T18:31:07Z", "raw_text": "What we need is a DOM event to be fired for when this clamping to 1000 ms happens, so that the web app can pause itself. Also another DOM event to un-pause itself for when the 1000 ms throttle removes itself. Affects my js emulator stuff too (and I use a single 16 ms setInterval to drive everything).", "attachment_id": null, "time": "2011-12-24T18:31:07Z", "text": "What we need is a DOM event to be fired for when this clamping to 1000 ms happens, so that the web app can pause itself. Also another DOM event to un-pause itself for when the 1000 ms throttle removes itself. Affects my js emulator stuff too (and I use a single 16 ms setInterval to drive everything).", "id": 5938812, "tags": [], "count": 23, "is_private": false, "bug_id": 665000}, {"raw_text": "> What we need is a DOM event to be fired for when this clamping to 1000 ms happens, so\n> that the web app can pause itself. Also another DOM event to un-pause itself for when\n> the 1000 ms throttle removes itself.\n\nhttp://dvcs.w3.org/hg/webperf/raw-file/tip/specs/PageVisibility/Overview.html#sec-visibilitychange-event", "creation_time": "2011-12-24T18:34:43Z", "attachment_id": null, "time": "2011-12-24T18:34:43Z", "text": "> What we need is a DOM event to be fired for when this clamping to 1000 ms happens, so\n> that the web app can pause itself. Also another DOM event to un-pause itself for when\n> the 1000 ms throttle removes itself.\n\nhttp://dvcs.w3.org/hg/webperf/raw-file/tip/specs/PageVisibility/Overview.html#sec-visibilitychange-event", "id": 5938815, "count": 24, "is_private": false, "tags": [], "bug_id": 665000, "author": "bzbarsky@mit.edu", "creator": "bzbarsky@mit.edu"}, {"raw_text": "Yup, Jussi and I should use that then to pause the core of the web apps.", "creation_time": "2011-12-24T18:36:51Z", "time": "2011-12-24T18:36:51Z", "attachment_id": null, "text": "Yup, Jussi and I should use that then to pause the core of the web apps.", "id": 5938817, "tags": [], "is_private": false, "count": 25, "bug_id": 665000, "author": "grantgalitz@gmail.com", "creator": "grantgalitz@gmail.com"}, {"bug_id": 665000, "id": 5938823, "count": 26, "is_private": false, "tags": [], "attachment_id": null, "time": "2011-12-24T18:43:33Z", "text": "Well then... if we assume that realtime audio applications will pause themselves when they're in the background, then we lose an edge to Flash (ie. I pretty much always have the Grooveshark player as a background tab as I do other stuff.) I know the answer will be \"you need to use the HTML5 <audio> tag to play music tracks anyway\" but this approach has shortcomings as well..", "raw_text": "Well then... if we assume that realtime audio applications will pause themselves when they're in the background, then we lose an edge to Flash (ie. I pretty much always have the Grooveshark player as a background tab as I do other stuff.) I know the answer will be \"you need to use the HTML5 <audio> tag to play music tracks anyway\" but this approach has shortcomings as well..", "creation_time": "2011-12-24T18:43:33Z", "author": "amos@official.fm", "creator": "amos@official.fm"}, {"count": 27, "is_private": false, "tags": [], "id": 5938829, "bug_id": 665000, "raw_text": "bz: Is document.visibilityState implemented yet?", "creation_time": "2011-12-24T18:46:54Z", "text": "bz: Is document.visibilityState implemented yet?", "attachment_id": null, "time": "2011-12-24T18:46:54Z", "creator": "grantgalitz@gmail.com", "author": "grantgalitz@gmail.com"}, {"raw_text": "https://github.com/grantgalitz/GameBoy-Online/commit/c4d0a132f98f1a2cf4b3cd0e40718fdb589beed1 has landed into the GBC emulator, though I don't see the API linked working (Seems to return null).", "creation_time": "2011-12-24T18:50:54Z", "time": "2011-12-24T18:50:54Z", "attachment_id": null, "text": "https://github.com/grantgalitz/GameBoy-Online/commit/c4d0a132f98f1a2cf4b3cd0e40718fdb589beed1 has landed into the GBC emulator, though I don't see the API linked working (Seems to return null).", "id": 5938830, "count": 28, "is_private": false, "tags": [], "bug_id": 665000, "author": "grantgalitz@gmail.com", "creator": "grantgalitz@gmail.com"}, {"author": "bzbarsky@mit.edu", "creator": "bzbarsky@mit.edu", "bug_id": 665000, "id": 5938838, "count": 29, "is_private": false, "tags": [], "time": "2011-12-24T19:16:05Z", "attachment_id": null, "text": "> bz: Is document.visibilityState implemented yet?\n\nYes, as you could trivially test...", "raw_text": "> bz: Is document.visibilityState implemented yet?\n\nYes, as you could trivially test...", "creation_time": "2011-12-24T19:16:05Z"}, {"author": "bzbarsky@mit.edu", "creator": "bzbarsky@mit.edu", "id": 5938839, "tags": [], "count": 30, "is_private": false, "bug_id": 665000, "raw_text": "Though note that all that stuff uses moz prefixes so far.", "creation_time": "2011-12-24T19:16:25Z", "time": "2011-12-24T19:16:25Z", "attachment_id": null, "text": "Though note that all that stuff uses moz prefixes so far."}, {"creator": "grantgalitz@gmail.com", "author": "grantgalitz@gmail.com", "bug_id": 665000, "is_private": false, "count": 31, "tags": [], "id": 5938857, "text": "Oh, it's only in Firefox 10 and up it seems (Was using Firefox 9 earlier). Yeah, also implemented the vendor-specific checks too:\n\n(!document.hidden && !document.msHidden && !document.mozHidden && !document.webkitHidden)", "time": "2011-12-24T19:27:38Z", "attachment_id": null, "creation_time": "2011-12-24T19:27:38Z", "raw_text": "Oh, it's only in Firefox 10 and up it seems (Was using Firefox 9 earlier). Yeah, also implemented the vendor-specific checks too:\n\n(!document.hidden && !document.msHidden && !document.mozHidden && !document.webkitHidden)"}, {"author": "grantgalitz@gmail.com", "time": "2011-12-24T20:54:40Z", "attachment_id": null, "text": "Is there any way to do this for Firefox versions 5 through 9? This API seems to be absent in anything before Firefox 10.", "creator": "grantgalitz@gmail.com", "creation_time": "2011-12-24T20:54:40Z", "raw_text": "Is there any way to do this for Firefox versions 5 through 9? This API seems to be absent in anything before Firefox 10.", "bug_id": 665000, "id": 5938884, "tags": [], "count": 32, "is_private": false}, {"tags": [], "count": 33, "is_private": false, "id": 5939227, "bug_id": 665000, "raw_text": "> Is there any way to do this for Firefox versions 5 through 9?\n\nNot really.", "creation_time": "2011-12-25T13:04:18Z", "text": "> Is there any way to do this for Firefox versions 5 through 9?\n\nNot really.", "attachment_id": null, "time": "2011-12-25T13:04:18Z", "creator": "bzbarsky@mit.edu", "author": "bzbarsky@mit.edu"}, {"raw_text": "This is a non-issue in sink.js in Firefox (excluding Firefox 5 because of this bug, and Firefox 8 because of https://bugzilla.mozilla.org/show_bug.cgi?id=699633 ). It can be worked around using inline workers that manage the timers instead, this allows for accurate timers in background tabs. Working around it by switching off the sounds/music is a bad idea, imho. Music especially is hardly ever something you have as the main focus when on a computer. For Firefox 5 and 8, sink.js just doesn't work properly in background tabs, though. :/", "creation_time": "2011-12-25T13:54:04Z", "attachment_id": null, "time": "2011-12-25T13:54:04Z", "author": "jussi.kalliokoski@gmail.com", "text": "This is a non-issue in sink.js in Firefox (excluding Firefox 5 because of this bug, and Firefox 8 because of https://bugzilla.mozilla.org/show_bug.cgi?id=699633 ). It can be worked around using inline workers that manage the timers instead, this allows for accurate timers in background tabs. Working around it by switching off the sounds/music is a bad idea, imho. Music especially is hardly ever something you have as the main focus when on a computer. For Firefox 5 and 8, sink.js just doesn't work properly in background tabs, though. :/", "creator": "jussi.kalliokoski@gmail.com", "id": 5939257, "count": 34, "is_private": false, "tags": [], "bug_id": 665000}, {"bug_id": 665000, "id": 5974476, "tags": [], "is_private": false, "count": 35, "time": "2012-01-12T03:56:51Z", "attachment_id": null, "text": "*** Bug 717413 has been marked as a duplicate of this bug. ***", "raw_text": "", "creation_time": "2012-01-12T03:56:51Z", "author": "bugzilla@mversen.de", "creator": "bugzilla@mversen.de"}, {"creator": "mtanalin@yandex.ru", "author": "mtanalin@yandex.ru", "text": "Since my bug 717413 is marked as dupe, below is copy of its description to prevent the info (including provided possible solutions) provided in that bug from getting lost.\n\n-----\n\nMusic cannot be listened in inactive tab when custom pure-JavaScript audio format decoder is used. Annoying.\n\nLive examples of pages where the issue reproduces:\n\nA. http://codecs.ofmlabs.org/ Pure-JavaScript MP3/ALAC decoders;\nB. http://www.abyss-online.de/disissid4/ Chip-tune JavaScript player.\n\nExample A reproduce the bug in Firefox 10b3 and does not in latest nightly 20120111031049, but example B reproduces the bug in _both_ Firefox 10b3 and latest nightly 20120111031049.\n\nThis bug makes it literally _impossible_ to listen custom-format music since music in the web is almost _always_ is listened _exactly_ in inactive (background) tab while viewing another sites in another tabs.\n\nAnd while with MP3 case music can be just reencoded to Ogg Vorbis, it's _absolutely impossible_ to workaround with synthesizing sound from non-wave-like format _on-the-fly_.\n\nThe issue is in place even if tab is pinned (via \"Pin as App Tab\" tab context-menu item).\n\nI currently see following probable solutions for this issue:\n\n1. (probably most proper) disable automatic CPU-saving measure for inactive tab (such CPU saving is implemented in bug 633421) if specific script running in such tab involves continuous _generating sound_;\n\n2. (relatively acceptable) disable automatic CPU-saving measure for _pinned_ inactive tabs;\n\n3. (relatively acceptable) add new checkbox item like \"Disable CPU saving for this tab\" to tab context-menu. Once the checkbox is turned on, tab works identically for both active and inactive states.\n\nGoogle Chrome has no such issue and plays generated sound smoothly in inactive tabs for both examples provided above. Flash-based players and synths (like that on http://www.photonstorm.com/flod page) work properly in inactive tabs too.\n\nSo this issue unfortunately makes Firefox less usable/competitive product.\n\nThanks.", "time": "2012-01-12T14:33:26Z", "attachment_id": null, "raw_text": "Since my bug 717413 is marked as dupe, below is copy of its description to prevent the info (including provided possible solutions) provided in that bug from getting lost.\n\n-----\n\nMusic cannot be listened in inactive tab when custom pure-JavaScript audio format decoder is used. Annoying.\n\nLive examples of pages where the issue reproduces:\n\nA. http://codecs.ofmlabs.org/ Pure-JavaScript MP3/ALAC decoders;\nB. http://www.abyss-online.de/disissid4/ Chip-tune JavaScript player.\n\nExample A reproduce the bug in Firefox 10b3 and does not in latest nightly 20120111031049, but example B reproduces the bug in _both_ Firefox 10b3 and latest nightly 20120111031049.\n\nThis bug makes it literally _impossible_ to listen custom-format music since music in the web is almost _always_ is listened _exactly_ in inactive (background) tab while viewing another sites in another tabs.\n\nAnd while with MP3 case music can be just reencoded to Ogg Vorbis, it's _absolutely impossible_ to workaround with synthesizing sound from non-wave-like format _on-the-fly_.\n\nThe issue is in place even if tab is pinned (via \"Pin as App Tab\" tab context-menu item).\n\nI currently see following probable solutions for this issue:\n\n1. (probably most proper) disable automatic CPU-saving measure for inactive tab (such CPU saving is implemented in bug 633421) if specific script running in such tab involves continuous _generating sound_;\n\n2. (relatively acceptable) disable automatic CPU-saving measure for _pinned_ inactive tabs;\n\n3. (relatively acceptable) add new checkbox item like \"Disable CPU saving for this tab\" to tab context-menu. Once the checkbox is turned on, tab works identically for both active and inactive states.\n\nGoogle Chrome has no such issue and plays generated sound smoothly in inactive tabs for both examples provided above. Flash-based players and synths (like that on http://www.photonstorm.com/flod page) work properly in inactive tabs too.\n\nSo this issue unfortunately makes Firefox less usable/competitive product.\n\nThanks.", "creation_time": "2012-01-12T14:33:26Z", "bug_id": 665000, "tags": [], "is_private": false, "count": 36, "id": 5975139}, {"creator": "bzbarsky@mit.edu", "author": "bzbarsky@mit.edu", "bug_id": 665000, "tags": [], "count": 37, "is_private": false, "id": 5975149, "text": "> Google Chrome has no such issue and plays generated sound smoothly in inactive tabs\n\nThat's quite odd, since it's more aggressive than we are in terms of what it turns off in background tabs.  Are those testcases running the same code in Firefox and Chrome?", "time": "2012-01-12T14:36:58Z", "attachment_id": null, "raw_text": "> Google Chrome has no such issue and plays generated sound smoothly in inactive tabs\n\nThat's quite odd, since it's more aggressive than we are in terms of what it turns off in background tabs.  Are those testcases running the same code in Firefox and Chrome?", "creation_time": "2012-01-12T14:36:58Z"}, {"creator": "bzbarsky@mit.edu", "author": "bzbarsky@mit.edu", "creation_time": "2012-01-12T14:42:03Z", "raw_text": "Actually, I just tried running the ALAC example at http://codecs.ofmlabs.org/ in a background tab in my Firefox nightly, and it works just fine.  Which explains why it works fine in Chrome: the code there deals with being in a background tab ok.\n\nI'm going to reopen bug 717413 since it's about a different problem than this bug: this bug was about code that _doesn't_ handle the background tab clamping.", "text": "Actually, I just tried running the ALAC example at http://codecs.ofmlabs.org/ in a background tab in my Firefox nightly, and it works just fine.  Which explains why it works fine in Chrome: the code there deals with being in a background tab ok.\n\nI'm going to reopen bug 717413 since it's about a different problem than this bug: this bug was about code that _doesn't_ handle the background tab clamping.", "time": "2012-01-12T14:42:03Z", "attachment_id": null, "is_private": false, "count": 38, "tags": [], "id": 5975172, "bug_id": 665000}, {"bug_id": 665000, "id": 5975177, "is_private": false, "count": 39, "tags": [], "attachment_id": null, "time": "2012-01-12T14:46:44Z", "author": "jussi.kalliokoski@gmail.com", "text": "http://codecs.ofmlabs.org/ works just fine in background in Firefox (excluding 8 [because of https://bugzilla.mozilla.org/show_bug.cgi?id=699633] and 5 [because of this bug]), because it's using the latest version of sink.js\n\n@Marat A really cool demo you've got there, if you want to make it use sink.js (which has a function called doInterval for timers that work in background tabs too, and protection against several other bugs in the browser audio minefield as well), and need help doing so, drop me a line on GitHub, my handle is jussi-kalliokoski. Or you can come to #ofmlabs on freenode IRC. It should be pretty straightforward though.", "creator": "jussi.kalliokoski@gmail.com", "raw_text": "http://codecs.ofmlabs.org/ works just fine in background in Firefox (excluding 8 [because of https://bugzilla.mozilla.org/show_bug.cgi?id=699633] and 5 [because of this bug]), because it's using the latest version of sink.js\n\n@Marat A really cool demo you've got there, if you want to make it use sink.js (which has a function called doInterval for timers that work in background tabs too, and protection against several other bugs in the browser audio minefield as well), and need help doing so, drop me a line on GitHub, my handle is jussi-kalliokoski. Or you can come to #ofmlabs on freenode IRC. It should be pretty straightforward though.", "creation_time": "2012-01-12T14:46:44Z"}, {"raw_text": "Oh, wait.  You said that the ofmlabs code works on nightly.  OK, so no problem there; I can confirm that.\n\nThe testcase at http://www.abyss-online.de/disissid4/ browser-sniffs and runs different code in Chrome and Firefox: it uses the webkitAudioContext stuff in webkit, but uses setInterval in Gecko.  All that site needs is for us to finish up the new audio API stuff, which is specifically designed to allow audio to play without dropping out (e.g. not even running on the main browser thread) and then to use the new APIs.", "creation_time": "2012-01-12T14:48:16Z", "author": "bzbarsky@mit.edu", "time": "2012-01-12T14:48:16Z", "attachment_id": null, "creator": "bzbarsky@mit.edu", "text": "Oh, wait.  You said that the ofmlabs code works on nightly.  OK, so no problem there; I can confirm that.\n\nThe testcase at http://www.abyss-online.de/disissid4/ browser-sniffs and runs different code in Chrome and Firefox: it uses the webkitAudioContext stuff in webkit, but uses setInterval in Gecko.  All that site needs is for us to finish up the new audio API stuff, which is specifically designed to allow audio to play without dropping out (e.g. not even running on the main browser thread) and then to use the new APIs.", "id": 5975179, "tags": [], "count": 40, "is_private": false, "bug_id": 665000}, {"creation_time": "2012-01-12T14:49:09Z", "raw_text": "Oh, and even while using setInterval the disissid4 code would work fine if it used a longer buffer, of course.", "text": "Oh, and even while using setInterval the disissid4 code would work fine if it used a longer buffer, of course.", "creator": "bzbarsky@mit.edu", "author": "bzbarsky@mit.edu", "attachment_id": null, "time": "2012-01-12T14:49:09Z", "tags": [], "is_private": false, "count": 41, "id": 5975182, "bug_id": 665000}, {"creator": "mtanalin@yandex.ru", "author": "mtanalin@yandex.ru", "bug_id": 665000, "tags": [], "count": 42, "is_private": false, "id": 5975186, "text": "It makes sense to add that Audio Workers seems to be not a too good idea since:\n\n1. inventing a new setInterval/setTimeout alternative for each new usecase is propectless dead-end road;\n\n2. necessity to create separate _file_ just to attach some JS _code_ to audio is annoying and harmful since it inevitably forces to make another request to server thus slowing down page-loading.\n\nAlso, it likely cannot be impossible to determine that tab is generating audio data. Human can hear that sound plays, computer's audio mixer shows peaking levels, so nothing prevents browser to determine this as well.\n\npostMessage() workaround looks like not too good idea sinde that is based on specifics of current implementation of browser and probably can get same clamping problem in future.\n\nSo, it likely makes sense to first consider disabling automatic CPU-saving measure for inactive tab if specific script running in such tab involves continuous generating sound.\n\nThanks.", "attachment_id": null, "time": "2012-01-12T14:51:02Z", "raw_text": "It makes sense to add that Audio Workers seems to be not a too good idea since:\n\n1. inventing a new setInterval/setTimeout alternative for each new usecase is propectless dead-end road;\n\n2. necessity to create separate _file_ just to attach some JS _code_ to audio is annoying and harmful since it inevitably forces to make another request to server thus slowing down page-loading.\n\nAlso, it likely cannot be impossible to determine that tab is generating audio data. Human can hear that sound plays, computer's audio mixer shows peaking levels, so nothing prevents browser to determine this as well.\n\npostMessage() workaround looks like not too good idea sinde that is based on specifics of current implementation of browser and probably can get same clamping problem in future.\n\nSo, it likely makes sense to first consider disabling automatic CPU-saving measure for inactive tab if specific script running in such tab involves continuous generating sound.\n\nThanks.", "creation_time": "2012-01-12T14:51:02Z"}, {"raw_text": "(In reply to Jussi Kalliokoski from comment #39)\n\n> @Marat A really cool demo you've got there, if you want to make it use\n> sink.js (which has a function called doInterval for timers that work in\n> background tabs too, and protection against several other bugs in the\n> browser audio minefield as well), and need help doing so, drop me a line on\n> GitHub, my handle is jussi-kalliokoski. Or you can come to #ofmlabs on\n> freenode IRC. It should be pretty straightforward though.\n\nI am not author of the example, so I'm just a user (not web-developer) in this case.", "creation_time": "2012-01-12T14:55:01Z", "time": "2012-01-12T14:55:01Z", "attachment_id": null, "text": "(In reply to Jussi Kalliokoski from comment #39)\n\n> @Marat A really cool demo you've got there, if you want to make it use\n> sink.js (which has a function called doInterval for timers that work in\n> background tabs too, and protection against several other bugs in the\n> browser audio minefield as well), and need help doing so, drop me a line on\n> GitHub, my handle is jussi-kalliokoski. Or you can come to #ofmlabs on\n> freenode IRC. It should be pretty straightforward though.\n\nI am not author of the example, so I'm just a user (not web-developer) in this case.", "id": 5975192, "is_private": false, "count": 43, "tags": [], "bug_id": 665000, "author": "mtanalin@yandex.ru", "creator": "mtanalin@yandex.ru"}, {"bug_id": 665000, "id": 5975195, "count": 44, "is_private": false, "tags": [], "time": "2012-01-12T14:56:28Z", "attachment_id": null, "text": "(In reply to Boris Zbarsky (:bz) from comment #41)\n\n> Oh, and even while using setInterval the disissid4 code would work fine if\n> it used a longer buffer, of course.\n\nAs it mentioned by Amos above in comment 6, using longer buffer may cause issues with pausing.", "creation_time": "2012-01-12T14:56:28Z", "raw_text": "(In reply to Boris Zbarsky (:bz) from comment #41)\n\n> Oh, and even while using setInterval the disissid4 code would work fine if\n> it used a longer buffer, of course.\n\nAs it mentioned by Amos above in comment 6, using longer buffer may cause issues with pausing.", "author": "mtanalin@yandex.ru", "creator": "mtanalin@yandex.ru"}, {"is_private": false, "count": 45, "tags": [], "id": 5975223, "bug_id": 665000, "raw_text": "Yes, long buffering doesn't work except in rare cases, because the current Audio Data API doesn't handle the tail, so you may not be (and probably aren't) able to buffer a whole second at a time.", "creation_time": "2012-01-12T15:07:49Z", "text": "Yes, long buffering doesn't work except in rare cases, because the current Audio Data API doesn't handle the tail, so you may not be (and probably aren't) able to buffer a whole second at a time.", "creator": "jussi.kalliokoski@gmail.com", "time": "2012-01-12T15:07:49Z", "attachment_id": null, "author": "jussi.kalliokoski@gmail.com"}, {"bug_id": 665000, "count": 46, "is_private": false, "tags": [], "id": 5976295, "text": "(In reply to Marat Tanalin | tanalin.com from comment #42)\n> 2. necessity to create separate _file_ just to attach some JS _code_ to\n> audio is annoying and harmful since it inevitably forces to make another\n> request to server thus slowing down page-loading.\n\nIt's actually possible to work around this by copying script content into a Blob and using that Blob as the source for the worker.", "time": "2012-01-12T20:04:21Z", "attachment_id": null, "raw_text": "(In reply to Marat Tanalin | tanalin.com from comment #42)\n> 2. necessity to create separate _file_ just to attach some JS _code_ to\n> audio is annoying and harmful since it inevitably forces to make another\n> request to server thus slowing down page-loading.\n\nIt's actually possible to work around this by copying script content into a Blob and using that Blob as the source for the worker.", "creation_time": "2012-01-12T20:04:21Z", "creator": "roc@ocallahan.org", "author": "roc@ocallahan.org"}, {"creator": "mtanalin@yandex.ru", "author": "mtanalin@yandex.ru", "text": "(In reply to comment #46)\n\nInventing a feature that knowingly have to be worked around right after being implemented looks like wrong way.\n\nThis is in addition to being wrong way according to argument #1 (in comment 42) that is fundamentally more important. It's browser's work to determine if audio is generated/played and to _transparently_ tweak timeout interval for specific tab without any additional efforts on web-developer side.", "attachment_id": null, "time": "2012-01-13T08:27:26Z", "creation_time": "2012-01-13T08:27:26Z", "raw_text": "(In reply to comment #46)\n\nInventing a feature that knowingly have to be worked around right after being implemented looks like wrong way.\n\nThis is in addition to being wrong way according to argument #1 (in comment 42) that is fundamentally more important. It's browser's work to determine if audio is generated/played and to _transparently_ tweak timeout interval for specific tab without any additional efforts on web-developer side.", "bug_id": 665000, "is_private": false, "count": 47, "tags": [], "id": 5977931}, {"creator": "grantgalitz@gmail.com", "author": "grantgalitz@gmail.com", "text": "The problem here is that the web developer isn't given the option to initially override the throttles. There should be an extension of sort to disable the throttles and to further configure the aspects of the timer. Working around a feature that's also a bug in some cases is so ugly. Why not just extend the timer APIs instead?", "time": "2012-01-13T09:16:35Z", "attachment_id": null, "creation_time": "2012-01-13T09:16:35Z", "raw_text": "The problem here is that the web developer isn't given the option to initially override the throttles. There should be an extension of sort to disable the throttles and to further configure the aspects of the timer. Working around a feature that's also a bug in some cases is so ugly. Why not just extend the timer APIs instead?", "bug_id": 665000, "tags": [], "is_private": false, "count": 48, "id": 5977983}, {"creator": "grantgalitz@gmail.com", "author": "grantgalitz@gmail.com", "creation_time": "2012-01-13T09:26:21Z", "raw_text": "Possibly in the near future there could be a clean break from setInterval/setTimeout  (while keeping these older APIs around) that are much more configurable. Think event queue priority, type of timer accuracy algorithm to use, etc.", "text": "Possibly in the near future there could be a clean break from setInterval/setTimeout  (while keeping these older APIs around) that are much more configurable. Think event queue priority, type of timer accuracy algorithm to use, etc.", "attachment_id": null, "time": "2012-01-13T09:26:21Z", "tags": [], "count": 49, "is_private": false, "id": 5977990, "bug_id": 665000}, {"time": "2012-01-13T09:44:17Z", "attachment_id": null, "text": "(In reply to comment #48)\nWeb developer does not need and should not be forced to make extra efforts here. Since there is generally no sense in playing more than one sound source (coming from different tabs) simultaneously (user will appearently not have more than one sound-generating tab opened at once), it's enough to just automatically disable timer clamping for tab that generates sound.\n\nClamping is browser's feature; it's potentially good, but if it causes problems for user experience, then implementation of clamping (not of web-app) should be improved.\n\nThe way to misfortune is paved with good intentions. Good intention is clamping here. What matters is implementation.", "creation_time": "2012-01-13T09:44:17Z", "raw_text": "(In reply to comment #48)\nWeb developer does not need and should not be forced to make extra efforts here. Since there is generally no sense in playing more than one sound source (coming from different tabs) simultaneously (user will appearently not have more than one sound-generating tab opened at once), it's enough to just automatically disable timer clamping for tab that generates sound.\n\nClamping is browser's feature; it's potentially good, but if it causes problems for user experience, then implementation of clamping (not of web-app) should be improved.\n\nThe way to misfortune is paved with good intentions. Good intention is clamping here. What matters is implementation.", "bug_id": 665000, "id": 5978004, "is_private": false, "count": 50, "tags": [], "author": "mtanalin@yandex.ru", "creator": "mtanalin@yandex.ru"}, {"tags": [], "is_private": false, "count": 51, "id": 5978010, "bug_id": 665000, "raw_text": "(In reply to Grant Galitz from comment #49)\n> Possibly in the near future there could be a clean break from\n> setInterval/setTimeout  (while keeping these older APIs around) that are\n> much more configurable. Think event queue priority, type of timer accuracy\n> algorithm to use, etc.\n\nIf there will be new setTimeout-like feature that will allow web-developer to force disabling timer clamping, then nothing will prevent web-developers from disable clamping _always_. This would lead browser vendors to invent a new way to clamp (with same good intention to save CPU power), and the story will repeat. Dead-end road.", "creation_time": "2012-01-13T09:50:58Z", "text": "(In reply to Grant Galitz from comment #49)\n> Possibly in the near future there could be a clean break from\n> setInterval/setTimeout  (while keeping these older APIs around) that are\n> much more configurable. Think event queue priority, type of timer accuracy\n> algorithm to use, etc.\n\nIf there will be new setTimeout-like feature that will allow web-developer to force disabling timer clamping, then nothing will prevent web-developers from disable clamping _always_. This would lead browser vendors to invent a new way to clamp (with same good intention to save CPU power), and the story will repeat. Dead-end road.", "time": "2012-01-13T09:50:58Z", "attachment_id": null, "creator": "mtanalin@yandex.ru", "author": "mtanalin@yandex.ru"}, {"creator": "alex_mayorga@yahoo.com", "author": "alex_mayorga@yahoo.com", "text": "(In reply to Marat Tanalin | tanalin.com from comment #50)\n> here. Since there is generally no sense in playing more than one sound\n> source (coming from different tabs) simultaneously (user will appearently\n> not have more than one sound-generating tab opened at once), it's enough to\n> just automatically disable timer clamping for tab that generates sound.\n\nAnd right there you've killed all unborn webDJs =(", "attachment_id": null, "time": "2012-03-28T22:16:41Z", "creation_time": "2012-03-28T22:16:41Z", "raw_text": "(In reply to Marat Tanalin | tanalin.com from comment #50)\n> here. Since there is generally no sense in playing more than one sound\n> source (coming from different tabs) simultaneously (user will appearently\n> not have more than one sound-generating tab opened at once), it's enough to\n> just automatically disable timer clamping for tab that generates sound.\n\nAnd right there you've killed all unborn webDJs =(", "bug_id": 665000, "count": 52, "is_private": false, "tags": [], "id": 6179938}, {"creator": "mtanalin@yandex.ru", "author": "mtanalin@yandex.ru", "bug_id": 665000, "tags": [], "is_private": false, "count": 53, "id": 6180357, "text": "(In reply to alex_mayorga from comment #52)\nEither you've missed \"coming from _different_ tabs\" part, or you just don't understand the subject adequately.", "time": "2012-03-29T00:01:41Z", "attachment_id": null, "creation_time": "2012-03-29T00:01:41Z", "raw_text": "(In reply to alex_mayorga from comment #52)\nEither you've missed \"coming from _different_ tabs\" part, or you just don't understand the subject adequately."}]}}}