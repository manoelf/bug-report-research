{"comments": {}, "bugs": {"701591": {"comments": [{"raw_text": "When loading a data URL like \"data:text/html,<title>tab 1</title>\" in a tab, the label of the tab is still \"Connecting\u2026\" on DOMContentLoaded.  For non-data: URLs, however, the label is the title of the page by that point, and that is what I would expect to be the case for data: URLs as well.\n\nA tab label gets set to the title of a page being loaded in the tab in two ways:\n\n1. on DOMTitleChanged, which is dispatched by nsDocument::DoNotifyPossibleTitleChange <http://mxr.mozilla.org/mozilla-central/source/content/base/src/nsDocument.cpp#5291> and handled by tabbrowser::DOMTitleChanged <http://mxr.mozilla.org/mozilla-central/source/browser/base/content/tabbrowser.xml#2653>;\n\n2. in tabbrowser::mTabProgressListener::onStateChange <http://mxr.mozilla.org/mozilla-central/source/browser/base/content/tabbrowser.xml#580>, if the title is still \"Connecting\u2026\" when (aStateFlags & nsIWebProgressListener.STATE_STOP && aStateFlags & nsIWebProgressListener.STATE_IS_NETWORK).\n\nPerhaps this is because DOMTitleChanged is dispatched asynchronously, while DOMContentLoaded is dispatched synchronously for data: URLs per nsXMLDocument::EndLoad <http://mxr.mozilla.org/mozilla-central/source/content/xml/document/src/nsXMLDocument.cpp#585> and thus DOMContentLoaded arrives before DOMTitleChanged (and before nsIWebProgressListeners are notified)?\n\nGavin noted in IRC that MXR blame suggests bug 461555 is related and sicking might know more, so cc:ing him.\n\nsicking: is this the intended behavior (resolution: invalid), an unfortunate but unfixable side effect of other intended behavior (resolution: wontfix), or is there perhaps some way to solve this (dispatch DOMContentLoaded for data: URLs asynchronously, dispatch DOMTitleChanged for them synchronously, etc.)?", "attachment_id": null, "text": "When loading a data URL like \"data:text/html,<title>tab 1</title>\" in a tab, the label of the tab is still \"Connecting\u2026\" on DOMContentLoaded.  For non-data: URLs, however, the label is the title of the page by that point, and that is what I would expect to be the case for data: URLs as well.\n\nA tab label gets set to the title of a page being loaded in the tab in two ways:\n\n1. on DOMTitleChanged, which is dispatched by nsDocument::DoNotifyPossibleTitleChange <http://mxr.mozilla.org/mozilla-central/source/content/base/src/nsDocument.cpp#5291> and handled by tabbrowser::DOMTitleChanged <http://mxr.mozilla.org/mozilla-central/source/browser/base/content/tabbrowser.xml#2653>;\n\n2. in tabbrowser::mTabProgressListener::onStateChange <http://mxr.mozilla.org/mozilla-central/source/browser/base/content/tabbrowser.xml#580>, if the title is still \"Connecting\u2026\" when (aStateFlags & nsIWebProgressListener.STATE_STOP && aStateFlags & nsIWebProgressListener.STATE_IS_NETWORK).\n\nPerhaps this is because DOMTitleChanged is dispatched asynchronously, while DOMContentLoaded is dispatched synchronously for data: URLs per nsXMLDocument::EndLoad <http://mxr.mozilla.org/mozilla-central/source/content/xml/document/src/nsXMLDocument.cpp#585> and thus DOMContentLoaded arrives before DOMTitleChanged (and before nsIWebProgressListeners are notified)?\n\nGavin noted in IRC that MXR blame suggests bug 461555 is related and sicking might know more, so cc:ing him.\n\nsicking: is this the intended behavior (resolution: invalid), an unfortunate but unfixable side effect of other intended behavior (resolution: wontfix), or is there perhaps some way to solve this (dispatch DOMContentLoaded for data: URLs asynchronously, dispatch DOMTitleChanged for them synchronously, etc.)?", "bug_id": 701591, "tags": [], "is_private": false, "count": 0, "id": 5841872, "author": "myk@mykzilla.org", "creator": "myk@mykzilla.org", "creation_time": "2011-11-11T01:08:13Z", "time": "2011-11-11T01:08:13Z"}, {"text": "I talked to sicking on this. He suspects that it's a docshell problem, and it might be fixable. Will investigate further.", "bug_id": 701591, "tags": [], "raw_text": "I talked to sicking on this. He suspects that it's a docshell problem, and it might be fixable. Will investigate further.", "attachment_id": null, "author": "ejpbruel@mozilla.com", "creator": "ejpbruel@mozilla.com", "creation_time": "2011-12-14T21:38:00Z", "time": "2011-12-14T21:38:00Z", "is_private": false, "count": 1, "id": 5916959}, {"text": "I see this problem in the SDK tests (with the fix for bug 682681), and I'm trying to reduce a testcase, but I'm having trouble doing so.  Here is the current version of the testcase (paste this into the Error Console's code evaluation field and evaluate it):\n\nvar tabbrowser = Components.classes[\"@mozilla.org/appshell/window-mediator;1\"].\ngetService(Components.interfaces.nsIWindowMediator).\ngetMostRecentWindow(\"navigator:browser\").gBrowser;\nvar tab = tabbrowser.addTab();\ntabbrowser.selectedTab = tab;\nvar browser = tabbrowser.getBrowserForTab(tab);\nbrowser.addEventListener(\"DOMContentLoaded\", function() { alert(tab.label) }, true, true);\ntabbrowser.loadURI(\"data:text/html,<title>tab 1</title>\");\n\nThis testcase correctly alerts \"tab 1\", though, and I'm not sure why.", "bug_id": 701591, "tags": [], "attachment_id": null, "raw_text": "I see this problem in the SDK tests (with the fix for bug 682681), and I'm trying to reduce a testcase, but I'm having trouble doing so.  Here is the current version of the testcase (paste this into the Error Console's code evaluation field and evaluate it):\n\nvar tabbrowser = Components.classes[\"@mozilla.org/appshell/window-mediator;1\"].\ngetService(Components.interfaces.nsIWindowMediator).\ngetMostRecentWindow(\"navigator:browser\").gBrowser;\nvar tab = tabbrowser.addTab();\ntabbrowser.selectedTab = tab;\nvar browser = tabbrowser.getBrowserForTab(tab);\nbrowser.addEventListener(\"DOMContentLoaded\", function() { alert(tab.label) }, true, true);\ntabbrowser.loadURI(\"data:text/html,<title>tab 1</title>\");\n\nThis testcase correctly alerts \"tab 1\", though, and I'm not sure why.", "time": "2011-12-15T20:10:46Z", "creation_time": "2011-12-15T20:10:46Z", "creator": "myk@mykzilla.org", "author": "myk@mykzilla.org", "id": 5919902, "count": 2, "is_private": false}, {"raw_text": "ejpbruel pinged me about this on IRC. After looking into tabs API I noticed that we use 'DOMContentLoaded' event listener on browser:\n\nhttps://github.com/mozilla/addon-sdk/blob/master/packages/api-utils/lib/tabs/tab.js#L80\nhttps://github.com/mozilla/addon-sdk/blob/master/packages/api-utils/lib/tabs/events.js#L42\n\nwhich is exactly what myks reduced case does, but in contrast to his test case we use tab's contentDocument.title for a tab label:\n\nhttps://github.com/mozilla/addon-sdk/blob/master/packages/api-utils/lib/tabs/tab.js#L136\n\nI have modified test case from myk to match that:\n\nvar tabbrowser = Components.classes[\"@mozilla.org/appshell/window-mediator;1\"].\ngetService(Components.interfaces.nsIWindowMediator).\ngetMostRecentWindow(\"navigator:browser\").gBrowser;\nvar tab = tabbrowser.addTab();\ntabbrowser.selectedTab = tab;\nvar browser = tabbrowser.getBrowserForTab(tab);\nbrowser.addEventListener(\"DOMContentLoaded\", function() { alert(browser.contentDocument.title) }, true, true);\ntabbrowser.loadURI(\"data:text/html,<title>tab 1</title>\");\n\nunfortunately it seems to work fine here as well", "attachment_id": null, "text": "ejpbruel pinged me about this on IRC. After looking into tabs API I noticed that we use 'DOMContentLoaded' event listener on browser:\n\nhttps://github.com/mozilla/addon-sdk/blob/master/packages/api-utils/lib/tabs/tab.js#L80\nhttps://github.com/mozilla/addon-sdk/blob/master/packages/api-utils/lib/tabs/events.js#L42\n\nwhich is exactly what myks reduced case does, but in contrast to his test case we use tab's contentDocument.title for a tab label:\n\nhttps://github.com/mozilla/addon-sdk/blob/master/packages/api-utils/lib/tabs/tab.js#L136\n\nI have modified test case from myk to match that:\n\nvar tabbrowser = Components.classes[\"@mozilla.org/appshell/window-mediator;1\"].\ngetService(Components.interfaces.nsIWindowMediator).\ngetMostRecentWindow(\"navigator:browser\").gBrowser;\nvar tab = tabbrowser.addTab();\ntabbrowser.selectedTab = tab;\nvar browser = tabbrowser.getBrowserForTab(tab);\nbrowser.addEventListener(\"DOMContentLoaded\", function() { alert(browser.contentDocument.title) }, true, true);\ntabbrowser.loadURI(\"data:text/html,<title>tab 1</title>\");\n\nunfortunately it seems to work fine here as well", "bug_id": 701591, "tags": [], "is_private": false, "count": 3, "id": 5936649, "author": "rFobic@gmail.com", "creator": "rFobic@gmail.com", "creation_time": "2011-12-22T23:34:34Z", "time": "2011-12-22T23:34:34Z"}, {"author": "myk@mykzilla.org", "creation_time": "2011-12-23T00:10:34Z", "time": "2011-12-23T00:10:34Z", "creator": "myk@mykzilla.org", "count": 4, "id": 5936729, "is_private": false, "tags": [], "text": "(In reply to Irakli Gozilalishvili [:irakli] [:gozala] from comment #3)\n> ejpbruel pinged me about this on IRC. After looking into tabs API I noticed\n> that we use 'DOMContentLoaded' event listener on browser:\n> \n> https://github.com/mozilla/addon-sdk/blob/master/packages/api-utils/lib/tabs/\n> tab.js#L80\n> https://github.com/mozilla/addon-sdk/blob/master/packages/api-utils/lib/tabs/\n> events.js#L42\n> \n> which is exactly what myks reduced case does, but in contrast to his test\n> case we use tab's contentDocument.title for a tab label:\n> \n> https://github.com/mozilla/addon-sdk/blob/master/packages/api-utils/lib/tabs/\n> tab.js#L136\n> \n> I have modified test case from myk to match that:\n\nMy testcase uses tab.label rather than contentDocument.title intentionally, because this bug is about tab.label being wrong.\n\nIt's true that the current version of the SDK uses contentDocument.title, but that's because I haven't landed the fix for bug 682681 yet; and the reason I haven't landed that fix, which makes the SDK use tab.label, is because doing so triggers this bug. :-)\n\nSo that is why the testcase uses tab.label: in order to trigger this bug.  I still don't know why the testcase fails, though.", "bug_id": 701591, "raw_text": "(In reply to Irakli Gozilalishvili [:irakli] [:gozala] from comment #3)\n> ejpbruel pinged me about this on IRC. After looking into tabs API I noticed\n> that we use 'DOMContentLoaded' event listener on browser:\n> \n> https://github.com/mozilla/addon-sdk/blob/master/packages/api-utils/lib/tabs/\n> tab.js#L80\n> https://github.com/mozilla/addon-sdk/blob/master/packages/api-utils/lib/tabs/\n> events.js#L42\n> \n> which is exactly what myks reduced case does, but in contrast to his test\n> case we use tab's contentDocument.title for a tab label:\n> \n> https://github.com/mozilla/addon-sdk/blob/master/packages/api-utils/lib/tabs/\n> tab.js#L136\n> \n> I have modified test case from myk to match that:\n\nMy testcase uses tab.label rather than contentDocument.title intentionally, because this bug is about tab.label being wrong.\n\nIt's true that the current version of the SDK uses contentDocument.title, but that's because I haven't landed the fix for bug 682681 yet; and the reason I haven't landed that fix, which makes the SDK use tab.label, is because doing so triggers this bug. :-)\n\nSo that is why the testcase uses tab.label: in order to trigger this bug.  I still don't know why the testcase fails, though.", "attachment_id": null}, {"is_private": false, "id": 5936753, "count": 5, "creator": "rFobic@gmail.com", "time": "2011-12-23T00:22:28Z", "creation_time": "2011-12-23T00:22:28Z", "author": "rFobic@gmail.com", "attachment_id": null, "raw_text": "Looking more into the code for the test that fails: https://github.com/mozilla/addon-sdk/blob/master/packages/addon-kit/tests/test-windows.js#L52\n\nIt looks like actual test case is this rather than one above.\n\nvar browser = Components.classes[\"@mozilla.org/appshell/window-mediator;1\"].\n              getService(Components.interfaces.nsIWindowMediator).\n              getMostRecentWindow(\"navigator:browser\");\nvar win = browser.openDialog(\"chrome://browser/content/browser.xul\", \"_blank\",\n                                \"chrome,all,dialog=no\",\n                                \"data:text/html,<title>windows API test</title>\");\n\nfunction onLoad() {\n  var tabbrowser = win.gBrowser;\n  var tab = tabbrowser.selectedTab;\n  var browser = tabbrowser.getBrowserForTab(tab);\n  browser.addEventListener('DOMContentLoaded', function() {\n    alert('document title: ' + browser.contentDocument.title + '\\n' +\n          'tab label: ' + tab.label);\n  }, true);\n}\n\nif (win.document.readyState !== 'complete')\n  win.addEventListener('load', onLoad, false);\nelse\n  onLoad();\n\nStill it seems to work as expected, so I don't know what could it be.", "tags": [], "bug_id": 701591, "text": "Looking more into the code for the test that fails: https://github.com/mozilla/addon-sdk/blob/master/packages/addon-kit/tests/test-windows.js#L52\n\nIt looks like actual test case is this rather than one above.\n\nvar browser = Components.classes[\"@mozilla.org/appshell/window-mediator;1\"].\n              getService(Components.interfaces.nsIWindowMediator).\n              getMostRecentWindow(\"navigator:browser\");\nvar win = browser.openDialog(\"chrome://browser/content/browser.xul\", \"_blank\",\n                                \"chrome,all,dialog=no\",\n                                \"data:text/html,<title>windows API test</title>\");\n\nfunction onLoad() {\n  var tabbrowser = win.gBrowser;\n  var tab = tabbrowser.selectedTab;\n  var browser = tabbrowser.getBrowserForTab(tab);\n  browser.addEventListener('DOMContentLoaded', function() {\n    alert('document title: ' + browser.contentDocument.title + '\\n' +\n          'tab label: ' + tab.label);\n  }, true);\n}\n\nif (win.document.readyState !== 'complete')\n  win.addEventListener('load', onLoad, false);\nelse\n  onLoad();\n\nStill it seems to work as expected, so I don't know what could it be."}, {"bug_id": 701591, "text": "Yei!!! Finally I managed to create actual test case :)\n\nvar browser = Components.classes[\"@mozilla.org/appshell/window-mediator;1\"].\n              getService(Components.interfaces.nsIWindowMediator).\n              getMostRecentWindow(\"navigator:browser\");\nvar win = browser.openDialog(\"chrome://browser/content/browser.xul\", \"_blank\",\n                                \"chrome,all,dialog=no\",\n                                \"data:text/html,<title>tab 1</title>\");\n\nfunction onLoad() {\n  var tabbrowser = win.gBrowser;\n  var tab1 = tabbrowser.selectedTab;\n  var browser1 = tabbrowser.getBrowserForTab(tab1);\n  var tab2 = tabbrowser.addTab('data:text/html,<title>tab 2</title>');\n  var browser2 = tabbrowser.getBrowserForTab(tab2);\n  browser2.addEventListener('DOMContentLoaded', function() {\n    alert('document title: ' + browser1.contentDocument.title + '\\n' +\n          'tab label: ' + tab1.label);\n  }, true);\n}\n\nif (win.document.readyState !== 'complete')\n  win.addEventListener('load', onLoad, false);\nelse\n  onLoad();\n\n\nIt looks like if you open another tab in just opened browser new tab will load before the first tab. Also somehow timing is such that first tab's document has title set to it's document, but since no event was dispatched tab.label is not changed.\n\nI guess test should not assume that first tab is loaded firs even though it was first :)", "tags": [], "raw_text": "Yei!!! Finally I managed to create actual test case :)\n\nvar browser = Components.classes[\"@mozilla.org/appshell/window-mediator;1\"].\n              getService(Components.interfaces.nsIWindowMediator).\n              getMostRecentWindow(\"navigator:browser\");\nvar win = browser.openDialog(\"chrome://browser/content/browser.xul\", \"_blank\",\n                                \"chrome,all,dialog=no\",\n                                \"data:text/html,<title>tab 1</title>\");\n\nfunction onLoad() {\n  var tabbrowser = win.gBrowser;\n  var tab1 = tabbrowser.selectedTab;\n  var browser1 = tabbrowser.getBrowserForTab(tab1);\n  var tab2 = tabbrowser.addTab('data:text/html,<title>tab 2</title>');\n  var browser2 = tabbrowser.getBrowserForTab(tab2);\n  browser2.addEventListener('DOMContentLoaded', function() {\n    alert('document title: ' + browser1.contentDocument.title + '\\n' +\n          'tab label: ' + tab1.label);\n  }, true);\n}\n\nif (win.document.readyState !== 'complete')\n  win.addEventListener('load', onLoad, false);\nelse\n  onLoad();\n\n\nIt looks like if you open another tab in just opened browser new tab will load before the first tab. Also somehow timing is such that first tab's document has title set to it's document, but since no event was dispatched tab.label is not changed.\n\nI guess test should not assume that first tab is loaded firs even though it was first :)", "attachment_id": null, "author": "rFobic@gmail.com", "creator": "rFobic@gmail.com", "creation_time": "2011-12-23T00:39:16Z", "time": "2011-12-23T00:39:16Z", "is_private": false, "count": 6, "id": 5936781}, {"creation_time": "2011-12-24T00:41:39Z", "time": "2011-12-24T00:41:39Z", "creator": "ejpbruel@mozilla.com", "author": "ejpbruel@mozilla.com", "id": 5938085, "count": 7, "is_private": false, "bug_id": 701591, "text": "It looks like Myk's hypothesis is correct. I've added a couple of log statements, and DOMContentLoaded is received before any DOMTitleChanged events are received. Since DOMContentLoaded is fired synchronously, this is to be expected.\n\nThe next step is to figure out what the best way around this problem is. Myk already suggested the two obvious approaches. Intuitively, I expect that changing DOMTitleChanged to be fired synchronously is the harder approach, since it's not obvious that we're in a document that was loaded from a data URL at the point it is fired. Changing DOMContentLoaded to be fired asynchronously should be easy in theory, except there is probably a good reason why we are loading data url's synchronously in the first place. I'd like to figure that out first.", "tags": [], "attachment_id": null, "raw_text": "It looks like Myk's hypothesis is correct. I've added a couple of log statements, and DOMContentLoaded is received before any DOMTitleChanged events are received. Since DOMContentLoaded is fired synchronously, this is to be expected.\n\nThe next step is to figure out what the best way around this problem is. Myk already suggested the two obvious approaches. Intuitively, I expect that changing DOMTitleChanged to be fired synchronously is the harder approach, since it's not obvious that we're in a document that was loaded from a data URL at the point it is fired. Changing DOMContentLoaded to be fired asynchronously should be easy in theory, except there is probably a good reason why we are loading data url's synchronously in the first place. I'd like to figure that out first."}, {"bug_id": 701591, "text": "Smaug pointed out that DOMContentLoaded should in fact be fired asynchronously for data URL's in general. It should only be fired synchronously for data *documents*, which are a different concept (a data document is a document without a graphical representation, which is not the case here, since we're loading a document in a tab to be displayed).\n\nI have tried to put some breakpoints in the code to figure out what's going on, but since Irakli's test is probably faulty (see comment 6), I've had to fall back to the test in test-windows.js, and I'm running into problems here with cfx test. It's not possible to attach gdb to cfx test directly. The --no-run option is provided as a work around for this, generating a command that supposedly yields the same results when entered in the shell, except it doesn't. When running the command generated with the --no-run flag turned on, I don't see any failing tests, or at least no output indicating that a test has failed, something that *is* visible when running cfx test directly.\n\nI've mailed Myk, Irakli and Alex to ask for some clarification on this issue.", "tags": [], "attachment_id": null, "raw_text": "Smaug pointed out that DOMContentLoaded should in fact be fired asynchronously for data URL's in general. It should only be fired synchronously for data *documents*, which are a different concept (a data document is a document without a graphical representation, which is not the case here, since we're loading a document in a tab to be displayed).\n\nI have tried to put some breakpoints in the code to figure out what's going on, but since Irakli's test is probably faulty (see comment 6), I've had to fall back to the test in test-windows.js, and I'm running into problems here with cfx test. It's not possible to attach gdb to cfx test directly. The --no-run option is provided as a work around for this, generating a command that supposedly yields the same results when entered in the shell, except it doesn't. When running the command generated with the --no-run flag turned on, I don't see any failing tests, or at least no output indicating that a test has failed, something that *is* visible when running cfx test directly.\n\nI've mailed Myk, Irakli and Alex to ask for some clarification on this issue.", "creator": "ejpbruel@mozilla.com", "time": "2011-12-24T17:34:19Z", "creation_time": "2011-12-24T17:34:19Z", "author": "ejpbruel@mozilla.com", "is_private": false, "count": 8, "id": 5938762}, {"count": 9, "id": 5941597, "is_private": false, "creation_time": "2011-12-27T21:26:13Z", "time": "2011-12-27T21:26:13Z", "creator": "ejpbruel@mozilla.com", "author": "ejpbruel@mozilla.com", "attachment_id": null, "raw_text": "ochameau confirmed that when running cfx test directly, via --no-run, stdout doesn't work on Windows. He doesn't have an OSX machine available, but its possible that the same bug causes stdout not to work on OSX. We should look into this. In the meantime, I'll try to find a way around the problem.", "bug_id": 701591, "text": "ochameau confirmed that when running cfx test directly, via --no-run, stdout doesn't work on Windows. He doesn't have an OSX machine available, but its possible that the same bug causes stdout not to work on OSX. We should look into this. In the meantime, I'll try to find a way around the problem.", "tags": []}, {"id": 13436658, "count": 10, "is_private": false, "author": "bug-husbandry-bot@mozilla.bugs", "creation_time": "2018-06-29T04:58:39Z", "time": "2018-06-29T04:58:39Z", "creator": "bug-husbandry-bot@mozilla.bugs", "raw_text": "https://bugzilla.mozilla.org/show_bug.cgi?id=1472046\n\nMove all DOM bugs that haven\u2019t been updated in more than 3 years and has no one currently assigned to P5.\n\nIf you have questions, please contact :mdaly.", "attachment_id": null, "bug_id": 701591, "text": "https://bugzilla.mozilla.org/show_bug.cgi?id=1472046\n\nMove all DOM bugs that haven\u2019t been updated in more than 3 years and has no one currently assigned to P5.\n\nIf you have questions, please contact :mdaly.", "tags": []}]}}}