{"bugs": {"641098": {"comments": [{"author": "bugs@justinsamuel.com", "text": "User-Agent:       Mozilla/5.0 (X11; Linux x86_64; rv:2.0b13pre) Gecko/20110311 Firefox/4.0b13pre\nBuild Identifier: Firefox 4.0 rc1\n\nSetup: three documents---A, B, and C---with different URLs where A has a link to B and B has a meta refresh tag that loads C.\n\nClicking A's link to B results in the correct origin and destination arguments in the call to shouldLoad (origin is A's URL, destination is B's). However, when the meta refresh in B occurs, shouldLoad is not called with origin B and destination C but rather with origin A and destination C. That is, the origin appears to be the previous document's URL (the one with the link the user followed), not the current document's URL that contains the meta refresh.\n\nReproducible: Always\n\n\n\n\nThis bug causes problems for the RequestPolicy extension.\n\nWhen I have time, I'll try to narrow down when this issue began.\n\nThis bug seems similar to bug 593174.", "count": 0, "attachment_id": null, "creator": "bugs@justinsamuel.com", "id": 5340142, "time": "2011-03-11T22:17:36Z", "is_private": false, "tags": [], "raw_text": "User-Agent:       Mozilla/5.0 (X11; Linux x86_64; rv:2.0b13pre) Gecko/20110311 Firefox/4.0b13pre\nBuild Identifier: Firefox 4.0 rc1\n\nSetup: three documents---A, B, and C---with different URLs where A has a link to B and B has a meta refresh tag that loads C.\n\nClicking A's link to B results in the correct origin and destination arguments in the call to shouldLoad (origin is A's URL, destination is B's). However, when the meta refresh in B occurs, shouldLoad is not called with origin B and destination C but rather with origin A and destination C. That is, the origin appears to be the previous document's URL (the one with the link the user followed), not the current document's URL that contains the meta refresh.\n\nReproducible: Always\n\n\n\n\nThis bug causes problems for the RequestPolicy extension.\n\nWhen I have time, I'll try to narrow down when this issue began.\n\nThis bug seems similar to bug 593174.", "bug_id": 641098, "creation_time": "2011-03-11T22:17:36Z"}, {"creator": "bzbarsky@mit.edu", "attachment_id": null, "count": 1, "text": "This has probably been happening forever.  The relevant code and comments are in nsDocShell::ForceRefreshURI:\n\n        /* for redirects we mimic HTTP, which passes the\n         *  original referrer\n         */\n        nsCOMPtr<nsIURI> internalReferrer;\n        GetReferringURI(getter_AddRefs(internalReferrer));\n        if (internalReferrer) {\n            loadInfo->SetReferrer(internalReferrer);\n        }\n\n(that's getting the referrer that was used for page B and setting it on the loadInfo for the meta refresh) followed by this code in nsDocShell::InternalLoad:\n\n    // XXXbz would be nice to know the loading principal here... but we don't\n    nsCOMPtr<nsIPrincipal> loadingPrincipal;\n    if (aReferrer) {\n        nsCOMPtr<nsIScriptSecurityManager> secMan =\n            do_GetService(NS_SCRIPTSECURITYMANAGER_CONTRACTID, &rv);\n        NS_ENSURE_SUCCESS(rv, rv);\n\n        rv = secMan->GetCodebasePrincipal(aReferrer,\n                                          getter_AddRefs(loadingPrincipal));\n    }", "author": "bzbarsky@mit.edu", "tags": [], "raw_text": "This has probably been happening forever.  The relevant code and comments are in nsDocShell::ForceRefreshURI:\n\n        /* for redirects we mimic HTTP, which passes the\n         *  original referrer\n         */\n        nsCOMPtr<nsIURI> internalReferrer;\n        GetReferringURI(getter_AddRefs(internalReferrer));\n        if (internalReferrer) {\n            loadInfo->SetReferrer(internalReferrer);\n        }\n\n(that's getting the referrer that was used for page B and setting it on the loadInfo for the meta refresh) followed by this code in nsDocShell::InternalLoad:\n\n    // XXXbz would be nice to know the loading principal here... but we don't\n    nsCOMPtr<nsIPrincipal> loadingPrincipal;\n    if (aReferrer) {\n        nsCOMPtr<nsIScriptSecurityManager> secMan =\n            do_GetService(NS_SCRIPTSECURITYMANAGER_CONTRACTID, &rv);\n        NS_ENSURE_SUCCESS(rv, rv);\n\n        rv = secMan->GetCodebasePrincipal(aReferrer,\n                                          getter_AddRefs(loadingPrincipal));\n    }", "creation_time": "2011-03-12T01:44:20Z", "bug_id": 641098, "is_private": false, "id": 5340706, "time": "2011-03-12T01:44:20Z"}, {"tags": [], "bug_id": 641098, "creation_time": "2011-03-12T01:45:16Z", "raw_text": "We should just fix that \"xxx\" bit; at least use aOwner in cases when it's non-null...", "is_private": false, "id": 5340708, "time": "2011-03-12T01:45:16Z", "creator": "bzbarsky@mit.edu", "attachment_id": null, "text": "We should just fix that \"xxx\" bit; at least use aOwner in cases when it's non-null...", "count": 2, "author": "bzbarsky@mit.edu"}, {"is_private": false, "attachment_id": null, "creation_time": "2011-03-21T21:00:23Z", "bug_id": 641098, "raw_text": "I want to argue for treating the origin argument different from the referrer.\n(Disclosure: I've originally reported this behavior as a RequestPolicy bug, see below)\n\nA click expresses trust that the link target will know how to display the linked-to content.\nBy the time of a redirect, that trust is already transferred to the redirecting site, and any decision on whether the redirect itself is trustworthy should depend on my trust in the redirecting site.\n\nThe resolution of this bug may have an impact on content security policy, exactly in the case that the CSP allows accessing some external content (say, an external image) that get moved and replaced with a redirect. I believe I have seen cases where a popular image got moved to amazonaws.com.\n\nRequestPolicy: https://www.requestpolicy.com/dev/ticket/210\nTestcase (Firefox + Requestpolicy, all default settings)\n> Google for FreeMind\n> Click the first result - http://freemind.sourceforge.net/\n> The page says \"You'll be redirected\", but nothing happens.\n> Page source fragment: <meta http-equiv=\"refresh\" content=\"0; \nURL=http://freemind.sourceforge.net/wiki/index.php/Main_Page\">\n\nThe discussion here shows why RP blocks the redirect: There is no explicit trust for Google to access Sourceforge, and the implicit trust from the click has run out by arriving at the page with the redirect.\nThe Freemind front page would be implicitly trusted to redirect to the wiki page on the same domain, but the origin is still set to Google.", "tags": [], "creator": "Markus.Milleder@gmx.at", "time": "2011-03-21T21:00:23Z", "author": "Markus.Milleder@gmx.at", "id": 5358224, "text": "I want to argue for treating the origin argument different from the referrer.\n(Disclosure: I've originally reported this behavior as a RequestPolicy bug, see below)\n\nA click expresses trust that the link target will know how to display the linked-to content.\nBy the time of a redirect, that trust is already transferred to the redirecting site, and any decision on whether the redirect itself is trustworthy should depend on my trust in the redirecting site.\n\nThe resolution of this bug may have an impact on content security policy, exactly in the case that the CSP allows accessing some external content (say, an external image) that get moved and replaced with a redirect. I believe I have seen cases where a popular image got moved to amazonaws.com.\n\nRequestPolicy: https://www.requestpolicy.com/dev/ticket/210\nTestcase (Firefox + Requestpolicy, all default settings)\n> Google for FreeMind\n> Click the first result - http://freemind.sourceforge.net/\n> The page says \"You'll be redirected\", but nothing happens.\n> Page source fragment: <meta http-equiv=\"refresh\" content=\"0; \nURL=http://freemind.sourceforge.net/wiki/index.php/Main_Page\">\n\nThe discussion here shows why RP blocks the redirect: There is no explicit trust for Google to access Sourceforge, and the implicit trust from the click has run out by arriving at the page with the redirect.\nThe Freemind front page would be implicitly trusted to redirect to the wiki page on the same domain, but the origin is still set to Google.", "count": 3}, {"tags": [], "creation_time": "2011-03-21T21:57:01Z", "bug_id": 641098, "raw_text": "Boris, thanks for tracking down the relevant code. Fixing this will/should be a good task for me if nobody gets there first, but I probably won't have time to look at it until summer.\n\nMarkus, I believe you're saying that we should be on the lookout for whether this bug allows a CSP bypass. I haven't seen a case where this bug does affect CSP. For example, if a CSP policy allows a page to have images with source foo.com and foo.com redirects those images to bar.com, then CSP correctly blocks the loading of the image from bar.com (it doesn't follow the redirect). I don't think this bug will affect CSP for two reasons:\n\n1) Redirects don't go through nsIContentPolicy::shouldLoad, so CSP wouldn't run into this bug in the normal case of redirected content.\n\n2) From what I understand, this bug is only affecting a document that is refreshing to a different URI than the current document. I don't think there are any CSP directives that directly relate to document redirection.\n\n3) I don't think CSP ever looks at the origin argument to shouldLoad, so it couldn't be affected by this bug. (That was based on a very quick look just now.)\n\nLet me know if I misunderstood. If you do find a CSP bypass with this bug, I'd assume that would raise the priority of this bug and we could talk Brandon into fixing it rather than waiting on me getting around to taking a crack at it. (CC'ing Brandon, anyways, in case there's some impact on CSP that he could see.)", "is_private": false, "id": 5358449, "time": "2011-03-21T21:57:01Z", "creator": "bugs@justinsamuel.com", "attachment_id": null, "text": "Boris, thanks for tracking down the relevant code. Fixing this will/should be a good task for me if nobody gets there first, but I probably won't have time to look at it until summer.\n\nMarkus, I believe you're saying that we should be on the lookout for whether this bug allows a CSP bypass. I haven't seen a case where this bug does affect CSP. For example, if a CSP policy allows a page to have images with source foo.com and foo.com redirects those images to bar.com, then CSP correctly blocks the loading of the image from bar.com (it doesn't follow the redirect). I don't think this bug will affect CSP for two reasons:\n\n1) Redirects don't go through nsIContentPolicy::shouldLoad, so CSP wouldn't run into this bug in the normal case of redirected content.\n\n2) From what I understand, this bug is only affecting a document that is refreshing to a different URI than the current document. I don't think there are any CSP directives that directly relate to document redirection.\n\n3) I don't think CSP ever looks at the origin argument to shouldLoad, so it couldn't be affected by this bug. (That was based on a very quick look just now.)\n\nLet me know if I misunderstood. If you do find a CSP bypass with this bug, I'd assume that would raise the priority of this bug and we could talk Brandon into fixing it rather than waiting on me getting around to taking a crack at it. (CC'ing Brandon, anyways, in case there's some impact on CSP that he could see.)", "count": 4, "author": "bugs@justinsamuel.com"}, {"tags": [], "creator": "Markus.Milleder@gmx.at", "bug_id": 641098, "creation_time": "2011-03-24T19:53:28Z", "raw_text": "(In reply to comment #4)\n\nI don't think this allows a CSP bypass.\n\nMy comment about CSP was rather to keep an eye on what CSP does in a similar situation:\n> For example, if a CSP policy allows a page to have images with source\n> foo.com and foo.com redirects those images to bar.com, then CSP correctly\n> blocks the loading of the image from bar.com (it doesn't follow the redirect).\n\nGiven this description, another possible solution to the RequestPolicy problem would be to keep shouldLoad() as is and to show the \"This page has asked to redirect...\" bar when the refresh fires.\n\nAs an unrelated (possible) problem, the described CSP behavior will break the case I mentioned in comment #3 where a small hoster moves a popular large image to AWS to handle a load spike without touching the pages containing the image.\nI'll pay attention if I see this again and submit I new bug if I do. (I haven't seen it on the pages in my permanent exception list :-(", "is_private": false, "attachment_id": null, "count": 5, "text": "(In reply to comment #4)\n\nI don't think this allows a CSP bypass.\n\nMy comment about CSP was rather to keep an eye on what CSP does in a similar situation:\n> For example, if a CSP policy allows a page to have images with source\n> foo.com and foo.com redirects those images to bar.com, then CSP correctly\n> blocks the loading of the image from bar.com (it doesn't follow the redirect).\n\nGiven this description, another possible solution to the RequestPolicy problem would be to keep shouldLoad() as is and to show the \"This page has asked to redirect...\" bar when the refresh fires.\n\nAs an unrelated (possible) problem, the described CSP behavior will break the case I mentioned in comment #3 where a small hoster moves a popular large image to AWS to handle a load spike without touching the pages containing the image.\nI'll pay attention if I see this again and submit I new bug if I do. (I haven't seen it on the pages in my permanent exception list :-(", "id": 5367019, "time": "2011-03-24T19:53:28Z", "author": "Markus.Milleder@gmx.at"}, {"id": 7318230, "time": "2013-04-16T01:45:15Z", "tags": [], "bug_id": 641098, "creation_time": "2013-04-16T01:45:15Z", "raw_text": "The patch in bug 767134 made us start using aOwner for the loadingPrincipal.\n\nThe problem is that meta refresh doesn't actually pass in an owner, afaict.", "is_private": false, "text": "The patch in bug 767134 made us start using aOwner for the loadingPrincipal.\n\nThe problem is that meta refresh doesn't actually pass in an owner, afaict.", "count": 6, "author": "bzbarsky@mit.edu", "creator": "bzbarsky@mit.edu", "attachment_id": null}, {"raw_text": "Whoever fixes this needs to be careful to not reintroduce 475636, though.", "bug_id": 641098, "creation_time": "2013-04-16T01:46:59Z", "tags": [], "is_private": false, "time": "2013-04-16T01:46:59Z", "id": 7318244, "creator": "bzbarsky@mit.edu", "attachment_id": null, "count": 7, "text": "Whoever fixes this needs to be careful to not reintroduce 475636, though.", "author": "bzbarsky@mit.edu"}]}}, "comments": {}}