{"bugs": {"336807": {"comments": [{"tags": [], "time": "2006-05-05T21:09:06Z", "attachment_id": null, "count": 0, "is_private": false, "bug_id": 336807, "id": 2848105, "author": "robert.bradbury@gmail.com", "raw_text": "User-Agent:       Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.7.12) Gecko/20051205 Epiphany/1.6.4\nBuild Identifier: Firefox 1.5.0.1\n\nIf one performs perfectly reasonable memory stress testing on current \"production\" versions of Firefox it fails in a variety of ways, the most obvious of which is \"crashing\" with a segmentation fault.\n\nThere are indications that little or no stress testing has been done on Firefox with constrained memory.  Doing this is one obvious way to reveal bugs which may be present in the basic system code.\n\nReproducible: Always\n\nSteps to Reproduce:\n1. ulimit -Sv 53000\n2. /usr/bin/firefox  (with a minimal profile, e.g. home = about:blank)\n3. Enter URL: http://www.nytimes.com/\n\n\nActual Results:  \nFirefox crashes and starts the bug reporting agent.\n\nOne wants to limit the available virtual memory to just slightly above that required to start firefox and test the limits of various functions.  If the available memory is set too low one cannot map the libraries but at slightly above that one should be able to \"stress\" all various aspects of memory allocation/management.\n\nAttempting to test various options I have seen at least the following problems:\n1. Crashes on opening pages.\n2. Crashes on Bookmarks >> Manage Bookmarks (with only about 10 small bookmarks)\n3. Fails to open a functional new window (Ctrl-N will open a window but you can't use it for navigation, it ends up with a grey background rather than a white background -- in theory one shouldn't open a non-functional window).\n4. Specifying a new URL will allow navigation to a new page but will not navigate back (hitting the back button does nothing).\n\n\n\nExpected Results:  \n1) Never crash.\n2) Not perform an action which is useless (e.g. opening a window which cannot be used, warn if navigating forward will disallow navigating back, etc).\n3) Fail gracefully for excessive requests (e.g. if one wants to display a huge image but can't allocate memory for it, one should still be able to figure out how big the image would be, properly tell the display manager to block out that space, and provide some text in its place, e.g. \"Place for 10MB image 'my-really-big-img.jpg'\"\n\nThe fact that these bugs exist at this state of Firefox development and \"production\" release shows an extreme disregard for stress testing, particularly with regard to memory usage.  When problems started being reported with Firefox memory usage (some of which are memory leaks but many of which are heap fragmentation problems) one of the first questions which should have been examined was \"Does Firefox fail gracefully under severe memory constraints?\"  It does not appear that that has been done.\n\nThe reason for this is as follows.  Most people are not going to bother watching Firefox memory usage (using top / vmstat / System Monitor).  Instead they might want to receive \"reasonable\" warnings when memory consumption has gotten out of hand (Linux system performance goes down the tubes when the Firefox resident memory requirements exceed 60-70% of physical memory).  Though this is a Linux paging problem, it is ascerbated by Firefox's poor heap memory management causing execessive paging.  One obvious solution is to limit Firefox so its virtual memory requirements can never exceed 50-60% of physical memory.  This is what the ulimits are for (one could even have the script /usr/bin/firefox preset the virtual memory limit!).  If Firefox then warned the user -- but did *not* fail or exit -- the user would (a) be aware of pages which may be memory hogs; and (b) choose to continue browsing with perhaps some degradation in performance or (c) restart Firefox to reinitialize (compactify) the heap.\n\nThe flexibility of constraining Firefox using the Linux Soft & Hard memory limits is a very reasonable way to manage the browser.  (I.e. there should be some config flag to allow Firefox to push the soft limits up to the hard limits.)  [I suspect the ability to set ulimits is also available with Solaris and perhaps even Mac OS X -- so this approach would only not work under Windows.]\n\nTests under memory constraints should include:\n1) Browsing to a new page (when memory for the \"history\" allocation fails).\n2) Opening \"Manage Bookmarks\" under tight constraints (use Firefox with an empty bookmarks file, then replace it with one which is 2-5MB).\n3) Opening lots of new windows (Ctrl-N)\n4) Opening lots of new tabs (Ctrl-T)\n5) Saving pages (requires opening files)\n6) Downloading a binary files (requires starting the download manager)\n7) Opening successively more difficult windows, e.g. (a) a blank page; (b) a text page with various simple fonts; (c) a text page with small images; (d) a text page with small images and style sheets; (e) a text page with javascript; (f) a text page with images & javascript; (g) a page which requires starting Java (presumably may require resetting the ulimit if it drags in additional shared libraries); (h) any of the various pages with streamed or direct video, etc.\n\nIn cases where the action involves page display it should give me *all* of the page which is possible, e.g. a page with a big image followed by a large number of small images should *still* give me the small images even if the big image will not fit into memory.  If there isn't memory for a large Javascript or a Style Sheet, give me as much of the page as you can without them.  Etc.\n\nI believe if this stress testing and solutions provided it would give people a much better understanding of what pages and/or browser activities may be contributing to the  so called \"memory leak\" problems.", "creator": "robert.bradbury@gmail.com", "creation_time": "2006-05-05T21:09:06Z", "text": "User-Agent:       Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.7.12) Gecko/20051205 Epiphany/1.6.4\nBuild Identifier: Firefox 1.5.0.1\n\nIf one performs perfectly reasonable memory stress testing on current \"production\" versions of Firefox it fails in a variety of ways, the most obvious of which is \"crashing\" with a segmentation fault.\n\nThere are indications that little or no stress testing has been done on Firefox with constrained memory.  Doing this is one obvious way to reveal bugs which may be present in the basic system code.\n\nReproducible: Always\n\nSteps to Reproduce:\n1. ulimit -Sv 53000\n2. /usr/bin/firefox  (with a minimal profile, e.g. home = about:blank)\n3. Enter URL: http://www.nytimes.com/\n\n\nActual Results:  \nFirefox crashes and starts the bug reporting agent.\n\nOne wants to limit the available virtual memory to just slightly above that required to start firefox and test the limits of various functions.  If the available memory is set too low one cannot map the libraries but at slightly above that one should be able to \"stress\" all various aspects of memory allocation/management.\n\nAttempting to test various options I have seen at least the following problems:\n1. Crashes on opening pages.\n2. Crashes on Bookmarks >> Manage Bookmarks (with only about 10 small bookmarks)\n3. Fails to open a functional new window (Ctrl-N will open a window but you can't use it for navigation, it ends up with a grey background rather than a white background -- in theory one shouldn't open a non-functional window).\n4. Specifying a new URL will allow navigation to a new page but will not navigate back (hitting the back button does nothing).\n\n\n\nExpected Results:  \n1) Never crash.\n2) Not perform an action which is useless (e.g. opening a window which cannot be used, warn if navigating forward will disallow navigating back, etc).\n3) Fail gracefully for excessive requests (e.g. if one wants to display a huge image but can't allocate memory for it, one should still be able to figure out how big the image would be, properly tell the display manager to block out that space, and provide some text in its place, e.g. \"Place for 10MB image 'my-really-big-img.jpg'\"\n\nThe fact that these bugs exist at this state of Firefox development and \"production\" release shows an extreme disregard for stress testing, particularly with regard to memory usage.  When problems started being reported with Firefox memory usage (some of which are memory leaks but many of which are heap fragmentation problems) one of the first questions which should have been examined was \"Does Firefox fail gracefully under severe memory constraints?\"  It does not appear that that has been done.\n\nThe reason for this is as follows.  Most people are not going to bother watching Firefox memory usage (using top / vmstat / System Monitor).  Instead they might want to receive \"reasonable\" warnings when memory consumption has gotten out of hand (Linux system performance goes down the tubes when the Firefox resident memory requirements exceed 60-70% of physical memory).  Though this is a Linux paging problem, it is ascerbated by Firefox's poor heap memory management causing execessive paging.  One obvious solution is to limit Firefox so its virtual memory requirements can never exceed 50-60% of physical memory.  This is what the ulimits are for (one could even have the script /usr/bin/firefox preset the virtual memory limit!).  If Firefox then warned the user -- but did *not* fail or exit -- the user would (a) be aware of pages which may be memory hogs; and (b) choose to continue browsing with perhaps some degradation in performance or (c) restart Firefox to reinitialize (compactify) the heap.\n\nThe flexibility of constraining Firefox using the Linux Soft & Hard memory limits is a very reasonable way to manage the browser.  (I.e. there should be some config flag to allow Firefox to push the soft limits up to the hard limits.)  [I suspect the ability to set ulimits is also available with Solaris and perhaps even Mac OS X -- so this approach would only not work under Windows.]\n\nTests under memory constraints should include:\n1) Browsing to a new page (when memory for the \"history\" allocation fails).\n2) Opening \"Manage Bookmarks\" under tight constraints (use Firefox with an empty bookmarks file, then replace it with one which is 2-5MB).\n3) Opening lots of new windows (Ctrl-N)\n4) Opening lots of new tabs (Ctrl-T)\n5) Saving pages (requires opening files)\n6) Downloading a binary files (requires starting the download manager)\n7) Opening successively more difficult windows, e.g. (a) a blank page; (b) a text page with various simple fonts; (c) a text page with small images; (d) a text page with small images and style sheets; (e) a text page with javascript; (f) a text page with images & javascript; (g) a page which requires starting Java (presumably may require resetting the ulimit if it drags in additional shared libraries); (h) any of the various pages with streamed or direct video, etc.\n\nIn cases where the action involves page display it should give me *all* of the page which is possible, e.g. a page with a big image followed by a large number of small images should *still* give me the small images even if the big image will not fit into memory.  If there isn't memory for a large Javascript or a Style Sheet, give me as much of the page as you can without them.  Etc.\n\nI believe if this stress testing and solutions provided it would give people a much better understanding of what pages and/or browser activities may be contributing to the  so called \"memory leak\" problems."}, {"tags": [], "author": "ispiked@gmail.com", "creator": "ispiked@gmail.com", "creation_time": "2006-05-05T21:10:54Z", "text": "Please paste the talkback IDs of the crashes here. http://kb.mozillazine.org/Talkback", "raw_text": "Please paste the talkback IDs of the crashes here. http://kb.mozillazine.org/Talkback", "time": "2006-05-05T21:10:54Z", "count": 1, "attachment_id": null, "is_private": false, "id": 2848109, "bug_id": 336807}, {"is_private": false, "count": 2, "attachment_id": null, "time": "2006-06-02T22:48:55Z", "bug_id": 336807, "id": 2872215, "author": "robert.bradbury@gmail.com", "raw_text": "The bug is very easy to reproduce and so it should be elevated to a CONFIRMED status.\n\nSome of the Talkback IDs with stack traces include:\n18350634, 19240883, 19337782, 19337970, 19338133, 19339003, 19343075, 19343126, 19344090, 19344897, 19346265, 19346385, 19346782, 19348135, 19348137, 19348531, 19349769, 19367506, 19377344, 19362494\n\nAlmost, if not all of these were generated with different virtual memory limits, ranging from \"ulimit -Sv 41000\" to \"ulimit -Sv 300000\" (or greater).  They were also generated using different testing sequences for larger pages, more tabs, more windows, pages with increased feature requirements, pages with refreshing characteristics (which seem to eat memory...), pages which stream audio, etc.\n\nThe ones which terminate with a SIGIOT I suspect are due to a memory failure\nin libpthread.so and an explicit call to abort().  This is *VERY* bad behavior\nfor a robust multi-activity (multi-tab/multi-window) program.  [I have not looked at the sources yet to determine if this is true.]\n\nThere are many others which terminate in a SIGSEGV which would seem to involve memory corruption problems and/or untested handling of memory allocation failures.\n\nFirefox should never made it out of alpha testing with bugs that are this easy to reproduce.  Many of the first 15 or so were produced in less than 3 hours (using virtual limits from 41000 to ~70,000MB).  The remainder required higher limits (100's of MB) and leaving the browser running with dozens of pages open and multiple extensions running.  Some developers may claim that the solution is to add more memory or more paging space to the system.  Not!  All I am doing by limiting the virtual memory with ulimit is simulating an assortment of system conditions which could result in a malloc() [sbrk()] call failing.", "creation_time": "2006-06-02T22:48:55Z", "text": "The bug is very easy to reproduce and so it should be elevated to a CONFIRMED status.\n\nSome of the Talkback IDs with stack traces include:\n18350634, 19240883, 19337782, 19337970, 19338133, 19339003, 19343075, 19343126, 19344090, 19344897, 19346265, 19346385, 19346782, 19348135, 19348137, 19348531, 19349769, 19367506, 19377344, 19362494\n\nAlmost, if not all of these were generated with different virtual memory limits, ranging from \"ulimit -Sv 41000\" to \"ulimit -Sv 300000\" (or greater).  They were also generated using different testing sequences for larger pages, more tabs, more windows, pages with increased feature requirements, pages with refreshing characteristics (which seem to eat memory...), pages which stream audio, etc.\n\nThe ones which terminate with a SIGIOT I suspect are due to a memory failure\nin libpthread.so and an explicit call to abort().  This is *VERY* bad behavior\nfor a robust multi-activity (multi-tab/multi-window) program.  [I have not looked at the sources yet to determine if this is true.]\n\nThere are many others which terminate in a SIGSEGV which would seem to involve memory corruption problems and/or untested handling of memory allocation failures.\n\nFirefox should never made it out of alpha testing with bugs that are this easy to reproduce.  Many of the first 15 or so were produced in less than 3 hours (using virtual limits from 41000 to ~70,000MB).  The remainder required higher limits (100's of MB) and leaving the browser running with dozens of pages open and multiple extensions running.  Some developers may claim that the solution is to add more memory or more paging space to the system.  Not!  All I am doing by limiting the virtual memory with ulimit is simulating an assortment of system conditions which could result in a malloc() [sbrk()] call failing.", "creator": "robert.bradbury@gmail.com", "tags": []}, {"bug_id": 336807, "id": 2872822, "is_private": false, "count": 3, "time": "2006-06-03T21:00:46Z", "attachment_id": null, "raw_text": "Minor correction to comment #2, \"... 41000 to 71,000MB...\" should be 41000 to 70,000KB (i.e. 41-70MB).", "creation_time": "2006-06-03T21:00:46Z", "text": "Minor correction to comment #2, \"... 41000 to 71,000MB...\" should be 41000 to 70,000KB (i.e. 41-70MB).", "creator": "robert.bradbury@gmail.com", "author": "robert.bradbury@gmail.com", "tags": []}, {"id": 2873243, "bug_id": 336807, "is_private": false, "time": "2006-06-04T18:54:53Z", "attachment_id": null, "count": 4, "text": "robert: so, you managed to crash at a number of different places. unfortunately it looks like a bunch of them are libc. we don't (and can't) have useful symbols for libc.\n\nif you want to paste talkback numbers into bugzilla, please do one of two things:\n\neither paste them exactly like this:\nIncident ID: 19337782\nor paste them like this:\nTB19337782X\nThe result is that bugzilla will linkify them for us. \n\nit'd also kinda help if we didn't have just one bug for all these problems because your crashes are all over the map. but i'm not quite sure what to do about that atm.\n\ni think a good starting point would be if you used a trunk nightly instead of a branch release (1.5.0.1). because we've been trying to fix crashes like the ones you're reporting on trunk, and your reports could likely have been resolved either by those attempts or general code improvements in the year plus since the code branched for the 1.5 release cycles.\n\nthe first example of code changing is:\nhttp://bonsai.mozilla.org/cvsview2.cgi?diff_mode=context&whitespace_mode=show&file=GIF2.cpp&branch=&root=/cvsroot&subdir=mozilla/modules/libpr0n/decoders/gif&command=DIFF_FRAMESET&rev1=1.52&rev2=1.53\n\nwhich i believe makes Incident ID: 18350634 useless\n\ni'm not sure about Incident ID: 19240883 because i can't figure out why it would be jumping into a null function pointer. but had you used a trunk nightly instead of the whacky branch release, perhaps i'd have had a better shot.\n\nplease do ask your distro to install \"debuginfo\" for all the os libraries, especiall libc.so.6, libpthread.so.0, libstdc++.so.5. this is possible for FC4 and FC5. also please do us the favor of including the name of your linux distro and its version so that we can tailor information to that.\n\ni think that:\n\nIncident ID: 19337782\nStack Signature\tlibc.so.6 + 0x28931 (0xb746a931) 21ebabaa\nProduct ID\tFirefox15\nBuild ID\t2006012415\nTrigger Time\t2006-05-31 09:59:39.0\nPlatform\tLinuxIntel\nOperating System\tLinux 2.6.16\nModule\tlibc.so.6 + (00028931)\nURL visited\thttp://www.aeiveos.com:8080/~bradbury/\nUser Comments\tMozilla launcher (mozilla-launcher) aborted at line 116 with under linux when virtual memory limited to 60MB (i.e. ulimit -Sv 60000) then try to run firefox.\nSince Last Crash\t1 sec\nTotal Uptime\t766 sec\nTrigger Reason\tSIGIOT: Abort or IOT Instruction: (signal 6)\nSource File, Line No.\tN/A\nStack Trace \t\nlibc.so.6 + 0x28931 (0xb746a931)\nlibpthread.so.0 + 0x8fcd (0xb7d74fcd)\nlibc.so.6 + 0x286e4 (0xb746a6e4)\nlibc.so.6 + 0x29a56 (0xb746ba56)\nlibstdc++.so.5 + 0x91d67 (0xb75edd67)\nlibstdc++.so.5 + 0x91da4 (0xb75edda4)\nlibstdc++.so.5 + 0x91f16 (0xb75edf16)\nlibstdc++.so.5 + 0x9216f (0xb75ee16f)\nlibstdc++.so.5 + 0x9223f (0xb75ee23f)\nBookmarkParser::Init()  [/builds/tinderbox/Fx-Mozilla1.8.0/Linux_2.4.21-37.ELsmp_Depend/mozilla/browser/components/bookmarks/src/nsBookmarksService.cpp, line 701]\n\nmeans that the os returned a malloc failure which the c++ runtime replaced with an exception for new. we don't have exception handlers for new in general because we expect an old behavior (new returning 0 instead of throwing). unfortunately, fixing this requires lots of macro work. but this is only speculation because i don't have symbols for the addresses above BookmarkParser::Init, if you installed debuginfo, you could teach yourself to use gdb enough to ask it what functions the addresses in the libraries are and provide a better stack trace.\n\nactually, it's probably not nice for you to use talkback at all, if you want to play ulimit chicken, please build mozilla (firefox, whatever) from cvs with --enable-debuger-info-modules (at least, or --enable-debug), and then use ./run-mozilla.sh -g -d gdb ./firefox-bin or whatever (see unix debugging faq).\n\nIncident ID: 19337970 is another abort, which almost certainly also means the same thing as above, except talkback couldn't figure out what library was on the stack after xptcall, so i can't do anything with it.\n\nIncident ID: 19338133 is a crash on windows, which means you almost certainly *typo*d the incident id.\n\nIncident ID: 19339003\nStack Signature\tlibc.so.6 + 0x28931 (0xb7498931) 5aebae57\nProduct ID\tFirefox15\nBuild ID\t2006012415\nTrigger Time\t2006-05-31 10:18:18.0\nPlatform\tLinuxIntel\nOperating System\tLinux 2.6.16\nModule\tlibc.so.6 + (00028931)\nURL visited\thttp://www.aeiveos.com:8080/~bradbury/\nUser Comments\t\nSince Last Crash\t0 sec\nTotal Uptime\t766 sec\nTrigger Reason\tSIGIOT: Abort or IOT Instruction: (signal 6)\nSource File, Line No.\tN/A\nStack Trace \t\nlibc.so.6 + 0x28931 (0xb7498931)\nlibpthread.so.0 + 0x8fcd (0xb7da2fcd)\nlibc.so.6 + 0x286e4 (0xb74986e4)\nlibc.so.6 + 0x29a56 (0xb7499a56)\nlibstdc++.so.5 + 0x91d67 (0xb761bd67)\nlibstdc++.so.5 + 0x91da4 (0xb761bda4)\nlibstdc++.so.5 + 0x91f16 (0xb761bf16)\nlibstdc++.so.5 + 0x9216f (0xb761c16f)\nlibstdc++.so.5 + 0x9223f (0xb761c23f)\nmozJSSubScriptLoader::LoadSubScript()  [/builds/tinderbox/Fx-Mozilla1.8.0/Linux_2.4.21-37.ELsmp_Depend/mozilla/js/src/xpconnect/loader/mozJSSubScriptLoader.cpp, line 303]\n\nhttp://bonsai.mozilla.org/cvsblame.cgi?file=/mozilla/js/src/xpconnect/loader/mozJSSubScriptLoader.cpp&mark=303&rev=FIREFOX_1_5_0_1_RELEASE#281\n\nwould be another uncaught oom exception from the c++ runtime. at this point i'm getting tired of them, and i have ~20 more tabs to read through (most have this stack pattern).\n\nIncident ID: 19343075 again is missing the name of the library of interest.\n\nIncident ID: 19343126 baffles me, it doesn't help that i can't figure out what versions of files to read. but again, this is a *huge* waste of my time, i've lost a couple of hours to this list of incidents on a branch that's over a year old. please don't report crashes against old branches, especially if you're going to do systematic testing.\n\nIncident ID: 19344090\nStack Signature\tlibc.so.6 + 0x28931 (0xb7412931) 4725fb7e\nProduct ID\tFirefox15\nBuild ID\t2006012415\nTrigger Time\t2006-05-31 12:38:20.0\nPlatform\tLinuxIntel\nOperating System\tLinux 2.6.16\nModule\tlibc.so.6 + (00028931)\nURL visited\thttp://www.aeiveos.com:8080/~bradbury/\nUser Comments\tFirefox aborts after opening first window. Using \"ulimit -Sv 50000\" with a minimal profile gets firefox through the initial startup profile selection and draws the outline of the first (home) window with nothing displayed. Then it aborts.\nSince Last Crash\t0 sec\nTotal Uptime\t766 sec\nTrigger Reason\tSIGIOT: Abort or IOT Instruction: (signal 6)\nSource File, Line No.\tN/A\nStack Trace \t\nlibc.so.6 + 0x28931 (0xb7412931)\nlibpthread.so.0 + 0x8fcd (0xb7d1cfcd)\nlibc.so.6 + 0x286e4 (0xb74126e4)\nlibc.so.6 + 0x29a56 (0xb7413a56)\nlibstdc++.so.5 + 0x91d67 (0xb7595d67)\nlibstdc++.so.5 + 0x91da4 (0xb7595da4)\nlibstdc++.so.5 + 0x91f16 (0xb7595f16)\nlibstdc++.so.5 + 0x9216f (0xb759616f)\nnsJAR::GetInputStream()  [/builds/tinderbox/Fx-Mozilla1.8.0/Linux_2.4.21-37.ELsmp_Depend/mozilla/modules/libjar/nsJAR.cpp, line 365]\n\nhttp://bonsai.mozilla.org/cvsblame.cgi?file=/mozilla/modules/libjar/nsJAR.cpp&mark=365&rev=FIREFOX_1_5_0_1_RELEASE#357\n\nyet another useless exception for new failing. it's nice to know this can happen, but all it means is that the majority of this bug report is a duplicate of some bug about macroizing new.\n\nIncident ID: 19344897 i have no idea, it's too complicated for my tiny little mind. it's also a terrible use of my time. and i missed good dinners just going through this list.\n\nIncident ID: 19346265 gcc sucks, perhaps after you upgrade to using trunk and building your own builds you can actually get a decent stack with proper line numbers for these other frames. don't ask me how to do that.\n\nIncident ID: 19346385 talkback didn't get a stack although it confirms that you did crash. sorry, i can't predict where or why.\n\nIncident ID: 19346782\nStack Signature\tlibc.so.6 + 0x28931 (0xb74b1931) aa25e5f7\nProduct ID\tFirefox15\nBuild ID\t2006012415\nTrigger Time\t2006-05-31 13:47:17.0\nPlatform\tLinuxIntel\nOperating System\tLinux 2.6.16\nModule\tlibc.so.6 + (00028931)\nURL visited\thttp://www.aeiveos.com:8080/~bradbury/\nUser Comments\tidentical if one didn't have to [CANCEL] the Clear Private Data operation (which causes a different fault).\nSince Last Crash\t0 sec\nTotal Uptime\t766 sec\nTrigger Reason\tSIGIOT: Abort or IOT Instruction: (signal 6)\nSource File, Line No.\tN/A\nStack Trace \t\nlibc.so.6 + 0x28931 (0xb74b1931)\nlibpthread.so.0 + 0x8fcd (0xb7dbbfcd)\nlibc.so.6 + 0x286e4 (0xb74b16e4)\nlibc.so.6 + 0x29a56 (0xb74b2a56)\nlibstdc++.so.5 + 0x91d67 (0xb7634d67)\nlibstdc++.so.5 + 0x91da4 (0xb7634da4)\nlibstdc++.so.5 + 0x9125f (0xb763425f)\nlibstdc++.so.5 + 0x91efe (0xb7634efe)\nlibstdc++.so.5 + 0x9216f (0xb763516f)\nnsAStreamCopier::PostContinuationEvent_Locked()\nnsAStreamCopier::HandleContinuationEvent()\nPL_HandleEvent()  [/builds/tinderbox/Fx-Mozilla1.8.0/Linux_2.4.21-37.ELsmp_Depend/mozilla/xpcom/threads/plevent.c, line 689]\nnsIOThreadPool::ThreadFunc()  [/builds/tinderbox/Fx-Mozilla1.8.0/Linux_2.4.21-37.ELsmp_Depend/mozilla/netwerk/base/src/nsIOThreadPool.cpp, line 196]\n\nhttp://bonsai.mozilla.org/cvsblame.cgi?file=mozilla/xpcom/io/nsStreamUtils.cpp&rev=FIREFOX_1_5_0_1_RELEASE&mark=429#422\n\nnot sure why talkback didn't give proper symbols for the xpcom bits, but the crash is obviously of the same family as most of the others here so the line is easy enough to divine.\n\nIncident ID: 19348135 - again, the interesting library is missing, and i'd be much better off if you used your own debugger and told me what was crashing instead of me reading through talkback trying to guess.\n\nIncident ID: 19348137\nStack Signature\tlibc.so.6 + 0x28931 (0xb7492931) 063e9646\nProduct ID\tFirefox15\nBuild ID\t2006012415\nTrigger Time\t2006-05-31 14:23:04.0\nPlatform\tLinuxIntel\nOperating System\tLinux 2.6.16\nModule\tlibc.so.6 + (00028931)\nURL visited\thttp://www.aeiveos.com:8080/~bradbury/\nUser Comments\t\nSince Last Crash\t0 sec\nTotal Uptime\t767 sec\nTrigger Reason\tSIGIOT: Abort or IOT Instruction: (signal 6)\nSource File, Line No.\tN/A\nStack Trace \t\nlibc.so.6 + 0x28931 (0xb7492931)\nlibpthread.so.0 + 0x8fcd (0xb7d9cfcd)\nlibc.so.6 + 0x286e4 (0xb74926e4)\nlibc.so.6 + 0x29a56 (0xb7493a56)\nlibstdc++.so.5 + 0x91d67 (0xb7615d67)\nlibstdc++.so.5 + 0x91da4 (0xb7615da4)\nlibstdc++.so.5 + 0x91f16 (0xb7615f16)\nlibstdc++.so.5 + 0x9216f (0xb761616f)\nlibstdc++.so.5 + 0x9223f (0xb761623f)\nUnicharBufferImpl::Init()  [/builds/tinderbox/Fx-Mozilla1.8.0/Linux_2.4.21-37.ELsmp_Depend/mozilla/xpcom/ds/nsUnicharBuffer.cpp, line 73]\n\nhttp://bonsai.mozilla.org/cvsblame.cgi?file=/mozilla/xpcom/ds/nsUnicharBuffer.cpp&mark=73&rev=FIREFOX_1_5_0_1_RELEASE#64\n\nsame family.\n\nIncident ID: 19367506 is a very unhappy incident\n\nIncident ID: 19367506\nStack Signature\tlibc.so.6 + 0x28931 (0xb742a931) 61f5c3e3\nProduct ID\tFirefox15\nBuild ID\t2006012415\nTrigger Time\t2006-05-31 21:53:29.0\nPlatform\tLinuxIntel\nOperating System\tLinux 2.6.16\nModule\tlibc.so.6 + (00028931)\nURL visited\thttp://www.google.com/\nUser Comments\tonly received 3-5 small messages which hardly seems likely to require ~8+MB of additional Firefox memory.) The 81MB core dump is available if I am contacted for it.\nSince Last Crash\t2 sec\nTotal Uptime\t769 sec\nTrigger Reason\tSIGIOT: Abort or IOT Instruction: (signal 6)\nSource File, Line No.\tN/A\nStack Trace \t\nlibc.so.6 + 0x28931 (0xb742a931)\nlibpthread.so.0 + 0x8fcd (0xb7d34fcd)\nlibc.so.6 + 0x286e4 (0xb742a6e4)\nlibc.so.6 + 0x29a56 (0xb742ba56)\nlibstdc++.so.5 + 0x91d67 (0xb75add67)\nlibstdc++.so.5 + 0x91da4 (0xb75adda4)\nlibstdc++.so.5 + 0x91f16 (0xb75adf16)\nlibstdc++.so.5 + 0x9216f (0xb75ae16f)\n0x080934ca\n0x0809cd56\njs_ReportOutOfMemory()  [/builds/tinderbox/Fx-Mozilla1.8.0/Linux_2.4.21-37.ELsmp_Depend/mozilla/js/src/jscntxt.c, line 755]\nJS_ReportOutOfMemory()  [/builds/tinderbox/Fx-Mozilla1.8.0/Linux_2.4.21-37.ELsmp_Depend/mozilla/js/src/jsapi.c, line 4487]\nJS_malloc()  [/builds/tinderbox/Fx-Mozilla1.8.0/Linux_2.4.21-37.ELsmp_Depend/mozilla/js/src/jsapi.c, line 1575]\njs_NewScope()  [/builds/tinderbox/Fx-Mozilla1.8.0/Linux_2.4.21-37.ELsmp_Depend/mozilla/js/src/jsscope.c, line 140]\njs_NewObjectMap()  [/builds/tinderbox/Fx-Mozilla1.8.0/Linux_2.4.21-37.ELsmp_Depend/mozilla/js/src/jsobj.c, line 1992]\njs_NewObject()  [/builds/tinderbox/Fx-Mozilla1.8.0/Linux_2.4.21-37.ELsmp_Depend/mozilla/js/src/jsobj.c, line 2036]\nJS_NewObject()  [/builds/tinderbox/Fx-Mozilla1.8.0/Linux_2.4.21-37.ELsmp_Depend/mozilla/js/src/jsapi.c, line 2241]\n0x0809ff01\n0x0809eb2f\n0x08092d32\n0x08092323\n0x080a1c11\n0x080a6f8c\njs_Invoke()  [/builds/tinderbox/Fx-Mozilla1.8.0/Linux_2.4.21-37.ELsmp_Depend/mozilla/js/src/jsinterp.c, line 1177]\njs_Interpret()  [/builds/tinderbox/Fx-Mozilla1.8.0/Linux_2.4.21-37.ELsmp_Depend/mozilla/js/src/jsinterp.c, line 3551]\njs_Invoke()  [/builds/tinderbox/Fx-Mozilla1.8.0/Linux_2.4.21-37.ELsmp_Depend/mozilla/js/src/jsinterp.c, line 1197]\n0x0809d61a\n0x0809b5d0\nPrepareAndDispatch()  [/builds/tinderbox/Fx-Mozilla1.8.0/Linux_2.4.21-37.ELsmp_Depend/mozilla/xpcom/reflect/xptcall/src/md/unix/xptcstubs_gcc_x86_unix.cpp, line 100]\nnsObserverService::NotifyObservers()  [/builds/tinderbox/Fx-Mozilla1.8.0/Linux_2.4.21-37.ELsmp_Depend/mozilla/xpcom/ds/nsObserverService.cpp, line 848]\nXPTC_InvokeByIndex()\n0x080a1810\n0x080a6f8c\njs_Invoke()  [/builds/tinderbox/Fx-Mozilla1.8.0/Linux_2.4.21-37.ELsmp_Depend/mozilla/js/src/jsinterp.c, line 1177]\njs_Interpret()  [/builds/tinderbox/Fx-Mozilla1.8.0/Linux_2.4.21-37.ELsmp_Depend/mozilla/js/src/jsinterp.c, line 3551]\njs_Invoke()  [/builds/tinderbox/Fx-Mozilla1.8.0/Linux_2.4.21-37.ELsmp_Depend/mozilla/js/src/jsinterp.c, line 1197]\n0x0809d61a\n0x0809b5d0\nPrepareAndDispatch()  [/builds/tinderbox/Fx-Mozilla1.8.0/Linux_2.4.21-37.ELsmp_Depend/mozilla/xpcom/reflect/xptcall/src/md/unix/xptcstubs_gcc_x86_unix.cpp, line 100]\nnsTimerImpl::Fire()  [/builds/tinderbox/Fx-Mozilla1.8.0/Linux_2.4.21-37.ELsmp_Depend/mozilla/xpcom/threads/nsTimerImpl.cpp, line 403]\nhandleTimerEvent()  [/builds/tinderbox/Fx-Mozilla1.8.0/Linux_2.4.21-37.ELsmp_Depend/mozilla/xpcom/threads/nsTimerImpl.cpp, line 462]\nPL_HandleEvent()  [/builds/tinderbox/Fx-Mozilla1.8.0/Linux_2.4.21-37.ELsmp_Depend/mozilla/xpcom/threads/plevent.c, line 689]\nPL_ProcessPendingEvents()  [/builds/tinderbox/Fx-Mozilla1.8.0/Linux_2.4.21-37.ELsmp_Depend/mozilla/xpcom/threads/plevent.c, line 623]\nnsEventQueueImpl::ProcessPendingEvents()  [/builds/tinderbox/Fx-Mozilla1.8.0/Linux_2.4.21-37.ELsmp_Depend/mozilla/xpcom/threads/nsEventQueue.cpp, line 421]\n0x081ee088\nlibglib-2.0.so.0 + 0x477e5 (0xb78fc7e5)\nlibglib-2.0.so.0 + 0x235c5 (0xb78d85c5)\nlibglib-2.0.so.0 + 0x2456c (0xb78d956c)\nlibglib-2.0.so.0 + 0x2488a (0xb78d988a)\nlibglib-2.0.so.0 + 0x24dd1 (0xb78d9dd1)\nlibgtk-x11-2.0.so.0 + 0x115977 (0xb7b6d977)\n0x081ee32c\n0x08637164\n0x0807ae06\n0x08077207\nlibc.so.6 + 0x1550d (0xb741750d)\n\nthis one wins a prize, i've actually seen this pattern at some of my employers, as you can see, something recognized it was running out of memory, and then it was unfortunate enough to need more memory in an unsafe (|new|) way and got whacked. the likely critters are dom or xpconnect since those are the places that the program jumps to. i think my money is on xpconnect.\n\nIncident ID: 19362494 - unhappy\n\nIncident ID: 19362494\nStack Signature\tlibc.so.6 + 0x68fd7 (0xb7539fd7) 699ff4ef\nProduct ID\tFirefox15\nBuild ID\t2006042618\nTrigger Time\t2006-05-31 23:57:53.0\nPlatform\tLinuxIntel\nOperating System\tLinux 2.6.13.3\nModule\tlibc.so.6 + (00068fd7)\nURL visited\t\nUser Comments\t\nSince Last Crash\t0 sec\nTotal Uptime\t0 sec\nTrigger Reason\tSIGSEGV: Segmentation Fault: (signal 11)\nSource File, Line No.\tN/A\nStack Trace \t\nlibc.so.6 + 0x68fd7 (0xb7539fd7)\nlibc.so.6 + 0x4d904 (0xb751e904)\nmplayerplug-in.so + 0x1d992 (0xaf8c1992)\nlibpthread.so.0 + 0x4b63 (0xb7e3db63)\n\nincluded here for completeness, this isn't our bug, and with the various versions of mplayer plugin floating around and no hint about which one, i'm not going to waste time trying to find the hundreds or thousands of lines that could possibly crash in it. feel free to build mplayerplugin with symbols when you go on your crashing crusade, be sure to have their latest and greatest version too. personally i'd suggest you not have it or any other plugins installed when you go on your crusade, it's a terrible waste of time. better to probe plugin crashes in a smaller sandbox.\n\nIncident ID: 19348531 this is quite unfortunate, but the code you're crashing is over a year old and other people are working on making this area crash less often.\n\ntime lost: at least 3 hours. if you would please arrange to buy ajschult a nice dinner to make up for time of his i spent this morning, i'd appreciate it. he'd also gladly help you setup your unix build environment, a working debugger, and whatever else is required to do this testing in a reasonable manner.", "creation_time": "2006-06-04T18:54:53Z", "creator": "timeless@bemail.org", "raw_text": "robert: so, you managed to crash at a number of different places. unfortunately it looks like a bunch of them are libc. we don't (and can't) have useful symbols for libc.\n\nif you want to paste talkback numbers into bugzilla, please do one of two things:\n\neither paste them exactly like this:\nIncident ID: 19337782\nor paste them like this:\nTB19337782X\nThe result is that bugzilla will linkify them for us. \n\nit'd also kinda help if we didn't have just one bug for all these problems because your crashes are all over the map. but i'm not quite sure what to do about that atm.\n\ni think a good starting point would be if you used a trunk nightly instead of a branch release (1.5.0.1). because we've been trying to fix crashes like the ones you're reporting on trunk, and your reports could likely have been resolved either by those attempts or general code improvements in the year plus since the code branched for the 1.5 release cycles.\n\nthe first example of code changing is:\nhttp://bonsai.mozilla.org/cvsview2.cgi?diff_mode=context&whitespace_mode=show&file=GIF2.cpp&branch=&root=/cvsroot&subdir=mozilla/modules/libpr0n/decoders/gif&command=DIFF_FRAMESET&rev1=1.52&rev2=1.53\n\nwhich i believe makes Incident ID: 18350634 useless\n\ni'm not sure about Incident ID: 19240883 because i can't figure out why it would be jumping into a null function pointer. but had you used a trunk nightly instead of the whacky branch release, perhaps i'd have had a better shot.\n\nplease do ask your distro to install \"debuginfo\" for all the os libraries, especiall libc.so.6, libpthread.so.0, libstdc++.so.5. this is possible for FC4 and FC5. also please do us the favor of including the name of your linux distro and its version so that we can tailor information to that.\n\ni think that:\n\nIncident ID: 19337782\nStack Signature\tlibc.so.6 + 0x28931 (0xb746a931) 21ebabaa\nProduct ID\tFirefox15\nBuild ID\t2006012415\nTrigger Time\t2006-05-31 09:59:39.0\nPlatform\tLinuxIntel\nOperating System\tLinux 2.6.16\nModule\tlibc.so.6 + (00028931)\nURL visited\thttp://www.aeiveos.com:8080/~bradbury/\nUser Comments\tMozilla launcher (mozilla-launcher) aborted at line 116 with under linux when virtual memory limited to 60MB (i.e. ulimit -Sv 60000) then try to run firefox.\nSince Last Crash\t1 sec\nTotal Uptime\t766 sec\nTrigger Reason\tSIGIOT: Abort or IOT Instruction: (signal 6)\nSource File, Line No.\tN/A\nStack Trace \t\nlibc.so.6 + 0x28931 (0xb746a931)\nlibpthread.so.0 + 0x8fcd (0xb7d74fcd)\nlibc.so.6 + 0x286e4 (0xb746a6e4)\nlibc.so.6 + 0x29a56 (0xb746ba56)\nlibstdc++.so.5 + 0x91d67 (0xb75edd67)\nlibstdc++.so.5 + 0x91da4 (0xb75edda4)\nlibstdc++.so.5 + 0x91f16 (0xb75edf16)\nlibstdc++.so.5 + 0x9216f (0xb75ee16f)\nlibstdc++.so.5 + 0x9223f (0xb75ee23f)\nBookmarkParser::Init()  [/builds/tinderbox/Fx-Mozilla1.8.0/Linux_2.4.21-37.ELsmp_Depend/mozilla/browser/components/bookmarks/src/nsBookmarksService.cpp, line 701]\n\nmeans that the os returned a malloc failure which the c++ runtime replaced with an exception for new. we don't have exception handlers for new in general because we expect an old behavior (new returning 0 instead of throwing). unfortunately, fixing this requires lots of macro work. but this is only speculation because i don't have symbols for the addresses above BookmarkParser::Init, if you installed debuginfo, you could teach yourself to use gdb enough to ask it what functions the addresses in the libraries are and provide a better stack trace.\n\nactually, it's probably not nice for you to use talkback at all, if you want to play ulimit chicken, please build mozilla (firefox, whatever) from cvs with --enable-debuger-info-modules (at least, or --enable-debug), and then use ./run-mozilla.sh -g -d gdb ./firefox-bin or whatever (see unix debugging faq).\n\nIncident ID: 19337970 is another abort, which almost certainly also means the same thing as above, except talkback couldn't figure out what library was on the stack after xptcall, so i can't do anything with it.\n\nIncident ID: 19338133 is a crash on windows, which means you almost certainly *typo*d the incident id.\n\nIncident ID: 19339003\nStack Signature\tlibc.so.6 + 0x28931 (0xb7498931) 5aebae57\nProduct ID\tFirefox15\nBuild ID\t2006012415\nTrigger Time\t2006-05-31 10:18:18.0\nPlatform\tLinuxIntel\nOperating System\tLinux 2.6.16\nModule\tlibc.so.6 + (00028931)\nURL visited\thttp://www.aeiveos.com:8080/~bradbury/\nUser Comments\t\nSince Last Crash\t0 sec\nTotal Uptime\t766 sec\nTrigger Reason\tSIGIOT: Abort or IOT Instruction: (signal 6)\nSource File, Line No.\tN/A\nStack Trace \t\nlibc.so.6 + 0x28931 (0xb7498931)\nlibpthread.so.0 + 0x8fcd (0xb7da2fcd)\nlibc.so.6 + 0x286e4 (0xb74986e4)\nlibc.so.6 + 0x29a56 (0xb7499a56)\nlibstdc++.so.5 + 0x91d67 (0xb761bd67)\nlibstdc++.so.5 + 0x91da4 (0xb761bda4)\nlibstdc++.so.5 + 0x91f16 (0xb761bf16)\nlibstdc++.so.5 + 0x9216f (0xb761c16f)\nlibstdc++.so.5 + 0x9223f (0xb761c23f)\nmozJSSubScriptLoader::LoadSubScript()  [/builds/tinderbox/Fx-Mozilla1.8.0/Linux_2.4.21-37.ELsmp_Depend/mozilla/js/src/xpconnect/loader/mozJSSubScriptLoader.cpp, line 303]\n\nhttp://bonsai.mozilla.org/cvsblame.cgi?file=/mozilla/js/src/xpconnect/loader/mozJSSubScriptLoader.cpp&mark=303&rev=FIREFOX_1_5_0_1_RELEASE#281\n\nwould be another uncaught oom exception from the c++ runtime. at this point i'm getting tired of them, and i have ~20 more tabs to read through (most have this stack pattern).\n\nIncident ID: 19343075 again is missing the name of the library of interest.\n\nIncident ID: 19343126 baffles me, it doesn't help that i can't figure out what versions of files to read. but again, this is a *huge* waste of my time, i've lost a couple of hours to this list of incidents on a branch that's over a year old. please don't report crashes against old branches, especially if you're going to do systematic testing.\n\nIncident ID: 19344090\nStack Signature\tlibc.so.6 + 0x28931 (0xb7412931) 4725fb7e\nProduct ID\tFirefox15\nBuild ID\t2006012415\nTrigger Time\t2006-05-31 12:38:20.0\nPlatform\tLinuxIntel\nOperating System\tLinux 2.6.16\nModule\tlibc.so.6 + (00028931)\nURL visited\thttp://www.aeiveos.com:8080/~bradbury/\nUser Comments\tFirefox aborts after opening first window. Using \"ulimit -Sv 50000\" with a minimal profile gets firefox through the initial startup profile selection and draws the outline of the first (home) window with nothing displayed. Then it aborts.\nSince Last Crash\t0 sec\nTotal Uptime\t766 sec\nTrigger Reason\tSIGIOT: Abort or IOT Instruction: (signal 6)\nSource File, Line No.\tN/A\nStack Trace \t\nlibc.so.6 + 0x28931 (0xb7412931)\nlibpthread.so.0 + 0x8fcd (0xb7d1cfcd)\nlibc.so.6 + 0x286e4 (0xb74126e4)\nlibc.so.6 + 0x29a56 (0xb7413a56)\nlibstdc++.so.5 + 0x91d67 (0xb7595d67)\nlibstdc++.so.5 + 0x91da4 (0xb7595da4)\nlibstdc++.so.5 + 0x91f16 (0xb7595f16)\nlibstdc++.so.5 + 0x9216f (0xb759616f)\nnsJAR::GetInputStream()  [/builds/tinderbox/Fx-Mozilla1.8.0/Linux_2.4.21-37.ELsmp_Depend/mozilla/modules/libjar/nsJAR.cpp, line 365]\n\nhttp://bonsai.mozilla.org/cvsblame.cgi?file=/mozilla/modules/libjar/nsJAR.cpp&mark=365&rev=FIREFOX_1_5_0_1_RELEASE#357\n\nyet another useless exception for new failing. it's nice to know this can happen, but all it means is that the majority of this bug report is a duplicate of some bug about macroizing new.\n\nIncident ID: 19344897 i have no idea, it's too complicated for my tiny little mind. it's also a terrible use of my time. and i missed good dinners just going through this list.\n\nIncident ID: 19346265 gcc sucks, perhaps after you upgrade to using trunk and building your own builds you can actually get a decent stack with proper line numbers for these other frames. don't ask me how to do that.\n\nIncident ID: 19346385 talkback didn't get a stack although it confirms that you did crash. sorry, i can't predict where or why.\n\nIncident ID: 19346782\nStack Signature\tlibc.so.6 + 0x28931 (0xb74b1931) aa25e5f7\nProduct ID\tFirefox15\nBuild ID\t2006012415\nTrigger Time\t2006-05-31 13:47:17.0\nPlatform\tLinuxIntel\nOperating System\tLinux 2.6.16\nModule\tlibc.so.6 + (00028931)\nURL visited\thttp://www.aeiveos.com:8080/~bradbury/\nUser Comments\tidentical if one didn't have to [CANCEL] the Clear Private Data operation (which causes a different fault).\nSince Last Crash\t0 sec\nTotal Uptime\t766 sec\nTrigger Reason\tSIGIOT: Abort or IOT Instruction: (signal 6)\nSource File, Line No.\tN/A\nStack Trace \t\nlibc.so.6 + 0x28931 (0xb74b1931)\nlibpthread.so.0 + 0x8fcd (0xb7dbbfcd)\nlibc.so.6 + 0x286e4 (0xb74b16e4)\nlibc.so.6 + 0x29a56 (0xb74b2a56)\nlibstdc++.so.5 + 0x91d67 (0xb7634d67)\nlibstdc++.so.5 + 0x91da4 (0xb7634da4)\nlibstdc++.so.5 + 0x9125f (0xb763425f)\nlibstdc++.so.5 + 0x91efe (0xb7634efe)\nlibstdc++.so.5 + 0x9216f (0xb763516f)\nnsAStreamCopier::PostContinuationEvent_Locked()\nnsAStreamCopier::HandleContinuationEvent()\nPL_HandleEvent()  [/builds/tinderbox/Fx-Mozilla1.8.0/Linux_2.4.21-37.ELsmp_Depend/mozilla/xpcom/threads/plevent.c, line 689]\nnsIOThreadPool::ThreadFunc()  [/builds/tinderbox/Fx-Mozilla1.8.0/Linux_2.4.21-37.ELsmp_Depend/mozilla/netwerk/base/src/nsIOThreadPool.cpp, line 196]\n\nhttp://bonsai.mozilla.org/cvsblame.cgi?file=mozilla/xpcom/io/nsStreamUtils.cpp&rev=FIREFOX_1_5_0_1_RELEASE&mark=429#422\n\nnot sure why talkback didn't give proper symbols for the xpcom bits, but the crash is obviously of the same family as most of the others here so the line is easy enough to divine.\n\nIncident ID: 19348135 - again, the interesting library is missing, and i'd be much better off if you used your own debugger and told me what was crashing instead of me reading through talkback trying to guess.\n\nIncident ID: 19348137\nStack Signature\tlibc.so.6 + 0x28931 (0xb7492931) 063e9646\nProduct ID\tFirefox15\nBuild ID\t2006012415\nTrigger Time\t2006-05-31 14:23:04.0\nPlatform\tLinuxIntel\nOperating System\tLinux 2.6.16\nModule\tlibc.so.6 + (00028931)\nURL visited\thttp://www.aeiveos.com:8080/~bradbury/\nUser Comments\t\nSince Last Crash\t0 sec\nTotal Uptime\t767 sec\nTrigger Reason\tSIGIOT: Abort or IOT Instruction: (signal 6)\nSource File, Line No.\tN/A\nStack Trace \t\nlibc.so.6 + 0x28931 (0xb7492931)\nlibpthread.so.0 + 0x8fcd (0xb7d9cfcd)\nlibc.so.6 + 0x286e4 (0xb74926e4)\nlibc.so.6 + 0x29a56 (0xb7493a56)\nlibstdc++.so.5 + 0x91d67 (0xb7615d67)\nlibstdc++.so.5 + 0x91da4 (0xb7615da4)\nlibstdc++.so.5 + 0x91f16 (0xb7615f16)\nlibstdc++.so.5 + 0x9216f (0xb761616f)\nlibstdc++.so.5 + 0x9223f (0xb761623f)\nUnicharBufferImpl::Init()  [/builds/tinderbox/Fx-Mozilla1.8.0/Linux_2.4.21-37.ELsmp_Depend/mozilla/xpcom/ds/nsUnicharBuffer.cpp, line 73]\n\nhttp://bonsai.mozilla.org/cvsblame.cgi?file=/mozilla/xpcom/ds/nsUnicharBuffer.cpp&mark=73&rev=FIREFOX_1_5_0_1_RELEASE#64\n\nsame family.\n\nIncident ID: 19367506 is a very unhappy incident\n\nIncident ID: 19367506\nStack Signature\tlibc.so.6 + 0x28931 (0xb742a931) 61f5c3e3\nProduct ID\tFirefox15\nBuild ID\t2006012415\nTrigger Time\t2006-05-31 21:53:29.0\nPlatform\tLinuxIntel\nOperating System\tLinux 2.6.16\nModule\tlibc.so.6 + (00028931)\nURL visited\thttp://www.google.com/\nUser Comments\tonly received 3-5 small messages which hardly seems likely to require ~8+MB of additional Firefox memory.) The 81MB core dump is available if I am contacted for it.\nSince Last Crash\t2 sec\nTotal Uptime\t769 sec\nTrigger Reason\tSIGIOT: Abort or IOT Instruction: (signal 6)\nSource File, Line No.\tN/A\nStack Trace \t\nlibc.so.6 + 0x28931 (0xb742a931)\nlibpthread.so.0 + 0x8fcd (0xb7d34fcd)\nlibc.so.6 + 0x286e4 (0xb742a6e4)\nlibc.so.6 + 0x29a56 (0xb742ba56)\nlibstdc++.so.5 + 0x91d67 (0xb75add67)\nlibstdc++.so.5 + 0x91da4 (0xb75adda4)\nlibstdc++.so.5 + 0x91f16 (0xb75adf16)\nlibstdc++.so.5 + 0x9216f (0xb75ae16f)\n0x080934ca\n0x0809cd56\njs_ReportOutOfMemory()  [/builds/tinderbox/Fx-Mozilla1.8.0/Linux_2.4.21-37.ELsmp_Depend/mozilla/js/src/jscntxt.c, line 755]\nJS_ReportOutOfMemory()  [/builds/tinderbox/Fx-Mozilla1.8.0/Linux_2.4.21-37.ELsmp_Depend/mozilla/js/src/jsapi.c, line 4487]\nJS_malloc()  [/builds/tinderbox/Fx-Mozilla1.8.0/Linux_2.4.21-37.ELsmp_Depend/mozilla/js/src/jsapi.c, line 1575]\njs_NewScope()  [/builds/tinderbox/Fx-Mozilla1.8.0/Linux_2.4.21-37.ELsmp_Depend/mozilla/js/src/jsscope.c, line 140]\njs_NewObjectMap()  [/builds/tinderbox/Fx-Mozilla1.8.0/Linux_2.4.21-37.ELsmp_Depend/mozilla/js/src/jsobj.c, line 1992]\njs_NewObject()  [/builds/tinderbox/Fx-Mozilla1.8.0/Linux_2.4.21-37.ELsmp_Depend/mozilla/js/src/jsobj.c, line 2036]\nJS_NewObject()  [/builds/tinderbox/Fx-Mozilla1.8.0/Linux_2.4.21-37.ELsmp_Depend/mozilla/js/src/jsapi.c, line 2241]\n0x0809ff01\n0x0809eb2f\n0x08092d32\n0x08092323\n0x080a1c11\n0x080a6f8c\njs_Invoke()  [/builds/tinderbox/Fx-Mozilla1.8.0/Linux_2.4.21-37.ELsmp_Depend/mozilla/js/src/jsinterp.c, line 1177]\njs_Interpret()  [/builds/tinderbox/Fx-Mozilla1.8.0/Linux_2.4.21-37.ELsmp_Depend/mozilla/js/src/jsinterp.c, line 3551]\njs_Invoke()  [/builds/tinderbox/Fx-Mozilla1.8.0/Linux_2.4.21-37.ELsmp_Depend/mozilla/js/src/jsinterp.c, line 1197]\n0x0809d61a\n0x0809b5d0\nPrepareAndDispatch()  [/builds/tinderbox/Fx-Mozilla1.8.0/Linux_2.4.21-37.ELsmp_Depend/mozilla/xpcom/reflect/xptcall/src/md/unix/xptcstubs_gcc_x86_unix.cpp, line 100]\nnsObserverService::NotifyObservers()  [/builds/tinderbox/Fx-Mozilla1.8.0/Linux_2.4.21-37.ELsmp_Depend/mozilla/xpcom/ds/nsObserverService.cpp, line 848]\nXPTC_InvokeByIndex()\n0x080a1810\n0x080a6f8c\njs_Invoke()  [/builds/tinderbox/Fx-Mozilla1.8.0/Linux_2.4.21-37.ELsmp_Depend/mozilla/js/src/jsinterp.c, line 1177]\njs_Interpret()  [/builds/tinderbox/Fx-Mozilla1.8.0/Linux_2.4.21-37.ELsmp_Depend/mozilla/js/src/jsinterp.c, line 3551]\njs_Invoke()  [/builds/tinderbox/Fx-Mozilla1.8.0/Linux_2.4.21-37.ELsmp_Depend/mozilla/js/src/jsinterp.c, line 1197]\n0x0809d61a\n0x0809b5d0\nPrepareAndDispatch()  [/builds/tinderbox/Fx-Mozilla1.8.0/Linux_2.4.21-37.ELsmp_Depend/mozilla/xpcom/reflect/xptcall/src/md/unix/xptcstubs_gcc_x86_unix.cpp, line 100]\nnsTimerImpl::Fire()  [/builds/tinderbox/Fx-Mozilla1.8.0/Linux_2.4.21-37.ELsmp_Depend/mozilla/xpcom/threads/nsTimerImpl.cpp, line 403]\nhandleTimerEvent()  [/builds/tinderbox/Fx-Mozilla1.8.0/Linux_2.4.21-37.ELsmp_Depend/mozilla/xpcom/threads/nsTimerImpl.cpp, line 462]\nPL_HandleEvent()  [/builds/tinderbox/Fx-Mozilla1.8.0/Linux_2.4.21-37.ELsmp_Depend/mozilla/xpcom/threads/plevent.c, line 689]\nPL_ProcessPendingEvents()  [/builds/tinderbox/Fx-Mozilla1.8.0/Linux_2.4.21-37.ELsmp_Depend/mozilla/xpcom/threads/plevent.c, line 623]\nnsEventQueueImpl::ProcessPendingEvents()  [/builds/tinderbox/Fx-Mozilla1.8.0/Linux_2.4.21-37.ELsmp_Depend/mozilla/xpcom/threads/nsEventQueue.cpp, line 421]\n0x081ee088\nlibglib-2.0.so.0 + 0x477e5 (0xb78fc7e5)\nlibglib-2.0.so.0 + 0x235c5 (0xb78d85c5)\nlibglib-2.0.so.0 + 0x2456c (0xb78d956c)\nlibglib-2.0.so.0 + 0x2488a (0xb78d988a)\nlibglib-2.0.so.0 + 0x24dd1 (0xb78d9dd1)\nlibgtk-x11-2.0.so.0 + 0x115977 (0xb7b6d977)\n0x081ee32c\n0x08637164\n0x0807ae06\n0x08077207\nlibc.so.6 + 0x1550d (0xb741750d)\n\nthis one wins a prize, i've actually seen this pattern at some of my employers, as you can see, something recognized it was running out of memory, and then it was unfortunate enough to need more memory in an unsafe (|new|) way and got whacked. the likely critters are dom or xpconnect since those are the places that the program jumps to. i think my money is on xpconnect.\n\nIncident ID: 19362494 - unhappy\n\nIncident ID: 19362494\nStack Signature\tlibc.so.6 + 0x68fd7 (0xb7539fd7) 699ff4ef\nProduct ID\tFirefox15\nBuild ID\t2006042618\nTrigger Time\t2006-05-31 23:57:53.0\nPlatform\tLinuxIntel\nOperating System\tLinux 2.6.13.3\nModule\tlibc.so.6 + (00068fd7)\nURL visited\t\nUser Comments\t\nSince Last Crash\t0 sec\nTotal Uptime\t0 sec\nTrigger Reason\tSIGSEGV: Segmentation Fault: (signal 11)\nSource File, Line No.\tN/A\nStack Trace \t\nlibc.so.6 + 0x68fd7 (0xb7539fd7)\nlibc.so.6 + 0x4d904 (0xb751e904)\nmplayerplug-in.so + 0x1d992 (0xaf8c1992)\nlibpthread.so.0 + 0x4b63 (0xb7e3db63)\n\nincluded here for completeness, this isn't our bug, and with the various versions of mplayer plugin floating around and no hint about which one, i'm not going to waste time trying to find the hundreds or thousands of lines that could possibly crash in it. feel free to build mplayerplugin with symbols when you go on your crashing crusade, be sure to have their latest and greatest version too. personally i'd suggest you not have it or any other plugins installed when you go on your crusade, it's a terrible waste of time. better to probe plugin crashes in a smaller sandbox.\n\nIncident ID: 19348531 this is quite unfortunate, but the code you're crashing is over a year old and other people are working on making this area crash less often.\n\ntime lost: at least 3 hours. if you would please arrange to buy ajschult a nice dinner to make up for time of his i spent this morning, i'd appreciate it. he'd also gladly help you setup your unix build environment, a working debugger, and whatever else is required to do this testing in a reasonable manner.", "tags": [], "author": "timeless@bemail.org"}, {"tags": [], "author": "robert.bradbury@gmail.com", "creation_time": "2006-06-04T21:16:37Z", "text": "Comments in reply to comments I have received.\n\n1) I am working on producing a Firefox with complete debugging information, including at least some of the system libraries (probably not some of the X/graphis libraries). It will likely take me at least a few days to put this together.\n\n2) The bugs are easy to reproduce on any Linux system.  Presumably the code maintainers have Firefox versions which are assembled with full symbol tables and/or debugging enabled.  Steps to reproduce are to determine the \"startup memory range\" for Firefox using whatever your default profile is.  For me this is in the range \"ulimit -Sv 41000\" to \"ulimit -Sv  75000\" depending on how large the history, bookmarks, etc. are.  At the low end of this range faults will occur very early on in the startup process.  At the high end of this range faults will occur only when you open URLs with complex HTML code (or many tabs &| windows).  To detect faults which involve \"leaks\", one generally has to push the limit to 100-150MB and browse \"active\" sites (NY Times, Gmail, etc.) for a while.  I suspect that simply going to Digg and opening \"random\" URLs from their list (which are all types of pages) will allow you to rapidly encounter a variety of problems.  Slashdot.org or Google News might serve as equivalent link variety portals.  The problems I have encountered are largely number and/or time related.  Open more tabs, windows, bigger/more complex scripts, leave the browser active longer, etc. will result in these types of faults.  Decreasing the virtual memory limit simply makes them happen more quickly.\n\n3) The problems with the libc faults (those terminating in SIGIOT) I believe are due to explicit calls to abort() in the pthread library and/or the garbage collector.  So the problems probably may involve the detection of a \"should not happen\" condition associated with limited memory during a critical code segment.  This would tend to suggest (to me) the use of a library which should *not* be used by Firefox.  If the program \"starts\" all memory allocation failures should be handled gracefully.  If the system libraries call abort() the proper way to handle this is using the C standard signal() & raise() functions in combination with setjump() and longjmp().]  A SIGIOT should never cause a program fault. It should instead result in calling of the function which handles SIGIOTs which would longjmp() back to a safe setjmp() location which continued program execution after informing the user of the type of problem which had been encountered.  This probably means that the code should have a fair number of setjmps() to handle the faults which occur in subroutines N levels below/after logical checkpointing locations (e.g. before opening a tab, before opening a window, before opening the bookmarks, before opening/running an extension, etc.)\n\n[Bear in mind that I don't understand the Firefox architecture well at all -- so some of the comments above may make no sense.]\n\nOne easy interesting test for some of my thoughts above is to include an explicit abort() routine in the Firefox code which replaces the normal system call.  That could then confirm when abort() is being called and provide more extensive debugging information (perhaps there should be callback functions for code segments that are called whenever a SIGIOT or SIGSEGV is generated).\n\nIt should also be noted that you can get different kinds of faults by limiting the stack size (using \"ulimit -Ss #\").  I'm not sure this would be as helpful however in finding program weaknesses.\n\n", "creator": "robert.bradbury@gmail.com", "raw_text": "Comments in reply to comments I have received.\n\n1) I am working on producing a Firefox with complete debugging information, including at least some of the system libraries (probably not some of the X/graphis libraries). It will likely take me at least a few days to put this together.\n\n2) The bugs are easy to reproduce on any Linux system.  Presumably the code maintainers have Firefox versions which are assembled with full symbol tables and/or debugging enabled.  Steps to reproduce are to determine the \"startup memory range\" for Firefox using whatever your default profile is.  For me this is in the range \"ulimit -Sv 41000\" to \"ulimit -Sv  75000\" depending on how large the history, bookmarks, etc. are.  At the low end of this range faults will occur very early on in the startup process.  At the high end of this range faults will occur only when you open URLs with complex HTML code (or many tabs &| windows).  To detect faults which involve \"leaks\", one generally has to push the limit to 100-150MB and browse \"active\" sites (NY Times, Gmail, etc.) for a while.  I suspect that simply going to Digg and opening \"random\" URLs from their list (which are all types of pages) will allow you to rapidly encounter a variety of problems.  Slashdot.org or Google News might serve as equivalent link variety portals.  The problems I have encountered are largely number and/or time related.  Open more tabs, windows, bigger/more complex scripts, leave the browser active longer, etc. will result in these types of faults.  Decreasing the virtual memory limit simply makes them happen more quickly.\n\n3) The problems with the libc faults (those terminating in SIGIOT) I believe are due to explicit calls to abort() in the pthread library and/or the garbage collector.  So the problems probably may involve the detection of a \"should not happen\" condition associated with limited memory during a critical code segment.  This would tend to suggest (to me) the use of a library which should *not* be used by Firefox.  If the program \"starts\" all memory allocation failures should be handled gracefully.  If the system libraries call abort() the proper way to handle this is using the C standard signal() & raise() functions in combination with setjump() and longjmp().]  A SIGIOT should never cause a program fault. It should instead result in calling of the function which handles SIGIOTs which would longjmp() back to a safe setjmp() location which continued program execution after informing the user of the type of problem which had been encountered.  This probably means that the code should have a fair number of setjmps() to handle the faults which occur in subroutines N levels below/after logical checkpointing locations (e.g. before opening a tab, before opening a window, before opening the bookmarks, before opening/running an extension, etc.)\n\n[Bear in mind that I don't understand the Firefox architecture well at all -- so some of the comments above may make no sense.]\n\nOne easy interesting test for some of my thoughts above is to include an explicit abort() routine in the Firefox code which replaces the normal system call.  That could then confirm when abort() is being called and provide more extensive debugging information (perhaps there should be callback functions for code segments that are called whenever a SIGIOT or SIGSEGV is generated).\n\nIt should also be noted that you can get different kinds of faults by limiting the stack size (using \"ulimit -Ss #\").  I'm not sure this would be as helpful however in finding program weaknesses.\n\n", "is_private": false, "time": "2006-06-04T21:16:37Z", "count": 5, "attachment_id": null, "id": 2873297, "bug_id": 336807}, {"count": 6, "time": "2006-06-04T22:43:23Z", "attachment_id": null, "is_private": false, "bug_id": 336807, "id": 2873341, "author": "timeless@bemail.org", "tags": [], "raw_text": "to be perfectly honest, it's a waste of my time. i'd rather read coverity reports, and i do that, a lot. * coverity tells us about oom problems and similar.\n\ni don't have your unix box, and i'm not going to clone it. i have used ulimit in the past to systematically eliminate problems. however using live web pages and big jumps is *not* the way to do it. we have test apps (testprotocols, gtkembed, xpcshell), which are much better suited, and you shouldn't use dynamic content for any of this stuff. things should be reproducable, that's the nice part about a ulimit, it's not a random memory limit, it's a consistent one.\n\nplease don't lecture us, or me about memory failures. i've been working on mozilla for many years and memory failures have always been a concern of mine, and they will continue to be one for me today.\n\nas for signal/setjump/longjump, that's basically insane. gecko is way too complicated for that, we'd be calling things constantly trying to retain state just to protect from every conceivable os call.\n\nthere are things to do, the main one is wrapping |new| in a macro that allows a decoration for the annoying modern gcc compilers that are exception happy so that the exceptions are either not generated or caught and can be handled by mozilla the way mozilla wants to handle them.\n\nas i said earlier, you should be the one to install debuginfo and then use it to find out what symbols are at the system addresses referenced in the call stacks above. this isn't something we should do. and it's certainly not something i'm going to do.\n\nactually, please do setup symbols for at least: glib, gdk, gtk, x11, libc, libstdc++, libpthread. otherwise you'll get holes and bad results eventually. if your system has a way to download debuginfo for everything, you might as well ask it to do so. there's a difference between using debug happy libraries and libraries for which your debugger can get symbol information when it needs it. the latter is all we ask, and should have no affect on the normal system behavior unless the existence of the symbols results in you not having enough free disk space.", "creator": "timeless@bemail.org", "creation_time": "2006-06-04T22:43:23Z", "text": "to be perfectly honest, it's a waste of my time. i'd rather read coverity reports, and i do that, a lot. * coverity tells us about oom problems and similar.\n\ni don't have your unix box, and i'm not going to clone it. i have used ulimit in the past to systematically eliminate problems. however using live web pages and big jumps is *not* the way to do it. we have test apps (testprotocols, gtkembed, xpcshell), which are much better suited, and you shouldn't use dynamic content for any of this stuff. things should be reproducable, that's the nice part about a ulimit, it's not a random memory limit, it's a consistent one.\n\nplease don't lecture us, or me about memory failures. i've been working on mozilla for many years and memory failures have always been a concern of mine, and they will continue to be one for me today.\n\nas for signal/setjump/longjump, that's basically insane. gecko is way too complicated for that, we'd be calling things constantly trying to retain state just to protect from every conceivable os call.\n\nthere are things to do, the main one is wrapping |new| in a macro that allows a decoration for the annoying modern gcc compilers that are exception happy so that the exceptions are either not generated or caught and can be handled by mozilla the way mozilla wants to handle them.\n\nas i said earlier, you should be the one to install debuginfo and then use it to find out what symbols are at the system addresses referenced in the call stacks above. this isn't something we should do. and it's certainly not something i'm going to do.\n\nactually, please do setup symbols for at least: glib, gdk, gtk, x11, libc, libstdc++, libpthread. otherwise you'll get holes and bad results eventually. if your system has a way to download debuginfo for everything, you might as well ask it to do so. there's a difference between using debug happy libraries and libraries for which your debugger can get symbol information when it needs it. the latter is all we ask, and should have no affect on the normal system behavior unless the existence of the symbols results in you not having enough free disk space."}, {"tags": [], "is_private": false, "count": 7, "attachment_id": null, "time": "2006-06-14T22:32:45Z", "id": 2882873, "bug_id": 336807, "author": "robert.bradbury@gmail.com", "creation_time": "2006-06-14T22:32:45Z", "text": "Additional Talkback IDs with smilar problems:\nTB19696211\nTB19713325\nTB19788696\nAll involve SIGIOT, all seem to be coming from libpthread.so.0.  This seems to be a result of a memory allocation failure in a thread, e.g.\n\n#9  0xb74d6e40 in *__GI_raise (sig=6) at raise.c:32\n#10 0xb74d81d4 in *__GI_abort () at abort.c:88\n#11 0xb765ef17 in __cxa_call_unexpected () from /usr/lib/libstdc++.so.5\n#12 0xb765ef54 in std::terminate () from /usr/lib/libstdc++.so.5\n#13 0xb765f0c6 in __cxa_throw () from /usr/lib/libstdc++.so.5\n#14 0xb765f31f in operator new () from /usr/lib/libstdc++.so.5\n#15 0xb765f3ef in operator new[] () from /usr/lib/libstdc++.so.5\n#16 0xb7eb21a3 in UnicharBufferImpl::Create ()\n   from /usr/lib/mozilla-firefox/libxpcom_core.so\n#17 0xb7eb23ef in NS_NewUnicharBuffer () from /usr/lib/mozilla-firefox/libxpcom_core.so\n\nwhich if I understand it properly looks like a C++ \"new()\" function failed leading to a program termination.\n\nAssuming this to be the case in the three talkbacks cited above there are problems with memory allocation in nsAppShell::Run() down through a libglib function (TB19696211); js_Invoke() calling unkown functions (TB19713325); and nsTreeRows::Subtree::InsertRowAt() calling some libstdc++ functions (TB19788696).\n\nThe three cases appear to be completely different and since they all result in Firefox aborting the conclusion I am leaning towards is that Firefox cannot tolerate *ANY* memory allocation failure.  I.e. it is built with the assumption that there is an infinite amount of memory available.  If that the case someone should please tell me (and your entire user base).  I state this because I have *yet* to see a case where a memory allocation failure (i.e. hitting the virtual memory limit) produces a non-fatal error.\n\nAs I have not gone through the library code in detail, I'm leaning towards the idea that all SIGIOTs are the result of recognized memory allocation failures (and a failure to deal with them in what could be considered a clean fashion).  On the other hand, a segmentation violation, e.g.\n#2  0xb7dc705a in __pthread_raise (sig=-1210265612) at signals.c:200\n#3  0x08080744 in nsTHashtable<nsBaseHashtableET<nsDepCharHashKey, nsAutoPtr<nsINIParser::INIValue> > >::~nsTHashtable ()\n#4  0xb7dc96b7 in __pthread_sighandler (signo=11, ctx=\n      {gs = 51, __gsh = 0, fs = 0, __fsh = 0, es = 123, __esh = 0, ds = 123, __dsh = 0, edi = 3220875044, esi = 0, ebp = 3220874920, esp = 3220874904, ebx = 3085866460, edx = 150045920, ecx = 154199488, eax = 150045920, trapno = 14, err = 4, eip = 3085609818, cs = 115, __csh = 0, eflags = 2097794, esp_at_signal = 3220874904, ss = 123, __ssh = 0, fpstate = 0xbffaa41c, oldmask = 2147483648, cr2 = 12}) at sighandler.c:39\n#5  <signal handler called>\n#6  0xb7eaab5a in nsAStreamCopier::Process ()\n   from /usr/lib/mozilla-firefox/libxpcom_core.so\n#7  0xb7eaa7b2 in nsAStreamCopier::HandleContinuationEvent ()\n   from /usr/lib/mozilla-firefox/libxpcom_core.so\n#8  0xb7e81a5f in nsCOMPtr_base::~nsCOMPtr_base ()\n   from /usr/lib/mozilla-firefox/libxpcom_core.so\n\nare the result of a significantly more severe failure (e.g. running off the end of a buffer)?\n\nI'm pasting these traces directly from gdb on my current Firefox build and the core file that results when Firefox dies.\n\nAs building a version of Firefox with symbols in all the libraries is both time consuming and problematic from a long term perspective (I would have to save the entire Firefox install state and the system library state for each version I build to pair them with the core files) I would like to request that the Firefox developers distribute a completely linked static executable version of Firefox for Linux with *all* the symbols deemed useful.  Until that is done it will be difficult for people to put together test cases that can be useful.\n\nAs I can generate core dumps & traces on an hourly basis (or a daily basis if I set the ulimits higher) it will do little good if the reports simply result in requests for me to enhance my system configuration.\n\nFYI: the reports are being generated using Linux Kernel 2.6.16.1 with Gentoo glibc 2.3.6-r3 and libstdc++3.3 (libstdc++.so.6.0.3). [Which are fairly \"up-to-date\" though not bleeding edge.] These libraries are not configured however with the NPTL option.  Given the various discussions I've seen about thread problems in older Linux versions (2.4) and the various thread libraries, I am extremely doubtful that you will be able to debug these problems using user system libraries.  That is why I strongly urge you to consider the static distribution approach.\n\n", "creator": "robert.bradbury@gmail.com", "raw_text": "Additional Talkback IDs with smilar problems:\nTB19696211\nTB19713325\nTB19788696\nAll involve SIGIOT, all seem to be coming from libpthread.so.0.  This seems to be a result of a memory allocation failure in a thread, e.g.\n\n#9  0xb74d6e40 in *__GI_raise (sig=6) at raise.c:32\n#10 0xb74d81d4 in *__GI_abort () at abort.c:88\n#11 0xb765ef17 in __cxa_call_unexpected () from /usr/lib/libstdc++.so.5\n#12 0xb765ef54 in std::terminate () from /usr/lib/libstdc++.so.5\n#13 0xb765f0c6 in __cxa_throw () from /usr/lib/libstdc++.so.5\n#14 0xb765f31f in operator new () from /usr/lib/libstdc++.so.5\n#15 0xb765f3ef in operator new[] () from /usr/lib/libstdc++.so.5\n#16 0xb7eb21a3 in UnicharBufferImpl::Create ()\n   from /usr/lib/mozilla-firefox/libxpcom_core.so\n#17 0xb7eb23ef in NS_NewUnicharBuffer () from /usr/lib/mozilla-firefox/libxpcom_core.so\n\nwhich if I understand it properly looks like a C++ \"new()\" function failed leading to a program termination.\n\nAssuming this to be the case in the three talkbacks cited above there are problems with memory allocation in nsAppShell::Run() down through a libglib function (TB19696211); js_Invoke() calling unkown functions (TB19713325); and nsTreeRows::Subtree::InsertRowAt() calling some libstdc++ functions (TB19788696).\n\nThe three cases appear to be completely different and since they all result in Firefox aborting the conclusion I am leaning towards is that Firefox cannot tolerate *ANY* memory allocation failure.  I.e. it is built with the assumption that there is an infinite amount of memory available.  If that the case someone should please tell me (and your entire user base).  I state this because I have *yet* to see a case where a memory allocation failure (i.e. hitting the virtual memory limit) produces a non-fatal error.\n\nAs I have not gone through the library code in detail, I'm leaning towards the idea that all SIGIOTs are the result of recognized memory allocation failures (and a failure to deal with them in what could be considered a clean fashion).  On the other hand, a segmentation violation, e.g.\n#2  0xb7dc705a in __pthread_raise (sig=-1210265612) at signals.c:200\n#3  0x08080744 in nsTHashtable<nsBaseHashtableET<nsDepCharHashKey, nsAutoPtr<nsINIParser::INIValue> > >::~nsTHashtable ()\n#4  0xb7dc96b7 in __pthread_sighandler (signo=11, ctx=\n      {gs = 51, __gsh = 0, fs = 0, __fsh = 0, es = 123, __esh = 0, ds = 123, __dsh = 0, edi = 3220875044, esi = 0, ebp = 3220874920, esp = 3220874904, ebx = 3085866460, edx = 150045920, ecx = 154199488, eax = 150045920, trapno = 14, err = 4, eip = 3085609818, cs = 115, __csh = 0, eflags = 2097794, esp_at_signal = 3220874904, ss = 123, __ssh = 0, fpstate = 0xbffaa41c, oldmask = 2147483648, cr2 = 12}) at sighandler.c:39\n#5  <signal handler called>\n#6  0xb7eaab5a in nsAStreamCopier::Process ()\n   from /usr/lib/mozilla-firefox/libxpcom_core.so\n#7  0xb7eaa7b2 in nsAStreamCopier::HandleContinuationEvent ()\n   from /usr/lib/mozilla-firefox/libxpcom_core.so\n#8  0xb7e81a5f in nsCOMPtr_base::~nsCOMPtr_base ()\n   from /usr/lib/mozilla-firefox/libxpcom_core.so\n\nare the result of a significantly more severe failure (e.g. running off the end of a buffer)?\n\nI'm pasting these traces directly from gdb on my current Firefox build and the core file that results when Firefox dies.\n\nAs building a version of Firefox with symbols in all the libraries is both time consuming and problematic from a long term perspective (I would have to save the entire Firefox install state and the system library state for each version I build to pair them with the core files) I would like to request that the Firefox developers distribute a completely linked static executable version of Firefox for Linux with *all* the symbols deemed useful.  Until that is done it will be difficult for people to put together test cases that can be useful.\n\nAs I can generate core dumps & traces on an hourly basis (or a daily basis if I set the ulimits higher) it will do little good if the reports simply result in requests for me to enhance my system configuration.\n\nFYI: the reports are being generated using Linux Kernel 2.6.16.1 with Gentoo glibc 2.3.6-r3 and libstdc++3.3 (libstdc++.so.6.0.3). [Which are fairly \"up-to-date\" though not bleeding edge.] These libraries are not configured however with the NPTL option.  Given the various discussions I've seen about thread problems in older Linux versions (2.4) and the various thread libraries, I am extremely doubtful that you will be able to debug these problems using user system libraries.  That is why I strongly urge you to consider the static distribution approach.\n\n"}, {"count": 8, "attachment_id": null, "time": "2006-06-14T22:55:59Z", "is_private": false, "bug_id": 336807, "id": 2882897, "author": "timeless@bemail.org", "tags": [], "raw_text": "*shrug*. i'm going to wait until you get your debug firefox w/ debug system libraries.\n\nthere are some magical flags we should be able to give to g++ so that new() doesn't throw on oom, note that just because you crash at a new() oom doesn't mean gecko didn't handle dozens of ooms in the same process before it hit a new. i hope you aren't expecting gecko to toss up a dialog when it runs out of memory, dialogs are expensive and require resources you usually don't have by the time you run out of memory.\n\nfully static builds are out of the question. most users and distros don't like them. for people interested in doing debugging they can build their own or find someone else to build one.\n\nnsTreeRows::Subtree::InsertRowAt() is just another instance of new, it happens to be new[] instead of new which is why the stack is slightly different.\n\nif you want to help us find the right series of incantations to make new* not throw exceptions on alloc failure, that would be greatly appreciated.\n\nas for TB19696211, you'll need to have symbols, that should be a bug in glib, but w/o someone giving me at least function names for glib, there's no way i could tell you what went wrong.", "creator": "timeless@bemail.org", "creation_time": "2006-06-14T22:55:59Z", "text": "*shrug*. i'm going to wait until you get your debug firefox w/ debug system libraries.\n\nthere are some magical flags we should be able to give to g++ so that new() doesn't throw on oom, note that just because you crash at a new() oom doesn't mean gecko didn't handle dozens of ooms in the same process before it hit a new. i hope you aren't expecting gecko to toss up a dialog when it runs out of memory, dialogs are expensive and require resources you usually don't have by the time you run out of memory.\n\nfully static builds are out of the question. most users and distros don't like them. for people interested in doing debugging they can build their own or find someone else to build one.\n\nnsTreeRows::Subtree::InsertRowAt() is just another instance of new, it happens to be new[] instead of new which is why the stack is slightly different.\n\nif you want to help us find the right series of incantations to make new* not throw exceptions on alloc failure, that would be greatly appreciated.\n\nas for TB19696211, you'll need to have symbols, that should be a bug in glib, but w/o someone giving me at least function names for glib, there's no way i could tell you what went wrong."}, {"bug_id": 336807, "id": 3135707, "count": 9, "attachment_id": null, "time": "2007-03-14T16:47:48Z", "is_private": false, "raw_text": "As recently documented under bug #263160, there is a quasi-static firefox with debug symbols available.\n\nSee:\nhttp://www.aeiveos.com:8080/~bradbury/Firefox/firefox-2.0d/\n\nIn particular, one wants \"firefox-bin\".  One should be able to set gradually increasing memory limits and generate a host of errors (with libstdc++/libc symbols) upon attempting to start Firefox.  One should start with the case of where the binary will not load (i.e. insufficient memory to map all of the shared libraries), and gradually increase it.  There is a set of successive Mozilla/Firefox memory allocation errors which are not handled properly.  If one manages to get it up and running, then there is a separate set involving the complexity of the pages one is attempting to display.\n\nIt goes without saying that *all* memory allocation failures should fail gracefully (indicating that there is insufficient memory).  They should not abort the program and/or the browser \"state\" (which may include many other windows).", "creator": "robert.bradbury@gmail.com", "text": "As recently documented under bug #263160, there is a quasi-static firefox with debug symbols available.\n\nSee:\nhttp://www.aeiveos.com:8080/~bradbury/Firefox/firefox-2.0d/\n\nIn particular, one wants \"firefox-bin\".  One should be able to set gradually increasing memory limits and generate a host of errors (with libstdc++/libc symbols) upon attempting to start Firefox.  One should start with the case of where the binary will not load (i.e. insufficient memory to map all of the shared libraries), and gradually increase it.  There is a set of successive Mozilla/Firefox memory allocation errors which are not handled properly.  If one manages to get it up and running, then there is a separate set involving the complexity of the pages one is attempting to display.\n\nIt goes without saying that *all* memory allocation failures should fail gracefully (indicating that there is insufficient memory).  They should not abort the program and/or the browser \"state\" (which may include many other windows).", "creation_time": "2007-03-14T16:47:48Z", "author": "robert.bradbury@gmail.com", "tags": []}, {"tags": [], "author": "robert.bradbury@gmail.com", "creator": "robert.bradbury@gmail.com", "text": "Ah yes, the old Firefox does not properly handle \"out of memory errors\".\n\nI have only recently been able to build a Firefox with debug symbols and have yet to begin the process of building a full set of current system libraries with these symbols.  It is a week or multi-week long process.\n\nBut for someone who is running a version of Linux in a full debug mode (i.e. everything is compiled with -g compiling.) -- this is not a difficult task.\n\nUnder Linux you simply must set the Firefox core memory limit too low and attempt to start it.  At most points when the memory limit is too low (70-80k) it will simply refuse to start.  At points above those limits but below its real memory requirements (100+k?) it will fail at random points depending on how the limit is set.  The QA tests should be testing starting Firefox in perhaps 1K increments to test aspects of the startup process as well as determine the Firefox minimum memory requirements.  It should be noted than any plugins, large bookmarks files, etc. vastly increase the basic memory requirements.\n\nAll Firefox memory allocation failures should fail with defined error messages stating that there is too little memory available.  They do not currently do that.  It is a highly reproducible bug which should be fixed before there is another release of Firefox.\n\nNote that regarding documentation, I tested this sufficiently to document that the failures to catch the memory allocation failures were occurring in multiple places.  So there are multiple locations where this problem needs to be fixed.\n\nI have documented clearly how one reproduces the problem (slowly increasing ulimits under Linux).  IMO the developers should be debugging the details.", "creation_time": "2007-11-08T21:14:15Z", "raw_text": "Ah yes, the old Firefox does not properly handle \"out of memory errors\".\n\nI have only recently been able to build a Firefox with debug symbols and have yet to begin the process of building a full set of current system libraries with these symbols.  It is a week or multi-week long process.\n\nBut for someone who is running a version of Linux in a full debug mode (i.e. everything is compiled with -g compiling.) -- this is not a difficult task.\n\nUnder Linux you simply must set the Firefox core memory limit too low and attempt to start it.  At most points when the memory limit is too low (70-80k) it will simply refuse to start.  At points above those limits but below its real memory requirements (100+k?) it will fail at random points depending on how the limit is set.  The QA tests should be testing starting Firefox in perhaps 1K increments to test aspects of the startup process as well as determine the Firefox minimum memory requirements.  It should be noted than any plugins, large bookmarks files, etc. vastly increase the basic memory requirements.\n\nAll Firefox memory allocation failures should fail with defined error messages stating that there is too little memory available.  They do not currently do that.  It is a highly reproducible bug which should be fixed before there is another release of Firefox.\n\nNote that regarding documentation, I tested this sufficiently to document that the failures to catch the memory allocation failures were occurring in multiple places.  So there are multiple locations where this problem needs to be fixed.\n\nI have documented clearly how one reproduces the problem (slowly increasing ulimits under Linux).  IMO the developers should be debugging the details.", "count": 10, "time": "2007-11-08T21:14:15Z", "attachment_id": null, "is_private": false, "id": 3366078, "bug_id": 336807}, {"bug_id": 336807, "id": 4161814, "attachment_id": null, "count": 11, "time": "2009-06-21T16:38:50Z", "is_private": false, "raw_text": "do you still see this problem using FF 3.5 beta**, or FF 3.0 started in safe mode***?\n\nIf yes, please comment\nIf not, please close with resolution set to WORKSFORME or INVALID (if problem was extension or the like)\n\n** http://www.mozilla.com/en-US/firefox/all-beta.html\n*** http://support.mozilla.com/en-US/kb/Safe+Mode", "creator": "vseerror@lehigh.edu", "creation_time": "2009-06-21T16:38:50Z", "text": "do you still see this problem using FF 3.5 beta**, or FF 3.0 started in safe mode***?\n\nIf yes, please comment\nIf not, please close with resolution set to WORKSFORME or INVALID (if problem was extension or the like)\n\n** http://www.mozilla.com/en-US/firefox/all-beta.html\n*** http://support.mozilla.com/en-US/kb/Safe+Mode", "author": "vseerror@lehigh.edu", "tags": []}, {"tags": [], "attachment_id": null, "count": 12, "time": "2009-06-27T19:38:18Z", "is_private": false, "bug_id": 336807, "id": 4172365, "author": "u88484@disabled.tld", "raw_text": "This bug was reported using a version of Firefox that security and stability updates are no longer provided for.  All users are strongly encouraged to upgrade to Firefox 3 by selecting 'Check for Updates' in the Help menu or by going to http://www.mozilla.com/en-US/firefox/firefox.html\n\nIf you can no longer reproduce this bug using the latest Firefox 3.0.x version, please change the status of this bug to 'RESOLVED' 'WORKSFORME'.\n\nIf you can still reproduce this bug, please provide additional details to help resolve this issue.", "creator": "u88484@disabled.tld", "creation_time": "2009-06-27T19:38:18Z", "text": "This bug was reported using a version of Firefox that security and stability updates are no longer provided for.  All users are strongly encouraged to upgrade to Firefox 3 by selecting 'Check for Updates' in the Help menu or by going to http://www.mozilla.com/en-US/firefox/firefox.html\n\nIf you can no longer reproduce this bug using the latest Firefox 3.0.x version, please change the status of this bug to 'RESOLVED' 'WORKSFORME'.\n\nIf you can still reproduce this bug, please provide additional details to help resolve this issue."}, {"raw_text": "a) Yes the bugs *STILL* exist in Firefox 3.0.11 (current Gentoo development package).  { You didn't in some wild fantasy think they were going to \"fix\" themselves did you? }\nb) The problems are not simply in the C library (or the GTK/Glib) libraries.\nc) The problem has gotten worse in 3.X relative to 2.X (memory use seems to be up to a minimum of 95 MB (no page displayed) to 140 MB (one simple page).\n\nThis script allows one to relatively easily can down (up) from working (non-working) limits to generate a variety of stack traces.\n\nThere is a \"new\" problem.  At some intermediate memory limits Firefox appears to start but will not produce a display window and/or its contents.  It simply appears to \"hang\".\n\nAnd for those of you who are thinking \"just throw more memory\" at the problem -- that will *NOT* work for old PCs with hard (address bus) limits which there are tens of millions of and *NOT* work for PDAs or Cell Phones which have good reasons (power conservation) to not keep adding memory to the device.", "creator": "robert.bradbury@gmail.com", "creation_time": "2009-07-02T17:37:09Z", "text": "Created attachment 386542\nSample shell script to run firefox with various limits\n\na) Yes the bugs *STILL* exist in Firefox 3.0.11 (current Gentoo development package).  { You didn't in some wild fantasy think they were going to \"fix\" themselves did you? }\nb) The problems are not simply in the C library (or the GTK/Glib) libraries.\nc) The problem has gotten worse in 3.X relative to 2.X (memory use seems to be up to a minimum of 95 MB (no page displayed) to 140 MB (one simple page).\n\nThis script allows one to relatively easily can down (up) from working (non-working) limits to generate a variety of stack traces.\n\nThere is a \"new\" problem.  At some intermediate memory limits Firefox appears to start but will not produce a display window and/or its contents.  It simply appears to \"hang\".\n\nAnd for those of you who are thinking \"just throw more memory\" at the problem -- that will *NOT* work for old PCs with hard (address bus) limits which there are tens of millions of and *NOT* work for PDAs or Cell Phones which have good reasons (power conservation) to not keep adding memory to the device.", "author": "robert.bradbury@gmail.com", "tags": [], "bug_id": 336807, "id": 4180622, "time": "2009-07-02T17:37:09Z", "attachment_id": 386542, "count": 13, "is_private": false}, {"raw_text": "Stack traces from firefox with memory limits set at various levels from 30MB to 140MB.  As noted, Firefox should be tested so that it gracefully handles all of the possible limits (most of which can be constrained by ulimit).\n\nNote that allowing an \"abort()\" to cause a core dump, such as may be generated from Gtk/glib and/or memory allocation routines is *not* \"graceful\".  If one has an example of a web page with blocks of text interspersed with very large images it might be impossible to display the images but still be possible to display the text.  Punting (& failing) should not be an acceptable option.  Cases from large blocks of text to many MB-images to huge javascript memory consumers should be provided *and* tested (under limited memory conditions if necessary).  The should all be handled without losing the browser session \"mental\" work state.  It can take many minutes (and cost God knows how much) to restore a complex session that one is using over a 3G or 4G network when Firefox (or derivatives) decides to roll over and die.", "creator": "robert.bradbury@gmail.com", "text": "Created attachment 386555\nCollection of traces from Firefox with memory limits\n\nStack traces from firefox with memory limits set at various levels from 30MB to 140MB.  As noted, Firefox should be tested so that it gracefully handles all of the possible limits (most of which can be constrained by ulimit).\n\nNote that allowing an \"abort()\" to cause a core dump, such as may be generated from Gtk/glib and/or memory allocation routines is *not* \"graceful\".  If one has an example of a web page with blocks of text interspersed with very large images it might be impossible to display the images but still be possible to display the text.  Punting (& failing) should not be an acceptable option.  Cases from large blocks of text to many MB-images to huge javascript memory consumers should be provided *and* tested (under limited memory conditions if necessary).  The should all be handled without losing the browser session \"mental\" work state.  It can take many minutes (and cost God knows how much) to restore a complex session that one is using over a 3G or 4G network when Firefox (or derivatives) decides to roll over and die.", "creation_time": "2009-07-02T17:57:14Z", "author": "robert.bradbury@gmail.com", "bug_id": 336807, "id": 4180677, "attachment_id": 386555, "count": 14, "time": "2009-07-02T17:57:14Z", "is_private": false, "tags": []}, {"bug_id": 336807, "id": 4300117, "is_private": false, "count": 15, "time": "2009-09-15T11:37:17Z", "attachment_id": null, "raw_text": "ok. i've been patient. more than patient.\n\nyou still haven't managed to use a build that actually has line numbers for firefox.\n\nthe only stack that's remotely interesting is the pref observer one, which is probably already reported. the way you're running around, you're never going to get anything fixed.\n\nwe're working to improve how things work, but your approach is not helping.", "text": "ok. i've been patient. more than patient.\n\nyou still haven't managed to use a build that actually has line numbers for firefox.\n\nthe only stack that's remotely interesting is the pref observer one, which is probably already reported. the way you're running around, you're never going to get anything fixed.\n\nwe're working to improve how things work, but your approach is not helping.", "creation_time": "2009-09-15T11:37:17Z", "creator": "timeless@bemail.org", "author": "timeless@bemail.org", "tags": []}]}}, "comments": {}}