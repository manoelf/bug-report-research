{"bugs": {"1172226": {"comments": [{"time": "2015-06-06T08:39:02Z", "creation_time": "2015-06-06T08:39:02Z", "attachment_id": null, "creator": "david@dchanm.com", "raw_text": "User Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.81 Safari/537.36\n\nSteps to reproduce:\n\nMozilla/5.0 (Windows NT 6.3; Win64; x64; rv:41.0) Gecko/20100101 Firefox/41.0\n\n1. Login to Pocket\n2. Go to about:chrome\n3. Edit the preferences\nbrowser.pocket.settings.tags\nto\n[\"a<img src='z' onerror='alert(Components.stack)'>\"]\n4. Visit any site\n5. Click on \"Save to Pocket\" icon\n6. Type 'a' into the tags\n\nThe Pocket chrome code pulls a list of recently used tags from the Pocket API server. [1] Under normal circumstances, this data is well-formed. However this can be used as an attack vector if the endpoint is malicious or if the transport layer is compromised. \n\n[1] - http://mxr.mozilla.org/mozilla-central/source/browser/components/pocket/pktApi.js#512 getTags()\n\n\nActual results:\n\nAlert popup showing Components.stack output\n\n\nExpected results:\n\nNo code execution", "is_private": false, "id": 10353800, "count": 0, "bug_id": 1172226, "tags": [], "text": "User Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.81 Safari/537.36\n\nSteps to reproduce:\n\nMozilla/5.0 (Windows NT 6.3; Win64; x64; rv:41.0) Gecko/20100101 Firefox/41.0\n\n1. Login to Pocket\n2. Go to about:chrome\n3. Edit the preferences\nbrowser.pocket.settings.tags\nto\n[\"a<img src='z' onerror='alert(Components.stack)'>\"]\n4. Visit any site\n5. Click on \"Save to Pocket\" icon\n6. Type 'a' into the tags\n\nThe Pocket chrome code pulls a list of recently used tags from the Pocket API server. [1] Under normal circumstances, this data is well-formed. However this can be used as an attack vector if the endpoint is malicious or if the transport layer is compromised. \n\n[1] - http://mxr.mozilla.org/mozilla-central/source/browser/components/pocket/pktApi.js#512 getTags()\n\n\nActual results:\n\nAlert popup showing Components.stack output\n\n\nExpected results:\n\nNo code execution", "author": "david@dchanm.com"}, {"author": "david@dchanm.com", "text": "Created attachment 8616365\nalert\n\nTesting information to setup a malicious endpoint for server MALICIOUS\n\n1. Use a TLS enabled server\n2. Setup the server to respond to the following route\nhttps://MALICIOUS/v3/firefox/save\n\nwith the following JSON data\n\n{\n\"status\": 1,\n\"tags\": [\"a<img src='z' onerror='alert(Components.stack)'>\"]\n}\n\n3. Visit about:config and change the setting\nbrowser.pocket.api\n\nto\n\nMALICIOUS\n\nYou don't need to specify a scheme. The endpoint is generated by\n52     var pocketAPIhost = Services.prefs.getCharPref(\"browser.pocket.api\"); \t// api.getpocket.com\n54     var baseAPIUrl = \"https://\" + pocketAPIhost + \"/v3\";\n\n4. Restart Firefox\n5. Proceed with step 4 from comment#0", "is_private": false, "tags": [], "bug_id": 1172226, "raw_text": "Testing information to setup a malicious endpoint for server MALICIOUS\n\n1. Use a TLS enabled server\n2. Setup the server to respond to the following route\nhttps://MALICIOUS/v3/firefox/save\n\nwith the following JSON data\n\n{\n\"status\": 1,\n\"tags\": [\"a<img src='z' onerror='alert(Components.stack)'>\"]\n}\n\n3. Visit about:config and change the setting\nbrowser.pocket.api\n\nto\n\nMALICIOUS\n\nYou don't need to specify a scheme. The endpoint is generated by\n52     var pocketAPIhost = Services.prefs.getCharPref(\"browser.pocket.api\"); \t// api.getpocket.com\n54     var baseAPIUrl = \"https://\" + pocketAPIhost + \"/v3\";\n\n4. Restart Firefox\n5. Proceed with step 4 from comment#0", "creator": "david@dchanm.com", "attachment_id": 8616365, "count": 1, "id": 10353843, "creation_time": "2015-06-06T10:11:33Z", "time": "2015-06-06T10:11:33Z"}, {"creator": "david@dchanm.com", "attachment_id": null, "raw_text": "Ironically, I forgot to use the bounty form. Could someone set that flag please?", "creation_time": "2015-06-08T18:17:37Z", "id": 10357788, "time": "2015-06-08T18:17:37Z", "count": 2, "text": "Ironically, I forgot to use the bounty form. Could someone set that flag please?", "author": "david@dchanm.com", "bug_id": 1172226, "tags": [], "is_private": false}, {"tags": [], "bug_id": 1172226, "author": "jdinbox@gmail.com", "text": "Pretty sure that this is sg:low at most -- the code involved here should be running as plain unprivileged content in the Pocket panel's iframe, and all XHR requests to Pocket are made over a TLS connection.", "count": 3, "id": 10358093, "is_private": false, "time": "2015-06-08T19:07:32Z", "creation_time": "2015-06-08T19:07:32Z", "raw_text": "Pretty sure that this is sg:low at most -- the code involved here should be running as plain unprivileged content in the Pocket panel's iframe, and all XHR requests to Pocket are made over a TLS connection.", "attachment_id": null, "creator": "jdinbox@gmail.com"}, {"count": 4, "id": 10358319, "tags": [], "bug_id": 1172226, "author": "jaws@mozilla.com", "text": "Created attachment 8616874\nPatch\n\nThe core bug exists in the tokeninput library that is being used. It is constructing HTML fragments by concatenating raw text. I have fixed the issue in your version of tokeninput (which is not actually minimized though the filename says it is[1]).\n\nI've also added a line to pktApi.js to filter specific characters from the server response.\n\nNate, do you have a way to get the tokeninput changes fixed upstream? There are a few other places within the tokeninput.min.js file that you may want to take a look at, specifically http://mxr.mozilla.org/mozilla-central/source/browser/components/pocket/panels/js/vendor/jquery.tokeninput.min.js?rev=77d92f6d7679#713 and maybe some other places.\n\n[1] This was made not-minimized by https://bugzilla.mozilla.org/show_bug.cgi?id=1163111", "time": "2015-06-08T19:49:57Z", "creation_time": "2015-06-08T19:49:57Z", "raw_text": "The core bug exists in the tokeninput library that is being used. It is constructing HTML fragments by concatenating raw text. I have fixed the issue in your version of tokeninput (which is not actually minimized though the filename says it is[1]).\n\nI've also added a line to pktApi.js to filter specific characters from the server response.\n\nNate, do you have a way to get the tokeninput changes fixed upstream? There are a few other places within the tokeninput.min.js file that you may want to take a look at, specifically http://mxr.mozilla.org/mozilla-central/source/browser/components/pocket/panels/js/vendor/jquery.tokeninput.min.js?rev=77d92f6d7679#713 and maybe some other places.\n\n[1] This was made not-minimized by https://bugzilla.mozilla.org/show_bug.cgi?id=1163111", "attachment_id": 8616874, "creator": "jaws@mozilla.com", "is_private": false}, {"is_private": false, "raw_text": "(In reply to Jared Wein [:jaws] (please needinfo? me) from comment #4)\n> Created attachment 8616874\n> Patch\n> \n\nThere also appears to be some string concatenation in saved.js [1]\n\n[1] - http://mxr.mozilla.org/mozilla-central/source/browser/components/pocket/panels/js/saved.js#31\n\n\n(In reply to Justin Dolske [:Dolske] from comment #3)\n> Pretty sure that this is sg:low at most -- the code involved here should be\n> running as plain unprivileged content in the Pocket panel's iframe, and all\n> XHR requests to Pocket are made over a TLS connection.\n\nUnfortunately, it appears some part of the Pocket panel code runs with chrome since it can access Components.stack . I agree that the use of TLS reduces the risk of an outsider attacker. However the ability for a third party to execute privileged code in Firefox isn't desirable", "attachment_id": null, "creator": "david@dchanm.com", "time": "2015-06-08T20:15:00Z", "creation_time": "2015-06-08T20:15:00Z", "author": "david@dchanm.com", "text": "(In reply to Jared Wein [:jaws] (please needinfo? me) from comment #4)\n> Created attachment 8616874\n> Patch\n> \n\nThere also appears to be some string concatenation in saved.js [1]\n\n[1] - http://mxr.mozilla.org/mozilla-central/source/browser/components/pocket/panels/js/saved.js#31\n\n\n(In reply to Justin Dolske [:Dolske] from comment #3)\n> Pretty sure that this is sg:low at most -- the code involved here should be\n> running as plain unprivileged content in the Pocket panel's iframe, and all\n> XHR requests to Pocket are made over a TLS connection.\n\nUnfortunately, it appears some part of the Pocket panel code runs with chrome since it can access Components.stack . I agree that the use of TLS reduces the risk of an outsider attacker. However the ability for a third party to execute privileged code in Firefox isn't desirable", "tags": [], "bug_id": 1172226, "count": 5, "id": 10358473}, {"attachment_id": null, "creator": "jaws@mozilla.com", "raw_text": "(In reply to David Chan [:dchan] from comment #5)\n> (In reply to Jared Wein [:jaws] (please needinfo? me) from comment #4)\n> > Created attachment 8616874\n> > Patch\n> > \n> \n> There also appears to be some string concatenation in saved.js [1]\n\nThe code in question there looks to be pulling values from about:config. I agree it would be good to fix this as well, but I think it is less severe since it will also require an attack that allows writing to the preferences. I don't consider users manually editing about:config a security risk since they already have physical access to the machine.", "time": "2015-06-08T20:42:05Z", "creation_time": "2015-06-08T20:42:05Z", "id": 10358528, "count": 6, "text": "(In reply to David Chan [:dchan] from comment #5)\n> (In reply to Jared Wein [:jaws] (please needinfo? me) from comment #4)\n> > Created attachment 8616874\n> > Patch\n> > \n> \n> There also appears to be some string concatenation in saved.js [1]\n\nThe code in question there looks to be pulling values from about:config. I agree it would be good to fix this as well, but I think it is less severe since it will also require an attack that allows writing to the preferences. I don't consider users manually editing about:config a security risk since they already have physical access to the machine.", "author": "jaws@mozilla.com", "bug_id": 1172226, "tags": [], "is_private": false}, {"tags": [], "is_private": false, "bug_id": 1172226, "author": "david@dchanm.com", "text": "(In reply to Jared Wein [:jaws] (please needinfo? me) from comment #6)\n> (In reply to David Chan [:dchan] from comment #5)\n> > (In reply to Jared Wein [:jaws] (please needinfo? me) from comment #4)\n> > > Created attachment 8616874\n> > > Patch\n> > > \n> > \n> > There also appears to be some string concatenation in saved.js [1]\n> \n> The code in question there looks to be pulling values from about:config. I\n> agree it would be good to fix this as well, but I think it is less severe\n> since it will also require an attack that allows writing to the preferences.\n> I don't consider users manually editing about:config a security risk since\n> they already have physical access to the machine.\n\nAh, I didn't realize that was only for config entries. I agree that the config attack vector isn't an issue. I used it as a quick and dirty way to not have to setup a HTTPS server.", "count": 7, "creation_time": "2015-06-08T20:47:08Z", "id": 10358546, "time": "2015-06-08T20:47:08Z", "raw_text": "(In reply to Jared Wein [:jaws] (please needinfo? me) from comment #6)\n> (In reply to David Chan [:dchan] from comment #5)\n> > (In reply to Jared Wein [:jaws] (please needinfo? me) from comment #4)\n> > > Created attachment 8616874\n> > > Patch\n> > > \n> > \n> > There also appears to be some string concatenation in saved.js [1]\n> \n> The code in question there looks to be pulling values from about:config. I\n> agree it would be good to fix this as well, but I think it is less severe\n> since it will also require an attack that allows writing to the preferences.\n> I don't consider users manually editing about:config a security risk since\n> they already have physical access to the machine.\n\nAh, I didn't realize that was only for config entries. I agree that the config attack vector isn't an issue. I used it as a quick and dirty way to not have to setup a HTTPS server.", "creator": "david@dchanm.com", "attachment_id": null}, {"id": 10361695, "count": 8, "text": "Going to go with sec-high since it's not expected that Pocket can run arbitrary code in Firefox (apart from the code-drops we include and presumably audit). Also concerned about the impact of the other places the broken token code is used but that commonly leads to at least XSS type bugs.", "author": "dveditz@mozilla.com", "bug_id": 1172226, "tags": [], "creator": "dveditz@mozilla.com", "attachment_id": null, "raw_text": "Going to go with sec-high since it's not expected that Pocket can run arbitrary code in Firefox (apart from the code-drops we include and presumably audit). Also concerned about the impact of the other places the broken token code is used but that commonly leads to at least XSS type bugs.", "creation_time": "2015-06-09T17:28:15Z", "time": "2015-06-09T17:28:15Z", "is_private": false}, {"author": "nate+bugzilla@ideashower.com", "text": "Comment on attachment 8616874\nPatch\n\nReview of attachment 8616874:\n-----------------------------------------------------------------\n\nHad Nick review, he said both changes looked fine.\n\n::: browser/components/pocket/pktApi.js\n@@ +269,1 @@\n>                      }\n\nWith the change to tokeninput, do need this?\n\nI took a look at how we handle this code on our end, for example in our web app, and there we just sanitize the text right before printing it. \n\nI believe doing this will actually strip out valid characters from tags. For example \";\" is a valid character in a tag for Pocket. (Note, whether or not they should be valid characters could be a question but given they are already out there in user accounts, not sure we can tackle that scope here).\n\nAlso, I didn't test this to confirm if this ever actually comes out of our API, but for example, if a tag has a UTF character or comes through as an entity like &lt; stripping the & will leave the remaining string \"lt;\"", "tags": [], "bug_id": 1172226, "count": 9, "id": 10364169, "is_private": false, "raw_text": "Review of attachment 8616874:\n-----------------------------------------------------------------\n\nHad Nick review, he said both changes looked fine.\n\n::: browser/components/pocket/pktApi.js\n@@ +269,1 @@\n>                      }\n\nWith the change to tokeninput, do need this?\n\nI took a look at how we handle this code on our end, for example in our web app, and there we just sanitize the text right before printing it. \n\nI believe doing this will actually strip out valid characters from tags. For example \";\" is a valid character in a tag for Pocket. (Note, whether or not they should be valid characters could be a question but given they are already out there in user accounts, not sure we can tackle that scope here).\n\nAlso, I didn't test this to confirm if this ever actually comes out of our API, but for example, if a tag has a UTF character or comes through as an entity like &lt; stripping the & will leave the remaining string \"lt;\"", "attachment_id": 8616874, "creator": "nate+bugzilla@ideashower.com", "time": "2015-06-10T02:29:07Z", "creation_time": "2015-06-10T02:29:07Z"}, {"is_private": false, "tags": [], "bug_id": 1172226, "author": "nate+bugzilla@ideashower.com", "text": "Hm, the code I was commenting on didn't come through in Comment 9. I am referring to the changes in pktApi.js", "count": 10, "creation_time": "2015-06-10T02:29:44Z", "id": 10364170, "time": "2015-06-10T02:29:44Z", "raw_text": "Hm, the code I was commenting on didn't come through in Comment 9. I am referring to the changes in pktApi.js", "creator": "nate+bugzilla@ideashower.com", "attachment_id": null}, {"tags": [], "bug_id": 1172226, "author": "jaws@mozilla.com", "text": "The pktApi.js changes shouldn't be strictly necessary, it is more of a defense-in-depth practice to try to provide protection at multiple levels.", "count": 11, "id": 10368213, "is_private": false, "creation_time": "2015-06-10T15:26:58Z", "time": "2015-06-10T15:26:58Z", "raw_text": "The pktApi.js changes shouldn't be strictly necessary, it is more of a defense-in-depth practice to try to provide protection at multiple levels.", "creator": "jaws@mozilla.com", "attachment_id": null}, {"creation_time": "2015-06-12T00:04:07Z", "time": "2015-06-12T00:04:07Z", "raw_text": "(In reply to Daniel Veditz [:dveditz] from comment #8)\n> Going to go with sec-high since it's not expected that Pocket can run\n> arbitrary code in Firefox\n\nI still don't think that's appropriate, as I said in comment 3. This really should be identical to the existing Pocket SocialAPI button, which also runs code in a content iframe. The only reason we're doing exactly the same thing is because of performance -- SocialAPI panel contents can feel laggy when it's downloading/checking content over the network.\n\nHowever, this is a bit moot, because of the following:\n\n\n(In reply to David Chan [:dchan] from comment #5)\n\n> Unfortunately, it appears some part of the Pocket panel code runs with\n> chrome since it can access Components.stack.\n\nUhh! That absolutely should not be happening and _is_ a problem. And yet I can confirm it is by adding a console.log of this from browser/components/pocket/panels/signup.html, and clicking the Pocket button. D:\n\nI don't understand why that's happening -- it's an <iframe type=content>. We did change this slightly in bug 1164940 (to create it lazily), but reverting that has no effect.\n\nbholley -- any ideas what's happening here?", "creator": "jdinbox@gmail.com", "attachment_id": null, "is_private": false, "count": 12, "id": 10378149, "tags": [], "bug_id": 1172226, "author": "jdinbox@gmail.com", "text": "(In reply to Daniel Veditz [:dveditz] from comment #8)\n> Going to go with sec-high since it's not expected that Pocket can run\n> arbitrary code in Firefox\n\nI still don't think that's appropriate, as I said in comment 3. This really should be identical to the existing Pocket SocialAPI button, which also runs code in a content iframe. The only reason we're doing exactly the same thing is because of performance -- SocialAPI panel contents can feel laggy when it's downloading/checking content over the network.\n\nHowever, this is a bit moot, because of the following:\n\n\n(In reply to David Chan [:dchan] from comment #5)\n\n> Unfortunately, it appears some part of the Pocket panel code runs with\n> chrome since it can access Components.stack.\n\nUhh! That absolutely should not be happening and _is_ a problem. And yet I can confirm it is by adding a console.log of this from browser/components/pocket/panels/signup.html, and clicking the Pocket button. D:\n\nI don't understand why that's happening -- it's an <iframe type=content>. We did change this slightly in bug 1164940 (to create it lazily), but reverting that has no effect.\n\nbholley -- any ideas what's happening here?"}, {"count": 13, "id": 10378155, "tags": [], "bug_id": 1172226, "author": "jdinbox@gmail.com", "text": "(I belatedly realized dveditz's comment was after the Components.stack bit in comment 5, so maybe that was already taken into account. Sorry for any confusion.)", "time": "2015-06-12T00:05:42Z", "creation_time": "2015-06-12T00:05:42Z", "raw_text": "(I belatedly realized dveditz's comment was after the Components.stack bit in comment 5, so maybe that was already taken into account. Sorry for any confusion.)", "attachment_id": null, "creator": "jdinbox@gmail.com", "is_private": false}, {"id": 10378313, "count": 14, "bug_id": 1172226, "tags": [], "text": "As discussed on irc, iframe type=\"content\" has absolutely no effect on the principal of docshell loads - it just affects window.top and whatnot. It should be used only to achieve observables, not as any sort of sandboxing mechanism.\n\nDocshell loads from chrome:// give you system principal, full stop. [1]\n\n[1] iframe sandbox might be an exception, but I wouldn't recommend relying on that.", "author": "bholley@mozilla.com", "time": "2015-06-12T00:20:32Z", "creation_time": "2015-06-12T00:20:32Z", "attachment_id": null, "creator": "bholley@mozilla.com", "raw_text": "As discussed on irc, iframe type=\"content\" has absolutely no effect on the principal of docshell loads - it just affects window.top and whatnot. It should be used only to achieve observables, not as any sort of sandboxing mechanism.\n\nDocshell loads from chrome:// give you system principal, full stop. [1]\n\n[1] iframe sandbox might be an exception, but I wouldn't recommend relying on that.", "is_private": false}, {"raw_text": "At least the fix is simple.\n\nThis is the important fix for this bug -- the other patch isn't a bad idea, but it's the minor issue.", "creator": "jdinbox@gmail.com", "attachment_id": 8621375, "count": 15, "creation_time": "2015-06-12T00:31:22Z", "id": 10378358, "time": "2015-06-12T00:31:22Z", "author": "jdinbox@gmail.com", "text": "Created attachment 8621375\nRemove chrome privs.\n\nAt least the fix is simple.\n\nThis is the important fix for this bug -- the other patch isn't a bad idea, but it's the minor issue.", "is_private": false, "tags": [], "bug_id": 1172226}, {"text": "(I did some testing with the fix, and everything seems to still work fine. Except that the \"Sign up for Pocket. It's free.\" text in the signup panel shows some mojibake, so there's some charset stuff to fixup too.)", "author": "jdinbox@gmail.com", "bug_id": 1172226, "tags": [], "is_private": false, "attachment_id": null, "creator": "jdinbox@gmail.com", "raw_text": "(I did some testing with the fix, and everything seems to still work fine. Except that the \"Sign up for Pocket. It's free.\" text in the signup panel shows some mojibake, so there's some charset stuff to fixup too.)", "time": "2015-06-12T00:34:39Z", "id": 10378385, "creation_time": "2015-06-12T00:34:39Z", "count": 16}, {"text": "Created attachment 8621379\nRemove chrome privs, v.2", "author": "jdinbox@gmail.com", "bug_id": 1172226, "tags": [], "is_private": false, "attachment_id": 8621379, "creator": "jdinbox@gmail.com", "raw_text": "", "time": "2015-06-12T00:40:00Z", "id": 10378405, "creation_time": "2015-06-12T00:40:00Z", "count": 17}, {"id": 10378435, "count": 18, "text": "I suppose it's worth noting:\n\n* None of the code which we were expecting to be unprivileged runs until the Pocket panel is shown. So if a user never clicks the button (or has outright removed it from the UI), there is no risk.\n\n* From a quick skim, I don't see any obvious places where the signup.html panel is looking at data returned from the server. So if that's true, users who have not actually signed in to Pocket should not be at risk (just users who have signed in to Pocket, and then click the button to save a page).", "author": "jdinbox@gmail.com", "bug_id": 1172226, "tags": [], "attachment_id": null, "creator": "jdinbox@gmail.com", "raw_text": "I suppose it's worth noting:\n\n* None of the code which we were expecting to be unprivileged runs until the Pocket panel is shown. So if a user never clicks the button (or has outright removed it from the UI), there is no risk.\n\n* From a quick skim, I don't see any obvious places where the signup.html panel is looking at data returned from the server. So if that's true, users who have not actually signed in to Pocket should not be at risk (just users who have signed in to Pocket, and then click the button to save a page).", "time": "2015-06-12T00:59:25Z", "creation_time": "2015-06-12T00:59:25Z", "is_private": false}, {"raw_text": "(In reply to (Limited avail. until June 16)  Jared Wein [:jaws] (please needinfo? me) from comment #11)\n> The pktApi.js changes shouldn't be strictly necessary, it is more of a\n> defense-in-depth practice to try to provide protection at multiple levels.\n\nJust so that it doesn't break actual user tags, I'd suggest A) removing this or B) escaping the characters instead of deleting (ie convert \">\" to \"&gt;\")", "creator": "nate+bugzilla@ideashower.com", "attachment_id": null, "creation_time": "2015-06-12T01:04:18Z", "time": "2015-06-12T01:04:18Z", "is_private": false, "count": 19, "id": 10378445, "author": "nate+bugzilla@ideashower.com", "text": "(In reply to (Limited avail. until June 16)  Jared Wein [:jaws] (please needinfo? me) from comment #11)\n> The pktApi.js changes shouldn't be strictly necessary, it is more of a\n> defense-in-depth practice to try to provide protection at multiple levels.\n\nJust so that it doesn't break actual user tags, I'd suggest A) removing this or B) escaping the characters instead of deleting (ie convert \">\" to \"&gt;\")", "tags": [], "bug_id": 1172226}, {"is_private": false, "tags": [], "bug_id": 1172226, "author": "bholley@mozilla.com", "text": "Boris, is loading things from resource:///chrome/... kosher?", "count": 20, "time": "2015-06-12T01:09:38Z", "id": 10378456, "creation_time": "2015-06-12T01:09:38Z", "raw_text": "Boris, is loading things from resource:///chrome/... kosher?", "attachment_id": null, "creator": "bholley@mozilla.com"}, {"creation_time": "2015-06-12T01:20:16Z", "time": "2015-06-12T01:20:16Z", "creator": "bzbarsky@mit.edu", "attachment_id": null, "raw_text": "I... have no idea.  I don't understand our resource protocol handler that well.  I _think_ Benjamin does, so punting the question to him.", "is_private": false, "id": 10378473, "count": 21, "bug_id": 1172226, "tags": [], "text": "I... have no idea.  I don't understand our resource protocol handler that well.  I _think_ Benjamin does, so punting the question to him.", "author": "bzbarsky@mit.edu"}, {"author": "jaws@mozilla.com", "text": "(In reply to Justin Dolske [:Dolske] from comment #17)\n> Created attachment 8621379\n> Remove chrome privs, v.2\n\nWaiting on needinfo response for Benjamin before reviewing.", "tags": [], "is_private": false, "bug_id": 1172226, "raw_text": "(In reply to Justin Dolske [:Dolske] from comment #17)\n> Created attachment 8621379\n> Remove chrome privs, v.2\n\nWaiting on needinfo response for Benjamin before reviewing.", "attachment_id": null, "creator": "jaws@mozilla.com", "count": 22, "time": "2015-06-13T21:43:32Z", "id": 10385935, "creation_time": "2015-06-13T21:43:32Z"}, {"attachment_id": null, "creator": "benjamin@smedbergs.us", "raw_text": "resource:///chrome will work, but this looks like pretty unusual usage. Typically if you're going to point the browser at an unprivileged URL, we do that using about: so that this would be something like about:pocketsignup?...\n\nCertainly having a URL of the form resource:///chrome/browser/content/browser/pocket/panels/signup.html? relies on details of how we package chrome into omnijar which could change in the future and shouldn't be relied-on.", "time": "2015-06-15T19:49:48Z", "creation_time": "2015-06-15T19:49:48Z", "id": 10390816, "count": 23, "text": "resource:///chrome will work, but this looks like pretty unusual usage. Typically if you're going to point the browser at an unprivileged URL, we do that using about: so that this would be something like about:pocketsignup?...\n\nCertainly having a URL of the form resource:///chrome/browser/content/browser/pocket/panels/signup.html? relies on details of how we package chrome into omnijar which could change in the future and shouldn't be relied-on.", "author": "benjamin@smedbergs.us", "bug_id": 1172226, "tags": [], "is_private": false}, {"creator": "jaws@mozilla.com", "attachment_id": 8621379, "raw_text": "We should use an about: URI here.", "creation_time": "2015-06-17T18:05:43Z", "time": "2015-06-17T18:05:43Z", "is_private": false, "id": 10400855, "count": 24, "text": "Comment on attachment 8621379\nRemove chrome privs, v.2\n\nWe should use an about: URI here.", "author": "jaws@mozilla.com", "bug_id": 1172226, "tags": []}, {"count": 25, "id": 10402306, "tags": [], "bug_id": 1172226, "author": "jdinbox@gmail.com", "text": "Created attachment 8623905\nRemove chrome privs, v.3\n\nUse about:pocket-saved / about:pocket-signup. Reverified that privs are still dropped.", "time": "2015-06-17T21:56:54Z", "creation_time": "2015-06-17T21:56:54Z", "raw_text": "Use about:pocket-saved / about:pocket-signup. Reverified that privs are still dropped.", "attachment_id": 8623905, "creator": "jdinbox@gmail.com", "is_private": false}, {"time": "2015-06-18T23:30:36Z", "id": 10407298, "creation_time": "2015-06-18T23:30:36Z", "count": 26, "attachment_id": null, "creator": "jdinbox@gmail.com", "raw_text": "We should probably do the fix in attachment 8616874 as a followup belt-n-suspenders fix, even though I don't believe it's a serious problem itself -- once unprivileged. Given how close we are to the 39 release, and that there's still some details to sort out (comment 9 / comment 19), no need to block on that.", "bug_id": 1172226, "tags": [], "is_private": false, "text": "We should probably do the fix in attachment 8616874 as a followup belt-n-suspenders fix, even though I don't believe it's a serious problem itself -- once unprivileged. Given how close we are to the 39 release, and that there's still some details to sort out (comment 9 / comment 19), no need to block on that.", "author": "jdinbox@gmail.com"}, {"is_private": false, "attachment_id": 8623905, "creator": "jdinbox@gmail.com", "raw_text": "[Security approval request comment]\nHow easily could an exploit be constructed based on the patch?\nThe basic problem is described comment 0, but I think only someone with effective control of the Pocket server could exploit this. The connections are all SSL, and comment 18 describes further limitations on when this can potentially happen.\n\nDo comments in the patch, the check-in comment, or tests included in the patch paint a bulls-eye on the security problem?\n\nMaybe, depends on how knowledgeable someone is about how this stuff works. But I'd assume \"yes\".\n\nWhich older supported branches are affected by this flaw?\n\nPocket was added in 38.0.5.\n\nIf not all supported branches, which bug introduced the flaw?\n\nDo you have backports for the affected branches? If not, how different, hard to create, and risky will they be?\n\nThe patch should be nearly identical on all branches, since little has changed in Pocket when we landed it everywhere for 38.0.5.\n\nHow likely is this patch to cause regressions; how much testing does it need?\n\nSeems low risk, and would be constrained to the Pocket feature itself. Manual testing I've done verifies that everything seems to be working.", "time": "2015-06-18T23:37:40Z", "creation_time": "2015-06-18T23:37:40Z", "text": "Comment on attachment 8623905\nRemove chrome privs, v.3\n\n[Security approval request comment]\nHow easily could an exploit be constructed based on the patch?\nThe basic problem is described comment 0, but I think only someone with effective control of the Pocket server could exploit this. The connections are all SSL, and comment 18 describes further limitations on when this can potentially happen.\n\nDo comments in the patch, the check-in comment, or tests included in the patch paint a bulls-eye on the security problem?\n\nMaybe, depends on how knowledgeable someone is about how this stuff works. But I'd assume \"yes\".\n\nWhich older supported branches are affected by this flaw?\n\nPocket was added in 38.0.5.\n\nIf not all supported branches, which bug introduced the flaw?\n\nDo you have backports for the affected branches? If not, how different, hard to create, and risky will they be?\n\nThe patch should be nearly identical on all branches, since little has changed in Pocket when we landed it everywhere for 38.0.5.\n\nHow likely is this patch to cause regressions; how much testing does it need?\n\nSeems low risk, and would be constrained to the Pocket feature itself. Manual testing I've done verifies that everything seems to be working.", "author": "jdinbox@gmail.com", "bug_id": 1172226, "tags": [], "id": 10407317, "count": 27}, {"is_private": false, "raw_text": "Approval Request Comment\n[Feature/regressing bug #]: Pocket\n[User impact if declined]: A compromised Pocket server could inject code into a chrome-privileged context in some cases.\n[Describe test coverage new/current, TreeHerder]: Manual testing\n[Risks and why]: Risk contained to Pocket itself, manual testing verifies that it functions correctly after this patch.\n[String/UUID change made/needed]: n/a", "creator": "jdinbox@gmail.com", "attachment_id": 8623905, "creation_time": "2015-06-18T23:44:51Z", "time": "2015-06-18T23:44:51Z", "author": "jdinbox@gmail.com", "text": "Comment on attachment 8623905\nRemove chrome privs, v.3\n\nApproval Request Comment\n[Feature/regressing bug #]: Pocket\n[User impact if declined]: A compromised Pocket server could inject code into a chrome-privileged context in some cases.\n[Describe test coverage new/current, TreeHerder]: Manual testing\n[Risks and why]: Risk contained to Pocket itself, manual testing verifies that it functions correctly after this patch.\n[String/UUID change made/needed]: n/a", "tags": [], "bug_id": 1172226, "count": 28, "id": 10407347}, {"author": "jdinbox@gmail.com", "text": "https://hg.mozilla.org/integration/fx-team/rev/39cd581fcc14", "tags": [], "bug_id": 1172226, "count": 29, "id": 10407366, "is_private": false, "raw_text": "https://hg.mozilla.org/integration/fx-team/rev/39cd581fcc14", "attachment_id": null, "creator": "jdinbox@gmail.com", "time": "2015-06-18T23:54:22Z", "creation_time": "2015-06-18T23:54:22Z"}, {"attachment_id": null, "creator": "ryanvm@gmail.com", "raw_text": "https://hg.mozilla.org/mozilla-central/rev/39cd581fcc14", "time": "2015-06-19T20:40:37Z", "creation_time": "2015-06-19T20:40:37Z", "is_private": false, "id": 10410364, "count": 30, "text": "https://hg.mozilla.org/mozilla-central/rev/39cd581fcc14", "author": "ryanvm@gmail.com", "bug_id": 1172226, "tags": []}, {"bug_id": 1172226, "tags": [], "text": "Comment on attachment 8623905\nRemove chrome privs, v.3\n\nApproved for uplift to beta and aurora. sec-high, sounds bad.", "author": "lizhenry@gmail.com", "id": 10412684, "count": 31, "is_private": false, "time": "2015-06-21T19:17:54Z", "creation_time": "2015-06-21T19:17:54Z", "attachment_id": 8623905, "creator": "lizhenry@gmail.com", "raw_text": "Approved for uplift to beta and aurora. sec-high, sounds bad."}, {"count": 32, "id": 10412762, "tags": [], "bug_id": 1172226, "author": "ryanvm@gmail.com", "text": "https://hg.mozilla.org/releases/mozilla-release/rev/924287d37077\n\nFor future reference, security approval typically isn't noted in the commit messages lest it draw extra attention to the commit.", "creation_time": "2015-06-21T20:46:59Z", "time": "2015-06-21T20:46:59Z", "raw_text": "https://hg.mozilla.org/releases/mozilla-release/rev/924287d37077\n\nFor future reference, security approval typically isn't noted in the commit messages lest it draw extra attention to the commit.", "creator": "ryanvm@gmail.com", "attachment_id": null, "is_private": false}, {"is_private": false, "creator": "ryanvm@gmail.com", "attachment_id": null, "raw_text": "https://hg.mozilla.org/releases/mozilla-aurora/rev/b596ff253db4", "creation_time": "2015-06-21T20:57:57Z", "time": "2015-06-21T20:57:57Z", "text": "https://hg.mozilla.org/releases/mozilla-aurora/rev/b596ff253db4", "author": "ryanvm@gmail.com", "bug_id": 1172226, "tags": [], "id": 10412772, "count": 33}, {"time": "2015-06-22T02:19:01Z", "id": 10413401, "creation_time": "2015-06-22T02:19:01Z", "count": 34, "attachment_id": null, "creator": "lizhenry@gmail.com", "raw_text": "Thanks Ryan. Also thanks for catching the beta approvals meant for m-r!!", "bug_id": 1172226, "tags": [], "is_private": false, "text": "Thanks Ryan. Also thanks for catching the beta approvals meant for m-r!!", "author": "lizhenry@gmail.com"}, {"is_private": false, "creation_time": "2016-01-05T04:21:38Z", "time": "2016-01-05T04:21:38Z", "raw_text": "This bug just came to my attention.  Per review conversations on bug 1215694 we removed about urls and are using chrome urls.  Sounds like I need to go back to about urls.", "creator": "mixedpuppy@gmail.com", "attachment_id": null, "tags": [], "bug_id": 1172226, "author": "mixedpuppy@gmail.com", "text": "This bug just came to my attention.  Per review conversations on bug 1215694 we removed about urls and are using chrome urls.  Sounds like I need to go back to about urls.", "count": 35, "id": 11045682}, {"count": 36, "id": 11047603, "author": "mixedpuppy@gmail.com", "text": "regression being handled in bug 1236755", "tags": [], "bug_id": 1172226, "raw_text": "regression being handled in bug 1236755", "creator": "mixedpuppy@gmail.com", "attachment_id": null, "creation_time": "2016-01-05T17:27:45Z", "time": "2016-01-05T17:27:45Z", "is_private": false}, {"is_private": false, "time": "2016-01-05T17:43:29Z", "creation_time": "2016-01-05T17:43:29Z", "raw_text": "Can someone cc me on bug 1236755 ?", "attachment_id": null, "creator": "codycrews00@gmail.com", "tags": [], "bug_id": 1172226, "author": "codycrews00@gmail.com", "text": "Can someone cc me on bug 1236755 ?", "count": 37, "id": 11047668}, {"is_private": false, "time": "2016-01-05T18:07:48Z", "creation_time": "2016-01-05T18:07:48Z", "attachment_id": null, "creator": "codycrews00@gmail.com", "raw_text": "Just thought i would mention here that if this has to do with about: URLs, or the way they work changing, then I would very much like to see the changes.  I'm currently getting heavily involved in click jacking work, and part of it has to do with pages like about:blocked.  I don't want to say anymore than that, but for those that have access see bug 1236139, and bug 1236989.", "bug_id": 1172226, "tags": [], "text": "Just thought i would mention here that if this has to do with about: URLs, or the way they work changing, then I would very much like to see the changes.  I'm currently getting heavily involved in click jacking work, and part of it has to do with pages like about:blocked.  I don't want to say anymore than that, but for those that have access see bug 1236139, and bug 1236989.", "author": "codycrews00@gmail.com", "id": 11047762, "count": 38}]}}, "comments": {}}