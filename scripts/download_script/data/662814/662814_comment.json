{"bugs": {"662814": {"comments": [{"bug_id": 662814, "count": 0, "id": 5519862, "attachment_id": null, "raw_text": "Add a simple logging facility to record events which are known to have\na significant impact on memory usage.  Nothing heavyweight, just one\nline per event, timestamped, plus brief relevant stats.  For example:\n\n    GC started / ended, total size N, reclaimed M bytes\n    GC mapped in new heap / unmapped heap\n    CC started / ended, total size N, reclaimed M bytes\n    image discard ran\n    jemalloc mmap\u2019d more pages / munmapped some pages\n    nanojit / mjit mapped / unmapped code pages\n\nPerhaps with some indirectly relevant events such as\n\n    downloaded another chunk of the phishing database\n    no user input seen for 17 minutes\n    new tab created; now there are 23 of them\n    user requested about:memory (+ what it produced)\n    extension Xyzzy loaded/initialised\n\nThat way, we\u2019d at least have some information about the space history\nleading up to a situation where a user says \"urk!  massive memory\nleak!\".\n\nThe log to be put into a small in-ram circular buffer, which is shown\non an about:memlog or some such page.  No file I/O involved.\n\nA bit more background is at\nhttp://blog.mozilla.com/jseward/2011/05/26/a-low-overhead-always-on-system-wide-memory-event-log", "creation_time": "2011-06-08T15:58:15Z", "author": "jseward@acm.org", "text": "Add a simple logging facility to record events which are known to have\na significant impact on memory usage.  Nothing heavyweight, just one\nline per event, timestamped, plus brief relevant stats.  For example:\n\n    GC started / ended, total size N, reclaimed M bytes\n    GC mapped in new heap / unmapped heap\n    CC started / ended, total size N, reclaimed M bytes\n    image discard ran\n    jemalloc mmap\u2019d more pages / munmapped some pages\n    nanojit / mjit mapped / unmapped code pages\n\nPerhaps with some indirectly relevant events such as\n\n    downloaded another chunk of the phishing database\n    no user input seen for 17 minutes\n    new tab created; now there are 23 of them\n    user requested about:memory (+ what it produced)\n    extension Xyzzy loaded/initialised\n\nThat way, we\u2019d at least have some information about the space history\nleading up to a situation where a user says \"urk!  massive memory\nleak!\".\n\nThe log to be put into a small in-ram circular buffer, which is shown\non an about:memlog or some such page.  No file I/O involved.\n\nA bit more background is at\nhttp://blog.mozilla.com/jseward/2011/05/26/a-low-overhead-always-on-system-wide-memory-event-log", "tags": [], "time": "2011-06-08T15:58:15Z", "is_private": false, "creator": "jseward@acm.org"}, {"id": 5521108, "attachment_id": null, "raw_text": "I think this is great, but I don't think it should be restricted to memory events.  Although memory events will be a big part of it, let's not box ourselves into a corner by calling it \"about:memorylog\" or somesuch;  keep it to a more neutral name like \"about:log\".", "author": "n.nethercote@gmail.com", "creation_time": "2011-06-08T22:52:44Z", "bug_id": 662814, "time": "2011-06-08T22:52:44Z", "tags": [], "text": "I think this is great, but I don't think it should be restricted to memory events.  Although memory events will be a big part of it, let's not box ourselves into a corner by calling it \"about:memorylog\" or somesuch;  keep it to a more neutral name like \"about:log\".", "creator": "n.nethercote@gmail.com", "is_private": false, "count": 1}, {"count": 2, "creator": "jseward@acm.org", "is_private": false, "bug_id": 662814, "tags": [], "time": "2011-06-10T12:00:16Z", "text": "Created attachment 538483\nInitial implementation (WIP)\n\nInitial implementation, probably Linux only (OSX might work).\nCurrently receives events only from jemalloc mmap/munmap and from\nScopedGfxFeatureReporter::WriteAppNote.  Sample output below.  Output\nappears in about:memlog, using a 16KB circular buffer.\n\nSuggestions for further events to hook up happily received.  Next is\nto hook up the non-malloc code allocation events done by the various\nJITs.  Also improve the timestamping (first column below), which is\ncurrently the number of wallclock seconds since the first line was\noutput.\n\n\n\n0 :JEM: mmap:   3145728 size, 76 MB on loan\n0 :JEM: munmap: 3145728 size, 73 MB on loan\n0 :JEM: mmap:   4194304 size, 77 MB on loan\n0 :JEM: munmap: 4194304 size, 73 MB on loan\n0 :JEM: mmap:   3145728 size, 76 MB on loan\n0 :JEM: mmap:   3145728 size, 79 MB on loan\n0 :JEM: mmap:   1048576 size, 80 MB on loan\n0 :JEM: mmap:   1048576 size, 81 MB on loan\n0 :JEM: mmap:   1048576 size, 82 MB on loan\n0 :JEM: mmap:   1048576 size, 83 MB on loan\n0 :JEM: mmap:   2097152 size, 85 MB on loan\n0 :JEM: mmap:   3145728 size, 89 MB on loan\n0 :GFX: WriteAppNote: GL Context? \n0 :GFX: WriteAppNote: GL Context+\n0 :GFX: WriteAppNote: WebGL+\n1 :JEM: mmap:   1048576 size, 90 MB on loan\n1 :JEM: mmap:   1048576 size, 91 MB on loan\n1 :JEM: mmap:   1048576 size, 92 MB on loan", "author": "jseward@acm.org", "creation_time": "2011-06-10T12:00:16Z", "raw_text": "Initial implementation, probably Linux only (OSX might work).\nCurrently receives events only from jemalloc mmap/munmap and from\nScopedGfxFeatureReporter::WriteAppNote.  Sample output below.  Output\nappears in about:memlog, using a 16KB circular buffer.\n\nSuggestions for further events to hook up happily received.  Next is\nto hook up the non-malloc code allocation events done by the various\nJITs.  Also improve the timestamping (first column below), which is\ncurrently the number of wallclock seconds since the first line was\noutput.\n\n\n\n0 :JEM: mmap:   3145728 size, 76 MB on loan\n0 :JEM: munmap: 3145728 size, 73 MB on loan\n0 :JEM: mmap:   4194304 size, 77 MB on loan\n0 :JEM: munmap: 4194304 size, 73 MB on loan\n0 :JEM: mmap:   3145728 size, 76 MB on loan\n0 :JEM: mmap:   3145728 size, 79 MB on loan\n0 :JEM: mmap:   1048576 size, 80 MB on loan\n0 :JEM: mmap:   1048576 size, 81 MB on loan\n0 :JEM: mmap:   1048576 size, 82 MB on loan\n0 :JEM: mmap:   1048576 size, 83 MB on loan\n0 :JEM: mmap:   2097152 size, 85 MB on loan\n0 :JEM: mmap:   3145728 size, 89 MB on loan\n0 :GFX: WriteAppNote: GL Context? \n0 :GFX: WriteAppNote: GL Context+\n0 :GFX: WriteAppNote: WebGL+\n1 :JEM: mmap:   1048576 size, 90 MB on loan\n1 :JEM: mmap:   1048576 size, 91 MB on loan\n1 :JEM: mmap:   1048576 size, 92 MB on loan", "attachment_id": 538483, "id": 5524670}, {"is_private": false, "creator": "n.nethercote@gmail.com", "creation_time": "2011-06-10T16:15:10Z", "author": "n.nethercote@gmail.com", "text": "Comment on attachment 538483\nInitial implementation (WIP)\n\nReview of attachment 538483:\n-----------------------------------------------------------------\n\n::: memory/mozalloc/memlog.c\n@@ +1094,5 @@\n> +}\n> +\n> +\n> +// END standalone, non-malloc-using printf facility copied\n> +// from nsprpub/pr/src/io/prprf.c\n\nCan you just #include that file directly?\n\n::: netwerk/protocol/about/nsAboutMemlog.cpp\n@@ +35,5 @@\n> + * the terms of any one of the MPL, the GPL or the LGPL.\n> + *\n> + * ***** END LICENSE BLOCK ***** */\n> +\n> +#include \"nsAboutMemlog.h\"\n\nYou should really make an xpcom interface for adding entries to the log so that JS code can add entries.  That would also allow you to rewrite this module in JS, which would make it a lot simpler :)", "tags": [], "time": "2011-06-10T16:15:10Z", "attachment_id": 538483, "raw_text": "Review of attachment 538483:\n-----------------------------------------------------------------\n\n::: memory/mozalloc/memlog.c\n@@ +1094,5 @@\n> +}\n> +\n> +\n> +// END standalone, non-malloc-using printf facility copied\n> +// from nsprpub/pr/src/io/prprf.c\n\nCan you just #include that file directly?\n\n::: netwerk/protocol/about/nsAboutMemlog.cpp\n@@ +35,5 @@\n> + * the terms of any one of the MPL, the GPL or the LGPL.\n> + *\n> + * ***** END LICENSE BLOCK ***** */\n> +\n> +#include \"nsAboutMemlog.h\"\n\nYou should really make an xpcom interface for adding entries to the log so that JS code can add entries.  That would also allow you to rewrite this module in JS, which would make it a lot simpler :)", "id": 5525086, "count": 3, "bug_id": 662814}, {"bug_id": 662814, "count": 4, "id": 5572996, "attachment_id": 543809, "raw_text": "* rebase to today\n\n* move logging code into its own tier_base module, so it is\n  independent of jemalloc.  It is built into a DSO that depends on\n  nothing but libc and then not even much of that.\n\n* log now has human readable timestamps (\"2011 Mon Jul 04 19:59:09\")\n\n* improved formatting and cumulative numbers for jemalloc-mapped,\n  mjit-code and tjit-code entries\n\n* next to-do: get decent information for GC and CC activities instead\n  of placeholder entries", "creation_time": "2011-07-04T20:04:35Z", "author": "jseward@acm.org", "text": "Created attachment 543809\nImproved version (WIP)\n\n* rebase to today\n\n* move logging code into its own tier_base module, so it is\n  independent of jemalloc.  It is built into a DSO that depends on\n  nothing but libc and then not even much of that.\n\n* log now has human readable timestamps (\"2011 Mon Jul 04 19:59:09\")\n\n* improved formatting and cumulative numbers for jemalloc-mapped,\n  mjit-code and tjit-code entries\n\n* next to-do: get decent information for GC and CC activities instead\n  of placeholder entries", "tags": [], "time": "2011-07-04T20:04:35Z", "is_private": false, "creator": "jseward@acm.org"}, {"id": 5573340, "raw_text": "Review of attachment 543809:\n-----------------------------------------------------------------\n\nSome more drive-by comments.  I stand by my unaddressed previous comments, too :)\n\n::: js/src/assembler/jit/ExecutableAllocator.cpp\n@@ +31,5 @@\n>  \n>  size_t ExecutableAllocator::pageSize = 0;\n>  size_t ExecutableAllocator::largeAllocSize = 0;\n>  \n> +// This should really be word-sized.\n\nSo why isn't it?\n\n@@ +32,5 @@\n>  size_t ExecutableAllocator::pageSize = 0;\n>  size_t ExecutableAllocator::largeAllocSize = 0;\n>  \n> +// This should really be word-sized.\n> +PRUint32 mjit_code_bytes_on_loan = 0;\n\ncamelCaps is preferred style.\n\n::: js/src/assembler/jit/ExecutableAllocator.h\n@@ +213,5 @@\n>      }\n>  \n>      void releasePoolPages(ExecutablePool *pool) {\n>          JS_ASSERT(pool->m_allocation.pages);\n> +        JS_ATOMIC_ADD(&mjit_code_bytes_on_loan, -(PRInt32)pool->m_allocation.size);\n\nHmm, with this we have dual implementations -- memlog uses a counter to track mjit code size, and about:memory uses iteration to get mjit code size.\n\nI prefer the iteration style because the counter style is prone to bitrotting, but if the mjit code size is really important for memlog, we should get rid of the iteration and change the memory reporter to use this counter.\n\n::: js/src/jstracer.cpp\n@@ +231,5 @@\n> +\n> +/* Implement embedder-specific nanojit members for code allocation. */\n> +\n> +// This should really be word-sized.\n> +static PRUint32 tjit_code_bytes_on_loan = 0;\n\ncamelCaps again.\n\n@@ +243,5 @@\n> +                             nbytes,\n> +                             MEM_COMMIT | MEM_RESERVE,\n> +                             PAGE_EXECUTE_READWRITE);\n> +    JSRuntime* rt = vmca->mRt;\n> +    if (rt && rt->memlogCallback) {\n\nDo you need to test |rt|?  If there's no JSRuntime we have big problems.  Likewise below in a number of places.\n\n@@ +249,5 @@\n> +            rt->memlogCallback(\n> +                \"(%lu MB on loan)  acq %lu  by nanojit::CodeAlloc::allocCodeChunk (FAILED)\\n\",\n> +                (size_t)tjit_code_bytes_on_loan / 1000000, nbytes);\n> +        } else {\n> +            JS_ATOMIC_ADD(&code_bytes_on_loan, nbytes);\n\nSame story with the tracing vs. counting style of accounting here.\n\n::: memlog/memlog.c\n@@ +1,1 @@\n> +\n\nYou obviously need the legal boilerplate stuff here.\n\nIs it worth a comment explaining why this file is C, not C++?\n\n@@ +120,5 @@\n> +** WARNING: This code may *NOT* call PR_LOG (because PR_LOG calls it)\n> +*/\n> +\n> +/*\n> +** XXX This needs to be internationalized!\n\nDoes it?  Maybe if URLs are embedded in the memlog?\n\n::: memlog/memlog.h\n@@ +19,5 @@\n> +\n> +/* Add a message to the memory log. */\n> +extern\n> +__attribute__ ((visibility (\"default\")))\n> +void memlog(MemlogCaller, const char* format, ...);\n\nThe names of all these functions will undoubtedly need NS prefixes of some kind, and camelCaps too.", "attachment_id": 543809, "bug_id": 662814, "time": "2011-07-05T04:26:11Z", "tags": [], "text": "Comment on attachment 543809\nImproved version (WIP)\n\nReview of attachment 543809:\n-----------------------------------------------------------------\n\nSome more drive-by comments.  I stand by my unaddressed previous comments, too :)\n\n::: js/src/assembler/jit/ExecutableAllocator.cpp\n@@ +31,5 @@\n>  \n>  size_t ExecutableAllocator::pageSize = 0;\n>  size_t ExecutableAllocator::largeAllocSize = 0;\n>  \n> +// This should really be word-sized.\n\nSo why isn't it?\n\n@@ +32,5 @@\n>  size_t ExecutableAllocator::pageSize = 0;\n>  size_t ExecutableAllocator::largeAllocSize = 0;\n>  \n> +// This should really be word-sized.\n> +PRUint32 mjit_code_bytes_on_loan = 0;\n\ncamelCaps is preferred style.\n\n::: js/src/assembler/jit/ExecutableAllocator.h\n@@ +213,5 @@\n>      }\n>  \n>      void releasePoolPages(ExecutablePool *pool) {\n>          JS_ASSERT(pool->m_allocation.pages);\n> +        JS_ATOMIC_ADD(&mjit_code_bytes_on_loan, -(PRInt32)pool->m_allocation.size);\n\nHmm, with this we have dual implementations -- memlog uses a counter to track mjit code size, and about:memory uses iteration to get mjit code size.\n\nI prefer the iteration style because the counter style is prone to bitrotting, but if the mjit code size is really important for memlog, we should get rid of the iteration and change the memory reporter to use this counter.\n\n::: js/src/jstracer.cpp\n@@ +231,5 @@\n> +\n> +/* Implement embedder-specific nanojit members for code allocation. */\n> +\n> +// This should really be word-sized.\n> +static PRUint32 tjit_code_bytes_on_loan = 0;\n\ncamelCaps again.\n\n@@ +243,5 @@\n> +                             nbytes,\n> +                             MEM_COMMIT | MEM_RESERVE,\n> +                             PAGE_EXECUTE_READWRITE);\n> +    JSRuntime* rt = vmca->mRt;\n> +    if (rt && rt->memlogCallback) {\n\nDo you need to test |rt|?  If there's no JSRuntime we have big problems.  Likewise below in a number of places.\n\n@@ +249,5 @@\n> +            rt->memlogCallback(\n> +                \"(%lu MB on loan)  acq %lu  by nanojit::CodeAlloc::allocCodeChunk (FAILED)\\n\",\n> +                (size_t)tjit_code_bytes_on_loan / 1000000, nbytes);\n> +        } else {\n> +            JS_ATOMIC_ADD(&code_bytes_on_loan, nbytes);\n\nSame story with the tracing vs. counting style of accounting here.\n\n::: memlog/memlog.c\n@@ +1,1 @@\n> +\n\nYou obviously need the legal boilerplate stuff here.\n\nIs it worth a comment explaining why this file is C, not C++?\n\n@@ +120,5 @@\n> +** WARNING: This code may *NOT* call PR_LOG (because PR_LOG calls it)\n> +*/\n> +\n> +/*\n> +** XXX This needs to be internationalized!\n\nDoes it?  Maybe if URLs are embedded in the memlog?\n\n::: memlog/memlog.h\n@@ +19,5 @@\n> +\n> +/* Add a message to the memory log. */\n> +extern\n> +__attribute__ ((visibility (\"default\")))\n> +void memlog(MemlogCaller, const char* format, ...);\n\nThe names of all these functions will undoubtedly need NS prefixes of some kind, and camelCaps too.", "author": "n.nethercote@gmail.com", "creation_time": "2011-07-05T04:26:11Z", "count": 5, "creator": "n.nethercote@gmail.com", "is_private": false}, {"count": 6, "bug_id": 662814, "is_private": false, "creator": "continuation@gmail.com", "creation_time": "2011-07-05T15:57:45Z", "author": "continuation@gmail.com", "text": "If you want to add cycle collector information, probably the best place to place a logging call is in nsCycleCollector::CleanupAfterCollection().  There's a number of things that we've added for Telemetry that may or may be more detail than you want.\n\ninterval: how long the CC took\nmVisitedRefCounted: the number of DOM objects the CC visited\nmVisitedGCed: the number of JS objects the CC visited\nmWhiteNodeCount: the number of DOM nodes the CC freed\n\nmVisitedRefCounted+mVisitedGCed is the total number of objects the CC visited, and gives a rough idea of how much work the CC did, in a way that does vary depending on how fast or slow the computer is.\n\nIn your blog, you said you would like to log how much memory the CC freed, but unfortunately that is not possible right now.  The white node count gives a rough idea, but there's no way to tell if a freed object contains a huge chunk of data or not.  Mounir is doing some work to improve that for about:memory in Bug 663271, but we still probably won't be able to figure out how much memory is being freed by the CC in a zero-overhead way.", "tags": [], "time": "2011-07-05T15:57:45Z", "attachment_id": null, "raw_text": "If you want to add cycle collector information, probably the best place to place a logging call is in nsCycleCollector::CleanupAfterCollection().  There's a number of things that we've added for Telemetry that may or may be more detail than you want.\n\ninterval: how long the CC took\nmVisitedRefCounted: the number of DOM objects the CC visited\nmVisitedGCed: the number of JS objects the CC visited\nmWhiteNodeCount: the number of DOM nodes the CC freed\n\nmVisitedRefCounted+mVisitedGCed is the total number of objects the CC visited, and gives a rough idea of how much work the CC did, in a way that does vary depending on how fast or slow the computer is.\n\nIn your blog, you said you would like to log how much memory the CC freed, but unfortunately that is not possible right now.  The white node count gives a rough idea, but there's no way to tell if a freed object contains a huge chunk of data or not.  Mounir is doing some work to improve that for about:memory in Bug 663271, but we still probably won't be able to figure out how much memory is being freed by the CC in a zero-overhead way.", "id": 5574046}, {"raw_text": "(In reply to comment #3)\n\n> > +// END standalone, non-malloc-using printf facility copied\n> > +// from nsprpub/pr/src/io/prprf.c\n> \n> Can you just #include that file directly?\n\nNot in any obvious way.  memlog.c (the main log function) needs to be\ncallable from the depths of jemalloc, whilst it holds a lock.  Any\ndynamic memory allocation memlog.c then does leads back into jemalloc,\nand deadlocks trying to acquire the lock for a second time.  I tried\nit to see what would happen.\n\nThat means memlog.c can't do dynamic memory allocation, which is a\nseverely annoying limitation.  The sprintf implementation in prprf.c\ndoes however do that, and the copied version is a cut down one which\nremoves such paths, and has limited functionality as a result,\nprimarily no printing of floats.\n\n\n> > +#include \"nsAboutMemlog.h\"\n> \n> You should really make an xpcom interface for adding entries to the log so\n> that JS code can add entries.\n\nYes.  I'll get to that.\n\n\n> That would also allow you to rewrite this\n> module in JS, which would make it a lot simpler :)\n\nWouldn't that lose the guaranteed-won't-deadlock property?", "attachment_id": null, "id": 5576122, "count": 7, "creator": "jseward@acm.org", "is_private": false, "tags": [], "bug_id": 662814, "time": "2011-07-06T12:55:40Z", "text": "(In reply to comment #3)\n\n> > +// END standalone, non-malloc-using printf facility copied\n> > +// from nsprpub/pr/src/io/prprf.c\n> \n> Can you just #include that file directly?\n\nNot in any obvious way.  memlog.c (the main log function) needs to be\ncallable from the depths of jemalloc, whilst it holds a lock.  Any\ndynamic memory allocation memlog.c then does leads back into jemalloc,\nand deadlocks trying to acquire the lock for a second time.  I tried\nit to see what would happen.\n\nThat means memlog.c can't do dynamic memory allocation, which is a\nseverely annoying limitation.  The sprintf implementation in prprf.c\ndoes however do that, and the copied version is a cut down one which\nremoves such paths, and has limited functionality as a result,\nprimarily no printing of floats.\n\n\n> > +#include \"nsAboutMemlog.h\"\n> \n> You should really make an xpcom interface for adding entries to the log so\n> that JS code can add entries.\n\nYes.  I'll get to that.\n\n\n> That would also allow you to rewrite this\n> module in JS, which would make it a lot simpler :)\n\nWouldn't that lose the guaranteed-won't-deadlock property?", "author": "jseward@acm.org", "creation_time": "2011-07-06T12:55:40Z"}, {"time": "2011-07-06T13:01:08Z", "tags": [], "bug_id": 662814, "text": "(In reply to comment #6)\n> If you want to add cycle collector information, [...]\n\nThanks for the info.  I added printing which makes CC logging \nappear like so:\n\n2011 Wed Jul 06 12:55:03  :CC :  nsCycleCollectorRunner::Collect\n2011 Wed Jul 06 12:55:03  :JEM:  (166 MB on loan)  acq 2097152  by mmap\n2011 Wed Jul 06 12:55:03  :JEM:  (167 MB on loan)  acq 1048576  by mmap\n2011 Wed Jul 06 12:55:03  :JEM:  (166 MB on loan)  rel 1048576  by munmap\n2011 Wed Jul 06 12:55:03  :JEM:  (167 MB on loan)  acq 1048576  by mmap\n2011 Wed Jul 06 12:55:03  :JEM:  (166 MB on loan)  rel 1048576  by munmap\n2011 Wed Jul 06 12:55:03  :JEM:  (168 MB on loan)  acq 2097152  by mmap\n2011 Wed Jul 06 12:55:03  :JEM:  (166 MB on loan)  rel 2097152  by munmap\n2011 Wed Jul 06 12:55:03  :JEM:  (167 MB on loan)  acq 1048576  by mmap\n2011 Wed Jul 06 12:55:03  :JEM:  (166 MB on loan)  rel 1048576  by munmap\n2011 Wed Jul 06 12:55:03  :JEM:  (164 MB on loan)  rel 2097152  by munmap\n2011 Wed Jul 06 12:55:03  :CC :  nsCycleCollector::CleanupAfterCollection\n2011 Wed Jul 06 12:55:03  :CC :    32 milliseconds total time\n2011 Wed Jul 06 12:55:03  :CC :    11926 DOM objects visited\n2011 Wed Jul 06 12:55:03  :CC :    766 DOM nodes freed\n2011 Wed Jul 06 12:55:03  :CC :    19792 JS objects visited\n\nWe see it start, then jemalloc both unmaps and maps space, the latter\npresumably to hold CC's administrative structures during the\ncollection (right?)", "author": "jseward@acm.org", "creation_time": "2011-07-06T13:01:08Z", "count": 8, "creator": "jseward@acm.org", "is_private": false, "id": 5576133, "raw_text": "(In reply to comment #6)\n> If you want to add cycle collector information, [...]\n\nThanks for the info.  I added printing which makes CC logging \nappear like so:\n\n2011 Wed Jul 06 12:55:03  :CC :  nsCycleCollectorRunner::Collect\n2011 Wed Jul 06 12:55:03  :JEM:  (166 MB on loan)  acq 2097152  by mmap\n2011 Wed Jul 06 12:55:03  :JEM:  (167 MB on loan)  acq 1048576  by mmap\n2011 Wed Jul 06 12:55:03  :JEM:  (166 MB on loan)  rel 1048576  by munmap\n2011 Wed Jul 06 12:55:03  :JEM:  (167 MB on loan)  acq 1048576  by mmap\n2011 Wed Jul 06 12:55:03  :JEM:  (166 MB on loan)  rel 1048576  by munmap\n2011 Wed Jul 06 12:55:03  :JEM:  (168 MB on loan)  acq 2097152  by mmap\n2011 Wed Jul 06 12:55:03  :JEM:  (166 MB on loan)  rel 2097152  by munmap\n2011 Wed Jul 06 12:55:03  :JEM:  (167 MB on loan)  acq 1048576  by mmap\n2011 Wed Jul 06 12:55:03  :JEM:  (166 MB on loan)  rel 1048576  by munmap\n2011 Wed Jul 06 12:55:03  :JEM:  (164 MB on loan)  rel 2097152  by munmap\n2011 Wed Jul 06 12:55:03  :CC :  nsCycleCollector::CleanupAfterCollection\n2011 Wed Jul 06 12:55:03  :CC :    32 milliseconds total time\n2011 Wed Jul 06 12:55:03  :CC :    11926 DOM objects visited\n2011 Wed Jul 06 12:55:03  :CC :    766 DOM nodes freed\n2011 Wed Jul 06 12:55:03  :CC :    19792 JS objects visited\n\nWe see it start, then jemalloc both unmaps and maps space, the latter\npresumably to hold CC's administrative structures during the\ncollection (right?)", "attachment_id": null}, {"creator": "jseward@acm.org", "is_private": false, "tags": [], "time": "2011-07-06T13:30:44Z", "text": "(In reply to comment #5)\nThanks for the reviewing, btw.  Here's some comments.  I'll fix the\nstylistic things in the next patch iteration.\n\n\n> >  size_t ExecutableAllocator::pageSize = 0;\n> >  size_t ExecutableAllocator::largeAllocSize = 0;\n> >  \n> > +// This should really be word-sized.\n> \n> So why isn't it?\n\nBecause I'm using JS_ATOMIC_ADD to change the counters without having\nto worry about locking.  Problem is it is a wrapper around\nPR_AtomicAdd and that only operates on 32 bit values.  Options are:\n\n(1) add a word sized version of PR_AtomicAdd\n(2) accept non-atomic updating of the counters\n(3) live with 32-bit counters\n(4) as per discussion below, get this information by traversal instead\n\n\n> >      void releasePoolPages(ExecutablePool *pool) {\n> >          JS_ASSERT(pool->m_allocation.pages);\n> > +        JS_ATOMIC_ADD(&mjit_code_bytes_on_loan, -(PRInt32)pool->m_allocation.size);\n> \n> Hmm, with this we have dual implementations -- memlog uses a counter to\n> track mjit code size, and about:memory uses iteration to get mjit code size.\n> \n> I prefer the iteration style because the counter style is prone to\n> bitrotting,\n\nI agree with both objections, but I can't see how to make it work\nwithout ending up reading freed memory in at least some cases.\n\neg.  In xpcjsruntime.cpp I added a function MemlogCallback which is\nexported into the JSRuntime, so SM can call it for logging.  When SM\nunmaps mjit code space, it calls MemlogCallback to log that fact.  In\norder to show how much code space now remains, the MemlogCallback\ncould call GetJSMjitCode, but if it does, it will wind up reading freed\nmemory.\n\nIn short, some of these freeing operations (mjit code, tjit code)\ninvolve both unmapping space and updating administrative structures.\nTraversing those structures to collect stats in the midst of updating\nthem, leads to bad effects.\n\nI guess it might be possible to defer the logging calls when (eg)\nfreeing mjit code long enough to allow the administrative updating to\ncomplete.\n\n\n> Is it worth a comment explaining why this file is C, not C++?\n\nOriginally it was part of libmozalloc, and also it contains a bunch\nof code copied from C files in nsprpub.  Now it's standalone, it could\nbe made into C++, although I don't think there's much point.", "author": "jseward@acm.org", "creation_time": "2011-07-06T13:30:44Z", "raw_text": "(In reply to comment #5)\nThanks for the reviewing, btw.  Here's some comments.  I'll fix the\nstylistic things in the next patch iteration.\n\n\n> >  size_t ExecutableAllocator::pageSize = 0;\n> >  size_t ExecutableAllocator::largeAllocSize = 0;\n> >  \n> > +// This should really be word-sized.\n> \n> So why isn't it?\n\nBecause I'm using JS_ATOMIC_ADD to change the counters without having\nto worry about locking.  Problem is it is a wrapper around\nPR_AtomicAdd and that only operates on 32 bit values.  Options are:\n\n(1) add a word sized version of PR_AtomicAdd\n(2) accept non-atomic updating of the counters\n(3) live with 32-bit counters\n(4) as per discussion below, get this information by traversal instead\n\n\n> >      void releasePoolPages(ExecutablePool *pool) {\n> >          JS_ASSERT(pool->m_allocation.pages);\n> > +        JS_ATOMIC_ADD(&mjit_code_bytes_on_loan, -(PRInt32)pool->m_allocation.size);\n> \n> Hmm, with this we have dual implementations -- memlog uses a counter to\n> track mjit code size, and about:memory uses iteration to get mjit code size.\n> \n> I prefer the iteration style because the counter style is prone to\n> bitrotting,\n\nI agree with both objections, but I can't see how to make it work\nwithout ending up reading freed memory in at least some cases.\n\neg.  In xpcjsruntime.cpp I added a function MemlogCallback which is\nexported into the JSRuntime, so SM can call it for logging.  When SM\nunmaps mjit code space, it calls MemlogCallback to log that fact.  In\norder to show how much code space now remains, the MemlogCallback\ncould call GetJSMjitCode, but if it does, it will wind up reading freed\nmemory.\n\nIn short, some of these freeing operations (mjit code, tjit code)\ninvolve both unmapping space and updating administrative structures.\nTraversing those structures to collect stats in the midst of updating\nthem, leads to bad effects.\n\nI guess it might be possible to defer the logging calls when (eg)\nfreeing mjit code long enough to allow the administrative updating to\ncomplete.\n\n\n> Is it worth a comment explaining why this file is C, not C++?\n\nOriginally it was part of libmozalloc, and also it contains a bunch\nof code copied from C files in nsprpub.  Now it's standalone, it could\nbe made into C++, although I don't think there's much point.", "attachment_id": null, "id": 5576189, "count": 9, "bug_id": 662814}, {"count": 10, "creator": "continuation@gmail.com", "is_private": false, "tags": [], "time": "2011-07-06T14:35:09Z", "bug_id": 662814, "text": "(In reply to comment #8)\n> We see it start, then jemalloc both unmaps and maps space, the latter\n> presumably to hold CC's administrative structures during the\n> collection (right?)\nYes, the CC creates an abstract copy of a portion of the heap, along with a few other things.", "author": "continuation@gmail.com", "creation_time": "2011-07-06T14:35:09Z", "raw_text": "(In reply to comment #8)\n> We see it start, then jemalloc both unmaps and maps space, the latter\n> presumably to hold CC's administrative structures during the\n> collection (right?)\nYes, the CC creates an abstract copy of a portion of the heap, along with a few other things.", "attachment_id": null, "id": 5576313}, {"bug_id": 662814, "count": 11, "id": 5580499, "raw_text": "* buildable on Windows as well as Linux\n* added VirtualAlloc/Free logging equivalent to existing mmap/munmap\n  logging\n* addresses many review comments above", "attachment_id": 544751, "tags": [], "time": "2011-07-08T08:46:26Z", "text": "Created attachment 544751\nwip, next version\n\n* buildable on Windows as well as Linux\n* added VirtualAlloc/Free logging equivalent to existing mmap/munmap\n  logging\n* addresses many review comments above", "author": "jseward@acm.org", "creation_time": "2011-07-08T08:46:26Z", "creator": "jseward@acm.org", "is_private": false}, {"id": 5603964, "attachment_id": 547372, "raw_text": "What this provides:\n\n* a low level in-memory logging facility, callable from anywhere,\n  intended to be used to log events which have a significant effect on\n  memory consumption.\n\n* the log can be viewed as about:eventlog.\n\n* logging calls for: jemalloc map/unmap, mjit and tjit code\n  allocation, GC and CC runs, and from\n  ScopedGfxFeatureReporter::WriteAppNote.\n\n\nImplementation summary:\n\n* new tier_base module, \"eventlog/\", containing low level routines --\n  a simple circular buffer, a routine to sprintf into it, and a\n  routine to copy it out, so it can be displayed.\n\n  Is tier_base in order that it can be called from anywhere, in\n  particular from inside jemalloc, without causing new inter-module\n  dependencies (which would be circular).\n\n  The fact that it must be callable from jemalloc complicates what\n  would otherwise be something trivial.  It means this module can't do\n  any dynamic memory allocation, since that would lead back into\n  jemalloc and causes a deadlock (I tried it).\n\n  That in turn means it can't use the system's sprintf since that\n  could do dynamic memory allocation, nor can it use ctime to generate\n  timestamps.  Hence it carries its own, cut-down, guaranteed-safe\n  versions of those, copied from NSPR.\n\n* new files\n  toolkit/components/eventlog/content/eventlog.{js,css,xhtml}\n  to make up the page \"about:eventlog\"\n\n* xpcom/base/nsEventLog.{h,cpp} and xpcom/base/nsIEventLog.idl to\n  provide support in JS-land, both for fetching the contents of the\n  log buffer and for adding entries to it.\n\n* a bit of refactoring of Nanojit code allocation, moving code out\n  of js/src/nanojit/avmplus.cpp into jstracer.cpp, where it more\n  logically belongs.\n\n\nLimitations/queries re current implementation, some of which could be\naddressed in followup patches:\n\n* VirtualAlloc/Free hookups in jemalloc not working on Windows (I\n  didn't manage to do a Windows build with jemalloc enabled).  I added\n  relevant bits of code but I'm sure they didn't get compiled or\n  tested.\n\n* 32 bit only counters for tjit-code/mjit-code/jemalloc-mmaped running\n  totals.  Need portable word-sized atomics to do this right, but NSPR\n  doesn't offer those.  I could add them.\n\n* Some of the logged lines are quite long, so they stick out over the\n  RH side of the white box created by global/skin/about.css.  Not sure\n  what to do about that.\n\n* Timestamps are GMT only, since finding the timezone offset requires\n  doing libc calls that could do dynamic allocation (see comments\n  above).  This could be fixed; I have a plan.\n\n* xpcom/base/nsEventLog.{h,cpp} has \n    nsresult\n    nsEventLogConstructor(nsISupports* aOuter,\n                          const nsIID& aIID,\n                          void* *aInstancePtr)\n  which is copied from nsCycleCollector.{h,cpp} (w/ renaming of\n  course).  I have no idea if it is correct/appropriate, but it\n  wouldn't build/link without it.  This needs to be checked by\n  someone who understands XPCOM world.\n  (is referred to by xpcom/build/XPCOMModule.inc)\n\n* Buffer size is 16k, which is probably too small.  64k would be\n  better.\n\n* Is built as a DSO.  This guarantees that there is only one instance\n  of it in the process and so the circular buffer it holds, which is a\n  global variable, exists only once in the process.  (That's a correct\n  understanding, is it?)\n\n* Copyright notices on new files OK ?", "author": "jseward@acm.org", "creation_time": "2011-07-21T12:13:57Z", "bug_id": 662814, "time": "2011-07-21T12:13:57Z", "tags": [], "text": "Created attachment 547372\npatch for review\n\nWhat this provides:\n\n* a low level in-memory logging facility, callable from anywhere,\n  intended to be used to log events which have a significant effect on\n  memory consumption.\n\n* the log can be viewed as about:eventlog.\n\n* logging calls for: jemalloc map/unmap, mjit and tjit code\n  allocation, GC and CC runs, and from\n  ScopedGfxFeatureReporter::WriteAppNote.\n\n\nImplementation summary:\n\n* new tier_base module, \"eventlog/\", containing low level routines --\n  a simple circular buffer, a routine to sprintf into it, and a\n  routine to copy it out, so it can be displayed.\n\n  Is tier_base in order that it can be called from anywhere, in\n  particular from inside jemalloc, without causing new inter-module\n  dependencies (which would be circular).\n\n  The fact that it must be callable from jemalloc complicates what\n  would otherwise be something trivial.  It means this module can't do\n  any dynamic memory allocation, since that would lead back into\n  jemalloc and causes a deadlock (I tried it).\n\n  That in turn means it can't use the system's sprintf since that\n  could do dynamic memory allocation, nor can it use ctime to generate\n  timestamps.  Hence it carries its own, cut-down, guaranteed-safe\n  versions of those, copied from NSPR.\n\n* new files\n  toolkit/components/eventlog/content/eventlog.{js,css,xhtml}\n  to make up the page \"about:eventlog\"\n\n* xpcom/base/nsEventLog.{h,cpp} and xpcom/base/nsIEventLog.idl to\n  provide support in JS-land, both for fetching the contents of the\n  log buffer and for adding entries to it.\n\n* a bit of refactoring of Nanojit code allocation, moving code out\n  of js/src/nanojit/avmplus.cpp into jstracer.cpp, where it more\n  logically belongs.\n\n\nLimitations/queries re current implementation, some of which could be\naddressed in followup patches:\n\n* VirtualAlloc/Free hookups in jemalloc not working on Windows (I\n  didn't manage to do a Windows build with jemalloc enabled).  I added\n  relevant bits of code but I'm sure they didn't get compiled or\n  tested.\n\n* 32 bit only counters for tjit-code/mjit-code/jemalloc-mmaped running\n  totals.  Need portable word-sized atomics to do this right, but NSPR\n  doesn't offer those.  I could add them.\n\n* Some of the logged lines are quite long, so they stick out over the\n  RH side of the white box created by global/skin/about.css.  Not sure\n  what to do about that.\n\n* Timestamps are GMT only, since finding the timezone offset requires\n  doing libc calls that could do dynamic allocation (see comments\n  above).  This could be fixed; I have a plan.\n\n* xpcom/base/nsEventLog.{h,cpp} has \n    nsresult\n    nsEventLogConstructor(nsISupports* aOuter,\n                          const nsIID& aIID,\n                          void* *aInstancePtr)\n  which is copied from nsCycleCollector.{h,cpp} (w/ renaming of\n  course).  I have no idea if it is correct/appropriate, but it\n  wouldn't build/link without it.  This needs to be checked by\n  someone who understands XPCOM world.\n  (is referred to by xpcom/build/XPCOMModule.inc)\n\n* Buffer size is 16k, which is probably too small.  64k would be\n  better.\n\n* Is built as a DSO.  This guarantees that there is only one instance\n  of it in the process and so the circular buffer it holds, which is a\n  global variable, exists only once in the process.  (That's a correct\n  understanding, is it?)\n\n* Copyright notices on new files OK ?", "creator": "jseward@acm.org", "is_private": false, "count": 12}, {"id": 5604071, "attachment_id": null, "raw_text": "I'll look at this in detail tomorrow, but one thing that leapt out at me...\n\n> * VirtualAlloc/Free hookups in jemalloc not working on Windows (I\n>   didn't manage to do a Windows build with jemalloc enabled).  I added\n>   relevant bits of code but I'm sure they didn't get compiled or\n>   tested.\n\nDo a Windows opt try server run and then download the compiled binary to test it.", "author": "n.nethercote@gmail.com", "creation_time": "2011-07-21T13:14:41Z", "tags": [], "time": "2011-07-21T13:14:41Z", "bug_id": 662814, "text": "I'll look at this in detail tomorrow, but one thing that leapt out at me...\n\n> * VirtualAlloc/Free hookups in jemalloc not working on Windows (I\n>   didn't manage to do a Windows build with jemalloc enabled).  I added\n>   relevant bits of code but I'm sure they didn't get compiled or\n>   tested.\n\nDo a Windows opt try server run and then download the compiled binary to test it.", "creator": "n.nethercote@gmail.com", "is_private": false, "count": 13}, {"id": 5604180, "attachment_id": null, "raw_text": "(In reply to comment #12)\n> * Copyright notices on new files OK ?\n\nThe notices should have the year 2011, not 2009.  The line listing you as a contributor should indented 2 spaces, not 1. (see http://www.mozilla.org/MPL/boilerplate-1.1/ )", "author": "continuation@gmail.com", "creation_time": "2011-07-21T14:12:25Z", "tags": [], "time": "2011-07-21T14:12:25Z", "text": "(In reply to comment #12)\n> * Copyright notices on new files OK ?\n\nThe notices should have the year 2011, not 2009.  The line listing you as a contributor should indented 2 spaces, not 1. (see http://www.mozilla.org/MPL/boilerplate-1.1/ )", "creator": "continuation@gmail.com", "is_private": false, "bug_id": 662814, "count": 14}, {"id": 5606174, "attachment_id": null, "raw_text": "I tried to build with the patch applied on Linux64 and got a link error:\n\n/usr/bin/ld.gold.real: ../../dist/lib/libjemalloc.a(jemalloc.o): in function my_mmap:/home/njn/moz/mi4/memory/jemalloc/jemalloc.c:376: error: undefined reference to 'eventLog'\n/usr/bin/ld.gold.real: ../../dist/lib/libjemalloc.a(jemalloc.o): in function my_munmap:/home/njn/moz/mi4/memory/jemalloc/jemalloc.c:388: error: undefined reference to 'eventLog'\ncollect2: ld returned 1 exit status", "creation_time": "2011-07-22T01:26:03Z", "author": "n.nethercote@gmail.com", "text": "I tried to build with the patch applied on Linux64 and got a link error:\n\n/usr/bin/ld.gold.real: ../../dist/lib/libjemalloc.a(jemalloc.o): in function my_mmap:/home/njn/moz/mi4/memory/jemalloc/jemalloc.c:376: error: undefined reference to 'eventLog'\n/usr/bin/ld.gold.real: ../../dist/lib/libjemalloc.a(jemalloc.o): in function my_munmap:/home/njn/moz/mi4/memory/jemalloc/jemalloc.c:388: error: undefined reference to 'eventLog'\ncollect2: ld returned 1 exit status", "bug_id": 662814, "tags": [], "time": "2011-07-22T01:26:03Z", "is_private": false, "creator": "n.nethercote@gmail.com", "count": 15}, {"bug_id": 662814, "count": 16, "id": 5606216, "raw_text": "Review of attachment 547372:\n-----------------------------------------------------------------\n\nI have no idea how this is going to work with e10s.  Already in Fennec no info from the content process will be shown in about:eventlog, AFAICT.  That can be a follow-up, though.\n\n::: eventlog/eventlog.h\n@@ +64,5 @@\n> +    enum { EL_Jemalloc,  /* jemalloc */\n> +           EL_JS,        /* JS engine */\n> +           EL_CC,        /* cycle collector */\n> +           EL_Gfx,       /* gfx/ */\n> +           EL_Misc       /* misc */\n\nI'm guessing these should have names like NS_EL_JEMALLOC, NS_EL_JS, etc.  That seems to be the standard Gecko style.  And maybe NS_EVENTLOG_JEMALLOC would be better.\n\n(But see at the very bottom about moving these into nsIEventLog.)\n\n@@ +66,5 @@\n> +           EL_CC,        /* cycle collector */\n> +           EL_Gfx,       /* gfx/ */\n> +           EL_Misc       /* misc */\n> +    }\n> +    EventLogCaller;\n\nNS_EventLogCaller?  Not sure.\n\n@@ +70,5 @@\n> +    EventLogCaller;\n> +\n> +/* Add a message to the event log. */\n> +EVENTLOG_EXPORT\n> +void eventLog(EventLogCaller, const char* format, ...);\n\nI suspect this should be named NS_EventLog() or similar.  Likewise for the other functions in this header.\n\n::: js/src/assembler/jit/ExecutableAllocator.h\n@@ +282,5 @@\n> +\n> +        JS_ATOMIC_ADD(&mjitCodeBytesOnLoan, allocSize);\n> +        if (eventLog)\n> +            eventLog(\"(%lu KB on loan)  acq %lu  by mjit systemAlloc\\n\",\n> +                     (size_t)mjitCodeBytesOnLoan / 1000, (size_t)allocSize);\n\nDividing by 1000 when writing \"KB\" is correct, but not Mozilla policy :(  See bug 106618 for far more than you want to know about this.\n\nHowever, I'd be inclined to show the number of bytes instead, like about:memory?verbose does.  (I personally think in bytes and MB, not KB, but MB would be too coarse here.)  Does eventLog allow you to print numbers with commas separating each group of 3 digits?  I sure hope so, byte count will be impossible to read otherwise.  (This obviously applies everywhere.)\n\n::: js/src/nanojit/avmplus.cpp\n@@ -78,5 @@\n> -nanojit::CodeAlloc::allocCodeChunk(size_t nbytes) {\n> -    return VirtualAlloc(NULL,\n> -                        nbytes,\n> -                        MEM_COMMIT | MEM_RESERVE,\n> -                        PAGE_EXECUTE_READWRITE);\n\nThe nanojit parts will have to be landed separately to nanojit-central and then merged.  I can do that for you when it's ready.\n\n::: memory/jemalloc/jemalloc.c\n@@ +374,5 @@\n> +\t\tmappedOnLoan += size;\n> +\t}\n> +\teventLog(EL_Jemalloc,\n> +\t\t \"(%lu MB on loan)  acq %lu  by %s%s\\n\",\n> +\t\t mappedOnLoan / 1000000, size,\n\nBytes vs. MB and 1000 vs. 1024 here.  Again, I'd just go with bytes, so long as the numbers are comma'd.\n\n::: toolkit/components/eventlog/content/eventLog.css\n@@ +34,5 @@\n> + * the terms of any one of the MPL, the GPL or the LGPL.\n> + *\n> + * ***** END LICENSE BLOCK ***** */\n> +\n> +.mrValue {\n\nLooks like you've cut and pasted aboutMemory.css completely here.  Please remove the rules you aren't using!\n\nYou mentioned that the log can poke past the right-hand side of the enclosing box.  I wonder if about:eventlog should just be pure plaintext?\n\nThe eventLog.{css,js,xhtml} files should probably be called aboutEventLog.{css,js,xhtml} for consistency with other about: pages.\n\n::: toolkit/components/eventlog/content/eventLog.js\n@@ +63,5 @@\n> +  // First, clear the page contents.  Necessary because update() might be\n> +  // called more than once due to ChildMemoryListener.\n> +  var content = $(\"content\");\n> +  content.parentNode.replaceChild(content.cloneNode(false), content);\n> +  content = $(\"content\");\n\nThis can be removed -- you've cut and pasted it from aboutMemory.js, but you don't have ChildMemoryListener.\n\n::: toolkit/components/eventlog/content/eventLog.xhtml\n@@ +45,5 @@\n> +    <script type=\"text/javascript\" src=\"chrome://global/content/eventLog.js\"/>\n> +  </head>\n> +\n> +  <!-- No newline before the div element!  This avoids extraneous spaces when\n> +       pasting the entire output after selecting it with Ctrl-a. -->\n\nIs that true here?\n\n::: xpcom/base/nsEventLog.cpp\n@@ +68,5 @@\n> +    // regard for line boundaries.  Dumping it verbatim gives a\n> +    // partial first line.  Hence try to find the start of the\n> +    // next line.\n> +    size_t ix_linestart = 0;\n> +    while (1) {\n\n|while (true)| is nicer.\n\n::: xpcom/base/nsIEventLog.idl\n@@ +47,5 @@\n> +    /* Add an entry to the log.  It would be nice to have the caller\n> +       supply an EventLogCaller value too, but there doesn't seem to\n> +       be a clean way to convey C++ enum types between the two worlds.\n> +       Hence this routine uses the value EL_Misc for all strings\n> +       passed here. */\n\nYou're right about the enums, so the standard workaround is to define const integers here.  Eg. see the UNITS_* constants in nsIMemoryReporter.  Both JS and C++ code can see constants defined this way.", "attachment_id": 547372, "time": "2011-07-22T01:53:50Z", "tags": [], "text": "Comment on attachment 547372\npatch for review\n\nReview of attachment 547372:\n-----------------------------------------------------------------\n\nI have no idea how this is going to work with e10s.  Already in Fennec no info from the content process will be shown in about:eventlog, AFAICT.  That can be a follow-up, though.\n\n::: eventlog/eventlog.h\n@@ +64,5 @@\n> +    enum { EL_Jemalloc,  /* jemalloc */\n> +           EL_JS,        /* JS engine */\n> +           EL_CC,        /* cycle collector */\n> +           EL_Gfx,       /* gfx/ */\n> +           EL_Misc       /* misc */\n\nI'm guessing these should have names like NS_EL_JEMALLOC, NS_EL_JS, etc.  That seems to be the standard Gecko style.  And maybe NS_EVENTLOG_JEMALLOC would be better.\n\n(But see at the very bottom about moving these into nsIEventLog.)\n\n@@ +66,5 @@\n> +           EL_CC,        /* cycle collector */\n> +           EL_Gfx,       /* gfx/ */\n> +           EL_Misc       /* misc */\n> +    }\n> +    EventLogCaller;\n\nNS_EventLogCaller?  Not sure.\n\n@@ +70,5 @@\n> +    EventLogCaller;\n> +\n> +/* Add a message to the event log. */\n> +EVENTLOG_EXPORT\n> +void eventLog(EventLogCaller, const char* format, ...);\n\nI suspect this should be named NS_EventLog() or similar.  Likewise for the other functions in this header.\n\n::: js/src/assembler/jit/ExecutableAllocator.h\n@@ +282,5 @@\n> +\n> +        JS_ATOMIC_ADD(&mjitCodeBytesOnLoan, allocSize);\n> +        if (eventLog)\n> +            eventLog(\"(%lu KB on loan)  acq %lu  by mjit systemAlloc\\n\",\n> +                     (size_t)mjitCodeBytesOnLoan / 1000, (size_t)allocSize);\n\nDividing by 1000 when writing \"KB\" is correct, but not Mozilla policy :(  See bug 106618 for far more than you want to know about this.\n\nHowever, I'd be inclined to show the number of bytes instead, like about:memory?verbose does.  (I personally think in bytes and MB, not KB, but MB would be too coarse here.)  Does eventLog allow you to print numbers with commas separating each group of 3 digits?  I sure hope so, byte count will be impossible to read otherwise.  (This obviously applies everywhere.)\n\n::: js/src/nanojit/avmplus.cpp\n@@ -78,5 @@\n> -nanojit::CodeAlloc::allocCodeChunk(size_t nbytes) {\n> -    return VirtualAlloc(NULL,\n> -                        nbytes,\n> -                        MEM_COMMIT | MEM_RESERVE,\n> -                        PAGE_EXECUTE_READWRITE);\n\nThe nanojit parts will have to be landed separately to nanojit-central and then merged.  I can do that for you when it's ready.\n\n::: memory/jemalloc/jemalloc.c\n@@ +374,5 @@\n> +\t\tmappedOnLoan += size;\n> +\t}\n> +\teventLog(EL_Jemalloc,\n> +\t\t \"(%lu MB on loan)  acq %lu  by %s%s\\n\",\n> +\t\t mappedOnLoan / 1000000, size,\n\nBytes vs. MB and 1000 vs. 1024 here.  Again, I'd just go with bytes, so long as the numbers are comma'd.\n\n::: toolkit/components/eventlog/content/eventLog.css\n@@ +34,5 @@\n> + * the terms of any one of the MPL, the GPL or the LGPL.\n> + *\n> + * ***** END LICENSE BLOCK ***** */\n> +\n> +.mrValue {\n\nLooks like you've cut and pasted aboutMemory.css completely here.  Please remove the rules you aren't using!\n\nYou mentioned that the log can poke past the right-hand side of the enclosing box.  I wonder if about:eventlog should just be pure plaintext?\n\nThe eventLog.{css,js,xhtml} files should probably be called aboutEventLog.{css,js,xhtml} for consistency with other about: pages.\n\n::: toolkit/components/eventlog/content/eventLog.js\n@@ +63,5 @@\n> +  // First, clear the page contents.  Necessary because update() might be\n> +  // called more than once due to ChildMemoryListener.\n> +  var content = $(\"content\");\n> +  content.parentNode.replaceChild(content.cloneNode(false), content);\n> +  content = $(\"content\");\n\nThis can be removed -- you've cut and pasted it from aboutMemory.js, but you don't have ChildMemoryListener.\n\n::: toolkit/components/eventlog/content/eventLog.xhtml\n@@ +45,5 @@\n> +    <script type=\"text/javascript\" src=\"chrome://global/content/eventLog.js\"/>\n> +  </head>\n> +\n> +  <!-- No newline before the div element!  This avoids extraneous spaces when\n> +       pasting the entire output after selecting it with Ctrl-a. -->\n\nIs that true here?\n\n::: xpcom/base/nsEventLog.cpp\n@@ +68,5 @@\n> +    // regard for line boundaries.  Dumping it verbatim gives a\n> +    // partial first line.  Hence try to find the start of the\n> +    // next line.\n> +    size_t ix_linestart = 0;\n> +    while (1) {\n\n|while (true)| is nicer.\n\n::: xpcom/base/nsIEventLog.idl\n@@ +47,5 @@\n> +    /* Add an entry to the log.  It would be nice to have the caller\n> +       supply an EventLogCaller value too, but there doesn't seem to\n> +       be a clean way to convey C++ enum types between the two worlds.\n> +       Hence this routine uses the value EL_Misc for all strings\n> +       passed here. */\n\nYou're right about the enums, so the standard workaround is to define const integers here.  Eg. see the UNITS_* constants in nsIMemoryReporter.  Both JS and C++ code can see constants defined this way.", "author": "n.nethercote@gmail.com", "creation_time": "2011-07-22T01:53:50Z", "creator": "n.nethercote@gmail.com", "is_private": false}, {"text": "(In reply to comment #16)\n> Comment on attachment 547372 [details] [review]\n> patch for review\n> \n> Review of attachment 547372 [details] [review]:\n> -----------------------------------------------------------------\n> \n> I have no idea how this is going to work with e10s.  Already in Fennec no\n> info from the content process will be shown in about:eventlog, AFAICT.  That\n> can be a follow-up, though.\n> \n> ::: eventlog/eventlog.h\n> @@ +64,5 @@\n> > +    enum { EL_Jemalloc,  /* jemalloc */\n> > +           EL_JS,        /* JS engine */\n> > +           EL_CC,        /* cycle collector */\n> > +           EL_Gfx,       /* gfx/ */\n> > +           EL_Misc       /* misc */\n> \n> I'm guessing these should have names like NS_EL_JEMALLOC, NS_EL_JS, etc. \n> That seems to be the standard Gecko style.  And maybe NS_EVENTLOG_JEMALLOC\n> would be better.\n> \n> (But see at the very bottom about moving these into nsIEventLog.)\n> \n> @@ +66,5 @@\n> > +           EL_CC,        /* cycle collector */\n> > +           EL_Gfx,       /* gfx/ */\n> > +           EL_Misc       /* misc */\n> > +    }\n> > +    EventLogCaller;\n> \n> NS_EventLogCaller?  Not sure.\n\nPlease don't perpetuate the whole NS nonsense. The new hotness is to wrap things in a mozilla namespace, possibly even mozilla::EventLog.", "tags": [], "bug_id": 662814, "time": "2011-07-22T02:26:15Z", "creation_time": "2011-07-22T02:26:15Z", "author": "josh@joshmatthews.net", "count": 17, "is_private": false, "creator": "josh@joshmatthews.net", "id": 5606242, "raw_text": "(In reply to comment #16)\n> Comment on attachment 547372 [details] [review]\n> patch for review\n> \n> Review of attachment 547372 [details] [review]:\n> -----------------------------------------------------------------\n> \n> I have no idea how this is going to work with e10s.  Already in Fennec no\n> info from the content process will be shown in about:eventlog, AFAICT.  That\n> can be a follow-up, though.\n> \n> ::: eventlog/eventlog.h\n> @@ +64,5 @@\n> > +    enum { EL_Jemalloc,  /* jemalloc */\n> > +           EL_JS,        /* JS engine */\n> > +           EL_CC,        /* cycle collector */\n> > +           EL_Gfx,       /* gfx/ */\n> > +           EL_Misc       /* misc */\n> \n> I'm guessing these should have names like NS_EL_JEMALLOC, NS_EL_JS, etc. \n> That seems to be the standard Gecko style.  And maybe NS_EVENTLOG_JEMALLOC\n> would be better.\n> \n> (But see at the very bottom about moving these into nsIEventLog.)\n> \n> @@ +66,5 @@\n> > +           EL_CC,        /* cycle collector */\n> > +           EL_Gfx,       /* gfx/ */\n> > +           EL_Misc       /* misc */\n> > +    }\n> > +    EventLogCaller;\n> \n> NS_EventLogCaller?  Not sure.\n\nPlease don't perpetuate the whole NS nonsense. The new hotness is to wrap things in a mozilla namespace, possibly even mozilla::EventLog.", "attachment_id": null}, {"creator": "mh+mozilla@glandium.org", "is_private": false, "count": 18, "author": "mh+mozilla@glandium.org", "creation_time": "2011-07-22T06:08:08Z", "time": "2011-07-22T06:08:08Z", "bug_id": 662814, "tags": [], "text": "(In reply to comment #15)\n> I tried to build with the patch applied on Linux64 and got a link error:\n> \n> /usr/bin/ld.gold.real: ../../dist/lib/libjemalloc.a(jemalloc.o): in function\n> my_mmap:/home/njn/moz/mi4/memory/jemalloc/jemalloc.c:376: error: undefined\n> reference to 'eventLog'\n> /usr/bin/ld.gold.real: ../../dist/lib/libjemalloc.a(jemalloc.o): in function\n> my_munmap:/home/njn/moz/mi4/memory/jemalloc/jemalloc.c:388: error: undefined\n> reference to 'eventLog'\n> collect2: ld returned 1 exit status\n\nThat's really not surprising: jemalloc is linked in the browser binary (firefox), and the eventLog is in a separate library, if I am to believe comment 12. The problem is that the firefox binary simply can't be linked against a non system DSO... (or at least, i'd advise against it, it requires an rpath or a wrapper script that we finally got rid of)", "attachment_id": null, "raw_text": "(In reply to comment #15)\n> I tried to build with the patch applied on Linux64 and got a link error:\n> \n> /usr/bin/ld.gold.real: ../../dist/lib/libjemalloc.a(jemalloc.o): in function\n> my_mmap:/home/njn/moz/mi4/memory/jemalloc/jemalloc.c:376: error: undefined\n> reference to 'eventLog'\n> /usr/bin/ld.gold.real: ../../dist/lib/libjemalloc.a(jemalloc.o): in function\n> my_munmap:/home/njn/moz/mi4/memory/jemalloc/jemalloc.c:388: error: undefined\n> reference to 'eventLog'\n> collect2: ld returned 1 exit status\n\nThat's really not surprising: jemalloc is linked in the browser binary (firefox), and the eventLog is in a separate library, if I am to believe comment 12. The problem is that the firefox binary simply can't be linked against a non system DSO... (or at least, i'd advise against it, it requires an rpath or a wrapper script that we finally got rid of)", "id": 5606457}, {"id": 5606625, "attachment_id": null, "raw_text": "(In reply to comment #18)\n> (In reply to comment #15)\n> > I tried to build with the patch applied on Linux64 and got a link error:\n> > \n> > /usr/bin/ld.gold.real: ../../dist/lib/libjemalloc.a(jemalloc.o): in function\n> > my_mmap:/home/njn/moz/mi4/memory/jemalloc/jemalloc.c:376: error: undefined\n> > reference to 'eventLog'\n\nUrr, I am surprised and disappointed to hear that.  I was using\nld.traditional on 64-bit Ubuntu 10.04 and never saw any such failure,\nand it worked, and it also worked with MSVC 2008 on WinXP.\n\n> That's really not surprising: jemalloc is linked in the browser binary\n> (firefox), and the eventLog is in a separate library, if I am to believe\n> comment 12.\n\nYes, that's true.\n\n> The problem is that the firefox binary simply can't be linked\n> against a non system DSO... (or at least, i'd advise against it, it requires\n> an rpath or a wrapper script that we finally got rid of)\n\nSo then the thing to do is to link the eventLog into the browser\nbinary, in the same way as jemalloc is?\n\nThese linking constraints are non-obvious and not \"standard\", eg on my\nlinux box, /usr/bin/kmail is linked against a huge stack of non system\nDSOs.  Are the constraints documented anywhere?\n\nCan we get this straightened out definitively before I embark on\nanother round of build-system mortal-kombat?  I did it as a DSO\nbecause I was advised that this was a good way to make the\nfunctionality available everywhere, without inducing new cyclic\ninter-module dependencies.", "author": "jseward@acm.org", "creation_time": "2011-07-22T09:13:48Z", "tags": [], "time": "2011-07-22T09:13:48Z", "text": "(In reply to comment #18)\n> (In reply to comment #15)\n> > I tried to build with the patch applied on Linux64 and got a link error:\n> > \n> > /usr/bin/ld.gold.real: ../../dist/lib/libjemalloc.a(jemalloc.o): in function\n> > my_mmap:/home/njn/moz/mi4/memory/jemalloc/jemalloc.c:376: error: undefined\n> > reference to 'eventLog'\n\nUrr, I am surprised and disappointed to hear that.  I was using\nld.traditional on 64-bit Ubuntu 10.04 and never saw any such failure,\nand it worked, and it also worked with MSVC 2008 on WinXP.\n\n> That's really not surprising: jemalloc is linked in the browser binary\n> (firefox), and the eventLog is in a separate library, if I am to believe\n> comment 12.\n\nYes, that's true.\n\n> The problem is that the firefox binary simply can't be linked\n> against a non system DSO... (or at least, i'd advise against it, it requires\n> an rpath or a wrapper script that we finally got rid of)\n\nSo then the thing to do is to link the eventLog into the browser\nbinary, in the same way as jemalloc is?\n\nThese linking constraints are non-obvious and not \"standard\", eg on my\nlinux box, /usr/bin/kmail is linked against a huge stack of non system\nDSOs.  Are the constraints documented anywhere?\n\nCan we get this straightened out definitively before I embark on\nanother round of build-system mortal-kombat?  I did it as a DSO\nbecause I was advised that this was a good way to make the\nfunctionality available everywhere, without inducing new cyclic\ninter-module dependencies.", "creator": "jseward@acm.org", "is_private": false, "bug_id": 662814, "count": 19}, {"id": 5606710, "raw_text": "(In reply to comment #19)\n> So then the thing to do is to link the eventLog into the browser\n> binary, in the same way as jemalloc is?\n\nThat very much depend how tied it is to the parts that are not in jemalloc (I haven't looked in detail)\n \n> These linking constraints are non-obvious and not \"standard\", eg on my\n> linux box, /usr/bin/kmail is linked against a huge stack of non system\n> DSOs.  Are the constraints documented anywhere?\n\n/usr/bin/kmail is linked against a huge stack of things the linker can find.\n$somewhere/firefox must be linked against things what the linker can find, and the linker won't find stuff in $somewhere/ without a wrapper script or an rpath.\nWe used to have a wrapper script, but got rid of it at the same time we added preloading of our libraries (which is a non negligible startup perf improvement) - dynamically linking goes against preloading.\n\n> Can we get this straightened out definitively before I embark on\n> another round of build-system mortal-kombat?  I did it as a DSO\n> because I was advised that this was a good way to make the\n> functionality available everywhere, without inducing new cyclic\n> inter-module dependencies.\n\nThe main problem for you is that different platforms have different ways to handle the situation. See how jemalloc is statically linked to the binary on linux, but provided as a DSO on OSX and windows (which effectively makes it non preloaded, btw). The core problem is that the library search path doesn't include the firefox directory by default on linux, while aiui, it does on OSX and windows. So all in all, maybe what we really want is to actually add an rpath such that the library search path *does* include the firefox directory by default on linux (hoping that the other unix systems that care do support $ORIGIN as an rpath).", "attachment_id": null, "bug_id": 662814, "tags": [], "time": "2011-07-22T10:33:26Z", "text": "(In reply to comment #19)\n> So then the thing to do is to link the eventLog into the browser\n> binary, in the same way as jemalloc is?\n\nThat very much depend how tied it is to the parts that are not in jemalloc (I haven't looked in detail)\n \n> These linking constraints are non-obvious and not \"standard\", eg on my\n> linux box, /usr/bin/kmail is linked against a huge stack of non system\n> DSOs.  Are the constraints documented anywhere?\n\n/usr/bin/kmail is linked against a huge stack of things the linker can find.\n$somewhere/firefox must be linked against things what the linker can find, and the linker won't find stuff in $somewhere/ without a wrapper script or an rpath.\nWe used to have a wrapper script, but got rid of it at the same time we added preloading of our libraries (which is a non negligible startup perf improvement) - dynamically linking goes against preloading.\n\n> Can we get this straightened out definitively before I embark on\n> another round of build-system mortal-kombat?  I did it as a DSO\n> because I was advised that this was a good way to make the\n> functionality available everywhere, without inducing new cyclic\n> inter-module dependencies.\n\nThe main problem for you is that different platforms have different ways to handle the situation. See how jemalloc is statically linked to the binary on linux, but provided as a DSO on OSX and windows (which effectively makes it non preloaded, btw). The core problem is that the library search path doesn't include the firefox directory by default on linux, while aiui, it does on OSX and windows. So all in all, maybe what we really want is to actually add an rpath such that the library search path *does* include the firefox directory by default on linux (hoping that the other unix systems that care do support $ORIGIN as an rpath).", "author": "mh+mozilla@glandium.org", "creation_time": "2011-07-22T10:33:26Z", "count": 20, "creator": "mh+mozilla@glandium.org", "is_private": false}, {"time": "2011-07-22T10:34:40Z", "tags": [], "bug_id": 662814, "text": "Though, considering jemalloc is a central piece, why not bundle with jemalloc instead of having a separate lib ?", "author": "mh+mozilla@glandium.org", "creation_time": "2011-07-22T10:34:40Z", "count": 21, "creator": "mh+mozilla@glandium.org", "is_private": false, "id": 5606711, "raw_text": "Though, considering jemalloc is a central piece, why not bundle with jemalloc instead of having a separate lib ?", "attachment_id": null}, {"count": 22, "bug_id": 662814, "attachment_id": null, "raw_text": "> Though, considering jemalloc is a central piece, why not bundle with\n> jemalloc instead of having a separate lib ?\n\nBecause the logging facility then wouldn't be available on non-jemalloc\nbuilds.", "id": 5606735, "is_private": false, "creator": "jseward@acm.org", "creation_time": "2011-07-22T10:54:57Z", "author": "jseward@acm.org", "text": "> Though, considering jemalloc is a central piece, why not bundle with\n> jemalloc instead of having a separate lib ?\n\nBecause the logging facility then wouldn't be available on non-jemalloc\nbuilds.", "tags": [], "time": "2011-07-22T10:54:57Z"}, {"count": 23, "bug_id": 662814, "is_private": false, "creator": "n.nethercote@gmail.com", "text": "Another thing -- you should probably have at least one test for about:eventlog.  Not sure what it would do, maybe just check that it actually contains some sane-looking output.  You can use toolkit/components/aboutmemory/tests/chrome/test_aboutmemory.xul as a starting point.", "tags": [], "time": "2011-07-22T22:09:56Z", "creation_time": "2011-07-22T22:09:56Z", "author": "n.nethercote@gmail.com", "raw_text": "Another thing -- you should probably have at least one test for about:eventlog.  Not sure what it would do, maybe just check that it actually contains some sane-looking output.  You can use toolkit/components/aboutmemory/tests/chrome/test_aboutmemory.xul as a starting point.", "attachment_id": null, "id": 5608292}, {"creation_time": "2011-07-26T15:22:14Z", "author": "jseward@acm.org", "text": "Created attachment 548467\nfixes link errors in comment #15\n\nHere's a revised version of the patch which gets around the link\nfailure reported in comment #15.  It also adds a $$ORIGIN rpath entry\nto firefox-bin so it remains runnable without having to set\nLD_LIBRARY_PATH.\n\nI'm beginning to think this approach of building the logging\nmodule as its own standalone tier_base module is flawed, and\nneeds revisiting.  A previous version of this patch (and maybe\nthis version) worked on Windows.  But a jemalloc enabled build\nfor Windows fails.  It tries to build the logger (libeventlog)\nbefore libmozalloc, and the link fails when the build system\nlinks libeventlog statically against libmozalloc.  This fails\nbecause the CRT replacement involved in libmozalloc has not been\ncreated yet.\n\nThis might be get-roundable with more build system magic, but it seems\nto me to be adding fragility into a part of the system (the\nbuild-system/jemalloc intersection) which is already complex.\n\nPerhaps it would be better to scrap the tier_base module and put\nthe low level log support code in libxul.  This would have the\nfollowing advantages\n\n(1) no build system hacks required\n\n(2) the logger could use libc safely (see \"Implementation\n    summary\" in comment #12) and so we could discard the cut-down\n    copies of printf and ctime copies from NSPR\n\nand the following disadvantage\n\n(3) it wouldn't be callable from jemalloc: that would give xpcom\n    and jemalloc a circular dependency, and lead to deadlocking\n    as per comment #12.\n\n(3) is serious, because we really want to have mmaps /\nVirtualAllocs done by jemalloc to be shown in the log.\n\nThe only solution I can think of is to have jemalloc accumulate\nmmap/VirtualAlloc log entries in its own circular buffer, and\nperiodically pull those out into the main log buffer.  This\neffectively means polling jemalloc from xul.  Which is ungood,\nwould require driving it from a timer or the top level event\nloop, and would have ramifications w.r.t. sleepingness on mobile\ndevices.\n\nSuggestions, comments?  I'm kinda stuck with this now.", "bug_id": 662814, "tags": [], "time": "2011-07-26T15:22:14Z", "is_private": false, "creator": "jseward@acm.org", "count": 24, "id": 5613889, "attachment_id": 548467, "raw_text": "Here's a revised version of the patch which gets around the link\nfailure reported in comment #15.  It also adds a $$ORIGIN rpath entry\nto firefox-bin so it remains runnable without having to set\nLD_LIBRARY_PATH.\n\nI'm beginning to think this approach of building the logging\nmodule as its own standalone tier_base module is flawed, and\nneeds revisiting.  A previous version of this patch (and maybe\nthis version) worked on Windows.  But a jemalloc enabled build\nfor Windows fails.  It tries to build the logger (libeventlog)\nbefore libmozalloc, and the link fails when the build system\nlinks libeventlog statically against libmozalloc.  This fails\nbecause the CRT replacement involved in libmozalloc has not been\ncreated yet.\n\nThis might be get-roundable with more build system magic, but it seems\nto me to be adding fragility into a part of the system (the\nbuild-system/jemalloc intersection) which is already complex.\n\nPerhaps it would be better to scrap the tier_base module and put\nthe low level log support code in libxul.  This would have the\nfollowing advantages\n\n(1) no build system hacks required\n\n(2) the logger could use libc safely (see \"Implementation\n    summary\" in comment #12) and so we could discard the cut-down\n    copies of printf and ctime copies from NSPR\n\nand the following disadvantage\n\n(3) it wouldn't be callable from jemalloc: that would give xpcom\n    and jemalloc a circular dependency, and lead to deadlocking\n    as per comment #12.\n\n(3) is serious, because we really want to have mmaps /\nVirtualAllocs done by jemalloc to be shown in the log.\n\nThe only solution I can think of is to have jemalloc accumulate\nmmap/VirtualAlloc log entries in its own circular buffer, and\nperiodically pull those out into the main log buffer.  This\neffectively means polling jemalloc from xul.  Which is ungood,\nwould require driving it from a timer or the top level event\nloop, and would have ramifications w.r.t. sleepingness on mobile\ndevices.\n\nSuggestions, comments?  I'm kinda stuck with this now."}, {"attachment_id": null, "raw_text": "Did you try, as I mentioned on irc, to fold your log library with libjemalloc ?", "id": 5613937, "creator": "mh+mozilla@glandium.org", "is_private": false, "count": 25, "author": "mh+mozilla@glandium.org", "creation_time": "2011-07-26T15:39:29Z", "bug_id": 662814, "tags": [], "time": "2011-07-26T15:39:29Z", "text": "Did you try, as I mentioned on irc, to fold your log library with libjemalloc ?"}, {"count": 26, "creator": "mh+mozilla@glandium.org", "is_private": false, "bug_id": 662814, "time": "2011-07-27T13:19:23Z", "tags": [], "text": "So, with the constraints from this API, our build system and our various ways of linking things for the various platforms we target, I think the least worse thing to do would be to have a directory where we'd build a libmozutils library that:\n - includes jemalloc when jemalloc is enabled\n - includes the event log infrastructure from this bug\n - includes what currently is libmozutils on android when building for android\n - is a DSO on win/osx and a static lib on linux (i.e., is whatever jemalloc currently is)\n\nI think doing so as a separate patch (i.e. without the event log infrastructure) first would be better.\nAn advantage of this approach is that whenever we'll need to add something else that has the same kind of constraints, it will be much easier to handle.", "author": "mh+mozilla@glandium.org", "creation_time": "2011-07-27T13:19:23Z", "raw_text": "So, with the constraints from this API, our build system and our various ways of linking things for the various platforms we target, I think the least worse thing to do would be to have a directory where we'd build a libmozutils library that:\n - includes jemalloc when jemalloc is enabled\n - includes the event log infrastructure from this bug\n - includes what currently is libmozutils on android when building for android\n - is a DSO on win/osx and a static lib on linux (i.e., is whatever jemalloc currently is)\n\nI think doing so as a separate patch (i.e. without the event log infrastructure) first would be better.\nAn advantage of this approach is that whenever we'll need to add something else that has the same kind of constraints, it will be much easier to handle.", "attachment_id": null, "id": 5616422}, {"id": 5616425, "attachment_id": null, "raw_text": "(In reply to comment #23)\n> Another thing -- you should probably have at least one test for\n> about:eventlog.  Not sure what it would do, maybe just check that it\n> actually contains some sane-looking output.  You can use\n> toolkit/components/aboutmemory/tests/chrome/test_aboutmemory.xul as a\n> starting point.\n\nIs it possible to use js-ctypes to open the event log library, call a function to add some output to the log, then load about:eventlog to check that it was added?", "author": "ted@mielczarek.org", "creation_time": "2011-07-27T13:22:14Z", "time": "2011-07-27T13:22:14Z", "tags": [], "bug_id": 662814, "text": "(In reply to comment #23)\n> Another thing -- you should probably have at least one test for\n> about:eventlog.  Not sure what it would do, maybe just check that it\n> actually contains some sane-looking output.  You can use\n> toolkit/components/aboutmemory/tests/chrome/test_aboutmemory.xul as a\n> starting point.\n\nIs it possible to use js-ctypes to open the event log library, call a function to add some output to the log, then load about:eventlog to check that it was added?", "creator": "ted@mielczarek.org", "is_private": false, "count": 27}, {"text": "Please backout http://hg.mozilla.org/projects/build-system/rev/8e01bc314326 when landing this.", "tags": [], "time": "2011-09-01T12:20:44Z", "creation_time": "2011-09-01T12:20:44Z", "author": "mh+mozilla@glandium.org", "is_private": false, "creator": "mh+mozilla@glandium.org", "id": 5693321, "raw_text": "Please backout http://hg.mozilla.org/projects/build-system/rev/8e01bc314326 when landing this.", "attachment_id": null, "bug_id": 662814, "count": 28}, {"author": "finalbx@hotmail.com", "creation_time": "2011-09-30T23:08:54Z", "time": "2011-09-30T23:08:54Z", "tags": [], "text": "I think this looks great! I do have one concern though, what would be the privacy implications of this?  Perhaps a \"clear event log\" could be added to the clear history menu?\n\nI would hate it for a less experienced user to go into their history, delete various websites and feel secure while all along his/her activity has been diligently recorded in the log.\n\nThis seems like it could cause some trouble. Perhaps an automatic deletion of entries more then a few days old?  What do you guys think?", "creator": "finalbx@hotmail.com", "is_private": false, "id": 5751030, "attachment_id": null, "raw_text": "I think this looks great! I do have one concern though, what would be the privacy implications of this?  Perhaps a \"clear event log\" could be added to the clear history menu?\n\nI would hate it for a less experienced user to go into their history, delete various websites and feel secure while all along his/her activity has been diligently recorded in the log.\n\nThis seems like it could cause some trouble. Perhaps an automatic deletion of entries more then a few days old?  What do you guys think?", "bug_id": 662814, "count": 29}, {"attachment_id": null, "raw_text": "Julian, now that bug 677501 has landed do you think you'll be able to look at this again?  It sounds like it might solve your linking/dependency woes.", "id": 5804857, "is_private": false, "creator": "n.nethercote@gmail.com", "count": 30, "creation_time": "2011-10-25T23:54:34Z", "author": "n.nethercote@gmail.com", "text": "Julian, now that bug 677501 has landed do you think you'll be able to look at this again?  It sounds like it might solve your linking/dependency woes.", "time": "2011-10-25T23:54:34Z", "tags": [], "bug_id": 662814}, {"attachment_id": null, "raw_text": "We agreed today that this wouldn't help that much with the memory problems we've had lately, so we're downgrading to a MemShrink:P2.", "id": 5880342, "is_private": false, "creator": "n.nethercote@gmail.com", "count": 31, "creation_time": "2011-11-29T22:46:27Z", "author": "n.nethercote@gmail.com", "text": "We agreed today that this wouldn't help that much with the memory problems we've had lately, so we're downgrading to a MemShrink:P2.", "time": "2011-11-29T22:46:27Z", "tags": [], "bug_id": 662814}, {"attachment_id": null, "raw_text": "This would be cool to have, but it doesn't seem to be blocking any particular MemShrinky thing, so I'm removing the tag.", "id": 6231971, "is_private": false, "creator": "continuation@gmail.com", "count": 32, "creation_time": "2012-04-18T00:40:15Z", "author": "continuation@gmail.com", "text": "This would be cool to have, but it doesn't seem to be blocking any particular MemShrinky thing, so I'm removing the tag.", "bug_id": 662814, "tags": [], "time": "2012-04-18T00:40:15Z"}]}}, "comments": {}}