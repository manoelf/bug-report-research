{"bugs": {"1644085": {"comments": [{"creator": "flo.sammueller@gmail.com", "creation_time": "2020-06-08T09:33:20Z", "count": 0, "tags": [], "time": "2020-06-08T09:33:20Z", "text": "User Agent: Mozilla/5.0 (X11; Linux x86_64; rv:77.0) Gecko/20100101 Firefox/77.0\n\nSteps to reproduce:\n\nIn GnuPG, it is possible to set up groups which serve as aliases for multiple public keys [1]. Those groups can be specified e.g. in a configuration file (~/gnupg/gpg.conf). If the recipient is a group alias, GnuPG automatically encrypts a message to all keys that are assigned to this group.\nThis is especially useful for multiparty encryption to mailing lists (or rather distribution lists, since all recipients have to be known by the sender).\n\nEnigmail supports multiparty encryption in two ways:\n* It can handle groups defined by GnuPG directly (since it merely calls gpg routines).\n* It provides \"Per-Recipient Rules\". This makes the assignment of multiple keys to one email address possible. [2]\n\nIt currently looks like this functionality will be completely lost in future versions of Thunderbird, and that there will be no adequate workaround. For users of groups (GnuPG) or Per-Recipient Rules (Enigmail), this will be a serious regression.\n\nTherefore, this bug should propose the implementation of such a feature.\n\n[1] https://www.gnupg.org/documentation/manuals/gnupg/GPG-Key-related-Options.html#GPG-Key-related-Options\n[2] https://enigmail.net/index.php/en/user-manual/configuration#Per-Recipient_Rules", "raw_text": "User Agent: Mozilla/5.0 (X11; Linux x86_64; rv:77.0) Gecko/20100101 Firefox/77.0\n\nSteps to reproduce:\n\nIn GnuPG, it is possible to set up groups which serve as aliases for multiple public keys [1]. Those groups can be specified e.g. in a configuration file (~/gnupg/gpg.conf). If the recipient is a group alias, GnuPG automatically encrypts a message to all keys that are assigned to this group.\nThis is especially useful for multiparty encryption to mailing lists (or rather distribution lists, since all recipients have to be known by the sender).\n\nEnigmail supports multiparty encryption in two ways:\n* It can handle groups defined by GnuPG directly (since it merely calls gpg routines).\n* It provides \"Per-Recipient Rules\". This makes the assignment of multiple keys to one email address possible. [2]\n\nIt currently looks like this functionality will be completely lost in future versions of Thunderbird, and that there will be no adequate workaround. For users of groups (GnuPG) or Per-Recipient Rules (Enigmail), this will be a serious regression.\n\nTherefore, this bug should propose the implementation of such a feature.\n\n[1] https://www.gnupg.org/documentation/manuals/gnupg/GPG-Key-related-Options.html#GPG-Key-related-Options\n[2] https://enigmail.net/index.php/en/user-manual/configuration#Per-Recipient_Rules", "is_private": false, "author": "flo.sammueller@gmail.com", "id": 14869020, "bug_id": 1644085, "attachment_id": null}, {"raw_text": "This patch is a proof of concept for the implementation of this feature. It looks for a file `gpg.conf` located in the TB-profile directory and parses the specified groups. Allowed syntax:\n\n    group <alias>=recipient1 recipient2 ...\n\nor\n\n    group <alias>=recipient1\n    group <alias>=recipient2\n    ...\n\nwhere `alias` and `recipientX` are email addresses.\nIf the recipient of a new message is a group alias, the corresponding keys are automatically added.", "text": "Created attachment 9154874\ngroups.patch\n\nThis patch is a proof of concept for the implementation of this feature. It looks for a file `gpg.conf` located in the TB-profile directory and parses the specified groups. Allowed syntax:\n\n    group <alias>=recipient1 recipient2 ...\n\nor\n\n    group <alias>=recipient1\n    group <alias>=recipient2\n    ...\n\nwhere `alias` and `recipientX` are email addresses.\nIf the recipient of a new message is a group alias, the corresponding keys are automatically added.", "is_private": false, "author": "flo.sammueller@gmail.com", "id": 14869033, "bug_id": 1644085, "attachment_id": 9154874, "creator": "flo.sammueller@gmail.com", "creation_time": "2020-06-08T09:44:44Z", "count": 1, "tags": [], "time": "2020-06-08T09:44:44Z"}, {"attachment_id": null, "bug_id": 1644085, "id": 14869166, "author": "kaie@kuix.de", "raw_text": "Thanks Florian. It might be useful to have a mechanism like this, although I'd like to work on it at a later time, after more core functionality has been completed. We might consider to require a pref to be enabled for this to work, and we'll have to decide if this should be indicated in the UI.", "text": "Thanks Florian. It might be useful to have a mechanism like this, although I'd like to work on it at a later time, after more core functionality has been completed. We might consider to require a pref to be enabled for this to work, and we'll have to decide if this should be indicated in the UI.", "is_private": false, "time": "2020-06-08T11:21:26Z", "count": 2, "tags": [], "creator": "kaie@kuix.de", "creation_time": "2020-06-08T11:21:26Z"}, {"is_private": false, "raw_text": "I agree that the core functionality is the main concern at this time and that this feature could be toggled by a pref. For future reference, concerning the UI, it might be helpful to look into the source code of Enigmail since some of its dialogs can already handle the display of groups.", "text": "I agree that the core functionality is the main concern at this time and that this feature could be toggled by a pref. For future reference, concerning the UI, it might be helpful to look into the source code of Enigmail since some of its dialogs can already handle the display of groups.", "author": "flo.sammueller@gmail.com", "id": 14869307, "bug_id": 1644085, "attachment_id": null, "creation_time": "2020-06-08T12:36:22Z", "creator": "flo.sammueller@gmail.com", "tags": [], "count": 3, "time": "2020-06-08T12:36:22Z"}, {"attachment_id": 9169818, "bug_id": 1644085, "author": "flo.sammueller@gmail.com", "id": 14987516, "is_private": false, "raw_text": "Since Magnus wanted to review this patch, I'm providing an updated version that resolves merge conflicts with the current code base (2020-08-13) and that is correctly generated with `hg export`.", "text": "Created attachment 9169818\nmultiparty_encryption.patch\n\nSince Magnus wanted to review this patch, I'm providing an updated version that resolves merge conflicts with the current code base (2020-08-13) and that is correctly generated with `hg export`.", "time": "2020-08-13T11:00:57Z", "tags": [], "count": 4, "creation_time": "2020-08-13T11:00:57Z", "creator": "flo.sammueller@gmail.com"}, {"tags": [], "count": 5, "time": "2020-08-14T12:44:48Z", "creation_time": "2020-08-14T12:44:48Z", "creator": "mkmelin+mozilla@iki.fi", "bug_id": 1644085, "attachment_id": 9169818, "is_private": false, "text": "Comment on attachment 9169818\nmultiparty_encryption.patch\n\nReview of attachment 9169818:\n-----------------------------------------------------------------\n\nThanks for the patch. Some general comments below.\n\nI think it's not great that the usefulness of the feature require syncing a file into the Thunderbird directory. \nPerhaps it would be useful to define a scheme by which such configuration is loaded, so that it's applicable also across domains. Or is there something out there already?\n\nE.g. an header with a URL to the configuration file? `X-OpenPGP-Multiparty-Config: https://example.com/openpgp-multiparty.json; Last-Modified=\"Fri, 14 Aug 2020 07:28:00 GMT\"`\nIt would only be allowed to host for @example.com lists on example.com\nThunderbird could then fetch this as needed.\n\n::: mail/extensions/openpgp/content/modules/encryption.jsm\n@@ +127,5 @@\n> +    // Expand groups if necessary\n> +    var toExpanded = [];\n> +    for (let k = 0; k < result.to.length; k++) {\n> +      var group = EnigmailKeyRing.expandGroup(result.to[k]);\n> +      group.forEach(recipient => toExpanded.push(recipient));\n\nThis could use spread (...) so\n\ntoExpanded.push(... EnigmailKeyRing.expandGroup(result.to[k]));\n\n::: mail/extensions/openpgp/content/modules/keyRing.jsm\n@@ +1269,5 @@\n> +    // Do group expansion\n> +    var addressesExpanded = [];\n> +    for (let k = 0; k < addresses.length; k++) {\n> +      var group = EnigmailKeyRing.expandGroup(addresses[k]);\n> +      group.forEach(recipient => addressesExpanded.push(recipient));\n\nsame here, could use spread\n\n@@ +1406,5 @@\n> +    loadGroupsFromConfig();\n> +    return gGroups;\n> +  },\n> +\n> +  expandGroup(alias) {\n\nI think this should check it never overrides an email we do have a normal key for.\n\n@@ +1412,5 @@\n> +    let aliasFmt = \"<\" + alias + \">\";\n> +    let recipients = [];\n> +    if (!groups[aliasFmt]) { // is not a group\n> +      return [alias];\n> +    } else {\n\nnit: no else after return please\n\n@@ +1413,5 @@\n> +    let recipients = [];\n> +    if (!groups[aliasFmt]) { // is not a group\n> +      return [alias];\n> +    } else {\n> +      groups[aliasFmt].forEach(recipient => {\n\nnit: forEach is not as efficient as for .. of,  so for these cases prefer something like\n\nfor (let recipient of groups[aliasFmt]) {\n\n@@ +1556,5 @@\n>      EnigmailLog.ERROR(\"keyRing.jsm: loadKeyList: exception: \" + ex.toString());\n>    }\n>  }\n>  \n> +function loadGroupsFromConfig() {\n\nI think it would be better to have a JSON based configuration file, like\n\n```\n[\n  { \n    name: \"Group 1\",\n    alias: \"list@example.com\",\n    recipients: [\n      \"foo@example.com\",\n      \"bar@example.com\"\n    ]\n  },\n  { \n    name: \"Group 2\",\n    alias: \"list2@example.com\",\n    recipients: [\n      \"a@example.com\",\n      \"b@example.com\"\n    ]\n  }\n]\n```", "raw_text": "Review of attachment 9169818:\n-----------------------------------------------------------------\n\nThanks for the patch. Some general comments below.\n\nI think it's not great that the usefulness of the feature require syncing a file into the Thunderbird directory. \nPerhaps it would be useful to define a scheme by which such configuration is loaded, so that it's applicable also across domains. Or is there something out there already?\n\nE.g. an header with a URL to the configuration file? `X-OpenPGP-Multiparty-Config: https://example.com/openpgp-multiparty.json; Last-Modified=\"Fri, 14 Aug 2020 07:28:00 GMT\"`\nIt would only be allowed to host for @example.com lists on example.com\nThunderbird could then fetch this as needed.\n\n::: mail/extensions/openpgp/content/modules/encryption.jsm\n@@ +127,5 @@\n> +    // Expand groups if necessary\n> +    var toExpanded = [];\n> +    for (let k = 0; k < result.to.length; k++) {\n> +      var group = EnigmailKeyRing.expandGroup(result.to[k]);\n> +      group.forEach(recipient => toExpanded.push(recipient));\n\nThis could use spread (...) so\n\ntoExpanded.push(... EnigmailKeyRing.expandGroup(result.to[k]));\n\n::: mail/extensions/openpgp/content/modules/keyRing.jsm\n@@ +1269,5 @@\n> +    // Do group expansion\n> +    var addressesExpanded = [];\n> +    for (let k = 0; k < addresses.length; k++) {\n> +      var group = EnigmailKeyRing.expandGroup(addresses[k]);\n> +      group.forEach(recipient => addressesExpanded.push(recipient));\n\nsame here, could use spread\n\n@@ +1406,5 @@\n> +    loadGroupsFromConfig();\n> +    return gGroups;\n> +  },\n> +\n> +  expandGroup(alias) {\n\nI think this should check it never overrides an email we do have a normal key for.\n\n@@ +1412,5 @@\n> +    let aliasFmt = \"<\" + alias + \">\";\n> +    let recipients = [];\n> +    if (!groups[aliasFmt]) { // is not a group\n> +      return [alias];\n> +    } else {\n\nnit: no else after return please\n\n@@ +1413,5 @@\n> +    let recipients = [];\n> +    if (!groups[aliasFmt]) { // is not a group\n> +      return [alias];\n> +    } else {\n> +      groups[aliasFmt].forEach(recipient => {\n\nnit: forEach is not as efficient as for .. of,  so for these cases prefer something like\n\nfor (let recipient of groups[aliasFmt]) {\n\n@@ +1556,5 @@\n>      EnigmailLog.ERROR(\"keyRing.jsm: loadKeyList: exception: \" + ex.toString());\n>    }\n>  }\n>  \n> +function loadGroupsFromConfig() {\n\nI think it would be better to have a JSON based configuration file, like\n\n```\n[\n  { \n    name: \"Group 1\",\n    alias: \"list@example.com\",\n    recipients: [\n      \"foo@example.com\",\n      \"bar@example.com\"\n    ]\n  },\n  { \n    name: \"Group 2\",\n    alias: \"list2@example.com\",\n    recipients: [\n      \"a@example.com\",\n      \"b@example.com\"\n    ]\n  }\n]\n```", "author": "mkmelin+mozilla@iki.fi", "id": 14989047}, {"tags": [], "bug_id": 1644085, "count": 6, "time": "2020-08-15T11:59:46Z", "attachment_id": null, "is_private": false, "raw_text": "Magnus, thank you for your thorough review. There are many helpful remarks that I will incorporate in a follow-up patch soon.\n\n> I think it would be better to have a JSON based configuration file\n\nI agree with your proposal to use a more native structure such as JSON. We are leaving GnuPG behind anyways, so we should take the opportunity to adapt the config to our needs. Maybe Kai can also contribute his opinion to this question.\n\n> I think it's not great that the usefulness of the feature require syncing a file into the Thunderbird directory. \nPerhaps it would be useful to define a scheme by which such configuration is loaded, so that it's applicable also across domains. Or is there something out there already?\n\nI am not sure I understand this part completely. While it certainly is inconvenient to have the user copy a file into the TB profile directory, I still think the config for this feature should be persisted in there. As we cannot add UI for the proper import of such a config at the moment, this would be something to consider in the future.\nIn particular, the user should always be aware of the set of keys that are used for encryption before actually sending the message. A mechanism that fetches this config on-the-fly from the web could be considered a potential security/trust issue as it obscures the process of key selection. (Apart from that, one should not have to rely on online resources since they could be unavailable, hidden behind a VPN, etc.)\n\n> It would only be allowed to host for @example.com lists on example.com\n\nConsidering that the user should be aware of all keys to which the message is encrypted, this restriction seems too strict. Also I am sure that there are many current use cases that would not be possible with this limitation. As a counter example, Enigmail's per-recipient rules do not impose such a constraint on the user. In my opinion, it is important to also reflect those situations and to not leave people with this kind of setup behind.", "text": "Magnus, thank you for your thorough review. There are many helpful remarks that I will incorporate in a follow-up patch soon.\n\n> I think it would be better to have a JSON based configuration file\n\nI agree with your proposal to use a more native structure such as JSON. We are leaving GnuPG behind anyways, so we should take the opportunity to adapt the config to our needs. Maybe Kai can also contribute his opinion to this question.\n\n> I think it's not great that the usefulness of the feature require syncing a file into the Thunderbird directory. \nPerhaps it would be useful to define a scheme by which such configuration is loaded, so that it's applicable also across domains. Or is there something out there already?\n\nI am not sure I understand this part completely. While it certainly is inconvenient to have the user copy a file into the TB profile directory, I still think the config for this feature should be persisted in there. As we cannot add UI for the proper import of such a config at the moment, this would be something to consider in the future.\nIn particular, the user should always be aware of the set of keys that are used for encryption before actually sending the message. A mechanism that fetches this config on-the-fly from the web could be considered a potential security/trust issue as it obscures the process of key selection. (Apart from that, one should not have to rely on online resources since they could be unavailable, hidden behind a VPN, etc.)\n\n> It would only be allowed to host for @example.com lists on example.com\n\nConsidering that the user should be aware of all keys to which the message is encrypted, this restriction seems too strict. Also I am sure that there are many current use cases that would not be possible with this limitation. As a counter example, Enigmail's per-recipient rules do not impose such a constraint on the user. In my opinion, it is important to also reflect those situations and to not leave people with this kind of setup behind.", "id": 14990231, "author": "flo.sammueller@gmail.com", "creation_time": "2020-08-15T11:59:46Z", "creator": "flo.sammueller@gmail.com"}, {"creation_time": "2020-08-15T13:21:41Z", "creator": "patrick@enigmail.net", "tags": [], "count": 7, "time": "2020-08-15T13:21:41Z", "is_private": false, "raw_text": "(In reply to Magnus Melin [:mkmelin] from comment #5)\n> I think it would be better to have a JSON based configuration file, like\n> \n> ```\n> [\n>   { \n>     name: \"Group 1\",\n>     alias: list@example.com,\n>     recipients: [\n>       \"foo@example.com\",\n>       \"bar@example.com\"\n>     ]\n>   },\n>   { \n>     name: \"Group 2\",\n>     alias: list2@example.com,\n>     recipients: [\n>       \"a@example.com\",\n>       \"b@example.com\"\n>     ]\n>   }\n> ]\n> ```\n\nI would actually suggest to replace the part `recipients` with `keys`. I.e. instead of `recipients: [ \"email@somewhere.mail\" ]`  we would have `keys: [ \"0x1234567890ABCDEF\" ]`\n\nThis would remove the need to check if we already have a valid key for a recipient, and it would be a lot more explicit which key to use.", "text": "(In reply to Magnus Melin [:mkmelin] from comment #5)\n> I think it would be better to have a JSON based configuration file, like\n> \n> ```\n> [\n>   { \n>     name: \"Group 1\",\n>     alias: list@example.com,\n>     recipients: [\n>       \"foo@example.com\",\n>       \"bar@example.com\"\n>     ]\n>   },\n>   { \n>     name: \"Group 2\",\n>     alias: list2@example.com,\n>     recipients: [\n>       \"a@example.com\",\n>       \"b@example.com\"\n>     ]\n>   }\n> ]\n> ```\n\nI would actually suggest to replace the part `recipients` with `keys`. I.e. instead of `recipients: [ \"email@somewhere.mail\" ]`  we would have `keys: [ \"0x1234567890ABCDEF\" ]`\n\nThis would remove the need to check if we already have a valid key for a recipient, and it would be a lot more explicit which key to use.", "author": "patrick@enigmail.net", "id": 14990254, "bug_id": 1644085, "attachment_id": null}, {"is_private": false, "raw_text": "", "text": "*** Bug 1659337 has been marked as a duplicate of this bug. ***", "id": 14990767, "author": "chriechers@netscape.net", "bug_id": 1644085, "attachment_id": null, "creation_time": "2020-08-16T12:03:22Z", "creator": "chriechers@netscape.net", "tags": [], "count": 8, "time": "2020-08-16T12:03:22Z"}, {"time": "2020-08-19T08:52:24Z", "tags": [], "count": 9, "creation_time": "2020-08-19T08:52:24Z", "creator": "flo.sammueller@gmail.com", "attachment_id": 9170892, "bug_id": 1644085, "id": 14995901, "author": "flo.sammueller@gmail.com", "is_private": false, "text": "Created attachment 9170892\nmultiparty_encryption_with_keyid-v1.1.patch\n\nThis patch is a reworked version of the first one and takes the suggestions of Magnus and Patrick into account. Now, the file `multiparty-encryption.json` in the TB profile directory can be used in the format\n```\n{\n    \"group1@example.com\":\n    [\n        \"recipient1@somewhere.com\",\n        \"0x1234567890ABCDEF\",\n        \"another.recipient@example.com\"\n    ],\n    \"group2@domain.de\": [...],\n    ...\n}\n```\nOne can specify both mail addresses *or* key IDs to select the keys that shall be used for encryption (some high level functions had to be refactored to also handle key IDs). The current UI still works, and in \"View Security Info\" I have made an attempt to show both the group aliases and the corresponding keys so that it is clear how the stated keys were selected.\nI still reckon that a config file which has to be put manually into the TB profile directory is not something that is feasible in the long term. Nevertheless, we can set the foundation for further work and provide a first solution for those users who currently rely on this feature. Like Kai suggested earlier, until we have a more user friendly solution, this mechanism could also be toggled by a hidden pref.", "raw_text": "This patch is a reworked version of the first one and takes the suggestions of Magnus and Patrick into account. Now, the file `multiparty-encryption.json` in the TB profile directory can be used in the format\n```\n{\n    \"group1@example.com\":\n    [\n        \"recipient1@somewhere.com\",\n        \"0x1234567890ABCDEF\",\n        \"another.recipient@example.com\"\n    ],\n    \"group2@domain.de\": [...],\n    ...\n}\n```\nOne can specify both mail addresses *or* key IDs to select the keys that shall be used for encryption (some high level functions had to be refactored to also handle key IDs). The current UI still works, and in \"View Security Info\" I have made an attempt to show both the group aliases and the corresponding keys so that it is clear how the stated keys were selected.\nI still reckon that a config file which has to be put manually into the TB profile directory is not something that is feasible in the long term. Nevertheless, we can set the foundation for further work and provide a first solution for those users who currently rely on this feature. Like Kai suggested earlier, until we have a more user friendly solution, this mechanism could also be toggled by a hidden pref."}, {"author": "mkmelin+mozilla@iki.fi", "id": 15018640, "is_private": false, "raw_text": "", "text": "*** Bug 1662402 has been marked as a duplicate of this bug. ***", "attachment_id": null, "bug_id": 1644085, "creation_time": "2020-09-02T13:29:57Z", "creator": "mkmelin+mozilla@iki.fi", "time": "2020-09-02T13:29:57Z", "tags": [], "count": 10}, {"creator": "kaie@kuix.de", "creation_time": "2020-09-15T15:31:45Z", "count": 11, "tags": [], "time": "2020-09-15T15:31:45Z", "raw_text": "Florian has explained to me that this is only to be considered as a \"proof of concept\" patch, but it isn't the complete solution, for example. We shouldn't spend time on reviewing a known-to-be-imcomplete patch, while not yet knowing which additional parts are necessary.", "text": "Comment on attachment 9170892\nmultiparty_encryption_with_keyid-v1.1.patch\n\nFlorian has explained to me that this is only to be considered as a \"proof of concept\" patch, but it isn't the complete solution, for example. We shouldn't spend time on reviewing a known-to-be-imcomplete patch, while not yet knowing which additional parts are necessary.", "is_private": false, "author": "kaie@kuix.de", "id": 15037179, "bug_id": 1644085, "attachment_id": 9170892}, {"author": "kaie@kuix.de", "creation_time": "2020-09-15T16:06:09Z", "id": 15037265, "creator": "kaie@kuix.de", "is_private": false, "text": "In addition to the mentioned (a) \"definition of aliases, that expand to a list of expanded keys\" (e.g. using the file formats mentioned in the previous comments), additional related enhancements have been requested:\n\n(b) the ability to automatically import keys from an external source. This could either be done in an indepenednt way, by reading keys from files, where filenames could potentially be based on key IDs. Alternatively, they could be read from an existing GnuPG keyring on the same system, but that would only work on systems that have been set up with GnuPG software accordingly, and we'd have to implement that using the GPGME API.\n\n(c) We'd need to decide if keys that are autmatically used (because of rule definitions) should also be automatically treated as \"accepted\".\n\n(d) If the answer to (c) is yes, then we'd have to extend our visual presentation of key trust. I think the \"override\" of trust would be limited to the contexts in which the automatic rules apply, e.g. when composing an email to a defined alias. When viewing the security details of an email while composing, the UI would have to show the special trust. Currently we show status like \"Accepted (unverified)\". We'd have to introduce a new status label, e.g. \"Rule based automatic acceptance\".\n\n(e) The individual keys of members of a group alias might be expired or revoked. It has been suggested to treat such failures appropriately. In order to communicate the detailed reason to the user, we'd have to extend the user interface of the \"view security info\" in composer to show the expanded list of recipients, and display the appropriate status for each of them. We'd also probably have to show information to which alias an entry is related to (e.g. if the user composes an email to two aliases).\n\n(f) We'll have to decide how to handle failures. E.g. if an alias has 10 members, and only key isn't usable, what should be done? Send anyway and exclude that member? Or prevent the user from sending at all? Or even offer the user a choice and invent new UI?", "raw_text": "In addition to the mentioned (a) \"definition of aliases, that expand to a list of expanded keys\" (e.g. using the file formats mentioned in the previous comments), additional related enhancements have been requested:\n\n(b) the ability to automatically import keys from an external source. This could either be done in an indepenednt way, by reading keys from files, where filenames could potentially be based on key IDs. Alternatively, they could be read from an existing GnuPG keyring on the same system, but that would only work on systems that have been set up with GnuPG software accordingly, and we'd have to implement that using the GPGME API.\n\n(c) We'd need to decide if keys that are autmatically used (because of rule definitions) should also be automatically treated as \"accepted\".\n\n(d) If the answer to (c) is yes, then we'd have to extend our visual presentation of key trust. I think the \"override\" of trust would be limited to the contexts in which the automatic rules apply, e.g. when composing an email to a defined alias. When viewing the security details of an email while composing, the UI would have to show the special trust. Currently we show status like \"Accepted (unverified)\". We'd have to introduce a new status label, e.g. \"Rule based automatic acceptance\".\n\n(e) The individual keys of members of a group alias might be expired or revoked. It has been suggested to treat such failures appropriately. In order to communicate the detailed reason to the user, we'd have to extend the user interface of the \"view security info\" in composer to show the expanded list of recipients, and display the appropriate status for each of them. We'd also probably have to show information to which alias an entry is related to (e.g. if the user composes an email to two aliases).\n\n(f) We'll have to decide how to handle failures. E.g. if an alias has 10 members, and only key isn't usable, what should be done? Send anyway and exclude that member? Or prevent the user from sending at all? Or even offer the user a choice and invent new UI?", "time": "2020-09-15T16:06:09Z", "attachment_id": null, "tags": [], "bug_id": 1644085, "count": 12}, {"attachment_id": null, "bug_id": 1644085, "author": "kaie@kuix.de", "id": 15037302, "is_private": false, "text": "I'm not currently opposing this feature, but I'd like to point out that the complete handling of this feature will require application behavior that could be perceived as confusing by Thunderbird users.\n\nThe idea to automatically trust keys doesn't align well with our current model, which requires the user to explicitly decide which keys they accept.\n\nIn my opinion, a solution at the mailing list manager level would be much easier to understand, and it could already be used today.\n\nFor example, the schleuder.org remailer allows you to setup a dedicated machine that defines the members of mailing lists. A single key is used for the list, so every person sending email only needs to have the list's public key. No synching of information to the user's computer is required.\n\nYou could argue there is a disadvantage, because the administrator of the re-mailer computer (running the Schleuder software) can intercept and read all messages. However, I'd like to note that with the mechanism described in this bug, the administrator has similar powers. If the administrator of the key and rules synchronization mechanism has malicious intentions, they can add another member to group definitions, which will also receive the messages. A difference is, with the group definition rules, you will have an audit trail, because the rogue addition of another group member could be discovered.", "raw_text": "I'm not currently opposing this feature, but I'd like to point out that the complete handling of this feature will require application behavior that could be perceived as confusing by Thunderbird users.\n\nThe idea to automatically trust keys doesn't align well with our current model, which requires the user to explicitly decide which keys they accept.\n\nIn my opinion, a solution at the mailing list manager level would be much easier to understand, and it could already be used today.\n\nFor example, the schleuder.org remailer allows you to setup a dedicated machine that defines the members of mailing lists. A single key is used for the list, so every person sending email only needs to have the list's public key. No synching of information to the user's computer is required.\n\nYou could argue there is a disadvantage, because the administrator of the re-mailer computer (running the Schleuder software) can intercept and read all messages. However, I'd like to note that with the mechanism described in this bug, the administrator has similar powers. If the administrator of the key and rules synchronization mechanism has malicious intentions, they can add another member to group definitions, which will also receive the messages. A difference is, with the group definition rules, you will have an audit trail, because the rogue addition of another group member could be discovered.", "time": "2020-09-15T16:16:32Z", "tags": [], "count": 13, "creation_time": "2020-09-15T16:16:32Z", "creator": "kaie@kuix.de"}, {"attachment_id": null, "bug_id": 1644085, "author": "kaie@kuix.de", "id": 15037370, "is_private": false, "raw_text": "Florian, could you use a local instance of schleuder.org, instead of your key and rule distribution setup?", "text": "Florian, could you use a local instance of schleuder.org, instead of your key and rule distribution setup?", "time": "2020-09-15T16:44:48Z", "tags": [], "count": 14, "creation_time": "2020-09-15T16:44:48Z", "creator": "kaie@kuix.de"}, {"count": 15, "tags": [], "time": "2020-09-16T08:57:16Z", "creator": "flo.sammueller@gmail.com", "creation_time": "2020-09-16T08:57:16Z", "bug_id": 1644085, "attachment_id": null, "text": "Kai, thank you for your feedback.\n\nI would like to make clear that the further enhancements I discussed with you personally, and that you listed in comment 12, are by no means requirements for this feature. Many of those aspect do not even work in Enigmail/GnuPG currently (e.g. automatic key import from keyserver or WKD for groups) or are merely an issue of convenience (e.g. automatically selecting/disabling key trust). At this time and in this bug, only an alternative mode for key selection that deviates from the currently implemented \"one recipient mail address <-> one public key\" bijection is proposed, because it is a general solution to the problems described here, in the related bugs 1659141, 1663406, 1661463 and in the Thunderbird e2ee Topicbox channel, and prevents a serious regression from TB68+Enigmail+GnuPG. The patch that I called a proof of concept due to the intentionally minimalistic implementation works just fine with the already existing UI and is not incomplete in terms of the aforementioned expected functionality.\n\nIn comment 13, you propose the usage of services like schleuder.org, which reencrypt mail to the actual recipients of mailing lists. While this can be easily used and is certainly better than no encryption at all, *it is not end-to-end encryption*. With schleuder.org, it is impossible to know the keys that will be used for encryption before sending the message. In case of an attack on this service, nobody would even be able to notice immediately. This is fundamentally different to a key selection mechanism that is based on information persisted on the local machine of the user. You say that in our setup, a similar attack vector exists[*]. This is opposed by the fact that anyone with rogue group definitions would be able to notice if they just check them. Not to mention that our setup is probably special per se, and that there are many users that maintain their gpg.conf manually anyway.\n\nIn comment 14, do you mean having each member run an instance of schleuder.org on their local machine? I would have to look into that, but I guess that means still having to maintain a GnuPG keyring and gpg.conf additionally to the TB-internal keyring.\n\n[*] At our organization, each member is expected to run a script that syncs a gpg.conf with the current group definitions from one of our servers to the clients machine. Kai argued that this central server could also be compromised such that each member receives malicious group definitions.", "raw_text": "Kai, thank you for your feedback.\n\nI would like to make clear that the further enhancements I discussed with you personally, and that you listed in comment 12, are by no means requirements for this feature. Many of those aspect do not even work in Enigmail/GnuPG currently (e.g. automatic key import from keyserver or WKD for groups) or are merely an issue of convenience (e.g. automatically selecting/disabling key trust). At this time and in this bug, only an alternative mode for key selection that deviates from the currently implemented \"one recipient mail address <-> one public key\" bijection is proposed, because it is a general solution to the problems described here, in the related bugs 1659141, 1663406, 1661463 and in the Thunderbird e2ee Topicbox channel, and prevents a serious regression from TB68+Enigmail+GnuPG. The patch that I called a proof of concept due to the intentionally minimalistic implementation works just fine with the already existing UI and is not incomplete in terms of the aforementioned expected functionality.\n\nIn comment 13, you propose the usage of services like schleuder.org, which reencrypt mail to the actual recipients of mailing lists. While this can be easily used and is certainly better than no encryption at all, *it is not end-to-end encryption*. With schleuder.org, it is impossible to know the keys that will be used for encryption before sending the message. In case of an attack on this service, nobody would even be able to notice immediately. This is fundamentally different to a key selection mechanism that is based on information persisted on the local machine of the user. You say that in our setup, a similar attack vector exists[*]. This is opposed by the fact that anyone with rogue group definitions would be able to notice if they just check them. Not to mention that our setup is probably special per se, and that there are many users that maintain their gpg.conf manually anyway.\n\nIn comment 14, do you mean having each member run an instance of schleuder.org on their local machine? I would have to look into that, but I guess that means still having to maintain a GnuPG keyring and gpg.conf additionally to the TB-internal keyring.\n\n[*] At our organization, each member is expected to run a script that syncs a gpg.conf with the current group definitions from one of our servers to the clients machine. Kai argued that this central server could also be compromised such that each member receives malicious group definitions.", "is_private": false, "author": "flo.sammueller@gmail.com", "id": 15038504}, {"creator": "nuesken@bit.uni-bonn.de", "creation_time": "2020-10-09T08:42:04Z", "count": 16, "tags": [], "time": "2020-10-09T08:42:04Z", "text": "Let me emphasize that this is URGENT!\n\nIt must be possible to use encryption automatically whenever possible. With encryption turned on by default it must still be simple to switch to non-encrypted in case there are not enough keys. This was ok with enigmail, but with tb 78 I have to click away the warning, find the disabling thing in button or menu and then invoke sending again --- that is too much if I have to do that for each and every email! \n\nIt must also be possible to disable \"Attaching the public key\". (https://bugzilla.mozilla.org/show_bug.cgi?id=1654950)\n\nHow shall people be convinced to use encryption if they have to go through these complications? They will (as even I do now!) turn off automatic encryption.", "raw_text": "Let me emphasize that this is URGENT!\n\nIt must be possible to use encryption automatically whenever possible. With encryption turned on by default it must still be simple to switch to non-encrypted in case there are not enough keys. This was ok with enigmail, but with tb 78 I have to click away the warning, find the disabling thing in button or menu and then invoke sending again --- that is too much if I have to do that for each and every email! \n\nIt must also be possible to disable \"Attaching the public key\". (https://bugzilla.mozilla.org/show_bug.cgi?id=1654950)\n\nHow shall people be convinced to use encryption if they have to go through these complications? They will (as even I do now!) turn off automatic encryption.", "is_private": false, "id": 15076064, "author": "nuesken@bit.uni-bonn.de", "bug_id": 1644085, "attachment_id": null}, {"is_private": false, "text": "very sad....  We need to find another mail encryption solution now :-/ Enigmail was useful, but with the new integrated solution are so much bugs and missing important features like this, that is not possible to use this in a business or enterprise environment anymore.", "raw_text": "very sad....  We need to find another mail encryption solution now :-/ Enigmail was useful, but with the new integrated solution are so much bugs and missing important features like this, that is not possible to use this in a business or enterprise environment anymore.", "author": "tf-mail@mailbox.org", "id": 15076137, "bug_id": 1644085, "attachment_id": null, "creation_time": "2020-10-09T09:29:20Z", "creator": "tf-mail@mailbox.org", "tags": [], "count": 17, "time": "2020-10-09T09:29:20Z"}, {"attachment_id": null, "bug_id": 1644085, "author": "christian.riess@fau.de", "id": 15081478, "text": "Unfortunately I can not assess the quality of Florian Samm\u00fcller's proposed patch myself (comment 11), but its ability to bipass the bijection of email address and key is a critical requirement in my professional communication. Without it I am forced to use another email client.\n\nHence, I would be very grateful if this patch could be considered very soon.", "raw_text": "Unfortunately I can not assess the quality of Florian Samm\u00fcller's proposed patch myself (comment 11), but its ability to bipass the bijection of email address and key is a critical requirement in my professional communication. Without it I am forced to use another email client.\n\nHence, I would be very grateful if this patch could be considered very soon.", "is_private": false, "time": "2020-10-13T08:06:34Z", "count": 18, "tags": [], "creator": "christian.riess@fau.de", "creation_time": "2020-10-13T08:06:34Z"}, {"creator": "dnk089@riseup.net", "creation_time": "2020-10-13T13:28:21Z", "time": "2020-10-13T13:28:21Z", "count": 19, "tags": [], "author": "dnk089@riseup.net", "id": 15081887, "raw_text": "Please add options to select recipient(s), be it by IDs or by mail addresses. I can confirm that me and a lot of collegues and friends would not use Schleuder.org as mailing list encryption tool for the reasons mentioned (security risks and complexity). \n\nI am using TB with Enigmail for more then 10 years now and I love them. I am pretty sure that a lot of people would have to search for other mail clients, if you vote for not adding these features to TB 78.x. At least it should be possible to get this features with an Add-on (don't know if this would make things even more complicated) .", "text": "Please add options to select recipient(s), be it by IDs or by mail addresses. I can confirm that me and a lot of collegues and friends would not use Schleuder.org as mailing list encryption tool for the reasons mentioned (security risks and complexity). \n\nI am using TB with Enigmail for more then 10 years now and I love them. I am pretty sure that a lot of people would have to search for other mail clients, if you vote for not adding these features to TB 78.x. At least it should be possible to get this features with an Add-on (don't know if this would make things even more complicated) .", "is_private": false, "attachment_id": null, "bug_id": 1644085}, {"bug_id": 1644085, "attachment_id": null, "is_private": false, "raw_text": "I can confirm that the patch (comment 11) works as intended for the case that there is no bijection of email address and key. Can we look into importing it into the source tree? The benefit would be substantial.", "text": "I can confirm that the patch (comment 11) works as intended for the case that there is no bijection of email address and key. Can we look into importing it into the source tree? The benefit would be substantial.", "author": "christian.riess@fau.de", "id": 15085126, "tags": [], "count": 20, "time": "2020-10-15T11:05:09Z", "creation_time": "2020-10-15T11:05:09Z", "creator": "christian.riess@fau.de"}, {"author": "boris@cation.de", "id": 15088018, "is_private": false, "text": "First thanks to all who make TB a reliable mailclient. Once I discovered the perfect GPG-integration with Enigmail, it's my first and only choice since almost I can remember.\nThe feature \"recipient rules\" made mail encryption almost seamless and with that it was possible to convince a lot of people using secure mail.\n\nNow that there aren't \"recipient rules\" any longer, it's hard to keep the motivation high. With TB 78 I feel like we are loosing a master argument for practicing a good thing.\n\nSo I hope this comment is read as an underline of the importance of this feature! Thank you.", "raw_text": "First thanks to all who make TB a reliable mailclient. Once I discovered the perfect GPG-integration with Enigmail, it's my first and only choice since almost I can remember.\nThe feature \"recipient rules\" made mail encryption almost seamless and with that it was possible to convince a lot of people using secure mail.\n\nNow that there aren't \"recipient rules\" any longer, it's hard to keep the motivation high. With TB 78 I feel like we are loosing a master argument for practicing a good thing.\n\nSo I hope this comment is read as an underline of the importance of this feature! Thank you.", "attachment_id": null, "bug_id": 1644085, "creation_time": "2020-10-18T15:02:42Z", "creator": "boris@cation.de", "time": "2020-10-18T15:02:42Z", "tags": [], "count": 21}, {"time": "2020-10-22T17:56:23Z", "attachment_id": null, "bug_id": 1644085, "count": 22, "tags": [], "creator": "stefan.buehlmann@joesecurity.org", "creation_time": "2020-10-22T17:56:23Z", "id": 15095661, "author": "stefan.buehlmann@joesecurity.org", "raw_text": "Per recipient rules are absolutely essential for our day to day emails to email alias like office@yourcompany.com. I cannot understand why TB blocks Enigmail and replaces it with something with _ major _ features missing. The only way forward is to downgrade to 68. What a development!", "text": "Per recipient rules are absolutely essential for our day to day emails to email alias like office@yourcompany.com. I cannot understand why TB blocks Enigmail and replaces it with something with _ major _ features missing. The only way forward is to downgrade to 68. What a development!", "is_private": false}, {"time": "2020-10-22T19:26:13Z", "count": 23, "tags": [], "creator": "micaroni@gmail.com", "creation_time": "2020-10-22T19:26:13Z", "attachment_id": null, "bug_id": 1644085, "author": "micaroni@gmail.com", "id": 15095870, "text": "Hi!  Please, implement this. This feature is fundamental to my daily usage. Thank you!", "raw_text": "Hi!  Please, implement this. This feature is fundamental to my daily usage. Thank you!", "is_private": false}, {"id": 15095882, "author": "micaroni@gmail.com", "is_private": false, "text": "(In reply to Michael N\u00fcsken from comment #16)\n> Let me emphasize that this is URGENT!\n> \n> It must be possible to use encryption automatically whenever possible. With encryption turned on by default it must still be simple to switch to non-encrypted in case there are not enough keys. This was ok with enigmail, but with tb 78 I have to click away the warning, find the disabling thing in button or menu and then invoke sending again --- that is too much if I have to do that for each and every email! \n> \n> It must also be possible to disable \"Attaching the public key\". (https://bugzilla.mozilla.org/show_bug.cgi?id=1654950)\n> \n> How shall people be convinced to use encryption if they have to go through these complications? They will (as even I do now!) turn off automatic encryption.\n\nAgreed. :+1:", "raw_text": "(In reply to Michael N\u00fcsken from comment #16)\n> Let me emphasize that this is URGENT!\n> \n> It must be possible to use encryption automatically whenever possible. With encryption turned on by default it must still be simple to switch to non-encrypted in case there are not enough keys. This was ok with enigmail, but with tb 78 I have to click away the warning, find the disabling thing in button or menu and then invoke sending again --- that is too much if I have to do that for each and every email! \n> \n> It must also be possible to disable \"Attaching the public key\". (https://bugzilla.mozilla.org/show_bug.cgi?id=1654950)\n> \n> How shall people be convinced to use encryption if they have to go through these complications? They will (as even I do now!) turn off automatic encryption.\n\nAgreed. :+1:", "attachment_id": null, "bug_id": 1644085, "creation_time": "2020-10-22T19:32:45Z", "creator": "micaroni@gmail.com", "time": "2020-10-22T19:32:45Z", "tags": [], "count": 24}, {"author": "norbert.marwan@gmail.com", "id": 15097910, "is_private": false, "raw_text": "Dear developers, \n\nplease include per recipient rules as quickly as possible. The update of Thunderbird has broken secured workflows, because Enigmail is not working and the included GPG solution is not valid replacement.\n\nThanks!\nN", "text": "Dear developers, \n\nplease include per recipient rules as quickly as possible. The update of Thunderbird has broken secured workflows, because Enigmail is not working and the included GPG solution is not valid replacement.\n\nThanks!\nN", "attachment_id": null, "bug_id": 1644085, "creation_time": "2020-10-23T22:54:07Z", "creator": "norbert.marwan@gmail.com", "time": "2020-10-23T22:54:07Z", "tags": [], "count": 25}, {"tags": [], "count": 26, "time": "2020-10-29T13:23:37Z", "creation_time": "2020-10-29T13:23:37Z", "creator": "vv01f@fsfe.org", "bug_id": 1644085, "attachment_id": null, "is_private": false, "raw_text": "I migrated back to TB 68 for the lack of recipient rules. Enigmail did it quite fine, so please try to advance on that basis.", "text": "I migrated back to TB 68 for the lack of recipient rules. Enigmail did it quite fine, so please try to advance on that basis.", "id": 15106347, "author": "vv01f@fsfe.org"}, {"creation_time": "2020-10-29T13:33:57Z", "creator": "aph@redhat.com", "time": "2020-10-29T13:33:57Z", "tags": [], "count": 27, "author": "aph@redhat.com", "id": 15106363, "is_private": false, "raw_text": "(In reply to vv01f from comment #26)\n> I migrated back to TB 68 for the lack of recipient rules. Enigmail did it quite fine, so please try to advance on that basis.\n\nAh, interesting. I didn't know that was possible. I thought that the update from 67 to 68 changed the .thunderbird directory in a way that wasn't backwards compatible.", "text": "(In reply to vv01f from comment #26)\n> I migrated back to TB 68 for the lack of recipient rules. Enigmail did it quite fine, so please try to advance on that basis.\n\nAh, interesting. I didn't know that was possible. I thought that the update from 67 to 68 changed the .thunderbird directory in a way that wasn't backwards compatible.", "attachment_id": null, "bug_id": 1644085}, {"is_private": false, "text": "(In reply to Andrew Haley from comment #27)\n> Ah, interesting. I didn't know that was possible. I thought that the update from 67 to 68 changed the .thunderbird directory in a way that wasn't backwards compatible.\n\nideed that is possible if you take backups seriously. so for having that option you may need to keep a copy of your profile for older versions intact. in this case the lacking adoption of TB 78 also acts as a warning not to upgrade in a hurry. In debian [pinning](https://manpages.debian.org/buster/apt/apt_preferences.5.en.html) also is a great help to keep the version that works in place. The [download package](https://www.thunderbird.net/en-US/thunderbird/all/) extracted is sufficient for testing aside the distributions packaging manager while still waiting for features in a aproduct to be available (again).", "raw_text": "(In reply to Andrew Haley from comment #27)\n> Ah, interesting. I didn't know that was possible. I thought that the update from 67 to 68 changed the .thunderbird directory in a way that wasn't backwards compatible.\n\nideed that is possible if you take backups seriously. so for having that option you may need to keep a copy of your profile for older versions intact. in this case the lacking adoption of TB 78 also acts as a warning not to upgrade in a hurry. In debian [pinning](https://manpages.debian.org/buster/apt/apt_preferences.5.en.html) also is a great help to keep the version that works in place. The [download package](https://www.thunderbird.net/en-US/thunderbird/all/) extracted is sufficient for testing aside the distributions packaging manager while still waiting for features in a aproduct to be available (again).", "creation_time": "2020-10-29T14:37:21Z", "id": 15106451, "author": "vv01f@fsfe.org", "creator": "vv01f@fsfe.org", "tags": [], "count": 28, "bug_id": 1644085, "time": "2020-10-29T14:37:21Z", "attachment_id": null}, {"time": "2020-10-29T22:54:32Z", "count": 29, "tags": [], "creator": "micaroni@gmail.com", "creation_time": "2020-10-29T22:54:32Z", "attachment_id": null, "bug_id": 1644085, "author": "micaroni@gmail.com", "id": 15107443, "raw_text": "This update ruined my life. I can no longer send secure emails on company lists, I can no longer send email to people with an email different from the one registered in the key. It sucks!", "text": "This update ruined my life. I can no longer send secure emails on company lists, I can no longer send email to people with an email different from the one registered in the key. It sucks!", "is_private": false}, {"author": "u674074@disabled.tld", "id": 15128886, "text": "This really needs to be resolved in a hopefully timely manner. All my contacts are in companies that are using general keys and not personal ones. I am not able to communicate securely with them. At least not via Thunderbird.", "raw_text": "This really needs to be resolved in a hopefully timely manner. All my contacts are in companies that are using general keys and not personal ones. I am not able to communicate securely with them. At least not via Thunderbird.", "is_private": false, "attachment_id": null, "bug_id": 1644085, "creator": "u674074@disabled.tld", "creation_time": "2020-11-12T21:27:07Z", "time": "2020-11-12T21:27:07Z", "count": 30, "tags": []}, {"attachment_id": null, "bug_id": 1644085, "id": 15130832, "author": "github@x07907x.de", "is_private": false, "raw_text": "(In reply to Florian Samm\u00fcller from comment #9)\n\nI think the patch provided by Florian will do the job - if a howto is added to the Thunderbird FAQ (like the advanced setup for Smartcards). A \"simple\" (JSON) configuration file where the respective aliases to be used with key id xyz are provided. \n\nA lof of companies e.g in the finance sector decrypt the messages at a central gateway and then forward them internally to the respective recipient. As far as I remember PGP keys can handle aliases but that would require you to renew / update your keys everytime someone joins / leaves your organization.", "text": "(In reply to Florian Samm\u00fcller from comment #9)\n\nI think the patch provided by Florian will do the job - if a howto is added to the Thunderbird FAQ (like the advanced setup for Smartcards). A \"simple\" (JSON) configuration file where the respective aliases to be used with key id xyz are provided. \n\nA lof of companies e.g in the finance sector decrypt the messages at a central gateway and then forward them internally to the respective recipient. As far as I remember PGP keys can handle aliases but that would require you to renew / update your keys everytime someone joins / leaves your organization.", "time": "2020-11-14T01:15:13Z", "tags": [], "count": 31, "creation_time": "2020-11-14T01:15:13Z", "creator": "github@x07907x.de"}, {"creation_time": "2020-11-24T08:59:57Z", "creator": "kaie@kuix.de", "tags": [], "count": 32, "time": "2020-11-24T08:59:57Z", "is_private": false, "raw_text": "Sorry for not having made progress on this bug earlier, but we have a lot of work around OpenPGP.\n\nConsidering earlier comments and after more brainstorming, I consider the following approach, which is designed as a minimal, initial step, because we're limited in what changes can be reasonably made on the stable 78.x branch. An additional constraint is that the changes on 78.x shouldn't be in contradiction with future enhancements, so it's necessary to be careful with the initial step.\n\nBased on the feedback received, users clearly want an aliasing solution, to map an email address (or domain) to keys (one or many).\nWe should use a solution that solves both this bug (one-to-many aliases) and bug 1663406 (one-to-one aliases and many-to-one aliases).\n\nAll alias rules are based on an email address added in the email composer. Each alias address could resolve to one or multiple keys.\n\nI'd like the alias rules to be explicit. I'd like to avoid having to do multiple levels of rule resolution. I suggest that each rule maps to key fingerprints (not IDs, not other email addresses).\n\nI think that eventually we need to have user interface to manage alias rules. But for 78.x we cannot add it. However, we can try to introduce a storage format that is extensible, and can work with an initial set of definitions, and can later be reused and expanded. Using a JSON file seems appropriate.\n\nI'd like the configuration file to be disabled by default, and instead require the user to perform a configuration to enable the external config file with alias rules. We had said it's best if external synchronization solutions don't need to find the Thunderbird profile directory. I suggest that we introduce a new preference, e.g. mail.openpgp.alias_rules_file which can either be a full path, or a simple simple filename. If it's a simple filename (no directory separator characters), then we attempt to load the file from the profile directory. To enable aliases, the user must set the pref once to define which file will be used. (In a future TB version this could be set using UI.)\n\nAliases should be used for sending encrypted messages, only. They should have no effect on the signature status of received messages.\n\nToday, we require that keys are accepted. From today's user interface it might not be obvious - but the acceptance configuration is in fact based on pairs of key and email address. That means, even if a key is accepted, we restrict its use to the list of email addresses that have been presented to the user, at the time the user made the acceptance decision.\n\nThat means our usual acceptance rules don't work for aliases. I suggest that we ignore the usual acceptance settings for aliases. The fact that an alias was defined can be considered as accepting the key for the alias.\n\nWith one exception: If a key has been marked as rejected, what should we do? I suggest to forbid the use of rejected keys for aliases, too.\n\nI suggest that an alias definition overrides the usual direct key lookup. If an alias is defined, we always use it, and we don't attempt to perform a direct lookup by email address.\n\nAn alias rule can go wrong. One or multiple of the defined keys might be missing or expired or revoked, or not have a usable encryption key etc. I suggest that each alias rule needs an optional parameter \"ignore_failures\". If false, any missing or unusable key will result in a failure and the email not sent. If true, missing or unusable keys will be silently ignored, and only usable keys will be used.\n\nWe need at least a minimal amount of feedback when the user opens the \"message security info\" (clicks the security button) in the composer window. Currently, for each recipient address, we show a status like \"ok\" or \"no key available\".\n\nI suggest that we show \"ok\" if the alias definition is fine (no failures or set to ignore failures). I found we have an existing string in the codebase that we could reuse for all failure scenarios: \"Alias problem\" (found in the ldap code).\n\nIn this status dialog, I suggest that for each email address that is detected as having an alias configuration, we simply disable button \"manage keys for selected recipient\" for the initial implementation step. We can later develop a better UI for that.\n\nThere is the additional angle of \"how do I get the keys\" that are defined in alias rules. I'd like to keep that as a separate task for later, outside the scope of this bug.\n\nPlease give feedback if this initial approach could be sufficient for your urgent needs, or if something important is missing with this approach.", "text": "Sorry for not having made progress on this bug earlier, but we have a lot of work around OpenPGP.\n\nConsidering earlier comments and after more brainstorming, I consider the following approach, which is designed as a minimal, initial step, because we're limited in what changes can be reasonably made on the stable 78.x branch. An additional constraint is that the changes on 78.x shouldn't be in contradiction with future enhancements, so it's necessary to be careful with the initial step.\n\nBased on the feedback received, users clearly want an aliasing solution, to map an email address (or domain) to keys (one or many).\nWe should use a solution that solves both this bug (one-to-many aliases) and bug 1663406 (one-to-one aliases and many-to-one aliases).\n\nAll alias rules are based on an email address added in the email composer. Each alias address could resolve to one or multiple keys.\n\nI'd like the alias rules to be explicit. I'd like to avoid having to do multiple levels of rule resolution. I suggest that each rule maps to key fingerprints (not IDs, not other email addresses).\n\nI think that eventually we need to have user interface to manage alias rules. But for 78.x we cannot add it. However, we can try to introduce a storage format that is extensible, and can work with an initial set of definitions, and can later be reused and expanded. Using a JSON file seems appropriate.\n\nI'd like the configuration file to be disabled by default, and instead require the user to perform a configuration to enable the external config file with alias rules. We had said it's best if external synchronization solutions don't need to find the Thunderbird profile directory. I suggest that we introduce a new preference, e.g. mail.openpgp.alias_rules_file which can either be a full path, or a simple simple filename. If it's a simple filename (no directory separator characters), then we attempt to load the file from the profile directory. To enable aliases, the user must set the pref once to define which file will be used. (In a future TB version this could be set using UI.)\n\nAliases should be used for sending encrypted messages, only. They should have no effect on the signature status of received messages.\n\nToday, we require that keys are accepted. From today's user interface it might not be obvious - but the acceptance configuration is in fact based on pairs of key and email address. That means, even if a key is accepted, we restrict its use to the list of email addresses that have been presented to the user, at the time the user made the acceptance decision.\n\nThat means our usual acceptance rules don't work for aliases. I suggest that we ignore the usual acceptance settings for aliases. The fact that an alias was defined can be considered as accepting the key for the alias.\n\nWith one exception: If a key has been marked as rejected, what should we do? I suggest to forbid the use of rejected keys for aliases, too.\n\nI suggest that an alias definition overrides the usual direct key lookup. If an alias is defined, we always use it, and we don't attempt to perform a direct lookup by email address.\n\nAn alias rule can go wrong. One or multiple of the defined keys might be missing or expired or revoked, or not have a usable encryption key etc. I suggest that each alias rule needs an optional parameter \"ignore_failures\". If false, any missing or unusable key will result in a failure and the email not sent. If true, missing or unusable keys will be silently ignored, and only usable keys will be used.\n\nWe need at least a minimal amount of feedback when the user opens the \"message security info\" (clicks the security button) in the composer window. Currently, for each recipient address, we show a status like \"ok\" or \"no key available\".\n\nI suggest that we show \"ok\" if the alias definition is fine (no failures or set to ignore failures). I found we have an existing string in the codebase that we could reuse for all failure scenarios: \"Alias problem\" (found in the ldap code).\n\nIn this status dialog, I suggest that for each email address that is detected as having an alias configuration, we simply disable button \"manage keys for selected recipient\" for the initial implementation step. We can later develop a better UI for that.\n\nThere is the additional angle of \"how do I get the keys\" that are defined in alias rules. I'd like to keep that as a separate task for later, outside the scope of this bug.\n\nPlease give feedback if this initial approach could be sufficient for your urgent needs, or if something important is missing with this approach.", "author": "kaie@kuix.de", "id": 15145828, "bug_id": 1644085, "attachment_id": null}, {"is_private": false, "text": "(In reply to Kai Engert (:KaiE:) from comment #32)\n> With one exception: If a key has been marked as rejected, what should we do? I suggest to forbid the use of rejected keys for aliases, too.\n\nIf a key is rejected for any email address, we'd not allow its use for any alias.\n\n\n> I suggest that an alias definition overrides the usual direct key lookup. If an alias is defined, we always use it, and we don't attempt to perform a direct lookup by email address.\n\nHowever, I think we can allow that an email address matches both a domain alias rule, and an individual email address rule, and we'd use the list of keys from both rules.", "raw_text": "(In reply to Kai Engert (:KaiE:) from comment #32)\n> With one exception: If a key has been marked as rejected, what should we do? I suggest to forbid the use of rejected keys for aliases, too.\n\nIf a key is rejected for any email address, we'd not allow its use for any alias.\n\n\n> I suggest that an alias definition overrides the usual direct key lookup. If an alias is defined, we always use it, and we don't attempt to perform a direct lookup by email address.\n\nHowever, I think we can allow that an email address matches both a domain alias rule, and an individual email address rule, and we'd use the list of keys from both rules.", "id": 15145831, "author": "kaie@kuix.de", "bug_id": 1644085, "attachment_id": null, "creation_time": "2020-11-24T09:08:07Z", "creator": "kaie@kuix.de", "tags": [], "count": 33, "time": "2020-11-24T09:08:07Z"}, {"time": "2020-11-24T11:16:42Z", "attachment_id": null, "count": 34, "bug_id": 1644085, "tags": [], "creator": "dnk089@riseup.net", "creation_time": "2020-11-24T11:16:42Z", "author": "dnk089@riseup.net", "id": 15145966, "text": "(In reply to Kai Engert (:KaiE:) from comment #32)\n> Based on the feedback received, users clearly want an aliasing solution, to map an email address (or domain) to keys (one or many).\n> We should use a solution that solves both this bug (one-to-many aliases) and bug 1663406 (one-to-one aliases and many-to-one aliases).\n\nGreat. Thanks for working on this! \n\n> I'd like the alias rules to be explicit. I'd like to avoid having to do multiple levels of rule resolution. I suggest that each rule maps to key fingerprints (not IDs, not other email addresses).\n\nIs there a reason why key fingerprints would allow a better rule resolution than key ids? I fear that forcing users to find and select fingerprint blocks will not help to encourage them to use the alias tool.\n\n> I think that eventually we need to have user interface to manage alias rules. But for 78.x we cannot add it. However, we can try to introduce a storage format that is extensible, and can work with an initial set of definitions, and can later be reused and expanded. Using a JSON file seems appropriate.\n\nAgree, but I would still suggest to work on UI with high priority in order not to loose too many users.\n\n> I'd like the configuration file to be disabled by default, and instead require the user to perform a configuration to enable the external config file with alias rules. We had said it's best if external synchronization solutions don't need to find the Thunderbird profile directory. I suggest that we introduce a new preference, e.g. mail.openpgp.alias_rules_file which can either be a full path, or a simple simple filename. If it's a simple filename (no directory separator characters), then we attempt to load the file from the profile directory. To enable aliases, the user must set the pref once to define which file will be used. (In a future TB version this could be set using UI.)\n\nI can live with that, as long as you provide a clear description of how to write the alias JSON file and where to store it. \n\n> An alias rule can go wrong. One or multiple of the defined keys might be missing or expired or revoked, or not have a usable encryption key etc. I suggest that each alias rule needs an optional parameter \"ignore_failures\". If false, any missing or unusable key will result in a failure and the email not sent. If true, missing or unusable keys will be silently ignored, and only usable keys will be used.\n\nYes. I would suggest to set ignore_failures=0 as default and document it properly.\n\n> We need at least a minimal amount of feedback when the user opens the \"message security info\" (clicks the security button) in the composer window. Currently, for each recipient address, we show a status like \"ok\" or \"no key available\".\n> \n> I suggest that we show \"ok\" if the alias definition is fine (no failures or set to ignore failures). I found we have an existing string in the codebase that we could reuse for all failure scenarios: \"Alias problem\" (found in the ldap code).\n\nGreat. \n\n> In this status dialog, I suggest that for each email address that is detected as having an alias configuration, we simply disable button \"manage keys for selected recipient\" for the initial implementation step. We can later develop a better UI for that.\n\nAgree.\n\n> There is the additional angle of \"how do I get the keys\" that are defined in alias rules. I'd like to keep that as a separate task for later, outside the scope of this bug.\n\nYes, if user can work with the alias file they should be able to take care about getting the neccessary keys, too.\n\n\nOnce more, thanks a lot for taking care about this feature request!", "raw_text": "(In reply to Kai Engert (:KaiE:) from comment #32)\n> Based on the feedback received, users clearly want an aliasing solution, to map an email address (or domain) to keys (one or many).\n> We should use a solution that solves both this bug (one-to-many aliases) and bug 1663406 (one-to-one aliases and many-to-one aliases).\n\nGreat. Thanks for working on this! \n\n> I'd like the alias rules to be explicit. I'd like to avoid having to do multiple levels of rule resolution. I suggest that each rule maps to key fingerprints (not IDs, not other email addresses).\n\nIs there a reason why key fingerprints would allow a better rule resolution than key ids? I fear that forcing users to find and select fingerprint blocks will not help to encourage them to use the alias tool.\n\n> I think that eventually we need to have user interface to manage alias rules. But for 78.x we cannot add it. However, we can try to introduce a storage format that is extensible, and can work with an initial set of definitions, and can later be reused and expanded. Using a JSON file seems appropriate.\n\nAgree, but I would still suggest to work on UI with high priority in order not to loose too many users.\n\n> I'd like the configuration file to be disabled by default, and instead require the user to perform a configuration to enable the external config file with alias rules. We had said it's best if external synchronization solutions don't need to find the Thunderbird profile directory. I suggest that we introduce a new preference, e.g. mail.openpgp.alias_rules_file which can either be a full path, or a simple simple filename. If it's a simple filename (no directory separator characters), then we attempt to load the file from the profile directory. To enable aliases, the user must set the pref once to define which file will be used. (In a future TB version this could be set using UI.)\n\nI can live with that, as long as you provide a clear description of how to write the alias JSON file and where to store it. \n\n> An alias rule can go wrong. One or multiple of the defined keys might be missing or expired or revoked, or not have a usable encryption key etc. I suggest that each alias rule needs an optional parameter \"ignore_failures\". If false, any missing or unusable key will result in a failure and the email not sent. If true, missing or unusable keys will be silently ignored, and only usable keys will be used.\n\nYes. I would suggest to set ignore_failures=0 as default and document it properly.\n\n> We need at least a minimal amount of feedback when the user opens the \"message security info\" (clicks the security button) in the composer window. Currently, for each recipient address, we show a status like \"ok\" or \"no key available\".\n> \n> I suggest that we show \"ok\" if the alias definition is fine (no failures or set to ignore failures). I found we have an existing string in the codebase that we could reuse for all failure scenarios: \"Alias problem\" (found in the ldap code).\n\nGreat. \n\n> In this status dialog, I suggest that for each email address that is detected as having an alias configuration, we simply disable button \"manage keys for selected recipient\" for the initial implementation step. We can later develop a better UI for that.\n\nAgree.\n\n> There is the additional angle of \"how do I get the keys\" that are defined in alias rules. I'd like to keep that as a separate task for later, outside the scope of this bug.\n\nYes, if user can work with the alias file they should be able to take care about getting the neccessary keys, too.\n\n\nOnce more, thanks a lot for taking care about this feature request!", "is_private": false}, {"creation_time": "2020-11-24T11:24:58Z", "creator": "kaie@kuix.de", "tags": [], "count": 35, "time": "2020-11-24T11:24:58Z", "is_private": false, "raw_text": "(In reply to dnk089 from comment #34)\n> Is there a reason why key fingerprints would allow a better rule resolution than key ids? I fear that forcing users to find and select fingerprint blocks will not help to encourage them to use the alias tool.\n\nIn the past, 8-hex-digits key IDs were common, but are now considered insecure, because of potential collisions.\nI want to avoid that the same will happen with 16-hex-digits, and that we must consider existing configuration files as ambiguous.\nUsing full fingerprints can avoid that.", "text": "(In reply to dnk089 from comment #34)\n> Is there a reason why key fingerprints would allow a better rule resolution than key ids? I fear that forcing users to find and select fingerprint blocks will not help to encourage them to use the alias tool.\n\nIn the past, 8-hex-digits key IDs were common, but are now considered insecure, because of potential collisions.\nI want to avoid that the same will happen with 16-hex-digits, and that we must consider existing configuration files as ambiguous.\nUsing full fingerprints can avoid that.", "id": 15145980, "author": "kaie@kuix.de", "bug_id": 1644085, "attachment_id": null}, {"is_private": false, "raw_text": "(In reply to dnk089 from comment #34)\n> I can live with that, as long as you provide a clear description of how to write the alias JSON file and where to store it. \n\nSee the attachment.", "text": "Created attachment 9189596\ntb78-openpgp-alias-sample.json definition and example\n\n(In reply to dnk089 from comment #34)\n> I can live with that, as long as you provide a clear description of how to write the alias JSON file and where to store it. \n\nSee the attachment.", "creation_time": "2020-11-24T11:53:25Z", "author": "kaie@kuix.de", "id": 15146001, "creator": "kaie@kuix.de", "tags": [], "count": 36, "bug_id": 1644085, "time": "2020-11-24T11:53:25Z", "attachment_id": 9189596}, {"attachment_id": null, "bug_id": 1644085, "author": "norbert.marwan@gmail.com", "id": 15146016, "is_private": false, "raw_text": "Hi Kai,\n\nI do not understand why you try to reinvent the wheel. There is already a way to define aliases or to have configuration for pgp/gpg encryption. On a unix box it is the .gnupg/gpg.conf. Aliases or groups can be easily defined there. Another \"new\" standard is not really userfriendly, as it would mean to maintain two configurations (when using another email client parallel to TB). \n\nNext, Enigmail had already included a quite good key management and configuration for per-recipient-rules. Most of your questions might have been answered already by the developers of Enigmail. \n\nPlease consider that  users might be confused when migrating from Enigmail to the new TB-encryption tool when it behaves completely different and unexpected. This includes also the per-recipient-rules.\n\nNevertheless, thank you very much for considering this \"bug\" and attempting to solve it.\n\nBest wishes\nNorbert", "text": "Hi Kai,\n\nI do not understand why you try to reinvent the wheel. There is already a way to define aliases or to have configuration for pgp/gpg encryption. On a unix box it is the .gnupg/gpg.conf. Aliases or groups can be easily defined there. Another \"new\" standard is not really userfriendly, as it would mean to maintain two configurations (when using another email client parallel to TB). \n\nNext, Enigmail had already included a quite good key management and configuration for per-recipient-rules. Most of your questions might have been answered already by the developers of Enigmail. \n\nPlease consider that  users might be confused when migrating from Enigmail to the new TB-encryption tool when it behaves completely different and unexpected. This includes also the per-recipient-rules.\n\nNevertheless, thank you very much for considering this \"bug\" and attempting to solve it.\n\nBest wishes\nNorbert", "time": "2020-11-24T12:12:38Z", "tags": [], "count": 37, "creation_time": "2020-11-24T12:12:38Z", "creator": "norbert.marwan@gmail.com"}, {"creation_time": "2020-11-24T12:19:27Z", "creator": "github@x07907x.de", "time": "2020-11-24T12:19:27Z", "tags": [], "count": 38, "author": "github@x07907x.de", "id": 15146046, "is_private": false, "raw_text": "Hey Kai,\n\nthx for working on this issue. In general I can work and live with the resolution you described. Howver I agree with dnk089 that this should be moved to UI in the not too far future. \n\n(In reply to Kai Engert (:KaiE:) from comment #32)\n\n> Aliases should be used for sending encrypted messages, only. They should have no effect on the signature status of received messages.\n\nJust to make sure that I understood your resolution completely...what happens when I receive an encrypted message from abc@abc.com that was encrypted using companykey@abc.com? Will I be able to both read (decrypt) the message and reply to it by using abc@abc.com as recipient but the companykey@abc.com (as configured in the JSON)?\n\n>We need at least a minimal amount of feedback when the user opens the \"message security info\" (clicks the security button) in the composer >window. Currently, for each recipient address, we show a status like \"ok\" or \"no key available\".\n\nHow about \"ok - alias used\"? That would at least show the user that something happened outside the normal proceedings (and that the user configured aliases and may have forgot about it in the meantime).\n\n\nThx :-)", "text": "Hey Kai,\n\nthx for working on this issue. In general I can work and live with the resolution you described. Howver I agree with dnk089 that this should be moved to UI in the not too far future. \n\n(In reply to Kai Engert (:KaiE:) from comment #32)\n\n> Aliases should be used for sending encrypted messages, only. They should have no effect on the signature status of received messages.\n\nJust to make sure that I understood your resolution completely...what happens when I receive an encrypted message from abc@abc.com that was encrypted using companykey@abc.com? Will I be able to both read (decrypt) the message and reply to it by using abc@abc.com as recipient but the companykey@abc.com (as configured in the JSON)?\n\n>We need at least a minimal amount of feedback when the user opens the \"message security info\" (clicks the security button) in the composer >window. Currently, for each recipient address, we show a status like \"ok\" or \"no key available\".\n\nHow about \"ok - alias used\"? That would at least show the user that something happened outside the normal proceedings (and that the user configured aliases and may have forgot about it in the meantime).\n\n\nThx :-)", "attachment_id": null, "bug_id": 1644085}, {"count": 39, "bug_id": 1644085, "tags": [], "time": "2020-11-24T13:53:34Z", "attachment_id": null, "text": "(In reply to Pucicu from comment #37)\n> I do not understand why you try to reinvent the wheel. There is already a way to define aliases or to have configuration for pgp/gpg encryption. On a unix box it is the .gnupg/gpg.conf. Aliases or groups can be easily defined there. Another \"new\" standard is not really userfriendly, as it would mean to maintain two configurations (when using another email client parallel to TB). \n\n.gnupg/gpg.conf is a private configuration file of the GnuPG software. The GnuPG developers could decide to change their format at any time (and use a migration logic between versions), as it has been done with keyring files in the past. Thunderbird would be required to follow all changes made between GnuPG version, have its own parser for reading the file, and users would experience a broken configuration, if using a newer GnuPG with a Thunderbird version that hasn't been updated to read the new file yet.\n\nAnd the needs of Alias definitions aren't limited to reading. Assuming Thunderbird will get user interface for managing alias definitions, Thunderbird will need to store updated definitions. Your suggestion would require Thunderbird to change the GnuPG configuration files. That might break GnuPG, if Thunderbird does something that isn't expected by a corresponding GnuPG version. Also, we'd risk corruption if gnupg and Thunderbird attempts to modify the files in the future. Furthermore, Thunderbird might need to store attributes that GnuPG doesn't offer.\n\nIn my opinion, because of these reasons, Thunderbird shouldn't try to reuse configuration files that are defined and owned by other software.", "raw_text": "(In reply to Pucicu from comment #37)\n> I do not understand why you try to reinvent the wheel. There is already a way to define aliases or to have configuration for pgp/gpg encryption. On a unix box it is the .gnupg/gpg.conf. Aliases or groups can be easily defined there. Another \"new\" standard is not really userfriendly, as it would mean to maintain two configurations (when using another email client parallel to TB). \n\n.gnupg/gpg.conf is a private configuration file of the GnuPG software. The GnuPG developers could decide to change their format at any time (and use a migration logic between versions), as it has been done with keyring files in the past. Thunderbird would be required to follow all changes made between GnuPG version, have its own parser for reading the file, and users would experience a broken configuration, if using a newer GnuPG with a Thunderbird version that hasn't been updated to read the new file yet.\n\nAnd the needs of Alias definitions aren't limited to reading. Assuming Thunderbird will get user interface for managing alias definitions, Thunderbird will need to store updated definitions. Your suggestion would require Thunderbird to change the GnuPG configuration files. That might break GnuPG, if Thunderbird does something that isn't expected by a corresponding GnuPG version. Also, we'd risk corruption if gnupg and Thunderbird attempts to modify the files in the future. Furthermore, Thunderbird might need to store attributes that GnuPG doesn't offer.\n\nIn my opinion, because of these reasons, Thunderbird shouldn't try to reuse configuration files that are defined and owned by other software.", "is_private": false, "creator": "kaie@kuix.de", "author": "kaie@kuix.de", "creation_time": "2020-11-24T13:53:34Z", "id": 15146106}, {"text": "(In reply to HyperPac from comment #38)\n> > Aliases should be used for sending encrypted messages, only. They should have no effect on the signature status of received messages.\n> \n> Just to make sure that I understood your resolution completely...what happens when I receive an encrypted message from abc@abc.com that was encrypted using companykey@abc.com? Will I be able to both read (decrypt) the message and reply to it by using abc@abc.com as recipient but the companykey@abc.com (as configured in the JSON)?\n\nThe discussion here is only about encrypting and sending.\n\nDecryption is always possible if you have the respective private key.\nFor decryption, it doesn't matter who sent the message, or to which email address it was sent.\n\nIf you want to reply to a message and encrypt it, the suggested system would allow you to define an alias rule, to encrypt using a key that doesn't match any of the user IDs in the key.\n\n\n> >We need at least a minimal amount of feedback when the user opens the \"message security info\" (clicks the security button) in the composer >window. Currently, for each recipient address, we show a status like \"ok\" or \"no key available\".\n> \n> How about \"ok - alias used\"? That would at least show the user that something happened outside the normal proceedings (and that the user configured aliases and may have forgot about it in the meantime).\n\nThe issue here is localization on a stable branch. We're trying to find a solution for the Thunderbird 78 version, which already has completed its localization period. We're trying not to add new strings on the stable branch, because we cannot easily get translations of additional user interface text. (It's a tooling and coordination problem.)\n\nIf we want to offer a solution for the stable 78.x branch, it's best if we find a way to avoid new text.\n\nOnce we're done with improvements that are intended for backporting to 78.x, we can later work on improvements to make the text better for future versions like Thunderbird 90 (summer 2021).\n\nThat's why I suggest that we simply use \"ok\", because we already have that text (and its translations). We don't have the text \"ok - alias used\" that you are suggesting on the 78.x software branch.", "raw_text": "(In reply to HyperPac from comment #38)\n> > Aliases should be used for sending encrypted messages, only. They should have no effect on the signature status of received messages.\n> \n> Just to make sure that I understood your resolution completely...what happens when I receive an encrypted message from abc@abc.com that was encrypted using companykey@abc.com? Will I be able to both read (decrypt) the message and reply to it by using abc@abc.com as recipient but the companykey@abc.com (as configured in the JSON)?\n\nThe discussion here is only about encrypting and sending.\n\nDecryption is always possible if you have the respective private key.\nFor decryption, it doesn't matter who sent the message, or to which email address it was sent.\n\nIf you want to reply to a message and encrypt it, the suggested system would allow you to define an alias rule, to encrypt using a key that doesn't match any of the user IDs in the key.\n\n\n> >We need at least a minimal amount of feedback when the user opens the \"message security info\" (clicks the security button) in the composer >window. Currently, for each recipient address, we show a status like \"ok\" or \"no key available\".\n> \n> How about \"ok - alias used\"? That would at least show the user that something happened outside the normal proceedings (and that the user configured aliases and may have forgot about it in the meantime).\n\nThe issue here is localization on a stable branch. We're trying to find a solution for the Thunderbird 78 version, which already has completed its localization period. We're trying not to add new strings on the stable branch, because we cannot easily get translations of additional user interface text. (It's a tooling and coordination problem.)\n\nIf we want to offer a solution for the stable 78.x branch, it's best if we find a way to avoid new text.\n\nOnce we're done with improvements that are intended for backporting to 78.x, we can later work on improvements to make the text better for future versions like Thunderbird 90 (summer 2021).\n\nThat's why I suggest that we simply use \"ok\", because we already have that text (and its translations). We don't have the text \"ok - alias used\" that you are suggesting on the 78.x software branch.", "is_private": false, "id": 15146110, "author": "kaie@kuix.de", "bug_id": 1644085, "attachment_id": null, "creator": "kaie@kuix.de", "creation_time": "2020-11-24T14:02:46Z", "count": 40, "tags": [], "time": "2020-11-24T14:02:46Z"}, {"tags": [], "bug_id": 1644085, "count": 41, "time": "2020-11-24T17:47:25Z", "attachment_id": null, "is_private": false, "raw_text": "(In reply to Kai Engert (:KaiE:) from comment #40)\n> (In reply to HyperPac from comment #38)\n> > > Aliases should be used for sending encrypted messages, only. They should have no effect on the signature status of received messages.\n> > \n> > Just to make sure that I understood your resolution completely...what happens when I receive an encrypted message from abc@abc.com that was encrypted using companykey@abc.com? Will I be able to both read (decrypt) the message and reply to it by using abc@abc.com as recipient but the companykey@abc.com (as configured in the JSON)?\n> \n> The discussion here is only about encrypting and sending.\n> \n> Decryption is always possible if you have the respective private key.\n> For decryption, it doesn't matter who sent the message, or to which email address it was sent.\n> \n> If you want to reply to a message and encrypt it, the suggested system would allow you to define an alias rule, to encrypt using a key that >doesn't match any of the user IDs in the key.\n\nThx for the explanation. I just want to make sure, that the current (working) implementation for decrypting is not broken by the aliases implementation for sending (encrypting).", "text": "(In reply to Kai Engert (:KaiE:) from comment #40)\n> (In reply to HyperPac from comment #38)\n> > > Aliases should be used for sending encrypted messages, only. They should have no effect on the signature status of received messages.\n> > \n> > Just to make sure that I understood your resolution completely...what happens when I receive an encrypted message from abc@abc.com that was encrypted using companykey@abc.com? Will I be able to both read (decrypt) the message and reply to it by using abc@abc.com as recipient but the companykey@abc.com (as configured in the JSON)?\n> \n> The discussion here is only about encrypting and sending.\n> \n> Decryption is always possible if you have the respective private key.\n> For decryption, it doesn't matter who sent the message, or to which email address it was sent.\n> \n> If you want to reply to a message and encrypt it, the suggested system would allow you to define an alias rule, to encrypt using a key that >doesn't match any of the user IDs in the key.\n\nThx for the explanation. I just want to make sure, that the current (working) implementation for decrypting is not broken by the aliases implementation for sending (encrypting).", "creation_time": "2020-11-24T17:47:25Z", "id": 15146453, "author": "github@x07907x.de", "creator": "github@x07907x.de"}, {"bug_id": 1644085, "attachment_id": 9189756, "is_private": false, "text": "Created attachment 9189756\nBug 1644085 - Support recipient aliases for OpenPGP encryption. r=mkmelin", "raw_text": "", "author": "kaie@kuix.de", "id": 15147186, "tags": [], "count": 42, "time": "2020-11-25T19:00:15Z", "creation_time": "2020-11-25T19:00:15Z", "creator": "kaie@kuix.de"}, {"time": "2020-11-26T11:04:39Z", "tags": [], "count": 43, "creation_time": "2020-11-26T11:04:39Z", "creator": "kaie@kuix.de", "attachment_id": 9189820, "bug_id": 1644085, "author": "kaie@kuix.de", "id": 15147644, "is_private": false, "text": "Created attachment 9189820\nkeyring-import-alias.patch\n\nIf you try to apply the phabricator patch to comm-central, you'll notice that one small piece is rejected. Apply this patch on top of it to fix it.\n\n(Because the phabricator patch is based on comm-esr78.)", "raw_text": "If you try to apply the phabricator patch to comm-central, you'll notice that one small piece is rejected. Apply this patch on top of it to fix it.\n\n(Because the phabricator patch is based on comm-esr78.)"}, {"count": 44, "tags": [], "time": "2020-11-26T11:15:17Z", "creator": "kaie@kuix.de", "creation_time": "2020-11-26T11:15:17Z", "bug_id": 1644085, "attachment_id": null, "raw_text": "(In reply to HyperPac from comment #38)\n> How about \"ok - alias used\"? That would at least show the user that something happened outside the normal proceedings (and that the user configured aliases and may have forgot about it in the meantime).\n\nYou've inspired me to look for a different solution.\n\nInstead of showing a text like \"ok\" (which would have to be localized), we could use a symbolic display (again, we're talking about the initial step suitable for the stable branch).\n\nI'm suggesting that we show \"a -> b\". We'll obviously need a HOWTO document that will explain how to use the hidden alias feature on the 78 branch, and it can explain that this symbol means \"an alias definition is being used\".", "text": "(In reply to HyperPac from comment #38)\n> How about \"ok - alias used\"? That would at least show the user that something happened outside the normal proceedings (and that the user configured aliases and may have forgot about it in the meantime).\n\nYou've inspired me to look for a different solution.\n\nInstead of showing a text like \"ok\" (which would have to be localized), we could use a symbolic display (again, we're talking about the initial step suitable for the stable branch).\n\nI'm suggesting that we show \"a -> b\". We'll obviously need a HOWTO document that will explain how to use the hidden alias feature on the 78 branch, and it can explain that this symbol means \"an alias definition is being used\".", "is_private": false, "author": "kaie@kuix.de", "id": 15147652}, {"tags": [], "count": 45, "time": "2020-11-26T11:18:37Z", "creation_time": "2020-11-26T11:18:37Z", "creator": "vv01f@fsfe.org", "bug_id": 1644085, "attachment_id": null, "is_private": false, "text": "(In reply to Kai Engert (:KaiE:) from comment #32)\n\n> Considering earlier comments and after more brainstorming, I consider the following approach, which is designed as a minimal, initial step, because we're limited in what changes can be reasonably made on the stable 78.x branch. An additional constraint is that the changes on 78.x shouldn't be in contradiction with future enhancements, so it's necessary to be careful with the initial step.\n\nnice that things will be thought through.\n\n> Based on the feedback received, users clearly want an aliasing solution, to map an email address (or domain) to keys (one or many).\n> We should use a solution that solves both this bug (one-to-many aliases) and bug 1663406 (one-to-one aliases and many-to-one aliases).\n\nglad to read that.\n\n> I'd like the alias rules to be explicit. I'd like to avoid having to do multiple levels of rule resolution. I suggest that each rule maps to key fingerprints (not IDs, not other email addresses).\n\nfingerprints is the best you can do, also consider that for identifying the signer of a message (clearly stating that pgprules is the origin for the connection).\n\n> I'd like the configuration file to be disabled by default, and instead require the user to perform a configuration to enable the external config file with alias rules. We had said it's best if external synchronization solutions don't need to find the Thunderbird profile directory. I suggest that we introduce a new preference, e.g. mail.openpgp.alias_rules_file which can either be a full path, or a simple simple filename. If it's a simple filename (no directory separator characters), then we attempt to load the file from the profile directory. To enable aliases, the user must set the pref once to define which file will be used. (In a future TB version this could be set using UI.)\n\nI dont thing changing the path to the config file helps. Rather I'd suggest to have a directory and enable rules to be split over files for users to manage them. That enables to exchange sets of rules and later can expand on having rules stored elsewhere e.g. in a company. think modular.\n\n> Aliases should be used for sending encrypted messages, only. They should have no effect on the signature status of received messages.\n\nwhy not letting users decide on signatures on a per-receipient basis?\naliases could configure several other things as well. we had PGPMime, sign, encrypt and negateRule in Enigmail.\nWe could easily think of having plaintext/html and other settings such as (list of) places for updated keys attached to that later on. again, think modular, don't block future development early on.\n\n> With one exception: If a key has been marked as rejected, what should we do? I suggest to forbid the use of rejected keys for aliases, too.\n\nrejected locally and revoked explicitly yes, expired best not entirely. keys expire quite easily but new keys are not available quite often, so encrypting to an expired key is less a problem than transmitting messages in cleartext. this would be a subject for a warning message but still be much better than blocking usage of keys completely.\n\n> I suggest that an alias definition overrides the usual direct key lookup. If an alias is defined, we always use it, and we don't attempt to perform a direct lookup by email address.\n\nwith Enigmail we had possibility to match many rules, here you intend to limit for the first match? (better first than last) if no match was found will there still be a lookup? (hope for yes) and can I disable automatic lookups? (hope for yes and disabled remote lookup by default)\n\n> An alias rule can go wrong. One or multiple of the defined keys might be missing or expired or revoked, or not have a usable encryption key etc. I suggest that each alias rule needs an optional parameter \"ignore_failures\". If false, any missing or unusable key will result in a failure and the email not sent. If true, missing or unusable keys will be silently ignored, and only usable keys will be used.\n\n* failure: unsupported algorithms, defect key, \u2026\n* blocking warning: revoked, locally disabled key\n* non-blocking warning: expired key\n\n> We need at least a minimal amount of feedback when the user opens the \"message security info\" (clicks the security button) in the composer window. Currently, for each recipient address, we show a status like \"ok\" or \"no key available\".\n\nwith Enigmail we had an optional dialoque where keys could be (un)selected or updated\nthat occured e.g. when the amount of addressees and keys did not match or optionally always.\n\n> I suggest that we show \"ok\" if the alias definition is fine (no failures or set to ignore failures). I found we have an existing string in the codebase that we could reuse for all failure scenarios: \"Alias problem\" (found in the ldap code).\n\nmaybe list all matching keys found for aliases and (plan to) add direct access for editing the rules conveniently \u2013 until the gui is there, give sufficient information that enables to edit the configuration and recheck again before sending. \n\n> There is the additional angle of \"how do I get the keys\" that are defined in alias rules. I'd like to keep that as a separate task for later, outside the scope of this bug.\n\nthis can be (a future) extension for that configuration, e.g. a list of locations (think key-url on a website as well as keyservers)\nsame for connection to address book entries.\n\n> Please give feedback if this initial approach could be sufficient for your urgent needs, or if something important is missing with this approach.\n\nthanks for considering actual usecases", "raw_text": "(In reply to Kai Engert (:KaiE:) from comment #32)\n\n> Considering earlier comments and after more brainstorming, I consider the following approach, which is designed as a minimal, initial step, because we're limited in what changes can be reasonably made on the stable 78.x branch. An additional constraint is that the changes on 78.x shouldn't be in contradiction with future enhancements, so it's necessary to be careful with the initial step.\n\nnice that things will be thought through.\n\n> Based on the feedback received, users clearly want an aliasing solution, to map an email address (or domain) to keys (one or many).\n> We should use a solution that solves both this bug (one-to-many aliases) and bug 1663406 (one-to-one aliases and many-to-one aliases).\n\nglad to read that.\n\n> I'd like the alias rules to be explicit. I'd like to avoid having to do multiple levels of rule resolution. I suggest that each rule maps to key fingerprints (not IDs, not other email addresses).\n\nfingerprints is the best you can do, also consider that for identifying the signer of a message (clearly stating that pgprules is the origin for the connection).\n\n> I'd like the configuration file to be disabled by default, and instead require the user to perform a configuration to enable the external config file with alias rules. We had said it's best if external synchronization solutions don't need to find the Thunderbird profile directory. I suggest that we introduce a new preference, e.g. mail.openpgp.alias_rules_file which can either be a full path, or a simple simple filename. If it's a simple filename (no directory separator characters), then we attempt to load the file from the profile directory. To enable aliases, the user must set the pref once to define which file will be used. (In a future TB version this could be set using UI.)\n\nI dont thing changing the path to the config file helps. Rather I'd suggest to have a directory and enable rules to be split over files for users to manage them. That enables to exchange sets of rules and later can expand on having rules stored elsewhere e.g. in a company. think modular.\n\n> Aliases should be used for sending encrypted messages, only. They should have no effect on the signature status of received messages.\n\nwhy not letting users decide on signatures on a per-receipient basis?\naliases could configure several other things as well. we had PGPMime, sign, encrypt and negateRule in Enigmail.\nWe could easily think of having plaintext/html and other settings such as (list of) places for updated keys attached to that later on. again, think modular, don't block future development early on.\n\n> With one exception: If a key has been marked as rejected, what should we do? I suggest to forbid the use of rejected keys for aliases, too.\n\nrejected locally and revoked explicitly yes, expired best not entirely. keys expire quite easily but new keys are not available quite often, so encrypting to an expired key is less a problem than transmitting messages in cleartext. this would be a subject for a warning message but still be much better than blocking usage of keys completely.\n\n> I suggest that an alias definition overrides the usual direct key lookup. If an alias is defined, we always use it, and we don't attempt to perform a direct lookup by email address.\n\nwith Enigmail we had possibility to match many rules, here you intend to limit for the first match? (better first than last) if no match was found will there still be a lookup? (hope for yes) and can I disable automatic lookups? (hope for yes and disabled remote lookup by default)\n\n> An alias rule can go wrong. One or multiple of the defined keys might be missing or expired or revoked, or not have a usable encryption key etc. I suggest that each alias rule needs an optional parameter \"ignore_failures\". If false, any missing or unusable key will result in a failure and the email not sent. If true, missing or unusable keys will be silently ignored, and only usable keys will be used.\n\n* failure: unsupported algorithms, defect key, \u2026\n* blocking warning: revoked, locally disabled key\n* non-blocking warning: expired key\n\n> We need at least a minimal amount of feedback when the user opens the \"message security info\" (clicks the security button) in the composer window. Currently, for each recipient address, we show a status like \"ok\" or \"no key available\".\n\nwith Enigmail we had an optional dialoque where keys could be (un)selected or updated\nthat occured e.g. when the amount of addressees and keys did not match or optionally always.\n\n> I suggest that we show \"ok\" if the alias definition is fine (no failures or set to ignore failures). I found we have an existing string in the codebase that we could reuse for all failure scenarios: \"Alias problem\" (found in the ldap code).\n\nmaybe list all matching keys found for aliases and (plan to) add direct access for editing the rules conveniently \u2013 until the gui is there, give sufficient information that enables to edit the configuration and recheck again before sending. \n\n> There is the additional angle of \"how do I get the keys\" that are defined in alias rules. I'd like to keep that as a separate task for later, outside the scope of this bug.\n\nthis can be (a future) extension for that configuration, e.g. a list of locations (think key-url on a website as well as keyservers)\nsame for connection to address book entries.\n\n> Please give feedback if this initial approach could be sufficient for your urgent needs, or if something important is missing with this approach.\n\nthanks for considering actual usecases", "id": 15147659, "author": "vv01f@fsfe.org"}, {"creator": "kaie@kuix.de", "creation_time": "2020-11-26T12:17:23Z", "count": 46, "tags": [], "time": "2020-11-26T12:17:23Z", "raw_text": "(In reply to vv01f from comment #45)\n> > I'd like the alias rules to be explicit. I'd like to avoid having to do multiple levels of rule resolution. I suggest that each rule maps to key fingerprints (not IDs, not other email addresses).\n> \n> fingerprints is the best you can do, also consider that for identifying the signer of a message (clearly stating that pgprules is the origin for the connection).\n\nI'd like to declare handling of aliases for signing/verification as out of scope of this bug, and defer to a later time. Would be good to file a separate bug with suggestions.\n\n\n> > I'd like the configuration file to be disabled by default, and instead require the user to perform a configuration to enable the external config file with alias rules. We had said it's best if external synchronization solutions don't need to find the Thunderbird profile directory. I suggest that we introduce a new preference, e.g. mail.openpgp.alias_rules_file which can either be a full path, or a simple simple filename. If it's a simple filename (no directory separator characters), then we attempt to load the file from the profile directory. To enable aliases, the user must set the pref once to define which file will be used. (In a future TB version this could be set using UI.)\n> \n> I dont thing changing the path to the config file helps. Rather I'd suggest to have a directory and enable rules to be split over files for users to manage them. That enables to exchange sets of rules and later can expand on having rules stored elsewhere e.g. in a company. think modular.\n\nIt has also been suggested to allow to use URLs instead of local file. Scanning an URL that represents a directory for multiple files is difficult.\n\nIt sounds like we need a solution that allows multiple files, and could work with both.\n\nI suggest that we allow the pref to be a mixed list of multiple filenames or directories (later) or URLs (later).\nDirectory scanning and URLs could be done later.\n\n\n> > Aliases should be used for sending encrypted messages, only. They should have no effect on the signature status of received messages.\n> \n> why not letting users decide on signatures on a per-receipient basis?\n\nsignature status -> later\n\nThe details of a signature status would have to explain that an alias rule was involved.\n\n\n> aliases could configure several other things as well. we had PGPMime, sign, encrypt and negateRule in Enigmail.\n> We could easily think of having plaintext/html and other settings such as (list of) places for updated keys attached to that later on. again, think modular, don't block future development early on.\n\nBy using the JSON format for storing rules, we can allow additional attributes to rules in the future.\n\n\n> > With one exception: If a key has been marked as rejected, what should we do? I suggest to forbid the use of rejected keys for aliases, too.\n> \n> rejected locally and revoked explicitly yes, expired best not entirely. keys expire quite easily but new keys are not available quite often, so encrypting to an expired key is less a problem than transmitting messages in cleartext. this would be a subject for a warning message but still be much better than blocking usage of keys completely.\n\nClearly the creator of a key doesn't want you to use a key after it expires. I think we shouldn't use expired keys. If there's a strong reason to allow an override, I suggest to handle that as a potential followup and discuss in a separate ticket. The JSON format would allow us to add such attributes to rules, we don't have to make the final decision now.\n\n\n> > I suggest that an alias definition overrides the usual direct key lookup. If an alias is defined, we always use it, and we don't attempt to perform a direct lookup by email address.\n> \n> with Enigmail we had possibility to match many rules, here you intend to limit for the first match? (better first than last) if no match was found will there still be a lookup? (hope for yes)\n\nAn alias must either be defined for an exactly matching email address, or for a domain.\n\nI had not yet considered the scenario of having multiple rules for the same email or domain. If using a single file, I'd consider that a logic error in the definition. When allowing multiple files, the risk for having multiple rules for the same email/domain increases.\n\nStarting with the policy \"first rule wins\" is hopefully reasonable. It seems that conflicting rules for the same email/domain should be avoided.\n\n\n> and can I disable automatic lookups? (hope for yes and disabled remote lookup by default)\n\nWith lookup, I was referring to the lookup for a key with an email address match in the local key store.\nAt this time we never lookup online automatically. If we'd add this at a future time, it would make sense to allow it to be controlled in alias rules.\n\n\n> > An alias rule can go wrong. One or multiple of the defined keys might be missing or expired or revoked, or not have a usable encryption key etc. I suggest that each alias rule needs an optional parameter \"ignore_failures\". If false, any missing or unusable key will result in a failure and the email not sent. If true, missing or unusable keys will be silently ignored, and only usable keys will be used.\n> \n> * failure: unsupported algorithms, defect key, \u2026\n> * blocking warning: revoked, locally disabled key\n> * non-blocking warning: expired key\n\nDo we really need this complexity, that you define rules for the various kind of failures?\nIn any case, I think this should be done later.\nWe could define (at a future time) that a rule can either use the generic ignore_failures rule, or must use alternative fine grained rules for failure handling.\n\n\n> > We need at least a minimal amount of feedback when the user opens the \"message security info\" (clicks the security button) in the composer window. Currently, for each recipient address, we show a status like \"ok\" or \"no key available\".\n> \n> with Enigmail we had an optional dialoque where keys could be (un)selected or updated\n> that occured e.g. when the amount of addressees and keys did not match or optionally always.\n\nI think that dialog was confusing, and only suitable for very advanced users.\nIf we really need a complex user interface to give advanced users this kind of interactive control, we'll have to discuss it at a later time, in a bug that targets future versions.\n\n\n> > I suggest that we show \"ok\" if the alias definition is fine (no failures or set to ignore failures). I found we have an existing string in the codebase that we could reuse for all failure scenarios: \"Alias problem\" (found in the ldap code).\n> \n> maybe list all matching keys found for aliases and (plan to) add direct access for editing the rules conveniently \u2013 until the gui is there, give sufficient information that enables to edit the configuration and recheck again before sending. \n\nThe best we can do in 78 is to have english messages on the error console.\nIt would also require reloading of the file at runtime, which I had hoped to also skip initially.", "text": "(In reply to vv01f from comment #45)\n> > I'd like the alias rules to be explicit. I'd like to avoid having to do multiple levels of rule resolution. I suggest that each rule maps to key fingerprints (not IDs, not other email addresses).\n> \n> fingerprints is the best you can do, also consider that for identifying the signer of a message (clearly stating that pgprules is the origin for the connection).\n\nI'd like to declare handling of aliases for signing/verification as out of scope of this bug, and defer to a later time. Would be good to file a separate bug with suggestions.\n\n\n> > I'd like the configuration file to be disabled by default, and instead require the user to perform a configuration to enable the external config file with alias rules. We had said it's best if external synchronization solutions don't need to find the Thunderbird profile directory. I suggest that we introduce a new preference, e.g. mail.openpgp.alias_rules_file which can either be a full path, or a simple simple filename. If it's a simple filename (no directory separator characters), then we attempt to load the file from the profile directory. To enable aliases, the user must set the pref once to define which file will be used. (In a future TB version this could be set using UI.)\n> \n> I dont thing changing the path to the config file helps. Rather I'd suggest to have a directory and enable rules to be split over files for users to manage them. That enables to exchange sets of rules and later can expand on having rules stored elsewhere e.g. in a company. think modular.\n\nIt has also been suggested to allow to use URLs instead of local file. Scanning an URL that represents a directory for multiple files is difficult.\n\nIt sounds like we need a solution that allows multiple files, and could work with both.\n\nI suggest that we allow the pref to be a mixed list of multiple filenames or directories (later) or URLs (later).\nDirectory scanning and URLs could be done later.\n\n\n> > Aliases should be used for sending encrypted messages, only. They should have no effect on the signature status of received messages.\n> \n> why not letting users decide on signatures on a per-receipient basis?\n\nsignature status -> later\n\nThe details of a signature status would have to explain that an alias rule was involved.\n\n\n> aliases could configure several other things as well. we had PGPMime, sign, encrypt and negateRule in Enigmail.\n> We could easily think of having plaintext/html and other settings such as (list of) places for updated keys attached to that later on. again, think modular, don't block future development early on.\n\nBy using the JSON format for storing rules, we can allow additional attributes to rules in the future.\n\n\n> > With one exception: If a key has been marked as rejected, what should we do? I suggest to forbid the use of rejected keys for aliases, too.\n> \n> rejected locally and revoked explicitly yes, expired best not entirely. keys expire quite easily but new keys are not available quite often, so encrypting to an expired key is less a problem than transmitting messages in cleartext. this would be a subject for a warning message but still be much better than blocking usage of keys completely.\n\nClearly the creator of a key doesn't want you to use a key after it expires. I think we shouldn't use expired keys. If there's a strong reason to allow an override, I suggest to handle that as a potential followup and discuss in a separate ticket. The JSON format would allow us to add such attributes to rules, we don't have to make the final decision now.\n\n\n> > I suggest that an alias definition overrides the usual direct key lookup. If an alias is defined, we always use it, and we don't attempt to perform a direct lookup by email address.\n> \n> with Enigmail we had possibility to match many rules, here you intend to limit for the first match? (better first than last) if no match was found will there still be a lookup? (hope for yes)\n\nAn alias must either be defined for an exactly matching email address, or for a domain.\n\nI had not yet considered the scenario of having multiple rules for the same email or domain. If using a single file, I'd consider that a logic error in the definition. When allowing multiple files, the risk for having multiple rules for the same email/domain increases.\n\nStarting with the policy \"first rule wins\" is hopefully reasonable. It seems that conflicting rules for the same email/domain should be avoided.\n\n\n> and can I disable automatic lookups? (hope for yes and disabled remote lookup by default)\n\nWith lookup, I was referring to the lookup for a key with an email address match in the local key store.\nAt this time we never lookup online automatically. If we'd add this at a future time, it would make sense to allow it to be controlled in alias rules.\n\n\n> > An alias rule can go wrong. One or multiple of the defined keys might be missing or expired or revoked, or not have a usable encryption key etc. I suggest that each alias rule needs an optional parameter \"ignore_failures\". If false, any missing or unusable key will result in a failure and the email not sent. If true, missing or unusable keys will be silently ignored, and only usable keys will be used.\n> \n> * failure: unsupported algorithms, defect key, \u2026\n> * blocking warning: revoked, locally disabled key\n> * non-blocking warning: expired key\n\nDo we really need this complexity, that you define rules for the various kind of failures?\nIn any case, I think this should be done later.\nWe could define (at a future time) that a rule can either use the generic ignore_failures rule, or must use alternative fine grained rules for failure handling.\n\n\n> > We need at least a minimal amount of feedback when the user opens the \"message security info\" (clicks the security button) in the composer window. Currently, for each recipient address, we show a status like \"ok\" or \"no key available\".\n> \n> with Enigmail we had an optional dialoque where keys could be (un)selected or updated\n> that occured e.g. when the amount of addressees and keys did not match or optionally always.\n\nI think that dialog was confusing, and only suitable for very advanced users.\nIf we really need a complex user interface to give advanced users this kind of interactive control, we'll have to discuss it at a later time, in a bug that targets future versions.\n\n\n> > I suggest that we show \"ok\" if the alias definition is fine (no failures or set to ignore failures). I found we have an existing string in the codebase that we could reuse for all failure scenarios: \"Alias problem\" (found in the ldap code).\n> \n> maybe list all matching keys found for aliases and (plan to) add direct access for editing the rules conveniently \u2013 until the gui is there, give sufficient information that enables to edit the configuration and recheck again before sending. \n\nThe best we can do in 78 is to have english messages on the error console.\nIt would also require reloading of the file at runtime, which I had hoped to also skip initially.", "is_private": false, "id": 15147713, "author": "kaie@kuix.de", "bug_id": 1644085, "attachment_id": null}, {"creator": "kaie@kuix.de", "creation_time": "2020-11-26T12:34:41Z", "count": 47, "tags": [], "time": "2020-11-26T12:34:41Z", "text": "BTW thanks for the detailed feedback and suggestions.\n\n(In reply to vv01f from comment #45)\n> aliases could configure several other things as well. we had PGPMime, sign, encrypt and negateRule in Enigmail.\n\nThis is a different kind of rules, not aliases.\n\nYou're suggesting to automatically influence the way an email will be sent, depending on the recipients. That's a separate kind of complexity, and with more room for potential conflicts between rules.\n\nIf we need that class of rules, it's a separate task, more like an automation feature. It seems out of scope for this recipient-alias bug.", "raw_text": "BTW thanks for the detailed feedback and suggestions.\n\n(In reply to vv01f from comment #45)\n> aliases could configure several other things as well. we had PGPMime, sign, encrypt and negateRule in Enigmail.\n\nThis is a different kind of rules, not aliases.\n\nYou're suggesting to automatically influence the way an email will be sent, depending on the recipients. That's a separate kind of complexity, and with more room for potential conflicts between rules.\n\nIf we need that class of rules, it's a separate task, more like an automation feature. It seems out of scope for this recipient-alias bug.", "is_private": false, "author": "kaie@kuix.de", "id": 15147724, "bug_id": 1644085, "attachment_id": null}, {"time": "2020-11-26T12:45:28Z", "count": 48, "tags": [], "creator": "mkmelin+mozilla@iki.fi", "creation_time": "2020-11-26T12:45:28Z", "attachment_id": null, "bug_id": 1644085, "id": 15147732, "author": "mkmelin+mozilla@iki.fi", "text": "(In reply to Kai Engert (:KaiE:) from comment #46)\n> I suggest that we allow the pref to be a mixed list of multiple filenames or directories (later) or URLs (later).\n\nCould be worth having the pref value be a file:// url or anything else, that fetch() can handle.\nBut I don't think we want to support multiple sources. That would mean lots of complications in the future (say, where would you save rules?)", "raw_text": "(In reply to Kai Engert (:KaiE:) from comment #46)\n> I suggest that we allow the pref to be a mixed list of multiple filenames or directories (later) or URLs (later).\n\nCould be worth having the pref value be a file:// url or anything else, that fetch() can handle.\nBut I don't think we want to support multiple sources. That would mean lots of complications in the future (say, where would you save rules?)", "is_private": false}, {"id": 15147736, "creation_time": "2020-11-26T12:49:00Z", "author": "vv01f@fsfe.org", "creator": "vv01f@fsfe.org", "is_private": false, "text": "(In reply to Kai Engert (:KaiE:) from comment #47)\n> You're suggesting to automatically influence the way an email will be sent, depending on the recipients. That's a separate kind of complexity, and with more room for potential conflicts between rules.\n> \n> If we need that class of rules, it's a separate task, more like an automation feature. It seems out of scope for this recipient-alias bug.\n\nyou are right; there is a class of rules already for this on a per-domain-basis with settings/composition, button \"Send-Options\u2026\" which doesnt allow a rule per-address.", "raw_text": "(In reply to Kai Engert (:KaiE:) from comment #47)\n> You're suggesting to automatically influence the way an email will be sent, depending on the recipients. That's a separate kind of complexity, and with more room for potential conflicts between rules.\n> \n> If we need that class of rules, it's a separate task, more like an automation feature. It seems out of scope for this recipient-alias bug.\n\nyou are right; there is a class of rules already for this on a per-domain-basis with settings/composition, button \"Send-Options\u2026\" which doesnt allow a rule per-address.", "attachment_id": null, "time": "2020-11-26T12:49:00Z", "tags": [], "count": 49, "bug_id": 1644085}, {"author": "github@x07907x.de", "id": 15147808, "is_private": false, "text": "(In reply to Kai Engert (:KaiE:) from comment #44)\n \n> I'm suggesting that we show \"a -> b\". We'll obviously need a HOWTO document that will explain how to use the hidden alias feature on the 78 >branch, and it can explain that this symbol means \"an alias definition is being used\".\n\nI had to think about \"a -> b\" quite a bit but then I read \"an alias definition is being used\" and it all made sense :-).\n\nI\u00b4m not an expert on localization, but wouldn\u00b4t that require localization too, e.g. for Arabic?", "raw_text": "(In reply to Kai Engert (:KaiE:) from comment #44)\n \n> I'm suggesting that we show \"a -> b\". We'll obviously need a HOWTO document that will explain how to use the hidden alias feature on the 78 >branch, and it can explain that this symbol means \"an alias definition is being used\".\n\nI had to think about \"a -> b\" quite a bit but then I read \"an alias definition is being used\" and it all made sense :-).\n\nI\u00b4m not an expert on localization, but wouldn\u00b4t that require localization too, e.g. for Arabic?", "attachment_id": null, "bug_id": 1644085, "creation_time": "2020-11-26T13:56:42Z", "creator": "github@x07907x.de", "time": "2020-11-26T13:56:42Z", "tags": [], "count": 50}, {"count": 51, "tags": [], "time": "2020-11-26T14:52:00Z", "creator": "flo.sammueller@gmail.com", "creation_time": "2020-11-26T14:52:00Z", "bug_id": 1644085, "attachment_id": null, "raw_text": "Thank you Kai for picking this up again and incorporating all the ideas that were mentioned before. I think the concept that you have presented in comment 32 is very sound and solves all difficult aspects in this regard, especially how to deal with Thunderbird's acceptance model and error handling.\n\nOf course, the presented approach could also be suitable for many other features, e.g. those laid out in comment 45. But remember that the initial goal of this bug was merely to have a replacement for GnuPG's groups or Enigmail's Per-Recipient Rules. I therefore agree with Kai to focus on the essential work that needs to be done to incorporate this feature and keep it as simple as possible for the moment (while still having options to extend it in the future). In my opinion, this means having only one alias definition file, having the user be responsible for its correct content, avoiding a different control flow for key rejection/error handling where possible and not providing an automated import mechanism (keyserver/WKD) for keys connected to an alias.\n\nTwo small remarks:\n - The probability of a key ID collision decreases exponentially with increasing key ID length. 64bit key IDs (16 digits) should suffice and make the configuration file more maintainable. At least they should be a valid option alongside whole fingerprints.\n - As Kai already suggested in comment 44, the key selection due to an alias rule can already be indicated in the current UI using a scheme like \"alias -> key\" - see also my last patch for a similar idea. But I guess that means showing the selected key IDs explicitly because that is the only thing we know from the JSON configuration (remember that we only specify those, not mail addresses). Maybe there could be some kind of lookup that displays the mail addresses or UIDs corresponding to the key ID in the UI instead.", "text": "Thank you Kai for picking this up again and incorporating all the ideas that were mentioned before. I think the concept that you have presented in comment 32 is very sound and solves all difficult aspects in this regard, especially how to deal with Thunderbird's acceptance model and error handling.\n\nOf course, the presented approach could also be suitable for many other features, e.g. those laid out in comment 45. But remember that the initial goal of this bug was merely to have a replacement for GnuPG's groups or Enigmail's Per-Recipient Rules. I therefore agree with Kai to focus on the essential work that needs to be done to incorporate this feature and keep it as simple as possible for the moment (while still having options to extend it in the future). In my opinion, this means having only one alias definition file, having the user be responsible for its correct content, avoiding a different control flow for key rejection/error handling where possible and not providing an automated import mechanism (keyserver/WKD) for keys connected to an alias.\n\nTwo small remarks:\n - The probability of a key ID collision decreases exponentially with increasing key ID length. 64bit key IDs (16 digits) should suffice and make the configuration file more maintainable. At least they should be a valid option alongside whole fingerprints.\n - As Kai already suggested in comment 44, the key selection due to an alias rule can already be indicated in the current UI using a scheme like \"alias -> key\" - see also my last patch for a similar idea. But I guess that means showing the selected key IDs explicitly because that is the only thing we know from the JSON configuration (remember that we only specify those, not mail addresses). Maybe there could be some kind of lookup that displays the mail addresses or UIDs corresponding to the key ID in the UI instead.", "is_private": false, "id": 15147919, "author": "flo.sammueller@gmail.com"}, {"creator": "kaie@kuix.de", "creation_time": "2020-11-26T16:03:43Z", "count": 52, "tags": [], "time": "2020-11-26T16:03:43Z", "text": "(In reply to Magnus Melin [:mkmelin] from comment #48)\n> Could be worth having the pref value be a file:// url or anything else, that fetch() can handle.\n> But I don't think we want to support multiple sources. That would mean lots of complications in the future (say, where would you save rules?)\n\nLooks like we have some conflict here, which I had not noticed earlier.\n\nWe need a way to load external rules, and Magnus requested it should be possibly to specify an URL.\n\nBut we also need a location to store the rules that could be modified/edited/created from within Thunderbird (using future UI), and that location cannot be an URL. We'll need a path that is guaranteed to be writeable, and an URL doesn't give us that guarantee.\n\nI suggest the following approach:\n- we go back to my original suggestion from comment 32, the pref defines a single value, which is exactly one filename (absolute or in profile)\n- it cannot be an URL\n- later, we extend the structure of that JSON file, and allow the addition of entries to define additional read-only locations from which external rules may be loaded.", "raw_text": "(In reply to Magnus Melin [:mkmelin] from comment #48)\n> Could be worth having the pref value be a file:// url or anything else, that fetch() can handle.\n> But I don't think we want to support multiple sources. That would mean lots of complications in the future (say, where would you save rules?)\n\nLooks like we have some conflict here, which I had not noticed earlier.\n\nWe need a way to load external rules, and Magnus requested it should be possibly to specify an URL.\n\nBut we also need a location to store the rules that could be modified/edited/created from within Thunderbird (using future UI), and that location cannot be an URL. We'll need a path that is guaranteed to be writeable, and an URL doesn't give us that guarantee.\n\nI suggest the following approach:\n- we go back to my original suggestion from comment 32, the pref defines a single value, which is exactly one filename (absolute or in profile)\n- it cannot be an URL\n- later, we extend the structure of that JSON file, and allow the addition of entries to define additional read-only locations from which external rules may be loaded.", "is_private": false, "author": "kaie@kuix.de", "id": 15148001, "bug_id": 1644085, "attachment_id": null}, {"bug_id": 1644085, "attachment_id": null, "raw_text": "(In reply to Florian Samm\u00fcller from comment #51)\n>  - The probability of a key ID collision decreases exponentially with increasing key ID length. 64bit key IDs (16 digits) should suffice and make the configuration file more maintainable. At least they should be a valid option alongside whole fingerprints.\n\nWhile working on the code, I got the impression that the used APIs will accept the short key IDs, too. We'll have to test if it works already.\n\n>  - As Kai already suggested in comment 44, the key selection due to an alias rule can already be indicated in the current UI using a scheme like \"alias -> key\" - see also my last patch for a similar idea. But I guess that means showing the selected key IDs explicitly because that is the only thing we know from the JSON configuration (remember that we only specify those, not mail addresses). Maybe there could be some kind of lookup that displays the mail addresses or UIDs corresponding to the key ID in the UI instead.\n\nThe proposed solution to show a symbolic \"a -> b\" as a shortcut to mean \"there is some alias magic going on\" is very simple to do.\n\nIf you want something more detailed, we'd have several difficulties to handle.\n\nAn alias can resolve to many keys. So we'd have to have multiple entries, one for each defined alias recipient key.\n\nThe user would then expect that the display gives complete information. What would we do for ignore keys, because they are missing and the rule allows us to ignore failures? We'd need additional ways to explain that, which is tricky with our idea to avoid new explanation text on the stable branch.\n\nYour suggestion to resolve key IDs to user IDs or email addresses has the problem that it's ambiguous, because there could be multiple keys for the same user address. So we'd have to display the key ID (or fingerprint) in addition to the resolved user id or email..\n\nI think that's going to far for now. If you're defining aliases while we don't have UI yet, you have to know what you're doing.\n\nIf you really need to debug the effect of an alias resolution, there is a mechanism you could use - which we could document in the HOWTO for the alias feature:\n\nThe debugging mechanism is: Compose a test email to the intended recipients and aliases. Enable encryption. Then use the \"file send later\" function. This won't send the email, but rather store a prepared email in the local folder outbox. You can click that message, open the security details, and you'll see to which recipients the message is encrypted.", "text": "(In reply to Florian Samm\u00fcller from comment #51)\n>  - The probability of a key ID collision decreases exponentially with increasing key ID length. 64bit key IDs (16 digits) should suffice and make the configuration file more maintainable. At least they should be a valid option alongside whole fingerprints.\n\nWhile working on the code, I got the impression that the used APIs will accept the short key IDs, too. We'll have to test if it works already.\n\n>  - As Kai already suggested in comment 44, the key selection due to an alias rule can already be indicated in the current UI using a scheme like \"alias -> key\" - see also my last patch for a similar idea. But I guess that means showing the selected key IDs explicitly because that is the only thing we know from the JSON configuration (remember that we only specify those, not mail addresses). Maybe there could be some kind of lookup that displays the mail addresses or UIDs corresponding to the key ID in the UI instead.\n\nThe proposed solution to show a symbolic \"a -> b\" as a shortcut to mean \"there is some alias magic going on\" is very simple to do.\n\nIf you want something more detailed, we'd have several difficulties to handle.\n\nAn alias can resolve to many keys. So we'd have to have multiple entries, one for each defined alias recipient key.\n\nThe user would then expect that the display gives complete information. What would we do for ignore keys, because they are missing and the rule allows us to ignore failures? We'd need additional ways to explain that, which is tricky with our idea to avoid new explanation text on the stable branch.\n\nYour suggestion to resolve key IDs to user IDs or email addresses has the problem that it's ambiguous, because there could be multiple keys for the same user address. So we'd have to display the key ID (or fingerprint) in addition to the resolved user id or email..\n\nI think that's going to far for now. If you're defining aliases while we don't have UI yet, you have to know what you're doing.\n\nIf you really need to debug the effect of an alias resolution, there is a mechanism you could use - which we could document in the HOWTO for the alias feature:\n\nThe debugging mechanism is: Compose a test email to the intended recipients and aliases. Enable encryption. Then use the \"file send later\" function. This won't send the email, but rather store a prepared email in the local folder outbox. You can click that message, open the security details, and you'll see to which recipients the message is encrypted.", "is_private": false, "author": "kaie@kuix.de", "id": 15148019, "count": 53, "tags": [], "time": "2020-11-26T16:19:53Z", "creator": "kaie@kuix.de", "creation_time": "2020-11-26T16:19:53Z"}, {"bug_id": 1644085, "attachment_id": 9191902, "is_private": false, "text": "Created attachment 9191902\nBug 1644085 - Code preparations for esr78, partial merging from c-c, necessary for a single feature patch. r=mkmelin", "raw_text": "", "author": "kaie@kuix.de", "id": 15165106, "tags": [], "count": 54, "time": "2020-12-08T11:53:07Z", "creation_time": "2020-12-08T11:53:07Z", "creator": "kaie@kuix.de"}, {"bug_id": 1644085, "attachment_id": null, "text": "Magnus, I have addressed most of your comments from the review, and have updated the patch. I also have some comments and questions, see phabricator. Could you please reply to the questions, and if appropriate re-review? Thanks", "raw_text": "Magnus, I have addressed most of your comments from the review, and have updated the patch. I also have some comments and questions, see phabricator. Could you please reply to the questions, and if appropriate re-review? Thanks", "is_private": false, "id": 15175109, "author": "kaie@kuix.de", "count": 55, "tags": [], "time": "2020-12-14T21:33:32Z", "creator": "kaie@kuix.de", "creation_time": "2020-12-14T21:33:32Z"}, {"attachment_id": 9193371, "bug_id": 1644085, "author": "kaie@kuix.de", "id": 15177552, "is_private": false, "text": "Created attachment 9193371\ntb78-openpgp-alias-sample.json.txt definition and sample, v2", "raw_text": "", "time": "2020-12-15T23:06:40Z", "tags": [], "count": 56, "creation_time": "2020-12-15T23:06:40Z", "creator": "kaie@kuix.de"}, {"text": "While we're still working on some details of the code, I would like to invite you to test the proposed enhancement and give feedback, if it works for you or doesn't.\nI've prepared instructions here:\nhttps://wiki.mozilla.org/Thunderbird:OpenPGP:Aliases", "raw_text": "While we're still working on some details of the code, I would like to invite you to test the proposed enhancement and give feedback, if it works for you or doesn't.\nI've prepared instructions here:\nhttps://wiki.mozilla.org/Thunderbird:OpenPGP:Aliases", "is_private": false, "author": "kaie@kuix.de", "id": 15177903, "bug_id": 1644085, "attachment_id": null, "creator": "kaie@kuix.de", "creation_time": "2020-12-16T07:41:13Z", "count": 57, "tags": [], "time": "2020-12-16T07:41:13Z"}, {"creation_time": "2020-12-16T14:39:07Z", "creator": "mkmelin+mozilla@iki.fi", "time": "2020-12-16T14:39:07Z", "tags": [], "count": 58, "id": 15179117, "author": "mkmelin+mozilla@iki.fi", "is_private": false, "raw_text": "I've commented on D97973.", "text": "I've commented on D97973.", "attachment_id": null, "bug_id": 1644085}, {"time": "2020-12-16T17:43:58Z", "count": 59, "tags": [], "creator": "chriechers@netscape.net", "creation_time": "2020-12-16T17:43:58Z", "attachment_id": null, "bug_id": 1644085, "author": "chriechers@netscape.net", "id": 15179498, "raw_text": "(In reply to Kai Engert (:KaiE:) from comment #57)\n> While we're still working on some details of the code, I would like to invite you to test the proposed enhancement and give feedback, if it works for you or doesn't.\n\nI gave it a shot, and I'm delighted to report it worked. That is sending a message to an encrypted mailing list with 23 members.\nThank you!", "text": "(In reply to Kai Engert (:KaiE:) from comment #57)\n> While we're still working on some details of the code, I would like to invite you to test the proposed enhancement and give feedback, if it works for you or doesn't.\n\nI gave it a shot, and I'm delighted to report it worked. That is sending a message to an encrypted mailing list with 23 members.\nThank you!", "is_private": false}, {"count": 60, "tags": [], "time": "2020-12-19T21:02:52Z", "creator": "dnk089@riseup.net", "creation_time": "2020-12-19T21:02:52Z", "bug_id": 1644085, "attachment_id": null, "raw_text": "(In reply to Kai Engert (:KaiE:) from comment #57)\n> While we're still working on some details of the code, I would like to invite you to test the proposed enhancement and give feedback, if it works for you or doesn't.\n> I've prepared instructions here:\n> https://wiki.mozilla.org/Thunderbird:OpenPGP:Aliases\n\nI also tried the build with an alias rule json and it worked great for me. Thanks for working so much on this! \nI would love to see the feature in TB 78.7!", "text": "(In reply to Kai Engert (:KaiE:) from comment #57)\n> While we're still working on some details of the code, I would like to invite you to test the proposed enhancement and give feedback, if it works for you or doesn't.\n> I've prepared instructions here:\n> https://wiki.mozilla.org/Thunderbird:OpenPGP:Aliases\n\nI also tried the build with an alias rule json and it worked great for me. Thanks for working so much on this! \nI would love to see the feature in TB 78.7!", "is_private": false, "author": "dnk089@riseup.net", "id": 15183690}, {"raw_text": "(In reply to Kai Engert (:KaiE:) from comment #57)\n> While we're still working on some details of the code, I would like to invite you to test the proposed enhancement and give feedback, if it works for you or doesn't.\n> I've prepared instructions here:\n> https://wiki.mozilla.org/Thunderbird:OpenPGP:Aliases\n\nThank you very much for your effort. I succeeded to send my first test mail using the alias feature out of the box. Works perfectly fine. Alias overrides the trust setting as intended, like you described further above.\n\nHowever, within your wiki page, the link to the macOS build seems to be wrong. Points to a Linux tarball.", "text": "(In reply to Kai Engert (:KaiE:) from comment #57)\n> While we're still working on some details of the code, I would like to invite you to test the proposed enhancement and give feedback, if it works for you or doesn't.\n> I've prepared instructions here:\n> https://wiki.mozilla.org/Thunderbird:OpenPGP:Aliases\n\nThank you very much for your effort. I succeeded to send my first test mail using the alias feature out of the box. Works perfectly fine. Alias overrides the trust setting as intended, like you described further above.\n\nHowever, within your wiki page, the link to the macOS build seems to be wrong. Points to a Linux tarball.", "is_private": false, "creator": "clemens.hanel@tngtech.com", "author": "clemens.hanel@tngtech.com", "creation_time": "2020-12-23T10:00:39Z", "id": 15193332, "bug_id": 1644085, "count": 61, "tags": [], "time": "2020-12-23T10:00:39Z", "attachment_id": null}, {"is_private": false, "text": "Thank you, Kai. I haven't been able to test it. I'm using macOS but the downloaded experimental TB offered at https://wiki.mozilla.org/Thunderbird:OpenPGP:Aliases seems to be compiled for another OS. \n\nI was checking the explanation for creating the json file. In TB's key manager, we can easily copy the key ID, but it has the format of \"0xNNNNNNNNNNNNNNNN\" with 16 digits after the \"0x\". It would be most convinient when the json file will use exactly this format, i.e. the key ID as provided by the key manager. Thanks!", "raw_text": "Thank you, Kai. I haven't been able to test it. I'm using macOS but the downloaded experimental TB offered at https://wiki.mozilla.org/Thunderbird:OpenPGP:Aliases seems to be compiled for another OS. \n\nI was checking the explanation for creating the json file. In TB's key manager, we can easily copy the key ID, but it has the format of \"0xNNNNNNNNNNNNNNNN\" with 16 digits after the \"0x\". It would be most convinient when the json file will use exactly this format, i.e. the key ID as provided by the key manager. Thanks!", "id": 15204331, "author": "norbert.marwan@gmail.com", "bug_id": 1644085, "attachment_id": null, "creation_time": "2021-01-06T14:24:29Z", "creator": "norbert.marwan@gmail.com", "tags": [], "count": 62, "time": "2021-01-06T14:24:29Z"}, {"creator": "chriechers@netscape.net", "creation_time": "2021-01-12T17:06:52Z", "author": "chriechers@netscape.net", "id": 15212993, "raw_text": "Now that TB78.6.1 is out, how is this moving forward?\nWill there be a new experimental build with the alias functionality on top of TB78.6.1?\nOr will the alias functionality be incorporated into the next release version.\n\nI'd prefer the latter, however, a new experimental version would be needed as well, since TB78.6.1 fixes a critical security flaw.", "text": "Now that TB78.6.1 is out, how is this moving forward?\nWill there be a new experimental build with the alias functionality on top of TB78.6.1?\nOr will the alias functionality be incorporated into the next release version.\n\nI'd prefer the latter, however, a new experimental version would be needed as well, since TB78.6.1 fixes a critical security flaw.", "is_private": false, "time": "2021-01-12T17:06:52Z", "attachment_id": null, "count": 63, "bug_id": 1644085, "tags": []}, {"attachment_id": null, "bug_id": 1644085, "id": 15214533, "author": "kaie@kuix.de", "is_private": false, "raw_text": "We need some more time to potentially get the feature into an official release.\n\nIn the meantime I have created a new experimental build that includes the code from 78.6.1\nIn addition to the fix for this bug, it includes potential fixes for bug 1675325, bug 1679769, bug 1686055.\n\nlinux64: https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/SZd2vYKFSCq6Q9EiIXcV5g/runs/0/artifacts/public/build/target.tar.bz2\nlinux32: https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/APzeatjuQEGlk4iSSfqvHg/runs/0/artifacts/public/build/target.tar.bz2\nmacos: https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/PqYu5jW7QJ6hhfMw2C1_6w/runs/0/artifacts/public/build/target.dmg\nwin64: https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/c7HjNgC1QtSEd0lUvISYgg/runs/0/artifacts/public/build/target.zip\nwin32: https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/HFiVgB-8TxictlCjz7Lazw/runs/0/artifacts/public/build/target.zip", "text": "We need some more time to potentially get the feature into an official release.\n\nIn the meantime I have created a new experimental build that includes the code from 78.6.1\nIn addition to the fix for this bug, it includes potential fixes for bug 1675325, bug 1679769, bug 1686055.\n\nlinux64: https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/SZd2vYKFSCq6Q9EiIXcV5g/runs/0/artifacts/public/build/target.tar.bz2\nlinux32: https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/APzeatjuQEGlk4iSSfqvHg/runs/0/artifacts/public/build/target.tar.bz2\nmacos: https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/PqYu5jW7QJ6hhfMw2C1_6w/runs/0/artifacts/public/build/target.dmg\nwin64: https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/c7HjNgC1QtSEd0lUvISYgg/runs/0/artifacts/public/build/target.zip\nwin32: https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/HFiVgB-8TxictlCjz7Lazw/runs/0/artifacts/public/build/target.zip", "time": "2021-01-13T16:25:30Z", "tags": [], "count": 64, "creation_time": "2021-01-13T16:25:30Z", "creator": "kaie@kuix.de"}, {"raw_text": "Tested it, but works only partially for me. At my company, we use addresses like <Firstname.Lastname@company.example.com> by convention. The alias rule to map \"@company.example.com\" applies, as far as the recipient list is concerned. It lists the recipient \"Firstname.Lastname@company.example.com\" with the status \"a -> b\" as expected. When I try to send the email, I get an unspecific error. The developer console is not helpful in this case, too, as it only reports that the encryption failed without any details.\n\nIt works fine if I don't use capital letters in the local part, though. While our convention is to use <Firstname.Lastname@company.example.com>, our mailserver is case-insensitive (as usual), and mails addressed to <firstname.lastname@company.example.com> arrive as well, and applying the alias works perfectly in this case.", "text": "Tested it, but works only partially for me. At my company, we use addresses like <Firstname.Lastname@company.example.com> by convention. The alias rule to map \"@company.example.com\" applies, as far as the recipient list is concerned. It lists the recipient \"Firstname.Lastname@company.example.com\" with the status \"a -> b\" as expected. When I try to send the email, I get an unspecific error. The developer console is not helpful in this case, too, as it only reports that the encryption failed without any details.\n\nIt works fine if I don't use capital letters in the local part, though. While our convention is to use <Firstname.Lastname@company.example.com>, our mailserver is case-insensitive (as usual), and mails addressed to <firstname.lastname@company.example.com> arrive as well, and applying the alias works perfectly in this case.", "is_private": false, "author": "debian@mkarcher.dialup.fu-berlin.de", "id": 15221407, "bug_id": 1644085, "attachment_id": null, "creator": "debian@mkarcher.dialup.fu-berlin.de", "creation_time": "2021-01-18T11:17:53Z", "count": 65, "tags": [], "time": "2021-01-18T11:17:53Z"}, {"author": "flo.sammueller@gmail.com", "id": 15221482, "raw_text": "The problem in comment 65 sounds a lot like bug 1657390. Internally, TB converts all mail addresses to lower-case. Therefore, the comparison to \"Firstname.Lastname@company.example.com\" coming from the alias config file fails.\nMaybe when parsing the JSON file, TB should do a `.toLowerCase()` to have consistent data.", "text": "The problem in comment 65 sounds a lot like bug 1657390. Internally, TB converts all mail addresses to lower-case. Therefore, the comparison to \"Firstname.Lastname@company.example.com\" coming from the alias config file fails.\nMaybe when parsing the JSON file, TB should do a `.toLowerCase()` to have consistent data.", "is_private": false, "attachment_id": null, "bug_id": 1644085, "creator": "flo.sammueller@gmail.com", "creation_time": "2021-01-18T12:15:15Z", "time": "2021-01-18T12:15:15Z", "count": 66, "tags": []}, {"text": "Indeed it looks very similar. Note that my JSON file does only contain \"@company.example.com\", so no uppercase letters in that JSON file that could be affected by `.toLowerCase()`. The alias map in the encryption JSON object (dumped to the console) contains the recipient address with the capitalized local part, though, as does the \"to\" member in that JSON object:\n\n```\n{\n  \"sender\": \"0x0000000000000000\",\n  \"sign\": false,\n  \"signatureHash\": \"\",\n  \"sigTypeClear\": false,\n  \"sigTypeDetached\": false,\n  \"encrypt\": true,\n  \"encryptToSender\": true,\n  \"armor\": true,\n  \"senderKeyIsExternal\": false,\n  \"to\": [\n    \"<Firstname.Lastname@company.example.com>\"\n  ],\n  \"bcc\": [],\n  \"aliasKeys\": {\n    \"Firstname.Lastname@company.example.com\": [ \"111122223333444455556666777788889999AAAA\" ]\n  }\n}\n```", "raw_text": "Indeed it looks very similar. Note that my JSON file does only contain \"@company.example.com\", so no uppercase letters in that JSON file that could be affected by `.toLowerCase()`. The alias map in the encryption JSON object (dumped to the console) contains the recipient address with the capitalized local part, though, as does the \"to\" member in that JSON object:\n\n```\n{\n  \"sender\": \"0x0000000000000000\",\n  \"sign\": false,\n  \"signatureHash\": \"\",\n  \"sigTypeClear\": false,\n  \"sigTypeDetached\": false,\n  \"encrypt\": true,\n  \"encryptToSender\": true,\n  \"armor\": true,\n  \"senderKeyIsExternal\": false,\n  \"to\": [\n    \"<Firstname.Lastname@company.example.com>\"\n  ],\n  \"bcc\": [],\n  \"aliasKeys\": {\n    \"Firstname.Lastname@company.example.com\": [ \"111122223333444455556666777788889999AAAA\" ]\n  }\n}\n```", "is_private": false, "author": "debian@mkarcher.dialup.fu-berlin.de", "id": 15221499, "bug_id": 1644085, "attachment_id": null, "creator": "debian@mkarcher.dialup.fu-berlin.de", "creation_time": "2021-01-18T12:37:49Z", "count": 67, "tags": [], "time": "2021-01-18T12:37:49Z"}, {"bug_id": 1644085, "count": 68, "tags": [], "time": "2021-01-27T19:09:24Z", "attachment_id": null, "text": "TB 78.7.0 is out, including some important security fixes.\nOnce again, will there be a new experimental build with the alias functionality on top of TB 78.7.0?", "raw_text": "TB 78.7.0 is out, including some important security fixes.\nOnce again, will there be a new experimental build with the alias functionality on top of TB 78.7.0?", "is_private": false, "creator": "chriechers@netscape.net", "id": 15236462, "creation_time": "2021-01-27T19:09:24Z", "author": "chriechers@netscape.net"}, {"attachment_id": null, "bug_id": 1644085, "author": "chriechers@netscape.net", "id": 15240623, "is_private": false, "raw_text": "While I understand there's nothing guaranteed with the experimental build, the lack of consistent updates for it, and the uncertainty whether there will be updates at all is a no go. I reverted to the release version for normal use, and will have to fall back to TB68 for group encryption. I don't think I will try an experimental version again under these uncertain terms.\nI can only hope the alias functionality will land in the release version soon.", "text": "While I understand there's nothing guaranteed with the experimental build, the lack of consistent updates for it, and the uncertainty whether there will be updates at all is a no go. I reverted to the release version for normal use, and will have to fall back to TB68 for group encryption. I don't think I will try an experimental version again under these uncertain terms.\nI can only hope the alias functionality will land in the release version soon.", "time": "2021-01-30T09:06:16Z", "tags": [], "count": 69, "creation_time": "2021-01-30T09:06:16Z", "creator": "chriechers@netscape.net"}, {"author": "drodrig@outlook.com", "id": 15248311, "text": "Encryption messages to lists work. This would be perfect for me if integrated into the release version.", "raw_text": "Encryption messages to lists work. This would be perfect for me if integrated into the release version.", "is_private": false, "attachment_id": null, "bug_id": 1644085, "creator": "drodrig@outlook.com", "creation_time": "2021-02-03T23:20:33Z", "time": "2021-02-03T23:20:33Z", "count": 70, "tags": []}, {"attachment_id": null, "bug_id": 1644085, "author": "kaie@kuix.de", "id": 15254323, "is_private": false, "raw_text": "For context and past comments on the following detail, please search this page for \"failure\".\n\nDuring code review, Magnus said, in his opinion failures shouldn't be allowed at all. He suggests, if an alias rule maps to a key that is unusable, then it should always result in a failure to send.\n\nIn other words, Magnus suggests we remove the ignore_failures flag from the alias definition, and behave as ignore_failures=false.\n\nDoes anyone disagree and can present a strong argument why the ignore_failures flag MUST be provided in the initial implementation?", "text": "For context and past comments on the following detail, please search this page for \"failure\".\n\nDuring code review, Magnus said, in his opinion failures shouldn't be allowed at all. He suggests, if an alias rule maps to a key that is unusable, then it should always result in a failure to send.\n\nIn other words, Magnus suggests we remove the ignore_failures flag from the alias definition, and behave as ignore_failures=false.\n\nDoes anyone disagree and can present a strong argument why the ignore_failures flag MUST be provided in the initial implementation?", "time": "2021-02-08T08:41:34Z", "tags": [], "count": 71, "creation_time": "2021-02-08T08:41:34Z", "creator": "kaie@kuix.de"}, {"creation_time": "2021-02-08T09:22:31Z", "creator": "kaie@kuix.de", "tags": [], "count": 72, "time": "2021-02-08T09:22:31Z", "is_private": false, "raw_text": "Magnus made another suggestion during code review.\n\nHe suggests, the presence of an alias rule for a specific email address should override a domain alias.\n\nIn other words, if two rule exists for bob@example.com and @example.com, but no rule exists for alice@example.com, then\n- an email to bob@example.com is encrypted to the key(s) defined for bob, only\n- an email to alice@example.com is encrypted using the domain key(s) for @example.com\n\n(In my previous explanations, I suggested the email to bob@example.com would be encrypted to both aliases, email alias AND domain alias.)\n\nCan everyone accept this simplification?", "text": "Magnus made another suggestion during code review.\n\nHe suggests, the presence of an alias rule for a specific email address should override a domain alias.\n\nIn other words, if two rule exists for bob@example.com and @example.com, but no rule exists for alice@example.com, then\n- an email to bob@example.com is encrypted to the key(s) defined for bob, only\n- an email to alice@example.com is encrypted using the domain key(s) for @example.com\n\n(In my previous explanations, I suggested the email to bob@example.com would be encrypted to both aliases, email alias AND domain alias.)\n\nCan everyone accept this simplification?", "author": "kaie@kuix.de", "id": 15254355, "bug_id": 1644085, "attachment_id": null}, {"raw_text": "Generally, such a failure is just an indication that the user's keystore is not up to date or the key is misconfigured, and so the user will be strongly encouraged to synchronize their keystore with the mailing list. I think we can live without such a flag, provided that the wrong keys can be identified by the user.\n\nI think the simplification for the domain keys is fine.", "text": "Generally, such a failure is just an indication that the user's keystore is not up to date or the key is misconfigured, and so the user will be strongly encouraged to synchronize their keystore with the mailing list. I think we can live without such a flag, provided that the wrong keys can be identified by the user.\n\nI think the simplification for the domain keys is fine.", "is_private": false, "id": 15254378, "author": "clemens.hanel@tngtech.com", "bug_id": 1644085, "attachment_id": null, "creator": "clemens.hanel@tngtech.com", "creation_time": "2021-02-08T09:36:03Z", "count": 73, "tags": [], "time": "2021-02-08T09:36:03Z"}, {"raw_text": "I think the simplification regarding domain keys is actually more flexible:\n- If you want to encrypt an email to Bob with both Bob's key andthe domain key, you could add both keys to Bob's rule, no?\n- If you don't want to include the domain key but still want the domain rule (for other recipients) this wasn't possible before.", "text": "I think the simplification regarding domain keys is actually more flexible:\n- If you want to encrypt an email to Bob with both Bob's key andthe domain key, you could add both keys to Bob's rule, no?\n- If you don't want to include the domain key but still want the domain rule (for other recipients) this wasn't possible before.", "is_private": false, "id": 15256129, "author": "kg@paktolos.net", "bug_id": 1644085, "attachment_id": null, "creator": "kg@paktolos.net", "creation_time": "2021-02-09T06:47:34Z", "count": 74, "tags": [], "time": "2021-02-09T06:47:34Z"}, {"bug_id": 1644085, "count": 75, "tags": [], "time": "2021-02-11T17:46:28Z", "attachment_id": 9202635, "raw_text": "In phabricator is the patch for comm-central.\n\nThis attached file is a merged version for esr78.", "text": "Created attachment 9202635\nmerged for esr78\n\nIn phabricator is the patch for comm-central.\n\nThis attached file is a merged version for esr78.", "is_private": false, "creator": "kaie@kuix.de", "author": "kaie@kuix.de", "creation_time": "2021-02-11T17:46:28Z", "id": 15260631}, {"tags": [], "count": 76, "time": "2021-02-11T18:02:37Z", "creation_time": "2021-02-11T18:02:37Z", "creator": "kaie@kuix.de", "bug_id": 1644085, "attachment_id": null, "is_private": false, "raw_text": "I'll link a new experimental build (esr78 branch) today.\nApologies for the delay, my body needed a bugfix.", "text": "I'll link a new experimental build (esr78 branch) today.\nApologies for the delay, my body needed a bugfix.", "author": "kaie@kuix.de", "id": 15260660}, {"creator": "kaie@kuix.de", "author": "kaie@kuix.de", "creation_time": "2021-02-11T19:23:46Z", "id": 15260775, "raw_text": "experimental 78.x build with the attached patch:\nhttps://treeherder.mozilla.org/jobs?repo=try-comm-central&revision=64cd39fcdd8ebdcb63f1c28181c00bac893f5922&selectedTaskRun=JrNT5mLnRG2WXeTSIuLTtQ.0\n\nDirect links to test binaries:\nlinux64: https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/ZyVRgAtZQeCcu2zmGgEJwA/runs/0/artifacts/public/build/target.tar.bz2\nlinux32: https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/He3aSqSbSsa7np24f7oHLw/runs/0/artifacts/public/build/target.tar.bz2\nmacos: https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/Bj9hpiMZR_--mtNgB82dRQ/runs/0/artifacts/public/build/target.dmg\nwin64: https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/OWB1cpg_SPmLT92aLquCGA/runs/0/artifacts/public/build/target.zip\nwin32: https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/c2JobwiwQfu7dwb_xPCAxg/runs/0/artifacts/public/build/target.zip", "text": "experimental 78.x build with the attached patch:\nhttps://treeherder.mozilla.org/jobs?repo=try-comm-central&revision=64cd39fcdd8ebdcb63f1c28181c00bac893f5922&selectedTaskRun=JrNT5mLnRG2WXeTSIuLTtQ.0\n\nDirect links to test binaries:\nlinux64: https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/ZyVRgAtZQeCcu2zmGgEJwA/runs/0/artifacts/public/build/target.tar.bz2\nlinux32: https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/He3aSqSbSsa7np24f7oHLw/runs/0/artifacts/public/build/target.tar.bz2\nmacos: https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/Bj9hpiMZR_--mtNgB82dRQ/runs/0/artifacts/public/build/target.dmg\nwin64: https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/OWB1cpg_SPmLT92aLquCGA/runs/0/artifacts/public/build/target.zip\nwin32: https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/c2JobwiwQfu7dwb_xPCAxg/runs/0/artifacts/public/build/target.zip", "is_private": false, "time": "2021-02-11T19:23:46Z", "attachment_id": null, "bug_id": 1644085, "count": 77, "tags": []}, {"id": 15261103, "author": "dnk089@riseup.net", "is_private": false, "text": "I tested the new binary within Debian 10. Encryption seems to work as expected, thanks for working on this!  \n\nUnfortunately, when I want to check the \"Message Security\" info of the message sent by clicking on the OpenPGP Button on the right side of the message header, as the window is (of course) too small to show all recipients and I can't scroll down to see the other recipients (see attached screenshot). It would be great to have the possibility to see all recipients the message was encrypted to.  \n\nApart from this I'm happy with the solution.", "raw_text": "I tested the new binary within Debian 10. Encryption seems to work as expected, thanks for working on this!  \n\nUnfortunately, when I want to check the \"Message Security\" info of the message sent by clicking on the OpenPGP Button on the right side of the message header, as the window is (of course) too small to show all recipients and I can't scroll down to see the other recipients (see attached screenshot). It would be great to have the possibility to see all recipients the message was encrypted to.  \n\nApart from this I'm happy with the solution.", "attachment_id": null, "bug_id": 1644085, "creation_time": "2021-02-11T22:01:00Z", "creator": "dnk089@riseup.net", "time": "2021-02-11T22:01:00Z", "tags": [], "count": 78}, {"creator": "dnk089@riseup.net", "creation_time": "2021-02-11T22:02:21Z", "time": "2021-02-11T22:02:21Z", "count": 79, "tags": [], "author": "dnk089@riseup.net", "id": 15261105, "text": "Created attachment 9202705\nTB_78.7.2_OpenPGP_Aliases_MessageSecurityInfo-20210211_22-35-32.png", "raw_text": "", "is_private": false, "attachment_id": 9202705, "bug_id": 1644085}, {"creator": "clemens.hanel@tngtech.com", "creation_time": "2021-02-12T09:31:34Z", "count": 80, "tags": [], "time": "2021-02-12T09:31:34Z", "raw_text": "@dnk089\n\nInteresting... I am using it on Arch with i3 and got a scroll bar. Seems to be inconsistent.", "text": "@dnk089\n\nInteresting... I am using it on Arch with i3 and got a scroll bar. Seems to be inconsistent.", "is_private": false, "id": 15261830, "author": "clemens.hanel@tngtech.com", "bug_id": 1644085, "attachment_id": null}, {"creation_time": "2021-02-12T09:48:43Z", "creator": "dnk089@riseup.net", "time": "2021-02-12T09:48:43Z", "tags": [], "count": 81, "author": "dnk089@riseup.net", "id": 15261838, "is_private": false, "text": "@Clemens Hanel: Interesting, too. I rechecked by sending mails directly to more then 6 Recipients (without using Aliases) and it's the same. So the problem is not connected to this bug. I'll try to find a corresponding bug report ...", "raw_text": "@Clemens Hanel: Interesting, too. I rechecked by sending mails directly to more then 6 Recipients (without using Aliases) and it's the same. So the problem is not connected to this bug. I'll try to find a corresponding bug report ...", "attachment_id": null, "bug_id": 1644085}, {"count": 82, "tags": [], "time": "2021-02-12T14:30:22Z", "creator": "kaie@kuix.de", "creation_time": "2021-02-12T14:30:22Z", "bug_id": 1644085, "attachment_id": null, "text": "I think there is no bug for that issue yet. You commented in bug 1679002, but that's a different window.\n\nThe issue from comment 78 and following should be reported as a new bug, please CC :aleca on the new bug, who is likely to work on a fix.", "raw_text": "I think there is no bug for that issue yet. You commented in bug 1679002, but that's a different window.\n\nThe issue from comment 78 and following should be reported as a new bug, please CC :aleca on the new bug, who is likely to work on a fix.", "is_private": false, "author": "kaie@kuix.de", "id": 15262271}, {"author": "dnk089@riseup.net", "id": 15262318, "text": "(In reply to Kai Engert (:KaiE:) from comment #82)\n> I think there is no bug for that issue yet. You commented in bug 1679002, but that's a different window.\n> \n> The issue from comment 78 and following should be reported as a new bug, please CC :aleca on the new bug, who is likely to work on a fix.\n\nThanks, see https://bugzilla.mozilla.org/show_bug.cgi?id=1692497", "raw_text": "(In reply to Kai Engert (:KaiE:) from comment #82)\n> I think there is no bug for that issue yet. You commented in bug 1679002, but that's a different window.\n> \n> The issue from comment 78 and following should be reported as a new bug, please CC :aleca on the new bug, who is likely to work on a fix.\n\nThanks, see https://bugzilla.mozilla.org/show_bug.cgi?id=1692497", "is_private": false, "attachment_id": null, "bug_id": 1644085, "creator": "dnk089@riseup.net", "creation_time": "2021-02-12T15:04:29Z", "time": "2021-02-12T15:04:29Z", "count": 83, "tags": []}, {"creator": "dnk089@riseup.net", "creation_time": "2021-02-23T08:07:50Z", "time": "2021-02-23T08:07:50Z", "count": 84, "tags": [], "id": 15278037, "author": "dnk089@riseup.net", "text": "Following the diskussion in Phabricator (https://phabricator.services.mozilla.com/D97973), pls note that adding an alias-encrypted mailing list in BCC would be really helpfull. Sometimes it is necessary to e.g. respond to an email and giving a signal to an alias-encrypted internal list, that I take care about this mail. Therefore it would be great to simply add the list to BCC. Otherwise I would have to forward the just sent mail to the list afterwards.\n\nBTW: I am not sure if an email would disclose the recipient's keys to TO-address, when using BCC with (alias) pgp key(s) - enigmail or OpenPGP.", "raw_text": "Following the diskussion in Phabricator (https://phabricator.services.mozilla.com/D97973), pls note that adding an alias-encrypted mailing list in BCC would be really helpfull. Sometimes it is necessary to e.g. respond to an email and giving a signal to an alias-encrypted internal list, that I take care about this mail. Therefore it would be great to simply add the list to BCC. Otherwise I would have to forward the just sent mail to the list afterwards.\n\nBTW: I am not sure if an email would disclose the recipient's keys to TO-address, when using BCC with (alias) pgp key(s) - enigmail or OpenPGP.", "is_private": false, "attachment_id": null, "bug_id": 1644085}, {"bug_id": 1644085, "attachment_id": null, "raw_text": "It would. Bcc with encryption is not let through at the moment (due to that).", "text": "It would. Bcc with encryption is not let through at the moment (due to that).", "is_private": false, "author": "mkmelin+mozilla@iki.fi", "id": 15278321, "count": 85, "tags": [], "time": "2021-02-23T11:24:13Z", "creator": "mkmelin+mozilla@iki.fi", "creation_time": "2021-02-23T11:24:13Z"}, {"time": "2021-02-23T12:09:43Z", "tags": [], "count": 86, "creation_time": "2021-02-23T12:09:43Z", "creator": "dnk089@riseup.net", "attachment_id": null, "bug_id": 1644085, "author": "dnk089@riseup.net", "id": 15278372, "is_private": false, "text": "Thx. Then its ok to keep it like that (a hint would be wonderfull).", "raw_text": "Thx. Then its ok to keep it like that (a hint would be wonderfull)."}, {"time": "2021-02-23T15:34:51Z", "tags": [], "count": 87, "creation_time": "2021-02-23T15:34:51Z", "creator": "kaie@kuix.de", "attachment_id": null, "bug_id": 1644085, "id": 15278634, "author": "kaie@kuix.de", "is_private": false, "raw_text": "I originally wanted to have a single patch that applies on both comm-central and comm-esr78.\nThat was the purpose of the small phabricator patch D99062, which Magnus had already r+'ed.\n\nIn the meantime both branches have diverted in some details. It's necessary to have a manually merged patch for esr78.\nI'll add the contents of D99062 to future patches for esr78.", "text": "I originally wanted to have a single patch that applies on both comm-central and comm-esr78.\nThat was the purpose of the small phabricator patch D99062, which Magnus had already r+'ed.\n\nIn the meantime both branches have diverted in some details. It's necessary to have a manually merged patch for esr78.\nI'll add the contents of D99062 to future patches for esr78."}, {"attachment_id": 9204863, "bug_id": 1644085, "author": "kaie@kuix.de", "id": 15278650, "raw_text": "merged for esr78", "text": "Created attachment 9204863\n1644085-20210223-esr78.patch\n\nmerged for esr78", "is_private": false, "time": "2021-02-23T15:47:58Z", "count": 88, "tags": [], "creator": "kaie@kuix.de", "creation_time": "2021-02-23T15:47:58Z"}, {"time": "2021-02-23T17:24:15Z", "tags": [], "count": 89, "creation_time": "2021-02-23T17:24:15Z", "creator": "kaie@kuix.de", "attachment_id": null, "bug_id": 1644085, "id": 15279044, "author": "kaie@kuix.de", "is_private": false, "text": "development branch (comm-central) try build:\nhttps://treeherder.mozilla.org/jobs?repo=try-comm-central&revision=5ce8027a55b7d2e22413921ae6e4722823894f19", "raw_text": "development branch (comm-central) try build:\nhttps://treeherder.mozilla.org/jobs?repo=try-comm-central&revision=5ce8027a55b7d2e22413921ae6e4722823894f19"}, {"time": "2021-02-23T17:29:50Z", "count": 90, "tags": [], "creator": "kaie@kuix.de", "creation_time": "2021-02-23T17:29:50Z", "attachment_id": null, "bug_id": 1644085, "id": 15279052, "author": "kaie@kuix.de", "raw_text": "Thunderbird 78.x try build (comm-esr78):\nhttps://treeherder.mozilla.org/jobs?repo=try-comm-central&revision=ab95be0d46b63c548e260704d87c5c5328dc23c2\n\nIf you would like to test, please note that the syntax of the json file has changed, please see the test files in the phabricator attachment for examples. It's now possible to use short IDs instead of the fingerprint.\n\nBelow are download links to an experimental 78.x build that contains the latest patch.\n(the build also contains patches for bug 1681887, bug 1673239 and bug 1692909)\n\nLinux64: https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/DzoKKoDpRAqE-ZNaByabzw/runs/0/artifacts/public/build/target.tar.bz2\nLinux32: https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/fgfw6hIhRpWyYcMnTi4LFg/runs/0/artifacts/public/build/target.tar.bz2\nWin64: https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/LBmszX1fRAmS9kS_MimK4w/runs/0/artifacts/public/build/target.zip\nWin32: https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/Nu-gfnKyR4eu9ybTWD7zUg/runs/0/artifacts/public/build/target.zip\nmacOS: https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/Mc8RLHaiSOKIp-hxo6Ln_A/runs/0/artifacts/public/build/target.dmg", "text": "Thunderbird 78.x try build (comm-esr78):\nhttps://treeherder.mozilla.org/jobs?repo=try-comm-central&revision=ab95be0d46b63c548e260704d87c5c5328dc23c2\n\nIf you would like to test, please note that the syntax of the json file has changed, please see the test files in the phabricator attachment for examples. It's now possible to use short IDs instead of the fingerprint.\n\nBelow are download links to an experimental 78.x build that contains the latest patch.\n(the build also contains patches for bug 1681887, bug 1673239 and bug 1692909)\n\nLinux64: https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/DzoKKoDpRAqE-ZNaByabzw/runs/0/artifacts/public/build/target.tar.bz2\nLinux32: https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/fgfw6hIhRpWyYcMnTi4LFg/runs/0/artifacts/public/build/target.tar.bz2\nWin64: https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/LBmszX1fRAmS9kS_MimK4w/runs/0/artifacts/public/build/target.zip\nWin32: https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/Nu-gfnKyR4eu9ybTWD7zUg/runs/0/artifacts/public/build/target.zip\nmacOS: https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/Mc8RLHaiSOKIp-hxo6Ln_A/runs/0/artifacts/public/build/target.dmg", "is_private": false}, {"attachment_id": null, "bug_id": 1644085, "author": "cl101@mail77.eu", "id": 15280190, "text": "Is there any date known/expected when GPG aliases will be included in the official release channel version? Its not in the latest 78.8.0.\n\nI also looked at the changelog available for the beta channel (e.g. https://www.thunderbird.net/en-US/thunderbird/86.0beta/releasenotes/ and older) but didn't find anything regarding GPG aliases in the more recent releases. So it seems this feature hasn't yet made it into beta? I also followed subject encryption, and it took about a month to move this feature from beta (v83, end of October 2020) to the official release (v78.5.1, beginning of December 2020).\n\nSo are there any expectations when we could see this feature in a beta release?\n\nDue to this missing feature, we are all still with version v68.x. We don't want to implement alternatives to gpg-aliases/per-recipient rules, and then switch back again whenever GPG-alias functionality is released in the official channel. It would only confuse our colleagues, and mean a lot of work for us explaining those changes. \n\nIhe latest v68 has been released in October 2020, and I would expect it is EOL since some months now, so naturally we want to know whether we should wait for GPG aliases making it into release channel soon, or we have to think of per-recipient alternatives.", "raw_text": "Is there any date known/expected when GPG aliases will be included in the official release channel version? Its not in the latest 78.8.0.\n\nI also looked at the changelog available for the beta channel (e.g. https://www.thunderbird.net/en-US/thunderbird/86.0beta/releasenotes/ and older) but didn't find anything regarding GPG aliases in the more recent releases. So it seems this feature hasn't yet made it into beta? I also followed subject encryption, and it took about a month to move this feature from beta (v83, end of October 2020) to the official release (v78.5.1, beginning of December 2020).\n\nSo are there any expectations when we could see this feature in a beta release?\n\nDue to this missing feature, we are all still with version v68.x. We don't want to implement alternatives to gpg-aliases/per-recipient rules, and then switch back again whenever GPG-alias functionality is released in the official channel. It would only confuse our colleagues, and mean a lot of work for us explaining those changes. \n\nIhe latest v68 has been released in October 2020, and I would expect it is EOL since some months now, so naturally we want to know whether we should wait for GPG aliases making it into release channel soon, or we have to think of per-recipient alternatives.", "is_private": false, "time": "2021-02-24T09:51:55Z", "count": 91, "tags": [], "creator": "cl101@mail77.eu", "creation_time": "2021-02-24T09:51:55Z"}, {"raw_text": "The patch is pretty far, so I'd expect it by 78.9.0 in a month.", "text": "The patch is pretty far, so I'd expect it by 78.9.0 in a month.", "is_private": false, "author": "mkmelin+mozilla@iki.fi", "id": 15280356, "bug_id": 1644085, "attachment_id": null, "creator": "mkmelin+mozilla@iki.fi", "creation_time": "2021-02-24T11:44:03Z", "count": 92, "tags": [], "time": "2021-02-24T11:44:03Z"}, {"creation_time": "2021-02-24T18:27:30Z", "creator": "chriechers@netscape.net", "time": "2021-02-24T18:27:30Z", "tags": [], "count": 93, "id": 15280948, "author": "chriechers@netscape.net", "is_private": false, "text": "(In reply to Kai Engert (:KaiE:) from comment #90)\n> Below are download links to an experimental 78.x build that contains the latest patch.\n> (the build also contains patches for bug 1681887, bug 1673239 and bug 1692909)\n\nThe new try build does not work for me. I do use an offline primary OpenPGP key, hence the private key is in the GnuPG keyring, and only the public key is in the TB78 OpenPGP Key Manager.\nWhen attempting to send an encrypted message I get this error:\n\"Unable to send the message, because there is a problem with your personal key. You do not seem to have the secret key for <my secret key> on your keyring; you cannot use the key for signing.\"\n\nOS is OpenSUSE Linux. As per the Error Console gpgme isn't the problem:\nSuccessfully loaded optional OpenPGP library libgpgme.so.11 from system's standard library locations\n\nThe error remains the same when turning off signing. It doesn't make any difference whether an actual alias is used or not. So this looks more like a generic problem. There was no such problem with the previous try build based on TB78.7.1. There is no problem with the TB78.8.0 release version either.\n\nNot directly related, I also adjusted the syntax of the json file as per the examples at https://phabricator.services.mozilla.com/D97973#change-qmH8rDI6Zn2w.\nIs that the right place to look at? It isn't obvious to me based on the terse explanation in comment #90.\nThanks.", "raw_text": "(In reply to Kai Engert (:KaiE:) from comment #90)\n> Below are download links to an experimental 78.x build that contains the latest patch.\n> (the build also contains patches for bug 1681887, bug 1673239 and bug 1692909)\n\nThe new try build does not work for me. I do use an offline primary OpenPGP key, hence the private key is in the GnuPG keyring, and only the public key is in the TB78 OpenPGP Key Manager.\nWhen attempting to send an encrypted message I get this error:\n\"Unable to send the message, because there is a problem with your personal key. You do not seem to have the secret key for <my secret key> on your keyring; you cannot use the key for signing.\"\n\nOS is OpenSUSE Linux. As per the Error Console gpgme isn't the problem:\nSuccessfully loaded optional OpenPGP library libgpgme.so.11 from system's standard library locations\n\nThe error remains the same when turning off signing. It doesn't make any difference whether an actual alias is used or not. So this looks more like a generic problem. There was no such problem with the previous try build based on TB78.7.1. There is no problem with the TB78.8.0 release version either.\n\nNot directly related, I also adjusted the syntax of the json file as per the examples at https://phabricator.services.mozilla.com/D97973#change-qmH8rDI6Zn2w.\nIs that the right place to look at? It isn't obvious to me based on the terse explanation in comment #90.\nThanks.", "attachment_id": null, "bug_id": 1644085}, {"creator": "kaie@kuix.de", "creation_time": "2021-02-24T19:06:21Z", "time": "2021-02-24T19:06:21Z", "count": 94, "tags": [], "author": "kaie@kuix.de", "id": 15281025, "text": "Christian, thanks for the feedback. What was the last experimental build that worked for you with your setup?", "raw_text": "Christian, thanks for the feedback. What was the last experimental build that worked for you with your setup?", "is_private": false, "attachment_id": null, "bug_id": 1644085}, {"count": 95, "tags": [], "time": "2021-02-24T19:13:32Z", "creator": "chriechers@netscape.net", "creation_time": "2021-02-24T19:13:32Z", "bug_id": 1644085, "attachment_id": null, "text": "The one in comment #77, a.k.a. Daily 78.7.2.", "raw_text": "The one in comment #77, a.k.a. Daily 78.7.2.", "is_private": false, "id": 15281032, "author": "chriechers@netscape.net"}, {"creation_time": "2021-02-24T19:18:12Z", "creator": "bugzilla@kgb.ovh", "time": "2021-02-24T19:18:12Z", "tags": [], "count": 96, "id": 15281040, "author": "bugzilla@kgb.ovh", "is_private": false, "raw_text": "(In reply to Christian Riechers from comment #93)\n> The new try build does not work for me. I do use an offline primary OpenPGP key, hence the private key is in the GnuPG keyring, and only the public key is in the TB78 OpenPGP Key Manager.\n> When attempting to send an encrypted message I get this error:\n> \"Unable to send the message, because there is a problem with your personal key. You do not seem to have the secret key for <my secret key> on your keyring; you cannot use the key for signing.\"\n\nChristian, do you use encrypted but unsigned email? If so, you should be aware that it\u2019s a bad idea: https://k9mail.app/2017/01/30/OpenPGP-Considerations-Part-II.html Several software don\u2019t support such a feature and I\u2019m surprised TB does.", "text": "(In reply to Christian Riechers from comment #93)\n> The new try build does not work for me. I do use an offline primary OpenPGP key, hence the private key is in the GnuPG keyring, and only the public key is in the TB78 OpenPGP Key Manager.\n> When attempting to send an encrypted message I get this error:\n> \"Unable to send the message, because there is a problem with your personal key. You do not seem to have the secret key for <my secret key> on your keyring; you cannot use the key for signing.\"\n\nChristian, do you use encrypted but unsigned email? If so, you should be aware that it\u2019s a bad idea: https://k9mail.app/2017/01/30/OpenPGP-Considerations-Part-II.html Several software don\u2019t support such a feature and I\u2019m surprised TB does.", "attachment_id": null, "bug_id": 1644085}, {"tags": [], "count": 97, "time": "2021-02-24T20:10:51Z", "creation_time": "2021-02-24T20:10:51Z", "creator": "kaie@kuix.de", "bug_id": 1644085, "attachment_id": null, "is_private": false, "text": "I found the cause for the regression reported by Christian in comment 93.\nIt was a mistake in a regular expression.\nPhabricator has already been updated.\n\nI'll soon upload a new 78 experimental build.\n\nNote that the most recent build had changed the json syntax to use \"id\" for both fingerprints and key IDs. Magnus has requested that I change that, so the json file needs to specify fingerprints with \"fpr\" and key IDs with \"id\".", "raw_text": "I found the cause for the regression reported by Christian in comment 93.\nIt was a mistake in a regular expression.\nPhabricator has already been updated.\n\nI'll soon upload a new 78 experimental build.\n\nNote that the most recent build had changed the json syntax to use \"id\" for both fingerprints and key IDs. Magnus has requested that I change that, so the json file needs to specify fingerprints with \"fpr\" and key IDs with \"id\".", "id": 15281115, "author": "kaie@kuix.de"}, {"text": "Created attachment 9205184\n1644085-20210224-esr78.patch", "raw_text": "", "is_private": false, "id": 15281126, "author": "kaie@kuix.de", "bug_id": 1644085, "attachment_id": 9205184, "creator": "kaie@kuix.de", "creation_time": "2021-02-24T20:16:49Z", "count": 98, "tags": [], "time": "2021-02-24T20:16:49Z"}, {"creator": "kg@paktolos.net", "creation_time": "2021-02-24T22:00:58Z", "time": "2021-02-24T22:00:58Z", "count": 99, "tags": [], "id": 15281325, "author": "kg@paktolos.net", "text": "Is \"fpr\" a common abbreviation? Why not use \"fingerprint\"?", "raw_text": "Is \"fpr\" a common abbreviation? Why not use \"fingerprint\"?", "is_private": false, "attachment_id": null, "bug_id": 1644085}, {"bug_id": 1644085, "attachment_id": null, "is_private": false, "raw_text": "(In reply to kg from comment #99)\n> Is \"fpr\" a common abbreviation? Why not use \"fingerprint\"?\n\nMaybe not common, but it's less typing.  It will be documented.", "text": "(In reply to kg from comment #99)\n> Is \"fpr\" a common abbreviation? Why not use \"fingerprint\"?\n\nMaybe not common, but it's less typing.  It will be documented.", "author": "kaie@kuix.de", "id": 15281491, "tags": [], "count": 100, "time": "2021-02-24T23:10:50Z", "creation_time": "2021-02-24T23:10:50Z", "creator": "kaie@kuix.de"}, {"id": 15282307, "author": "kaie@kuix.de", "is_private": false, "text": "Created attachment 9205357\nBug 1644085 - Support recipient aliases for OpenPGP encryption. r=mkmelin", "raw_text": "", "attachment_id": 9205357, "bug_id": 1644085, "creation_time": "2021-02-25T12:10:22Z", "creator": "kaie@kuix.de", "time": "2021-02-25T12:10:22Z", "tags": [], "count": 101}, {"creation_time": "2021-02-25T12:18:58Z", "author": "kaie@kuix.de", "id": 15282331, "creator": "kaie@kuix.de", "is_private": false, "raw_text": "(In reply to Kai Engert (:KaiE:) from comment #100)\n> (In reply to kg from comment #99)\n> > Is \"fpr\" a common abbreviation? Why not use \"fingerprint\"?\n> \n> Maybe not common, but it's less typing.  It will be documented.\n\nafter your comment, Magnus actually requested to change it to \"fingerprint... so, format will change again.", "text": "(In reply to Kai Engert (:KaiE:) from comment #100)\n> (In reply to kg from comment #99)\n> > Is \"fpr\" a common abbreviation? Why not use \"fingerprint\"?\n> \n> Maybe not common, but it's less typing.  It will be documented.\n\nafter your comment, Magnus actually requested to change it to \"fingerprint... so, format will change again.", "time": "2021-02-25T12:18:58Z", "attachment_id": null, "tags": [], "bug_id": 1644085, "count": 102}, {"id": 15282339, "author": "kaie@kuix.de", "is_private": false, "text": "Created attachment 9205359\n1644085-0225a-esr78.patch", "raw_text": "", "attachment_id": 9205359, "bug_id": 1644085, "creation_time": "2021-02-25T12:21:14Z", "creator": "kaie@kuix.de", "time": "2021-02-25T12:21:14Z", "tags": [], "count": 103}, {"text": "New experimental build based on esr78, TB 78.x with latest patch (plus patches mentioned in comment 90):\n\nhttps://treeherder.mozilla.org/jobs?repo=try-comm-central&revision=91257856b14cbec02c462202467fccc1fd4ac947&selectedTaskRun=SGePVAqfQC-dLcNZOom7Og.0\n\nlinux64: https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/KJ0YwaCST-2yOlCeD6AYNQ/runs/0/artifacts/public/build/target.tar.bz2\nlinux32: https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/UoLtCrsFTW-rrVzRXuGfPg/runs/0/artifacts/public/build/target.tar.bz2\nmacOS: https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/Y_PyAnYtSpKYV8WmCOwBcw/runs/0/artifacts/public/build/target.dmg\nwin64: https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/CACBj_yzRbyLWYAUWOPpOA/runs/0/artifacts/public/build/target.zip\nwin32: https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/X1OzH6z5QSaMPT0v-vqrRQ/runs/0/artifacts/public/build/target.zip", "raw_text": "New experimental build based on esr78, TB 78.x with latest patch (plus patches mentioned in comment 90):\n\nhttps://treeherder.mozilla.org/jobs?repo=try-comm-central&revision=91257856b14cbec02c462202467fccc1fd4ac947&selectedTaskRun=SGePVAqfQC-dLcNZOom7Og.0\n\nlinux64: https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/KJ0YwaCST-2yOlCeD6AYNQ/runs/0/artifacts/public/build/target.tar.bz2\nlinux32: https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/UoLtCrsFTW-rrVzRXuGfPg/runs/0/artifacts/public/build/target.tar.bz2\nmacOS: https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/Y_PyAnYtSpKYV8WmCOwBcw/runs/0/artifacts/public/build/target.dmg\nwin64: https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/CACBj_yzRbyLWYAUWOPpOA/runs/0/artifacts/public/build/target.zip\nwin32: https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/X1OzH6z5QSaMPT0v-vqrRQ/runs/0/artifacts/public/build/target.zip", "is_private": false, "author": "kaie@kuix.de", "id": 15282528, "bug_id": 1644085, "attachment_id": null, "creator": "kaie@kuix.de", "creation_time": "2021-02-25T14:04:13Z", "count": 104, "tags": [], "time": "2021-02-25T14:04:13Z"}, {"creation_time": "2021-02-25T21:51:29Z", "creator": "pulsebot@bots.tld", "tags": [], "count": 105, "time": "2021-02-25T21:51:29Z", "is_private": false, "text": "Pushed by kaie@kuix.de:\nhttps://hg.mozilla.org/comm-central/rev/8ce54a39c29a\nSupport recipient aliases for OpenPGP encryption. r=mkmelin", "raw_text": "Pushed by kaie@kuix.de:\nhttps://hg.mozilla.org/comm-central/rev/8ce54a39c29a\nSupport recipient aliases for OpenPGP encryption. r=mkmelin", "author": "pulsebot@bots.tld", "id": 15283308, "bug_id": 1644085, "attachment_id": null}, {"attachment_id": null, "bug_id": 1644085, "author": "kg@paktolos.net", "id": 15283879, "text": "Thank you for your efforts. :-) We really appreciate it.", "raw_text": "Thank you for your efforts. :-) We really appreciate it.", "is_private": false, "time": "2021-02-26T07:57:58Z", "count": 106, "tags": [], "creator": "kg@paktolos.net", "creation_time": "2021-02-26T07:57:58Z"}, {"creation_time": "2021-02-26T09:47:28Z", "creator": "cl101@mail77.eu", "tags": [], "count": 107, "time": "2021-02-26T09:47:28Z", "is_private": false, "raw_text": "Yes, thanks so much, we are really waiting for this feature.\n\nTo get a sense regarding the timetable: target Milestone branch 88 would in practice mean that within ~1 month its in Beta (as end of Feb it might almost mean 87beta?) and in another month in release, right? Just to double-check regarding the comment by Magnus https://bugzilla.mozilla.org/show_bug.cgi?id=1644085#c92", "text": "Yes, thanks so much, we are really waiting for this feature.\n\nTo get a sense regarding the timetable: target Milestone branch 88 would in practice mean that within ~1 month its in Beta (as end of Feb it might almost mean 87beta?) and in another month in release, right? Just to double-check regarding the comment by Magnus https://bugzilla.mozilla.org/show_bug.cgi?id=1644085#c92", "author": "cl101@mail77.eu", "id": 15284014, "bug_id": 1644085, "attachment_id": null}, {"creation_time": "2021-02-26T10:22:53Z", "id": 15284061, "author": "mkmelin+mozilla@iki.fi", "creator": "mkmelin+mozilla@iki.fi", "is_private": false, "text": "We usually do more than one beta per beta cycle. Likely we can put it in 87.0b2 next week, and if all goes well into 78.9 March 23.", "raw_text": "We usually do more than one beta per beta cycle. Likely we can put it in 87.0b2 next week, and if all goes well into 78.9 March 23.", "time": "2021-02-26T10:22:53Z", "attachment_id": null, "tags": [], "bug_id": 1644085, "count": 108}, {"tags": [], "count": 109, "time": "2021-02-26T16:27:57Z", "creation_time": "2021-02-26T16:27:57Z", "creator": "mail@andreas-greulich.ch", "bug_id": 1644085, "attachment_id": null, "is_private": false, "text": "Hi, I also consider this feature as esential! I just tried it (using 78.8.0 daily from, above link) on a mac, but I fail... I created a json file as described in https://bug1644085.bmoattachments.org/attachment.cgi?id=9193371 (did the format change meanwhile? I read about \"fpr\" insetad of \"id\"?). Weird is, no matter if I store and reference the json as full path, as file in the profile directory itself, or even with a completely wrong path in the config: I do not get any error message at start, and whenever I try to send ANY mail that I set to \"Require Encryption\" with \"OpenPGP\" Encryption Technology - it is just, WITHOUT ANY WARNING (!) - sent unencrypted. Seriously, that's the WORST possible behaviour... never ever mail something without encryption that has the encryption flag set without a warning, this can lead to a disaster. But besides this, what went wrong?", "raw_text": "Hi, I also consider this feature as esential! I just tried it (using 78.8.0 daily from, above link) on a mac, but I fail... I created a json file as described in https://bug1644085.bmoattachments.org/attachment.cgi?id=9193371 (did the format change meanwhile? I read about \"fpr\" insetad of \"id\"?). Weird is, no matter if I store and reference the json as full path, as file in the profile directory itself, or even with a completely wrong path in the config: I do not get any error message at start, and whenever I try to send ANY mail that I set to \"Require Encryption\" with \"OpenPGP\" Encryption Technology - it is just, WITHOUT ANY WARNING (!) - sent unencrypted. Seriously, that's the WORST possible behaviour... never ever mail something without encryption that has the encryption flag set without a warning, this can lead to a disaster. But besides this, what went wrong?", "author": "mail@andreas-greulich.ch", "id": 15284532}, {"time": "2021-02-26T17:02:17Z", "tags": [], "count": 110, "creation_time": "2021-02-26T17:02:17Z", "creator": "mail@andreas-greulich.ch", "attachment_id": null, "bug_id": 1644085, "id": 15284581, "author": "mail@andreas-greulich.ch", "is_private": false, "text": "PS: I see that the json format obviously changed (but did not find where the \" test files in the phabricator attachment for examples\" are located?). Nevertheless, I think mails marked as requiring encryption should never leave unencrypted, even if the json format might contain syntax errors.", "raw_text": "PS: I see that the json format obviously changed (but did not find where the \" test files in the phabricator attachment for examples\" are located?). Nevertheless, I think mails marked as requiring encryption should never leave unencrypted, even if the json format might contain syntax errors."}, {"author": "mail@andreas-greulich.ch", "id": 15284604, "is_private": false, "raw_text": "(In reply to Andreas Greulich from comment #110)\n> PS: I see that the json format obviously changed (but did not find where the \" test files in the phabricator attachment for examples\" are located?). Nevertheless, I think mails marked as requiring encryption should never leave unencrypted, even if the json format might contain syntax errors.\n\nOK I found the samples (https://phabricator.services.mozilla.com/D97973#change-qmH8rDI6Zn2w I reckon), and with the correct syntax, it works. Nevertheless - in case of a wrong syntax or the old format, make sure mails that should be encrypted never leave TB in clear.", "text": "(In reply to Andreas Greulich from comment #110)\n> PS: I see that the json format obviously changed (but did not find where the \" test files in the phabricator attachment for examples\" are located?). Nevertheless, I think mails marked as requiring encryption should never leave unencrypted, even if the json format might contain syntax errors.\n\nOK I found the samples (https://phabricator.services.mozilla.com/D97973#change-qmH8rDI6Zn2w I reckon), and with the correct syntax, it works. Nevertheless - in case of a wrong syntax or the old format, make sure mails that should be encrypted never leave TB in clear.", "attachment_id": null, "bug_id": 1644085, "creation_time": "2021-02-26T17:20:01Z", "creator": "mail@andreas-greulich.ch", "time": "2021-02-26T17:20:01Z", "tags": [], "count": 111}, {"raw_text": "There's no belts and suspenders: You're responsible for having the right syntax (errors are logged). If encryption required is set, Thunderbird will require a key, it won't require that you have the right syntax. There is no \"old\" format, what landed is the format we have.", "text": "There's no belts and suspenders: You're responsible for having the right syntax (errors are logged). If encryption required is set, Thunderbird will require a key, it won't require that you have the right syntax. There is no \"old\" format, what landed is the format we have.", "is_private": false, "creator": "mkmelin+mozilla@iki.fi", "id": 15284699, "creation_time": "2021-02-26T18:19:41Z", "author": "mkmelin+mozilla@iki.fi", "bug_id": 1644085, "count": 112, "tags": [], "time": "2021-02-26T18:19:41Z", "attachment_id": null}, {"creation_time": "2021-02-26T18:44:16Z", "creator": "mkmelin+mozilla@iki.fi", "time": "2021-02-26T18:44:16Z", "tags": [], "count": 113, "id": 15284751, "author": "mkmelin+mozilla@iki.fi", "is_private": false, "text": "Set the mail.openpgp.alias_rules_file pref to openpgp-alias-rules.json - and create a JSON file named like openpgp-alias-rules.json\n* put it in the Thunderbird profile folder or\n* a file:// url pointing to the file\n\nThe openpgp-alias-rules.json file content should look something like this:\n\n```\n{\n  \"description\": \"Thunderbird OpenPGP Alias Rules\",\n  \"rules\": [\n    {\n      \"domain\": \"domain1.example.com\",\n      \"keys\": [\n        {\n          \"description\": \"Catch-all for domain1.example.com\",\n          \"fingerprint\": \"EB85BB5FA33A75E15E944E63F231550C4F47E38E\"\n        }\n      ]\n    },\n    {\n      \"domain\": \"domain2.example.com\",\n      \"keys\": [\n        {\n          \"description\": \"domain2.example.com folks\",\n          \"fingerprint\": \"D1A66E1A23B182C9980F788CFBFCC82A015E7330\"\n        }\n      ]\n    },\n    {\n      \"email\": \"list@domain1.example.com\",\n      \"keys\": [\n        {\n          \"description\": \"John\",\n          \"fingerprint\": \"D1A66E1A23B182C9980F788CFBFCC82A015E7330\"\n        },\n        {\n          \"description\": \"Eve\",\n          \"id\": \"F231550C4F47E38E\"\n        }\n      ]\n    }\n  ]\n}\n```", "raw_text": "Set the mail.openpgp.alias_rules_file pref to openpgp-alias-rules.json - and create a JSON file named like openpgp-alias-rules.json\n* put it in the Thunderbird profile folder or\n* a file:// url pointing to the file\n\nThe openpgp-alias-rules.json file content should look something like this:\n\n```\n{\n  \"description\": \"Thunderbird OpenPGP Alias Rules\",\n  \"rules\": [\n    {\n      \"domain\": \"domain1.example.com\",\n      \"keys\": [\n        {\n          \"description\": \"Catch-all for domain1.example.com\",\n          \"fingerprint\": \"EB85BB5FA33A75E15E944E63F231550C4F47E38E\"\n        }\n      ]\n    },\n    {\n      \"domain\": \"domain2.example.com\",\n      \"keys\": [\n        {\n          \"description\": \"domain2.example.com folks\",\n          \"fingerprint\": \"D1A66E1A23B182C9980F788CFBFCC82A015E7330\"\n        }\n      ]\n    },\n    {\n      \"email\": \"list@domain1.example.com\",\n      \"keys\": [\n        {\n          \"description\": \"John\",\n          \"fingerprint\": \"D1A66E1A23B182C9980F788CFBFCC82A015E7330\"\n        },\n        {\n          \"description\": \"Eve\",\n          \"id\": \"F231550C4F47E38E\"\n        }\n      ]\n    }\n  ]\n}\n```", "attachment_id": null, "bug_id": 1644085}, {"time": "2021-02-26T21:09:05Z", "tags": [], "count": 114, "creation_time": "2021-02-26T21:09:05Z", "creator": "mail@andreas-greulich.ch", "attachment_id": null, "bug_id": 1644085, "id": 15284934, "author": "mail@andreas-greulich.ch", "is_private": false, "raw_text": "Yes, thank you, I found that meanwhile - I still think the syntax should be updated on https://wiki.mozilla.org/Thunderbird:OpenPGP:Aliases as this is the most official doc of it except you read through the whole thread here (and this page states \"Create a new text file, as described here: https://bug1644085.bmoattachments.org/attachment.cgi?id=9193371\" where another json format is described; this is the one I intrerpreted as \"old\" format).\n\nBut my point is another one (and trivial to solve I think): If you have such a file correctly configured, but change e.g. the path slightly (insert an \"_\" or whatever), then - after TB restart - write a mail to somebody of whom you DO have an exact PGP key (so no aliases required), mark \"Require Encryption\" and set \"Encryption Technology\" to \"OpenPGP\", and try to send it - the mail WILL be sent, but UNENCRYPTED! This is something that I really warn you MUST be fixed before making it public, or disasters will occur. The problem is not about error messages or not, the problem is that a mail that you marked with \"Require Encryption\" is sent out in clear without any warning. As soon as the openpgp-alias-rules.json entry is cleared again, all works as expected and the mail is encrypted (again after restarting TB).\n\nI think what happens is that if anything goes wrong - be it just that the json file is not found, or one little keyword in it mistyped, maybe a comma in the json that should not be there - PGP is turned off completely, but the GUI still pretends it to be active. The problem really is not that aliases would nto work, but that the complete PGP module seems to become inactive. So the user does everything he would usually do, nothing is greyed out in the GUI for instance, but the mail is sent out in clear. The only hint I see you get is, if you click on \"Security\" before actually sending it, you see that no PGP key appears as available. But who makes this check? As said, this must not happen in a productive version. I'm aware that this is still test phase, which is fine, just please do not forget to clean that problem up before putting it into the actual release.\n\nAs a sum up: whenever the user has \"Require Encryption\" set and was able to set it, the mail must never be sent out in clear without an additional warning.\n\nbr, Andy", "text": "Yes, thank you, I found that meanwhile - I still think the syntax should be updated on https://wiki.mozilla.org/Thunderbird:OpenPGP:Aliases as this is the most official doc of it except you read through the whole thread here (and this page states \"Create a new text file, as described here: https://bug1644085.bmoattachments.org/attachment.cgi?id=9193371\" where another json format is described; this is the one I intrerpreted as \"old\" format).\n\nBut my point is another one (and trivial to solve I think): If you have such a file correctly configured, but change e.g. the path slightly (insert an \"_\" or whatever), then - after TB restart - write a mail to somebody of whom you DO have an exact PGP key (so no aliases required), mark \"Require Encryption\" and set \"Encryption Technology\" to \"OpenPGP\", and try to send it - the mail WILL be sent, but UNENCRYPTED! This is something that I really warn you MUST be fixed before making it public, or disasters will occur. The problem is not about error messages or not, the problem is that a mail that you marked with \"Require Encryption\" is sent out in clear without any warning. As soon as the openpgp-alias-rules.json entry is cleared again, all works as expected and the mail is encrypted (again after restarting TB).\n\nI think what happens is that if anything goes wrong - be it just that the json file is not found, or one little keyword in it mistyped, maybe a comma in the json that should not be there - PGP is turned off completely, but the GUI still pretends it to be active. The problem really is not that aliases would nto work, but that the complete PGP module seems to become inactive. So the user does everything he would usually do, nothing is greyed out in the GUI for instance, but the mail is sent out in clear. The only hint I see you get is, if you click on \"Security\" before actually sending it, you see that no PGP key appears as available. But who makes this check? As said, this must not happen in a productive version. I'm aware that this is still test phase, which is fine, just please do not forget to clean that problem up before putting it into the actual release.\n\nAs a sum up: whenever the user has \"Require Encryption\" set and was able to set it, the mail must never be sent out in clear without an additional warning.\n\nbr, Andy"}, {"creation_time": "2021-02-28T10:57:30Z", "creator": "dnk089@riseup.net", "time": "2021-02-28T10:57:30Z", "tags": [], "count": 115, "author": "dnk089@riseup.net", "id": 15285915, "is_private": false, "raw_text": "Thanks again. I really like the \"description\" line in the alias definition, this makes it easier to add/remove key ids or fingerprints.\n\nI agree with Andy that mails should never pretend to be sent encrypted when they are not, although I could imagine that this will make development more complicated.", "text": "Thanks again. I really like the \"description\" line in the alias definition, this makes it easier to add/remove key ids or fingerprints.\n\nI agree with Andy that mails should never pretend to be sent encrypted when they are not, although I could imagine that this will make development more complicated.", "attachment_id": null, "bug_id": 1644085}, {"is_private": false, "raw_text": "Filed bug 1695590 about not sending when there were problems with the alias file.", "text": "Filed bug 1695590 about not sending when there were problems with the alias file.", "id": 15288073, "author": "mkmelin+mozilla@iki.fi", "bug_id": 1644085, "attachment_id": null, "creation_time": "2021-03-01T10:39:02Z", "creator": "mkmelin+mozilla@iki.fi", "tags": [], "count": 116, "time": "2021-03-01T10:39:02Z"}, {"raw_text": "I can reproduce, and I fully agree, this is a serious bug. We should never send a message unencrypted, if the settings require encryption.\n\nI had anticipated in bug 1648019 that this may happen potentially. Now we have the first time this happens, and I think it's a good opportunity to fix both the specific regression, and also a general protection mechanism as suggested in bug 1648019.", "text": "I can reproduce, and I fully agree, this is a serious bug. We should never send a message unencrypted, if the settings require encryption.\n\nI had anticipated in bug 1648019 that this may happen potentially. Now we have the first time this happens, and I think it's a good opportunity to fix both the specific regression, and also a general protection mechanism as suggested in bug 1648019.", "is_private": false, "id": 15288197, "author": "kaie@kuix.de", "bug_id": 1644085, "attachment_id": null, "creator": "kaie@kuix.de", "creation_time": "2021-03-01T12:17:56Z", "count": 117, "tags": [], "time": "2021-03-01T12:17:56Z"}, {"attachment_id": null, "time": "2021-03-02T17:35:39Z", "tags": [], "count": 118, "bug_id": 1644085, "creation_time": "2021-03-02T17:35:39Z", "id": 15290819, "author": "kaie@kuix.de", "creator": "kaie@kuix.de", "is_private": false, "text": "I've updated the documentation page at\nhttps://wiki.mozilla.org/Thunderbird:OpenPGP:Aliases", "raw_text": "I've updated the documentation page at\nhttps://wiki.mozilla.org/Thunderbird:OpenPGP:Aliases"}, {"time": "2021-03-02T23:13:46Z", "tags": [], "count": 119, "creation_time": "2021-03-02T23:13:46Z", "creator": "bugzilla@kgb.ovh", "attachment_id": null, "bug_id": 1644085, "id": 15291302, "author": "bugzilla@kgb.ovh", "is_private": false, "text": "Since this is a huge email list, could you also briefly explain there how to fill your file. Why does John have a fingerprint and Eve an ID\u202f? Do they share the same email\u202f?", "raw_text": "Since this is a huge email list, could you also briefly explain there how to fill your file. Why does John have a fingerprint and Eve an ID\u202f? Do they share the same email\u202f?"}, {"creation_time": "2021-03-02T23:19:51Z", "creator": "bugzilla@kgb.ovh", "time": "2021-03-02T23:19:51Z", "tags": [], "count": 120, "id": 15291305, "author": "bugzilla@kgb.ovh", "is_private": false, "text": "And why is there an ID for the email but not for the domains?", "raw_text": "And why is there an ID for the email but not for the domains?", "attachment_id": null, "bug_id": 1644085}, {"time": "2021-03-03T06:49:57Z", "tags": [], "count": 121, "creation_time": "2021-03-03T06:49:57Z", "creator": "mkmelin+mozilla@iki.fi", "attachment_id": null, "bug_id": 1644085, "id": 15291701, "author": "mkmelin+mozilla@iki.fi", "is_private": false, "text": "You can do the mapping either by id OR fingerprint, your choice. \nIf you have a huge list (not sure what format?) you probably want to do a script to output what you need. It's a JSON file, all white space optional. The descriptions as well.", "raw_text": "You can do the mapping either by id OR fingerprint, your choice. \nIf you have a huge list (not sure what format?) you probably want to do a script to output what you need. It's a JSON file, all white space optional. The descriptions as well."}, {"creation_time": "2021-03-04T08:24:54Z", "creator": "kaie@kuix.de", "tags": [], "count": 122, "time": "2021-03-04T08:24:54Z", "is_private": false, "text": "Comment on attachment 9189756\nBug 1644085 - Support recipient aliases for OpenPGP encryption. r=mkmelin\n\n[Approval Request Comment]\nRegression caused by (bug #): no\nUser impact if declined: feature requested by many users\nTesting completed (on c-c, etc.): c-c\nRisk to taking this patch (and alternatives if risky): low, shouldn't affect users not yet using this feature", "raw_text": "[Approval Request Comment]\nRegression caused by (bug #): no\nUser impact if declined: feature requested by many users\nTesting completed (on c-c, etc.): c-c\nRisk to taking this patch (and alternatives if risky): low, shouldn't affect users not yet using this feature", "author": "kaie@kuix.de", "id": 15293520, "bug_id": 1644085, "attachment_id": 9189756}, {"id": 15293528, "creation_time": "2021-03-04T08:27:11Z", "author": "kaie@kuix.de", "creator": "kaie@kuix.de", "is_private": false, "raw_text": "Note, when uplifting, it's important to also take bug 1695590", "text": "Note, when uplifting, it's important to also take bug 1695590", "attachment_id": null, "time": "2021-03-04T08:27:11Z", "tags": [], "count": 123, "bug_id": 1644085}, {"creator": "kaie@kuix.de", "creation_time": "2021-03-04T08:29:57Z", "count": 124, "tags": [], "time": "2021-03-04T08:29:57Z", "text": "I'm adjusting to subject of the bug, to clarify we fixed only a subset of the suggestion.\n\nWe support multiparty encryption and recipient aliases - but we don't yet support the full feature set of per-recipient rules in Enigmail (which e.g. offered the ability to enable/disable encryption based on recipient.).", "raw_text": "I'm adjusting to subject of the bug, to clarify we fixed only a subset of the suggestion.\n\nWe support multiparty encryption and recipient aliases - but we don't yet support the full feature set of per-recipient rules in Enigmail (which e.g. offered the ability to enable/disable encryption based on recipient.).", "is_private": false, "author": "kaie@kuix.de", "id": 15293529, "bug_id": 1644085, "attachment_id": null}, {"attachment_id": 9189756, "bug_id": 1644085, "author": "kaie@kuix.de", "id": 15294211, "is_private": false, "raw_text": "sorry, above approval request was intended for beta - I think we should get some beta testing, prior to uplifting to esr78", "text": "Comment on attachment 9189756\nBug 1644085 - Support recipient aliases for OpenPGP encryption. r=mkmelin\n\nsorry, above approval request was intended for beta - I think we should get some beta testing, prior to uplifting to esr78", "time": "2021-03-04T16:24:13Z", "tags": [], "count": 125, "creation_time": "2021-03-04T16:24:13Z", "creator": "kaie@kuix.de"}, {"time": "2021-03-05T00:11:30Z", "attachment_id": null, "count": 126, "bug_id": 1644085, "tags": [], "creator": "mail@andreas-greulich.ch", "author": "mail@andreas-greulich.ch", "creation_time": "2021-03-05T00:11:30Z", "id": 15294983, "raw_text": "Thanks, documentation is great now and I like the fingerprints can be documented as well! \n\nI have found another bug, but I'm not sure what exactly lies behind it. I think it has to do with upper/lowercase writing of E-Mail. I noticed that the rules seem to fail if the mail used is written in uppercase and in the rule in lowercase. But it also fails if it is written in uppercase in the rule. Another  source of failure is when a mail address in an actual mail is written in the \"name <name@xxx.com>\" format.\n\nHere a series of tests, using a sanitized naming list mail address. It usually appears as:\n\nLIST1 <LIST1@LISTSERV.XXX.YY>\n\nIn the  keyset rule I use (together with a bunch of fingerprints): \n\n\"domain\": \"listserv.xx.yy\"\n\nIn this case, when composing a mail with encryption on clicking on the \"Security\" button, I get \n\n\"list1@listserv.xx.yy       a -> b\"\n\nwhich seems to tell a matching key was found; but when I try to send it, it tells (note the uppercase address) \n\n\"Unable to send this message with end-to-end encryption, because there are problems with the keys of the following recipients: LIST1@LISTSERV.XXX.YY\"\n\nOf course I have no way to see what the error was (or do I?). Now, when I change the \"domain\": entry above to uppercase as well, the \"Security\" button already tells me there's no match (\"no key available\" instead of \"a -> b\")\n\nSo I change the \"domain\" line back to lowerwase, but change the recipient mail to \n\nLIST1 <LIST1@listserv.xx.yy>\n\nThe behaviour changes once more, now I get a simple \"Sending of the message failed.\".\n\nChanging the recipient to \"LIST1@listserv.xx.yy\" has the same effect.\n\nOnly when I finally change it to \"list1@listserv.xx.yy\" it works as expected.\n\nAs mailing lists often produce uppercase mail addresses with <...> terms, to which you should be able to reply, this is a bug that I think must be fixed.\n\nbr, Andy\n\nPS: I made my tests with the version of comment 104 7 days ago. I don't think there's a newer one available.", "text": "Thanks, documentation is great now and I like the fingerprints can be documented as well! \n\nI have found another bug, but I'm not sure what exactly lies behind it. I think it has to do with upper/lowercase writing of E-Mail. I noticed that the rules seem to fail if the mail used is written in uppercase and in the rule in lowercase. But it also fails if it is written in uppercase in the rule. Another  source of failure is when a mail address in an actual mail is written in the \"name <name@xxx.com>\" format.\n\nHere a series of tests, using a sanitized naming list mail address. It usually appears as:\n\nLIST1 <LIST1@LISTSERV.XXX.YY>\n\nIn the  keyset rule I use (together with a bunch of fingerprints): \n\n\"domain\": \"listserv.xx.yy\"\n\nIn this case, when composing a mail with encryption on clicking on the \"Security\" button, I get \n\n\"list1@listserv.xx.yy       a -> b\"\n\nwhich seems to tell a matching key was found; but when I try to send it, it tells (note the uppercase address) \n\n\"Unable to send this message with end-to-end encryption, because there are problems with the keys of the following recipients: LIST1@LISTSERV.XXX.YY\"\n\nOf course I have no way to see what the error was (or do I?). Now, when I change the \"domain\": entry above to uppercase as well, the \"Security\" button already tells me there's no match (\"no key available\" instead of \"a -> b\")\n\nSo I change the \"domain\" line back to lowerwase, but change the recipient mail to \n\nLIST1 <LIST1@listserv.xx.yy>\n\nThe behaviour changes once more, now I get a simple \"Sending of the message failed.\".\n\nChanging the recipient to \"LIST1@listserv.xx.yy\" has the same effect.\n\nOnly when I finally change it to \"list1@listserv.xx.yy\" it works as expected.\n\nAs mailing lists often produce uppercase mail addresses with <...> terms, to which you should be able to reply, this is a bug that I think must be fixed.\n\nbr, Andy\n\nPS: I made my tests with the version of comment 104 7 days ago. I don't think there's a newer one available.", "is_private": false}, {"tags": [], "count": 127, "time": "2021-03-08T16:35:25Z", "creation_time": "2021-03-08T16:35:25Z", "creator": "vseerror@lehigh.edu", "bug_id": 1644085, "attachment_id": 9189756, "is_private": false, "raw_text": "[Triage Comment]\nApproved for beta", "text": "Comment on attachment 9189756\nBug 1644085 - Support recipient aliases for OpenPGP encryption. r=mkmelin\n\n[Triage Comment]\nApproved for beta", "id": 15299016, "author": "vseerror@lehigh.edu"}, {"text": "Thank you. Yes, I confirm, it doesn't work if anything uses uppercase. I'm working on a follow-up patch with more tests.", "raw_text": "Thank you. Yes, I confirm, it doesn't work if anything uses uppercase. I'm working on a follow-up patch with more tests.", "is_private": false, "id": 15299164, "author": "kaie@kuix.de", "bug_id": 1644085, "attachment_id": null, "creator": "kaie@kuix.de", "creation_time": "2021-03-08T17:16:13Z", "count": 128, "tags": [], "time": "2021-03-08T17:16:13Z"}, {"creator": "kaie@kuix.de", "creation_time": "2021-03-10T08:31:19Z", "time": "2021-03-10T08:31:19Z", "count": 129, "tags": [], "author": "kaie@kuix.de", "id": 15302288, "text": "I've implemented fixes and more error checking in bug 1697239.\n\nHere is a new experimental build, that is based on latest 78.8.1, with this patch, and bug 1697239 and bug 1695590.", "raw_text": "I've implemented fixes and more error checking in bug 1697239.\n\nHere is a new experimental build, that is based on latest 78.8.1, with this patch, and bug 1697239 and bug 1695590.", "is_private": false, "attachment_id": null, "bug_id": 1644085}, {"time": "2021-03-10T08:32:50Z", "attachment_id": null, "count": 130, "bug_id": 1644085, "tags": [], "creator": "kaie@kuix.de", "author": "kaie@kuix.de", "creation_time": "2021-03-10T08:32:50Z", "id": 15302289, "text": "ah sorry, build is not yet ready, I'll submit another comment in a few hours\n\nRegarding beta: The fix for bug 1697239 has not yet been reviewed. But I think it still makes sense to already land the approved patches into beta, as it will allow testing for (potential) side effects.", "raw_text": "ah sorry, build is not yet ready, I'll submit another comment in a few hours\n\nRegarding beta: The fix for bug 1697239 has not yet been reviewed. But I think it still makes sense to already land the approved patches into beta, as it will allow testing for (potential) side effects.", "is_private": false}, {"text": "https://hg.mozilla.org/releases/comm-beta/rev/d2122b739da06a50e1e528d664e138cae72b9166", "raw_text": "https://hg.mozilla.org/releases/comm-beta/rev/d2122b739da06a50e1e528d664e138cae72b9166", "is_private": false, "author": "kaie@kuix.de", "id": 15302370, "bug_id": 1644085, "attachment_id": null, "creator": "kaie@kuix.de", "creation_time": "2021-03-10T09:19:17Z", "count": 131, "tags": [], "time": "2021-03-10T09:19:17Z"}, {"bug_id": 1644085, "attachment_id": null, "is_private": false, "raw_text": "(In reply to Kai Engert (:KaiE:) from comment #129)\n> Here is a new experimental build, that is based on latest 78.8.1, with this patch, and bug 1697239 and bug 1695590.\n\nlinux64: https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/B0tPJwz9Rlu2ElmlFunepQ/runs/0/artifacts/public/build/target.tar.bz2\nlinux32: https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/HDMaVY6NT_23PtTU3yF-rQ/runs/0/artifacts/public/build/target.tar.bz2\nwin64: https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/FzB-MaMVRl6MoUJCNI_vgw/runs/0/artifacts/public/build/target.zip\nwin32: https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/W9YNY35bSFi658DTUHjkmQ/runs/0/artifacts/public/build/target.zip\nmacOS: https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/X7xd1x3MRBqSpa8AHCJqBw/runs/0/artifacts/public/build/target.dmg", "text": "(In reply to Kai Engert (:KaiE:) from comment #129)\n> Here is a new experimental build, that is based on latest 78.8.1, with this patch, and bug 1697239 and bug 1695590.\n\nlinux64: https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/B0tPJwz9Rlu2ElmlFunepQ/runs/0/artifacts/public/build/target.tar.bz2\nlinux32: https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/HDMaVY6NT_23PtTU3yF-rQ/runs/0/artifacts/public/build/target.tar.bz2\nwin64: https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/FzB-MaMVRl6MoUJCNI_vgw/runs/0/artifacts/public/build/target.zip\nwin32: https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/W9YNY35bSFi658DTUHjkmQ/runs/0/artifacts/public/build/target.zip\nmacOS: https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/X7xd1x3MRBqSpa8AHCJqBw/runs/0/artifacts/public/build/target.dmg", "id": 15302613, "author": "kaie@kuix.de", "tags": [], "count": 132, "time": "2021-03-10T11:49:05Z", "creation_time": "2021-03-10T11:49:05Z", "creator": "kaie@kuix.de"}, {"creation_time": "2021-03-10T11:49:48Z", "creator": "kaie@kuix.de", "tags": [], "count": 133, "time": "2021-03-10T11:49:48Z", "is_private": false, "text": "Andreas, could you please test, and provide feedback in bug 1697239 ?", "raw_text": "Andreas, could you please test, and provide feedback in bug 1697239 ?", "id": 15302614, "author": "kaie@kuix.de", "bug_id": 1644085, "attachment_id": null}, {"creation_time": "2021-03-10T16:53:45Z", "creator": "dnk089@riseup.net", "tags": [], "count": 134, "time": "2021-03-10T16:53:45Z", "is_private": false, "text": "I did a short test with linux64 version from Comment 132:\n\n1.: Mail to \"NAME@DOMAIN.NET\", alias definition with \"name@domain.net\" \n2.: Mail to \"name@domain.net\", alias definition with \"NAME@DOMAIN.NET\"\n3.: Mail to \"name@domain.net\", alias definition with \"NAME@domain.net\"\n\nIn all 3 cases I get the following error message:\n\"Unable to send this message with end-to-end encryption, because there are problems with the keys of the following recipients: name@domain.net\", followed by \"OpenPGP Message Security\" Infobox, telling \"Status: Alias Problem\"\n\nSo in every case the same error message when To-address does not match address definition in the alias file.", "raw_text": "I did a short test with linux64 version from Comment 132:\n\n1.: Mail to \"NAME@DOMAIN.NET\", alias definition with \"name@domain.net\" \n2.: Mail to \"name@domain.net\", alias definition with \"NAME@DOMAIN.NET\"\n3.: Mail to \"name@domain.net\", alias definition with \"NAME@domain.net\"\n\nIn all 3 cases I get the following error message:\n\"Unable to send this message with end-to-end encryption, because there are problems with the keys of the following recipients: name@domain.net\", followed by \"OpenPGP Message Security\" Infobox, telling \"Status: Alias Problem\"\n\nSo in every case the same error message when To-address does not match address definition in the alias file.", "author": "dnk089@riseup.net", "id": 15303180, "bug_id": 1644085, "attachment_id": null}, {"time": "2021-03-10T18:24:59Z", "count": 135, "tags": [], "creator": "kaie@kuix.de", "creation_time": "2021-03-10T18:24:59Z", "attachment_id": null, "bug_id": 1644085, "author": "kaie@kuix.de", "id": 15303405, "text": "(In reply to dnk089 from comment #134)\n> 1.: Mail to \"NAME@DOMAIN.NET\", alias definition with \"name@domain.net\" \n\nI tried this, too, with the above linux64 build. It works for me. Can you please look at the error console for information? Note that the failure is expected, if there is an error in your JSON file, or if you don't have the key available. The error console should tell you what's wrong.", "raw_text": "(In reply to dnk089 from comment #134)\n> 1.: Mail to \"NAME@DOMAIN.NET\", alias definition with \"name@domain.net\" \n\nI tried this, too, with the above linux64 build. It works for me. Can you please look at the error console for information? Note that the failure is expected, if there is an error in your JSON file, or if you don't have the key available. The error console should tell you what's wrong.", "is_private": false}, {"time": "2021-03-10T21:05:18Z", "attachment_id": null, "tags": [], "count": 136, "bug_id": 1644085, "author": "dnk089@riseup.net", "creation_time": "2021-03-10T21:05:18Z", "id": 15303718, "creator": "dnk089@riseup.net", "is_private": false, "raw_text": "(In reply to Kai Engert (:KaiE:) from comment #135)\n> I tried this, too, with the above linux64 build. It works for me. Can you please look at the error console for information? Note that the failure is expected, if there is an error in your JSON file, or if you don't have the key available. The error console should tell you what's wrong.\n\nSorry, had a key included in aliases that is invalid since 3 days :-) \nThe results after removing that invalid key:\n1.: Mail to \"NAME@DOMAIN.NET\", alias definition with \"name@domain.net\": Works, Status : a->b\n2.: Mail to \"name@domain.net\", alias definition with \"NAME@DOMAIN.NET\": Fails, Status: no key available\n3.: Mail to \"name@domain.net\", alias definition with \"NAME@domain.net\". Fails, Status: no key available", "text": "(In reply to Kai Engert (:KaiE:) from comment #135)\n> I tried this, too, with the above linux64 build. It works for me. Can you please look at the error console for information? Note that the failure is expected, if there is an error in your JSON file, or if you don't have the key available. The error console should tell you what's wrong.\n\nSorry, had a key included in aliases that is invalid since 3 days :-) \nThe results after removing that invalid key:\n1.: Mail to \"NAME@DOMAIN.NET\", alias definition with \"name@domain.net\": Works, Status : a->b\n2.: Mail to \"name@domain.net\", alias definition with \"NAME@DOMAIN.NET\": Fails, Status: no key available\n3.: Mail to \"name@domain.net\", alias definition with \"NAME@domain.net\". Fails, Status: no key available"}, {"tags": [], "count": 137, "time": "2021-03-10T21:14:40Z", "creation_time": "2021-03-10T21:14:40Z", "creator": "kaie@kuix.de", "bug_id": 1644085, "attachment_id": null, "is_private": false, "text": "(In reply to dnk089 from comment #136)\n> 2.: Mail to \"name@domain.net\", alias definition with \"NAME@DOMAIN.NET\": Fails, Status: no key available\n> 3.: Mail to \"name@domain.net\", alias definition with \"NAME@domain.net\". Fails, Status: no key available\n\nThis works for me.\nWhat does the error console say for those, and please share the JSON rule you use.", "raw_text": "(In reply to dnk089 from comment #136)\n> 2.: Mail to \"name@domain.net\", alias definition with \"NAME@DOMAIN.NET\": Fails, Status: no key available\n> 3.: Mail to \"name@domain.net\", alias definition with \"NAME@domain.net\". Fails, Status: no key available\n\nThis works for me.\nWhat does the error console say for those, and please share the JSON rule you use.", "author": "kaie@kuix.de", "id": 15303745}, {"is_private": false, "raw_text": "I've added the three examples from 134 to the automated tests in bug 1697239, and they pass. It seems likely that dnk89 has had some kind of mistake locally when testing.", "text": "I've added the three examples from 134 to the automated tests in bug 1697239, and they pass. It seems likely that dnk89 has had some kind of mistake locally when testing.", "author": "kaie@kuix.de", "id": 15304674, "bug_id": 1644085, "attachment_id": null, "creation_time": "2021-03-11T10:55:30Z", "creator": "kaie@kuix.de", "tags": [], "count": 138, "time": "2021-03-11T10:55:30Z"}, {"attachment_id": null, "bug_id": 1644085, "author": "dnk089@riseup.net", "id": 15304758, "is_private": false, "text": "Confirm. Issue with 2. and 3. was connected with editing alias file without restarting thunderbird. After restarting thunderbird 2. and 3. passed. Sorry for delayed answer.", "raw_text": "Confirm. Issue with 2. and 3. was connected with editing alias file without restarting thunderbird. After restarting thunderbird 2. and 3. passed. Sorry for delayed answer.", "time": "2021-03-11T12:10:45Z", "tags": [], "count": 139, "creation_time": "2021-03-11T12:10:45Z", "creator": "dnk089@riseup.net"}, {"attachment_id": null, "bug_id": 1644085, "id": 15304827, "author": "mail@andreas-greulich.ch", "text": "Thanks a lot, much sppreciated, everything seems to work now as expected :+1:  Very cool that it is even possible to modify the json file without having to restart TB.\n\nOne small thing that I could not make work (on MacOS) is to read the json file from any path in my homedirectory, no matter if I gave the absolute path ('/Users/../xxx.json'), used \\, \\\\, or \\/ as separators, or '~/'. This is no big issue for me as I'm fine putting it in the profile directory (actually I use a hard link to my Documents directory), but I wanted to mention it. Maybe I also missed the rigth syntax.\n\nA few things (no bugs) that would be nice to have: allow space separators in key fingerprints, so they can easily be copy/pasted from key manager (currently one must manually remove spaces beforehand), allow more than one domain or E-mail address per recipient list (in case the same list should be used for different recipients) or some other way to avoid repeating key lists in such cases (like one entry referencing another), and more generic rules to determine the key list to apply, like keywords/patterns in the subject (useful for mailing lists where the domain is shared between different lists). But all these things are not really relevant.", "raw_text": "Thanks a lot, much sppreciated, everything seems to work now as expected :+1:  Very cool that it is even possible to modify the json file without having to restart TB.\n\nOne small thing that I could not make work (on MacOS) is to read the json file from any path in my homedirectory, no matter if I gave the absolute path ('/Users/../xxx.json'), used \\, \\\\, or \\/ as separators, or '~/'. This is no big issue for me as I'm fine putting it in the profile directory (actually I use a hard link to my Documents directory), but I wanted to mention it. Maybe I also missed the rigth syntax.\n\nA few things (no bugs) that would be nice to have: allow space separators in key fingerprints, so they can easily be copy/pasted from key manager (currently one must manually remove spaces beforehand), allow more than one domain or E-mail address per recipient list (in case the same list should be used for different recipients) or some other way to avoid repeating key lists in such cases (like one entry referencing another), and more generic rules to determine the key list to apply, like keywords/patterns in the subject (useful for mailing lists where the domain is shared between different lists). But all these things are not really relevant.", "is_private": false, "time": "2021-03-11T13:07:12Z", "count": 140, "tags": [], "creator": "mail@andreas-greulich.ch", "creation_time": "2021-03-11T13:07:12Z"}, {"bug_id": 1644085, "attachment_id": null, "text": "@Andreas Greulich: If the JSON is outside the TB profile directory the file path must be given as a URI: file:///User/blabla/my_alias.json", "raw_text": "@Andreas Greulich: If the JSON is outside the TB profile directory the file path must be given as a URI: file:///User/blabla/my_alias.json", "is_private": false, "author": "clemens.hanel@tngtech.com", "id": 15304854, "count": 141, "tags": [], "time": "2021-03-11T13:32:51Z", "creator": "clemens.hanel@tngtech.com", "creation_time": "2021-03-11T13:32:51Z"}, {"attachment_id": 9205359, "bug_id": 1644085, "id": 15319364, "author": "kaie@kuix.de", "is_private": false, "text": "Comment on attachment 9205359\n1644085-0225a-esr78.patch\n\n[Approval Request Comment]\nRegression caused by (bug #): no\nUser impact if declined: missing feature which many users are waiting for\nTesting completed (on c-c, etc.): c-c and comm-beta, all existing and new tests pass. Since follow-ups bug 1695590 and bug 1697239 were addressed, no further problems have been reported with the 78.x test build.\nRisk to taking this patch (and alternatives if risky): medium, because the patch is big and touches existing OpenPGP workflow.", "raw_text": "[Approval Request Comment]\nRegression caused by (bug #): no\nUser impact if declined: missing feature which many users are waiting for\nTesting completed (on c-c, etc.): c-c and comm-beta, all existing and new tests pass. Since follow-ups bug 1695590 and bug 1697239 were addressed, no further problems have been reported with the 78.x test build.\nRisk to taking this patch (and alternatives if risky): medium, because the patch is big and touches existing OpenPGP workflow.", "time": "2021-03-19T17:07:10Z", "tags": [], "count": 142, "creation_time": "2021-03-19T17:07:10Z", "creator": "kaie@kuix.de"}, {"time": "2021-03-25T13:17:03Z", "attachment_id": null, "tags": [], "count": 143, "bug_id": 1644085, "id": 15328786, "creation_time": "2021-03-25T13:17:03Z", "author": "kg@paktolos.net", "creator": "kg@paktolos.net", "is_private": false, "text": "So why did this not land in 78.9.0? (Or did it? This Bugzilla is a little confusing for me.)", "raw_text": "So why did this not land in 78.9.0? (Or did it? This Bugzilla is a little confusing for me.)"}, {"is_private": false, "text": "The release driver has asked for more testing. We currently intend to release a 78.9.1 in the next 1-2 weeks.\n\nI'll create a new experimental build today, based on 78.9.0", "raw_text": "The release driver has asked for more testing. We currently intend to release a 78.9.1 in the next 1-2 weeks.\n\nI'll create a new experimental build today, based on 78.9.0", "id": 15328836, "author": "kaie@kuix.de", "bug_id": 1644085, "attachment_id": null, "creation_time": "2021-03-25T13:48:38Z", "creator": "kaie@kuix.de", "tags": [], "count": 144, "time": "2021-03-25T13:48:38Z"}, {"attachment_id": null, "bug_id": 1644085, "id": 15329052, "author": "kaie@kuix.de", "raw_text": "(In reply to Kai Engert (:KaiE:) from comment #144)\n> I'll create a new experimental build today, based on 78.9.0\n\nhttps://treeherder.mozilla.org/jobs?repo=try-comm-central&revision=214934c7318c945eb95b8986c808a110eccbc0ef\n\nlinux64: https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/Ei7_S14jRRGgFt08B4Ibyg/runs/0/artifacts/public/build/target.tar.bz2\nlinux32: https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/Dt1j5vgES06VHXQums62Pw/runs/0/artifacts/public/build/target.tar.bz2\nwin32: https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/Bt-kdF-GQf68zfcPhvsHFw/runs/0/artifacts/public/build/target.zip\nwin64: https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/Dpov3KkxTwmmJtKC42hsFw/runs/0/artifacts/public/build/target.zip\nmacos: https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/bSg6R-cCR_quALv3rukc-A/runs/0/artifacts/public/build/target.dmg", "text": "(In reply to Kai Engert (:KaiE:) from comment #144)\n> I'll create a new experimental build today, based on 78.9.0\n\nhttps://treeherder.mozilla.org/jobs?repo=try-comm-central&revision=214934c7318c945eb95b8986c808a110eccbc0ef\n\nlinux64: https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/Ei7_S14jRRGgFt08B4Ibyg/runs/0/artifacts/public/build/target.tar.bz2\nlinux32: https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/Dt1j5vgES06VHXQums62Pw/runs/0/artifacts/public/build/target.tar.bz2\nwin32: https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/Bt-kdF-GQf68zfcPhvsHFw/runs/0/artifacts/public/build/target.zip\nwin64: https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/Dpov3KkxTwmmJtKC42hsFw/runs/0/artifacts/public/build/target.zip\nmacos: https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/bSg6R-cCR_quALv3rukc-A/runs/0/artifacts/public/build/target.dmg", "is_private": false, "time": "2021-03-25T15:43:03Z", "count": 145, "tags": [], "creator": "kaie@kuix.de", "creation_time": "2021-03-25T15:43:03Z"}, {"attachment_id": null, "bug_id": 1644085, "id": 15336428, "author": "kg@paktolos.net", "is_private": false, "text": "Thank you so much.\n\nFTR: I did a few tests and does work for my use case (a single key for a coporate domain).", "raw_text": "Thank you so much.\n\nFTR: I did a few tests and does work for my use case (a single key for a coporate domain).", "time": "2021-03-30T09:46:31Z", "tags": [], "count": 146, "creation_time": "2021-03-30T09:46:31Z", "creator": "kg@paktolos.net"}, {"creator": "dnk089@riseup.net", "creation_time": "2021-03-30T20:47:21Z", "count": 147, "tags": [], "time": "2021-03-30T20:47:21Z", "raw_text": "(In reply to Kai Engert (:KaiE:) from comment #145)\n...\n> linux64: https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/Ei7_S14jRRGgFt08B4Ibyg/runs/0/artifacts/public/build/target.tar.bz2\n\nTested on debian buster: sending mail to list with defined recipient aliases works fine, even with lowercase / UPPERCASE mix. Thanks a lot!", "text": "(In reply to Kai Engert (:KaiE:) from comment #145)\n...\n> linux64: https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/Ei7_S14jRRGgFt08B4Ibyg/runs/0/artifacts/public/build/target.tar.bz2\n\nTested on debian buster: sending mail to list with defined recipient aliases works fine, even with lowercase / UPPERCASE mix. Thanks a lot!", "is_private": false, "id": 15337777, "author": "dnk089@riseup.net", "bug_id": 1644085, "attachment_id": null}, {"text": "Comment on attachment 9205359\n1644085-0225a-esr78.patch\n\n[Triage Comment]\nApproved for esr78", "raw_text": "[Triage Comment]\nApproved for esr78", "is_private": false, "creator": "vseerror@lehigh.edu", "id": 15345906, "author": "vseerror@lehigh.edu", "creation_time": "2021-04-06T03:06:08Z", "bug_id": 1644085, "count": 148, "tags": [], "time": "2021-04-06T03:06:08Z", "attachment_id": 9205359}, {"tags": [], "count": 149, "bug_id": 1644085, "attachment_id": null, "time": "2021-04-06T07:53:09Z", "is_private": false, "text": "https://hg.mozilla.org/releases/comm-esr78/rev/32878eb6c23e1f1e87bcaf89107964e2ecb49e2c\n78.9.1", "raw_text": "https://hg.mozilla.org/releases/comm-esr78/rev/32878eb6c23e1f1e87bcaf89107964e2ecb49e2c\n78.9.1", "author": "kaie@kuix.de", "id": 15346101, "creation_time": "2021-04-06T07:53:09Z", "creator": "kaie@kuix.de"}, {"creator": "kaie@kuix.de", "creation_time": "2021-05-17T16:16:21Z", "time": "2021-05-17T16:16:21Z", "count": 150, "tags": [], "author": "kaie@kuix.de", "id": 15410368, "raw_text": "", "text": "*** Bug 1684276 has been marked as a duplicate of this bug. ***", "is_private": false, "attachment_id": null, "bug_id": 1644085}, {"bug_id": 1644085, "count": 151, "tags": [], "time": "2021-05-18T11:58:57Z", "attachment_id": null, "raw_text": "", "text": "*** Bug 1711444 has been marked as a duplicate of this bug. ***", "is_private": false, "creator": "kaie@kuix.de", "id": 15411525, "author": "kaie@kuix.de", "creation_time": "2021-05-18T11:58:57Z"}, {"text": "Dear all,\nthanks again so much for this implementation! if anybody uses this alias file in an organization (of with a group of people, and the aliases changes up, and then) I've created a simple addon which downloads the alias json file from a server: https://addons.thunderbird.net/en-US/thunderbird/addon/openpgp-alias-updater/\n\nthe openpgp alias parameter must be set as explained here: https://wiki.mozilla.org/Thunderbird:OpenPGP:Aliases", "raw_text": "Dear all,\nthanks again so much for this implementation! if anybody uses this alias file in an organization (of with a group of people, and the aliases changes up, and then) I've created a simple addon which downloads the alias json file from a server: https://addons.thunderbird.net/en-US/thunderbird/addon/openpgp-alias-updater/\n\nthe openpgp alias parameter must be set as explained here: https://wiki.mozilla.org/Thunderbird:OpenPGP:Aliases", "is_private": false, "id": 15420339, "author": "cl101@mail77.eu", "bug_id": 1644085, "attachment_id": null, "creator": "cl101@mail77.eu", "creation_time": "2021-05-25T16:03:33Z", "count": 152, "tags": [], "time": "2021-05-25T16:03:33Z"}, {"tags": [], "count": 153, "time": "2021-06-16T07:42:43Z", "creation_time": "2021-06-16T07:42:43Z", "creator": "lesedi@theengineroom.org", "bug_id": 1644085, "attachment_id": null, "is_private": false, "text": "This is a great fix. Is there any timeline on when this fix will be added to the core functionality of Thunderbird?", "raw_text": "This is a great fix. Is there any timeline on when this fix will be added to the core functionality of Thunderbird?", "author": "lesedi@theengineroom.org", "id": 15452413}, {"creation_time": "2021-06-16T08:50:20Z", "creator": "clemens.hanel@tngtech.com", "tags": [], "count": 154, "time": "2021-06-16T08:50:20Z", "is_private": false, "text": "This ticket has already been merged to release and is available since 78.9.1.", "raw_text": "This ticket has already been merged to release and is available since 78.9.1.", "author": "clemens.hanel@tngtech.com", "id": 15452493, "bug_id": 1644085, "attachment_id": null}, {"bug_id": 1644085, "attachment_id": null, "raw_text": "it seems not to work with thunderbirds built-in address book lists. \n\n1. I have an address book list that appears as list <listname> in the addressbar\n2. without alias-list, it returns the error, that there is no gpgkey available for listname\n3. I created an alias-list according to: https://wiki.mozilla.org/Thunderbird:OpenPGP:Aliases \n\n     {\n       \"email\": \"listname\",\n       \"keys\": [\n         {\n           \"description\": \"foo\",\n           \"fingerprint\": \"XXXXFAA6E562943FB4B145005B7D716CF79F2378\"\n         },\n         {\n           \"description\": \"bar\",\n           \"id\": \"XXXXA1C41D5F97CEC212B4BC4F80A27FC8CD1E18\"\n         }\n...\n\n4. Now the Status keeps forever in \"Creating mail message...\" and a Send Message Error \"Sending of the message failed\" appears.\n5. When I click ok on the Send Message Error, the Sending Messege popup closes also.", "text": "it seems not to work with thunderbirds built-in address book lists. \n\n1. I have an address book list that appears as list <listname> in the addressbar\n2. without alias-list, it returns the error, that there is no gpgkey available for listname\n3. I created an alias-list according to: https://wiki.mozilla.org/Thunderbird:OpenPGP:Aliases \n\n     {\n       \"email\": \"listname\",\n       \"keys\": [\n         {\n           \"description\": \"foo\",\n           \"fingerprint\": \"XXXXFAA6E562943FB4B145005B7D716CF79F2378\"\n         },\n         {\n           \"description\": \"bar\",\n           \"id\": \"XXXXA1C41D5F97CEC212B4BC4F80A27FC8CD1E18\"\n         }\n...\n\n4. Now the Status keeps forever in \"Creating mail message...\" and a Send Message Error \"Sending of the message failed\" appears.\n5. When I click ok on the Send Message Error, the Sending Messege popup closes also.", "is_private": false, "author": "dagmar.krefting@gmail.com", "id": 15667719, "count": 155, "tags": [], "time": "2021-11-22T18:01:15Z", "creator": "dagmar.krefting@gmail.com", "creation_time": "2021-11-22T18:01:15Z"}, {"attachment_id": null, "bug_id": 1644085, "author": "mkmelin+mozilla@iki.fi", "id": 15668004, "is_private": false, "text": "Correct, it has to be a real email.", "raw_text": "Correct, it has to be a real email.", "time": "2021-11-22T21:25:15Z", "tags": [], "count": 156, "creation_time": "2021-11-22T21:25:15Z", "creator": "mkmelin+mozilla@iki.fi"}, {"raw_text": "", "text": "*** Bug 1666182 has been marked as a duplicate of this bug. ***", "is_private": false, "id": 15698979, "author": "nf@irq7.fr", "bug_id": 1644085, "attachment_id": null, "creator": "nf@irq7.fr", "creation_time": "2021-12-15T17:23:22Z", "count": 157, "tags": [], "time": "2021-12-15T17:23:22Z"}]}}, "comments": {}}