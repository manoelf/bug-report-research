{"comments": {}, "bugs": {"676808": {"comments": [{"count": 0, "bug_id": 676808, "raw_text": "It appears that the fix for bug 650493 caused the faked mutation events for the case where the HTML parser parses directly into a context node in innerHTML setter or insertAdjacentHTML to differ from the mutation events that are emitted if the parser parses into a DocumentFragment and the fragment is then inserted.\n\nSteps to reproduce:\n 1) Restore the insertAdjacentHTML tests to a state that corresponds to attachment 524158\n 2) Run the tests\n 3) Remove the direct-to-context-node path from the insertAdjacentHTML implementantion\n 4) Run the tests again\n\nActual results:\nThe tests fail when parsing directly into the context node.\n\nExpected results:\nExpected the same mutation events with or without the direct-to-context-node optimization.\n\nAdditional info:\nThings were OK before bug 650493 landed.", "attachment_id": null, "id": 5635588, "is_private": false, "creator": "hsivonen@mozilla.com", "text": "It appears that the fix for bug 650493 caused the faked mutation events for the case where the HTML parser parses directly into a context node in innerHTML setter or insertAdjacentHTML to differ from the mutation events that are emitted if the parser parses into a DocumentFragment and the fragment is then inserted.\n\nSteps to reproduce:\n 1) Restore the insertAdjacentHTML tests to a state that corresponds to attachment 524158\n 2) Run the tests\n 3) Remove the direct-to-context-node path from the insertAdjacentHTML implementantion\n 4) Run the tests again\n\nActual results:\nThe tests fail when parsing directly into the context node.\n\nExpected results:\nExpected the same mutation events with or without the direct-to-context-node optimization.\n\nAdditional info:\nThings were OK before bug 650493 landed.", "time": "2011-08-05T12:51:01Z", "tags": [], "creation_time": "2011-08-05T12:51:01Z", "author": "hsivonen@mozilla.com"}, {"count": 1, "creator": "bugs@pettay.fi", "is_private": false, "tags": [], "bug_id": 676808, "time": "2011-08-05T13:15:35Z", "text": "We should probably fix this regression sooner than later.\n\n(It seems that the mutation event replacement takes still time.)", "author": "bugs@pettay.fi", "creation_time": "2011-08-05T13:15:35Z", "raw_text": "We should probably fix this regression sooner than later.\n\n(It seems that the mutation event replacement takes still time.)", "attachment_id": null, "id": 5635621}, {"text": "We don't know how to evaluate this because we don't understand the scope of possible web breakage. Please give us more.", "tags": [], "time": "2011-09-01T21:51:23Z", "creation_time": "2011-09-01T21:51:23Z", "author": "asa@mozilla.com", "is_private": false, "creator": "asa@mozilla.com", "id": 5694841, "raw_text": "We don't know how to evaluate this because we don't understand the scope of possible web breakage. Please give us more.", "attachment_id": null, "bug_id": 676808, "count": 2}, {"raw_text": "I'd love help here. I don't actually think this is a big deal though as the order of mutation events have never been defined and I strongly suspect that they vary between implementations. I guess I don't see that much value in making our mutation events implementation perfect given that it should get deprecated anyway.\n\nOf course, if we see actual site breakage because of this then that will change the priority.", "attachment_id": null, "id": 5694874, "count": 3, "is_private": false, "creator": "jonas@sicking.cc", "text": "I'd love help here. I don't actually think this is a big deal though as the order of mutation events have never been defined and I strongly suspect that they vary between implementations. I guess I don't see that much value in making our mutation events implementation perfect given that it should get deprecated anyway.\n\nOf course, if we see actual site breakage because of this then that will change the priority.", "tags": [], "time": "2011-09-01T22:00:53Z", "bug_id": 676808, "creation_time": "2011-09-01T22:00:53Z", "author": "jonas@sicking.cc"}, {"id": 5732156, "attachment_id": null, "raw_text": "We discussed this in triage today - all for fixing this, but it's not Firefox-8-specific -> tracking-. If there's a safe patch to nominate for approval, we'll have a look!", "creation_time": "2011-09-22T21:43:52Z", "author": "bugzilla@johnath.com", "text": "We discussed this in triage today - all for fixing this, but it's not Firefox-8-specific -> tracking-. If there's a safe patch to nominate for approval, we'll have a look!", "tags": [], "time": "2011-09-22T21:43:52Z", "is_private": false, "creator": "bugzilla@johnath.com", "bug_id": 676808, "count": 4}, {"raw_text": "Hi, any updates for this bug? I can't point to be site breakage and I would highly like the behavior to be the same as I rely on it in my extension.\n\nFor now any known workarounds will be acceptable too.\n\nThanks.", "attachment_id": null, "id": 6149454, "count": 5, "is_private": false, "creator": "sunil@armor5.com", "text": "Hi, any updates for this bug? I can't point to be site breakage and I would highly like the behavior to be the same as I rely on it in my extension.\n\nFor now any known workarounds will be acceptable too.\n\nThanks.", "time": "2012-03-18T03:18:18Z", "tags": [], "bug_id": 676808, "creation_time": "2012-03-18T03:18:18Z", "author": "sunil@armor5.com"}, {"raw_text": "(In reply to Sunil from comment #5)\n> Hi, any updates for this bug? I can't point to be site breakage and I would\n> highly like the behavior to be the same as I rely on it in my extension.\n\nPlease don't listen to mutation events on Web pages from an extension. It makes Firefox slow.", "attachment_id": null, "id": 6150806, "count": 6, "is_private": false, "creator": "hsivonen@mozilla.com", "text": "(In reply to Sunil from comment #5)\n> Hi, any updates for this bug? I can't point to be site breakage and I would\n> highly like the behavior to be the same as I rely on it in my extension.\n\nPlease don't listen to mutation events on Web pages from an extension. It makes Firefox slow.", "tags": [], "bug_id": 676808, "time": "2012-03-19T07:13:15Z", "creation_time": "2012-03-19T07:13:15Z", "author": "hsivonen@mozilla.com"}, {"bug_id": 676808, "count": 7, "time": "2012-03-19T17:31:18Z", "tags": [], "text": "Thanks Henri for suggestions. This extension is not to be released for general public consumption but to be used in a limited environment. I understand the performance issue.\n\nOn the other hand, I'm fine observing nsIMutationObserver/nsIMutationObserver2, however it's not available to Javascript plugins. Is there a quick/easy way to write a C++ plugin that would allow JS plugins to observer those mutations? I understand nsIMutationObserver doesn't have the same performance penalty.", "author": "sunil@armor5.com", "creation_time": "2012-03-19T17:31:18Z", "creator": "sunil@armor5.com", "is_private": false, "id": 6152087, "raw_text": "Thanks Henri for suggestions. This extension is not to be released for general public consumption but to be used in a limited environment. I understand the performance issue.\n\nOn the other hand, I'm fine observing nsIMutationObserver/nsIMutationObserver2, however it's not available to Javascript plugins. Is there a quick/easy way to write a C++ plugin that would allow JS plugins to observer those mutations? I understand nsIMutationObserver doesn't have the same performance penalty.", "attachment_id": null}]}}}