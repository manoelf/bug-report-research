{"comments": {}, "bugs": {"1637562": {"comments": [{"author": "poirot.alex@gmail.com", "tags": [], "bug_id": 1637562, "is_private": false, "count": 0, "raw_text": "Currently, `ResourceWatcher.watch` is expected to call the `onAvailable` callback for resources which already exists. i.e. for resources that were created *before* the call to `watch()`.\nBut:\n1) There is no way to only listen for \"future\" resources. i.e. only the one which are created *after* the call to `watch()`. And bug 1626494 highlighted a case where that would be useful.\n2) Bug 1625961 highlighted that `watch` was inconsistant, and while the first call would notify about past and future resources, all other calls after the first one would only notify about the future ones. We are currently relying on this inconsistancy in order to only retrieve future resources for DOCUMENT_EVENTS resource. Such flag would help addressing this inconsistancy by being explicit about it. The current codebase uses a whitelist, but that is imperfect as the inconsistancy is still here for DOCUMENT_EVENTS.\n\nI imagine we could probably first introduce a dictionnary argument in `ResourceWatcher.watch` (bug 1637561), then, here we would expose new optional boolean: `watchOnlyFutureResources`, or `onlyFuture`, ... (or any naming that makes sense).\n\nThen, regarding how to implement this attribute, we might try to convey this boolean down to the legacy listeners, so that we avoid fetching \"cached\"/\"past\" resources.\nFor example, we could avoid executing [these lines](https://searchfox.org/mozilla-central/rev/0688ffdef223dac527c2fcdb25560118c4e4df51/devtools/shared/resources/legacy-listeners/console-messages.js#36-40).\nLater on in bug 1626647, we may pass this flag to the WatcherActor so that it knows if it should emit past resources or not.\nNote that depending on how we implement that, we may have inconsistancy depending on the call order of `watch({ onlyFuture: false })` versus `watch({ onlyFuture: true })`\n\nAlso, I think that this behavior \"only listen for future resources\" is most likely going to be rare and should be considered as an edge case.\nWe may add various restriction to it, like:\n* only accept listening for future resource *after* a call to watch has been made listening for everything?\n* only accept listening for only future for a few special resources?\nGiven this, we may expose this feature through an API other than `watch`.\nWe could for example expose:\n* `onNextResource(resourceType)` returning a promise, a bit like eventEmitter.once\n* `onNextResource(resourceType, resource => resource.name == \"dom-complete\")` similar, but with an optional callback to filter out the resource, in order to match a precise one.\n* or some other naming or interface that makes sense!\nThis function could throw if we weren't already watching for this resource type. Or automagically start calling watch, but be careful of inconsistancy of call order between `watch` and `onNextResource`.", "time": "2020-05-13T10:38:16Z", "text": "Currently, `ResourceWatcher.watch` is expected to call the `onAvailable` callback for resources which already exists. i.e. for resources that were created *before* the call to `watch()`.\nBut:\n1) There is no way to only listen for \"future\" resources. i.e. only the one which are created *after* the call to `watch()`. And bug 1626494 highlighted a case where that would be useful.\n2) Bug 1625961 highlighted that `watch` was inconsistant, and while the first call would notify about past and future resources, all other calls after the first one would only notify about the future ones. We are currently relying on this inconsistancy in order to only retrieve future resources for DOCUMENT_EVENTS resource. Such flag would help addressing this inconsistancy by being explicit about it. The current codebase uses a whitelist, but that is imperfect as the inconsistancy is still here for DOCUMENT_EVENTS.\n\nI imagine we could probably first introduce a dictionnary argument in `ResourceWatcher.watch` (bug 1637561), then, here we would expose new optional boolean: `watchOnlyFutureResources`, or `onlyFuture`, ... (or any naming that makes sense).\n\nThen, regarding how to implement this attribute, we might try to convey this boolean down to the legacy listeners, so that we avoid fetching \"cached\"/\"past\" resources.\nFor example, we could avoid executing [these lines](https://searchfox.org/mozilla-central/rev/0688ffdef223dac527c2fcdb25560118c4e4df51/devtools/shared/resources/legacy-listeners/console-messages.js#36-40).\nLater on in bug 1626647, we may pass this flag to the WatcherActor so that it knows if it should emit past resources or not.\nNote that depending on how we implement that, we may have inconsistancy depending on the call order of `watch({ onlyFuture: false })` versus `watch({ onlyFuture: true })`\n\nAlso, I think that this behavior \"only listen for future resources\" is most likely going to be rare and should be considered as an edge case.\nWe may add various restriction to it, like:\n* only accept listening for future resource *after* a call to watch has been made listening for everything?\n* only accept listening for only future for a few special resources?\nGiven this, we may expose this feature through an API other than `watch`.\nWe could for example expose:\n* `onNextResource(resourceType)` returning a promise, a bit like eventEmitter.once\n* `onNextResource(resourceType, resource => resource.name == \"dom-complete\")` similar, but with an optional callback to filter out the resource, in order to match a precise one.\n* or some other naming or interface that makes sense!\nThis function could throw if we weren't already watching for this resource type. Or automagically start calling watch, but be careful of inconsistancy of call order between `watch` and `onNextResource`.", "id": 14816374, "creation_time": "2020-05-13T10:38:16Z", "attachment_id": null, "creator": "poirot.alex@gmail.com"}, {"raw_text": "FYI, Daisuke already started prototyping something in https://phabricator.services.mozilla.com/D67438.", "time": "2020-05-13T10:49:12Z", "author": "poirot.alex@gmail.com", "count": 1, "is_private": false, "bug_id": 1637562, "tags": [], "creation_time": "2020-05-13T10:49:12Z", "creator": "poirot.alex@gmail.com", "attachment_id": null, "text": "FYI, Daisuke already started prototyping something in https://phabricator.services.mozilla.com/D67438.", "id": 14816388}, {"tags": [], "bug_id": 1637562, "is_private": false, "count": 2, "text": "Tracking dt-fission-m2-mvp bugs for Fission Nightly milestone (M6c)", "id": 14817336, "author": "cpeterson@mozilla.com", "time": "2020-05-13T17:50:31Z", "attachment_id": null, "creator": "cpeterson@mozilla.com", "creation_time": "2020-05-13T17:50:31Z", "raw_text": "Tracking dt-fission-m2-mvp bugs for Fission Nightly milestone (M6c)"}, {"time": "2020-05-14T22:18:39Z", "raw_text": "From: https://phabricator.services.mozilla.com/D67438#inline-436437\n> Alex:\n> I was wondering if we could, instead of modifying `ResourceWatcher.watch`, have a dedicated new method on ResourceWatcher, which would better fit what we need here.\n> I thought about `ResourceWatcher.onNextResource(resourceType, testFunction)`, a method we would resolve once we receive the next future  resource of a given type, and we can also use a testFunction which would help filter out the one resource we are waiting for\n> I first thought about returning a promise, but we can tweak that accordingly to the needs.\n\t\t\t\t\n> Daisuke:\n> I have one question.\n> Will this onNextResource enable only once as same as EventEmitter.once()?\n> If so, as we want to catch all future resources in this case, we take the events by like this?\n> ```\n> async function observe() {\n>   const resource = await watcher.onNextResource(DOCUMENT_EVENT);\n>   \u2026 do something\n>   observe();\n> }\n> ```\n> Or, similar to watch but get future resources only?\n> ```\n> function handler(resource) {\n>   ... do something\n> }\n> await watcher.onNextResource(DOCUMENT_EVENT, handler);\n> ```\n\nSorry, I thought that WebExtension codebase was only listening to the next resource and not to all the following.\nSo, yes it makes sense to have a listener/handler instead of returning a promise like `EventEmitter.once`.\nThen it looks like watch again. So the choice is between:\n`watcher.watch(DOCUMENT_EVENT, { onAvailable: listener, onlyFuture: true });`\nversus\n`watcher.onNextResources(DOCUMENT_EVENT, listener);`\n\nNicolas, Julian, do you have any opinion?\n(See comment 0 for much more context)", "tags": [], "bug_id": 1637562, "is_private": false, "count": 3, "author": "poirot.alex@gmail.com", "attachment_id": null, "creator": "poirot.alex@gmail.com", "creation_time": "2020-05-14T22:18:39Z", "text": "From: https://phabricator.services.mozilla.com/D67438#inline-436437\n> Alex:\n> I was wondering if we could, instead of modifying `ResourceWatcher.watch`, have a dedicated new method on ResourceWatcher, which would better fit what we need here.\n> I thought about `ResourceWatcher.onNextResource(resourceType, testFunction)`, a method we would resolve once we receive the next future  resource of a given type, and we can also use a testFunction which would help filter out the one resource we are waiting for\n> I first thought about returning a promise, but we can tweak that accordingly to the needs.\n\t\t\t\t\n> Daisuke:\n> I have one question.\n> Will this onNextResource enable only once as same as EventEmitter.once()?\n> If so, as we want to catch all future resources in this case, we take the events by like this?\n> ```\n> async function observe() {\n>   const resource = await watcher.onNextResource(DOCUMENT_EVENT);\n>   \u2026 do something\n>   observe();\n> }\n> ```\n> Or, similar to watch but get future resources only?\n> ```\n> function handler(resource) {\n>   ... do something\n> }\n> await watcher.onNextResource(DOCUMENT_EVENT, handler);\n> ```\n\nSorry, I thought that WebExtension codebase was only listening to the next resource and not to all the following.\nSo, yes it makes sense to have a listener/handler instead of returning a promise like `EventEmitter.once`.\nThen it looks like watch again. So the choice is between:\n`watcher.watch(DOCUMENT_EVENT, { onAvailable: listener, onlyFuture: true });`\nversus\n`watcher.onNextResources(DOCUMENT_EVENT, listener);`\n\nNicolas, Julian, do you have any opinion?\n(See comment 0 for much more context)", "id": 14821543}, {"time": "2020-05-15T06:10:12Z", "raw_text": "I slightly prefer the first option. I think it's pretty clear that if we `watch` for `onlyFuture` (or another arg name if we can think of something else), it will behave exactly like `watch`, except you won't get the already existing targets. With a new separate method `onNextResources`, it could be slightly harder to understand for someone new to these APIs. \n\nBut as I said, I \"slightly\" prefer it, we could go either way.", "count": 4, "is_private": false, "tags": [], "bug_id": 1637562, "author": "jdescottes@mozilla.com", "creator": "jdescottes@mozilla.com", "attachment_id": null, "creation_time": "2020-05-15T06:10:12Z", "text": "I slightly prefer the first option. I think it's pretty clear that if we `watch` for `onlyFuture` (or another arg name if we can think of something else), it will behave exactly like `watch`, except you won't get the already existing targets. With a new separate method `onNextResources`, it could be slightly harder to understand for someone new to these APIs. \n\nBut as I said, I \"slightly\" prefer it, we could go either way.", "id": 14822006}, {"creator": "nchevobbe@mozilla.com", "attachment_id": null, "time": "2020-05-15T06:43:57Z", "raw_text": "I non-slightly prefer the first option too :) \nA flag that limit what we consume is enough, and it has the benefit of us keeping the same function, which is better in the long run, as with 2 functions, we'd have to keep them \"in-sync\" or they'll diverge at some point.\n\nI'd like something like `watcher.watch(DOCUMENT_EVENT, onAvailable, onUpdate, { ignoreExistingResources: true }` so we keep the current call as they are now (`watcher.watch(CONSOLE_MESSAGE, onResourceAvailable)`), and if a callpoint need to add an option they can do it.", "creation_time": "2020-05-15T06:43:57Z", "count": 5, "is_private": false, "bug_id": 1637562, "tags": [], "author": "nchevobbe@mozilla.com", "text": "I non-slightly prefer the first option too :) \nA flag that limit what we consume is enough, and it has the benefit of us keeping the same function, which is better in the long run, as with 2 functions, we'd have to keep them \"in-sync\" or they'll diverge at some point.\n\nI'd like something like `watcher.watch(DOCUMENT_EVENT, onAvailable, onUpdate, { ignoreExistingResources: true }` so we keep the current call as they are now (`watcher.watch(CONSOLE_MESSAGE, onResourceAvailable)`), and if a callpoint need to add an option they can do it.", "id": 14822027}, {"author": "daisuke@birchill.co.jp", "bug_id": 1637562, "tags": [], "is_private": false, "count": 6, "raw_text": "\n\nDepends on D75482", "time": "2020-05-18T08:15:54Z", "id": 14827932, "text": "Created attachment 9149776\nBug 1637562: Introduce 'onlyFuture' flag in order to listen to future resources only.\n\n\n\nDepends on D75482", "creation_time": "2020-05-18T08:15:54Z", "attachment_id": 9149776, "creator": "daisuke@birchill.co.jp"}, {"creation_time": "2020-05-18T08:16:14Z", "attachment_id": 9149777, "creator": "daisuke@birchill.co.jp", "id": 14827933, "text": "Created attachment 9149777\nBug 1637562: Make the future resources feature available for document events.\n\n\n\nDepends on D75746", "raw_text": "\n\nDepends on D75746", "time": "2020-05-18T08:16:14Z", "author": "daisuke@birchill.co.jp", "is_private": false, "count": 7, "bug_id": 1637562, "tags": []}, {"id": 14827934, "text": "Created attachment 9149778\nBug 1637562: Add test for ignoreExistingResources flag for document events.\n\n\n\nDepends on D75747", "attachment_id": 9149778, "creator": "daisuke@birchill.co.jp", "creation_time": "2020-05-18T08:16:28Z", "count": 8, "is_private": false, "tags": [], "bug_id": 1637562, "author": "daisuke@birchill.co.jp", "time": "2020-05-18T08:16:28Z", "raw_text": "\n\nDepends on D75747"}, {"creation_time": "2020-05-18T08:16:42Z", "attachment_id": 9149779, "creator": "daisuke@birchill.co.jp", "id": 14827935, "text": "Created attachment 9149779\nBug 1637562: Add test for ignoreExistingResources flag for console messages.\n\n\n\nDepends on D75748", "raw_text": "\n\nDepends on D75748", "time": "2020-05-18T08:16:42Z", "author": "daisuke@birchill.co.jp", "tags": [], "bug_id": 1637562, "count": 9, "is_private": false}, {"tags": [], "bug_id": 1637562, "is_private": false, "count": 10, "author": "daisuke@birchill.co.jp", "time": "2020-05-18T08:16:56Z", "raw_text": "\n\nDepends on D75749", "text": "Created attachment 9149780\nBug 1637562: Add test for ignoreExistingResources flag for error messages.\n\n\n\nDepends on D75749", "id": 14827936, "attachment_id": 9149780, "creator": "daisuke@birchill.co.jp", "creation_time": "2020-05-18T08:16:56Z"}, {"id": 14827937, "text": "Created attachment 9149781\nBug 1637562: Add test for ignoreExistingResources flag for platform messages.\n\n\n\nDepends on D75750", "creation_time": "2020-05-18T08:17:11Z", "attachment_id": 9149781, "creator": "daisuke@birchill.co.jp", "author": "daisuke@birchill.co.jp", "tags": [], "bug_id": 1637562, "count": 11, "is_private": false, "raw_text": "\n\nDepends on D75750", "time": "2020-05-18T08:17:11Z"}, {"raw_text": "", "time": "2020-05-19T05:02:39Z", "author": "daisuke@birchill.co.jp", "tags": [], "bug_id": 1637562, "is_private": false, "count": 12, "creation_time": "2020-05-19T05:02:39Z", "creator": "daisuke@birchill.co.jp", "attachment_id": 9150038, "id": 14829957, "text": "Created attachment 9150038\nBug 1637562: Introduce 'ignoreExistingResources' flag in order to ignore existing resources."}, {"raw_text": "Pushed by dakatsuka.birchill@mozilla.com:\nhttps://hg.mozilla.org/integration/autoland/rev/3d2af0d65f39\nIntroduce 'ignoreExistingResources' flag in order to ignore existing resources. r=ochameau,nchevobbe\nhttps://hg.mozilla.org/integration/autoland/rev/c5b2ed837172\nAdd test for ignoreExistingResources flag for document events. r=ochameau,jdescottes\nhttps://hg.mozilla.org/integration/autoland/rev/6761e905feaf\nAdd test for ignoreExistingResources flag for console messages. r=ochameau,nchevobbe\nhttps://hg.mozilla.org/integration/autoland/rev/44167342f7f0\nAdd test for ignoreExistingResources flag for error messages. r=ochameau,nchevobbe\nhttps://hg.mozilla.org/integration/autoland/rev/366f83055635\nAdd test for ignoreExistingResources flag for platform messages. r=ochameau,nchevobbe", "time": "2020-05-20T08:18:21Z", "author": "pulsebot@bots.tld", "is_private": false, "count": 13, "tags": [], "bug_id": 1637562, "creation_time": "2020-05-20T08:18:21Z", "attachment_id": null, "creator": "pulsebot@bots.tld", "text": "Pushed by dakatsuka.birchill@mozilla.com:\nhttps://hg.mozilla.org/integration/autoland/rev/3d2af0d65f39\nIntroduce 'ignoreExistingResources' flag in order to ignore existing resources. r=ochameau,nchevobbe\nhttps://hg.mozilla.org/integration/autoland/rev/c5b2ed837172\nAdd test for ignoreExistingResources flag for document events. r=ochameau,jdescottes\nhttps://hg.mozilla.org/integration/autoland/rev/6761e905feaf\nAdd test for ignoreExistingResources flag for console messages. r=ochameau,nchevobbe\nhttps://hg.mozilla.org/integration/autoland/rev/44167342f7f0\nAdd test for ignoreExistingResources flag for error messages. r=ochameau,nchevobbe\nhttps://hg.mozilla.org/integration/autoland/rev/366f83055635\nAdd test for ignoreExistingResources flag for platform messages. r=ochameau,nchevobbe", "id": 14832715}, {"author": "apavel@mozilla.com", "tags": ["bugherder"], "bug_id": 1637562, "count": 14, "is_private": false, "raw_text": "https://hg.mozilla.org/mozilla-central/rev/3d2af0d65f39\nhttps://hg.mozilla.org/mozilla-central/rev/c5b2ed837172\nhttps://hg.mozilla.org/mozilla-central/rev/6761e905feaf\nhttps://hg.mozilla.org/mozilla-central/rev/44167342f7f0\nhttps://hg.mozilla.org/mozilla-central/rev/366f83055635", "time": "2020-05-20T15:51:53Z", "id": 14833940, "text": "https://hg.mozilla.org/mozilla-central/rev/3d2af0d65f39\nhttps://hg.mozilla.org/mozilla-central/rev/c5b2ed837172\nhttps://hg.mozilla.org/mozilla-central/rev/6761e905feaf\nhttps://hg.mozilla.org/mozilla-central/rev/44167342f7f0\nhttps://hg.mozilla.org/mozilla-central/rev/366f83055635", "creation_time": "2020-05-20T15:51:53Z", "creator": "apavel@mozilla.com", "attachment_id": null}]}}}