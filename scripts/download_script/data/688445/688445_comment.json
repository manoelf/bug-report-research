{"bugs": {"688445": {"comments": [{"raw_text": "While investigating redoing nsITimer I came across some unexpected semantics of changing the delay on repeated timers. I created a test case to document the current semantics to ensure any changes are intentional.", "attachment_id": 561728, "text": "Created attachment 561728\ntest nsITimer delay change semantics\n\nWhile investigating redoing nsITimer I came across some unexpected semantics of changing the delay on repeated timers. I created a test case to document the current semantics to ensure any changes are intentional.", "bug_id": 688445, "tags": [], "is_private": false, "id": 5730696, "count": 0, "author": "jmuizelaar@mozilla.com", "creator": "jmuizelaar@mozilla.com", "creation_time": "2011-09-22T14:16:12Z", "time": "2011-09-22T14:16:12Z"}, {"attachment_id": 561728, "raw_text": "Review of attachment 561728:\n-----------------------------------------------------------------\n\n::: xpcom/tests/unit/test_nsITimer_delaychange.js\n@@ +21,5 @@\n> +\t  } else if (count == 1) {\n> +\t      // we only need two ticks so cancel the timer\n> +\t      timer.cancel();\n> +\t  } else  {\n> +\t      abort();\n\nWhere is this function defined?\n\n@@ +29,5 @@\n> +\n> +    timer2 = Cc[\"@mozilla.org/timer;1\"].createInstance(Ci.nsITimer);\n> +    timer2.initWithCallback(function() {\n> +\t// check that number of times that first timer has fired matches our expectations\n> +\tdo_check_true(count == expectedCount);\n\nUse do_check_eq please.\n\n@@ +33,5 @@\n> +\tdo_check_true(count == expectedCount);\n> +\t\n> +\tdo_test_finished();\n> +\n> +\t}, 166, timer2.TYPE_ONE_SHOT);\n\nWhere are these magic numbers coming from?\n\n@@ +40,5 @@\n> +\n> +  test_timer(Ci.nsITimer.TYPE_REPEATING_SLACK, 2);\n> +  test_timer(Ci.nsITimer.TYPE_REPEATING_PRECISE_CAN_SKIP, 2);\n> +  // It's weird that REPEATING_PRECISE timers behave differently here\n> +  test_timer(Ci.nsITimer.TYPE_REPEATING_PRECISE, 1);\n\nCan you also document the semantics that you're testing here?\n\n::: xpcom/tests/unit/xpcshell.ini\n@@ +39,5 @@\n>  [test_systemInfo.js]\n>  # Bug 676998: test fails consistently on Android\n>  fail-if = os == \"android\"\n>  [test_versioncomparator.js]\n> +[test_nsITimer_delaychange.js ]\n\nPlease keep the manifest file alphabetically sorted.", "tags": [], "text": "Comment on attachment 561728\ntest nsITimer delay change semantics\n\nReview of attachment 561728:\n-----------------------------------------------------------------\n\n::: xpcom/tests/unit/test_nsITimer_delaychange.js\n@@ +21,5 @@\n> +\t  } else if (count == 1) {\n> +\t      // we only need two ticks so cancel the timer\n> +\t      timer.cancel();\n> +\t  } else  {\n> +\t      abort();\n\nWhere is this function defined?\n\n@@ +29,5 @@\n> +\n> +    timer2 = Cc[\"@mozilla.org/timer;1\"].createInstance(Ci.nsITimer);\n> +    timer2.initWithCallback(function() {\n> +\t// check that number of times that first timer has fired matches our expectations\n> +\tdo_check_true(count == expectedCount);\n\nUse do_check_eq please.\n\n@@ +33,5 @@\n> +\tdo_check_true(count == expectedCount);\n> +\t\n> +\tdo_test_finished();\n> +\n> +\t}, 166, timer2.TYPE_ONE_SHOT);\n\nWhere are these magic numbers coming from?\n\n@@ +40,5 @@\n> +\n> +  test_timer(Ci.nsITimer.TYPE_REPEATING_SLACK, 2);\n> +  test_timer(Ci.nsITimer.TYPE_REPEATING_PRECISE_CAN_SKIP, 2);\n> +  // It's weird that REPEATING_PRECISE timers behave differently here\n> +  test_timer(Ci.nsITimer.TYPE_REPEATING_PRECISE, 1);\n\nCan you also document the semantics that you're testing here?\n\n::: xpcom/tests/unit/xpcshell.ini\n@@ +39,5 @@\n>  [test_systemInfo.js]\n>  # Bug 676998: test fails consistently on Android\n>  fail-if = os == \"android\"\n>  [test_versioncomparator.js]\n> +[test_nsITimer_delaychange.js ]\n\nPlease keep the manifest file alphabetically sorted.", "bug_id": 688445, "is_private": false, "id": 5731037, "count": 1, "creator": "ehsan.akhgari@gmail.com", "time": "2011-09-22T16:11:02Z", "creation_time": "2011-09-22T16:11:02Z", "author": "ehsan.akhgari@gmail.com"}]}}, "comments": {}}