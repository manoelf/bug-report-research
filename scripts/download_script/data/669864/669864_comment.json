{"bugs": {"669864": {"comments": [{"bug_id": 669864, "text": "Created attachment 544453\nArchive containing all tests\n\nI've found a good way to automatically create test cases that can be used as starting point for additional tests in jstests/jit-test, increasing the test coverage. I performed the following steps:\n\n1. Built TM with gcov and ran jstests/jit-test suites. This showed that many branches are uncovered and even a lot of functions are never called (some of these might be dead, others might only be needed by externals, yet again others are simply untested).\n\n2. Instrumented all functions that where never called with JS_ASSERT(0) automatically. Also verified that none of them are called by rerunning tests.\n\n3. Ran LangFuzz on the modified build (~12 hours) and automatically minimized each resulting test.\n\nThe result of this procedure is attached: Each directory contains at least a file \"test.js\" containing the actual JS test, and a file TARGET which indicates the function called and also includes file/line number where this function is defined. The flags used are \"-j -m -p\" and possibly additional flags in the FLAGS file, if one is present. The following functions are included right now:\n\nasInt32\nENSURE_SLOW_ARRAY\nEvalCmp\nGetPropertyWithNativeGetter\nHasInstanceOnTrace\nInitPropertyByIndex\njs_AddProperty\njs_BooleanIntToString\njs_BoyerMooreHorspool\njs::CanLeaveTrace\njs_DoubleToUint32\njs_dtobasestr\njs_EqualStringsOnTrace\nJS_GetStringLength\nJS_GetTypeName\njs::js_Unbrand\njs_String_tn\njs_TypeOfObject\nmath_random_tn\nmath_toSource\nproxy_Fix\nstr_encodeURI_Component\n\n\nIn order to make these tests useful, they must be modified to also check the correctness of each function (simply covering it is the first step, but of course a good test should do more).\n\nI would be very happy if one or more JS devs could look at the tests, decide if this method is even useful and merge them into the test suite with appropriate modifications. Let me know if you have questions or suggestions :)", "tags": [], "raw_text": "I've found a good way to automatically create test cases that can be used as starting point for additional tests in jstests/jit-test, increasing the test coverage. I performed the following steps:\n\n1. Built TM with gcov and ran jstests/jit-test suites. This showed that many branches are uncovered and even a lot of functions are never called (some of these might be dead, others might only be needed by externals, yet again others are simply untested).\n\n2. Instrumented all functions that where never called with JS_ASSERT(0) automatically. Also verified that none of them are called by rerunning tests.\n\n3. Ran LangFuzz on the modified build (~12 hours) and automatically minimized each resulting test.\n\nThe result of this procedure is attached: Each directory contains at least a file \"test.js\" containing the actual JS test, and a file TARGET which indicates the function called and also includes file/line number where this function is defined. The flags used are \"-j -m -p\" and possibly additional flags in the FLAGS file, if one is present. The following functions are included right now:\n\nasInt32\nENSURE_SLOW_ARRAY\nEvalCmp\nGetPropertyWithNativeGetter\nHasInstanceOnTrace\nInitPropertyByIndex\njs_AddProperty\njs_BooleanIntToString\njs_BoyerMooreHorspool\njs::CanLeaveTrace\njs_DoubleToUint32\njs_dtobasestr\njs_EqualStringsOnTrace\nJS_GetStringLength\nJS_GetTypeName\njs::js_Unbrand\njs_String_tn\njs_TypeOfObject\nmath_random_tn\nmath_toSource\nproxy_Fix\nstr_encodeURI_Component\n\n\nIn order to make these tests useful, they must be modified to also check the correctness of each function (simply covering it is the first step, but of course a good test should do more).\n\nI would be very happy if one or more JS devs could look at the tests, decide if this method is even useful and merge them into the test suite with appropriate modifications. Let me know if you have questions or suggestions :)", "attachment_id": 544453, "author": "choller@mozilla.com", "time": "2011-07-07T13:11:13Z", "creation_time": "2011-07-07T13:11:13Z", "creator": "choller@mozilla.com", "id": 5578461, "count": 0, "is_private": false}, {"text": "Jason suggested that some of these functions might be covered by jit-test if they are run with the right flags. I performed the initial run with --jitflags=mjp,m as it is mentioned in the docs (https://developer.mozilla.org/en/SpiderMonkey/Running_Automated_JavaScript_Tests) but the -p flag prevents some of the jit tests from covering certain functions. I ran now with --jitflags=mja,mjp,m,mj which caused the following functions to be covered additionally:\n\njs_DoubleToUint32\njs_AddProperty\njs_BooleanIntToString\njs::CanLeaveTrace\njs_String_tn\njs_EqualStringsOnTrace\nasInt32\nInitPropertyByIndex\nHasInstanceOnTrace\nEvalCmp\n\nThe tests LangFuzz created do work with -jmp though.", "bug_id": 669864, "tags": [], "raw_text": "Jason suggested that some of these functions might be covered by jit-test if they are run with the right flags. I performed the initial run with --jitflags=mjp,m as it is mentioned in the docs (https://developer.mozilla.org/en/SpiderMonkey/Running_Automated_JavaScript_Tests) but the -p flag prevents some of the jit tests from covering certain functions. I ran now with --jitflags=mja,mjp,m,mj which caused the following functions to be covered additionally:\n\njs_DoubleToUint32\njs_AddProperty\njs_BooleanIntToString\njs::CanLeaveTrace\njs_String_tn\njs_EqualStringsOnTrace\nasInt32\nInitPropertyByIndex\nHasInstanceOnTrace\nEvalCmp\n\nThe tests LangFuzz created do work with -jmp though.", "attachment_id": null, "author": "choller@mozilla.com", "creator": "choller@mozilla.com", "creation_time": "2011-07-07T14:58:33Z", "time": "2011-07-07T14:58:33Z", "is_private": false, "count": 1, "id": 5578654}, {"creator": "cbook@mozilla.com", "time": "2011-07-07T15:01:36Z", "creation_time": "2011-07-07T15:01:36Z", "author": "cbook@mozilla.com", "is_private": false, "count": 2, "id": 5578670, "tags": [], "bug_id": 669864, "text": "cc'ing also bob, maybe he has some good ideas here too", "attachment_id": null, "raw_text": "cc'ing also bob, maybe he has some good ideas here too"}, {"text": "Created attachment 544652\nUpdated tests\n\nRemoved tests for those functions already covered by jit-test as mentioned before. Added new test samples for the following functions:\n\ndate_now_tn\nGetPropertyById\nprop_iter_trace\njitstats_getOnTrace\nJS_GetStringCharsZ\nproxy_GetAttributes\nxml_hasInstance", "bug_id": 669864, "tags": [], "raw_text": "Removed tests for those functions already covered by jit-test as mentioned before. Added new test samples for the following functions:\n\ndate_now_tn\nGetPropertyById\nprop_iter_trace\njitstats_getOnTrace\nJS_GetStringCharsZ\nproxy_GetAttributes\nxml_hasInstance", "attachment_id": 544652, "author": "choller@mozilla.com", "creator": "choller@mozilla.com", "creation_time": "2011-07-07T23:35:33Z", "time": "2011-07-07T23:35:33Z", "is_private": false, "count": 3, "id": 5579947}, {"id": 5580649, "count": 4, "is_private": false, "creation_time": "2011-07-08T11:32:25Z", "time": "2011-07-08T11:32:25Z", "creator": "choller@mozilla.com", "author": "choller@mozilla.com", "attachment_id": 544774, "raw_text": "I updated the archive again, some of the new samples look quite complicated and I could imagine it's very hard to write them by hand (while others are trivial).\n\nArchive contains test samples for the following new methods:\n\nproxy_HasInstance\njson_toSource (trivial)\nJS_CompileUCScript\njs_PrintObjectSlotName (probably for internal use only)\nno_such_method_trace (interesting, complicated multi-file test)\ndivrem (interesting, larger method)\ngc::checkArenaListAllUnmarked (looks interesting)", "bug_id": 669864, "text": "Created attachment 544774\nUpdated tests\n\nI updated the archive again, some of the new samples look quite complicated and I could imagine it's very hard to write them by hand (while others are trivial).\n\nArchive contains test samples for the following new methods:\n\nproxy_HasInstance\njson_toSource (trivial)\nJS_CompileUCScript\njs_PrintObjectSlotName (probably for internal use only)\nno_such_method_trace (interesting, complicated multi-file test)\ndivrem (interesting, larger method)\ngc::checkArenaListAllUnmarked (looks interesting)", "tags": []}, {"creator": "choller@mozilla.com", "creation_time": "2011-07-26T09:38:56Z", "time": "2011-07-26T09:38:56Z", "author": "choller@mozilla.com", "is_private": false, "count": 5, "id": 5613365, "text": "Created attachment 548402\nUpdated tests\n\nUpdated the tests once more (added tests for functions js::GetUpvarVarOnTrace and MethodReadBarrier). The next step is now to run LangFuzz on these tests to mutate them further and provoke errors.", "bug_id": 669864, "tags": [], "attachment_id": 548402, "raw_text": "Updated the tests once more (added tests for functions js::GetUpvarVarOnTrace and MethodReadBarrier). The next step is now to run LangFuzz on these tests to mutate them further and provoke errors."}]}}, "comments": {}}