{"comments": {}, "bugs": {"713308": {"comments": [{"author": "choller@mozilla.com", "creator": "choller@mozilla.com", "id": 5938054, "tags": [], "count": 0, "is_private": false, "bug_id": 713308, "raw_text": "The following report (in the URL field) has been generated by static analysis using Clang.\n\nIt would be good if someone familiar with the particular code could check if\n\n- this is really a bug or a false positive\n- and/or if it makes sense to adjust the code (even if there is not a real bug present, e.g. by adding a missing initialization).\n\n\nIn this particular report, the analyzer first seems to assume | s->nInUse = 1 | which makes the for loop at line 161 | for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i; | assign only | yy[0] = (UChar) 0; |. From that point on, the analyzer plots a path through the code reaching line 193 with | rtmp = yy[1]; | which is an undefined assignment because yy[1] hasn't been initialized.\n\nCan this happen or is the initial assumption already impossible? Even if it's not a bug, is there any way to make the code better here or do you think no change is required?", "creation_time": "2011-12-24T00:04:59Z", "time": "2011-12-24T00:04:59Z", "attachment_id": null, "text": "The following report (in the URL field) has been generated by static analysis using Clang.\n\nIt would be good if someone familiar with the particular code could check if\n\n- this is really a bug or a false positive\n- and/or if it makes sense to adjust the code (even if there is not a real bug present, e.g. by adding a missing initialization).\n\n\nIn this particular report, the analyzer first seems to assume | s->nInUse = 1 | which makes the for loop at line 161 | for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i; | assign only | yy[0] = (UChar) 0; |. From that point on, the analyzer plots a path through the code reaching line 193 with | rtmp = yy[1]; | which is an undefined assignment because yy[1] hasn't been initialized.\n\nCan this happen or is the initial assumption already impossible? Even if it's not a bug, is there any way to make the code better here or do you think no change is required?"}, {"text": "I haven't looked at this in detail, but I do see in the URL you give that\nwe have  \n   [5]  Assuming i <= EOB\nfollowed by\n   [7]  Assuming i > EOB\n\nI'd have to study the sources, but I'm pretty sure this is due to some other\ncondition that can never be true, eg the block to be compressed cannot have\nzero size.\n\nAlso bearing in mind that\n\n(1) this is the compression size of the library, so should be able to\n    handle any inputs, and has been tested with a bunch of specially\n    constructed test cases, including zero sized files, etc, both\n    natively and when running on Valgrind/Memcheck, and I have never\n    seen any uninitialised value problems\n\n(2) I am not aware of any inputs for which bzip2-decompress(bzip2-compress(x)) != x\n    for at least a decade\n\n(3) the code has been analysed by at least one other static analyser (Klockwork)\n    and I have not been informed of any such problem\n\nI think you should forget about this.\n\nWhat I _would_ say though is that the version in Fx should be upgraded to the\nlatest stable (1.0.6).  There have been some improvements to the safety of the\ndecompression side following fuzzing tests, and we should really take those.", "attachment_id": null, "time": "2012-01-05T13:15:48Z", "creation_time": "2012-01-05T13:15:48Z", "raw_text": "I haven't looked at this in detail, but I do see in the URL you give that\nwe have  \n   [5]  Assuming i <= EOB\nfollowed by\n   [7]  Assuming i > EOB\n\nI'd have to study the sources, but I'm pretty sure this is due to some other\ncondition that can never be true, eg the block to be compressed cannot have\nzero size.\n\nAlso bearing in mind that\n\n(1) this is the compression size of the library, so should be able to\n    handle any inputs, and has been tested with a bunch of specially\n    constructed test cases, including zero sized files, etc, both\n    natively and when running on Valgrind/Memcheck, and I have never\n    seen any uninitialised value problems\n\n(2) I am not aware of any inputs for which bzip2-decompress(bzip2-compress(x)) != x\n    for at least a decade\n\n(3) the code has been analysed by at least one other static analyser (Klockwork)\n    and I have not been informed of any such problem\n\nI think you should forget about this.\n\nWhat I _would_ say though is that the version in Fx should be upgraded to the\nlatest stable (1.0.6).  There have been some improvements to the safety of the\ndecompression side following fuzzing tests, and we should really take those.", "bug_id": 713308, "is_private": false, "count": 1, "tags": [], "id": 5956853, "creator": "jseward@acm.org", "author": "jseward@acm.org"}, {"bug_id": 713308, "count": 2, "is_private": false, "tags": [], "id": 5956856, "text": "> (1) this is the compression size of the library, so should be able to\n\ns/size/side, duh.", "attachment_id": null, "time": "2012-01-05T13:17:33Z", "raw_text": "> (1) this is the compression size of the library, so should be able to\n\ns/size/side, duh.", "creation_time": "2012-01-05T13:17:33Z", "creator": "jseward@acm.org", "author": "jseward@acm.org"}]}}}