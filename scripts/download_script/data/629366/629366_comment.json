{"bugs": {"629366": {"comments": [{"author": "jfkthame@gmail.com", "creation_time": "2011-01-27T15:12:23Z", "tags": [], "text": "(See bug 499292 comment 26, 29, 30.)\n\nWhen a site uses TypeKit to provide downloadable fonts, we reflow and display the page before the @font-face rules (which TypeKit injects via JavaScript, AAUI) are seen and added to the userFontSet. As a result, we display the text using fallbacks before there's been any chance to get the desired fonts, and a @font-face fallback delay as per bug 499292 doesn't help. If anything, it makes the user experience worse because the text initially gets displayed using system fonts; then we see the @font-face rules and so we hide the fallback text; and then the text reappears once the fonts are downloaded (or once the fallback timeout expires).\n\nIt's not yet clear to me whether this is something we should/can address in Gecko, or if it is really a flaw in how TypeKit serves the resources - in which case it should go over to Evangelism.", "attachment_id": null, "creator": "jfkthame@gmail.com", "time": "2011-01-27T15:12:23Z", "count": 0, "raw_text": "(See bug 499292 comment 26, 29, 30.)\n\nWhen a site uses TypeKit to provide downloadable fonts, we reflow and display the page before the @font-face rules (which TypeKit injects via JavaScript, AAUI) are seen and added to the userFontSet. As a result, we display the text using fallbacks before there's been any chance to get the desired fonts, and a @font-face fallback delay as per bug 499292 doesn't help. If anything, it makes the user experience worse because the text initially gets displayed using system fonts; then we see the @font-face rules and so we hide the fallback text; and then the text reappears once the fonts are downloaded (or once the fallback timeout expires).\n\nIt's not yet clear to me whether this is something we should/can address in Gecko, or if it is really a flaw in how TypeKit serves the resources - in which case it should go over to Evangelism.", "is_private": false, "bug_id": 629366, "id": 5231969}, {"count": 1, "creation_time": "2011-01-27T17:11:39Z", "author": "bzbarsky@mit.edu", "time": "2011-01-27T17:11:39Z", "tags": [], "text": "The way we handle FOUC is that parser-inserted stylesheets prevent layout start until after the sheet is loaded.\n\nTypekit inserts its sheets using createElement and DOM operations, from what I can tell from their minified code.  As a result, we don't block layout start on those sheets, and as soon as we see <body> we start layout.\n\nIf typekit used document.write(), things would work better, but then there would be limitations on when the relevant typekit api can be called.", "raw_text": "The way we handle FOUC is that parser-inserted stylesheets prevent layout start until after the sheet is loaded.\n\nTypekit inserts its sheets using createElement and DOM operations, from what I can tell from their minified code.  As a result, we don't block layout start on those sheets, and as soon as we see <body> we start layout.\n\nIf typekit used document.write(), things would work better, but then there would be limitations on when the relevant typekit api can be called.", "bug_id": 629366, "is_private": false, "creator": "bzbarsky@mit.edu", "attachment_id": null, "id": 5232305}, {"raw_text": "Is it known if TypeKit is deliberately using this technique in order to show the fallback font while the TypeKit fonts are downloading?\n\nNote that while in the JavaScriptless case Gecko shows the fallback font relatively soon, WebKit doesn't paint text until the fonts have downloaded. See https://bugs.webkit.org/show_bug.cgi?id=25207 I think this is a pretty serious usability issue in WebKit and one I think we shouldn't clone. It could be that TypeKit is trying to work around the WebKit problem.\n\nI think we shouldn't do anything in particular here, except maybe standardize a way to listen for font readiness events. In the absence of such events, TypeKit could use the same technique the Google Font API uses for polling if the fonts have downloaded. (I gather the Google Font API measures the dimensions of a piece of text repeatedly and when the dimensions have changed, it concludes the font has downloaded.)", "bug_id": 629366, "is_private": false, "text": "Is it known if TypeKit is deliberately using this technique in order to show the fallback font while the TypeKit fonts are downloading?\n\nNote that while in the JavaScriptless case Gecko shows the fallback font relatively soon, WebKit doesn't paint text until the fonts have downloaded. See https://bugs.webkit.org/show_bug.cgi?id=25207 I think this is a pretty serious usability issue in WebKit and one I think we shouldn't clone. It could be that TypeKit is trying to work around the WebKit problem.\n\nI think we shouldn't do anything in particular here, except maybe standardize a way to listen for font readiness events. In the absence of such events, TypeKit could use the same technique the Google Font API uses for polling if the fonts have downloaded. (I gather the Google Font API measures the dimensions of a piece of text repeatedly and when the dimensions have changed, it concludes the font has downloaded.)", "attachment_id": null, "id": 5239350, "creator": "hsivonen@mozilla.com", "author": "hsivonen@mozilla.com", "time": "2011-01-31T08:19:50Z", "count": 2, "creation_time": "2011-01-31T08:19:50Z", "tags": []}, {"tags": [], "creation_time": "2011-01-31T08:33:15Z", "author": "jfkthame@gmail.com", "creator": "jfkthame@gmail.com", "attachment_id": null, "text": "(In reply to comment #2)\n> Is it known if TypeKit is deliberately using this technique in order to show\n> the fallback font while the TypeKit fonts are downloading?\n\nNot specifically known, but I doubt it - especially as it does _not_ achieve that in webkit, which would be the place it's currently relevant.\n\n> Note that while in the JavaScriptless case Gecko shows the fallback font\n> relatively soon, WebKit doesn't paint text until the fonts have downloaded. See\n> https://bugs.webkit.org/show_bug.cgi?id=25207 I think this is a pretty serious\n> usability issue in WebKit and one I think we shouldn't clone.\n\nAgreed, and there's no intention to do so. Bug 499292 provides a (configurable) timer so that we go ahead and show a fallback if the downloaded font does not become available quickly enough.", "count": 3, "time": "2011-01-31T08:33:15Z", "id": 5239362, "is_private": false, "bug_id": 629366, "raw_text": "(In reply to comment #2)\n> Is it known if TypeKit is deliberately using this technique in order to show\n> the fallback font while the TypeKit fonts are downloading?\n\nNot specifically known, but I doubt it - especially as it does _not_ achieve that in webkit, which would be the place it's currently relevant.\n\n> Note that while in the JavaScriptless case Gecko shows the fallback font\n> relatively soon, WebKit doesn't paint text until the fonts have downloaded. See\n> https://bugs.webkit.org/show_bug.cgi?id=25207 I think this is a pretty serious\n> usability issue in WebKit and one I think we shouldn't clone.\n\nAgreed, and there's no intention to do so. Bug 499292 provides a (configurable) timer so that we go ahead and show a fallback if the downloaded font does not become available quickly enough."}, {"tags": [], "author": "sean@typekit.com", "time": "2011-01-31T22:36:28Z", "count": 4, "creation_time": "2011-01-31T22:36:28Z", "attachment_id": null, "id": 5241160, "creator": "sean@typekit.com", "raw_text": "Hi Mozilla folks. I'm one of the Typekit developers. Paul Irish pointed me to this thread, so I thought I'd chime in.\n\nFirst, a little background:\nWe do indeed use createElement and DOM operations today to insert the link element for the CSS (with @font-face) into the head. We do this as soon as the Typekit.load function is executed. We recommend that people put this in the head of their page so the font downloads are kicked off as quickly as possible.\n\nIf I understand correctly, what happens in Firefox is that the browser downloads and executes the Typekit JS, then continues to parse and render the page while the Typekit CSS is downloaded. However, before the CSS is downloaded, Firefox has already done an initial layout/paint (before it even had a chance to notice the @font-face declarations in the Typekit CSS), so you still see a flash of unstyled text. Am I understanding that correctly?\n\nIt's possible that we could modify the Typekit JS to use document.write when Typekit.load is called from the head, and use the existing DOM operations otherwise. We could differentiate between the two cases by checking document.getElementsByTagName('body').length.\n\nI'm curious, though, why this isn't a problem with Typekit's JS today in Webkit-based browsers. They've implemented similar functionality that hides @font-face content until the fonts have been downloaded, and there's no flash of unstyled content, even though we're adding the CSS with DOM operations. Does that mean they are blocking initial layout/paint on CSS added with DOM operations as well as document.write?", "bug_id": 629366, "is_private": false, "text": "Hi Mozilla folks. I'm one of the Typekit developers. Paul Irish pointed me to this thread, so I thought I'd chime in.\n\nFirst, a little background:\nWe do indeed use createElement and DOM operations today to insert the link element for the CSS (with @font-face) into the head. We do this as soon as the Typekit.load function is executed. We recommend that people put this in the head of their page so the font downloads are kicked off as quickly as possible.\n\nIf I understand correctly, what happens in Firefox is that the browser downloads and executes the Typekit JS, then continues to parse and render the page while the Typekit CSS is downloaded. However, before the CSS is downloaded, Firefox has already done an initial layout/paint (before it even had a chance to notice the @font-face declarations in the Typekit CSS), so you still see a flash of unstyled text. Am I understanding that correctly?\n\nIt's possible that we could modify the Typekit JS to use document.write when Typekit.load is called from the head, and use the existing DOM operations otherwise. We could differentiate between the two cases by checking document.getElementsByTagName('body').length.\n\nI'm curious, though, why this isn't a problem with Typekit's JS today in Webkit-based browsers. They've implemented similar functionality that hides @font-face content until the fonts have been downloaded, and there's no flash of unstyled content, even though we're adding the CSS with DOM operations. Does that mean they are blocking initial layout/paint on CSS added with DOM operations as well as document.write?"}, {"bug_id": 629366, "is_private": false, "raw_text": "> Am I understanding that correctly?\n\nYes.\n\n> why this isn't a problem with Typekit's JS today in Webkit-based browsers\n\nThey might kick off their font loads differently.  They might implement their avoidance of a flash of unstyled content (which is what you're really getting here) differently.  FOUC avoidance is handled pretty differently in different browsers, in general.... and how it's handled has been changing, iirc, both in Gecko and Webkit.\n\nOn out end, we could try to extend the layout-blocking (but not parse blocking, which was the sticking point before which led us to only consider parser-inserted scripts, nor script-execution blocking) to all loading non-alternate sheets.  Henri, have you looked at this section of HTML5 recently?  Does it say anything useful?", "text": "> Am I understanding that correctly?\n\nYes.\n\n> why this isn't a problem with Typekit's JS today in Webkit-based browsers\n\nThey might kick off their font loads differently.  They might implement their avoidance of a flash of unstyled content (which is what you're really getting here) differently.  FOUC avoidance is handled pretty differently in different browsers, in general.... and how it's handled has been changing, iirc, both in Gecko and Webkit.\n\nOn out end, we could try to extend the layout-blocking (but not parse blocking, which was the sticking point before which led us to only consider parser-inserted scripts, nor script-execution blocking) to all loading non-alternate sheets.  Henri, have you looked at this section of HTML5 recently?  Does it say anything useful?", "id": 5241685, "attachment_id": null, "creator": "bzbarsky@mit.edu", "time": "2011-02-01T01:43:54Z", "author": "bzbarsky@mit.edu", "creation_time": "2011-02-01T01:43:54Z", "count": 5, "tags": []}, {"creator": "sean@typekit.com", "attachment_id": null, "text": "It seems reasonable that if CSS is in the head before the browser finishes parsing the head, then it should block layout (but not parsing), regardless of how it got there. It doesn't seem like it should matter whether document.write or DOM operations were used to get it there, as long as it's there before the browser begins parsing the body.\n\nCode like this (which is what we would probably end up doing to work around this) seems a little hacky:\n\nif (document.getElementsByTagName('body').length < 1) {\n  document.write('<link ...');\n} else {\n  document.getElementsByTagName('head').appendChild(linkTag);\n}", "tags": [], "creation_time": "2011-02-01T02:14:03Z", "author": "sean@typekit.com", "id": 5241743, "bug_id": 629366, "is_private": false, "raw_text": "It seems reasonable that if CSS is in the head before the browser finishes parsing the head, then it should block layout (but not parsing), regardless of how it got there. It doesn't seem like it should matter whether document.write or DOM operations were used to get it there, as long as it's there before the browser begins parsing the body.\n\nCode like this (which is what we would probably end up doing to work around this) seems a little hacky:\n\nif (document.getElementsByTagName('body').length < 1) {\n  document.write('<link ...');\n} else {\n  document.getElementsByTagName('head').appendChild(linkTag);\n}", "count": 6, "time": "2011-02-01T02:14:03Z"}, {"time": "2011-02-01T07:11:59Z", "author": "jfkthame@gmail.com", "creation_time": "2011-02-01T07:11:59Z", "count": 7, "tags": [], "is_private": false, "bug_id": 629366, "raw_text": "FYI, test builds with the delayed-font-fallback patch from bug 499292 are available at http://ftp.mozilla.org/pub/mozilla.org/firefox/tryserver-builds/jkew@mozilla.com-fa266067ca79 (Windows and Linux) and http://ftp.mozilla.org/pub/mozilla.org/firefox/tryserver-builds/jkew@mozilla.com-426204f85250/try-osx64/ (Mac).\n\nTo adjust the length of delay after we kick off the @font-face load and before we show fallback text anyway (because the font is taking too long to arrive), go to about:config and modify the setting gfx.downloadable_fonts.fallback_delay.", "text": "FYI, test builds with the delayed-font-fallback patch from bug 499292 are available at http://ftp.mozilla.org/pub/mozilla.org/firefox/tryserver-builds/jkew@mozilla.com-fa266067ca79 (Windows and Linux) and http://ftp.mozilla.org/pub/mozilla.org/firefox/tryserver-builds/jkew@mozilla.com-426204f85250/try-osx64/ (Mac).\n\nTo adjust the length of delay after we kick off the @font-face load and before we show fallback text anyway (because the font is taking too long to arrive), go to about:config and modify the setting gfx.downloadable_fonts.fallback_delay.", "id": 5242180, "attachment_id": null, "creator": "jfkthame@gmail.com"}, {"bug_id": 629366, "is_private": false, "raw_text": "I filed bug 631547.", "text": "I filed bug 631547.", "id": 5255330, "attachment_id": null, "creator": "bzbarsky@mit.edu", "time": "2011-02-04T16:40:40Z", "author": "bzbarsky@mit.edu", "creation_time": "2011-02-04T16:40:40Z", "count": 8, "tags": []}, {"raw_text": "Boris, this is great. Thanks so much for looking into this. I really feel that it's a better way to solve this issue in a general way.\n\nI subscribed to the other bug too so I'll get notified of updates.", "bug_id": 629366, "is_private": false, "id": 5255651, "count": 9, "time": "2011-02-04T18:34:54Z", "text": "Boris, this is great. Thanks so much for looking into this. I really feel that it's a better way to solve this issue in a general way.\n\nI subscribed to the other bug too so I'll get notified of updates.", "creator": "sean@typekit.com", "attachment_id": null, "creation_time": "2011-02-04T18:34:54Z", "author": "sean@typekit.com", "tags": []}]}}, "comments": {}}