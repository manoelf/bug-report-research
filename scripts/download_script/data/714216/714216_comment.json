{"comments": {}, "bugs": {"714216": {"comments": [{"attachment_id": 584898, "time": "2011-12-30T02:23:03Z", "text": "Created attachment 584898\nPoC patch\n\nI wanted to try out a simple idea for measuring jank. Mostly, it just times how long each event in the main thread event loop takes to run. For a few items that I know can jank (GC, CC, saving sessionstore.js), it prints out how long that activity takes, so it can be compared to the delay of the next event.\n\nPreliminary results and remarks in following comments.", "raw_text": "I wanted to try out a simple idea for measuring jank. Mostly, it just times how long each event in the main thread event loop takes to run. For a few items that I know can jank (GC, CC, saving sessionstore.js), it prints out how long that activity takes, so it can be compared to the delay of the next event.\n\nPreliminary results and remarks in following comments.", "creation_time": "2011-12-30T02:23:03Z", "bug_id": 714216, "id": 5946284, "tags": [], "is_private": false, "count": 0, "author": "dmandelin@mozilla.com", "creator": "dmandelin@mozilla.com"}, {"creator": "dmandelin@mozilla.com", "author": "dmandelin@mozilla.com", "creation_time": "2011-12-30T02:24:14Z", "raw_text": "", "text": "Created attachment 584899\nAnalysis script", "attachment_id": 584899, "time": "2011-12-30T02:24:14Z", "tags": [], "is_private": false, "count": 1, "id": 5946286, "bug_id": 714216}, {"creator": "dmandelin@mozilla.com", "author": "dmandelin@mozilla.com", "bug_id": 714216, "tags": [], "count": 2, "is_private": false, "id": 5946301, "text": "Created attachment 584900\nBasic analysis results from sample run\n\nThis is from a sample run of Firefox with about 8 tabs open. The analysis excludes startup: I used a simple manually triggered 'mark' line in the output to decide when startup is done. In this session, I opened some Google News tabs (experiencing a lot of subjective jank), closed them, and then deleted a bunch of emails in Zimbra, which often janks for me.\n\nOne thing I forgot to mention before is that the instrumentation only prints out events that take longer than 1 ms to handle, just to cut down on irrelevant data.\n\nThe basic output in the attachment shows summary statistics in several groups: first for all events, then for ones during which a GC happened, then for ones with a CC, etc. \n\nRemarks:\n\n- It's a very skewed distribution: the mean time for these events is about 30 ms, but the median is only 2 ms.\n- The browser was busy handling events that take 1 ms or longer for about 37% of the wall clock time. That seems pretty high--it's not surprising that the browser is generally not so responsive if it is busy >30% of the time.\n- When a GC or CC occurs, the event during which it occurs is almost always about the same length.\n- With session store saves, the correlation is weaker: often the session store save takes less time than the event. Not sure why.\n\n- In this session, we get a 1 second event every 13 seconds or so. I would classify that as 'terrible'.\n- We get a 100 ms event every 3 seconds or so. So that means glitching in animations pretty frequently.\n- We get a 10 ms event about 3 times a second. That's going to hurt 60 fps gaming.\n\n- GC-triggering events are pretty long: 30 ms median, 80 ms mean. But, we don't get that many GCs: they are only about 1/6 of >100 ms events, and were never over 1 s. In general browsing, I do get GC jank very frequently (observed with the console).\n- CC-triggering events are usually not bad at all for me: median of 10 ms, mean 20 ms, but there was one 60 ms CC. That also matches my experience: usually CC pauses are not noticeable in general browsing, but sometimes they are. The small ones will hurt 60fps gaming, though.\n- Session store is also usually fairly quick, but slower than CC, and sometimes it's long.\n- The mystery group is big: most pauses, especially the longest ones, are neither GC, CC, nor session store.", "time": "2011-12-30T02:35:35Z", "attachment_id": 584900, "creation_time": "2011-12-30T02:35:35Z", "raw_text": "This is from a sample run of Firefox with about 8 tabs open. The analysis excludes startup: I used a simple manually triggered 'mark' line in the output to decide when startup is done. In this session, I opened some Google News tabs (experiencing a lot of subjective jank), closed them, and then deleted a bunch of emails in Zimbra, which often janks for me.\n\nOne thing I forgot to mention before is that the instrumentation only prints out events that take longer than 1 ms to handle, just to cut down on irrelevant data.\n\nThe basic output in the attachment shows summary statistics in several groups: first for all events, then for ones during which a GC happened, then for ones with a CC, etc. \n\nRemarks:\n\n- It's a very skewed distribution: the mean time for these events is about 30 ms, but the median is only 2 ms.\n- The browser was busy handling events that take 1 ms or longer for about 37% of the wall clock time. That seems pretty high--it's not surprising that the browser is generally not so responsive if it is busy >30% of the time.\n- When a GC or CC occurs, the event during which it occurs is almost always about the same length.\n- With session store saves, the correlation is weaker: often the session store save takes less time than the event. Not sure why.\n\n- In this session, we get a 1 second event every 13 seconds or so. I would classify that as 'terrible'.\n- We get a 100 ms event every 3 seconds or so. So that means glitching in animations pretty frequently.\n- We get a 10 ms event about 3 times a second. That's going to hurt 60 fps gaming.\n\n- GC-triggering events are pretty long: 30 ms median, 80 ms mean. But, we don't get that many GCs: they are only about 1/6 of >100 ms events, and were never over 1 s. In general browsing, I do get GC jank very frequently (observed with the console).\n- CC-triggering events are usually not bad at all for me: median of 10 ms, mean 20 ms, but there was one 60 ms CC. That also matches my experience: usually CC pauses are not noticeable in general browsing, but sometimes they are. The small ones will hurt 60fps gaming, though.\n- Session store is also usually fairly quick, but slower than CC, and sometimes it's long.\n- The mystery group is big: most pauses, especially the longest ones, are neither GC, CC, nor session store."}, {"creation_time": "2011-12-30T02:39:50Z", "raw_text": "Isn't this doing something very similar to Tp5 Responsiveness?\n\nhttps://mxr.mozilla.org/mozilla-central/source/toolkit/xre/EventTracer.cpp#38\nhttps://groups.google.com/d/msg/mozilla.dev.platform/0AkEHXV3iiU/4FJnIkNiFboJ", "attachment_id": null, "time": "2011-12-30T02:39:50Z", "text": "Isn't this doing something very similar to Tp5 Responsiveness?\n\nhttps://mxr.mozilla.org/mozilla-central/source/toolkit/xre/EventTracer.cpp#38\nhttps://groups.google.com/d/msg/mozilla.dev.platform/0AkEHXV3iiU/4FJnIkNiFboJ", "id": 5946306, "tags": [], "is_private": false, "count": 3, "bug_id": 714216, "author": "reuben.morais@gmail.com", "creator": "reuben.morais@gmail.com"}, {"bug_id": 714216, "count": 4, "is_private": false, "tags": [], "id": 5946310, "text": "I also made a few graphs:\n\nhttps://docs.google.com/spreadsheet/ccc?key=0AsEOzaxftycIdGlhUWdmQWN6a2dYWE1od21XY3FXdmc\n\nJank Period shows how often pauses of length > X occur. For example, it shows that a pause of 200 ms or more happens about every 6 seconds. It's kind of interesting that for pauses under 400 ms or so, the period is proportional to the pause length (or in other words, frequency is 1/length, which is a power-law distribution). Longer pauses follow a different pattern, and there are too few to generalize.\n\nBy Class shows pause lengths, with dot color indicating the kind of event (or really, known jank cause that occurred during the event). The X axis is a dummy: I plot at random X values to make it easier to see how many values there are of roughly the same length. This visually shows that most pause events (and all long pause events) are not CC, GC, or session, which I already noted above from the summary stats.\n\nShort By Class shows the same thing, but only for events under 500 ms, so that they are easier to see on the Y scale. Again, it gives a nice visual comparison of CC vs. GC and so on. It also makes it a lot easier to see the spread than the summary stats do: e.g., you can see that GC pauses were pretty consistent, and that CC was really consistent except for a few outliers.", "attachment_id": null, "time": "2011-12-30T02:44:31Z", "raw_text": "I also made a few graphs:\n\nhttps://docs.google.com/spreadsheet/ccc?key=0AsEOzaxftycIdGlhUWdmQWN6a2dYWE1od21XY3FXdmc\n\nJank Period shows how often pauses of length > X occur. For example, it shows that a pause of 200 ms or more happens about every 6 seconds. It's kind of interesting that for pauses under 400 ms or so, the period is proportional to the pause length (or in other words, frequency is 1/length, which is a power-law distribution). Longer pauses follow a different pattern, and there are too few to generalize.\n\nBy Class shows pause lengths, with dot color indicating the kind of event (or really, known jank cause that occurred during the event). The X axis is a dummy: I plot at random X values to make it easier to see how many values there are of roughly the same length. This visually shows that most pause events (and all long pause events) are not CC, GC, or session, which I already noted above from the summary stats.\n\nShort By Class shows the same thing, but only for events under 500 ms, so that they are easier to see on the Y scale. Again, it gives a nice visual comparison of CC vs. GC and so on. It also makes it a lot easier to see the spread than the summary stats do: e.g., you can see that GC pauses were pretty consistent, and that CC was really consistent except for a few outliers.", "creation_time": "2011-12-30T02:44:31Z", "creator": "dmandelin@mozilla.com", "author": "dmandelin@mozilla.com"}, {"is_private": false, "count": 5, "tags": [], "id": 5946311, "bug_id": 714216, "creation_time": "2011-12-30T02:45:38Z", "raw_text": "(In reply to Reuben Morais [:reuben] from comment #3)\n> Isn't this doing something very similar to Tp5 Responsiveness?\n> \n> https://mxr.mozilla.org/mozilla-central/source/toolkit/xre/EventTracer.cpp#38\n> https://groups.google.com/d/msg/mozilla.dev.platform/0AkEHXV3iiU/4FJnIkNiFboJ\n\nIndeed, I was inspired by EventTracer (forgot to mention that in comment 0). But I wanted to measure everything, and measure it directly. I also wanted to be able to easily run my own analyses and correlate the results with other things I know about.", "text": "(In reply to Reuben Morais [:reuben] from comment #3)\n> Isn't this doing something very similar to Tp5 Responsiveness?\n> \n> https://mxr.mozilla.org/mozilla-central/source/toolkit/xre/EventTracer.cpp#38\n> https://groups.google.com/d/msg/mozilla.dev.platform/0AkEHXV3iiU/4FJnIkNiFboJ\n\nIndeed, I was inspired by EventTracer (forgot to mention that in comment 0). But I wanted to measure everything, and measure it directly. I also wanted to be able to easily run my own analyses and correlate the results with other things I know about.", "time": "2011-12-30T02:45:38Z", "attachment_id": null, "creator": "dmandelin@mozilla.com", "author": "dmandelin@mozilla.com"}, {"text": "Some things I think it would be interesting to add:\n\n- Also measure the time between an event being dispatched and it starting to run. (EventTracer measures wait+run, currently my PoC measures only run.)\n- On top of that, analyze which events are making other events wait.\n- Classify events according to what triggered them or what they are trying to do.\n- Capture stacks during long event runs or wait periods.", "time": "2011-12-30T02:49:01Z", "attachment_id": null, "raw_text": "Some things I think it would be interesting to add:\n\n- Also measure the time between an event being dispatched and it starting to run. (EventTracer measures wait+run, currently my PoC measures only run.)\n- On top of that, analyze which events are making other events wait.\n- Classify events according to what triggered them or what they are trying to do.\n- Capture stacks during long event runs or wait periods.", "creation_time": "2011-12-30T02:49:01Z", "bug_id": 714216, "tags": [], "count": 6, "is_private": false, "id": 5946315, "creator": "dmandelin@mozilla.com", "author": "dmandelin@mozilla.com"}, {"bug_id": 714216, "id": 5946321, "tags": [], "is_private": false, "count": 7, "time": "2011-12-30T02:58:04Z", "attachment_id": null, "text": "(In reply to David Mandelin from comment #5)\n> (In reply to Reuben Morais [:reuben] from comment #3)\n> > Isn't this doing something very similar to Tp5 Responsiveness?\n> > \n> > https://mxr.mozilla.org/mozilla-central/source/toolkit/xre/EventTracer.cpp#38\n> > https://groups.google.com/d/msg/mozilla.dev.platform/0AkEHXV3iiU/4FJnIkNiFboJ\n> \n> Indeed, I was inspired by EventTracer (forgot to mention that in comment 0).\n> But I wanted to measure everything, and measure it directly. I also wanted\n> to be able to easily run my own analyses and correlate the results with\n> other things I know about.\n\nCool, I was just checking if you were rewriting stuff that already exists :)\n\nInteresting data \u2013 I find it weird that most of the GC/CC pauses are under 150ms.\nI'll use a build with this patch and try to reproduce some of the huge CC pauses so we can correlate them to other pause durations.", "raw_text": "(In reply to David Mandelin from comment #5)\n> (In reply to Reuben Morais [:reuben] from comment #3)\n> > Isn't this doing something very similar to Tp5 Responsiveness?\n> > \n> > https://mxr.mozilla.org/mozilla-central/source/toolkit/xre/EventTracer.cpp#38\n> > https://groups.google.com/d/msg/mozilla.dev.platform/0AkEHXV3iiU/4FJnIkNiFboJ\n> \n> Indeed, I was inspired by EventTracer (forgot to mention that in comment 0).\n> But I wanted to measure everything, and measure it directly. I also wanted\n> to be able to easily run my own analyses and correlate the results with\n> other things I know about.\n\nCool, I was just checking if you were rewriting stuff that already exists :)\n\nInteresting data \u2013 I find it weird that most of the GC/CC pauses are under 150ms.\nI'll use a build with this patch and try to reproduce some of the huge CC pauses so we can correlate them to other pause durations.", "creation_time": "2011-12-30T02:58:04Z", "author": "reuben.morais@gmail.com", "creator": "reuben.morais@gmail.com"}, {"author": "bzbarsky@mit.edu", "creator": "bzbarsky@mit.edu", "raw_text": "> - The mystery group is big: most pauses, especially the longest ones, are neither GC,\n> CC, nor session store.\n\nOther obvious candidates to consider logging are \"content script\" and \"refresh driver tick\".", "creation_time": "2011-12-30T03:26:32Z", "time": "2011-12-30T03:26:32Z", "attachment_id": null, "text": "> - The mystery group is big: most pauses, especially the longest ones, are neither GC,\n> CC, nor session store.\n\nOther obvious candidates to consider logging are \"content script\" and \"refresh driver tick\".", "id": 5946337, "count": 8, "is_private": false, "tags": [], "bug_id": 714216}, {"author": "continuation@gmail.com", "creator": "continuation@gmail.com", "bug_id": 714216, "id": 5946406, "is_private": false, "count": 9, "tags": [], "attachment_id": null, "time": "2011-12-30T04:25:15Z", "text": "You could also look through the dependent bugs in bug 429592 for some ideas.\n\n> Interesting data \u2013 I find it weird that most of the GC/CC pauses are under 150ms.\n\nIf you look at telemetry, GC/CC pauses aren't all that terrible overall.  It just has a really awful long tail, especially for people who have a ton of tabs.", "creation_time": "2011-12-30T04:25:15Z", "raw_text": "You could also look through the dependent bugs in bug 429592 for some ideas.\n\n> Interesting data \u2013 I find it weird that most of the GC/CC pauses are under 150ms.\n\nIf you look at telemetry, GC/CC pauses aren't all that terrible overall.  It just has a really awful long tail, especially for people who have a ton of tabs."}, {"creation_time": "2011-12-30T15:01:44Z", "raw_text": "Please note that you're only measuring the jank of XPCOM events, not native events. Because much of our interactive time is spent processing native events, we should make sure to measure those as well.", "author": "benjamin@smedbergs.us", "time": "2011-12-30T15:01:44Z", "attachment_id": null, "creator": "benjamin@smedbergs.us", "text": "Please note that you're only measuring the jank of XPCOM events, not native events. Because much of our interactive time is spent processing native events, we should make sure to measure those as well.", "id": 5946821, "tags": [], "count": 10, "is_private": false, "bug_id": 714216}, {"creation_time": "2011-12-30T15:41:47Z", "raw_text": "It would definitely be interesting to run with both EventTracer+this analysis and see if things correlate well, or if there are pauses that either methodology is missing.\n\nWhen we were tuning EventTracer to run in Tp5, jlebar wanted to increase the sampling frequency to increase coverage. We did test runs with the sampling interval as low as 1ms, but at that point it started to perturb Talos results, so we bumped it back up to the current levels.", "attachment_id": null, "time": "2011-12-30T15:41:47Z", "text": "It would definitely be interesting to run with both EventTracer+this analysis and see if things correlate well, or if there are pauses that either methodology is missing.\n\nWhen we were tuning EventTracer to run in Tp5, jlebar wanted to increase the sampling frequency to increase coverage. We did test runs with the sampling interval as low as 1ms, but at that point it started to perturb Talos results, so we bumped it back up to the current levels.", "id": 5946876, "tags": [], "count": 11, "is_private": false, "bug_id": 714216, "author": "ted@mielczarek.org", "creator": "ted@mielczarek.org"}, {"creator": "justin.lebar+bug@gmail.com", "author": "justin.lebar+bug@gmail.com", "bug_id": 714216, "tags": [], "count": 12, "is_private": false, "id": 5950834, "text": "> When we were tuning EventTracer to run in Tp5, jlebar wanted to increase the sampling frequency to \n> increase coverage.\n\nWell, I'm a bit more interested in decreasing noise in the final number.  The current design adds noise smaller than the sampling frequency (we settled on 10ms?), but this would get us exact number.\n\nBut now that we have event-tracer running on Talos, I see that we have tons of noise on some platforms and close to zero noise on others.  Something is going on, but I suspect that the sampling-frequency noise isn't at fault (since then the noise would be everywhere).  Unfortunately graphserver is not showing me TP5-Responsiveness atm, so I can't paste a link here.\n\nOne advantage of measuring directly rather than sampling is that this doesn't destroy battery life.  It might even be fast enough to run in nightly/aurora builds.", "time": "2012-01-03T15:07:59Z", "attachment_id": null, "raw_text": "> When we were tuning EventTracer to run in Tp5, jlebar wanted to increase the sampling frequency to \n> increase coverage.\n\nWell, I'm a bit more interested in decreasing noise in the final number.  The current design adds noise smaller than the sampling frequency (we settled on 10ms?), but this would get us exact number.\n\nBut now that we have event-tracer running on Talos, I see that we have tons of noise on some platforms and close to zero noise on others.  Something is going on, but I suspect that the sampling-frequency noise isn't at fault (since then the noise would be everywhere).  Unfortunately graphserver is not showing me TP5-Responsiveness atm, so I can't paste a link here.\n\nOne advantage of measuring directly rather than sampling is that this doesn't destroy battery life.  It might even be fast enough to run in nightly/aurora builds.", "creation_time": "2012-01-03T15:07:59Z"}, {"id": 5950842, "tags": [], "is_private": false, "count": 13, "bug_id": 714216, "raw_text": "Oh, I see; apparently the TP5-Responsivess isn't running on m-i?  Anyway, graph here: http://goo.gl/TKNBp", "creation_time": "2012-01-03T15:10:31Z", "attachment_id": null, "time": "2012-01-03T15:10:31Z", "text": "Oh, I see; apparently the TP5-Responsivess isn't running on m-i?  Anyway, graph here: http://goo.gl/TKNBp", "author": "justin.lebar+bug@gmail.com", "creator": "justin.lebar+bug@gmail.com"}, {"creator": "justin.lebar+bug@gmail.com", "author": "justin.lebar+bug@gmail.com", "text": "Ted thinks that the win/mac differences we see in TP5-Responsiveness may be due to differences in the native event loops on mac/win and/or differences in how we inject events into those event loops.\n\nIt would be great if we could test this hypothesis by using the same (or at least similar) code cross-platform.", "attachment_id": null, "time": "2012-01-03T15:56:59Z", "raw_text": "Ted thinks that the win/mac differences we see in TP5-Responsiveness may be due to differences in the native event loops on mac/win and/or differences in how we inject events into those event loops.\n\nIt would be great if we could test this hypothesis by using the same (or at least similar) code cross-platform.", "creation_time": "2012-01-03T15:56:59Z", "bug_id": 714216, "tags": [], "count": 14, "is_private": false, "id": 5950966}, {"author": "dmandelin@mozilla.com", "creator": "dmandelin@mozilla.com", "time": "2012-01-06T03:13:35Z", "attachment_id": null, "text": "(In reply to Benjamin Smedberg  [:bsmedberg] from comment #10)\n> Please note that you're only measuring the jank of XPCOM events, not native\n> events. Because much of our interactive time is spent processing native\n> events, we should make sure to measure those as well.\n\nAh, that might explain why some subjective janks didn't show up in the output. I knew nothing about our event loop(s), I just used a debugger to find out where stuff was getting called from, and kept finding what is apparently the XPCOM event loop. Is the Windows native event loop this thing:\n\n  http://mxr.mozilla.org/mozilla-central/source/widget/windows/nsAppShell.cpp#343", "raw_text": "(In reply to Benjamin Smedberg  [:bsmedberg] from comment #10)\n> Please note that you're only measuring the jank of XPCOM events, not native\n> events. Because much of our interactive time is spent processing native\n> events, we should make sure to measure those as well.\n\nAh, that might explain why some subjective janks didn't show up in the output. I knew nothing about our event loop(s), I just used a debugger to find out where stuff was getting called from, and kept finding what is apparently the XPCOM event loop. Is the Windows native event loop this thing:\n\n  http://mxr.mozilla.org/mozilla-central/source/widget/windows/nsAppShell.cpp#343", "creation_time": "2012-01-06T03:13:35Z", "bug_id": 714216, "id": 5959515, "tags": [], "count": 15, "is_private": false}, {"tags": [], "count": 16, "is_private": false, "id": 5959522, "bug_id": 714216, "creation_time": "2012-01-06T03:15:59Z", "raw_text": "(In reply to Ted Mielczarek [:ted, :luser] from comment #11)\n> It would definitely be interesting to run with both EventTracer+this\n> analysis and see if things correlate well, or if there are pauses that\n> either methodology is missing.\n\nWhere is EventTracer documented again (i.e., how do I run it)? Does it just dump to stdout, too, so I'm just comparing its messages to the other kind?", "text": "(In reply to Ted Mielczarek [:ted, :luser] from comment #11)\n> It would definitely be interesting to run with both EventTracer+this\n> analysis and see if things correlate well, or if there are pauses that\n> either methodology is missing.\n\nWhere is EventTracer documented again (i.e., how do I run it)? Does it just dump to stdout, too, so I'm just comparing its messages to the other kind?", "attachment_id": null, "time": "2012-01-06T03:15:59Z", "creator": "dmandelin@mozilla.com", "author": "dmandelin@mozilla.com"}, {"creation_time": "2012-01-06T12:41:27Z", "raw_text": "http://mxr.mozilla.org/mozilla-central/source/toolkit/xre/EventTracer.cpp#38", "attachment_id": null, "time": "2012-01-06T12:41:27Z", "text": "http://mxr.mozilla.org/mozilla-central/source/toolkit/xre/EventTracer.cpp#38", "id": 5960159, "count": 17, "is_private": false, "tags": [], "bug_id": 714216, "author": "ted@mielczarek.org", "creator": "ted@mielczarek.org"}, {"attachment_id": null, "time": "2012-01-06T13:48:52Z", "text": "> http://mxr.mozilla.org/mozilla-central/source/widget/windows/nsAppShell.\n> cpp#343\n\nYes mostly. You can grep for calls to the hang monitor http://mxr.mozilla.org/mozilla-central/search?string=hangmonitor%3A%3A to catch places where we block on events or unblock to run an event. I'm thinking that it may be best to just hook the jank metering directly up with the hangmonitor calls.", "raw_text": "> http://mxr.mozilla.org/mozilla-central/source/widget/windows/nsAppShell.\n> cpp#343\n\nYes mostly. You can grep for calls to the hang monitor http://mxr.mozilla.org/mozilla-central/search?string=hangmonitor%3A%3A to catch places where we block on events or unblock to run an event. I'm thinking that it may be best to just hook the jank metering directly up with the hangmonitor calls.", "creation_time": "2012-01-06T13:48:52Z", "bug_id": 714216, "id": 5960259, "tags": [], "is_private": false, "count": 18, "author": "benjamin@smedbergs.us", "creator": "benjamin@smedbergs.us"}, {"author": "vladan.bugzilla@gmail.com", "creator": "vladan.bugzilla@gmail.com", "creation_time": "2014-07-07T22:08:38Z", "raw_text": "I'm going to mark this wontfix, since we have a proper profiler now (bug 713227)", "time": "2014-07-07T22:08:38Z", "attachment_id": null, "text": "I'm going to mark this wontfix, since we have a proper profiler now (bug 713227)", "id": 9023834, "tags": [], "count": 19, "is_private": false, "bug_id": 714216}]}}}