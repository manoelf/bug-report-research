{"bugs": {"638281": {"comments": [{"bug_id": 638281, "creation_time": "2011-03-03T00:10:13Z", "raw_text": "Currently, for this code:\n\nfunction () {\n  if (cond) {\n    function f() { }\n\n    ...\n  }\n}\n\nWe never generate GNAME ops for any variables in the '...' area. The reason is that |f| is not bound in the parser, so that if one of those variables were named 'f', it looks free, but it isn't safe to bind it to the global scope.\n\nBut of course we don't have to deoptimize all variables, just those named f. We did the easy thing the first time around, on the assumption that this usage is rare, but it did show up in bug 594230. Instead, we should track the names that may collide and deoptimize only for them.", "tags": [], "is_private": false, "time": "2011-03-03T00:10:13Z", "id": 5316991, "creator": "dmandelin@mozilla.com", "attachment_id": null, "count": 0, "text": "Currently, for this code:\n\nfunction () {\n  if (cond) {\n    function f() { }\n\n    ...\n  }\n}\n\nWe never generate GNAME ops for any variables in the '...' area. The reason is that |f| is not bound in the parser, so that if one of those variables were named 'f', it looks free, but it isn't safe to bind it to the global scope.\n\nBut of course we don't have to deoptimize all variables, just those named f. We did the easy thing the first time around, on the assumption that this usage is rare, but it did show up in bug 594230. Instead, we should track the names that may collide and deoptimize only for them.", "author": "dmandelin@mozilla.com"}, {"author": "till@tillschneidereit.net", "text": "Sadly, we're still not doing better here. For this code:\n\nvar foo = 1;\nfunction a() {\n  if (true) {\n    function f() { }\n  }\n  foo;\n}\na();\n\nwe're emitting the following bytecode for function `a`:\n\n00000:   3  true\n                  {\"interp\": 1}\n00001:   3  ifeq 11 (+10)\n                  {\"interp\": 1}\n00006:   4  deffun <value>\n                  {\"interp\": 1}\n00011:   6  name \"foo\"\n                  {\"interp\": 1}\n00016:   6  pop\n                  {\"interp\": 1}\n00017:   6  stop\n                  {\"interp\": 1}\n\nRemoving the `if (true)`, we get this bytecode:\n\n00000:   4  lambda <value>\n                  {\"interp\": 1}\n00005:   4  setlocal 0\n                  {\"interp\": 1}\n00008:   4  pop\n                  {\"interp\": 1}\n00009:   6  getgname \"foo\"\n                  {\"interp\": 1}\n00014:   6  pop\n                  {\"interp\": 1}\n00015:   6  stop\n                  {\"interp\": 1}\n\nHowever, given that we want to change away from late-bound functions to block-scoped ones in bug 585536, this should just go away. If we can pull off the change without breaking the web too hard, that is.", "count": 1, "attachment_id": null, "creator": "till@tillschneidereit.net", "id": 7665428, "time": "2013-07-23T10:57:50Z", "is_private": false, "tags": [], "creation_time": "2013-07-23T10:57:50Z", "bug_id": 638281, "raw_text": "Sadly, we're still not doing better here. For this code:\n\nvar foo = 1;\nfunction a() {\n  if (true) {\n    function f() { }\n  }\n  foo;\n}\na();\n\nwe're emitting the following bytecode for function `a`:\n\n00000:   3  true\n                  {\"interp\": 1}\n00001:   3  ifeq 11 (+10)\n                  {\"interp\": 1}\n00006:   4  deffun <value>\n                  {\"interp\": 1}\n00011:   6  name \"foo\"\n                  {\"interp\": 1}\n00016:   6  pop\n                  {\"interp\": 1}\n00017:   6  stop\n                  {\"interp\": 1}\n\nRemoving the `if (true)`, we get this bytecode:\n\n00000:   4  lambda <value>\n                  {\"interp\": 1}\n00005:   4  setlocal 0\n                  {\"interp\": 1}\n00008:   4  pop\n                  {\"interp\": 1}\n00009:   6  getgname \"foo\"\n                  {\"interp\": 1}\n00014:   6  pop\n                  {\"interp\": 1}\n00015:   6  stop\n                  {\"interp\": 1}\n\nHowever, given that we want to change away from late-bound functions to block-scoped ones in bug 585536, this should just go away. If we can pull off the change without breaking the web too hard, that is."}]}}, "comments": {}}