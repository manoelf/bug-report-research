{"bugs": {"648828": {"comments": [{"count": 0, "time": "2011-04-10T06:53:50Z", "text": "User-Agent:       Mozilla/5.0 (Windows NT 6.1; rv:2.0) Gecko/20100101 Firefox/4.0\nBuild Identifier: \n\nAll typed arrays returned from chrome code seems being wrapped currently. This makes some operations quiet hard (if not impossible) -- for example, building an extension which returns an ImageData object (using an typed array as its 'data' field) can be drawn on canvas directly.\n\nSince typed arrays are sealed objects and contain raw numbers only, wrapping them seems not necessary.\n\n\nReproducible: Always", "creator": "sunhaitao@devtaste.com", "raw_text": "User-Agent:       Mozilla/5.0 (Windows NT 6.1; rv:2.0) Gecko/20100101 Firefox/4.0\nBuild Identifier: \n\nAll typed arrays returned from chrome code seems being wrapped currently. This makes some operations quiet hard (if not impossible) -- for example, building an extension which returns an ImageData object (using an typed array as its 'data' field) can be drawn on canvas directly.\n\nSince typed arrays are sealed objects and contain raw numbers only, wrapping them seems not necessary.\n\n\nReproducible: Always", "id": 5399011, "is_private": false, "author": "sunhaitao@devtaste.com", "bug_id": 648828, "attachment_id": null, "creation_time": "2011-04-10T06:53:50Z", "tags": []}, {"attachment_id": null, "creation_time": "2011-04-26T23:36:02Z", "tags": [], "creator": "dmandelin@mozilla.com", "raw_text": "Can you tell us exactly what operations you are trying to do on wrapped typed arrays, and exactly how they fail? Or better yet, provide a reduced test case?", "bug_id": 648828, "text": "Can you tell us exactly what operations you are trying to do on wrapped typed arrays, and exactly how they fail? Or better yet, provide a reduced test case?", "is_private": false, "count": 1, "author": "dmandelin@mozilla.com", "time": "2011-04-26T23:36:02Z", "id": 5433545}, {"count": 2, "time": "2011-07-26T04:56:28Z", "creator": "sunhaitao@devtaste.com", "raw_text": "I'm so sorry for not noticing and replying this in time.\n\nI'm working on an extension ( https://addons.mozilla.org/en-US/firefox/addon/conductory/ ) which can expose raw input/output data from/to devices to JS codes. It returns ImageData-like objects from chrome code to represent video frames. Due to this problem, such objects cannot be passed as the first argument of 'putImageData'.\n\nHere is a reduced list of steps to demonstrate this problem more clearly: \n\n0. Ensure 'devtools.chrome.enabled' is true. Open 'about:blank'.\n\n1. Open a Scratchpad. Set 'Environment' to 'Browser'. Execute following code:\n\n    gBrowser.contentWindow.wrappedJSObject.createImageData = function (width, height) {\n        var data = new Uint8Array(width * height * 4);\n        for (var i = 0; i < data.length; i += 4) {\n            data[i+3] = 255;\n        }\n        return {\n             width:width,\n            height:height,\n              data:data\n        }\n    }\n\n2. Open another Scratchpad. Set 'Environment' to 'Content'. Execute following code:\n\n    var w = 320;\n    var h = 240;\n    var canvas = document.createElement(\"canvas\");\n    canvas.setAttribute( \"width\", w);\n    canvas.setAttribute(\"height\", h);\n    document.body.appendChild(canvas);\n    var ctx = canvas..getContext('2d');\n    ctx.putImageData(createImageData(w, h), 0, 0);\n\n3. The last line will throw an error, instead of drawing a black box.", "text": "I'm so sorry for not noticing and replying this in time.\n\nI'm working on an extension ( https://addons.mozilla.org/en-US/firefox/addon/conductory/ ) which can expose raw input/output data from/to devices to JS codes. It returns ImageData-like objects from chrome code to represent video frames. Due to this problem, such objects cannot be passed as the first argument of 'putImageData'.\n\nHere is a reduced list of steps to demonstrate this problem more clearly: \n\n0. Ensure 'devtools.chrome.enabled' is true. Open 'about:blank'.\n\n1. Open a Scratchpad. Set 'Environment' to 'Browser'. Execute following code:\n\n    gBrowser.contentWindow.wrappedJSObject.createImageData = function (width, height) {\n        var data = new Uint8Array(width * height * 4);\n        for (var i = 0; i < data.length; i += 4) {\n            data[i+3] = 255;\n        }\n        return {\n             width:width,\n            height:height,\n              data:data\n        }\n    }\n\n2. Open another Scratchpad. Set 'Environment' to 'Content'. Execute following code:\n\n    var w = 320;\n    var h = 240;\n    var canvas = document.createElement(\"canvas\");\n    canvas.setAttribute( \"width\", w);\n    canvas.setAttribute(\"height\", h);\n    document.body.appendChild(canvas);\n    var ctx = canvas..getContext('2d');\n    ctx.putImageData(createImageData(w, h), 0, 0);\n\n3. The last line will throw an error, instead of drawing a black box.", "is_private": false, "author": "sunhaitao@devtaste.com", "id": 5613111, "attachment_id": null, "tags": [], "creation_time": "2011-07-26T04:56:28Z", "bug_id": 648828}, {"id": 5626801, "time": "2011-08-02T00:57:54Z", "author": "jwalden@mit.edu", "count": 3, "is_private": false, "text": "Exact class check in aisle three!\n\nThis is the usual \"code checks getClass() for an exact match and doesn't check for a wrapped match\" problem, see the putImageData custom quickstub, specifically the part that expects the imagedata's \"data\" property is the necessary kind of typed array.\n\nBug 654646 could be part of addressing this.  For this bug, it's also possible better use of specific typed array APIs might be a solution.", "bug_id": 648828, "raw_text": "Exact class check in aisle three!\n\nThis is the usual \"code checks getClass() for an exact match and doesn't check for a wrapped match\" problem, see the putImageData custom quickstub, specifically the part that expects the imagedata's \"data\" property is the necessary kind of typed array.\n\nBug 654646 could be part of addressing this.  For this bug, it's also possible better use of specific typed array APIs might be a solution.", "creator": "jwalden@mit.edu", "tags": [], "creation_time": "2011-08-02T00:57:54Z", "attachment_id": null}, {"creator": "sunhaitao@devtaste.com", "raw_text": "A related problem is that accessing wrapped typed arrays in Gecko are much slower than unwrapped ones. This makes many operations (for example, motion detection) hard to finish in reasonable time.\n\nSo I think either \"not wrapping typed arrays\" or \"creating a unwrapped typed array sharing the same buffer\" is a better solution for this bug.", "attachment_id": null, "tags": [], "creation_time": "2011-08-08T10:05:55Z", "text": "A related problem is that accessing wrapped typed arrays in Gecko are much slower than unwrapped ones. This makes many operations (for example, motion detection) hard to finish in reasonable time.\n\nSo I think either \"not wrapping typed arrays\" or \"creating a unwrapped typed array sharing the same buffer\" is a better solution for this bug.", "bug_id": 648828, "count": 4, "author": "sunhaitao@devtaste.com", "time": "2011-08-08T10:05:55Z", "is_private": false, "id": 5639027}, {"time": "2011-08-08T12:30:22Z", "count": 5, "text": "Accessing wrapped anything is slower, since it has to do security checks.\n\nAnd for that very same reason, I think your proposed better solutions don't necessarily work, unless we can prove that it's ok to skip those security checks....", "raw_text": "Accessing wrapped anything is slower, since it has to do security checks.\n\nAnd for that very same reason, I think your proposed better solutions don't necessarily work, unless we can prove that it's ok to skip those security checks....", "creator": "bzbarsky@mit.edu", "id": 5639197, "author": "bzbarsky@mit.edu", "is_private": false, "bug_id": 648828, "tags": [], "creation_time": "2011-08-08T12:30:22Z", "attachment_id": null}]}}, "comments": {}}