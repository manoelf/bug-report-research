{"bugs": {"631911": {"comments": [{"is_private": false, "attachment_id": null, "creator": "shaver@mozilla.org", "tags": [], "raw_text": "Humph told me about this. May be a dup, but I couldn't find it in quick (200ms) search.\n\n var createdClosure = (function() {\n  function inner(a) {\n   return a + 1;\n  }\n  return function(a) {\n   return inner(a);\n  }\n })();\n \n var expressionClosure = function(a) {\n  function inner(a) {\n   return a + 1;\n  }\n  return inner(a);\n };\n \n function func(a) {\n  function inner(a) {\n   return a + 1;\n  }\n  return inner(a);\n }\n\nI get 33M/s for createdClosure, and 9M/s for each of expressionClosure and func.  (Chrome 9 on the same hardware is 73M/s and 13M/s.)\n\nIf I remove the inner function (http://jsperf.com/closure-vs-function-no-inner) I get ~40M/s for each.  Chrome 9 gets about 151M/s on each; this bug is about our disparity between the patterns, though, not Chrome's 4x lead on the simple function-call case. (Which I thought we'd destroy, but loop overhead probably dominates function call cost, now that I think about it.)", "creation_time": "2011-02-06T16:38:17Z", "bug_id": 631911, "id": 5258656, "author": "shaver@mozilla.org", "time": "2011-02-06T16:38:17Z", "text": "Humph told me about this. May be a dup, but I couldn't find it in quick (200ms) search.\n\n var createdClosure = (function() {\n  function inner(a) {\n   return a + 1;\n  }\n  return function(a) {\n   return inner(a);\n  }\n })();\n \n var expressionClosure = function(a) {\n  function inner(a) {\n   return a + 1;\n  }\n  return inner(a);\n };\n \n function func(a) {\n  function inner(a) {\n   return a + 1;\n  }\n  return inner(a);\n }\n\nI get 33M/s for createdClosure, and 9M/s for each of expressionClosure and func.  (Chrome 9 on the same hardware is 73M/s and 13M/s.)\n\nIf I remove the inner function (http://jsperf.com/closure-vs-function-no-inner) I get ~40M/s for each.  Chrome 9 gets about 151M/s on each; this bug is about our disparity between the patterns, though, not Chrome's 4x lead on the simple function-call case. (Which I thought we'd destroy, but loop overhead probably dominates function call cost, now that I think about it.)", "count": 0}, {"time": "2011-02-17T20:32:02Z", "id": 5287374, "creation_time": "2011-02-17T20:32:02Z", "bug_id": 631911, "raw_text": "Calling the function returned by createdClosure has to be faster since there is no inner to clone -- that function lives in the power-constructor-pattern closure that is evaluated once to make createClosure.\n\nAnyone profile yet? Just curious but not a blocker, so I'll wait.\n\n/be", "tags": [], "is_private": false, "count": 1, "text": "Calling the function returned by createdClosure has to be faster since there is no inner to clone -- that function lives in the power-constructor-pattern closure that is evaluated once to make createClosure.\n\nAnyone profile yet? Just curious but not a blocker, so I'll wait.\n\n/be", "author": "brendan@mozilla.org", "creator": "brendan@mozilla.org", "attachment_id": null}, {"is_private": false, "tags": [], "bug_id": 631911, "creation_time": "2011-02-17T20:36:07Z", "raw_text": "That makes sense, though in this specific case I guess the cloning of inner isn't needed since there's nothing captured to distinguish instances?  Not sure if analyzing that is feasible.\n\nI'll profile after 4.", "id": 5287388, "time": "2011-02-17T20:36:07Z", "attachment_id": null, "creator": "shaver@mozilla.org", "author": "shaver@mozilla.org", "text": "That makes sense, though in this specific case I guess the cloning of inner isn't needed since there's nothing captured to distinguish instances?  Not sure if analyzing that is feasible.\n\nI'll profile after 4.", "count": 2}, {"author": "brendan@mozilla.org", "count": 3, "text": "(In reply to comment #2)\n> That makes sense, though in this specific case I guess the cloning of inner\n> isn't needed since there's nothing captured to distinguish instances?  Not sure\n> if analyzing that is feasible.\n\nIt's quite feasible. Fixing it here seems like the right thing.\n\n/be", "attachment_id": null, "creator": "brendan@mozilla.org", "id": 5287501, "time": "2011-02-17T21:07:06Z", "is_private": false, "tags": [], "bug_id": 631911, "creation_time": "2011-02-17T21:07:06Z", "raw_text": "(In reply to comment #2)\n> That makes sense, though in this specific case I guess the cloning of inner\n> isn't needed since there's nothing captured to distinguish instances?  Not sure\n> if analyzing that is feasible.\n\nIt's quite feasible. Fixing it here seems like the right thing.\n\n/be"}, {"creator": "shaver@mozilla.org", "attachment_id": null, "count": 4, "text": "for expressionClosure in the browser, shark says\n\n- 27.4%, js_NewNullClosure(JSContext*, JSObject*, JSObject*, JSObject*), XUL\n- 24.9%, JSCompartment::finalizeObjectArenaLists(JSContext*), XUL\n- 16.2%, js::ExecuteTree(JSContext*, js::TraceMonitor*, js::TreeFragment*, unsigned int&, js::VMSideExit**, js::VMSideExit**), XUL\n- 10.7%, fun_finalize(JSContext*, JSObject*), XUL\n- 5.3%, js::gc::Arena<JSObject_Slots2>* AllocateArena<JSObject_Slots2>(JSContext*, unsigned int), XUL\n- 1.1%, js::PropertyTree::unmarkShapes(JSContext*), XUL\n\nsystem libraries, NSPR, and unknown libraries (JIT code) charged to callers.\n\n(it also thinks that js_NewNullClosure should be inlined, since virtually all of its time is spent in the prologue; probably hitting the !closure case?)", "author": "shaver@mozilla.org", "bug_id": 631911, "creation_time": "2011-03-03T04:19:04Z", "raw_text": "for expressionClosure in the browser, shark says\n\n- 27.4%, js_NewNullClosure(JSContext*, JSObject*, JSObject*, JSObject*), XUL\n- 24.9%, JSCompartment::finalizeObjectArenaLists(JSContext*), XUL\n- 16.2%, js::ExecuteTree(JSContext*, js::TraceMonitor*, js::TreeFragment*, unsigned int&, js::VMSideExit**, js::VMSideExit**), XUL\n- 10.7%, fun_finalize(JSContext*, JSObject*), XUL\n- 5.3%, js::gc::Arena<JSObject_Slots2>* AllocateArena<JSObject_Slots2>(JSContext*, unsigned int), XUL\n- 1.1%, js::PropertyTree::unmarkShapes(JSContext*), XUL\n\nsystem libraries, NSPR, and unknown libraries (JIT code) charged to callers.\n\n(it also thinks that js_NewNullClosure should be inlined, since virtually all of its time is spent in the prologue; probably hitting the !closure case?)", "tags": [], "is_private": false, "time": "2011-03-03T04:19:04Z", "id": 5317496}, {"attachment_id": null, "creator": "shaver@mozilla.org", "author": "shaver@mozilla.org", "count": 5, "text": "profile for func is basically identical.", "is_private": false, "tags": [], "bug_id": 631911, "creation_time": "2011-03-03T04:25:07Z", "raw_text": "profile for func is basically identical.", "id": 5317503, "time": "2011-03-03T04:25:07Z"}, {"is_private": false, "tags": [], "creation_time": "2014-05-28T16:20:24Z", "bug_id": 631911, "raw_text": "Usint the testcase from jsperf I get the same numbers on all 3 cases, and Nightly 32 is 34% faster than Chrome 35.", "id": 8852371, "time": "2014-05-28T16:20:24Z", "attachment_id": null, "creator": "guijoselito@gmail.com", "author": "guijoselito@gmail.com", "text": "Usint the testcase from jsperf I get the same numbers on all 3 cases, and Nightly 32 is 34% faster than Chrome 35.", "count": 6}, {"creator": "stefan.fleiter@web.de", "attachment_id": null, "count": 7, "text": "Not for me, not even close.\n\nhttp://jsperf.com/closure-vs-function\n\ncreated closure with inner\n755,726,239 \u00b10.41% fastest\n\nexpression closure with inner\n78,618,211 \u00b10.38% 90% slower\n\nfunction with inner\n78,634,572 \u00b10.36% 90% slower\n\nOn linux x64, official nightly from https://hg.mozilla.org/mozilla-central/rev/e017c15325ae with a fresh profile.", "author": "stefan.fleiter@web.de", "tags": [], "creation_time": "2014-05-28T16:41:15Z", "bug_id": 631911, "raw_text": "Not for me, not even close.\n\nhttp://jsperf.com/closure-vs-function\n\ncreated closure with inner\n755,726,239 \u00b10.41% fastest\n\nexpression closure with inner\n78,618,211 \u00b10.38% 90% slower\n\nfunction with inner\n78,634,572 \u00b10.36% 90% slower\n\nOn linux x64, official nightly from https://hg.mozilla.org/mozilla-central/rev/e017c15325ae with a fresh profile.", "is_private": false, "id": 8852519, "time": "2014-05-28T16:41:15Z"}, {"count": 8, "text": "same here on mac os: \n\ncreated closure: 1,797,026,819\nexpression closure: 99,470,750 (94% slower)\nfunc: 99,715,966 (94% slower)", "author": "zibi@braniecki.net", "creator": "zibi@braniecki.net", "attachment_id": null, "time": "2014-05-28T16:52:43Z", "id": 8852592, "bug_id": 631911, "creation_time": "2014-05-28T16:52:43Z", "raw_text": "same here on mac os: \n\ncreated closure: 1,797,026,819\nexpression closure: 99,470,750 (94% slower)\nfunc: 99,715,966 (94% slower)", "tags": [], "is_private": false}, {"count": 9, "text": "Uhn, right, I'm stupid, sorry. I tested the no inner case only.", "id": 8852781, "time": "2014-05-28T17:22:56Z", "author": "guijoselito@gmail.com", "tags": [], "creator": "guijoselito@gmail.com", "bug_id": 631911, "creation_time": "2014-05-28T17:22:56Z", "raw_text": "Uhn, right, I'm stupid, sorry. I tested the no inner case only.", "attachment_id": null, "is_private": false}, {"attachment_id": null, "creator": "nicolas.b.pierron@mozilla.com", "author": "nicolas.b.pierron@mozilla.com", "text": "(In reply to Mike Shaver (:shaver -- probably not reading bugmail closely) from comment #0)\n>  var createdClosure = (function() {\n>   [\u2026]\n>  })();\n\nThis pattern is optimized as we know that the function will only be called once, and that we do not have to create the functions multiple times.  This is done in the parser when we are creating the functions.  This optimization is made to handle the Module-like syntax of libraries.\n\n>  var expressionClosure = function(a) {\n>   [\u2026]\n>  };\n>  \n>  function func(a) {\n>   [\u2026]\n>  }\n\nAt the opposite of these functions where we might call the outer functions multiple times.", "count": 10, "is_private": false, "tags": [], "creation_time": "2014-06-10T16:12:06Z", "bug_id": 631911, "raw_text": "(In reply to Mike Shaver (:shaver -- probably not reading bugmail closely) from comment #0)\n>  var createdClosure = (function() {\n>   [\u2026]\n>  })();\n\nThis pattern is optimized as we know that the function will only be called once, and that we do not have to create the functions multiple times.  This is done in the parser when we are creating the functions.  This optimization is made to handle the Module-like syntax of libraries.\n\n>  var expressionClosure = function(a) {\n>   [\u2026]\n>  };\n>  \n>  function func(a) {\n>   [\u2026]\n>  }\n\nAt the opposite of these functions where we might call the outer functions multiple times.", "id": 8910475, "time": "2014-06-10T16:12:06Z"}, {"author": "till@tillschneidereit.net", "time": "2014-06-10T18:48:41Z", "id": 8911550, "count": 11, "text": "(In reply to Nicolas B. Pierron [:nbp] from comment #10)\n> At the opposite of these functions where we might call the outer functions\n> multiple times.\n\nNote comment 2 and comment 3: this is about adding an analysis that'd tell us if the cloning is required at all, even for non-run-once outer functions.", "is_private": false, "attachment_id": null, "raw_text": "(In reply to Nicolas B. Pierron [:nbp] from comment #10)\n> At the opposite of these functions where we might call the outer functions\n> multiple times.\n\nNote comment 2 and comment 3: this is about adding an analysis that'd tell us if the cloning is required at all, even for non-run-once outer functions.", "creation_time": "2014-06-10T18:48:41Z", "bug_id": 631911, "creator": "till@tillschneidereit.net", "tags": []}]}}, "comments": {}}