{"bugs": {"698252": {"comments": [{"bug_id": 698252, "id": 5813732, "is_private": false, "creation_time": "2011-10-30T07:30:43Z", "creator": "brian@briansmith.org", "author": "brian@briansmith.org", "text": "Assume that we connect to the OCSP responder site (https://ca.example.org) via HTTPS for some non-OCSP reason (e.g. to read the CP/CSP or whatever) and that response returned an HSTS header. Then, when we visit a site that uses that points to http://ca.example.org/ocsp-responder, we will rewrite that request as https://ca.example.org/ocsp-responder. However, it is likely that https://ca.example.org/ uses a certificate that also points https://ca.example.org/ocsp-responder for OCSP.\n\nI believe in the current code, this will cause an infinite loop.\n\nIn order to support https:// OCSP/CRL URLs, we have to turn off OCSP/CRL fetching for some of the OCSP/CRL fetches if they would cause such an infinite loop. Usually our HTTP(S) stack directs HTTPS requests to an already-open HTTPS connection. We probably need a flag that we can add to each request that says \"do not send this request to a HTTPS site that is blocked on certificate validation\" that we could put on the OCSP/CRL requests. And, we probably need a flag that says \"do not do OCSP/CRL fetching for this request\" that we would put on the OCSP/CRL requests. (Maybe one flag could mean both things.)\n\nOr, maybe we need to explicitly *ignore* HSTS and/or Alternate-Protocol for OCSP/CRL requests and ALWAYS send them over HTTP.", "count": 0, "tags": [], "time": "2011-10-30T07:30:43Z", "attachment_id": null, "raw_text": "Assume that we connect to the OCSP responder site (https://ca.example.org) via HTTPS for some non-OCSP reason (e.g. to read the CP/CSP or whatever) and that response returned an HSTS header. Then, when we visit a site that uses that points to http://ca.example.org/ocsp-responder, we will rewrite that request as https://ca.example.org/ocsp-responder. However, it is likely that https://ca.example.org/ uses a certificate that also points https://ca.example.org/ocsp-responder for OCSP.\n\nI believe in the current code, this will cause an infinite loop.\n\nIn order to support https:// OCSP/CRL URLs, we have to turn off OCSP/CRL fetching for some of the OCSP/CRL fetches if they would cause such an infinite loop. Usually our HTTP(S) stack directs HTTPS requests to an already-open HTTPS connection. We probably need a flag that we can add to each request that says \"do not send this request to a HTTPS site that is blocked on certificate validation\" that we could put on the OCSP/CRL requests. And, we probably need a flag that says \"do not do OCSP/CRL fetching for this request\" that we would put on the OCSP/CRL requests. (Maybe one flag could mean both things.)\n\nOr, maybe we need to explicitly *ignore* HSTS and/or Alternate-Protocol for OCSP/CRL requests and ALWAYS send them over HTTP."}, {"creator": "brian@briansmith.org", "creation_time": "2011-10-31T09:51:33Z", "is_private": false, "attachment_id": null, "tags": [], "author": "brian@briansmith.org", "count": 1, "text": "(In reply to Brian Smith (:bsmith) from comment #0)\n> Or, maybe we need to explicitly *ignore* HSTS and/or Alternate-Protocol for\n> OCSP/CRL requests and ALWAYS send them over HTTP.\n\nFor SPDY, one way of doing this would be to add a new request flag DISALLOW_SPDY to nsIRequest that maps to NS_HTTP_DISALLOW_SPDY (like LOAD_ANONYMOUS maps to NS_HTTP_LOAD_ANONYMOUS), and skip the Alternate-Protocol header check when this flag is set on the request.\n\nSimilarly, we could have a DISALLOW_HTTPS flag for nsIRequest that would disable both HSTS rewriting HTTP -> HTTPS and Alternate-Protocol rewriting HTTP -> HTTPS (SPDY). Since this is easy to implement, I recommend we do this first, and then file a separate bug for enabling OCSP/CRL requests over HTTPS (HTTP or and/or SPDY over TLS).", "bug_id": 698252, "id": 5814743, "raw_text": "(In reply to Brian Smith (:bsmith) from comment #0)\n> Or, maybe we need to explicitly *ignore* HSTS and/or Alternate-Protocol for\n> OCSP/CRL requests and ALWAYS send them over HTTP.\n\nFor SPDY, one way of doing this would be to add a new request flag DISALLOW_SPDY to nsIRequest that maps to NS_HTTP_DISALLOW_SPDY (like LOAD_ANONYMOUS maps to NS_HTTP_LOAD_ANONYMOUS), and skip the Alternate-Protocol header check when this flag is set on the request.\n\nSimilarly, we could have a DISALLOW_HTTPS flag for nsIRequest that would disable both HSTS rewriting HTTP -> HTTPS and Alternate-Protocol rewriting HTTP -> HTTPS (SPDY). Since this is easy to implement, I recommend we do this first, and then file a separate bug for enabling OCSP/CRL requests over HTTPS (HTTP or and/or SPDY over TLS).", "time": "2011-10-31T09:51:33Z"}, {"tags": [], "attachment_id": null, "raw_text": "patch 15 of 528288 https://bug528288.bugzilla.mozilla.org/attachment.cgi?id=570293 does something relevant. It adds a setallowspdy() at the channel level (nsIHttpChannelInternal) that sets NS_HTTP_DISALLOW_SPDY for all requrests on the channel. If that is set then alternate-protocol is ignored. The patch also sets allowspdy(false) on the channel that is used in nsNSSCallbacks\n\nThe end result is alternate-protocol is ignored (at the cost of never using spdy) for ocsp/crl \n\nIt doesn't solve anything for hsts or explicit https:// references - but it should at least keep us out of a spdy regression.", "time": "2011-10-31T13:34:33Z", "is_private": false, "creation_time": "2011-10-31T13:34:33Z", "id": 5814967, "bug_id": 698252, "author": "mcmanus@ducksong.com", "text": "patch 15 of 528288 https://bug528288.bugzilla.mozilla.org/attachment.cgi?id=570293 does something relevant. It adds a setallowspdy() at the channel level (nsIHttpChannelInternal) that sets NS_HTTP_DISALLOW_SPDY for all requrests on the channel. If that is set then alternate-protocol is ignored. The patch also sets allowspdy(false) on the channel that is used in nsNSSCallbacks\n\nThe end result is alternate-protocol is ignored (at the cost of never using spdy) for ocsp/crl \n\nIt doesn't solve anything for hsts or explicit https:// references - but it should at least keep us out of a spdy regression.", "count": 2, "creator": "mcmanus@ducksong.com"}, {"tags": [], "time": "2011-10-31T13:39:22Z", "attachment_id": null, "raw_text": "(In reply to Brian Smith (:bsmith) from comment #0)\n. Usually our HTTP(S) stack directs HTTPS requests to an\n> already-open HTTPS connection. We probably need a flag that we can add to\n> each request that says \"do not send this request to a HTTPS site that is\n> blocked on certificate validation\" that we could put on the OCSP/CRL\n> requests.\n\nIt's coarse grained, but given the light use of CRL fetching you could do LOAD_FRESH_CONNECTION on it to avoid the blocking thing. (though you still need a way of doing the 'do not do crl fetching for this request' bit).", "bug_id": 698252, "id": 5814971, "is_private": false, "creation_time": "2011-10-31T13:39:22Z", "creator": "mcmanus@ducksong.com", "author": "mcmanus@ducksong.com", "count": 3, "text": "(In reply to Brian Smith (:bsmith) from comment #0)\n. Usually our HTTP(S) stack directs HTTPS requests to an\n> already-open HTTPS connection. We probably need a flag that we can add to\n> each request that says \"do not send this request to a HTTPS site that is\n> blocked on certificate validation\" that we could put on the OCSP/CRL\n> requests.\n\nIt's coarse grained, but given the light use of CRL fetching you could do LOAD_FRESH_CONNECTION on it to avoid the blocking thing. (though you still need a way of doing the 'do not do crl fetching for this request' bit)."}, {"id": 5867002, "bug_id": 698252, "creation_time": "2011-11-22T23:44:58Z", "is_private": false, "creator": "curtisk@mozilla.com", "count": 4, "text": "clearing sec-review flag", "author": "curtisk@mozilla.com", "tags": [], "time": "2011-11-22T23:44:58Z", "raw_text": "clearing sec-review flag", "attachment_id": null}, {"author": "dkeeler@mozilla.com", "count": 5, "text": "CRLs aren't relevant any more, but this still could be an issue with OCSP. :mcmanus - I thought this had been addressed in the HSTS case, but I can't identify any code that would do it - am I just misremembering?\n\n(Also I'm assuming Sid isn't actively working on this.)", "id": 11426922, "bug_id": 698252, "raw_text": "CRLs aren't relevant any more, but this still could be an issue with OCSP. :mcmanus - I thought this had been addressed in the HSTS case, but I can't identify any code that would do it - am I just misremembering?\n\n(Also I'm assuming Sid isn't actively working on this.)", "time": "2016-05-20T22:03:03Z", "creator": "dkeeler@mozilla.com", "creation_time": "2016-05-20T22:03:03Z", "is_private": false, "attachment_id": null, "tags": []}, {"raw_text": "(In reply to David Keeler [:keeler] (use needinfo?) from comment #5)\n> CRLs aren't relevant any more, but this still could be an issue with OCSP.\n> :mcmanus - I thought this had been addressed in the HSTS case, but I can't\n> identify any code that would do it - am I just misremembering?\n\nBug 1003566?", "attachment_id": null, "time": "2016-05-21T09:51:03Z", "tags": [], "text": "(In reply to David Keeler [:keeler] (use needinfo?) from comment #5)\n> CRLs aren't relevant any more, but this still could be an issue with OCSP.\n> :mcmanus - I thought this had been addressed in the HSTS case, but I can't\n> identify any code that would do it - am I just misremembering?\n\nBug 1003566?", "count": 6, "author": "cykesiopka.bmo+mozbz@gmail.com", "creator": "cykesiopka.bmo+mozbz@gmail.com", "creation_time": "2016-05-21T09:51:03Z", "is_private": false, "id": 11427510, "bug_id": 698252}, {"creation_time": "2016-05-23T12:58:59Z", "is_private": false, "id": 11429940, "bug_id": 698252, "text": "comment 6 seems right", "count": 7, "author": "mcmanus@ducksong.com", "creator": "mcmanus@ducksong.com", "tags": [], "raw_text": "comment 6 seems right", "attachment_id": null, "time": "2016-05-23T12:58:59Z"}, {"attachment_id": null, "tags": [], "creator": "dkeeler@mozilla.com", "creation_time": "2016-05-24T03:42:50Z", "is_private": false, "time": "2016-05-24T03:42:50Z", "raw_text": "Great - thanks. Also, we have https://dxr.mozilla.org/mozilla-central/rev/16663eb3dcfa759f25b5e27b101bc79270c156f2/security/manager/ssl/tests/unit/test_ocsp_no_hsts_upgrade.js to actually test this in the HSTS case.\n\nLooks like while we do disable SPDY, we don't disable alt-svc: https://dxr.mozilla.org/mozilla-central/rev/16663eb3dcfa759f25b5e27b101bc79270c156f2/security/manager/ssl/nsNSSCallbacks.cpp#140\nAlso we should have tests for these two cases.", "author": "dkeeler@mozilla.com", "text": "Great - thanks. Also, we have https://dxr.mozilla.org/mozilla-central/rev/16663eb3dcfa759f25b5e27b101bc79270c156f2/security/manager/ssl/tests/unit/test_ocsp_no_hsts_upgrade.js to actually test this in the HSTS case.\n\nLooks like while we do disable SPDY, we don't disable alt-svc: https://dxr.mozilla.org/mozilla-central/rev/16663eb3dcfa759f25b5e27b101bc79270c156f2/security/manager/ssl/nsNSSCallbacks.cpp#140\nAlso we should have tests for these two cases.", "count": 8, "bug_id": 698252, "id": 11431318}, {"creation_time": "2016-05-24T04:01:53Z", "is_private": false, "bug_id": 698252, "id": 11431375, "count": 9, "text": "what's the argument for disabling alt-svc?\n\nThe subject line indicates the scheme is changed, but alt-svc never ever changes scheme.", "author": "mcmanus@ducksong.com", "creator": "mcmanus@ducksong.com", "tags": [], "raw_text": "what's the argument for disabling alt-svc?\n\nThe subject line indicates the scheme is changed, but alt-svc never ever changes scheme.", "attachment_id": null, "time": "2016-05-24T04:01:53Z"}, {"is_private": false, "creation_time": "2016-05-24T04:32:58Z", "creator": "dkeeler@mozilla.com", "tags": [], "attachment_id": null, "id": 11431467, "bug_id": 698252, "count": 10, "text": "Maybe I'm not understanding how alt-svc works, but couldn't it cause a request to http://example.com to be served via https://example.com, which would result in a certificate verification, which could result in an OCSP request to http://example.com (which would be weird, but assume it's the CA's website), which would be served over https://example.com, and so on?", "author": "dkeeler@mozilla.com", "time": "2016-05-24T04:32:58Z", "raw_text": "Maybe I'm not understanding how alt-svc works, but couldn't it cause a request to http://example.com to be served via https://example.com, which would result in a certificate verification, which could result in an OCSP request to http://example.com (which would be weird, but assume it's the CA's website), which would be served over https://example.com, and so on?"}, {"time": "2016-05-24T04:44:33Z", "raw_text": "(In reply to David Keeler [:keeler] (use needinfo?) from comment #10)\n> Maybe I'm not understanding how alt-svc works, but couldn't it cause a\n> request to http://example.com to be served via https://example.com, which\n> would result in a certificate verification, which could result in an OCSP\n> request to http://example.com (which would be weird, but assume it's the\n> CA's website), which would be served over https://example.com, and so on?\n\nwe're both wrong :)\n\nalt-svc would never change http://example.com to be https://example.com.. it might change the internet host in the same way a DNS CNAME would (it can change the port too).. and it can even change the protocol version (i.e. to h2).. and indeed it can even use TLS.. but it will still be http://example.com. The origin never changes - that's the fundamental rule of alt-svc. (fwiw the bug title talks about Alternate-Protocol which is a chrome precursor to alt-svc.. we never implemented in gecko)\n\nbut indeed, if it does use TLS that can lead to authentication which indeed gets at the problem described here.\n\nbut you're saved, because we only implement alt-svc for services that speak spdy or h2 (because they carry the fully qualified URL to remove ambiguity) - and we already prohibit spdy/h2 for ocsp.\n\nI don't mind if you hack it in specifically, but it would be redundant.\n\nor we could just finally get rid of ocsp :) (please?)", "attachment_id": null, "tags": [], "creator": "mcmanus@ducksong.com", "count": 11, "text": "(In reply to David Keeler [:keeler] (use needinfo?) from comment #10)\n> Maybe I'm not understanding how alt-svc works, but couldn't it cause a\n> request to http://example.com to be served via https://example.com, which\n> would result in a certificate verification, which could result in an OCSP\n> request to http://example.com (which would be weird, but assume it's the\n> CA's website), which would be served over https://example.com, and so on?\n\nwe're both wrong :)\n\nalt-svc would never change http://example.com to be https://example.com.. it might change the internet host in the same way a DNS CNAME would (it can change the port too).. and it can even change the protocol version (i.e. to h2).. and indeed it can even use TLS.. but it will still be http://example.com. The origin never changes - that's the fundamental rule of alt-svc. (fwiw the bug title talks about Alternate-Protocol which is a chrome precursor to alt-svc.. we never implemented in gecko)\n\nbut indeed, if it does use TLS that can lead to authentication which indeed gets at the problem described here.\n\nbut you're saved, because we only implement alt-svc for services that speak spdy or h2 (because they carry the fully qualified URL to remove ambiguity) - and we already prohibit spdy/h2 for ocsp.\n\nI don't mind if you hack it in specifically, but it would be redundant.\n\nor we could just finally get rid of ocsp :) (please?)", "author": "mcmanus@ducksong.com", "id": 11431503, "bug_id": 698252, "is_private": false, "creation_time": "2016-05-24T04:44:33Z"}, {"is_private": false, "creation_time": "2016-05-24T05:45:47Z", "bug_id": 698252, "id": 11431643, "author": "dkeeler@mozilla.com", "count": 12, "text": "Ok - great! Thanks for the explanation. Looks like we're in good shape. I couldn't find a test for this specific case, though, so I'll just morph this bug to that. It would be nice to remove OCSP, but I don't think we're quite in a position where we can, yet.", "creator": "dkeeler@mozilla.com", "tags": [], "attachment_id": null, "raw_text": "Ok - great! Thanks for the explanation. Looks like we're in good shape. I couldn't find a test for this specific case, though, so I'll just morph this bug to that. It would be nice to remove OCSP, but I don't think we're quite in a position where we can, yet.", "time": "2016-05-24T05:45:47Z"}]}}, "comments": {}}