{"comments": {}, "bugs": {"664784": {"comments": [{"text": "Consider the attached testcase, which tests various ways of enumerating an array.  I get numbers like so:\n\nWrapped iterator took   147 ms\nIterator took            93 ms\nSelf-hosted foreach took 16 ms\nArray.foreach took       16 ms\n'for each' loop took     37 ms\n\nI profiled the wrapped iterator case, and it looks like we spend:\n\n 13% pushing and popping generator frames\n 23% in js::Interpret called from js::RunScript called from SendToGenerator\n 10% snapshotting for that inner iterator (?)\n  5% in SendToGenerator\n  3% in generator_op\n  3% under pushInvokeArgs\n  8% under js_GetMethod called from js_IteratorMore\n  3% in js_IteratorMore itself\n  9% in JM jitcode\n\nand some smaller bits.\n\nBasically, lots of slow stuff.  Given that chrome code is trying to use iterators, anything we can do to speed things up here?", "creator": "bzbarsky@mit.edu", "author": "bzbarsky@mit.edu", "time": "2011-06-16T18:21:47Z", "attachment_id": null, "creation_time": "2011-06-16T18:21:47Z", "raw_text": "Consider the attached testcase, which tests various ways of enumerating an array.  I get numbers like so:\n\nWrapped iterator took   147 ms\nIterator took            93 ms\nSelf-hosted foreach took 16 ms\nArray.foreach took       16 ms\n'for each' loop took     37 ms\n\nI profiled the wrapped iterator case, and it looks like we spend:\n\n 13% pushing and popping generator frames\n 23% in js::Interpret called from js::RunScript called from SendToGenerator\n 10% snapshotting for that inner iterator (?)\n  5% in SendToGenerator\n  3% in generator_op\n  3% under pushInvokeArgs\n  8% under js_GetMethod called from js_IteratorMore\n  3% in js_IteratorMore itself\n  9% in JM jitcode\n\nand some smaller bits.\n\nBasically, lots of slow stuff.  Given that chrome code is trying to use iterators, anything we can do to speed things up here?", "bug_id": 664784, "tags": [], "is_private": false, "count": 0, "id": 5537164}, {"text": "Created attachment 539839\nShell testcase", "attachment_id": 539839, "time": "2011-06-16T18:22:11Z", "raw_text": "", "creation_time": "2011-06-16T18:22:11Z", "bug_id": 664784, "count": 1, "is_private": false, "tags": [], "id": 5537165, "creator": "bzbarsky@mit.edu", "author": "bzbarsky@mit.edu"}, {"creator": "mail@lukewagner.name", "author": "mail@lukewagner.name", "bug_id": 664784, "count": 2, "is_private": false, "tags": [], "id": 5537876, "text": "We haven't really focused on generator perf at all; as in, we don't compile JSOP_YIELD/JSOP_GENERATOR.  About equally important (for small generator bodies) I think would be building a generator IC akin to the Function.prototype.{call,apply} ICs.\n\nI think those are the high-order perf bits, but we could do better by changing the stack layout so that generators don't copy so much state back and forth on each activation/deactivation.", "attachment_id": null, "time": "2011-06-16T21:53:46Z", "creation_time": "2011-06-16T21:53:46Z", "raw_text": "We haven't really focused on generator perf at all; as in, we don't compile JSOP_YIELD/JSOP_GENERATOR.  About equally important (for small generator bodies) I think would be building a generator IC akin to the Function.prototype.{call,apply} ICs.\n\nI think those are the high-order perf bits, but we could do better by changing the stack layout so that generators don't copy so much state back and forth on each activation/deactivation."}]}}}