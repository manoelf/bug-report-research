{"comments": {}, "bugs": {"639707": {"comments": [{"author": "scott@greenlay.net", "is_private": false, "id": 5329114, "attachment_id": null, "creation_time": "2011-03-08T02:10:37Z", "tags": [], "bug_id": 639707, "count": 0, "time": "2011-03-08T02:10:37Z", "creator": "scott@greenlay.net", "raw_text": "", "text": ""}, {"text": "I presume this refers to the \"Automatic Termination\" feature? (In general, it's nice when bugs are filed with a little more information...)\n\nhttp://developer.apple.com/library/mac/#documentation/General/Conceptual/MOSXAppProgrammingGuide/CoreAppDesign/CoreAppDesign.html", "bug_id": 639707, "raw_text": "I presume this refers to the \"Automatic Termination\" feature? (In general, it's nice when bugs are filed with a little more information...)\n\nhttp://developer.apple.com/library/mac/#documentation/General/Conceptual/MOSXAppProgrammingGuide/CoreAppDesign/CoreAppDesign.html", "creator": "ted@mielczarek.org", "creation_time": "2011-07-22T17:42:07Z", "tags": ["off-topic"], "attachment_id": null, "id": 5607467, "author": "ted@mielczarek.org", "time": "2011-07-22T17:42:07Z", "count": 1, "is_private": false}, {"text": "Automatic Termination, Resume, and Auto Save are interwoven, but certainly not the same feature. Resume is about state restoration, not process management.", "raw_text": "Automatic Termination, Resume, and Auto Save are interwoven, but certainly not the same feature. Resume is about state restoration, not process management.", "creator": "catfish.man@gmail.com", "time": "2011-07-23T09:10:44Z", "count": 2, "bug_id": 639707, "creation_time": "2011-07-23T09:10:44Z", "tags": ["off-topic"], "attachment_id": null, "id": 5608922, "is_private": false, "author": "catfish.man@gmail.com"}, {"text": "Okay, I had to poke around a little more to find docs describing this behavior.", "bug_id": 639707, "raw_text": "Okay, I had to poke around a little more to find docs describing this behavior.", "creator": "ted@mielczarek.org", "creation_time": "2011-07-25T12:07:36Z", "tags": [], "attachment_id": null, "id": 5610690, "author": "ted@mielczarek.org", "time": "2011-07-25T12:07:36Z", "count": 3, "is_private": false}, {"count": 4, "time": "2011-07-26T21:29:03Z", "text": "Scott - can you clarify which feature you mean, re: the last two comments?", "creator": "jaas@kflag.net", "raw_text": "Scott - can you clarify which feature you mean, re: the last two comments?", "id": 5615021, "author": "jaas@kflag.net", "is_private": false, "bug_id": 639707, "attachment_id": null, "creation_time": "2011-07-26T21:29:03Z", "tags": []}, {"creation_time": "2011-07-26T21:59:26Z", "tags": [], "attachment_id": null, "bug_id": 639707, "author": "b56girard@gmail.com", "is_private": false, "id": 5615145, "raw_text": "I would guess that this is the behavior we'd want to make sure it well supported:\nhttp://www.tuaw.com/2011/07/22/os-x-lions-resume-feature-lets-you-pick-up-where-you-left-off/\n\nFor us that would mean closing firefox without any prompts and during the resume restoring the profile. Ideally we could also store state for each tab (scroll position, text entry etc...) but this may not be feasible.", "creator": "b56girard@gmail.com", "text": "I would guess that this is the behavior we'd want to make sure it well supported:\nhttp://www.tuaw.com/2011/07/22/os-x-lions-resume-feature-lets-you-pick-up-where-you-left-off/\n\nFor us that would mean closing firefox without any prompts and during the resume restoring the profile. Ideally we could also store state for each tab (scroll position, text entry etc...) but this may not be feasible.", "time": "2011-07-26T21:59:26Z", "count": 5}, {"attachment_id": null, "creation_time": "2011-07-26T23:12:03Z", "tags": [], "creator": "super_egi@gmx.de", "raw_text": "The way I see it (though I might we wrong) it's like the session restore feature we already have, just faster because it's using OS features. So this would basically replace session restore on Lion. It should especially be way faster when rebooting, if one chooses to save and restore all windows.\nI'm not sure about automatic termination, does anyone know how that works? Like, does the OS automatically terminate any apps that support resume?", "bug_id": 639707, "text": "The way I see it (though I might we wrong) it's like the session restore feature we already have, just faster because it's using OS features. So this would basically replace session restore on Lion. It should especially be way faster when rebooting, if one chooses to save and restore all windows.\nI'm not sure about automatic termination, does anyone know how that works? Like, does the OS automatically terminate any apps that support resume?", "is_private": false, "count": 6, "time": "2011-07-26T23:12:03Z", "author": "super_egi@gmx.de", "id": 5615351}, {"bug_id": 639707, "text": "Anyone with a Mac developer account (even the free one) can view the WWDC session on the subject of both Automatic Termination and Resume. Go to https://developer.apple.com/videos/wwdc/2011/ and look for \"Resume and Automatic Termination in Lion\".\n\nTo summarize though: automatic termination and resume are independent, but the former works better if you support the latter.\n\nAlso, the resume APIs are suited to integrating with existing mechanisms like session restore.", "creation_time": "2011-07-26T23:18:02Z", "tags": [], "attachment_id": null, "raw_text": "Anyone with a Mac developer account (even the free one) can view the WWDC session on the subject of both Automatic Termination and Resume. Go to https://developer.apple.com/videos/wwdc/2011/ and look for \"Resume and Automatic Termination in Lion\".\n\nTo summarize though: automatic termination and resume are independent, but the former works better if you support the latter.\n\nAlso, the resume APIs are suited to integrating with existing mechanisms like session restore.", "creator": "catfish.man@gmail.com", "id": 5615367, "is_private": false, "time": "2011-07-26T23:18:02Z", "author": "catfish.man@gmail.com", "count": 7}, {"bug_id": 639707, "text": "As I understand it (and I may be wrong) Resume will restore the last state of the application before it was quit, but automatic termination has something to do with the application (explicitly) telling OS X when it can be terminated by the operating system. However, I believe automatic termination won't apply unless the application explicitly states that it supports it.", "attachment_id": null, "tags": [], "creation_time": "2011-11-30T04:33:00Z", "creator": "alex@strugee.net", "raw_text": "As I understand it (and I may be wrong) Resume will restore the last state of the application before it was quit, but automatic termination has something to do with the application (explicitly) telling OS X when it can be terminated by the operating system. However, I believe automatic termination won't apply unless the application explicitly states that it supports it.", "id": 5881164, "is_private": false, "count": 8, "author": "alex@strugee.net", "time": "2011-11-30T04:33:00Z"}, {"raw_text": "Alex, automatic termination is significantly more complicated than that, but your general view of it is correct. The WWDC video really is the best resource, but you can think of it as decoupling the idea of \"process\" and \"application\"; in an automatic-termination-aware application you can have an app with no process, a process with no app, or the more usual combinations. This allows the system to optimize both memory usage (killing processes when the user can't tell), and relaunch time (not killing processes when memory isn't short).", "creator": "catfish.man@gmail.com", "creation_time": "2011-11-30T04:39:41Z", "tags": [], "attachment_id": null, "text": "Alex, automatic termination is significantly more complicated than that, but your general view of it is correct. The WWDC video really is the best resource, but you can think of it as decoupling the idea of \"process\" and \"application\"; in an automatic-termination-aware application you can have an app with no process, a process with no app, or the more usual combinations. This allows the system to optimize both memory usage (killing processes when the user can't tell), and relaunch time (not killing processes when memory isn't short).", "bug_id": 639707, "time": "2011-11-30T04:39:41Z", "author": "catfish.man@gmail.com", "count": 9, "is_private": false, "id": 5881176}, {"text": "*** Bug 1189834 has been marked as a duplicate of this bug. ***", "bug_id": 639707, "creator": "mozilla+bmo@noorenberghe.ca", "raw_text": "", "attachment_id": null, "creation_time": "2015-09-11T20:01:34Z", "tags": [], "id": 10722276, "count": 10, "time": "2015-09-11T20:01:34Z", "author": "mozilla+bmo@noorenberghe.ca", "is_private": false}, {"creation_time": "2015-09-11T20:12:39Z", "tags": ["partly-obsolete"], "attachment_id": null, "bug_id": 639707, "is_private": false, "author": "mozilla+bmo@noorenberghe.ca", "id": 10722309, "raw_text": "I think the info.plist option in bug 967970 explicitly disabled our support for this but according to [1], Apple was forcing this result for org.mozilla.firefox already anyways.\n\nI think we need to do something along the lines of (untested):\n1) Remove NSDisablePersistence or set it to False (in order to override the org.mozilla.firefox special handling?)\n2) Implement application:shouldSaveApplicationState: and/or window:setRestorable: and properly handle private windows and ensure no private window titles leak to storage [2]. We don't actually need/want to store/use any specific new state as session restore can already handle all of this in a cross-platform manner, we just need OS X to think we can restore.\n3) Test that the above works for org.mozilla.firefox, not just nightly. If not, figure out how to bypass Apple's hard-coding.\n\n[2] is a good walk-though on all of this.\n\n[1] https://trac.torproject.org/projects/tor/ticket/8987#comment:7\n[2] https://developer.apple.com/library/ios/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/StrategiesforImplementingYourApp/StrategiesforImplementingYourApp.html#//apple_ref/doc/uid/TP40007072-CH5-SW33", "creator": "mozilla+bmo@noorenberghe.ca", "text": "I think the info.plist option in bug 967970 explicitly disabled our support for this but according to [1], Apple was forcing this result for org.mozilla.firefox already anyways.\n\nI think we need to do something along the lines of (untested):\n1) Remove NSDisablePersistence or set it to False (in order to override the org.mozilla.firefox special handling?)\n2) Implement application:shouldSaveApplicationState: and/or window:setRestorable: and properly handle private windows and ensure no private window titles leak to storage [2]. We don't actually need/want to store/use any specific new state as session restore can already handle all of this in a cross-platform manner, we just need OS X to think we can restore.\n3) Test that the above works for org.mozilla.firefox, not just nightly. If not, figure out how to bypass Apple's hard-coding.\n\n[2] is a good walk-though on all of this.\n\n[1] https://trac.torproject.org/projects/tor/ticket/8987#comment:7\n[2] https://developer.apple.com/library/ios/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/StrategiesforImplementingYourApp/StrategiesforImplementingYourApp.html#//apple_ref/doc/uid/TP40007072-CH5-SW33", "time": "2015-09-11T20:12:39Z", "count": 11}, {"is_private": false, "count": 12, "author": "alex@alexdavis.ca", "time": "2015-10-22T00:32:30Z", "id": 10861881, "attachment_id": null, "tags": [], "creation_time": "2015-10-22T00:32:30Z", "creator": "alex@alexdavis.ca", "raw_text": "What are next steps for this?\n\nWho can check through the above documentation to test this out?", "bug_id": 639707, "text": "What are next steps for this?\n\nWho can check through the above documentation to test this out?"}, {"id": 10861941, "is_private": false, "time": "2015-10-22T00:59:40Z", "author": "mozilla+bmo@noorenberghe.ca", "count": 13, "bug_id": 639707, "text": "Andr\u00e9/Stephen, is this something you can take a look at? This hurts user retention since other browsers resume but not Firefox.", "creation_time": "2015-10-22T00:59:40Z", "tags": [], "attachment_id": null, "raw_text": "Andr\u00e9/Stephen, is this something you can take a look at? This hurts user retention since other browsers resume but not Firefox.", "creator": "mozilla+bmo@noorenberghe.ca"}, {"author": "areinald.bug@peerstorage.org", "time": "2015-10-22T10:48:49Z", "count": 14, "is_private": false, "id": 10863021, "raw_text": "I don't know much about the flags in the plist. But the following comes to my mind:\n\nAs far as I understand, persistence of opened windows/tabs is handled by Firefox itself and not by Mac OS X. So having the system relaunch Firefox on session opening would be enough. I can think of a few (Apple-supported) hacks to do just that.\n\nA side note:\n\nSome time ago I opened bug 996056. This bug was present in 10.9, and likely in 10.7 also. This bug is one reason (but obviously not the only one) why Firefox was not relaunched at session opening, as the user launchd was in charge of tracking and restoring user running processes.\n\nIn 10.11 (and maybe 10.10) Apple changed the launchd architecture so that there is no more \"by user\" launchd, only the \"root\" launchd. As a result, the current Firefox relaunch mechanism doesn't yield any longer the weirdness pointed in the mentioned bug. This also results in Firefox staying visible in Activity Monitor under \"Applications in last 8 hours\" mode, even after a relaunch (profile selection, update, crash etc).", "creator": "areinald.bug@peerstorage.org", "tags": [], "creation_time": "2015-10-22T10:48:49Z", "attachment_id": null, "text": "I don't know much about the flags in the plist. But the following comes to my mind:\n\nAs far as I understand, persistence of opened windows/tabs is handled by Firefox itself and not by Mac OS X. So having the system relaunch Firefox on session opening would be enough. I can think of a few (Apple-supported) hacks to do just that.\n\nA side note:\n\nSome time ago I opened bug 996056. This bug was present in 10.9, and likely in 10.7 also. This bug is one reason (but obviously not the only one) why Firefox was not relaunched at session opening, as the user launchd was in charge of tracking and restoring user running processes.\n\nIn 10.11 (and maybe 10.10) Apple changed the launchd architecture so that there is no more \"by user\" launchd, only the \"root\" launchd. As a result, the current Firefox relaunch mechanism doesn't yield any longer the weirdness pointed in the mentioned bug. This also results in Firefox staying visible in Activity Monitor under \"Applications in last 8 hours\" mode, even after a relaunch (profile selection, update, crash etc).", "bug_id": 639707}, {"raw_text": "There may also be some useful information in bug 1051979. I added both bugs in the \"see also\" list.", "creator": "areinald.bug@peerstorage.org", "text": "There may also be some useful information in bug 1051979. I added both bugs in the \"see also\" list.", "time": "2015-10-22T11:00:04Z", "count": 15, "creation_time": "2015-10-22T11:00:04Z", "tags": [], "attachment_id": null, "bug_id": 639707, "author": "areinald.bug@peerstorage.org", "is_private": false, "id": 10863051}, {"bug_id": 639707, "tags": [], "creation_time": "2016-05-25T18:32:56Z", "attachment_id": null, "id": 11438271, "is_private": false, "author": "jmathies@mozilla.com", "text": "for investigation", "raw_text": "for investigation", "creator": "jmathies@mozilla.com", "time": "2016-05-25T18:32:56Z", "count": 16}, {"creation_time": "2018-09-26T17:10:18Z", "tags": [], "attachment_id": null, "raw_text": "", "creator": "mozilla+bmo@noorenberghe.ca", "bug_id": 639707, "text": "*** Bug 1326181 has been marked as a duplicate of this bug. ***", "is_private": false, "author": "mozilla+bmo@noorenberghe.ca", "time": "2018-09-26T17:10:18Z", "count": 17, "id": 13642457}, {"tags": ["obsolete"], "creation_time": "2018-09-27T08:49:00Z", "attachment_id": null, "bug_id": 639707, "author": "albert@scheiner.cc", "is_private": false, "id": 13644137, "raw_text": "As bug 1326181 has been marked as dup, is Lion still supported by Firefox or should the task be updated to macOS 10.10/.11?", "creator": "albert@scheiner.cc", "text": "As bug 1326181 has been marked as dup, is Lion still supported by Firefox or should the task be updated to macOS 10.10/.11?", "time": "2018-09-27T08:49:00Z", "count": 18}, {"text": "This bug was initially filed when 10.7 was brand new, that's why it was in the summary. I've updated it.", "bug_id": 639707, "creator": "mstange.moz@gmail.com", "raw_text": "This bug was initially filed when 10.7 was brand new, that's why it was in the summary. I've updated it.", "attachment_id": null, "tags": ["obsolete"], "creation_time": "2018-09-27T12:55:59Z", "id": 13644908, "count": 19, "time": "2018-09-27T12:55:59Z", "author": "mstange.moz@gmail.com", "is_private": false}, {"bug_id": 639707, "text": "Thanks Markus. I would have done it, but wasn't sure about current support.", "attachment_id": null, "creation_time": "2018-09-28T16:45:10Z", "tags": ["obsolete"], "creator": "albert@scheiner.cc", "raw_text": "Thanks Markus. I would have done it, but wasn't sure about current support.", "id": 13647937, "is_private": false, "count": 20, "time": "2018-09-28T16:45:10Z", "author": "albert@scheiner.cc"}, {"text": "Created attachment 9016357\nMy feeble attempt - by looking at and porting the Chrome code over\n\nFirst: this ended up not working. Or I'm using a testing methods on a Debug build that would never work anyways. Unsure.\n\nBut what :MattN said about Apple hardcoding Firefox to not be started seems to be correct. I don't know how or why, but AFAICT it's something that we need to get established as fact or fiction before we continue here!\nThis is something I don't know how to do without a bit of help...\n\nI'm posting this approach here for posterity and to hopefully prove useful. I didn't port over the 'launch without opening a window when configured as a hidden login item' code, which was too hairy - the `ScopedCFTypeRef` template code proved too much for me to handle at this point and in the timeframe I gave myself.\n\nIMHO, this is a huge gap in platform integration functionality that has been allowed to exist for way to long. How can I help to get this on a roadmap?", "bug_id": 639707, "creator": "mdeboer@mozilla.com", "raw_text": "First: this ended up not working. Or I'm using a testing methods on a Debug build that would never work anyways. Unsure.\n\nBut what :MattN said about Apple hardcoding Firefox to not be started seems to be correct. I don't know how or why, but AFAICT it's something that we need to get established as fact or fiction before we continue here!\nThis is something I don't know how to do without a bit of help...\n\nI'm posting this approach here for posterity and to hopefully prove useful. I didn't port over the 'launch without opening a window when configured as a hidden login item' code, which was too hairy - the `ScopedCFTypeRef` template code proved too much for me to handle at this point and in the timeframe I gave myself.\n\nIMHO, this is a huge gap in platform integration functionality that has been allowed to exist for way to long. How can I help to get this on a roadmap?", "attachment_id": 9016357, "tags": [], "creation_time": "2018-10-11T16:49:14Z", "id": 13678200, "count": 21, "author": "mdeboer@mozilla.com", "time": "2018-10-11T16:49:14Z", "is_private": false}, {"count": 22, "author": "spohl.mozilla.bugs@gmail.com", "time": "2019-10-11T17:39:14Z", "is_private": false, "id": 14419181, "creator": "spohl.mozilla.bugs@gmail.com", "raw_text": "", "attachment_id": null, "creation_time": "2019-10-11T17:39:14Z", "tags": [], "text": "*** Bug 1588137 has been marked as a duplicate of this bug. ***", "bug_id": 639707}, {"count": 23, "time": "2019-10-15T13:28:45Z", "text": "Haik, I'm needinfo'ing you because I saw you reached out to Apple in bug 1570451, but feel free to redirect if not applicable. Can we ping our contacts at Apple to verify if AppKit is really blacklisting us from starting on login as mentioned in comment #11 and the linked Tor bug [0]?\n\nLooking at /System/Library/Frameworks/AppKit.framework/Versions/Current/AppKit on my machine running macOS Catalina 10.15.1 Beta I still see behavior that seems to match the Tor issue, specifically checking for _CFAppVersionLessThan(CFSTR(\"org.mozilla.firefox\"), -1.0) somewhere inside _NSEnablePersistentUI.\n\n[0] https://trac.torproject.org/projects/tor/ticket/8987#comment:7", "creator": "reuben.morais@gmail.com", "raw_text": "Haik, I'm needinfo'ing you because I saw you reached out to Apple in bug 1570451, but feel free to redirect if not applicable. Can we ping our contacts at Apple to verify if AppKit is really blacklisting us from starting on login as mentioned in comment #11 and the linked Tor bug [0]?\n\nLooking at /System/Library/Frameworks/AppKit.framework/Versions/Current/AppKit on my machine running macOS Catalina 10.15.1 Beta I still see behavior that seems to match the Tor issue, specifically checking for _CFAppVersionLessThan(CFSTR(\"org.mozilla.firefox\"), -1.0) somewhere inside _NSEnablePersistentUI.\n\n[0] https://trac.torproject.org/projects/tor/ticket/8987#comment:7", "id": 14425528, "is_private": false, "author": "reuben.morais@gmail.com", "bug_id": 639707, "attachment_id": null, "tags": [], "creation_time": "2019-10-15T13:28:45Z"}, {"id": 14426375, "count": 24, "time": "2019-10-15T18:10:32Z", "author": "haftandilian@mozilla.com", "is_private": false, "text": "(In reply to Reuben Morais [:reuben] from comment #23)\n> Haik, I'm needinfo'ing you because I saw you reached out to Apple in bug 1570451, but feel free to redirect if not applicable. Can we ping our contacts at Apple to verify if AppKit is really blacklisting us from starting on login as mentioned in comment #11 and the linked Tor bug [0]?\n> \n> Looking at /System/Library/Frameworks/AppKit.framework/Versions/Current/AppKit on my machine running macOS Catalina 10.15.1 Beta I still see behavior that seems to match the Tor issue, specifically checking for _CFAppVersionLessThan(CFSTR(\"org.mozilla.firefox\"), -1.0) somewhere inside _NSEnablePersistentUI.\n> \n> [0] https://trac.torproject.org/projects/tor/ticket/8987#comment:7\n\nDone. I'll update the bug once I hear back.", "bug_id": 639707, "creator": "haftandilian@mozilla.com", "raw_text": "(In reply to Reuben Morais [:reuben] from comment #23)\n> Haik, I'm needinfo'ing you because I saw you reached out to Apple in bug 1570451, but feel free to redirect if not applicable. Can we ping our contacts at Apple to verify if AppKit is really blacklisting us from starting on login as mentioned in comment #11 and the linked Tor bug [0]?\n> \n> Looking at /System/Library/Frameworks/AppKit.framework/Versions/Current/AppKit on my machine running macOS Catalina 10.15.1 Beta I still see behavior that seems to match the Tor issue, specifically checking for _CFAppVersionLessThan(CFSTR(\"org.mozilla.firefox\"), -1.0) somewhere inside _NSEnablePersistentUI.\n> \n> [0] https://trac.torproject.org/projects/tor/ticket/8987#comment:7\n\nDone. I'll update the bug once I hear back.", "attachment_id": null, "creation_time": "2019-10-15T18:10:32Z", "tags": []}, {"is_private": false, "time": "2020-02-21T17:18:47Z", "author": "alex@alexdavis.ca", "count": 25, "id": 14654445, "tags": [], "creation_time": "2020-02-21T17:18:47Z", "attachment_id": null, "raw_text": "Just sharing this slide since it's relevant to this bug. One of the top reasons for users going to use another browser is that it's hard to find Firefox on their computer. Re-opening Firefox would help resolve that.\n\nhttps://docs.google.com/presentation/d/136lS_izjRDoy3voVUxTbNSQjP1PANf3n-yVlNxApvPk/edit#slide=id.g7acb8982e8_0_49", "creator": "alex@alexdavis.ca", "bug_id": 639707, "text": "Just sharing this slide since it's relevant to this bug. One of the top reasons for users going to use another browser is that it's hard to find Firefox on their computer. Re-opening Firefox would help resolve that.\n\nhttps://docs.google.com/presentation/d/136lS_izjRDoy3voVUxTbNSQjP1PANf3n-yVlNxApvPk/edit#slide=id.g7acb8982e8_0_49"}, {"count": 26, "time": "2020-02-21T17:46:41Z", "creator": "spohl.mozilla.bugs@gmail.com", "raw_text": "(In reply to Alex Davis [:adavis] [PM FxA] from comment #25)\n> Just sharing this slide since it's relevant to this bug. One of the top reasons for users going to use another browser is that it's hard to find Firefox on their computer. Re-opening Firefox would help resolve that.\n> \n> https://docs.google.com/presentation/d/136lS_izjRDoy3voVUxTbNSQjP1PANf3n-yVlNxApvPk/edit#slide=id.g7acb8982e8_0_49\n\nI would also make sure to mention this in bugs related to writing an actual installer for macOS (rather than our current .dmg package), since an installer may be able to create a Dock icon and help in discoverability this way. :mhowell may know the state of things there.", "text": "(In reply to Alex Davis [:adavis] [PM FxA] from comment #25)\n> Just sharing this slide since it's relevant to this bug. One of the top reasons for users going to use another browser is that it's hard to find Firefox on their computer. Re-opening Firefox would help resolve that.\n> \n> https://docs.google.com/presentation/d/136lS_izjRDoy3voVUxTbNSQjP1PANf3n-yVlNxApvPk/edit#slide=id.g7acb8982e8_0_49\n\nI would also make sure to mention this in bugs related to writing an actual installer for macOS (rather than our current .dmg package), since an installer may be able to create a Dock icon and help in discoverability this way. :mhowell may know the state of things there.", "is_private": false, "author": "spohl.mozilla.bugs@gmail.com", "id": 14654502, "attachment_id": null, "tags": [], "creation_time": "2020-02-21T17:46:41Z", "bug_id": 639707}, {"bug_id": 639707, "attachment_id": null, "tags": [], "creation_time": "2020-07-16T03:05:49Z", "id": 14939681, "author": "mozilla+bmo@noorenberghe.ca", "is_private": false, "text": "A bundle ID deny list shouldn't hinder development of this fix since we use a different bundle identifier for development and Nightly builds (confirm with `grep --after 1 CFBundleIdentifier obj-*/dist/*.app/Contents/Info.plist`). If Mike's patch didn't work it's probably a bug, not due to `_CFAppVersionLessThan`. I suspect the issue was that we need to backout the two patches from bug 1405577 comment 20 as well (the problem is  [this](https://searchfox.org/mozilla-central/rev/82c04b9cad5b98bdf682bd477f2b1e3071b004ad/widget/cocoa/nsCocoaWindow.mm#466-469)). See that bug discussion for more info.\n\nOnce we have the patch working for non-release builds then we can figure out getting it to work for `org.mozilla.firefox` ones. Contact me for more info.", "creator": "mozilla+bmo@noorenberghe.ca", "raw_text": "A bundle ID deny list shouldn't hinder development of this fix since we use a different bundle identifier for development and Nightly builds (confirm with `grep --after 1 CFBundleIdentifier obj-*/dist/*.app/Contents/Info.plist`). If Mike's patch didn't work it's probably a bug, not due to `_CFAppVersionLessThan`. I suspect the issue was that we need to backout the two patches from bug 1405577 comment 20 as well (the problem is  [this](https://searchfox.org/mozilla-central/rev/82c04b9cad5b98bdf682bd477f2b1e3071b004ad/widget/cocoa/nsCocoaWindow.mm#466-469)). See that bug discussion for more info.\n\nOnce we have the patch working for non-release builds then we can figure out getting it to work for `org.mozilla.firefox` ones. Contact me for more info.", "count": 27, "time": "2020-07-16T03:05:49Z"}, {"bug_id": 639707, "text": "Created attachment 9163953\nBug 639707 - Backed out changeset 5c2c9bbf9fcc", "attachment_id": 9163953, "creation_time": "2020-07-16T06:53:40Z", "tags": [], "creator": "mozilla+bmo@noorenberghe.ca", "raw_text": "", "id": 14939826, "is_private": false, "count": 29, "author": "mozilla+bmo@noorenberghe.ca", "time": "2020-07-16T06:53:40Z"}, {"id": 14939827, "count": 30, "author": "mozilla+bmo@noorenberghe.ca", "time": "2020-07-16T06:54:19Z", "is_private": false, "text": "Created attachment 9163954\nBug 639707 - Restore the ability to open new windows in new spaces when a window is already in fullscreen mode on macOS. r=mstange\n\n\nBacked out changeset ab70879b5734\n\nDepends on D83740", "bug_id": 639707, "creator": "mozilla+bmo@noorenberghe.ca", "raw_text": "\nBacked out changeset ab70879b5734\n\nDepends on D83740", "attachment_id": 9163954, "tags": [], "creation_time": "2020-07-16T06:54:19Z"}, {"count": 31, "time": "2020-07-16T06:55:32Z", "creator": "mozilla+bmo@noorenberghe.ca", "raw_text": "\n\nDepends on D83741", "text": "Created attachment 9163955\nBug 639707 - Add resume session support on macOS.\n\n\n\nDepends on D83741", "is_private": false, "author": "mozilla+bmo@noorenberghe.ca", "id": 14939828, "attachment_id": 9163955, "tags": [], "creation_time": "2020-07-16T06:55:32Z", "bug_id": 639707}, {"creator": "mozilla+bmo@noorenberghe.ca", "raw_text": "I attempted to rebase Mike's patch on top of backing out the two commits in from bug 1405577 comment 20 in order to see if the patch works. In my quick test it still didn't restore after a macOS restart. \n\nI won't have time to drive this over the finish line and would probably re-arrange some of the changes and commit messages but here it is for someone else to test and run with. I would also verify that my backouts are correct since they were very old and required a few manual fixes.", "text": "I attempted to rebase Mike's patch on top of backing out the two commits in from bug 1405577 comment 20 in order to see if the patch works. In my quick test it still didn't restore after a macOS restart. \n\nI won't have time to drive this over the finish line and would probably re-arrange some of the changes and commit messages but here it is for someone else to test and run with. I would also verify that my backouts are correct since they were very old and required a few manual fixes.", "count": 32, "time": "2020-07-16T06:57:41Z", "attachment_id": null, "tags": ["partly-obsolete"], "creation_time": "2020-07-16T06:57:41Z", "bug_id": 639707, "author": "mozilla+bmo@noorenberghe.ca", "is_private": false, "id": 14939830}, {"bug_id": 639707, "creation_time": "2020-07-16T07:13:58Z", "tags": [], "attachment_id": null, "id": 14939844, "author": "mozilla+bmo@noorenberghe.ca", "is_private": false, "text": "The stack actually does work now :-) I realized that I tested with `mach run` but then though I should have added `--macos-open` which did allow it to work. I didn't test just launching the .app normally but I don't see why that wouldn't work.\n\nThe stack needs some cleanup (probably looking at the Chromium code again would be good to see if there are other fixes in the last two years) and then review. Once it's working on Nightly we can address the org.mozilla.firefox issue.", "raw_text": "The stack actually does work now :-) I realized that I tested with `mach run` but then though I should have added `--macos-open` which did allow it to work. I didn't test just launching the .app normally but I don't see why that wouldn't work.\n\nThe stack needs some cleanup (probably looking at the Chromium code again would be good to see if there are other fixes in the last two years) and then review. Once it's working on Nightly we can address the org.mozilla.firefox issue.", "creator": "mozilla+bmo@noorenberghe.ca", "time": "2020-07-16T07:13:58Z", "count": 33}, {"raw_text": "(In reply to Matthew N. [:MattN] from comment #33)\n> The stack actually does work now :-) I realized that I tested with `mach run` but then though I should have added `--macos-open` which did allow it to work. I didn't test just launching the .app normally but I don't see why that wouldn't work.\n\nThat's great! FYI, the `--macos-open` mach option uses the Mac `open(1)` command which is meant to be equivalent to double clicking the icon in the Finder. Per the man page `The open command opens a file (or a directory or URL), just as if you had double-clicked the file's icon.`", "creator": "haftandilian@mozilla.com", "text": "(In reply to Matthew N. [:MattN] from comment #33)\n> The stack actually does work now :-) I realized that I tested with `mach run` but then though I should have added `--macos-open` which did allow it to work. I didn't test just launching the .app normally but I don't see why that wouldn't work.\n\nThat's great! FYI, the `--macos-open` mach option uses the Mac `open(1)` command which is meant to be equivalent to double clicking the icon in the Finder. Per the man page `The open command opens a file (or a directory or URL), just as if you had double-clicked the file's icon.`", "time": "2020-07-16T21:19:23Z", "count": 34, "tags": [], "creation_time": "2020-07-16T21:19:23Z", "attachment_id": null, "bug_id": 639707, "is_private": false, "author": "haftandilian@mozilla.com", "id": 14941286}, {"bug_id": 639707, "text": "(In reply to Haik Aftandilian [:haik] from comment #24)\n> (In reply to Reuben Morais [:reuben] from comment #23)\n> > Haik, I'm needinfo'ing you because I saw you reached out to Apple in bug 1570451, but feel free to redirect if not applicable. Can we ping our contacts at Apple to verify if AppKit is really blacklisting us from starting on login as mentioned in comment #11 and the linked Tor bug [0]?\n> > \n> > Looking at /System/Library/Frameworks/AppKit.framework/Versions/Current/AppKit on my machine running macOS Catalina 10.15.1 Beta I still see behavior that seems to match the Tor issue, specifically checking for _CFAppVersionLessThan(CFSTR(\"org.mozilla.firefox\"), -1.0) somewhere inside _NSEnablePersistentUI.\n> > \n> > [0] https://trac.torproject.org/projects/tor/ticket/8987#comment:7\n> \n> Done. I'll update the bug once I hear back.\n\nGiven Matthew's progress, this may be a moot point, but Apple did get back to us and the hardcoding would not apply to builds using an SDK later than 10.7. We're using 10.11 for release builds so we should not be affected by it. And they noted that windows need to be restorable which Matthew was already testing with.", "tags": [], "creation_time": "2020-07-16T21:33:10Z", "attachment_id": null, "raw_text": "(In reply to Haik Aftandilian [:haik] from comment #24)\n> (In reply to Reuben Morais [:reuben] from comment #23)\n> > Haik, I'm needinfo'ing you because I saw you reached out to Apple in bug 1570451, but feel free to redirect if not applicable. Can we ping our contacts at Apple to verify if AppKit is really blacklisting us from starting on login as mentioned in comment #11 and the linked Tor bug [0]?\n> > \n> > Looking at /System/Library/Frameworks/AppKit.framework/Versions/Current/AppKit on my machine running macOS Catalina 10.15.1 Beta I still see behavior that seems to match the Tor issue, specifically checking for _CFAppVersionLessThan(CFSTR(\"org.mozilla.firefox\"), -1.0) somewhere inside _NSEnablePersistentUI.\n> > \n> > [0] https://trac.torproject.org/projects/tor/ticket/8987#comment:7\n> \n> Done. I'll update the bug once I hear back.\n\nGiven Matthew's progress, this may be a moot point, but Apple did get back to us and the hardcoding would not apply to builds using an SDK later than 10.7. We're using 10.11 for release builds so we should not be affected by it. And they noted that windows need to be restorable which Matthew was already testing with.", "creator": "haftandilian@mozilla.com", "id": 14941348, "is_private": false, "time": "2020-07-16T21:33:10Z", "author": "haftandilian@mozilla.com", "count": 35}]}}}