{"comments": {}, "bugs": {"674753": {"comments": [{"creator": "cjones.bugs@gmail.com", "creation_time": "2011-07-27T23:04:18Z", "is_private": false, "attachment_id": null, "tags": [], "count": 0, "text": "Android doesn't include a native GL debugger, AFAICT.  (Neither does Meego, FAIK.)  Perhaps relatedly, we have a bunch of GL rendering bugs there.  It's a tremendous PITA to debug these, and IME usually ends up requiring bug-specific hackery doo.  We should be pros and use protools.\n\nJeff points out APITrace as being the closest thing to an ideal solution that we also have the source to.  We should find a way to get this working on device.  If it needs to be actually LD_PRELOAD'd, then it will be a pain to get working on android, as usual.\n\nThe trace logs might fill up available space on device pretty quickly, so we might want the ability to redirect the log to adb or a TCP socket.\n\nI wonder if there's a way to combine this with our GL debug mode for ultra win.  I don't know much about the current debug mode though.\n\nIt would be really cool to package this in debug builds and allow enabling it with a -gldebug flag or something.  We could also build our own HTML UI on top of the event logs for hackability.\n\nWe could give PIXwin a run for its money with the right investment (*cough* contractor *cough*).\n\nNot sure of a better place to track this, so just sticking it on bug 607684.", "author": "cjones.bugs@gmail.com", "bug_id": 674753, "id": 5618092, "raw_text": "Android doesn't include a native GL debugger, AFAICT.  (Neither does Meego, FAIK.)  Perhaps relatedly, we have a bunch of GL rendering bugs there.  It's a tremendous PITA to debug these, and IME usually ends up requiring bug-specific hackery doo.  We should be pros and use protools.\n\nJeff points out APITrace as being the closest thing to an ideal solution that we also have the source to.  We should find a way to get this working on device.  If it needs to be actually LD_PRELOAD'd, then it will be a pain to get working on android, as usual.\n\nThe trace logs might fill up available space on device pretty quickly, so we might want the ability to redirect the log to adb or a TCP socket.\n\nI wonder if there's a way to combine this with our GL debug mode for ultra win.  I don't know much about the current debug mode though.\n\nIt would be really cool to package this in debug builds and allow enabling it with a -gldebug flag or something.  We could also build our own HTML UI on top of the event logs for hackability.\n\nWe could give PIXwin a run for its money with the right investment (*cough* contractor *cough*).\n\nNot sure of a better place to track this, so just sticking it on bug 607684.", "time": "2011-07-27T23:04:18Z"}, {"id": 5618097, "bug_id": 674753, "is_private": false, "creation_time": "2011-07-27T23:04:59Z", "creator": "cjones.bugs@gmail.com", "author": "cjones.bugs@gmail.com", "count": 1, "text": "(APITrace is under the MIT license, BTW.)", "tags": [], "time": "2011-07-27T23:04:59Z", "attachment_id": null, "raw_text": "(APITrace is under the MIT license, BTW.)"}, {"attachment_id": null, "tags": [], "creator": "cjones.bugs@gmail.com", "is_private": false, "creation_time": "2011-07-27T23:07:45Z", "raw_text": "Oops, linked the wrong repo.  Also forgot to note that APITrace supports D3D, so we would also have the opportunity to develop a tool that gives a consistent debugging experience across all Tier Is.  (With yet more investment.)  But we should narrowly focus on android initially, since that's where we're hurting the most.", "time": "2011-07-27T23:07:45Z", "text": "Oops, linked the wrong repo.  Also forgot to note that APITrace supports D3D, so we would also have the opportunity to develop a tool that gives a consistent debugging experience across all Tier Is.  (With yet more investment.)  But we should narrowly focus on android initially, since that's where we're hurting the most.", "count": 2, "author": "cjones.bugs@gmail.com", "bug_id": 674753, "id": 5618106}, {"tags": [], "time": "2011-07-28T01:56:47Z", "raw_text": "I investigated to see how we can integrate this. Here is what cjones and I found:\n\n- Android doesn't support LD_PRELOAD.\n- APITrace defines the symbols, wraps them and forward them using dlsym.\n\nI think it may be a viable approach to modify GLContextProviderEGL.cpp to specifically dynamically link to APITrace and modify dlsym to not use RTLD_NEXT but explicitly load EGL_LIB.\n\nAnother note is that APITrace doesn't know about the KHR extentions. We seem to use only 4:\nmHave_EGL_KHR_image_base, mHave_EGL_KHR_image_pixmap, mHave_EGL_KHR_gl_texture_2D_image, mHave_EGL_KHR_lock_surface", "attachment_id": null, "id": 5618423, "bug_id": 674753, "creation_time": "2011-07-28T01:56:47Z", "is_private": false, "creator": "b56girard@gmail.com", "text": "I investigated to see how we can integrate this. Here is what cjones and I found:\n\n- Android doesn't support LD_PRELOAD.\n- APITrace defines the symbols, wraps them and forward them using dlsym.\n\nI think it may be a viable approach to modify GLContextProviderEGL.cpp to specifically dynamically link to APITrace and modify dlsym to not use RTLD_NEXT but explicitly load EGL_LIB.\n\nAnother note is that APITrace doesn't know about the KHR extentions. We seem to use only 4:\nmHave_EGL_KHR_image_base, mHave_EGL_KHR_image_pixmap, mHave_EGL_KHR_gl_texture_2D_image, mHave_EGL_KHR_lock_surface", "count": 3, "author": "b56girard@gmail.com"}, {"tags": [], "attachment_id": null, "is_private": false, "creation_time": "2011-07-28T03:05:47Z", "creator": "cjones.bugs@gmail.com", "time": "2011-07-28T03:05:47Z", "raw_text": "Another issue is how good its OpenGL ES support is.  My understanding is that ES isn't a faithful subset of OpenGL, but I have no idea how much that might bite in practice.", "bug_id": 674753, "id": 5618474, "author": "cjones.bugs@gmail.com", "text": "Another issue is how good its OpenGL ES support is.  My understanding is that ES isn't a faithful subset of OpenGL, but I have no idea how much that might bite in practice.", "count": 4}, {"raw_text": "(In reply to comment #0)\n> Android doesn't include a native GL debugger, AFAICT.  (Neither does Meego,\n> FAIK.)  Perhaps relatedly, we have a bunch of GL rendering bugs there.  It's\n> a tremendous PITA to debug these, and IME usually ends up requiring\n> bug-specific hackery doo.  We should be pros and use protools.\n\nWe are still at a stage where we cause GL errors, see e.g. bug 661002. This kind of bug is easy to track down with the GL debug mode and some extensions of it (bug 654424). But yes, for sure APItrace would be very useful.\n\n> I wonder if there's a way to combine this with our GL debug mode for ultra\n> win.  I don't know much about the current debug mode though.\n\nCheck for yourself the opengl debug mode: gfx/thebes/GLContext.h, search for BeforeGLCall and AfterGLCall.\n\nThings that the GL debug mode is doing, include:\n 1. calling glFinish() after every GL call\n 2. checking that GL calls are called on the GLContext that is current.\n 3. optionally, logging GL calls\n 4. optionally, logging GL errors\n 5. optionally, aborting upon GL error\n\nIt would be useful to know which of these are done (better) by APItrace and which aren't.\n\nFor sure, 3 is done better by APItrace. Also for sure 2 is not done by APItrace since that can't be detected at the level of the GL API, only at the level of our C++ GLContext API. I don't know about others.\n\n> \n> It would be really cool to package this in debug builds\n\n+1 for APItrace bundled with debug builds.", "time": "2011-07-28T14:42:12Z", "author": "jacob.benoit.1@gmail.com", "text": "(In reply to comment #0)\n> Android doesn't include a native GL debugger, AFAICT.  (Neither does Meego,\n> FAIK.)  Perhaps relatedly, we have a bunch of GL rendering bugs there.  It's\n> a tremendous PITA to debug these, and IME usually ends up requiring\n> bug-specific hackery doo.  We should be pros and use protools.\n\nWe are still at a stage where we cause GL errors, see e.g. bug 661002. This kind of bug is easy to track down with the GL debug mode and some extensions of it (bug 654424). But yes, for sure APItrace would be very useful.\n\n> I wonder if there's a way to combine this with our GL debug mode for ultra\n> win.  I don't know much about the current debug mode though.\n\nCheck for yourself the opengl debug mode: gfx/thebes/GLContext.h, search for BeforeGLCall and AfterGLCall.\n\nThings that the GL debug mode is doing, include:\n 1. calling glFinish() after every GL call\n 2. checking that GL calls are called on the GLContext that is current.\n 3. optionally, logging GL calls\n 4. optionally, logging GL errors\n 5. optionally, aborting upon GL error\n\nIt would be useful to know which of these are done (better) by APItrace and which aren't.\n\nFor sure, 3 is done better by APItrace. Also for sure 2 is not done by APItrace since that can't be detected at the level of the GL API, only at the level of our C++ GLContext API. I don't know about others.\n\n> \n> It would be really cool to package this in debug builds\n\n+1 for APItrace bundled with debug builds.", "count": 5, "id": 5619275, "bug_id": 674753, "attachment_id": null, "tags": [], "creator": "jacob.benoit.1@gmail.com", "creation_time": "2011-07-28T14:42:12Z", "is_private": false}, {"attachment_id": null, "tags": [], "creator": "jmuizelaar@mozilla.com", "is_private": false, "creation_time": "2011-07-28T18:32:52Z", "time": "2011-07-28T18:32:52Z", "raw_text": "It might also be possible to work around the lack of LD_PRELOAD by using a technique similar to what is done on OS X:\n\nUsage on Mac OS X is similar to Linux above, except for the tracing procedure,\nwhich is instead:\n\n  DYLD_LIBRARY_PATH=/path/to/apitrace/wrappers /path/to/application\n\nNote that although Mac OS X has an LD_PRELOAD equivalent,\nDYLD_INSERT_LIBRARIES, it is mostly useless because it only works with\nDYLD_FORCE_FLAT_NAMESPACE=1 which breaks most applications.  See the 'dyld' man\npage for more details about these environment flags.", "author": "jmuizelaar@mozilla.com", "text": "It might also be possible to work around the lack of LD_PRELOAD by using a technique similar to what is done on OS X:\n\nUsage on Mac OS X is similar to Linux above, except for the tracing procedure,\nwhich is instead:\n\n  DYLD_LIBRARY_PATH=/path/to/apitrace/wrappers /path/to/application\n\nNote that although Mac OS X has an LD_PRELOAD equivalent,\nDYLD_INSERT_LIBRARIES, it is mostly useless because it only works with\nDYLD_FORCE_FLAT_NAMESPACE=1 which breaks most applications.  See the 'dyld' man\npage for more details about these environment flags.", "count": 6, "bug_id": 674753, "id": 5619964}, {"time": "2011-07-28T18:34:32Z", "attachment_id": null, "raw_text": "It's also worth noting that many of the driver vendors (qualcomm and powervr) have debuggers that will work with Android.", "tags": [], "creator": "jmuizelaar@mozilla.com", "author": "jmuizelaar@mozilla.com", "count": 7, "text": "It's also worth noting that many of the driver vendors (qualcomm and powervr) have debuggers that will work with Android.", "bug_id": 674753, "id": 5619969, "is_private": false, "creation_time": "2011-07-28T18:34:32Z"}, {"time": "2011-07-28T18:55:44Z", "raw_text": "For Firefox/android, whatever we do has to use dlopen/dlsym, since that's all we have available.  BenWa's suggestion in comment 3 sounds OK to me, IIUC; basically, ensure that GLContextProviderEGL dlsym's/glGetProcAddress's from libapitrace.so, and make sure libapitrace.so dlsym's and glGetProcAddress's from the \"real\" libgl.so.\n\nJeff: I'm more concerned about comment 4.  Do you have any guess about compat issues?", "author": "cjones.bugs@gmail.com", "text": "For Firefox/android, whatever we do has to use dlopen/dlsym, since that's all we have available.  BenWa's suggestion in comment 3 sounds OK to me, IIUC; basically, ensure that GLContextProviderEGL dlsym's/glGetProcAddress's from libapitrace.so, and make sure libapitrace.so dlsym's and glGetProcAddress's from the \"real\" libgl.so.\n\nJeff: I'm more concerned about comment 4.  Do you have any guess about compat issues?", "count": 8, "bug_id": 674753, "id": 5620029, "attachment_id": null, "tags": [], "creator": "cjones.bugs@gmail.com", "is_private": false, "creation_time": "2011-07-28T18:55:44Z"}, {"time": "2011-07-28T19:13:15Z", "attachment_id": null, "raw_text": "Chris: for an overview of differences between OpenGL and OpenGL ES at the level of function prototypes (what APItrace is concerned about) look at the GL functions in GLContext.h. Some are slightly different in ES. For example, ES has glDepthRangef while non-ES has glDepthRange.", "tags": [], "creator": "jacob.benoit.1@gmail.com", "author": "jacob.benoit.1@gmail.com", "text": "Chris: for an overview of differences between OpenGL and OpenGL ES at the level of function prototypes (what APItrace is concerned about) look at the GL functions in GLContext.h. Some are slightly different in ES. For example, ES has glDepthRangef while non-ES has glDepthRange.", "count": 9, "bug_id": 674753, "id": 5620087, "creation_time": "2011-07-28T19:13:15Z", "is_private": false}, {"is_private": false, "creation_time": "2011-07-29T03:08:08Z", "creator": "b56girard@gmail.com", "tags": [], "attachment_id": null, "id": 5621192, "bug_id": 674753, "author": "b56girard@gmail.com", "text": "I made a fork to experience with the changes I have so far. It's very hacky at this point:\n\nhttps://github.com/bgirard/apitrace\n\nedit the paths in cross_compile.sh and CMakeLists.txt\nsource cross_compile.sh\ncmake -H. -Bbuild\nmake -C build\n\nthe build fails at 77% because we're not including glx.", "count": 10, "raw_text": "I made a fork to experience with the changes I have so far. It's very hacky at this point:\n\nhttps://github.com/bgirard/apitrace\n\nedit the paths in cross_compile.sh and CMakeLists.txt\nsource cross_compile.sh\ncmake -H. -Bbuild\nmake -C build\n\nthe build fails at 77% because we're not including glx.", "time": "2011-07-29T03:08:08Z"}, {"bug_id": 674753, "id": 5621193, "creation_time": "2011-07-29T03:08:50Z", "is_private": false, "creator": "b56girard@gmail.com", "author": "b56girard@gmail.com", "count": 11, "text": "s/experience/experiment", "tags": [], "time": "2011-07-29T03:08:50Z", "attachment_id": null, "raw_text": "s/experience/experiment"}, {"text": "I checked in some changes. It now fully compiles and links but for some reason that I don't under CMake does a static library instead of a shared library. If someone with CMake experience wants to take a look that would be great.", "count": 12, "author": "b56girard@gmail.com", "creator": "b56girard@gmail.com", "is_private": false, "creation_time": "2011-07-29T19:41:57Z", "id": 5622588, "bug_id": 674753, "raw_text": "I checked in some changes. It now fully compiles and links but for some reason that I don't under CMake does a static library instead of a shared library. If someone with CMake experience wants to take a look that would be great.", "attachment_id": null, "time": "2011-07-29T19:41:57Z", "tags": []}, {"time": "2011-07-29T20:02:57Z", "raw_text": "http://www.cmake.org/cmake/help/cmake2.6docs.html#command:add_library says\n\n  add_library(foo.so SHARED foo.c ...)\n\nIs that not working?", "text": "http://www.cmake.org/cmake/help/cmake2.6docs.html#command:add_library says\n\n  add_library(foo.so SHARED foo.c ...)\n\nIs that not working?", "count": 13, "author": "cjones.bugs@gmail.com", "id": 5622637, "bug_id": 674753, "attachment_id": null, "tags": [], "creator": "cjones.bugs@gmail.com", "is_private": false, "creation_time": "2011-07-29T20:02:57Z"}, {"time": "2011-07-29T20:14:34Z", "raw_text": "Here is the line I have in my gitfork:\n\n> add_library (glxtrace SHARED glxtrace.cpp trace_write.cpp os_posix.cpp ${CMAKE_CURRENT_BINARY_DIR}/glproc.hpp)", "attachment_id": null, "tags": [], "creator": "b56girard@gmail.com", "count": 14, "text": "Here is the line I have in my gitfork:\n\n> add_library (glxtrace SHARED glxtrace.cpp trace_write.cpp os_posix.cpp ${CMAKE_CURRENT_BINARY_DIR}/glproc.hpp)", "author": "b56girard@gmail.com", "bug_id": 674753, "id": 5622663, "is_private": false, "creation_time": "2011-07-29T20:14:34Z"}, {"attachment_id": null, "tags": [], "creator": "b56girard@gmail.com", "creation_time": "2011-08-02T00:13:35Z", "is_private": false, "time": "2011-08-02T00:13:35Z", "raw_text": "Progress I've made over the weekend:\nThe shared library is now created, it exports (nearly) all the symbols we need for EGL/GLES.\n\nWe get a crash when doing the dlopen step in fennec with a corrupted trace and SIGILL. I'm trying to figure exactly what is causing the crash. 'file' on the android GLES shared library and the apitrace library reports the same arm format.\n\nOne guess is that dlopen causes static initializers to run in apitrace and those fails I don't see how this would result in SIGILL.", "count": 15, "text": "Progress I've made over the weekend:\nThe shared library is now created, it exports (nearly) all the symbols we need for EGL/GLES.\n\nWe get a crash when doing the dlopen step in fennec with a corrupted trace and SIGILL. I'm trying to figure exactly what is causing the crash. 'file' on the android GLES shared library and the apitrace library reports the same arm format.\n\nOne guess is that dlopen causes static initializers to run in apitrace and those fails I don't see how this would result in SIGILL.", "author": "b56girard@gmail.com", "bug_id": 674753, "id": 5626718}, {"id": 5864638, "bug_id": 674753, "is_private": false, "creation_time": "2011-11-22T05:35:45Z", "creator": "kanru@kanru.info", "author": "kanru@kanru.info", "text": "Do we have any use case that I can try?", "count": 16, "tags": [], "time": "2011-11-22T05:35:45Z", "attachment_id": null, "raw_text": "Do we have any use case that I can try?"}, {"creation_time": "2011-11-22T05:58:07Z", "is_private": false, "bug_id": 674753, "id": 5864667, "author": "cjones.bugs@gmail.com", "count": 17, "text": "See discussion at http://groups.google.com/group/mozilla.dev.platform/browse_thread/thread/93b5ae5d54cdf756# .\n\nKan-Ru, I lean towards option (3).  That should be easiest for developers who want to debug Firefox/Android, and additionally will work in Gonk builds without much trouble.  We probably want to control loading apitrace with an environment variable.  Let's call that MOZ_TRACE_GL until someone has a better proposal :).\n\n(In reply to Kan-Ru Chen from comment #16)\n> Do we have any use case that I can try?\n\nIf you can get a recording of Firefox/Android just starting up and rendering say bing.com, that would be awesome! :)", "creator": "cjones.bugs@gmail.com", "tags": [], "attachment_id": null, "raw_text": "See discussion at http://groups.google.com/group/mozilla.dev.platform/browse_thread/thread/93b5ae5d54cdf756# .\n\nKan-Ru, I lean towards option (3).  That should be easiest for developers who want to debug Firefox/Android, and additionally will work in Gonk builds without much trouble.  We probably want to control loading apitrace with an environment variable.  Let's call that MOZ_TRACE_GL until someone has a better proposal :).\n\n(In reply to Kan-Ru Chen from comment #16)\n> Do we have any use case that I can try?\n\nIf you can get a recording of Firefox/Android just starting up and rendering say bing.com, that would be awesome! :)", "time": "2011-11-22T05:58:07Z"}, {"text": "Another question we need to answer: should we import apitrace into mozilla-central?  I think we probably should.  Kan-Ru, have you investigated getting your changes into the upstream apitrace?  That would make maintenance easier.\n\nAnd also, re:\n\n> I don't know many portions are rendered by GL in fennec now, but I only\n> see calls from WebGL. \n\nYou need to set the preference \"layers.acceleration.force-enabled\" to \"true\" to have general web content composited with GL.  You can set the preference by opening the URL about:config and searching for that preference name.", "count": 18, "author": "cjones.bugs@gmail.com", "id": 5864672, "bug_id": 674753, "raw_text": "Another question we need to answer: should we import apitrace into mozilla-central?  I think we probably should.  Kan-Ru, have you investigated getting your changes into the upstream apitrace?  That would make maintenance easier.\n\nAnd also, re:\n\n> I don't know many portions are rendered by GL in fennec now, but I only\n> see calls from WebGL. \n\nYou need to set the preference \"layers.acceleration.force-enabled\" to \"true\" to have general web content composited with GL.  You can set the preference by opening the URL about:config and searching for that preference name.", "time": "2011-11-22T06:00:56Z", "creator": "cjones.bugs@gmail.com", "is_private": false, "creation_time": "2011-11-22T06:00:56Z", "attachment_id": null, "tags": []}, {"text": "(In reply to Chris Jones [:cjones] [:warhammer] from comment #17)\n> We probably want to control loading apitrace with an\n> environment variable.  Let's call that MOZ_TRACE_GL until someone has a\n> better proposal :).\n\nHow about the proposed gfx.apitrace.path and gfx.apitrace.enabled preferences? Using environment variable on Android is as hard as using LD_PRELOAD ;-)", "count": 19, "author": "kanru@kanru.info", "id": 5864716, "bug_id": 674753, "time": "2011-11-22T06:25:14Z", "raw_text": "(In reply to Chris Jones [:cjones] [:warhammer] from comment #17)\n> We probably want to control loading apitrace with an\n> environment variable.  Let's call that MOZ_TRACE_GL until someone has a\n> better proposal :).\n\nHow about the proposed gfx.apitrace.path and gfx.apitrace.enabled preferences? Using environment variable on Android is as hard as using LD_PRELOAD ;-)", "creator": "kanru@kanru.info", "is_private": false, "creation_time": "2011-11-22T06:25:14Z", "attachment_id": null, "tags": []}, {"creation_time": "2011-11-22T06:26:48Z", "is_private": false, "creator": "cjones.bugs@gmail.com", "tags": [], "attachment_id": null, "bug_id": 674753, "id": 5864720, "author": "cjones.bugs@gmail.com", "count": 20, "text": "We have some hacks for environment variables: https://wiki.mozilla.org/Android#Arguments_and_Environment_Variables.  But either way is fine with me.", "time": "2011-11-22T06:26:48Z", "raw_text": "We have some hacks for environment variables: https://wiki.mozilla.org/Android#Arguments_and_Environment_Variables.  But either way is fine with me."}, {"bug_id": 674753, "id": 5864728, "creation_time": "2011-11-22T06:34:53Z", "is_private": false, "creator": "kanru@kanru.info", "author": "kanru@kanru.info", "text": "(In reply to Chris Jones [:cjones] [:warhammer] from comment #18)\n> Another question we need to answer: should we import apitrace into\n> mozilla-central?  I think we probably should.  Kan-Ru, have you investigated\n> getting your changes into the upstream apitrace?  That would make\n> maintenance easier.\n\nI'm working toward this. Currently upstream apitrace has merged EGL/GLES support contributed by LunarG, but it's kind of messy that it depends on a few desktop headers to build.", "count": 21, "tags": [], "time": "2011-11-22T06:34:53Z", "attachment_id": null, "raw_text": "(In reply to Chris Jones [:cjones] [:warhammer] from comment #18)\n> Another question we need to answer: should we import apitrace into\n> mozilla-central?  I think we probably should.  Kan-Ru, have you investigated\n> getting your changes into the upstream apitrace?  That would make\n> maintenance easier.\n\nI'm working toward this. Currently upstream apitrace has merged EGL/GLES support contributed by LunarG, but it's kind of messy that it depends on a few desktop headers to build."}, {"tags": [], "attachment_id": null, "raw_text": "(In reply to Chris Jones [:cjones] [:warhammer] from comment #18)\n> Another question we need to answer: should we import apitrace into\n> mozilla-central?  I think we probably should.\n\nLicense looks ok, so a=me. Not clear on where it should be put, though. modules/ ?", "time": "2011-11-23T19:14:58Z", "creation_time": "2011-11-23T19:14:58Z", "is_private": false, "bug_id": 674753, "id": 5868992, "author": "joe@drew.ca", "count": 22, "text": "(In reply to Chris Jones [:cjones] [:warhammer] from comment #18)\n> Another question we need to answer: should we import apitrace into\n> mozilla-central?  I think we probably should.\n\nLicense looks ok, so a=me. Not clear on where it should be put, though. modules/ ?", "creator": "joe@drew.ca"}, {"creator": "kanru@kanru.info", "is_private": false, "creation_time": "2011-11-24T03:50:30Z", "attachment_id": null, "tags": [], "count": 23, "text": "(In reply to Joe Drew (:JOEDREW!) from comment #22)\n> (In reply to Chris Jones [:cjones] [:warhammer] from comment #18)\n> > Another question we need to answer: should we import apitrace into\n> > mozilla-central?  I think we probably should.\n> \n> License looks ok, so a=me. Not clear on where it should be put, though.\n> modules/ ?\n\nI currently put it under gfx/ nearby the gl code.", "author": "kanru@kanru.info", "bug_id": 674753, "id": 5870139, "raw_text": "(In reply to Joe Drew (:JOEDREW!) from comment #22)\n> (In reply to Chris Jones [:cjones] [:warhammer] from comment #18)\n> > Another question we need to answer: should we import apitrace into\n> > mozilla-central?  I think we probably should.\n> \n> License looks ok, so a=me. Not clear on where it should be put, though.\n> modules/ ?\n\nI currently put it under gfx/ nearby the gl code.", "time": "2011-11-24T03:50:30Z"}, {"creator": "b56girard@gmail.com", "creation_time": "2011-11-24T04:46:25Z", "is_private": false, "attachment_id": null, "tags": [], "text": "I think tools/ would be a good location for it.", "count": 24, "author": "b56girard@gmail.com", "bug_id": 674753, "id": 5870180, "time": "2011-11-24T04:46:25Z", "raw_text": "I think tools/ would be a good location for it."}, {"id": 5871707, "bug_id": 674753, "is_private": false, "creation_time": "2011-11-25T02:04:55Z", "creator": "kanru@kanru.info", "count": 25, "text": "Created attachment 576844\n, part 1: Import apitrace", "author": "kanru@kanru.info", "tags": [], "time": "2011-11-25T02:04:55Z", "raw_text": "", "attachment_id": 576844}, {"creator": "kanru@kanru.info", "author": "kanru@kanru.info", "text": "Created attachment 576846\npart 2: Conditionally include X11 headers", "count": 26, "bug_id": 674753, "id": 5871709, "is_private": false, "creation_time": "2011-11-25T02:07:51Z", "time": "2011-11-25T02:07:51Z", "attachment_id": 576846, "raw_text": "", "tags": []}, {"tags": [], "attachment_id": 576847, "is_private": false, "creation_time": "2011-11-25T02:08:44Z", "creator": "kanru@kanru.info", "raw_text": "", "time": "2011-11-25T02:08:44Z", "id": 5871710, "bug_id": 674753, "count": 27, "text": "Created attachment 576847\npart 3: Always try dlsym before eglGetProcAddress", "author": "kanru@kanru.info"}, {"raw_text": "", "time": "2011-11-25T02:09:32Z", "count": 28, "text": "Created attachment 576848\npart 4: Open library handle explicitly", "author": "kanru@kanru.info", "bug_id": 674753, "id": 5871711, "attachment_id": 576848, "tags": [], "creator": "kanru@kanru.info", "is_private": false, "creation_time": "2011-11-25T02:09:32Z"}, {"tags": [], "raw_text": "", "attachment_id": 576849, "time": "2011-11-25T02:09:59Z", "is_private": false, "creation_time": "2011-11-25T02:09:59Z", "bug_id": 674753, "id": 5871712, "text": "Created attachment 576849\npart 5: Make LocalWriter::open accept default filename", "count": 29, "author": "kanru@kanru.info", "creator": "kanru@kanru.info"}, {"attachment_id": 576850, "raw_text": "", "time": "2011-11-25T02:10:23Z", "tags": [], "author": "kanru@kanru.info", "count": 30, "text": "Created attachment 576850\npart 6: Add EGL_APITRACE_enable_tracing extension", "creator": "kanru@kanru.info", "creation_time": "2011-11-25T02:10:23Z", "is_private": false, "bug_id": 674753, "id": 5871713}, {"text": "Created attachment 576851\npart 7: Add GL header wrapper", "count": 31, "author": "kanru@kanru.info", "bug_id": 674753, "id": 5871714, "time": "2011-11-25T02:10:46Z", "raw_text": "", "creator": "kanru@kanru.info", "is_private": false, "creation_time": "2011-11-25T02:10:46Z", "attachment_id": 576851, "tags": []}, {"time": "2011-11-25T02:11:13Z", "attachment_id": 576852, "raw_text": "", "tags": [], "creator": "kanru@kanru.info", "author": "kanru@kanru.info", "count": 32, "text": "Created attachment 576852\npart 8: Don't include private zlib header", "id": 5871716, "bug_id": 674753, "creation_time": "2011-11-25T02:11:13Z", "is_private": false}, {"tags": [], "raw_text": "", "attachment_id": 576853, "time": "2011-11-25T02:11:36Z", "is_private": false, "creation_time": "2011-11-25T02:11:36Z", "bug_id": 674753, "id": 5871717, "text": "Created attachment 576853\npart 9: Add Makefile.in", "count": 33, "author": "kanru@kanru.info", "creator": "kanru@kanru.info"}, {"attachment_id": 576854, "tags": [], "creator": "kanru@kanru.info", "creation_time": "2011-11-25T02:11:59Z", "is_private": false, "raw_text": "", "time": "2011-11-25T02:11:59Z", "text": "Created attachment 576854\npart 10: Build and install libapitrace", "count": 34, "author": "kanru@kanru.info", "bug_id": 674753, "id": 5871718}, {"tags": [], "attachment_id": 576855, "creation_time": "2011-11-25T02:12:21Z", "is_private": false, "creator": "kanru@kanru.info", "raw_text": "", "time": "2011-11-25T02:12:21Z", "bug_id": 674753, "id": 5871719, "count": 35, "text": "Created attachment 576855\npart 11: Add apitrace support to GLContextProviderEGL", "author": "kanru@kanru.info"}, {"bug_id": 674753, "id": 5871739, "author": "b56girard@gmail.com", "count": 36, "text": "A pref is really great but perhaps having an environment variable as well to force enable this would be handy for platform developers, but it may be overkill.\n\nRunning:\n'MOZ_TRACE_GL=1 minefield.sh' \nis much easier then flipping a pref on and back off.", "time": "2011-11-25T02:41:07Z", "raw_text": "A pref is really great but perhaps having an environment variable as well to force enable this would be handy for platform developers, but it may be overkill.\n\nRunning:\n'MOZ_TRACE_GL=1 minefield.sh' \nis much easier then flipping a pref on and back off.", "is_private": false, "creation_time": "2011-11-25T02:41:07Z", "creator": "b56girard@gmail.com", "tags": [], "attachment_id": null}, {"text": "Is it possible to replay the trace on the device as well? This would be helpful for reproducing driver crashes outside of Gecko.", "count": 37, "author": "b56girard@gmail.com", "creator": "b56girard@gmail.com", "creation_time": "2011-11-29T21:47:23Z", "is_private": false, "id": 5880079, "bug_id": 674753, "raw_text": "Is it possible to replay the trace on the device as well? This would be helpful for reproducing driver crashes outside of Gecko.", "attachment_id": null, "time": "2011-11-29T21:47:23Z", "tags": []}, {"raw_text": "yes, replay on device is possible. Only need to implement the relevant setup routine for eglretrace.", "time": "2011-11-30T00:49:23Z", "author": "kanru@kanru.info", "text": "yes, replay on device is possible. Only need to implement the relevant setup routine for eglretrace.", "count": 38, "bug_id": 674753, "id": 5880788, "attachment_id": null, "tags": [], "creator": "kanru@kanru.info", "is_private": false, "creation_time": "2011-11-30T00:49:23Z"}, {"creator": "cjones.bugs@gmail.com", "creation_time": "2012-01-06T07:41:13Z", "is_private": false, "attachment_id": null, "tags": [], "author": "cjones.bugs@gmail.com", "count": 39, "text": "joe/benwa/jrmuizel/benoit are you guys signed off on landing this directly in m-c?", "bug_id": 674753, "id": 5959831, "time": "2012-01-06T07:41:13Z", "raw_text": "joe/benwa/jrmuizel/benoit are you guys signed off on landing this directly in m-c?"}, {"creator": "b56girard@gmail.com", "author": "b56girard@gmail.com", "count": 40, "text": "Comment on attachment 576854\npart 10: Build and install libapitrace\n\nReview of attachment 576854:\n-----------------------------------------------------------------\n\n::: toolkit/mozapps/installer/packager.mk\n@@ +331,5 @@\n>    cp $(GECKO_APP_AP_PATH)/gecko.ap_ $(_ABS_DIST) && \\\n>    ( cd $(STAGEPATH)$(MOZ_PKG_DIR)$(_BINPATH) && \\\n>      mkdir -p lib/$(ABI_DIR) && \\\n>      mv libmozutils.so $(MOZ_CHILD_PROCESS_NAME) lib/$(ABI_DIR) && \\\n> +    if test -n \"$(MOZ_DEBUG)\"; then mv libapitrace.so lib/$(ABI_DIR); fi && \\\n\nI think we want '@DLL_PREFIX@apitrace@DLL_SUFFIX@' here.", "id": 5960363, "bug_id": 674753, "creation_time": "2012-01-06T14:46:30Z", "is_private": false, "time": "2012-01-06T14:46:30Z", "attachment_id": 576854, "raw_text": "Review of attachment 576854:\n-----------------------------------------------------------------\n\n::: toolkit/mozapps/installer/packager.mk\n@@ +331,5 @@\n>    cp $(GECKO_APP_AP_PATH)/gecko.ap_ $(_ABS_DIST) && \\\n>    ( cd $(STAGEPATH)$(MOZ_PKG_DIR)$(_BINPATH) && \\\n>      mkdir -p lib/$(ABI_DIR) && \\\n>      mv libmozutils.so $(MOZ_CHILD_PROCESS_NAME) lib/$(ABI_DIR) && \\\n> +    if test -n \"$(MOZ_DEBUG)\"; then mv libapitrace.so lib/$(ABI_DIR); fi && \\\n\nI think we want '@DLL_PREFIX@apitrace@DLL_SUFFIX@' here.", "tags": []}, {"attachment_id": null, "raw_text": "(In reply to Chris Jones [:cjones] [:warhammer] from comment #39)\n> joe/benwa/jrmuizel/benoit are you guys signed off on landing this directly\n> in m-c?\n\nI think landing this in m-c is the right thing to do. I think we should have a specific mozconfig option to build apitrace that is independent from DEBUG.", "time": "2012-01-06T14:49:10Z", "tags": [], "author": "b56girard@gmail.com", "count": 41, "text": "(In reply to Chris Jones [:cjones] [:warhammer] from comment #39)\n> joe/benwa/jrmuizel/benoit are you guys signed off on landing this directly\n> in m-c?\n\nI think landing this in m-c is the right thing to do. I think we should have a specific mozconfig option to build apitrace that is independent from DEBUG.", "creator": "b56girard@gmail.com", "creation_time": "2012-01-06T14:49:10Z", "is_private": false, "id": 5960367, "bug_id": 674753}, {"tags": [], "attachment_id": 589266, "raw_text": "", "time": "2012-01-17T20:38:14Z", "is_private": false, "creation_time": "2012-01-17T20:38:14Z", "bug_id": 674753, "id": 5986491, "author": "jacob.benoit.1@gmail.com", "count": 42, "text": "Created attachment 589266\nrefreshed part 10", "creator": "jacob.benoit.1@gmail.com"}, {"tags": [], "attachment_id": 589268, "creation_time": "2012-01-17T20:43:34Z", "is_private": false, "creator": "jacob.benoit.1@gmail.com", "time": "2012-01-17T20:43:34Z", "raw_text": "I agree that it would be nice to decouple that from DEBUG. This could be very helpful in non-debug builds.\n\nRegarding overlap with the existing MOZ_GL_DEBUG modes, here's how it maps:\n - APItrace deprecates the logging features of MOZ_GL_DEBUG_VERBOSE: it's just better.\n - The basic features of MOZ_GL_DEBUG are still useful, and orthogonal to APItrace: checking that the GL context corresponding to |this| is current, in particular, is outside of the scope of APItrace. Also, the feature of calling glFinish after every GL call, isn't found in APItrace AFAIK.\n - The feature of MOZ_GL_DEBUG_ABORT_ON_ERROR is still useful, unless APItrace has something similar (?).", "id": 5986505, "bug_id": 674753, "text": "Created attachment 589268\nrefreshed part 11\n\nI agree that it would be nice to decouple that from DEBUG. This could be very helpful in non-debug builds.\n\nRegarding overlap with the existing MOZ_GL_DEBUG modes, here's how it maps:\n - APItrace deprecates the logging features of MOZ_GL_DEBUG_VERBOSE: it's just better.\n - The basic features of MOZ_GL_DEBUG are still useful, and orthogonal to APItrace: checking that the GL context corresponding to |this| is current, in particular, is outside of the scope of APItrace. Also, the feature of calling glFinish after every GL call, isn't found in APItrace AFAIK.\n - The feature of MOZ_GL_DEBUG_ABORT_ON_ERROR is still useful, unless APItrace has something similar (?).", "count": 43, "author": "jacob.benoit.1@gmail.com"}, {"text": "Created attachment 589274\nrefreshed part 11", "count": 44, "author": "jacob.benoit.1@gmail.com", "id": 5986576, "bug_id": 674753, "raw_text": "", "time": "2012-01-17T21:02:25Z", "creator": "jacob.benoit.1@gmail.com", "is_private": false, "creation_time": "2012-01-17T21:02:25Z", "attachment_id": 589274, "tags": []}, {"creation_time": "2012-02-04T02:40:57Z", "is_private": false, "bug_id": 674753, "id": 6034256, "count": 45, "text": "bjacob, joe says that we crash with the latest patches.  Do you have a backtrace or anything like that?  Is it a trivial crash like a startup crash or are special steps needed to repro it?", "author": "cjones.bugs@gmail.com", "creator": "cjones.bugs@gmail.com", "tags": [], "raw_text": "bjacob, joe says that we crash with the latest patches.  Do you have a backtrace or anything like that?  Is it a trivial crash like a startup crash or are special steps needed to repro it?", "attachment_id": null, "time": "2012-02-04T02:40:57Z"}, {"tags": [], "attachment_id": null, "is_private": false, "creation_time": "2012-02-04T03:40:56Z", "creator": "jacob.benoit.1@gmail.com", "time": "2012-02-04T03:40:56Z", "raw_text": "I did crash too with these patches, which is why I left things there. But at that time, I wasn't able to use GDB with B2G. Now that Joe is able to, he might be able to get a backtrace. Yes, IIRC it was a startup crash, trivial to reproduce.", "bug_id": 674753, "id": 6034321, "count": 46, "text": "I did crash too with these patches, which is why I left things there. But at that time, I wasn't able to use GDB with B2G. Now that Joe is able to, he might be able to get a backtrace. Yes, IIRC it was a startup crash, trivial to reproduce.", "author": "jacob.benoit.1@gmail.com"}, {"raw_text": "Turns out that LD_PRELOAD was added recently to bionic:\nhttps://github.com/android/platform_bionic/commit/4fd42c1dc002fa19349fa0d4ef97757eb1815032#linker", "attachment_id": null, "time": "2012-02-10T18:15:51Z", "tags": [], "text": "Turns out that LD_PRELOAD was added recently to bionic:\nhttps://github.com/android/platform_bionic/commit/4fd42c1dc002fa19349fa0d4ef97757eb1815032#linker", "count": 47, "author": "b56girard@gmail.com", "creator": "b56girard@gmail.com", "is_private": false, "creation_time": "2012-02-10T18:15:51Z", "id": 6050686, "bug_id": 674753}, {"tags": [], "raw_text": "I've thoroughly updated the apitrace setup for Fennec and come up with a new set of patches. I'd love for anyone interested to take a look and give me feedback.\n\nI've forked upstream apitrace on github for now, and am working towards upstreaming my patches for android support. We now have to build apitrace outside of mozilla using their buildsystem, but I think this makes sense. See my patches here: https://github.com/gw280/apitrace/commits/android\n\nSecondly, I have a single patch against mozilla-central (currently based off the Maple branch) to enable tracing. Basically this checks to see if egltrace.so exists in $GRE_HOME/lib/egltrace.so and loads it if it is (but only if the gfx.apitrace.enabled pref is turned on). See my patch at https://github.com/gw280/mozilla-central/commits/android/apitrace", "attachment_id": null, "time": "2012-02-28T00:08:14Z", "creation_time": "2012-02-28T00:08:14Z", "is_private": false, "id": 6097410, "bug_id": 674753, "text": "I've thoroughly updated the apitrace setup for Fennec and come up with a new set of patches. I'd love for anyone interested to take a look and give me feedback.\n\nI've forked upstream apitrace on github for now, and am working towards upstreaming my patches for android support. We now have to build apitrace outside of mozilla using their buildsystem, but I think this makes sense. See my patches here: https://github.com/gw280/apitrace/commits/android\n\nSecondly, I have a single patch against mozilla-central (currently based off the Maple branch) to enable tracing. Basically this checks to see if egltrace.so exists in $GRE_HOME/lib/egltrace.so and loads it if it is (but only if the gfx.apitrace.enabled pref is turned on). See my patch at https://github.com/gw280/mozilla-central/commits/android/apitrace", "count": 48, "author": "gw@gwright.org.uk", "creator": "gw@gwright.org.uk"}, {"id": 6097569, "bug_id": 674753, "author": "gw@gwright.org.uk", "count": 49, "text": "Created attachment 601127\nAdd support for loading apitrace explicitly on Android", "raw_text": "", "time": "2012-02-28T00:52:52Z", "creation_time": "2012-02-28T00:52:52Z", "is_private": false, "creator": "gw@gwright.org.uk", "tags": [], "attachment_id": 601127}, {"count": 50, "text": "Comment on attachment 601127\nAdd support for loading apitrace explicitly on Android\n\nReview of attachment 601127:\n-----------------------------------------------------------------\n\n::: gfx/gl/GLContextProviderEGL.cpp\n@@ +656,5 @@\n>  #endif\n>  \n>          if (!mEGLLibrary) {\n> +#if defined(ANDROID)\n> +            nsAdoptingCString logFile = Preferences::GetCString(\"gfx.apitrace.log_path\");\n\nI've never used nsAdoptingCString... hopefully Jeff knows more.\n\n@@ +666,5 @@\n> +            nsCAutoString logPath;\n> +            logPath.Append(getenv(\"GRE_HOME\"));\n> +            logPath.Append('/');\n> +            logPath.Append(logFile);\n> +            logPath.Append(\".trace\");\n\nYou could replace all these Append() calls by a single AppendPrintf().\n\n@@ +674,5 @@\n> +\n> +            nsCAutoString apitracePath;\n> +            apitracePath.Append(getenv(\"GRE_HOME\"));\n> +            apitracePath.Append(\"/lib/\");\n> +            apitracePath.Append(APITRACE_LIB);\n\nSame here. In addition, it's not clear to me why you would have to construct a lib path here: shouldn't the system be able to find libraries on its own?\n\n@@ +1061,5 @@\n> +        // libGLESv2.so and libEGL.so\n> +        nsCAutoString apitracePath;\n> +        apitracePath.Append(getenv(\"GRE_HOME\"));\n> +        apitracePath.Append(\"/lib/\");\n> +        apitracePath.Append(APITRACE_LIB);\n\nSame comments here.\n\n@@ +1063,5 @@\n> +        apitracePath.Append(getenv(\"GRE_HOME\"));\n> +        apitracePath.Append(\"/lib/\");\n> +        apitracePath.Append(APITRACE_LIB);\n> +\n> +        printf_stderr(\"Attempting load of %s\\n\", apitracePath);\n\nI would do apitracePath.get(). Relying on an implicit conversion here scares me a bit.", "author": "jacob.benoit.1@gmail.com", "creator": "jacob.benoit.1@gmail.com", "is_private": false, "creation_time": "2012-02-28T02:13:12Z", "bug_id": 674753, "id": 6097731, "raw_text": "Review of attachment 601127:\n-----------------------------------------------------------------\n\n::: gfx/gl/GLContextProviderEGL.cpp\n@@ +656,5 @@\n>  #endif\n>  \n>          if (!mEGLLibrary) {\n> +#if defined(ANDROID)\n> +            nsAdoptingCString logFile = Preferences::GetCString(\"gfx.apitrace.log_path\");\n\nI've never used nsAdoptingCString... hopefully Jeff knows more.\n\n@@ +666,5 @@\n> +            nsCAutoString logPath;\n> +            logPath.Append(getenv(\"GRE_HOME\"));\n> +            logPath.Append('/');\n> +            logPath.Append(logFile);\n> +            logPath.Append(\".trace\");\n\nYou could replace all these Append() calls by a single AppendPrintf().\n\n@@ +674,5 @@\n> +\n> +            nsCAutoString apitracePath;\n> +            apitracePath.Append(getenv(\"GRE_HOME\"));\n> +            apitracePath.Append(\"/lib/\");\n> +            apitracePath.Append(APITRACE_LIB);\n\nSame here. In addition, it's not clear to me why you would have to construct a lib path here: shouldn't the system be able to find libraries on its own?\n\n@@ +1061,5 @@\n> +        // libGLESv2.so and libEGL.so\n> +        nsCAutoString apitracePath;\n> +        apitracePath.Append(getenv(\"GRE_HOME\"));\n> +        apitracePath.Append(\"/lib/\");\n> +        apitracePath.Append(APITRACE_LIB);\n\nSame comments here.\n\n@@ +1063,5 @@\n> +        apitracePath.Append(getenv(\"GRE_HOME\"));\n> +        apitracePath.Append(\"/lib/\");\n> +        apitracePath.Append(APITRACE_LIB);\n> +\n> +        printf_stderr(\"Attempting load of %s\\n\", apitracePath);\n\nI would do apitracePath.get(). Relying on an implicit conversion here scares me a bit.", "attachment_id": 601127, "time": "2012-02-28T02:13:12Z", "tags": []}, {"attachment_id": null, "tags": [], "creator": "gw@gwright.org.uk", "creation_time": "2012-02-28T03:18:37Z", "is_private": false, "time": "2012-02-28T03:18:37Z", "raw_text": "Ah, a quick search through the nsCString namespace didn't turf up AppendPrintf so I just did what was in one of the LayerOGL source files.. I'll sort that out.\n\nLib path - I just took that path straight out of Kan-Ru's patch, but I will double check our library search paths to see if they're needed. \n\nImplicit conversion - typo :) Missed the .get on that one.\n\nOne more thing - do you think the cost of a failed dlopen is high enough to warrant conditionalising this code? We can either:\n\na) Pref it\nb) Build it only in debug builds\nc) Do a quick check to see if the file $GRE_HOME/lib/egltrace.so exists, then attempt to dlopen it only if it does\nd) Add a configure option\ne) Do what we're doing in this current iteration of the patch which is to attempt to dlopen it, then fallback to dlopen(libEGL.so) if egltrace fails.", "author": "gw@gwright.org.uk", "count": 51, "text": "Ah, a quick search through the nsCString namespace didn't turf up AppendPrintf so I just did what was in one of the LayerOGL source files.. I'll sort that out.\n\nLib path - I just took that path straight out of Kan-Ru's patch, but I will double check our library search paths to see if they're needed. \n\nImplicit conversion - typo :) Missed the .get on that one.\n\nOne more thing - do you think the cost of a failed dlopen is high enough to warrant conditionalising this code? We can either:\n\na) Pref it\nb) Build it only in debug builds\nc) Do a quick check to see if the file $GRE_HOME/lib/egltrace.so exists, then attempt to dlopen it only if it does\nd) Add a configure option\ne) Do what we're doing in this current iteration of the patch which is to attempt to dlopen it, then fallback to dlopen(libEGL.so) if egltrace fails.", "id": 6097858, "bug_id": 674753}, {"id": 6100345, "bug_id": 674753, "is_private": false, "creation_time": "2012-02-28T20:55:19Z", "creator": "gw@gwright.org.uk", "author": "gw@gwright.org.uk", "text": "Created attachment 601381\nBug 674753 - Add support for loading apitrace explicitly on Android.", "count": 52, "tags": [], "time": "2012-02-28T20:55:19Z", "attachment_id": 601381, "raw_text": ""}, {"tags": [], "attachment_id": 601381, "creation_time": "2012-02-28T21:32:21Z", "is_private": false, "creator": "jmuizelaar@mozilla.com", "raw_text": "Review of attachment 601381:\n-----------------------------------------------------------------\n\n::: gfx/gl/GLContextProviderEGL.cpp\n@@ +658,5 @@\n>  \n>          if (!mEGLLibrary) {\n> +#if defined(ANDROID)\n> +            nsAdoptingCString logFile = Preferences::GetCString(\"gfx.apitrace.log_path\");\n> +\n\n.logfile\n\n@@ +660,5 @@\n> +#if defined(ANDROID)\n> +            nsAdoptingCString logFile = Preferences::GetCString(\"gfx.apitrace.log_path\");\n> +\n> +            if (logFile.IsEmpty()) {\n> +                logFile.Append(\"firefox\");\n\nassignment instead of append\n\n@@ +669,5 @@\n> +            nsCAutoString logPath;\n> +            logPath.AppendPrintf(\"%s/%s.trace\", getenv(\"GRE_HOME\"), logFile.get());\n> +\n> +            printf_stderr(\"Logging GL tracing output to %s\", logPath.get());\n> +            setenv(\"TRACE_FILE\", logPath.get(), false);\n\nProbably worth noting that we do this to tell apitrace about the trace file\n\n@@ +674,5 @@\n> +\n> +            printf_stderr(\"Attempting load of %s\\n\", APITRACE_LIB);\n> +\n> +            mEGLLibrary = PR_LoadLibrary(APITRACE_LIB);\n> +\n\nI would prefer this be in a separate function. But at minimum move the 'if()' out of the #endif\n\n@@ +1058,5 @@\n> +        printf_stderr(\"Attempting load of %s\\n\", APITRACE_LIB);\n> +\n> +        loaded = OpenLibrary(APITRACE_LIB);\n> +\n> +        if (!loaded)\n\nSame here.\n\nAdd your unhappiness as comments.\n\n@@ +1074,2 @@\n>              }\n>  #endif\n\nIf you can write this function so it's not weird that would be nice too.", "time": "2012-02-28T21:32:21Z", "id": 6100475, "bug_id": 674753, "author": "jmuizelaar@mozilla.com", "count": 53, "text": "Comment on attachment 601381\nBug 674753 - Add support for loading apitrace explicitly on Android.\n\nReview of attachment 601381:\n-----------------------------------------------------------------\n\n::: gfx/gl/GLContextProviderEGL.cpp\n@@ +658,5 @@\n>  \n>          if (!mEGLLibrary) {\n> +#if defined(ANDROID)\n> +            nsAdoptingCString logFile = Preferences::GetCString(\"gfx.apitrace.log_path\");\n> +\n\n.logfile\n\n@@ +660,5 @@\n> +#if defined(ANDROID)\n> +            nsAdoptingCString logFile = Preferences::GetCString(\"gfx.apitrace.log_path\");\n> +\n> +            if (logFile.IsEmpty()) {\n> +                logFile.Append(\"firefox\");\n\nassignment instead of append\n\n@@ +669,5 @@\n> +            nsCAutoString logPath;\n> +            logPath.AppendPrintf(\"%s/%s.trace\", getenv(\"GRE_HOME\"), logFile.get());\n> +\n> +            printf_stderr(\"Logging GL tracing output to %s\", logPath.get());\n> +            setenv(\"TRACE_FILE\", logPath.get(), false);\n\nProbably worth noting that we do this to tell apitrace about the trace file\n\n@@ +674,5 @@\n> +\n> +            printf_stderr(\"Attempting load of %s\\n\", APITRACE_LIB);\n> +\n> +            mEGLLibrary = PR_LoadLibrary(APITRACE_LIB);\n> +\n\nI would prefer this be in a separate function. But at minimum move the 'if()' out of the #endif\n\n@@ +1058,5 @@\n> +        printf_stderr(\"Attempting load of %s\\n\", APITRACE_LIB);\n> +\n> +        loaded = OpenLibrary(APITRACE_LIB);\n> +\n> +        if (!loaded)\n\nSame here.\n\nAdd your unhappiness as comments.\n\n@@ +1074,2 @@\n>              }\n>  #endif\n\nIf you can write this function so it's not weird that would be nice too."}, {"time": "2012-02-29T03:22:24Z", "raw_text": "Review of attachment 601381:\n-----------------------------------------------------------------\n\nNothing more to add on top of Jeff's comments.", "id": 6101523, "bug_id": 674753, "author": "jacob.benoit.1@gmail.com", "count": 54, "text": "Comment on attachment 601381\nBug 674753 - Add support for loading apitrace explicitly on Android.\n\nReview of attachment 601381:\n-----------------------------------------------------------------\n\nNothing more to add on top of Jeff's comments.", "tags": [], "attachment_id": 601381, "creation_time": "2012-02-29T03:22:24Z", "is_private": false, "creator": "jacob.benoit.1@gmail.com"}, {"attachment_id": 601655, "raw_text": "", "time": "2012-02-29T17:56:39Z", "tags": [], "author": "gw@gwright.org.uk", "text": "Created attachment 601655\nFinal patch incorporating Jeff's suggestions.", "count": 55, "creator": "gw@gwright.org.uk", "is_private": false, "creation_time": "2012-02-29T17:56:39Z", "id": 6102929, "bug_id": 674753}, {"bug_id": 674753, "id": 6103748, "count": 56, "text": "Comment on attachment 601655\nFinal patch incorporating Jeff's suggestions.\n\nReview of attachment 601655:\n-----------------------------------------------------------------\n\nI can't see anything wrong here.", "author": "jacob.benoit.1@gmail.com", "raw_text": "Review of attachment 601655:\n-----------------------------------------------------------------\n\nI can't see anything wrong here.", "time": "2012-02-29T21:14:33Z", "is_private": false, "creation_time": "2012-02-29T21:14:33Z", "creator": "jacob.benoit.1@gmail.com", "tags": [], "attachment_id": 601655}, {"tags": [], "attachment_id": null, "creation_time": "2012-02-29T21:57:12Z", "is_private": false, "creator": "jacob.benoit.1@gmail.com", "raw_text": "Landed George's patch on Maple:\nhttp://hg.mozilla.org/projects/maple/\n\nLeaving open for the other patches and mozilla-central.", "time": "2012-02-29T21:57:12Z", "bug_id": 674753, "id": 6103891, "count": 57, "text": "Landed George's patch on Maple:\nhttp://hg.mozilla.org/projects/maple/\n\nLeaving open for the other patches and mozilla-central.", "author": "jacob.benoit.1@gmail.com"}, {"bug_id": 674753, "id": 6103893, "is_private": false, "creation_time": "2012-02-29T21:57:28Z", "creator": "jacob.benoit.1@gmail.com", "text": "I meant: http://hg.mozilla.org/projects/maple/rev/aa51129a3495", "count": 58, "author": "jacob.benoit.1@gmail.com", "tags": [], "time": "2012-02-29T21:57:28Z", "raw_text": "I meant: http://hg.mozilla.org/projects/maple/rev/aa51129a3495", "attachment_id": null}, {"time": "2012-02-29T22:06:29Z", "raw_text": "Can we land George' patch on m-c to reduce the maple/mc interdiff?", "count": 59, "text": "Can we land George' patch on m-c to reduce the maple/mc interdiff?", "author": "b56girard@gmail.com", "id": 6103922, "bug_id": 674753, "attachment_id": null, "tags": [], "creator": "b56girard@gmail.com", "creation_time": "2012-02-29T22:06:29Z", "is_private": false}, {"bug_id": 674753, "id": 6103939, "author": "jacob.benoit.1@gmail.com", "text": "Isn't that precisely going to introduce a merge conflict?", "count": 60, "raw_text": "Isn't that precisely going to introduce a merge conflict?", "time": "2012-02-29T22:10:20Z", "is_private": false, "creation_time": "2012-02-29T22:10:20Z", "creator": "jacob.benoit.1@gmail.com", "tags": [], "attachment_id": null}, {"is_private": false, "creation_time": "2012-02-29T23:25:32Z", "id": 6104244, "bug_id": 674753, "author": "b56girard@gmail.com", "text": "No, AFAIK hg will recognize this and handle it.", "count": 61, "creator": "b56girard@gmail.com", "tags": [], "attachment_id": null, "raw_text": "No, AFAIK hg will recognize this and handle it.", "time": "2012-02-29T23:25:32Z"}, {"is_private": false, "creation_time": "2012-03-05T02:46:31Z", "creator": "gw@gwright.org.uk", "tags": [], "attachment_id": 602791, "bug_id": 674753, "id": 6113413, "author": "gw@gwright.org.uk", "count": 62, "text": "Created attachment 602791\nfix static in LoadApitraceLibrary\n\nOops, forgot to ensure that the handle to the apitrace library is static. We never hit the fast return path in LoadApitraceLibrary().", "time": "2012-03-05T02:46:31Z", "raw_text": "Oops, forgot to ensure that the handle to the apitrace library is static. We never hit the fast return path in LoadApitraceLibrary()."}, {"tags": [], "raw_text": "Review of attachment 602791:\n-----------------------------------------------------------------\n\nI think one review will do for this patch :)", "attachment_id": 602791, "time": "2012-03-05T02:48:08Z", "creation_time": "2012-03-05T02:48:08Z", "is_private": false, "id": 6113415, "bug_id": 674753, "count": 63, "text": "Comment on attachment 602791\nfix static in LoadApitraceLibrary\n\nReview of attachment 602791:\n-----------------------------------------------------------------\n\nI think one review will do for this patch :)", "author": "jacob.benoit.1@gmail.com", "creator": "jacob.benoit.1@gmail.com"}, {"bug_id": 674753, "id": 6113422, "is_private": false, "creation_time": "2012-03-05T02:56:27Z", "creator": "jacob.benoit.1@gmail.com", "author": "jacob.benoit.1@gmail.com", "text": "http://hg.mozilla.org/projects/maple/rev/bad6d022d16d", "count": 64, "tags": [], "time": "2012-03-05T02:56:27Z", "attachment_id": null, "raw_text": "http://hg.mozilla.org/projects/maple/rev/bad6d022d16d"}, {"bug_id": 674753, "id": 6113424, "creation_time": "2012-03-05T02:59:05Z", "is_private": false, "creator": "jacob.benoit.1@gmail.com", "author": "jacob.benoit.1@gmail.com", "text": "http://hg.mozilla.org/integration/mozilla-inbound/rev/a708e1611e60\nhttp://hg.mozilla.org/integration/mozilla-inbound/rev/9d1489e65218\n\nKeep open! Don't set assignee.", "count": 65, "tags": [], "time": "2012-03-05T02:59:05Z", "attachment_id": null, "raw_text": "http://hg.mozilla.org/integration/mozilla-inbound/rev/a708e1611e60\nhttp://hg.mozilla.org/integration/mozilla-inbound/rev/9d1489e65218\n\nKeep open! Don't set assignee."}, {"raw_text": "https://hg.mozilla.org/mozilla-central/rev/a708e1611e60\nhttps://hg.mozilla.org/mozilla-central/rev/9d1489e65218", "attachment_id": null, "time": "2012-03-05T21:28:59Z", "tags": [], "count": 66, "text": "https://hg.mozilla.org/mozilla-central/rev/a708e1611e60\nhttps://hg.mozilla.org/mozilla-central/rev/9d1489e65218", "author": "mbrubeck@limpet.net", "creator": "mbrubeck@limpet.net", "creation_time": "2012-03-05T21:28:59Z", "is_private": false, "bug_id": 674753, "id": 6115505}]}}}