{"bugs": {"1644186": {"comments": [{"text": "The goal here is to implement the `ERROR_MESSAGE` resource from the actor side.\nThis is about replicating the current behavior, implemented in bug 1625905.\nBut instead of having a wrapper on the client side to morph the legacy WebConsoleActor methods (i.e. the legacy listener code),\nwe would implement an actor API matching ResourceWatcher API (i.e. watch and unwatch).\n\nThis would be about implementing a server side equivalent of this legacy listener code:\nhttps://searchfox.org/mozilla-central/source/devtools/shared/resources/legacy-listeners/error-messages.js\nIn a new server side module:\nhttps://searchfox.org/mozilla-central/source/devtools/server/actors/resources/error-messages.js\n\nThis module would typicaly look like this:\n```\nconst { TYPES } = require(\"devtools/server/actors/resources/index\");\n\nclass MyResourceWatcher {\n  /**\n   * Start watching for all ${MY_RESOURCE_TYPE} related to a given Target Actor.\n   * This will notify about existing ${MY_RESOURCE_TYPE}, but also the one created in future.\n   *\n   * @param TargetActor targetActor\n   *        The target actor from which we should observe console messages\n   * @param Object options\n   *        Dictionary object with following attributes:\n   *        - onAvailable: mandatory function\n   *          This will be called for each resource.\n   */\n  constructor(targetActor, { onAvailable }) {\n    // In most cases, we already have some helper class which helps observing one resource\n    // that we can spawn like this:\n    // Note that it may often be easier to merge such `MyResourceListener` into this `MyResourceWatcher` class!\n    const listener = new MyResourceListener(\n      targetActor.browsingContextID,\n      targetActor.window,\n      ...  /* whatever is useful for your observation */\n    );\n    \n    // Forward all future resources being observed to the upper layer calling this module,\n    // via `onAvailable` callback argument.\n    // I'm using EventEmitter API here, but the API may different,\n    // based on the platform API we have to use to observe the resource.\n    listener.on(\"one-of-my-resource-is-created\", resource => {\n      // We have to ensure that each resource object has a valid `resourceType` attribute\n      resource.resourceType = TYPES.MY_RESOURCE_TYPE;\n      onAvailable([resource]);\n    });\n    \n    // Also forward all resources which already exist when we are calling this method\n    // (if any exists)\n    const cachedResources = listener.getAllAlreadyExistingOrCachedResources();\n    for(const resource of cachedResources) {\n      resource.resourceType = TYPES.MY_RESOURCE_TYPE;\n    }\n    onAvailable(cachedResources);\n    \n    // Save the listener in order to destroy/stop watching later on.\n    this.listener = listener;\n  }\n\n  /**\n   * Stop watching for ${MY_RESOURCE_TYPE}.\n   */\n  destroy() {\n    if (this.listener) {\n      this.listener.destroy();\n    }\n  }\n}\nmodule.exports = MyResourceWatcher;\n```\n\nAn important goal here is to emit the exact same `resource` object that the legacy listener is passing to its `onAvailable` callback.\nSame attributes, same values, ...\n\nBug 1644185 could be used as a template. As it did this work for `PLATFORM_MESSAGE` resource type.\n\nThe main reason to do this is to be able to start listening to the resource before the page starts loading.\nThanks to the framework work done in bug 1620243, this `MyResourceWatcher` class will be instantiated before the page starts \nloading and possibly as early as the content process just started. \nThis wasn't the case with legacy actor APIs like `WebConsoleActor.startListeners`, `ThreadActor.attachThread`, ...\nWe were calling these methods too late, only after the frontend is notify about the existance of the target, so, late after the page started loading.\n\nYou will also have to register this new module in this registry:\nhttps://searchfox.org/mozilla-central/source/devtools/server/actors/resources/index.js\n* Add a new entry in `TYPES` object.\n* Register your new resource watcher module into `Resources` object.\n\nLast but not least, it is probably a good time to review the existing tests for this Resource:\nhttps://searchfox.org/mozilla-central/source/devtools/shared/resources/tests\nAnd ensure that it has a good coverage.\nYou would especially have to migrate all Client/Front tests, which were testing the backend behavior via `targetFront.getFront(\"myfront\")`.\nAll these tests will be removed, once we drop the legacy listeners. Because we are going to drop the server API that we no longer use.\nLike WebConsoleActor/Front.getCachedMessage(), WebConsoleActor/Front.startListeners(), ThreadActor/Front.sources(), ThreadActor/Front.new-source, ...", "author": "poirot.alex@gmail.com", "id": 14869901, "attachment_id": null, "is_private": false, "bug_id": 1644186, "count": 0, "creation_time": "2020-06-08T16:50:01Z", "raw_text": "The goal here is to implement the `ERROR_MESSAGE` resource from the actor side.\nThis is about replicating the current behavior, implemented in bug 1625905.\nBut instead of having a wrapper on the client side to morph the legacy WebConsoleActor methods (i.e. the legacy listener code),\nwe would implement an actor API matching ResourceWatcher API (i.e. watch and unwatch).\n\nThis would be about implementing a server side equivalent of this legacy listener code:\nhttps://searchfox.org/mozilla-central/source/devtools/shared/resources/legacy-listeners/error-messages.js\nIn a new server side module:\nhttps://searchfox.org/mozilla-central/source/devtools/server/actors/resources/error-messages.js\n\nThis module would typicaly look like this:\n```\nconst { TYPES } = require(\"devtools/server/actors/resources/index\");\n\nclass MyResourceWatcher {\n  /**\n   * Start watching for all ${MY_RESOURCE_TYPE} related to a given Target Actor.\n   * This will notify about existing ${MY_RESOURCE_TYPE}, but also the one created in future.\n   *\n   * @param TargetActor targetActor\n   *        The target actor from which we should observe console messages\n   * @param Object options\n   *        Dictionary object with following attributes:\n   *        - onAvailable: mandatory function\n   *          This will be called for each resource.\n   */\n  constructor(targetActor, { onAvailable }) {\n    // In most cases, we already have some helper class which helps observing one resource\n    // that we can spawn like this:\n    // Note that it may often be easier to merge such `MyResourceListener` into this `MyResourceWatcher` class!\n    const listener = new MyResourceListener(\n      targetActor.browsingContextID,\n      targetActor.window,\n      ...  /* whatever is useful for your observation */\n    );\n    \n    // Forward all future resources being observed to the upper layer calling this module,\n    // via `onAvailable` callback argument.\n    // I'm using EventEmitter API here, but the API may different,\n    // based on the platform API we have to use to observe the resource.\n    listener.on(\"one-of-my-resource-is-created\", resource => {\n      // We have to ensure that each resource object has a valid `resourceType` attribute\n      resource.resourceType = TYPES.MY_RESOURCE_TYPE;\n      onAvailable([resource]);\n    });\n    \n    // Also forward all resources which already exist when we are calling this method\n    // (if any exists)\n    const cachedResources = listener.getAllAlreadyExistingOrCachedResources();\n    for(const resource of cachedResources) {\n      resource.resourceType = TYPES.MY_RESOURCE_TYPE;\n    }\n    onAvailable(cachedResources);\n    \n    // Save the listener in order to destroy/stop watching later on.\n    this.listener = listener;\n  }\n\n  /**\n   * Stop watching for ${MY_RESOURCE_TYPE}.\n   */\n  destroy() {\n    if (this.listener) {\n      this.listener.destroy();\n    }\n  }\n}\nmodule.exports = MyResourceWatcher;\n```\n\nAn important goal here is to emit the exact same `resource` object that the legacy listener is passing to its `onAvailable` callback.\nSame attributes, same values, ...\n\nBug 1644185 could be used as a template. As it did this work for `PLATFORM_MESSAGE` resource type.\n\nThe main reason to do this is to be able to start listening to the resource before the page starts loading.\nThanks to the framework work done in bug 1620243, this `MyResourceWatcher` class will be instantiated before the page starts \nloading and possibly as early as the content process just started. \nThis wasn't the case with legacy actor APIs like `WebConsoleActor.startListeners`, `ThreadActor.attachThread`, ...\nWe were calling these methods too late, only after the frontend is notify about the existance of the target, so, late after the page started loading.\n\nYou will also have to register this new module in this registry:\nhttps://searchfox.org/mozilla-central/source/devtools/server/actors/resources/index.js\n* Add a new entry in `TYPES` object.\n* Register your new resource watcher module into `Resources` object.\n\nLast but not least, it is probably a good time to review the existing tests for this Resource:\nhttps://searchfox.org/mozilla-central/source/devtools/shared/resources/tests\nAnd ensure that it has a good coverage.\nYou would especially have to migrate all Client/Front tests, which were testing the backend behavior via `targetFront.getFront(\"myfront\")`.\nAll these tests will be removed, once we drop the legacy listeners. Because we are going to drop the server API that we no longer use.\nLike WebConsoleActor/Front.getCachedMessage(), WebConsoleActor/Front.startListeners(), ThreadActor/Front.sources(), ThreadActor/Front.new-source, ...", "time": "2020-06-08T16:50:01Z", "creator": "poirot.alex@gmail.com", "tags": []}, {"creation_time": "2020-06-11T06:22:51Z", "count": 1, "raw_text": "Tracking dt-fission-m2 bugs for Fission Nightly (M6c)", "creator": "cpeterson@mozilla.com", "time": "2020-06-11T06:22:51Z", "tags": [], "text": "Tracking dt-fission-m2 bugs for Fission Nightly (M6c)", "attachment_id": null, "id": 14875643, "author": "cpeterson@mozilla.com", "bug_id": 1644186, "is_private": false}, {"text": "Let's wait for Bug 1625910 to land before tackling that, so js errors and css warnings are distinct", "attachment_id": null, "author": "nchevobbe@mozilla.com", "id": 14878767, "bug_id": 1644186, "is_private": false, "creation_time": "2020-06-12T15:00:57Z", "count": 2, "raw_text": "Let's wait for Bug 1625910 to land before tackling that, so js errors and css warnings are distinct", "creator": "nchevobbe@mozilla.com", "time": "2020-06-12T15:00:57Z", "tags": []}, {"tags": [], "time": "2020-06-26T16:16:57Z", "creator": "nchevobbe@mozilla.com", "raw_text": "", "count": 3, "creation_time": "2020-06-26T16:16:57Z", "is_private": false, "bug_id": 1644186, "author": "nchevobbe@mozilla.com", "id": 14904133, "attachment_id": 9159738, "text": "Created attachment 9159738\nBug 1644186 - Add server support for Error messages resources. r=ochameau."}, {"text": "Created attachment 9159995\nBug 1644186 - Move helper functions to helper files. r=ochameau.\n\n\nFunctions to creates object actors were duplicated between error-messages\nand console-messages watchers, so we put them in helper files instead.\n\nDepends on D81356", "id": 14907756, "author": "nchevobbe@mozilla.com", "attachment_id": 9159995, "is_private": false, "bug_id": 1644186, "count": 4, "creation_time": "2020-06-29T08:16:34Z", "raw_text": "\nFunctions to creates object actors were duplicated between error-messages\nand console-messages watchers, so we put them in helper files instead.\n\nDepends on D81356", "time": "2020-06-29T08:16:34Z", "creator": "nchevobbe@mozilla.com", "tags": []}, {"tags": [], "time": "2020-07-01T10:07:56Z", "creator": "nchevobbe@mozilla.com", "raw_text": "\n\nDepends on D81490", "creation_time": "2020-07-01T10:07:56Z", "count": 5, "is_private": false, "bug_id": 1644186, "attachment_id": 9160616, "id": 14912266, "author": "nchevobbe@mozilla.com", "text": "Created attachment 9160616\nBug 1644186 - Add ResourceTransformers. r=ochameau.\n\n\n\nDepends on D81490"}, {"tags": [], "is_private": false, "bug_id": 1644186, "creator": "pulsebot@bots.tld", "time": "2020-07-03T15:44:05Z", "attachment_id": null, "raw_text": "Pushed by nchevobbe@mozilla.com:\nhttps://hg.mozilla.org/integration/autoland/rev/19bc3a5c0122\nMove helper functions to helper files. r=ochameau.\nhttps://hg.mozilla.org/integration/autoland/rev/6c15271350bd\nAdd ResourceTransformers. r=ochameau.", "author": "pulsebot@bots.tld", "id": 14917133, "creation_time": "2020-07-03T15:44:05Z", "count": 6, "text": "Pushed by nchevobbe@mozilla.com:\nhttps://hg.mozilla.org/integration/autoland/rev/19bc3a5c0122\nMove helper functions to helper files. r=ochameau.\nhttps://hg.mozilla.org/integration/autoland/rev/6c15271350bd\nAdd ResourceTransformers. r=ochameau."}, {"count": 7, "creation_time": "2020-07-03T21:55:28Z", "raw_text": "https://hg.mozilla.org/mozilla-central/rev/19bc3a5c0122\nhttps://hg.mozilla.org/mozilla-central/rev/6c15271350bd", "time": "2020-07-03T21:55:28Z", "creator": "dluca@mozilla.com", "tags": ["bugherder"], "text": "https://hg.mozilla.org/mozilla-central/rev/19bc3a5c0122\nhttps://hg.mozilla.org/mozilla-central/rev/6c15271350bd", "author": "dluca@mozilla.com", "id": 14917600, "attachment_id": null, "is_private": false, "bug_id": 1644186}, {"raw_text": "Pushed by nchevobbe@mozilla.com:\nhttps://hg.mozilla.org/integration/autoland/rev/162bc74a2c75\nAdd server support for Error messages resources. r=ochameau.", "count": 8, "creation_time": "2020-07-09T09:31:31Z", "tags": [], "creator": "pulsebot@bots.tld", "time": "2020-07-09T09:31:31Z", "id": 14927118, "author": "pulsebot@bots.tld", "attachment_id": null, "text": "Pushed by nchevobbe@mozilla.com:\nhttps://hg.mozilla.org/integration/autoland/rev/162bc74a2c75\nAdd server support for Error messages resources. r=ochameau.", "is_private": false, "bug_id": 1644186}, {"raw_text": "Backed out for perma failures.\n\nPush with failures: https://treeherder.mozilla.org/#/jobs?repo=autoland&resultStatus=pending%2Crunning%2Csuccess%2Ctestfailed%2Cbusted%2Cexception&searchStr=linux%2C18.04%2Cx64%2Cdebug%2Cmochitests%2Ctest-linux1804-64%2Fdebug-mochitest-devtools-chrome-e10s-11%2Cm%28dt11%29&revision=162bc74a2c75c03ab53674f5f118ae4f3e7afa34&selectedTaskRun=Sg5vaf80Q8iUbHIu1Jp5Yg.0\n\nLog: https://treeherder.mozilla.org/logviewer.html#/jobs?job_id=309124035&repo=autoland&lineNumber=11165\n\nBackout: https://hg.mozilla.org/integration/autoland/rev/4b6aac3c7b427cf85ad574329a62d23270222d33", "count": 9, "creation_time": "2020-07-09T12:23:32Z", "tags": [], "creator": "rmaries@mozilla.com", "time": "2020-07-09T12:23:32Z", "id": 14927339, "author": "rmaries@mozilla.com", "attachment_id": null, "text": "Backed out for perma failures.\n\nPush with failures: https://treeherder.mozilla.org/#/jobs?repo=autoland&resultStatus=pending%2Crunning%2Csuccess%2Ctestfailed%2Cbusted%2Cexception&searchStr=linux%2C18.04%2Cx64%2Cdebug%2Cmochitests%2Ctest-linux1804-64%2Fdebug-mochitest-devtools-chrome-e10s-11%2Cm%28dt11%29&revision=162bc74a2c75c03ab53674f5f118ae4f3e7afa34&selectedTaskRun=Sg5vaf80Q8iUbHIu1Jp5Yg.0\n\nLog: https://treeherder.mozilla.org/logviewer.html#/jobs?job_id=309124035&repo=autoland&lineNumber=11165\n\nBackout: https://hg.mozilla.org/integration/autoland/rev/4b6aac3c7b427cf85ad574329a62d23270222d33", "is_private": false, "bug_id": 1644186}, {"is_private": false, "bug_id": 1644186, "author": "nchevobbe@mozilla.com", "id": 14927368, "attachment_id": null, "text": "ah, sorry, forgot to update something when I disabled the trait for error resources. I updated the patch and the test is fine now", "tags": [], "time": "2020-07-09T12:41:20Z", "creator": "nchevobbe@mozilla.com", "raw_text": "ah, sorry, forgot to update something when I disabled the trait for error resources. I updated the patch and the test is fine now", "count": 10, "creation_time": "2020-07-09T12:41:20Z"}, {"creator": "pulsebot@bots.tld", "time": "2020-07-09T12:58:49Z", "tags": [], "count": 11, "creation_time": "2020-07-09T12:58:49Z", "raw_text": "Pushed by nchevobbe@mozilla.com:\nhttps://hg.mozilla.org/integration/autoland/rev/aebce691bd57\nAdd server support for Error messages resources. r=ochameau.", "bug_id": 1644186, "is_private": false, "text": "Pushed by nchevobbe@mozilla.com:\nhttps://hg.mozilla.org/integration/autoland/rev/aebce691bd57\nAdd server support for Error messages resources. r=ochameau.", "id": 14927396, "author": "pulsebot@bots.tld", "attachment_id": null}, {"bug_id": 1644186, "is_private": false, "attachment_id": null, "author": "abutkovits@mozilla.com", "id": 14928581, "text": "https://hg.mozilla.org/mozilla-central/rev/aebce691bd57", "tags": ["bugherder"], "creator": "abutkovits@mozilla.com", "time": "2020-07-09T21:42:17Z", "raw_text": "https://hg.mozilla.org/mozilla-central/rev/aebce691bd57", "creation_time": "2020-07-09T21:42:17Z", "count": 12}]}}, "comments": {}}