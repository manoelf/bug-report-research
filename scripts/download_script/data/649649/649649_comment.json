{"comments": {}, "bugs": {"649649": {"comments": [{"raw_text": "User-Agent:       Mozilla/5.0 (Windows NT 6.1; WOW64; rv:2.0) Gecko/20100101 Firefox/4.0\nBuild Identifier: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:2.0) Gecko/20100101 Firefox/4.0\n\nSo far i have only found this affects statusbarex, specifically the upstream/downstream bandwidth counter on the addonbar, only when using a tab heavy session (more then 50) and reloading all of them (progressively or not).\n\nWithin a couple of refresh cycles the counter drops to 00.00 on both upstream and downstream and sticks there, sometimes it might work again, and dropping firefox back to windowed mode sometimes makes it work again.\n\nDisabling methodjit on content seems to resolve the issue.\n\nReproducible: Always\n\nSteps to Reproduce:\n1. install statusbarex 0.3.1\n2. open a fair amount of tabs\n3. reload the tabs all at once (i used load tabs progressively set to 15)\nActual Results:  \nwithin a few reload cycles the counter stops updating entirely\nsometimes it starts working again by just sitting on a loading page or by resizing the window\n\nExpected Results:  \nwork as expected?\n\n\n\nthis wasn't a problem with 0.22 in firefox 3.x and works fine with methodjit disabled on content in 4.x", "is_private": false, "tags": [], "creation_time": "2011-04-13T15:49:32Z", "attachment_id": null, "id": 5406573, "text": "User-Agent:       Mozilla/5.0 (Windows NT 6.1; WOW64; rv:2.0) Gecko/20100101 Firefox/4.0\nBuild Identifier: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:2.0) Gecko/20100101 Firefox/4.0\n\nSo far i have only found this affects statusbarex, specifically the upstream/downstream bandwidth counter on the addonbar, only when using a tab heavy session (more then 50) and reloading all of them (progressively or not).\n\nWithin a couple of refresh cycles the counter drops to 00.00 on both upstream and downstream and sticks there, sometimes it might work again, and dropping firefox back to windowed mode sometimes makes it work again.\n\nDisabling methodjit on content seems to resolve the issue.\n\nReproducible: Always\n\nSteps to Reproduce:\n1. install statusbarex 0.3.1\n2. open a fair amount of tabs\n3. reload the tabs all at once (i used load tabs progressively set to 15)\nActual Results:  \nwithin a few reload cycles the counter stops updating entirely\nsometimes it starts working again by just sitting on a loading page or by resizing the window\n\nExpected Results:  \nwork as expected?\n\n\n\nthis wasn't a problem with 0.22 in firefox 3.x and works fine with methodjit disabled on content in 4.x", "count": 0, "bug_id": 649649, "time": "2011-04-13T15:49:32Z", "author": "danialhorton@gmail.com", "creator": "danialhorton@gmail.com"}, {"count": 1, "raw_text": "Does this extension use a JS component?  I believe those might count as \"content\"....", "bug_id": 649649, "is_private": false, "tags": [], "time": "2011-04-13T19:04:42Z", "creation_time": "2011-04-13T19:04:42Z", "author": "bzbarsky@mit.edu", "id": 5407235, "attachment_id": null, "creator": "bzbarsky@mit.edu", "text": "Does this extension use a JS component?  I believe those might count as \"content\"...."}, {"count": 2, "raw_text": "\"content\" depends on the context that runs the code, not on the location of the code or anything sensible like that.  If the JS component's code executes nested beneath content code (say, because it receives an observer service notification or something), that would do it.", "bug_id": 649649, "is_private": false, "tags": [], "time": "2011-04-14T00:05:20Z", "creation_time": "2011-04-14T00:05:20Z", "author": "jwalden@mit.edu", "attachment_id": null, "id": 5408282, "text": "\"content\" depends on the context that runs the code, not on the location of the code or anything sensible like that.  If the JS component's code executes nested beneath content code (say, because it receives an observer service notification or something), that would do it.", "creator": "jwalden@mit.edu"}, {"time": "2011-04-14T00:12:31Z", "count": 3, "bug_id": 649649, "author": "shaver@mozilla.org", "creator": "shaver@mozilla.org", "is_private": false, "tags": [], "raw_text": "When I wrote the code for the tracer content and chrome prefs, chrome meant \"anything that started with chrome:\" and content meant \"anything else\".  content therefore included JS components.\n\nJeff: are you saying that the mjit pref does something different?", "id": 5408301, "attachment_id": null, "text": "When I wrote the code for the tracer content and chrome prefs, chrome meant \"anything that started with chrome:\" and content meant \"anything else\".  content therefore included JS components.\n\nJeff: are you saying that the mjit pref does something different?", "creation_time": "2011-04-14T00:12:31Z"}, {"creation_time": "2011-04-14T04:06:03Z", "author": "danialhorton@gmail.com", "attachment_id": null, "id": 5408703, "text": "does *\\chrome\\content\\main.js count as a js component\n\nIts interesting that only the up/down counter dies, the memory use and cpu use counters remain active.", "creator": "danialhorton@gmail.com", "count": 4, "raw_text": "does *\\chrome\\content\\main.js count as a js component\n\nIts interesting that only the up/down counter dies, the memory use and cpu use counters remain active.", "bug_id": 649649, "is_private": false, "tags": [], "time": "2011-04-14T04:06:03Z"}, {"author": "jwalden@mit.edu", "creator": "jwalden@mit.edu", "count": 5, "bug_id": 649649, "time": "2011-04-15T15:08:02Z", "creation_time": "2011-04-15T15:08:02Z", "text": "(In reply to comment #3)\n\nThat doesn't jibe with my experiences.  I've definitely seen FoxyProxy code being jitted when invoked through the operations of content, from a web page's JSContext, and I don't think it was just component code that could be invoked that way.  But it's been awhile since I was debugging and saw it happen, so it's possible that's changed (although nsJSEnvironment.cpp appears to implement my recollection), or I was misinterpreting things.", "id": 5411874, "attachment_id": null, "raw_text": "(In reply to comment #3)\n\nThat doesn't jibe with my experiences.  I've definitely seen FoxyProxy code being jitted when invoked through the operations of content, from a web page's JSContext, and I don't think it was just component code that could be invoked that way.  But it's been awhile since I was debugging and saw it happen, so it's possible that's changed (although nsJSEnvironment.cpp appears to implement my recollection), or I was misinterpreting things.", "tags": [], "is_private": false}]}}}