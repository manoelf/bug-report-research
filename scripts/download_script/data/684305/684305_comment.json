{"bugs": {"684305": {"comments": [{"raw_text": "As identified in bug 683631, jQuery can access the .className of DOM objects a lot (this is biased by the selectors which Dromaeo uses when testing jQuery, but this still seems a reasonable position).\n\n<div id=\"fubar\"></div>\n<script>\n\nA) var div = document.getElementById(\"fubar\");\nB) var div = {className:\"hello!\"};\n\nvar start = new Date;\nfor (var i = 0; i < 5000000; i++)\n  div.className;\nalert(new Date - start);\n\n</script>\n\nTimes:    A)   B)\n\nFx6:      366  42\nTI:       458  20\nSafari:   115\nChrome:   220\nOpera:    1400\n\nI'd like to get A) to as close to 20ms as reasonable.  This means being able to do this access efficiently while staying in jitcode.   Mostly though this is helpful for me to look into while understanding how our DOM works and what larger things need to change for this to be possible.", "attachment_id": null, "id": 5696930, "creator": "bhackett1024@gmail.com", "is_private": false, "tags": [], "time": "2011-09-02T18:36:03Z", "text": "As identified in bug 683631, jQuery can access the .className of DOM objects a lot (this is biased by the selectors which Dromaeo uses when testing jQuery, but this still seems a reasonable position).\n\n<div id=\"fubar\"></div>\n<script>\n\nA) var div = document.getElementById(\"fubar\");\nB) var div = {className:\"hello!\"};\n\nvar start = new Date;\nfor (var i = 0; i < 5000000; i++)\n  div.className;\nalert(new Date - start);\n\n</script>\n\nTimes:    A)   B)\n\nFx6:      366  42\nTI:       458  20\nSafari:   115\nChrome:   220\nOpera:    1400\n\nI'd like to get A) to as close to 20ms as reasonable.  This means being able to do this access efficiently while staying in jitcode.   Mostly though this is helpful for me to look into while understanding how our DOM works and what larger things need to change for this to be possible.", "author": "bhackett1024@gmail.com", "creation_time": "2011-09-02T18:36:03Z", "count": 0, "bug_id": 684305}, {"author": "bhackett1024@gmail.com", "creation_time": "2011-09-13T16:47:56Z", "time": "2011-09-13T16:47:56Z", "tags": [], "bug_id": 684305, "text": "With the getter PIC stuff on the JM branch, column A) for TI is 210.\n\nI made a mistake with the original testcase, though.  Getting the .className of an element with an empty name takes a fast path and avoids XPCOM string marshaling overhead.  Revised numbers with <div id=\"fubar\" class=\"what\"></div>:\n\nFx6:     610\nTI:      415\nSafari:  207\nChrome:  235\nOpera:   2005", "creator": "bhackett1024@gmail.com", "is_private": false, "count": 1, "id": 5715566, "attachment_id": null, "raw_text": "With the getter PIC stuff on the JM branch, column A) for TI is 210.\n\nI made a mistake with the original testcase, though.  Getting the .className of an element with an empty name takes a fast path and avoids XPCOM string marshaling overhead.  Revised numbers with <div id=\"fubar\" class=\"what\"></div>:\n\nFx6:     610\nTI:      415\nSafari:  207\nChrome:  235\nOpera:   2005"}, {"author": "bzbarsky@mit.edu", "creation_time": "2011-09-13T17:41:24Z", "time": "2011-09-13T17:41:24Z", "tags": [], "bug_id": 684305, "text": "Sounds pretty good.\n\nHow do the numbers look on fx6 if you disable JM and jitprofiling (forcing the loop to run in TM), on your hardware?", "creator": "bzbarsky@mit.edu", "is_private": false, "count": 2, "id": 5715669, "attachment_id": null, "raw_text": "Sounds pretty good.\n\nHow do the numbers look on fx6 if you disable JM and jitprofiling (forcing the loop to run in TM), on your hardware?"}, {"creator": "bhackett1024@gmail.com", "is_private": false, "count": 3, "author": "bhackett1024@gmail.com", "creation_time": "2011-09-13T18:41:35Z", "tags": [], "time": "2011-09-13T18:41:35Z", "bug_id": 684305, "text": "With the original testcase, I get 240.  With the comment 1 modification, I get 510.", "attachment_id": null, "raw_text": "With the original testcase, I get 240.  With the comment 1 modification, I get 510.", "id": 5715763}, {"bug_id": 684305, "tags": [], "time": "2011-09-13T23:17:01Z", "text": "OK, great.  Sounds like I should do some profiling on the testcase from the xpconnect/xpcom side once bug 557358 lands!", "author": "bzbarsky@mit.edu", "creation_time": "2011-09-13T23:17:01Z", "count": 4, "creator": "bzbarsky@mit.edu", "is_private": false, "id": 5716224, "raw_text": "OK, great.  Sounds like I should do some profiling on the testcase from the xpconnect/xpcom side once bug 557358 lands!", "attachment_id": null}, {"author": "bzbarsky@mit.edu", "creation_time": "2011-12-22T07:09:03Z", "time": "2011-12-22T07:09:03Z", "tags": [], "bug_id": 684305, "text": "OK.  So the profile now generally looks like this:\n\n17% mjit code\n30.6% self time in nsIDOMHTMLElement_GetClassName.  I believe that that unwrapping got\n      inlined into that method.\n15% converting the XPCOM string return value to a jsval (XPCStringConvert::ReadableToJSval\n    and self time in xpc_qsStringToJsval).\n5% is the className getter itself (call overhead, mostly)\n24% under GetAttr (over half of this is the SetLength on the return-value string).\n\nSo it's the usual story: our string situation sucks and unwrapping is slow.  :(", "creator": "bzbarsky@mit.edu", "is_private": false, "count": 5, "id": 5934647, "attachment_id": null, "raw_text": "OK.  So the profile now generally looks like this:\n\n17% mjit code\n30.6% self time in nsIDOMHTMLElement_GetClassName.  I believe that that unwrapping got\n      inlined into that method.\n15% converting the XPCOM string return value to a jsval (XPCStringConvert::ReadableToJSval\n    and self time in xpc_qsStringToJsval).\n5% is the className getter itself (call overhead, mostly)\n24% under GetAttr (over half of this is the SetLength on the return-value string).\n\nSo it's the usual story: our string situation sucks and unwrapping is slow.  :("}, {"id": 8456650, "raw_text": "On this testcase, I see the following on my hardware:\n\nFx6:     400\nSafari:  116\nChrome:  100\nOpera:   1544\nFx27:    182\n\nA current profile has 45% under Element::GetAttr, 18% under NonVoidStringToJsval, 12% under nsAString_internal::Finalize, 15% self time in get_className, 10% jitcode.", "attachment_id": 8380880, "bug_id": 684305, "tags": [], "time": "2014-02-24T21:21:37Z", "text": "Created attachment 8380880\nTestcase modified per comment 1\n\nOn this testcase, I see the following on my hardware:\n\nFx6:     400\nSafari:  116\nChrome:  100\nOpera:   1544\nFx27:    182\n\nA current profile has 45% under Element::GetAttr, 18% under NonVoidStringToJsval, 12% under nsAString_internal::Finalize, 15% self time in get_className, 10% jitcode.", "author": "bzbarsky@mit.edu", "creation_time": "2014-02-24T21:21:37Z", "count": 6, "creator": "bzbarsky@mit.edu", "is_private": false}, {"creation_time": "2014-02-24T21:29:34Z", "author": "bzbarsky@mit.edu", "text": "With the changes in bug 976272 (just the DOMString bit, not the [Pure] bit) we're at 95 on that testcase.  jitcode is now 25% of the time, the C++ getter is about 30%, and the rest is binding code.\n\nNote that this is with a cache hit on the one-slot cache, though...  If I change the testcase to get the classname of two nodes in alternation, we go back to being 2x slower than Chrome (though Chrome ends up about 3x slower, not 2x slower; we just end up 6x slower).", "bug_id": 684305, "time": "2014-02-24T21:29:34Z", "tags": [], "is_private": false, "creator": "bzbarsky@mit.edu", "count": 7, "id": 8456689, "attachment_id": null, "raw_text": "With the changes in bug 976272 (just the DOMString bit, not the [Pure] bit) we're at 95 on that testcase.  jitcode is now 25% of the time, the C++ getter is about 30%, and the rest is binding code.\n\nNote that this is with a cache hit on the one-slot cache, though...  If I change the testcase to get the classname of two nodes in alternation, we go back to being 2x slower than Chrome (though Chrome ends up about 3x slower, not 2x slower; we just end up 6x slower)."}]}}, "comments": {}}