{"bugs": {"1637179": {"comments": [{"id": 14813599, "author": "kaie@kuix.de", "attachment_id": null, "text": "Very soon we must decide what properties we should use for new OpenPGP keys by default:\n\n* expire or not expire? If expire, how long is default validity?\n\n* RSA or ECC? If RSA, 3072 or 4096?\n\nThere are good arguments for all choices, so it isn't easy to make that decision.\n\nI'd prefer an expiration, but suggest to use a longer expiration, for example 3 years.\nWe could use an RSA 3072 key for wider compatibility.", "is_private": false, "bug_id": 1637179, "raw_text": "Very soon we must decide what properties we should use for new OpenPGP keys by default:\n\n* expire or not expire? If expire, how long is default validity?\n\n* RSA or ECC? If RSA, 3072 or 4096?\n\nThere are good arguments for all choices, so it isn't easy to make that decision.\n\nI'd prefer an expiration, but suggest to use a longer expiration, for example 3 years.\nWe could use an RSA 3072 key for wider compatibility.", "count": 0, "creation_time": "2020-05-12T08:20:53Z", "tags": [], "creator": "kaie@kuix.de", "time": "2020-05-12T08:20:53Z"}, {"is_private": false, "bug_id": 1637179, "text": "It's not clear to me there is true value in expiry, except for if the encryption used in the future gets broken . \nAssuming you still have the key once it's about to expire it should be possible to update the key as needed in the future.\n\nWhat would be a concern for normal users that would cause them to want to have an expiring key?", "id": 14813831, "author": "mkmelin+mozilla@iki.fi", "attachment_id": null, "time": "2020-05-12T11:39:16Z", "creator": "mkmelin+mozilla@iki.fi", "tags": [], "count": 1, "creation_time": "2020-05-12T11:39:16Z", "raw_text": "It's not clear to me there is true value in expiry, except for if the encryption used in the future gets broken . \nAssuming you still have the key once it's about to expire it should be possible to update the key as needed in the future.\n\nWhat would be a concern for normal users that would cause them to want to have an expiring key?"}, {"is_private": false, "bug_id": 1637179, "text": "(In reply to Magnus Melin [:mkmelin] from comment #1)\n> It's not clear to me there is true value in expiry, except for if the encryption used in the future gets broken . \n> Assuming you still have the key once it's about to expire it should be possible to update the key as needed in the future.\n> \n> What would be a concern for normal users that would cause them to want to have an expiring key?\n\nAn expiring OpenPGP key saves yourself from trouble and weak security\nin the future.\n\nA majority of people will probably NOT take much care with their key,\ndon't have a backup, and will lose the secret key eventually.\n\nEven if you lose your secret key, other people can still use your public\nkey to send you encrypted email. And they will!\n\nLast year an insurance company sent important documents to me by email.\nAs a complete surprise, they encrypted the email with OpenPGP!\nI had never told them to use encrypted email!\n\nThey probably had discovered my personal key on a keyserver.\n(And if you have a non-expiring key, chances are that your key will\nbe listed somewhere on the web, in a directory, or saved in someone's\nkeyring, even many years later.)\n\nGiven this was a big insurance company, how do you resolve that\nsituation? The agent probably didn't control encryption, likely it\nwas an automated system.\n\nEven if there is a chance to convince other people to change their\nencryption setup, it's a hassle. They might have trouble identifying\nyour old key and have difficult to delete it. And unless their software\nhas a built in mechanism to blacklist a key, they could simply import\nthe key again on the next occassion, when searching for your key.\n\nI still had a copy of my own secret key, but it was an old key that I\nhaven't used in a long time. I no longer remembered the passphrase for\nthat old key!\n\nHaving an expiration on a key is an insurance that eventually, this\nkey will stop causing you trouble in the future, if you mess up and\nhaven't kept a usable copy of your secret key.\n\nAnother good reason is the security level of the key material in a key,\nor the availability of software that can work with the key algorithm\nthat was used for the key.\n\nMy old key was from 2003, it used a pair of DSA 1024 and ElGamal 2048.\nThat's probably no longer a good choice today, so it makes sense to stop\nusing it eventually.\n\nAn expiring key can be considered a hassle. If you don't extend it ahead\nof time, and if you don't distribute it to your correspondents ahead of\ntime, then your correspondents will no longer be able to use it after\nexpiry.\n\nI think that Thunderbird should implement the following assistance to\navoid that issue:\n\n* remind users to extend their own key well ahead of time, e.g. 3 months in advance\n\n* we can autmoatically include the updated key in openpgp email we sent\n\n* when receiving email that contains an openpgp key, we should have some smart automatica beahvior to refresh the incoming key.  While usually, we shouldn't import a new key without the user's feedback, it seems fine to automatically refresh keys that the user already has.  In other words, on receiving an email with a key, we should scan the key. If the key is already present (same key material), but the key contains a refreshed expiry date (this is transported as an additional signed attribute that can be verified to be legitimately done by the key owner), then we can autmatically update the stored key to include the new expiration date.", "id": 14816263, "author": "kaie@kuix.de", "attachment_id": null, "creator": "kaie@kuix.de", "time": "2020-05-13T09:17:56Z", "tags": [], "count": 2, "creation_time": "2020-05-13T09:17:56Z", "raw_text": "(In reply to Magnus Melin [:mkmelin] from comment #1)\n> It's not clear to me there is true value in expiry, except for if the encryption used in the future gets broken . \n> Assuming you still have the key once it's about to expire it should be possible to update the key as needed in the future.\n> \n> What would be a concern for normal users that would cause them to want to have an expiring key?\n\nAn expiring OpenPGP key saves yourself from trouble and weak security\nin the future.\n\nA majority of people will probably NOT take much care with their key,\ndon't have a backup, and will lose the secret key eventually.\n\nEven if you lose your secret key, other people can still use your public\nkey to send you encrypted email. And they will!\n\nLast year an insurance company sent important documents to me by email.\nAs a complete surprise, they encrypted the email with OpenPGP!\nI had never told them to use encrypted email!\n\nThey probably had discovered my personal key on a keyserver.\n(And if you have a non-expiring key, chances are that your key will\nbe listed somewhere on the web, in a directory, or saved in someone's\nkeyring, even many years later.)\n\nGiven this was a big insurance company, how do you resolve that\nsituation? The agent probably didn't control encryption, likely it\nwas an automated system.\n\nEven if there is a chance to convince other people to change their\nencryption setup, it's a hassle. They might have trouble identifying\nyour old key and have difficult to delete it. And unless their software\nhas a built in mechanism to blacklist a key, they could simply import\nthe key again on the next occassion, when searching for your key.\n\nI still had a copy of my own secret key, but it was an old key that I\nhaven't used in a long time. I no longer remembered the passphrase for\nthat old key!\n\nHaving an expiration on a key is an insurance that eventually, this\nkey will stop causing you trouble in the future, if you mess up and\nhaven't kept a usable copy of your secret key.\n\nAnother good reason is the security level of the key material in a key,\nor the availability of software that can work with the key algorithm\nthat was used for the key.\n\nMy old key was from 2003, it used a pair of DSA 1024 and ElGamal 2048.\nThat's probably no longer a good choice today, so it makes sense to stop\nusing it eventually.\n\nAn expiring key can be considered a hassle. If you don't extend it ahead\nof time, and if you don't distribute it to your correspondents ahead of\ntime, then your correspondents will no longer be able to use it after\nexpiry.\n\nI think that Thunderbird should implement the following assistance to\navoid that issue:\n\n* remind users to extend their own key well ahead of time, e.g. 3 months in advance\n\n* we can autmoatically include the updated key in openpgp email we sent\n\n* when receiving email that contains an openpgp key, we should have some smart automatica beahvior to refresh the incoming key.  While usually, we shouldn't import a new key without the user's feedback, it seems fine to automatically refresh keys that the user already has.  In other words, on receiving an email with a key, we should scan the key. If the key is already present (same key material), but the key contains a refreshed expiry date (this is transported as an additional signed attribute that can be verified to be legitimately done by the key owner), then we can autmatically update the stored key to include the new expiration date."}, {"attachment_id": null, "author": "bugzilla0248@fernmeldung.de", "id": 14908856, "text": "(In reply to Kai Engert (:KaiE:) from comment #0)\n> There are good arguments for all choices, so it isn't easy to make that decision.\n\nSo true. It can make one crazy.\n\n(In reply to Kai Engert (:KaiE:) from comment #0)\n> I'd prefer an expiration, but suggest to use a longer expiration, for example 3 years.\n\nI can honestly say that I shrugged here. 3 years is really _not_ long for me. More a good moderate time.\nLong for me is 20 years. 10 years is at least _not short_ for me, a reasonable time.\nShort for me is 1 year. 3 years is at least _not long_ for me.\nI would suggest, in any case a key should expire in 10 years and it's expiry date should _not_ be extendable over that time.\nBecause: Who can really trust such an old key? In fact, not even the owner himself, I think. Who can trust that the secret key was never stolen or otherways compromised. Who knows if the owner has still access to the private key on the other side.\n\n(In reply to Kai Engert (:KaiE:) from comment #2)\n> A majority of people will probably NOT take much care with their key,\n> don't have a backup, and will lose the secret key eventually.\n\n+++ Yes, and therefore, they will also _create_ regularly _new_ keys. And after years, You could have dozens of keys of a user, all without expiry time. Or the user changed his email address and generates new keys for the new mail address and will never the old address (or lost the DNS domain and therefore the corresponding mail addresses). So, at least after 10 years a key should expire, I think.\nI think, an argument for a short expiry like 1 or 2 years (or I could live also with 3 years) time would be the _key trust_ again. I think the whole complex mechanism of key verification vitally needs a _revocation_ mechanism, without that, the original trust could transfer in an attack vector if the key was stolen within some years and could be misused to fake authenticity then, and the receiver really thinks: \"Well, that must be true, I _verified_ this key!\". Better would be if the key already would expire every 3 years and a new key must be _re_verified, or taken as _untrusted_, which is untrusted like clear text mail, but better, because at least it is _encrypted_.\nBut this revocation mechanism is so complicated and boring.\nI can give real honest user feedback for the revocation mechanism: Couple of weeks ago I created a new mail address (I regulary create mail addresses which are communication partner specific, so I have not to care about possible spam or stolen mail addresses, I could delete the mail alias again and even inform the partner, that his customer database well could be stolen). Since the partner (german data privacy agency) also can use OpenPGP(Applause!) I also wanted to use that, so I created a new key with TB68+Enigmail. Key generation was fast, that was nice. Then, there came a big warning: \"You are urged to create revocation certificate, make a backup, protect it with a password, store it safe\" and so on, I thought \"blah blah\", really _not_, and **clicked it away**. I _really_ found this so **boring** and **complicated**, just for a theoretically possible case, and my communication partner would rarely ever get knowledge of this revocation certificate. Maybe I will only communicate with them only in maybe 8 years again? Will I have my trusted computer then still? Who knows?\nAnd, I guess am pretty security aware and have some good knowledge of e2eee (and over 15 years IT admin). But what about a rather normal user who really does not understand this revocation thing at all and normally doesn't care to send unencrypted because he has _nothing to hide_? I guess this revocation thing is really not usable, at least without a central server where You can upload them and clients regulary lookup the keys. Then You have privacy issue again etc. etc.\nDrawback of an expiry date of course is that like your insurance company do not find a valid key, they might send just unencrypted.\nI could image expiry time of 3 years, with automatically generation of a new replacement key in the background without user interaction 6 months before expiry and automatically switching to attach the new key at outgoing mails (propagation), maybe even signed with the old key.", "is_private": false, "bug_id": 1637179, "raw_text": "(In reply to Kai Engert (:KaiE:) from comment #0)\n> There are good arguments for all choices, so it isn't easy to make that decision.\n\nSo true. It can make one crazy.\n\n(In reply to Kai Engert (:KaiE:) from comment #0)\n> I'd prefer an expiration, but suggest to use a longer expiration, for example 3 years.\n\nI can honestly say that I shrugged here. 3 years is really _not_ long for me. More a good moderate time.\nLong for me is 20 years. 10 years is at least _not short_ for me, a reasonable time.\nShort for me is 1 year. 3 years is at least _not long_ for me.\nI would suggest, in any case a key should expire in 10 years and it's expiry date should _not_ be extendable over that time.\nBecause: Who can really trust such an old key? In fact, not even the owner himself, I think. Who can trust that the secret key was never stolen or otherways compromised. Who knows if the owner has still access to the private key on the other side.\n\n(In reply to Kai Engert (:KaiE:) from comment #2)\n> A majority of people will probably NOT take much care with their key,\n> don't have a backup, and will lose the secret key eventually.\n\n+++ Yes, and therefore, they will also _create_ regularly _new_ keys. And after years, You could have dozens of keys of a user, all without expiry time. Or the user changed his email address and generates new keys for the new mail address and will never the old address (or lost the DNS domain and therefore the corresponding mail addresses). So, at least after 10 years a key should expire, I think.\nI think, an argument for a short expiry like 1 or 2 years (or I could live also with 3 years) time would be the _key trust_ again. I think the whole complex mechanism of key verification vitally needs a _revocation_ mechanism, without that, the original trust could transfer in an attack vector if the key was stolen within some years and could be misused to fake authenticity then, and the receiver really thinks: \"Well, that must be true, I _verified_ this key!\". Better would be if the key already would expire every 3 years and a new key must be _re_verified, or taken as _untrusted_, which is untrusted like clear text mail, but better, because at least it is _encrypted_.\nBut this revocation mechanism is so complicated and boring.\nI can give real honest user feedback for the revocation mechanism: Couple of weeks ago I created a new mail address (I regulary create mail addresses which are communication partner specific, so I have not to care about possible spam or stolen mail addresses, I could delete the mail alias again and even inform the partner, that his customer database well could be stolen). Since the partner (german data privacy agency) also can use OpenPGP(Applause!) I also wanted to use that, so I created a new key with TB68+Enigmail. Key generation was fast, that was nice. Then, there came a big warning: \"You are urged to create revocation certificate, make a backup, protect it with a password, store it safe\" and so on, I thought \"blah blah\", really _not_, and **clicked it away**. I _really_ found this so **boring** and **complicated**, just for a theoretically possible case, and my communication partner would rarely ever get knowledge of this revocation certificate. Maybe I will only communicate with them only in maybe 8 years again? Will I have my trusted computer then still? Who knows?\nAnd, I guess am pretty security aware and have some good knowledge of e2eee (and over 15 years IT admin). But what about a rather normal user who really does not understand this revocation thing at all and normally doesn't care to send unencrypted because he has _nothing to hide_? I guess this revocation thing is really not usable, at least without a central server where You can upload them and clients regulary lookup the keys. Then You have privacy issue again etc. etc.\nDrawback of an expiry date of course is that like your insurance company do not find a valid key, they might send just unencrypted.\nI could image expiry time of 3 years, with automatically generation of a new replacement key in the background without user interaction 6 months before expiry and automatically switching to attach the new key at outgoing mails (propagation), maybe even signed with the old key.", "creation_time": "2020-06-29T19:05:37Z", "count": 3, "tags": [], "time": "2020-06-29T19:05:37Z", "creator": "bugzilla0248@fernmeldung.de"}, {"time": "2020-06-29T20:33:04Z", "creator": "kaie@kuix.de", "tags": [], "count": 4, "creation_time": "2020-06-29T20:33:04Z", "raw_text": "I agree we need to have a revocation story.\nOn key generation, we'll save revocation certificates automatically in the Thunderbird profile directory. So you can go back to your profile directory, and retrieve it, even if you have a master password set and have forgotten it.\nIf the user was careful, revokes a key, the user probably still has the revoked key in the TB keyring.\nIf yes, and the user configures a new key for the same email address, and when sending out the new public key by email, then I'd like to bundle the old revocation statement. And it would be nice to have Thunderbird automatically process an attached revocation statement.\nBut that's something for a separate bug.\nGeneral discussion is probably best to happen here:\nhttps://thunderbird.topicbox.com/groups/e2ee", "bug_id": 1637179, "is_private": false, "text": "I agree we need to have a revocation story.\nOn key generation, we'll save revocation certificates automatically in the Thunderbird profile directory. So you can go back to your profile directory, and retrieve it, even if you have a master password set and have forgotten it.\nIf the user was careful, revokes a key, the user probably still has the revoked key in the TB keyring.\nIf yes, and the user configures a new key for the same email address, and when sending out the new public key by email, then I'd like to bundle the old revocation statement. And it would be nice to have Thunderbird automatically process an attached revocation statement.\nBut that's something for a separate bug.\nGeneral discussion is probably best to happen here:\nhttps://thunderbird.topicbox.com/groups/e2ee", "id": 14909027, "author": "kaie@kuix.de", "attachment_id": null}, {"text": "I created a Topic Topicbox for general discussion on this:\nhttps://thunderbird.topicbox.com/groups/e2ee/T018b43a2f63e8884/decide-about-defaults-for-new-openpgp-keys-in-tb-78-expiration-key-type-and-size", "author": "bugzilla0248@fernmeldung.de", "id": 14909210, "attachment_id": null, "bug_id": 1637179, "is_private": false, "count": 5, "creation_time": "2020-06-29T22:14:52Z", "raw_text": "I created a Topic Topicbox for general discussion on this:\nhttps://thunderbird.topicbox.com/groups/e2ee/T018b43a2f63e8884/decide-about-defaults-for-new-openpgp-keys-in-tb-78-expiration-key-type-and-size", "time": "2020-06-29T22:14:52Z", "creator": "bugzilla0248@fernmeldung.de", "tags": []}, {"creator": "kaie@kuix.de", "time": "2020-07-06T10:59:09Z", "tags": [], "creation_time": "2020-07-06T10:59:09Z", "count": 6, "raw_text": "", "is_private": false, "bug_id": 1637179, "text": "Created attachment 9161563\nBug 1637179 - Change OpenPGP key generation default to 3 years, type RSA, 3072 bits. r=PatrickBrunschwig", "attachment_id": 9161563, "id": 14920515, "author": "kaie@kuix.de"}, {"is_private": false, "bug_id": 1637179, "attachment_id": null, "id": 14920518, "author": "kaie@kuix.de", "text": "Alessandro, FYI.", "tags": [], "creator": "kaie@kuix.de", "time": "2020-07-06T11:00:51Z", "raw_text": "Alessandro, FYI.", "creation_time": "2020-07-06T11:00:51Z", "count": 7}, {"creation_time": "2020-07-06T11:01:10Z", "count": 8, "raw_text": "", "creator": "kaie@kuix.de", "time": "2020-07-06T11:01:10Z", "tags": [], "text": "*** Bug 1637412 has been marked as a duplicate of this bug. ***", "attachment_id": null, "id": 14920520, "author": "kaie@kuix.de", "bug_id": 1637179, "is_private": false}, {"id": 14920521, "author": "kaie@kuix.de", "attachment_id": null, "text": "Attached patch also fixes bug 1637412.", "is_private": false, "bug_id": 1637179, "raw_text": "Attached patch also fixes bug 1637412.", "count": 9, "creation_time": "2020-07-06T11:01:27Z", "tags": [], "creator": "kaie@kuix.de", "time": "2020-07-06T11:01:27Z"}, {"time": "2020-07-13T16:23:01Z", "creator": "pulsebot@bots.tld", "tags": [], "count": 10, "creation_time": "2020-07-13T16:23:01Z", "raw_text": "Pushed by kaie@kuix.de:\nhttps://hg.mozilla.org/comm-central/rev/47aefd784341\nChange OpenPGP key generation default to 3 years, type RSA, 3072 bits. r=PatrickBrunschwig", "bug_id": 1637179, "is_private": false, "text": "Pushed by kaie@kuix.de:\nhttps://hg.mozilla.org/comm-central/rev/47aefd784341\nChange OpenPGP key generation default to 3 years, type RSA, 3072 bits. r=PatrickBrunschwig", "id": 14934696, "author": "pulsebot@bots.tld", "attachment_id": null}, {"count": 11, "creation_time": "2020-07-13T16:43:54Z", "raw_text": "Change an OpenPGP key attribute default, which was useful while testing, to the recommended default for users of production Thunderbird 78", "creator": "kaie@kuix.de", "time": "2020-07-13T16:43:54Z", "tags": [], "text": "Comment on attachment 9161563\nBug 1637179 - Change OpenPGP key generation default to 3 years, type RSA, 3072 bits. r=PatrickBrunschwig\n\nChange an OpenPGP key attribute default, which was useful while testing, to the recommended default for users of production Thunderbird 78", "id": 14934753, "author": "kaie@kuix.de", "attachment_id": 9161563, "bug_id": 1637179, "is_private": false}, {"tags": [], "creator": "kaie@kuix.de", "time": "2020-07-13T23:05:15Z", "raw_text": "OpenPGP - uplift request for consistency of comm-esr78, beta79 and c-c80", "creation_time": "2020-07-13T23:05:15Z", "count": 12, "is_private": false, "bug_id": 1637179, "attachment_id": 9161563, "author": "kaie@kuix.de", "id": 14935503, "text": "Comment on attachment 9161563\nBug 1637179 - Change OpenPGP key generation default to 3 years, type RSA, 3072 bits. r=PatrickBrunschwig\n\nOpenPGP - uplift request for consistency of comm-esr78, beta79 and c-c80"}, {"author": "vseerror@lehigh.edu", "id": 14941760, "attachment_id": 9161563, "text": "Comment on attachment 9161563\nBug 1637179 - Change OpenPGP key generation default to 3 years, type RSA, 3072 bits. r=PatrickBrunschwig\n\nApproved for beta\nApproved for esr78", "is_private": false, "bug_id": 1637179, "raw_text": "Approved for beta\nApproved for esr78", "count": 13, "creation_time": "2020-07-17T02:14:23Z", "tags": [], "time": "2020-07-17T02:14:23Z", "creator": "vseerror@lehigh.edu"}, {"time": "2020-07-17T09:03:16Z", "creator": "kaie@kuix.de", "tags": [], "count": 14, "creation_time": "2020-07-17T09:03:16Z", "raw_text": "https://hg.mozilla.org/releases/comm-esr78/rev/62d8e2ccbd75343a22f55f7f4a8c6f2f7a982887\nhttps://hg.mozilla.org/releases/comm-beta/rev/b298c582e59e5607d115cbd0df44397327e30a5e", "bug_id": 1637179, "is_private": false, "text": "https://hg.mozilla.org/releases/comm-esr78/rev/62d8e2ccbd75343a22f55f7f4a8c6f2f7a982887\nhttps://hg.mozilla.org/releases/comm-beta/rev/b298c582e59e5607d115cbd0df44397327e30a5e", "author": "kaie@kuix.de", "id": 14942106, "attachment_id": null}]}}, "comments": {}}