{"comments": {}, "bugs": {"646628": {"comments": [{"id": 5381471, "time": "2011-03-30T21:27:42Z", "author": "bugzilla@twinql.com", "count": 0, "is_private": false, "text": "If you hit your own Sync URL (e.g., /info/collections), and enter a wrong username, you'll get a response of \"5\" -- user doesn't match URI.\n\nFirefox will remember the bad credentials. That doesn't seem right.\n\nSync will now be broken until you restart -- every request gets a 400, presumably because we're adding an Authorization header and so is Firefox.\n\nI haven't dug into this, but those are the symptoms.\n\nTrivial log:\n\n1301519766478\tNet.Resource\tDEBUG\tGET fail 400 https://phx-sync223.services.mozilla.com/1.0/holygoat/info/collections\n1301519766640\tService.Main\tCONFIG\tStarting backoff, next sync at:Wed Mar 30 2011 16:10:11 GMT-0700 (PDT)\n1301519766640\tService.Main\tDEBUG\tException: aborting sync, failed to get collections No traceback available", "bug_id": 646628, "raw_text": "If you hit your own Sync URL (e.g., /info/collections), and enter a wrong username, you'll get a response of \"5\" -- user doesn't match URI.\n\nFirefox will remember the bad credentials. That doesn't seem right.\n\nSync will now be broken until you restart -- every request gets a 400, presumably because we're adding an Authorization header and so is Firefox.\n\nI haven't dug into this, but those are the symptoms.\n\nTrivial log:\n\n1301519766478\tNet.Resource\tDEBUG\tGET fail 400 https://phx-sync223.services.mozilla.com/1.0/holygoat/info/collections\n1301519766640\tService.Main\tCONFIG\tStarting backoff, next sync at:Wed Mar 30 2011 16:10:11 GMT-0700 (PDT)\n1301519766640\tService.Main\tDEBUG\tException: aborting sync, failed to get collections No traceback available", "creator": "bugzilla@twinql.com", "creation_time": "2011-03-30T21:27:42Z", "tags": [], "attachment_id": null}, {"author": "bugzilla@twinql.com", "time": "2011-03-30T23:49:07Z", "count": 1, "is_private": false, "id": 5381879, "raw_text": "See also Bug 201620. Yay really old bugs.\n\nSync sends a 400 if your auth credentials don't match the URI, so Firefox caches them.\n\nIt then adds the bad ones *after* Sync adds the header:\n\n  http://mxr.mozilla.org/mozilla-central/source/netwerk/protocol/http/nsHttpChannelAuthProvider.cpp#202\n\nSimply adding\n\n    channel.loadFlags |= Ci.nsIRequest.LOAD_ANONYMOUS;   // So we don't do auth.\n\nto _createRequest in resource.js will avoid that chunk of code, at the cost of skipping proxy auth. I don't know if that's necessary.\n\nBroadly speaking, it would be nice if Firefox's auth handling (a) didn't suck, (b) could be skipped programmatically.", "creator": "bugzilla@twinql.com", "tags": [], "creation_time": "2011-03-30T23:49:07Z", "attachment_id": null, "text": "See also Bug 201620. Yay really old bugs.\n\nSync sends a 400 if your auth credentials don't match the URI, so Firefox caches them.\n\nIt then adds the bad ones *after* Sync adds the header:\n\n  http://mxr.mozilla.org/mozilla-central/source/netwerk/protocol/http/nsHttpChannelAuthProvider.cpp#202\n\nSimply adding\n\n    channel.loadFlags |= Ci.nsIRequest.LOAD_ANONYMOUS;   // So we don't do auth.\n\nto _createRequest in resource.js will avoid that chunk of code, at the cost of skipping proxy auth. I don't know if that's necessary.\n\nBroadly speaking, it would be nice if Firefox's auth handling (a) didn't suck, (b) could be skipped programmatically.", "bug_id": 646628}, {"id": 5381901, "count": 2, "author": "philipp@weitershausen.de", "time": "2011-03-30T23:57:36Z", "is_private": false, "text": "I remember the Web Developer extension allows you to clear Firefox's BasicAuth header cache for the selected tab. I'm sure we could lift that code and transplant it into our BasicAuth authenticator?", "bug_id": 646628, "creator": "philipp@weitershausen.de", "raw_text": "I remember the Web Developer extension allows you to clear Firefox's BasicAuth header cache for the selected tab. I'm sure we could lift that code and transplant it into our BasicAuth authenticator?", "attachment_id": null, "tags": [], "creation_time": "2011-03-30T23:57:36Z"}, {"is_private": false, "author": "mconnor@mozilla.com", "id": 5381906, "attachment_id": null, "creation_time": "2011-03-31T00:00:10Z", "tags": [], "bug_id": 646628, "count": 3, "time": "2011-03-31T00:00:10Z", "creator": "mconnor@mozilla.com", "raw_text": "Except that's all or nothing.  Logging out all http auth sessions would be pretty poor form.", "text": "Except that's all or nothing.  Logging out all http auth sessions would be pretty poor form."}, {"bug_id": 646628, "creation_time": "2011-03-31T00:00:43Z", "tags": [], "attachment_id": null, "id": 5381907, "author": "bugzilla@twinql.com", "is_private": false, "text": "(In reply to comment #2)\n> I remember the Web Developer extension allows you to clear Firefox's BasicAuth\n> header cache for the selected tab. I'm sure we could lift that code and\n> transplant it into our BasicAuth authenticator?\n\nProbably. Seems like an awful hack, though; I'd rather have a load flag that says \"get out of my face, crappy platform code assumptions\" and skip all those calls in the HTTP channel.", "raw_text": "(In reply to comment #2)\n> I remember the Web Developer extension allows you to clear Firefox's BasicAuth\n> header cache for the selected tab. I'm sure we could lift that code and\n> transplant it into our BasicAuth authenticator?\n\nProbably. Seems like an awful hack, though; I'd rather have a load flag that says \"get out of my face, crappy platform code assumptions\" and skip all those calls in the HTTP channel.", "creator": "bugzilla@twinql.com", "time": "2011-03-31T00:00:43Z", "count": 4}, {"creator": "philipp@weitershausen.de", "raw_text": "(In reply to comment #3)\n> Except that's all or nothing.  Logging out all http auth sessions would be\n> pretty poor form.\n\nOh I thought it allowed you ditch just that one session. Never midn then.", "text": "(In reply to comment #3)\n> Except that's all or nothing.  Logging out all http auth sessions would be\n> pretty poor form.\n\nOh I thought it allowed you ditch just that one session. Never midn then.", "count": 5, "time": "2011-03-31T00:01:02Z", "attachment_id": null, "tags": [], "creation_time": "2011-03-31T00:01:02Z", "bug_id": 646628, "is_private": false, "author": "philipp@weitershausen.de", "id": 5381908}, {"creator": "philipp@weitershausen.de", "raw_text": "(In reply to comment #4)\n> Probably. Seems like an awful hack, though; I'd rather have a load flag that\n> says \"get out of my face, crappy platform code assumptions\" and skip all those\n> calls in the HTTP channel.\n\n+1 Make it so.", "text": "(In reply to comment #4)\n> Probably. Seems like an awful hack, though; I'd rather have a load flag that\n> says \"get out of my face, crappy platform code assumptions\" and skip all those\n> calls in the HTTP channel.\n\n+1 Make it so.", "count": 6, "time": "2011-03-31T00:01:19Z", "attachment_id": null, "creation_time": "2011-03-31T00:01:19Z", "tags": [], "bug_id": 646628, "is_private": false, "author": "philipp@weitershausen.de", "id": 5381910}, {"is_private": false, "count": 7, "author": "honzab.moz@firemni.cz", "time": "2013-02-26T18:16:52Z", "id": 7144868, "attachment_id": null, "tags": [], "creation_time": "2013-02-26T18:16:52Z", "creator": "honzab.moz@firemni.cz", "raw_text": "Hasn't this been fixed with one of bug 654348 or bug 761479 or bug 776171?", "bug_id": 646628, "text": "Hasn't this been fixed with one of bug 654348 or bug 761479 or bug 776171?"}, {"count": 8, "time": "2013-02-26T18:35:45Z", "text": "Possibly. We don't use XHR, so if the change to nsHttpChannelAuthProvider applies to direct channel usage, then maybe\u2026", "creator": "bugzilla@twinql.com", "raw_text": "Possibly. We don't use XHR, so if the change to nsHttpChannelAuthProvider applies to direct channel usage, then maybe\u2026", "id": 7144968, "is_private": false, "author": "bugzilla@twinql.com", "bug_id": 646628, "attachment_id": null, "creation_time": "2013-02-26T18:35:45Z", "tags": []}, {"bug_id": 646628, "text": ":rnewman - where is the code that does the sync?  if you are not using xhr, then what?\n\nI personally don't agree with bug 646686 at all.\n\nCurrently cached credentials are removed from cache on 401/407.  Returning 400 (I understand why you are not returning 401) doesn't delete it.\n\nI have few questions:\n- how the sync auth code works?  how are you adding creds to the request?\n- more question for my self: how it happens that the creds get cached at all?", "attachment_id": null, "tags": [], "creation_time": "2013-03-01T20:40:19Z", "creator": "honzab.moz@firemni.cz", "raw_text": ":rnewman - where is the code that does the sync?  if you are not using xhr, then what?\n\nI personally don't agree with bug 646686 at all.\n\nCurrently cached credentials are removed from cache on 401/407.  Returning 400 (I understand why you are not returning 401) doesn't delete it.\n\nI have few questions:\n- how the sync auth code works?  how are you adding creds to the request?\n- more question for my self: how it happens that the creds get cached at all?", "id": 7159390, "is_private": false, "count": 9, "author": "honzab.moz@firemni.cz", "time": "2013-03-01T20:40:19Z"}, {"time": "2013-03-01T22:47:03Z", "author": "bugzilla@twinql.com", "count": 10, "is_private": false, "id": 7159892, "raw_text": "(In reply to Honza Bambas (:mayhemer) from comment #9)\n> :rnewman - where is the code that does the sync?\n\n/services/sync/modules/\n/services/common/\n\nIn particular, here're we're talking about RESTRequest and AsyncResource.\n\n> if you are not using xhr, then what?\n\nnsIHttpRequest/Channel/etc. under the covers.\n\n> Currently cached credentials are removed from cache on 401/407.  Returning\n> 400 (I understand why you are not returning 401) doesn't delete it.\n\nThe bug is not really that credentials are not being removed from a cache; it's that there's no way to stop Necko from adding its own credentials, even when the caller specifies their own.\n\nSync (and other automated clients built into Firefox, like FHR) wants an HTTP request framework that it can muck around with, not an HTTP request that Firefox is going to chop up with its own auth/cert/etc. manipulators without any way to control them.\n\nOne could narrow the fix down to \"don't overwrite an Authorization header that's present in a request\", but that doesn't work for applications that are using some other auth mechanism but want to avoid Necko \"form-filling\" a Basic Auth header on their behalf.\n\n\n> I have few questions:\n> - how the sync auth code works?  how are you adding creds to the request?\n\nrequest.addHeader, including in redirect listeners.", "creator": "bugzilla@twinql.com", "creation_time": "2013-03-01T22:47:03Z", "tags": [], "attachment_id": null, "text": "(In reply to Honza Bambas (:mayhemer) from comment #9)\n> :rnewman - where is the code that does the sync?\n\n/services/sync/modules/\n/services/common/\n\nIn particular, here're we're talking about RESTRequest and AsyncResource.\n\n> if you are not using xhr, then what?\n\nnsIHttpRequest/Channel/etc. under the covers.\n\n> Currently cached credentials are removed from cache on 401/407.  Returning\n> 400 (I understand why you are not returning 401) doesn't delete it.\n\nThe bug is not really that credentials are not being removed from a cache; it's that there's no way to stop Necko from adding its own credentials, even when the caller specifies their own.\n\nSync (and other automated clients built into Firefox, like FHR) wants an HTTP request framework that it can muck around with, not an HTTP request that Firefox is going to chop up with its own auth/cert/etc. manipulators without any way to control them.\n\nOne could narrow the fix down to \"don't overwrite an Authorization header that's present in a request\", but that doesn't work for applications that are using some other auth mechanism but want to avoid Necko \"form-filling\" a Basic Auth header on their behalf.\n\n\n> I have few questions:\n> - how the sync auth code works?  how are you adding creds to the request?\n\nrequest.addHeader, including in redirect listeners.", "bug_id": 646628}, {"is_private": false, "author": "honzab.moz@firemni.cz", "time": "2013-03-11T18:43:22Z", "count": 11, "id": 7189991, "creation_time": "2013-03-11T18:43:22Z", "tags": [], "attachment_id": null, "raw_text": "(In reply to Richard Newman [:rnewman] from bug 646686 comment #9)\n> Maybe the solution is to allow nsIHttp* users to easily replace the\n> nsHttpChannelAuthProvider for their channels? Is that possible?\n\nHmm..  According how complicated and sensitive nsHttpChannelAuthProvider is, I would rather not do that.  This class exists only because we needed to share this code by httpchannels and websockets.\n\nHowever, to allow a w/o hook might be a good idea.\n\n(In reply to Richard Newman [:rnewman] from comment #10)\n> In particular, here're we're talking about RESTRequest and AsyncResource.\n\nThanks, useful.\n\n> The bug is not really that credentials are not being removed from a cache;\n> it's that there's no way to stop Necko from adding its own credentials, even\n> when the caller specifies their own.\n\nThat's true, we don't check \"custom\" auth headers, we just put our own.\n\n> One could narrow the fix down to \"don't overwrite an Authorization header\n> that's present in a request\", but that doesn't work for applications that\n> are using some other auth mechanism but want to avoid Necko \"form-filling\" a\n> Basic Auth header on their behalf.\n\nAha.. good point.\n\n> request.addHeader, including in redirect listeners.\n\nYou mean setRequestHeader? http://hg.mozilla.org/mozilla-central/annotate/eccf45749400/services/common/rest.js#l700 ---> http://hg.mozilla.org/mozilla-central/annotate/eccf45749400/services/sync/modules/resource.js#l183\n\n\nYou might persuade me that simplest solution here would be to just tell the channel not to auth via HTTP auth with the target server.\n\nIn case we provide a hook to the auth provider, what API would work for you best?", "creator": "honzab.moz@firemni.cz", "bug_id": 646628, "text": "(In reply to Richard Newman [:rnewman] from bug 646686 comment #9)\n> Maybe the solution is to allow nsIHttp* users to easily replace the\n> nsHttpChannelAuthProvider for their channels? Is that possible?\n\nHmm..  According how complicated and sensitive nsHttpChannelAuthProvider is, I would rather not do that.  This class exists only because we needed to share this code by httpchannels and websockets.\n\nHowever, to allow a w/o hook might be a good idea.\n\n(In reply to Richard Newman [:rnewman] from comment #10)\n> In particular, here're we're talking about RESTRequest and AsyncResource.\n\nThanks, useful.\n\n> The bug is not really that credentials are not being removed from a cache;\n> it's that there's no way to stop Necko from adding its own credentials, even\n> when the caller specifies their own.\n\nThat's true, we don't check \"custom\" auth headers, we just put our own.\n\n> One could narrow the fix down to \"don't overwrite an Authorization header\n> that's present in a request\", but that doesn't work for applications that\n> are using some other auth mechanism but want to avoid Necko \"form-filling\" a\n> Basic Auth header on their behalf.\n\nAha.. good point.\n\n> request.addHeader, including in redirect listeners.\n\nYou mean setRequestHeader? http://hg.mozilla.org/mozilla-central/annotate/eccf45749400/services/common/rest.js#l700 ---> http://hg.mozilla.org/mozilla-central/annotate/eccf45749400/services/sync/modules/resource.js#l183\n\n\nYou might persuade me that simplest solution here would be to just tell the channel not to auth via HTTP auth with the target server.\n\nIn case we provide a hook to the auth provider, what API would work for you best?"}, {"raw_text": "(In reply to Honza Bambas (:mayhemer) from comment #11)\n\n> You mean setRequestHeader?\n\nYeah. Sorry, going from memory.\n\n> You might persuade me that simplest solution here would be to just tell the\n> channel not to auth via HTTP auth with the target server.\n\nThat's exactly the proposal in Bug 646686 \u2014 add load flags to individually (a) turn off built-in HTTP auth, (b) turn off cookies, without going into full-anonymous mode.\n\n> In case we provide a hook to the auth provider, what API would work for you\n> best?\n\nLoad flags on the channel are something we already use, so that's the simplest case for Sync. But we can do pretty much anything.", "creator": "bugzilla@twinql.com", "creation_time": "2013-03-11T19:28:37Z", "tags": [], "attachment_id": null, "text": "(In reply to Honza Bambas (:mayhemer) from comment #11)\n\n> You mean setRequestHeader?\n\nYeah. Sorry, going from memory.\n\n> You might persuade me that simplest solution here would be to just tell the\n> channel not to auth via HTTP auth with the target server.\n\nThat's exactly the proposal in Bug 646686 \u2014 add load flags to individually (a) turn off built-in HTTP auth, (b) turn off cookies, without going into full-anonymous mode.\n\n> In case we provide a hook to the auth provider, what API would work for you\n> best?\n\nLoad flags on the channel are something we already use, so that's the simplest case for Sync. But we can do pretty much anything.", "bug_id": 646628, "author": "bugzilla@twinql.com", "time": "2013-03-11T19:28:37Z", "count": 12, "is_private": false, "id": 7190196}]}}}