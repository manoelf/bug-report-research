{"bugs": {"706955": {"comments": [{"text": "Bug 674147 introduces a pool of certificate verification.\n\nThe initiation is made by call to directly linked PSM functions from nsSocketTransportService::Run() method.\n\nThat is not a clean way of linking modules.\n\nPotential solutions:\n- my suggestion is to init the thread pool in PSM (nsNSSCompoment::Init/Shutdown maybe) by sending an event to the socket thread\n- other way is to introduce a callback directly called from nsSocketTransportService::Run() during start and end to let other modules hook it and handle its initiations there\n\nI personally prefer a little bit more the former.", "bug_id": 706955, "tags": [], "attachment_id": null, "raw_text": "Bug 674147 introduces a pool of certificate verification.\n\nThe initiation is made by call to directly linked PSM functions from nsSocketTransportService::Run() method.\n\nThat is not a clean way of linking modules.\n\nPotential solutions:\n- my suggestion is to init the thread pool in PSM (nsNSSCompoment::Init/Shutdown maybe) by sending an event to the socket thread\n- other way is to introduce a callback directly called from nsSocketTransportService::Run() during start and end to let other modules hook it and handle its initiations there\n\nI personally prefer a little bit more the former.", "creation_time": "2011-12-01T21:29:03Z", "time": "2011-12-01T21:29:03Z", "creator": "honzab.moz@firemni.cz", "author": "honzab.moz@firemni.cz", "count": 0, "id": 5886399, "is_private": false}, {"count": 1, "id": 5896815, "is_private": false, "author": "brian@briansmith.org", "creation_time": "2011-12-07T08:14:02Z", "time": "2011-12-07T08:14:02Z", "creator": "brian@briansmith.org", "raw_text": "I didn't expect to ever need to access this service off the main thread. However, a fix for bug 660749 would probably be better-off (performance-wise) if it starts an server cert verification job directly from the cache thread, instead of through an event posted to the socket transport thread.", "attachment_id": null, "bug_id": 706955, "text": "I didn't expect to ever need to access this service off the main thread. However, a fix for bug 660749 would probably be better-off (performance-wise) if it starts an server cert verification job directly from the cache thread, instead of through an event posted to the socket transport thread.", "tags": []}, {"is_private": false, "id": 5898409, "count": 2, "creator": "honzab.moz@firemni.cz", "time": "2011-12-07T20:55:16Z", "creation_time": "2011-12-07T20:55:16Z", "author": "honzab.moz@firemni.cz", "attachment_id": null, "raw_text": "Probably true, just let you know that PSM inits in nsHttpHandler::NewProxiedChannel, so with the first suggested initiation code you will get the thread pool up on time.  FTP, BTW, is not doing this initiation.\n\nYou may use the PSM mutex to sync access to the thread pool global.  Or you can play on assumption that PSM lives longer then consumers of the pool (not quit verified, but worth to check on).\n\nAlso there could be a third simple solution: do just a lazy init.  There is no magic around thread pools, you can do that from any thread.  Having and interface to get it from \"@mozilla.org/psm;1\" is IMO also OK.", "tags": [], "text": "Probably true, just let you know that PSM inits in nsHttpHandler::NewProxiedChannel, so with the first suggested initiation code you will get the thread pool up on time.  FTP, BTW, is not doing this initiation.\n\nYou may use the PSM mutex to sync access to the thread pool global.  Or you can play on assumption that PSM lives longer then consumers of the pool (not quit verified, but worth to check on).\n\nAlso there could be a third simple solution: do just a lazy init.  There is no magic around thread pools, you can do that from any thread.  Having and interface to get it from \"@mozilla.org/psm;1\" is IMO also OK.", "bug_id": 706955}, {"tags": [], "bug_id": 706955, "text": "Created attachment 583638\nCleanup cert verification thread pool initiation and shutdown\n\nCertificate verification is strongly dependent on the profile, but not strongly dependent on the network. So, I startup/shutdown the certificate verification threads in response to gaining/losing the profile.\n\nPreviously, the code in nsNSSComponent created/deleted background threads in response to the network being torn down or started up. However, while certificate validation works better when there is a network (because then we can fetch OCSP), certificate validation works, to a certain extent, even without the network. However, I am eager to hear conuter-arguments as I may very well be overlooking something here.", "raw_text": "Certificate verification is strongly dependent on the profile, but not strongly dependent on the network. So, I startup/shutdown the certificate verification threads in response to gaining/losing the profile.\n\nPreviously, the code in nsNSSComponent created/deleted background threads in response to the network being torn down or started up. However, while certificate validation works better when there is a network (because then we can fetch OCSP), certificate validation works, to a certain extent, even without the network. However, I am eager to hear conuter-arguments as I may very well be overlooking something here.", "attachment_id": 583638, "author": "brian@briansmith.org", "creator": "brian@briansmith.org", "creation_time": "2011-12-21T22:53:11Z", "time": "2011-12-21T22:53:11Z", "is_private": false, "count": 3, "id": 5933852}, {"raw_text": "I could potentially do the review on Sunday.\n\nIs there a strong reason for this bug to block bug 712363 except you have to re-merge?  I don't see the relation being strong here my self.", "attachment_id": null, "tags": [], "text": "I could potentially do the review on Sunday.\n\nIs there a strong reason for this bug to block bug 712363 except you have to re-merge?  I don't see the relation being strong here my self.", "bug_id": 706955, "id": 6014111, "count": 4, "is_private": false, "author": "honzab.moz@firemni.cz", "time": "2012-01-27T13:41:10Z", "creation_time": "2012-01-27T13:41:10Z", "creator": "honzab.moz@firemni.cz"}, {"id": 6014194, "count": 5, "is_private": false, "time": "2012-01-27T14:32:18Z", "creation_time": "2012-01-27T14:32:18Z", "creator": "honzab.moz@firemni.cz", "author": "honzab.moz@firemni.cz", "attachment_id": 583638, "raw_text": "Review of attachment 583638:\n-----------------------------------------------------------------\n\nr=honzab with the comment addressed or vetoed with a good explanation.\n\nKai will have comments him self soon, so leaving r? for now.\n\n::: security/manager/ssl/src/nsNSSComponent.cpp\n@@ -402,5 @@\n>  nsNSSComponent::createBackgroundThreads()\n>  {\n>    NS_ASSERTION(mCertVerificationThread == nsnull,\n>                 \"Cert verification thread already created.\");\n> -\n\nI'd leave this blank line, personally.\n\n@@ +2538,5 @@\n>  void\n>  nsNSSComponent::DoProfileChangeTeardown(nsISupports* aSubject)\n>  {\n> +  /* XXX this doesn't work well, since nothing expects null pointers */\n> +  deleteBackgroundThreads();\n\nHmm.. not sure how this will work in applications allowing profile switch (someone recently told me there is none anymore now).\n\nThis IMO could be done in xpcom-shutdown better.\n\nThen you don't need to separate the code of ShutdownSSLServerCertVerification() function.", "text": "Comment on attachment 583638\nCleanup cert verification thread pool initiation and shutdown\n\nReview of attachment 583638:\n-----------------------------------------------------------------\n\nr=honzab with the comment addressed or vetoed with a good explanation.\n\nKai will have comments him self soon, so leaving r? for now.\n\n::: security/manager/ssl/src/nsNSSComponent.cpp\n@@ -402,5 @@\n>  nsNSSComponent::createBackgroundThreads()\n>  {\n>    NS_ASSERTION(mCertVerificationThread == nsnull,\n>                 \"Cert verification thread already created.\");\n> -\n\nI'd leave this blank line, personally.\n\n@@ +2538,5 @@\n>  void\n>  nsNSSComponent::DoProfileChangeTeardown(nsISupports* aSubject)\n>  {\n> +  /* XXX this doesn't work well, since nothing expects null pointers */\n> +  deleteBackgroundThreads();\n\nHmm.. not sure how this will work in applications allowing profile switch (someone recently told me there is none anymore now).\n\nThis IMO could be done in xpcom-shutdown better.\n\nThen you don't need to separate the code of ShutdownSSLServerCertVerification() function.", "bug_id": 706955, "tags": []}, {"attachment_id": null, "raw_text": "Honza, I'm worried that waiting until XPCOM shutdown is too late.\n\nThe description of \"profile-change-teardown\" clearly says:\n  \"All async activity must be stopped in this phase.\"\n\nThis means I agree with the flow of the proposed patch.\n\n\n(a)\n\nCosmetical request, please move\n+  /* XXX this doesn't work well, since nothing expects null pointers */\n+  deleteBackgroundThreads();\n\nto this position:\n   else if (nsCRT::strcmp(aTopic, PROFILE_CHANGE_TEARDOWN_TOPIC) == 0) {\n     PR_LOG(gPIPNSSLog, PR_LOG_DEBUG, (\"in PSM code, receiving change-teardown\\n\"));\n   -->\n     DoProfileChangeTeardown(aSubject);\n\nThis will place the calls to createBackgroundThreads and deleteBackgroundThreads closer to each other, and makes this correlation easier to grasp.\n\n\n(b)\n\nOptional:\nI understand you're simply moving the comment \"since nothing expects null pointers\",\nbut that comment isn't clear.\nIf you understand what this means, could you please clarify the term \"nothing\" in the comment?\n\n\n(c)\n\n-  createBackgroundThreads();\n-  if (!mCertVerificationThread)\n-  {\n-    PR_LOG(gPIPNSSLog, PR_LOG_DEBUG, (\"NSS init, could not create threads\\n\"));\n-\n-    DeregisterObservers();\n-    mPIPNSSBundle = nsnull;\n-    return NS_ERROR_OUT_OF_MEMORY;\n-  }\n\n\nStartup of the thread could still fail, which will cause us to destroy the thread object, and InitializeSSLServerCertVerificationThreads also checks for failures.\n\nWhy don't you keep an error check in place like this, just to be safe?\n\n\n  if (!mCertVerificationThread || !gCertVerificationThreadPool)\n  {\n    PR_LOG(gPIPNSSLog, PR_LOG_DEBUG, (\"NSS init, at least one thread failed\\n\"));\n\n    deleteBackgroundThreads();\n\n    DeregisterObservers();\n    mPIPNSSBundle = nsnull;\n    return NS_ERROR_OUT_OF_MEMORY;\n  }\n\n\n(d)\n\n+void ShutdownSSLServerCertVerification()\n+{\n+  delete gMutex;\n+  gMutex = nsnull;\n+}\n\nYou could add a comment saying:\n  // TODO: reset gCreateMutexCallOnce if XPCOM might restart\n\n(glandium said, we currently don't do, but in theory we could.)", "text": "Honza, I'm worried that waiting until XPCOM shutdown is too late.\n\nThe description of \"profile-change-teardown\" clearly says:\n  \"All async activity must be stopped in this phase.\"\n\nThis means I agree with the flow of the proposed patch.\n\n\n(a)\n\nCosmetical request, please move\n+  /* XXX this doesn't work well, since nothing expects null pointers */\n+  deleteBackgroundThreads();\n\nto this position:\n   else if (nsCRT::strcmp(aTopic, PROFILE_CHANGE_TEARDOWN_TOPIC) == 0) {\n     PR_LOG(gPIPNSSLog, PR_LOG_DEBUG, (\"in PSM code, receiving change-teardown\\n\"));\n   -->\n     DoProfileChangeTeardown(aSubject);\n\nThis will place the calls to createBackgroundThreads and deleteBackgroundThreads closer to each other, and makes this correlation easier to grasp.\n\n\n(b)\n\nOptional:\nI understand you're simply moving the comment \"since nothing expects null pointers\",\nbut that comment isn't clear.\nIf you understand what this means, could you please clarify the term \"nothing\" in the comment?\n\n\n(c)\n\n-  createBackgroundThreads();\n-  if (!mCertVerificationThread)\n-  {\n-    PR_LOG(gPIPNSSLog, PR_LOG_DEBUG, (\"NSS init, could not create threads\\n\"));\n-\n-    DeregisterObservers();\n-    mPIPNSSBundle = nsnull;\n-    return NS_ERROR_OUT_OF_MEMORY;\n-  }\n\n\nStartup of the thread could still fail, which will cause us to destroy the thread object, and InitializeSSLServerCertVerificationThreads also checks for failures.\n\nWhy don't you keep an error check in place like this, just to be safe?\n\n\n  if (!mCertVerificationThread || !gCertVerificationThreadPool)\n  {\n    PR_LOG(gPIPNSSLog, PR_LOG_DEBUG, (\"NSS init, at least one thread failed\\n\"));\n\n    deleteBackgroundThreads();\n\n    DeregisterObservers();\n    mPIPNSSBundle = nsnull;\n    return NS_ERROR_OUT_OF_MEMORY;\n  }\n\n\n(d)\n\n+void ShutdownSSLServerCertVerification()\n+{\n+  delete gMutex;\n+  gMutex = nsnull;\n+}\n\nYou could add a comment saying:\n  // TODO: reset gCreateMutexCallOnce if XPCOM might restart\n\n(glandium said, we currently don't do, but in theory we could.)", "bug_id": 706955, "tags": [], "is_private": false, "id": 6014816, "count": 6, "creator": "kaie@kuix.de", "creation_time": "2012-01-27T18:10:38Z", "time": "2012-01-27T18:10:38Z", "author": "kaie@kuix.de"}, {"raw_text": "r- because I believe removing the error checking code isn't the best approach and should be kept.\n\nIf you address all my suggestions, r=kaie", "attachment_id": 583638, "tags": [], "text": "Comment on attachment 583638\nCleanup cert verification thread pool initiation and shutdown\n\nr- because I believe removing the error checking code isn't the best approach and should be kept.\n\nIf you address all my suggestions, r=kaie", "bug_id": 706955, "count": 7, "id": 6014819, "is_private": false, "author": "kaie@kuix.de", "creation_time": "2012-01-27T18:12:32Z", "time": "2012-01-27T18:12:32Z", "creator": "kaie@kuix.de"}, {"attachment_id": null, "raw_text": "(In reply to Honza Bambas (:mayhemer) from comment #5)\n> Hmm.. not sure how this will work in applications allowing profile switch\n> (someone recently told me there is none anymore now).\n\nbent, bsmedberg, and others have told me that profile switch is no longer supported and many parts of Gecko have had their profile switch support removed already. (In fact, IIRC, I got an r- from somebody on a patch for trying to add logic to support it somewhere.)\n\n> This IMO could be done in xpcom-shutdown better.\n\nKai is right, this code has to happen at profile-change-teardown.\n\n(In reply to Kai Engert (:kaie) from comment #6)\n> Cosmetical request, please move\n> +  /* XXX this doesn't work well, since nothing expects null pointers */\n> +  deleteBackgroundThreads();\n> \n> to this position:\n>    else if (nsCRT::strcmp(aTopic, PROFILE_CHANGE_TEARDOWN_TOPIC) == 0) {\n>      PR_LOG(gPIPNSSLog, PR_LOG_DEBUG, (\"in PSM code, receiving\n> change-teardown\\n\"));\n>    -->\n>      DoProfileChangeTeardown(aSubject);\n\nI do not think we should make this change, because DoProfileChangeTeardown is called in TWO places, not just this one place.\n\n> Optional:\n> I understand you're simply moving the comment \"since nothing expects null\n> pointers\",\n> but that comment isn't clear.\n> If you understand what this means, could you please clarify the term\n> \"nothing\" in the comment?\n\nI actually do not understand the comment myself, so I am just going to leave it as-is.\n\n> -  createBackgroundThreads();\n> -  if (!mCertVerificationThread)\n> \n> Startup of the thread could still fail, which will cause us to destroy the\n> thread object, and InitializeSSLServerCertVerificationThreads also checks\n> for failures.\n\n> Why don't you keep an error check in place like this, just to be safe?\n\nMy view is that mCertVerificationThread is a non-critical component and that we should tolerate its failure gracefully, since in common operation it isn't used at all. Failure to create the SSL cert verification threads is more serious issue, but at least in theory, Firefox should still work fine for non-SSL connections in this state, so I don't consider it fatal either.\n \nI suggest that we change the logging so that it can log more specific errors (i.e. whether the SSL cert verification thread failed, or whether the mCertVerificationThread failed), and carry on. Do you agree?", "tags": [], "text": "(In reply to Honza Bambas (:mayhemer) from comment #5)\n> Hmm.. not sure how this will work in applications allowing profile switch\n> (someone recently told me there is none anymore now).\n\nbent, bsmedberg, and others have told me that profile switch is no longer supported and many parts of Gecko have had their profile switch support removed already. (In fact, IIRC, I got an r- from somebody on a patch for trying to add logic to support it somewhere.)\n\n> This IMO could be done in xpcom-shutdown better.\n\nKai is right, this code has to happen at profile-change-teardown.\n\n(In reply to Kai Engert (:kaie) from comment #6)\n> Cosmetical request, please move\n> +  /* XXX this doesn't work well, since nothing expects null pointers */\n> +  deleteBackgroundThreads();\n> \n> to this position:\n>    else if (nsCRT::strcmp(aTopic, PROFILE_CHANGE_TEARDOWN_TOPIC) == 0) {\n>      PR_LOG(gPIPNSSLog, PR_LOG_DEBUG, (\"in PSM code, receiving\n> change-teardown\\n\"));\n>    -->\n>      DoProfileChangeTeardown(aSubject);\n\nI do not think we should make this change, because DoProfileChangeTeardown is called in TWO places, not just this one place.\n\n> Optional:\n> I understand you're simply moving the comment \"since nothing expects null\n> pointers\",\n> but that comment isn't clear.\n> If you understand what this means, could you please clarify the term\n> \"nothing\" in the comment?\n\nI actually do not understand the comment myself, so I am just going to leave it as-is.\n\n> -  createBackgroundThreads();\n> -  if (!mCertVerificationThread)\n> \n> Startup of the thread could still fail, which will cause us to destroy the\n> thread object, and InitializeSSLServerCertVerificationThreads also checks\n> for failures.\n\n> Why don't you keep an error check in place like this, just to be safe?\n\nMy view is that mCertVerificationThread is a non-critical component and that we should tolerate its failure gracefully, since in common operation it isn't used at all. Failure to create the SSL cert verification threads is more serious issue, but at least in theory, Firefox should still work fine for non-SSL connections in this state, so I don't consider it fatal either.\n \nI suggest that we change the logging so that it can log more specific errors (i.e. whether the SSL cert verification thread failed, or whether the mCertVerificationThread failed), and carry on. Do you agree?", "bug_id": 706955, "is_private": false, "count": 8, "id": 6022373, "creator": "brian@briansmith.org", "creation_time": "2012-01-31T13:47:08Z", "time": "2012-01-31T13:47:08Z", "author": "brian@briansmith.org"}, {"creator": "brian@briansmith.org", "time": "2012-01-31T13:49:12Z", "creation_time": "2012-01-31T13:49:12Z", "author": "brian@briansmith.org", "is_private": false, "count": 9, "id": 6022378, "tags": [], "bug_id": 706955, "text": "(In reply to Honza Bambas (:mayhemer) from comment #4)\n> I could potentially do the review on Sunday.\n> \n> Is there a strong reason for this bug to block bug 712363 except you have to\n> re-merge?  I don't see the relation being strong here my self.\n\nOriginally, this patch was required when we were trying to support asynchronous cert verification for connections not managed by the socket transport thread. However, now, we do not use asynchronous cert verification for those connections, so this bug does not block bug 712363 any longer. Thanks for pointing this out.", "attachment_id": null, "raw_text": "(In reply to Honza Bambas (:mayhemer) from comment #4)\n> I could potentially do the review on Sunday.\n> \n> Is there a strong reason for this bug to block bug 712363 except you have to\n> re-merge?  I don't see the relation being strong here my self.\n\nOriginally, this patch was required when we were trying to support asynchronous cert verification for connections not managed by the socket transport thread. However, now, we do not use asynchronous cert verification for those connections, so this bug does not block bug 712363 any longer. Thanks for pointing this out."}, {"is_private": false, "id": 6028352, "count": 10, "creator": "landry@openbsd.org", "time": "2012-02-02T10:06:05Z", "creation_time": "2012-02-02T10:06:05Z", "author": "landry@openbsd.org", "attachment_id": 593767, "raw_text": "", "tags": [], "bug_id": 706955, "text": "Created attachment 593767\nCleanup cert verification thread pool initiation and shutdown, updated after landing of #712363"}, {"author": "landry@openbsd.org", "creator": "landry@openbsd.org", "time": "2012-02-02T10:06:31Z", "creation_time": "2012-02-02T10:06:31Z", "is_private": false, "id": 6028353, "count": 11, "tags": [], "bug_id": 706955, "text": "Created attachment 593768\nCleanup cert verification thread pool initiation and shutdown, updated after landing of #", "raw_text": "", "attachment_id": 593768}, {"is_private": false, "count": 12, "id": 6028357, "author": "landry@openbsd.org", "creator": "landry@openbsd.org", "creation_time": "2012-02-02T10:08:48Z", "time": "2012-02-02T10:08:48Z", "raw_text": "Oops, playing with hg bzexport... with that updated diff, m-c packages fine on OpenBSD (see 669050)", "attachment_id": 593767, "tags": [], "text": "Comment on attachment 593767\nCleanup cert verification thread pool initiation and shutdown, updated after landing of #712363\n\nOops, playing with hg bzexport... with that updated diff, m-c packages fine on OpenBSD (see 669050)", "bug_id": 706955}, {"author": "landry@openbsd.org", "creation_time": "2012-02-02T10:10:18Z", "time": "2012-02-02T10:10:18Z", "creator": "landry@openbsd.org", "count": 13, "id": 6028361, "is_private": false, "tags": [], "bug_id": 706955, "text": "Comment on attachment 593768\nCleanup cert verification thread pool initiation and shutdown, updated after landing of #\n\nobsolete duplicate patch..", "raw_text": "obsolete duplicate patch..", "attachment_id": 593768}, {"attachment_id": 593767, "raw_text": "Note that this patch applies to both m-c and m-a, now that #712363 has been backported to m-a.", "tags": [], "text": "Comment on attachment 593767\nCleanup cert verification thread pool initiation and shutdown, updated after landing of #712363\n\nNote that this patch applies to both m-c and m-a, now that #712363 has been backported to m-a.", "bug_id": 706955, "count": 14, "id": 6049558, "is_private": false, "creation_time": "2012-02-10T09:27:49Z", "time": "2012-02-10T09:27:49Z", "creator": "landry@openbsd.org", "author": "landry@openbsd.org"}, {"bug_id": 706955, "text": "(In reply to Landry Breuil from comment #14)\n> Comment on attachment 593767\n> Cleanup cert verification thread pool initiation and shutdown, updated after\n> landing of #712363\n> \n> Note that this patch applies to both m-c and m-a, now that #712363 has been\n> backported to m-a.\n\nLandry no review requests ?", "tags": [], "raw_text": "(In reply to Landry Breuil from comment #14)\n> Comment on attachment 593767\n> Cleanup cert verification thread pool initiation and shutdown, updated after\n> landing of #712363\n> \n> Note that this patch applies to both m-c and m-a, now that #712363 has been\n> backported to m-a.\n\nLandry no review requests ?", "attachment_id": null, "author": "ludovic@hirlimann.net", "creation_time": "2012-03-01T13:52:37Z", "time": "2012-03-01T13:52:37Z", "creator": "ludovic@hirlimann.net", "count": 15, "id": 6105666, "is_private": false}, {"time": "2012-03-01T17:33:31Z", "creation_time": "2012-03-01T17:33:31Z", "creator": "landry@openbsd.org", "author": "landry@openbsd.org", "count": 16, "id": 6106342, "is_private": false, "tags": [], "bug_id": 706955, "text": "Well, no since it's originally bsmith's patch, only ported to apply on m-c, and kaie's review/comments still stands against that patch.. and there's been no reply to comment 8.\n\nPatch is still needed and used on OpenBSD to workaround #669050, but i don't know what's needed now to get some progress..", "attachment_id": null, "raw_text": "Well, no since it's originally bsmith's patch, only ported to apply on m-c, and kaie's review/comments still stands against that patch.. and there's been no reply to comment 8.\n\nPatch is still needed and used on OpenBSD to workaround #669050, but i don't know what's needed now to get some progress.."}, {"text": "Any progress here?", "bug_id": 706955, "tags": [], "raw_text": "Any progress here?", "attachment_id": null, "author": "honzab.moz@firemni.cz", "time": "2012-03-02T18:46:51Z", "creation_time": "2012-03-02T18:46:51Z", "creator": "honzab.moz@firemni.cz", "id": 6109987, "count": 17, "is_private": false}, {"count": 18, "id": 6148737, "is_private": false, "author": "brian@briansmith.org", "creation_time": "2012-03-17T15:47:14Z", "time": "2012-03-17T15:47:14Z", "creator": "brian@briansmith.org", "raw_text": "I will update the patch as part of my work on bug 660749. I want to make sure that what I do here also works for what I need in bug 660749.", "attachment_id": null, "tags": [], "bug_id": 706955, "text": "I will update the patch as part of my work on bug 660749. I want to make sure that what I do here also works for what I need in bug 660749."}, {"attachment_id": null, "raw_text": "What's the status now ? i had to update the patch after #703834 landed...", "tags": [], "bug_id": 706955, "text": "What's the status now ? i had to update the patch after #703834 landed...", "is_private": false, "id": 6270097, "count": 19, "creator": "landry@openbsd.org", "creation_time": "2012-05-01T19:37:10Z", "time": "2012-05-01T19:37:10Z", "author": "landry@openbsd.org"}, {"is_private": false, "count": 20, "id": 6398289, "creator": "landry@openbsd.org", "time": "2012-06-17T10:12:47Z", "creation_time": "2012-06-17T10:12:47Z", "author": "landry@openbsd.org", "attachment_id": null, "raw_text": "Interestingly, it seems that this patch is not needed anymore on OpenBSD in aurora and central now... maybe some other change to cert threads made the problem i was seeing in #669050 go away (or hide somewhere else ?)", "tags": [], "bug_id": 706955, "text": "Interestingly, it seems that this patch is not needed anymore on OpenBSD in aurora and central now... maybe some other change to cert threads made the problem i was seeing in #669050 go away (or hide somewhere else ?)"}]}}, "comments": {}}