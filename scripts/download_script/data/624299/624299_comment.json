{"bugs": {"624299": {"comments": [{"creator": "bzbarsky@mit.edu", "creation_time": "2011-01-10T01:30:37Z", "is_private": false, "time": "2011-01-10T01:30:37Z", "id": 5186248, "text": "See bug 614834 comment 27.  The testcase in question is in the url field.", "author": "bzbarsky@mit.edu", "tags": [], "bug_id": 624299, "attachment_id": null, "raw_text": "See bug 614834 comment 27.  The testcase in question is in the url field.", "count": 0}, {"count": 1, "raw_text": "The ratio improved, but we're still slowest here (all numbers on my rMBP@2.7Ghz):\n\nSpiderMonkey:\n0.58\n0.56\n0.565\n0.56\n0.5575\n\nJSC:\n0.34\n0.33\n0.32\n0.3175\n0.3175\n\nd8:\n0.3\n0.29\n0.295\n0.3325\n0.29625", "bug_id": 624299, "attachment_id": null, "author": "till@tillschneidereit.net", "tags": [], "is_private": false, "time": "2013-07-23T11:27:46Z", "id": 7665518, "text": "The ratio improved, but we're still slowest here (all numbers on my rMBP@2.7Ghz):\n\nSpiderMonkey:\n0.58\n0.56\n0.565\n0.56\n0.5575\n\nJSC:\n0.34\n0.33\n0.32\n0.3175\n0.3175\n\nd8:\n0.3\n0.29\n0.295\n0.3325\n0.29625", "creation_time": "2013-07-23T11:27:46Z", "creator": "till@tillschneidereit.net"}, {"id": 9625397, "raw_text": "Firefox 33 is faster than Chrome 39 for me.\n\nFirefox goes from 0.60 to 0.45 and Chrome goes from 0.70 to 0.55", "text": "Firefox 33 is faster than Chrome 39 for me.\n\nFirefox goes from 0.60 to 0.45 and Chrome goes from 0.70 to 0.55", "time": "2014-11-22T16:50:49Z", "is_private": false, "count": 2, "creator": "guijoselito@gmail.com", "tags": [], "author": "guijoselito@gmail.com", "attachment_id": null, "bug_id": 624299, "creation_time": "2014-11-22T16:50:49Z"}, {"raw_text": "For me (same setup as in comment 1), we're still slowest (and note the progress JSC has made):\n\nSpiderMonkey:\n0.46\n0.44\n0.45\n0.4525\n0.4575\n\nJSC:\n0.22\n0.2\n0.21\n0.2175\n0.215\n\nd8:\n0.26\n0.31\n0.28\n0.2775\n0.2625\n\nCurrent Nightly and Canary also reflect this. Safari is about 50% slower than JSC, but still faster than us.", "count": 3, "tags": [], "author": "till@tillschneidereit.net", "attachment_id": null, "bug_id": 624299, "id": 9625404, "text": "For me (same setup as in comment 1), we're still slowest (and note the progress JSC has made):\n\nSpiderMonkey:\n0.46\n0.44\n0.45\n0.4525\n0.4575\n\nJSC:\n0.22\n0.2\n0.21\n0.2175\n0.215\n\nd8:\n0.26\n0.31\n0.28\n0.2775\n0.2625\n\nCurrent Nightly and Canary also reflect this. Safari is about 50% slower than JSC, but still faster than us.", "time": "2014-11-22T17:06:32Z", "is_private": false, "creator": "till@tillschneidereit.net", "creation_time": "2014-11-22T17:06:32Z"}, {"author": "jdemooij@mozilla.com", "tags": [], "bug_id": 624299, "attachment_id": null, "raw_text": "This is a lot faster on 32-bit. On OS X I get 0.23-0.26 ms with an x86 build, 0.39-0.42 with an x64 build.\n\nCould be our boxing format or us spilling more registers somewhere, we should investigate.", "count": 4, "creator": "jdemooij@mozilla.com", "creation_time": "2014-11-24T11:23:12Z", "time": "2014-11-24T11:23:12Z", "text": "This is a lot faster on 32-bit. On OS X I get 0.23-0.26 ms with an x86 build, 0.39-0.42 with an x64 build.\n\nCould be our boxing format or us spilling more registers somewhere, we should investigate.", "id": 9628399, "is_private": false}, {"raw_text": "", "count": 5, "tags": [], "author": "bzbarsky@mit.edu", "attachment_id": 8527735, "bug_id": 624299, "id": 9629554, "text": "Created attachment 8527735\n64-bit JIT Inspector output for the testcase", "time": "2014-11-24T15:38:45Z", "is_private": false, "creator": "bzbarsky@mit.edu", "creation_time": "2014-11-24T15:38:45Z"}, {"creator": "bzbarsky@mit.edu", "creation_time": "2014-11-24T15:39:26Z", "is_private": false, "id": 9629563, "text": "Created attachment 8527736\n32-bit JIT Inspector output", "time": "2014-11-24T15:39:26Z", "tags": [], "author": "bzbarsky@mit.edu", "attachment_id": 8527736, "bug_id": 624299, "raw_text": "", "count": 6}, {"raw_text": "", "count": 7, "tags": [], "author": "bzbarsky@mit.edu", "attachment_id": 8527741, "bug_id": 624299, "is_private": false, "text": "Created attachment 8527741\n64-bit JIT Inspector output for the testcase", "id": 9629604, "time": "2014-11-24T15:48:11Z", "creator": "bzbarsky@mit.edu", "creation_time": "2014-11-24T15:48:11Z"}, {"creator": "bzbarsky@mit.edu", "creation_time": "2014-11-24T15:48:38Z", "is_private": false, "time": "2014-11-24T15:48:38Z", "text": "Created attachment 8527743\n32-bit JIT Inspector output", "id": 9629610, "author": "bzbarsky@mit.edu", "tags": [], "bug_id": 624299, "attachment_id": 8527743, "raw_text": "", "count": 8}, {"attachment_id": null, "bug_id": 624299, "tags": [], "author": "bzbarsky@mit.edu", "count": 9, "raw_text": "Some thoughts in no particular order:\n\n1)  The overall time or the testcase on 32-bit is about 0.25 * (50 + 100 + 200 + 400 + 800) = 387.5ms.  The x86-64 times are about 2x that, in the 800-900ms range.  So we need to account for about 400-500 ms of runtime.\n\n2)  The testcase executes about 300e6 Unbox:Int32 instructions.  On x86, there's nothing to do for these if we know we have an int.  On x86-64, these correspond to a single movl.  What this means on the hardware, I don't know, but if we assume that takes one cycle, that's 300e6 cycles, the CPU is at 2.6GHz, so about 115ms.  But worse yet, in some of these cases we don't know we have an int.  In that case, on 32-bit we get things like:\n\n[MoveGroup]\n    movl       %edx, %eax\n[Unbox:Int32]\n    cmpl       $0xffffff81, %ecx\n    jne        ((366))\n\nAnd on 64-bit we get:\n\n[Unbox:Int32]\n    movq       %rcx, %r11\n    shrq       $47, %r11\n    cmpl       $0x1fff1, %r11d\n    jne        ((383))\n    movl       %ecx, %eax\n\nSo that's an extra move and shift, though on 32-bit presumably we paid part of that cost when we initially placed the high 32 bits of the Value in ecx.\n\n3)  On X86-64 there's an extra MoveGroup before the first CallKnown.  But the actual call is cheaper, and in any case there aren't _that_ many CallKnowns here (about 75e6).\n\nSo my money is that the main culprit here is the Unbox:Int32 bits.", "creation_time": "2014-11-24T16:04:35Z", "creator": "bzbarsky@mit.edu", "is_private": false, "id": 9629704, "text": "Some thoughts in no particular order:\n\n1)  The overall time or the testcase on 32-bit is about 0.25 * (50 + 100 + 200 + 400 + 800) = 387.5ms.  The x86-64 times are about 2x that, in the 800-900ms range.  So we need to account for about 400-500 ms of runtime.\n\n2)  The testcase executes about 300e6 Unbox:Int32 instructions.  On x86, there's nothing to do for these if we know we have an int.  On x86-64, these correspond to a single movl.  What this means on the hardware, I don't know, but if we assume that takes one cycle, that's 300e6 cycles, the CPU is at 2.6GHz, so about 115ms.  But worse yet, in some of these cases we don't know we have an int.  In that case, on 32-bit we get things like:\n\n[MoveGroup]\n    movl       %edx, %eax\n[Unbox:Int32]\n    cmpl       $0xffffff81, %ecx\n    jne        ((366))\n\nAnd on 64-bit we get:\n\n[Unbox:Int32]\n    movq       %rcx, %r11\n    shrq       $47, %r11\n    cmpl       $0x1fff1, %r11d\n    jne        ((383))\n    movl       %ecx, %eax\n\nSo that's an extra move and shift, though on 32-bit presumably we paid part of that cost when we initially placed the high 32 bits of the Value in ecx.\n\n3)  On X86-64 there's an extra MoveGroup before the first CallKnown.  But the actual call is cheaper, and in any case there aren't _that_ many CallKnowns here (about 75e6).\n\nSo my money is that the main culprit here is the Unbox:Int32 bits.", "time": "2014-11-24T16:04:35Z"}, {"creation_time": "2014-11-24T18:13:00Z", "creator": "jdemooij@mozilla.com", "is_private": false, "text": "(In reply to Please do not ask for reviews for a bit [:bz] from comment #9)\n> So my money is that the main culprit here is the Unbox:Int32 bits.\n\nYes, I have a patch for x64 Unbox that gets us close to the 32-bit numbers. Will post soon, after testing what it does on some other benchmarks.", "id": 9630445, "time": "2014-11-24T18:13:00Z", "attachment_id": null, "bug_id": 624299, "tags": [], "author": "jdemooij@mozilla.com", "count": 10, "raw_text": "(In reply to Please do not ask for reviews for a bit [:bz] from comment #9)\n> So my money is that the main culprit here is the Unbox:Int32 bits.\n\nYes, I have a patch for x64 Unbox that gets us close to the 32-bit numbers. Will post soon, after testing what it does on some other benchmarks."}, {"author": "jdemooij@mozilla.com", "creator": "jdemooij@mozilla.com", "tags": [], "creation_time": "2014-11-24T18:54:06Z", "bug_id": 624299, "attachment_id": null, "is_private": false, "time": "2014-11-24T18:54:06Z", "raw_text": "(In reply to Jan de Mooij [:jandem] from comment #10)\n> Yes, I have a patch for x64 Unbox that gets us close to the 32-bit numbers.\n> Will post soon, after testing what it does on some other benchmarks.\n\nBug 1104199. With the patch there:\n\nx64 before: 0.44, 0.38, 0.425, 0.4,    0.4075\nx64 after:  0.28, 0.27, 0.245, 0.26,   0.25125\nx86:        0.24, 0.23, 0.25,  0.2475, 0.23625\n\nd8 x64:     0.26, 0.23, 0.235, 0.2425, 0.22625", "id": 9630687, "text": "(In reply to Jan de Mooij [:jandem] from comment #10)\n> Yes, I have a patch for x64 Unbox that gets us close to the 32-bit numbers.\n> Will post soon, after testing what it does on some other benchmarks.\n\nBug 1104199. With the patch there:\n\nx64 before: 0.44, 0.38, 0.425, 0.4,    0.4075\nx64 after:  0.28, 0.27, 0.245, 0.26,   0.25125\nx86:        0.24, 0.23, 0.25,  0.2475, 0.23625\n\nd8 x64:     0.26, 0.23, 0.235, 0.2425, 0.22625", "count": 11}]}}, "comments": {}}