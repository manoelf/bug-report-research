{"comments": {}, "bugs": {"665409": {"comments": [{"raw_text": "The Web IDL draft allows for null parameters such:\n\nattribute readonly double foopy;\n\nIf foopy can not be determined, it may return null (instead of throwing).  The syntax is '?', so you'd have something like:\n\nattribute readlonly double? foopy;\n\n\nSee http://www.w3.org/TR/WebIDL/#idl-nullable-type for details.\n\n\n\nThis is a fall out from bug 615597 where we have many params that, if they can not be determined, we return null.", "attachment_id": null, "id": 5541849, "count": 0, "creator": "doug.turner@gmail.com", "is_private": false, "tags": [], "time": "2011-06-20T03:12:17Z", "bug_id": 665409, "text": "The Web IDL draft allows for null parameters such:\n\nattribute readonly double foopy;\n\nIf foopy can not be determined, it may return null (instead of throwing).  The syntax is '?', so you'd have something like:\n\nattribute readlonly double? foopy;\n\n\nSee http://www.w3.org/TR/WebIDL/#idl-nullable-type for details.\n\n\n\nThis is a fall out from bug 615597 where we have many params that, if they can not be determined, we return null.", "author": "doug.turner@gmail.com", "creation_time": "2011-06-20T03:12:17Z"}, {"count": 1, "bug_id": 665409, "raw_text": "Fallout from bug 662678.", "attachment_id": null, "id": 5541851, "is_private": false, "creator": "doug.turner@gmail.com", "text": "Fallout from bug 662678.", "time": "2011-06-20T03:12:49Z", "tags": [], "creation_time": "2011-06-20T03:12:49Z", "author": "doug.turner@gmail.com"}, {"attachment_id": null, "raw_text": "Also see the more up-to-date dev.w3.org version of the spec, which has expanded to allowing (requiring) \"?\" on types where null is allowed:\n\nhttp://dev.w3.org/2006/webapi/WebIDL/#idl-nullable-type", "id": 5542232, "creator": "cam@mcc.id.au", "is_private": false, "count": 2, "author": "cam@mcc.id.au", "creation_time": "2011-06-20T11:03:16Z", "bug_id": 665409, "time": "2011-06-20T11:03:16Z", "tags": [], "text": "Also see the more up-to-date dev.w3.org version of the spec, which has expanded to allowing (requiring) \"?\" on types where null is allowed:\n\nhttp://dev.w3.org/2006/webapi/WebIDL/#idl-nullable-type"}, {"creator": "bzbarsky@mit.edu", "is_private": false, "count": 3, "author": "bzbarsky@mit.edu", "creation_time": "2011-06-21T15:24:35Z", "tags": [], "time": "2011-06-21T15:24:35Z", "bug_id": 665409, "text": "This probably needs to depend on us not using the C xpidl compiler, right?  Or can libidl handle this syntax?\n\nIn the meantime, you can express this as an nsIVariant, at some pain on the C++ end....\n\nThat said, what would the C++-end API for nullable double even look like?  The best I've come up with so far, short of using something like a variant is an inout |double*&| argument that the caller sets to a double on their stack and the callee either writes to or sets to null....", "attachment_id": null, "raw_text": "This probably needs to depend on us not using the C xpidl compiler, right?  Or can libidl handle this syntax?\n\nIn the meantime, you can express this as an nsIVariant, at some pain on the C++ end....\n\nThat said, what would the C++-end API for nullable double even look like?  The best I've come up with so far, short of using something like a variant is an inout |double*&| argument that the caller sets to a double on their stack and the callee either writes to or sets to null....", "id": 5545496}, {"bug_id": 665409, "time": "2011-06-21T15:37:47Z", "tags": [], "text": "For parameters it would be double* aParam, and for return values\ndouble** aRetVal.", "author": "bugs@pettay.fi", "creation_time": "2011-06-21T15:37:47Z", "count": 4, "creator": "bugs@pettay.fi", "is_private": false, "id": 5545526, "raw_text": "For parameters it would be double* aParam, and for return values\ndouble** aRetVal.", "attachment_id": null}, {"text": "(In reply to comment #3)\n> This probably needs to depend on us not using the C xpidl compiler, right? \n> Or can libidl handle this syntax?\n\nI don't believe libidl can handle this.", "tags": [], "bug_id": 665409, "time": "2011-06-21T15:49:15Z", "creation_time": "2011-06-21T15:49:15Z", "author": "khuey@kylehuey.com", "count": 5, "is_private": false, "creator": "khuey@kylehuey.com", "id": 5545566, "raw_text": "(In reply to comment #3)\n> This probably needs to depend on us not using the C xpidl compiler, right? \n> Or can libidl handle this syntax?\n\nI don't believe libidl can handle this.", "attachment_id": null}, {"text": "> and for return values double** aRetVal.\n\nWith heap-allocation when a double is actually returned?  :(", "tags": [], "time": "2011-06-21T16:47:00Z", "bug_id": 665409, "creation_time": "2011-06-21T16:47:00Z", "author": "bzbarsky@mit.edu", "count": 6, "is_private": false, "creator": "bzbarsky@mit.edu", "id": 5545743, "raw_text": "> and for return values double** aRetVal.\n\nWith heap-allocation when a double is actually returned?  :(", "attachment_id": null}, {"bug_id": 665409, "count": 7, "id": 5545850, "raw_text": "Why would it need to be heap allocated?\n\nBut sure, double*&  might be better.", "attachment_id": null, "tags": [], "time": "2011-06-21T17:15:33Z", "text": "Why would it need to be heap allocated?\n\nBut sure, double*&  might be better.", "author": "bugs@pettay.fi", "creation_time": "2011-06-21T17:15:33Z", "creator": "bugs@pettay.fi", "is_private": false}, {"bug_id": 665409, "count": 8, "id": 5545946, "attachment_id": null, "raw_text": "> Why would it need to be heap allocated?\n\nWell, the alternative is if it's an inout param, with the caller passing in a pointer to a valid double*.  But in that case I think double*& is clearer.", "author": "bzbarsky@mit.edu", "creation_time": "2011-06-21T17:40:11Z", "time": "2011-06-21T17:40:11Z", "tags": [], "text": "> Why would it need to be heap allocated?\n\nWell, the alternative is if it's an inout param, with the caller passing in a pointer to a valid double*.  But in that case I think double*& is clearer.", "creator": "bzbarsky@mit.edu", "is_private": false}, {"text": "Yes, this depends on us switching completely to pyxpidl.", "bug_id": 665409, "time": "2011-06-23T20:42:31Z", "tags": [], "creation_time": "2011-06-23T20:42:31Z", "author": "benjamin@smedbergs.us", "count": 9, "is_private": false, "creator": "benjamin@smedbergs.us", "id": 5552153, "raw_text": "Yes, this depends on us switching completely to pyxpidl.", "attachment_id": null}, {"count": 10, "is_private": false, "creator": "khuey@kylehuey.com", "text": "So, we've switched to pyxpidl now.  This doesn't seem like it should be particularly hard to implement in XPConnect once we decide what the C++ side should look like.", "tags": [], "time": "2011-09-30T14:15:47Z", "bug_id": 665409, "creation_time": "2011-09-30T14:15:47Z", "author": "khuey@kylehuey.com", "raw_text": "So, we've switched to pyxpidl now.  This doesn't seem like it should be particularly hard to implement in XPConnect once we decide what the C++ side should look like.", "attachment_id": null, "id": 5749388}, {"text": "(In reply to Kyle Huey [:khuey] (khuey@mozilla.com) from comment #10)\n> So, we've switched to pyxpidl now.  This doesn't seem like it should be\n> particularly hard to implement in XPConnect once we decide what the C++ side\n> should look like.\n\nI'm happy to do the XPConnect bits.", "tags": [], "time": "2011-09-30T14:20:31Z", "creation_time": "2011-09-30T14:20:31Z", "author": "bholley@mozilla.com", "is_private": false, "creator": "bholley@mozilla.com", "id": 5749400, "raw_text": "(In reply to Kyle Huey [:khuey] (khuey@mozilla.com) from comment #10)\n> So, we've switched to pyxpidl now.  This doesn't seem like it should be\n> particularly hard to implement in XPConnect once we decide what the C++ side\n> should look like.\n\nI'm happy to do the XPConnect bits.", "attachment_id": null, "bug_id": 665409, "count": 11}, {"id": 5749446, "attachment_id": null, "raw_text": "bholley, don't you want to lean the pyxpidl bits also?\n\nI don't think we need to mess with extra levels of indirection, just add another argument, e.g.\n\nnsresult GetFoopy(double* aResult, bool* aResultIsNull)", "author": "benjamin@smedbergs.us", "creation_time": "2011-09-30T14:38:07Z", "bug_id": 665409, "time": "2011-09-30T14:38:07Z", "tags": [], "text": "bholley, don't you want to lean the pyxpidl bits also?\n\nI don't think we need to mess with extra levels of indirection, just add another argument, e.g.\n\nnsresult GetFoopy(double* aResult, bool* aResultIsNull)", "creator": "benjamin@smedbergs.us", "is_private": false, "count": 12}, {"count": 13, "creator": "bholley@mozilla.com", "is_private": false, "time": "2011-09-30T15:08:29Z", "tags": [], "bug_id": 665409, "text": "(In reply to Benjamin Smedberg  [:bsmedberg] from comment #12)\n> bholley, don't you want to lean the pyxpidl bits also?\n\nNot sure if that was intended to be a joke or not, but yeah, sure. ;-)\n\nTaking. What's the general priority of this?", "author": "bholley@mozilla.com", "creation_time": "2011-09-30T15:08:29Z", "raw_text": "(In reply to Benjamin Smedberg  [:bsmedberg] from comment #12)\n> bholley, don't you want to lean the pyxpidl bits also?\n\nNot sure if that was intended to be a joke or not, but yeah, sure. ;-)\n\nTaking. What's the general priority of this?", "attachment_id": null, "id": 5749521}, {"id": 5879665, "attachment_id": null, "raw_text": "Realistically, I don't think this is likely to get done early enough to make it worth doing before we switch over to the new DOM bindings. Once we have a better idea of what they'll look like, we can decide how best to support this.\n\nUnassigning for now.", "author": "bholley@mozilla.com", "creation_time": "2011-11-29T20:17:23Z", "bug_id": 665409, "time": "2011-11-29T20:17:23Z", "tags": [], "text": "Realistically, I don't think this is likely to get done early enough to make it worth doing before we switch over to the new DOM bindings. Once we have a better idea of what they'll look like, we can decide how best to support this.\n\nUnassigning for now.", "creator": "bholley@mozilla.com", "is_private": false, "count": 14}]}}}