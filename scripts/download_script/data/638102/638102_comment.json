{"bugs": {"638102": {"comments": [{"creation_time": "2011-03-02T16:07:58Z", "author": "jduell.mcbugs@gmail.com", "creator": "jduell.mcbugs@gmail.com", "text": "We should be able to change all the helper functions (AsyncLaunch, SyncLaunch, PerformAsyncLaunch, etc) to take a reference to the vector instead.  This would mean getting rid of the default arguments, but that should be fine.\n\nAnd maybe make them all private while we're at it?  Looks like only Launch is called by external code.", "id": 5315284, "attachment_id": null, "count": 0, "bug_id": 638102, "raw_text": "We should be able to change all the helper functions (AsyncLaunch, SyncLaunch, PerformAsyncLaunch, etc) to take a reference to the vector instead.  This would mean getting rid of the default arguments, but that should be fine.\n\nAnd maybe make them all private while we're at it?  Looks like only Launch is called by external code.", "tags": [], "is_private": false, "time": "2011-03-02T16:07:58Z"}, {"id": 5315302, "attachment_id": null, "text": "Never mind--the top-level functions are getting called with default args, and PerformAsync launch is on a different thread, so needs a copy not a ref.", "creation_time": "2011-03-02T16:14:48Z", "is_private": false, "tags": [], "raw_text": "Never mind--the top-level functions are getting called with default args, and PerformAsync launch is on a different thread, so needs a copy not a ref.", "creator": "jduell.mcbugs@gmail.com", "author": "jduell.mcbugs@gmail.com", "time": "2011-03-02T16:14:48Z", "bug_id": 638102, "count": 1}, {"creation_time": "2017-10-19T20:21:57Z", "author": "jld@mozilla.com", "id": 12774618, "attachment_id": null, "creator": "jld@mozilla.com", "text": ":clangbot complained about this in bug 1401790 comment #2, because I happened to touch one of the lines where an unnecessary copy happens.  It suggested adding a Move(), but I think we could go further and use rvalue references for (at least some of?) these parameters.", "count": 2, "raw_text": ":clangbot complained about this in bug 1401790 comment #2, because I happened to touch one of the lines where an unnecessary copy happens.  It suggested adding a Move(), but I think we could go further and use rvalue references for (at least some of?) these parameters.", "bug_id": 638102, "is_private": false, "tags": [], "time": "2017-10-19T20:21:57Z"}, {"tags": [], "is_private": false, "raw_text": "Hey, I was recommended to try this as my first bug by my mentor, so I'll work on it if that's okay!", "text": "Hey, I was recommended to try this as my first bug by my mentor, so I'll work on it if that's okay!", "id": 14011678, "attachment_id": null, "creation_time": "2019-03-26T09:20:31Z", "time": "2019-03-26T09:20:31Z", "bug_id": 638102, "count": 3, "creator": "vskaulagi@gmail.com", "author": "vskaulagi@gmail.com"}, {"time": "2019-03-29T03:00:14Z", "bug_id": 638102, "count": 4, "creator": "jld@mozilla.com", "author": "jld@mozilla.com", "tags": [], "is_private": false, "raw_text": "This code has gotten more complicated since comment #2, and this bug was never very well specified, so I've done some looking around in [searchfox](https://searchfox.org/) to try to clarify it.\n\nOne recent change is that I already added some `move`s inside IPC, although the arguments are still by value: where `GeckoChildProcessHost::AsyncLaunch` is called internally by `SyncLaunch` and `LaunchAndWaitForProcessHandle`, and from `ContentParent::LaunchSubprocessInternal`.\n\nWhat can be done is:\n\n* Change `GeckoChildProcessHost::{Sync,Async}Launch` to take `vector<string>&&` and change all of their callers in the process-type-specific code to use `move` (or, if they were passing an empty vector, I think they can just use `{}` to create a default-constructed temporary).  This is probably the most tedious of these changes.\n\n* Use `move` [in the closure in `RunPerformAsyncLaunch`][copy-rpal], which will need to be declared `mutable` to allow moving out of the captured variable.  (What we really want here is Rust's `FnOnce`, but I don't think C++ has anything like that.)  This allows changing `PerformAsyncLaunch` to take `vector<string>&&`.\n\n* It should be possible to use `move` when [constructing the runnable sent to the I/O thread][copy-al].  (This wouldn't have worked with `const T&`, as comment #1 pointed out.)\n\n* Change the type parameter of that runnable to `vector<string>&&`, [to avoid a copy][pass-move] into the argument of `RunPerformAsyncLaunch`, which should also be able to have its argument type changed to `vector<string>&&` to ensure that it's being passed by move.  These last two are both one-line changes and won't affect anything outside of IPC.\n\n[copy-rpal]: https://searchfox.org/mozilla-central/rev/ddd1679c0534f7ddf36cafddd17b710c4fefe3c4/ipc/glue/GeckoChildProcessHost.cpp#604\n[copy-al]: https://searchfox.org/mozilla-central/rev/ddd1679c0534f7ddf36cafddd17b710c4fefe3c4/ipc/glue/GeckoChildProcessHost.cpp#391\n[pass-move]: https://searchfox.org/mozilla-central/rev/ddd1679c0534f7ddf36cafddd17b710c4fefe3c4/xpcom/threads/nsThreadUtils.h#1071\n\nKeep in mind that an argument declared with type `T&&` isn't a `T&&` when it's used and needs to be `move`d again to be passed to another function as `T&&`; this is a little counterintuitive and I found it confusing when I first started working with C++11.", "text": "This code has gotten more complicated since comment #2, and this bug was never very well specified, so I've done some looking around in [searchfox](https://searchfox.org/) to try to clarify it.\n\nOne recent change is that I already added some `move`s inside IPC, although the arguments are still by value: where `GeckoChildProcessHost::AsyncLaunch` is called internally by `SyncLaunch` and `LaunchAndWaitForProcessHandle`, and from `ContentParent::LaunchSubprocessInternal`.\n\nWhat can be done is:\n\n* Change `GeckoChildProcessHost::{Sync,Async}Launch` to take `vector<string>&&` and change all of their callers in the process-type-specific code to use `move` (or, if they were passing an empty vector, I think they can just use `{}` to create a default-constructed temporary).  This is probably the most tedious of these changes.\n\n* Use `move` [in the closure in `RunPerformAsyncLaunch`][copy-rpal], which will need to be declared `mutable` to allow moving out of the captured variable.  (What we really want here is Rust's `FnOnce`, but I don't think C++ has anything like that.)  This allows changing `PerformAsyncLaunch` to take `vector<string>&&`.\n\n* It should be possible to use `move` when [constructing the runnable sent to the I/O thread][copy-al].  (This wouldn't have worked with `const T&`, as comment #1 pointed out.)\n\n* Change the type parameter of that runnable to `vector<string>&&`, [to avoid a copy][pass-move] into the argument of `RunPerformAsyncLaunch`, which should also be able to have its argument type changed to `vector<string>&&` to ensure that it's being passed by move.  These last two are both one-line changes and won't affect anything outside of IPC.\n\n[copy-rpal]: https://searchfox.org/mozilla-central/rev/ddd1679c0534f7ddf36cafddd17b710c4fefe3c4/ipc/glue/GeckoChildProcessHost.cpp#604\n[copy-al]: https://searchfox.org/mozilla-central/rev/ddd1679c0534f7ddf36cafddd17b710c4fefe3c4/ipc/glue/GeckoChildProcessHost.cpp#391\n[pass-move]: https://searchfox.org/mozilla-central/rev/ddd1679c0534f7ddf36cafddd17b710c4fefe3c4/xpcom/threads/nsThreadUtils.h#1071\n\nKeep in mind that an argument declared with type `T&&` isn't a `T&&` when it's used and needs to be `move`d again to be passed to another function as `T&&`; this is a little counterintuitive and I found it confusing when I first started working with C++11.", "attachment_id": null, "id": 14018651, "creation_time": "2019-03-29T03:00:14Z"}, {"raw_text": "Thanks for the info Jed! I was pretty confused about it, and this sure helps. I also wanted to know, when can I have this bug assigned to me? What is the process?", "is_private": false, "tags": [], "creation_time": "2019-03-30T13:54:49Z", "id": 14021448, "attachment_id": null, "text": "Thanks for the info Jed! I was pretty confused about it, and this sure helps. I also wanted to know, when can I have this bug assigned to me? What is the process?", "count": 5, "bug_id": 638102, "time": "2019-03-30T13:54:49Z", "author": "vskaulagi@gmail.com", "creator": "vskaulagi@gmail.com"}]}}, "comments": {}}