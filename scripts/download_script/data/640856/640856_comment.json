{"bugs": {"640856": {"comments": [{"count": 0, "text": "User-Agent:       Mozilla/5.0 (Windows; U; Windows NT 6.1; en-GB; rv:1.9.2.15) Gecko/20110303 Firefox/3.6.15\nBuild Identifier: Mozilla/5.0 (Windows; U; Windows NT 6.1; en-GB; rv:1.9.2.15) Gecko/20110303 Firefox/3.6.15\n\nAll the content on my website is served Unicode Decomposed, (in development) due to the way it's stored interally, and the find-as-you-type can't match characters with accents.\n\nRequiring all data to be output in Unicode NFC form in order for search functionality to work seems a bit excessive on the part of FireFox.  Though admittedly, after testing, it seems to be the same character-stream matching situation on Opera, and IE.  Only Chrome adequately handles this.\n\n\nAlso: My keyboard input on Windows 7 uses combining characters (as opposed to deadkeys) to input accents.  The end result, is that while I can find text on my website, I can't find accented text on the web in general.\n\nThe net result is that I type in a then the -\u0308 key to  yield a\u0308  but this cannot find \u00e4 on a page.  And if I use my local german layout, I can find the latter by pressing the \u00e4 key, but not the former.\n\nSomething needs to be done to ensure that the text being searched, as well as the page content are in the same normalization form, at the very least, it seems very odd to visitors testing my app to see ba\u0308ren but searching for b\u00e4ren gives no match.\n\n\nChrome default matching:\nJP: Katakana=Hiragana (casing difference)\nDE: \u00df = ss (not s)\nEU: a\u0301e\u0301i\u0301o\u0301u\u0301 = aeiou = \u00e1\u00e9\u00ed\u00f3\u00fa  \n  : \u00e6 = ae; \u017f = s (historical variants)\n  : \u3391 = khz \u2116=no \u2121=tel (precomposed letterlike symbols)\n  : \u24d5\u24de\u24e7 = fox (circled letters)\nKR: \u1109\u1175\u11ab = \uc2e0 (combining jamo vs precomposed hangeul)\n  : \u3266 = \u1109 (stylized characters = base form)\n\n  1 = \u0a67 = \u0be7 = \u2081 = \u06f1 = \u1369 = ... (numerals, cross script)\n\n\nFrom the looks of all this, it seems that they are using ICU Collation Data with the Sort-Key length set to primary differences only, ignoring all secondary (accent) tertiary (case) and quatrenary differences (styles); including expansion handling \u00df = ss.  With the caveat that the full primary sort key for any expansions must match to display.  That is: \"\u2493\" will match \"12.\" but \"12\" cannot find the partial match to \"\u2493\"\n\nGiven the primary ICU-EN sort-key for each of the characters, it becomes more obvious:\n1: 159A\n2: 159B\n.: 028E\n\u2493: 159A 159B 028E\n\nhttp://www.unicode.org/charts/collation/\n\n\n\nReproducible: Always\n\nSteps to Reproduce:\nGiven the page content NFD: \"cafe\u0301 or ba\u0308ren \" or NFC: \"caf\u00e9 or b\u00e4ren\"\nSearch for cafe\u0301\nActual Results:  \nA search will only find one of the two cases, depending on the keyboard input method.\n\n\nExpected Results:  \nSearch will find both results\n\nIn addition, the searching is very literal in that the case-insensitiveness doesn't work in non-latin scripts reliably.\n\n\nThe way that Chrome searches is very robust.\n\u0439 can by found by searching for \u0438\u0306 (I can type that in using the russian base character, and the combining-diacritic in a different layout (altgr-u); Unrealistic, but possible.\n\n\n\u304a\u304a\u304b\u307f \u30aa\u30aa\u30ab\u30df  This is a casing difference only, and Chrome will find both for either input; Firefox will only find a direct character match.  Because both are very commonly in use, being unable to do a quick search on both is another usability issue that should be addressed.", "id": 5338244, "time": "2011-03-11T03:38:46Z", "author": "bugzilla@deep-freeze.ca", "tags": [], "creator": "bugzilla@deep-freeze.ca", "creation_time": "2011-03-11T03:38:46Z", "bug_id": 640856, "raw_text": "User-Agent:       Mozilla/5.0 (Windows; U; Windows NT 6.1; en-GB; rv:1.9.2.15) Gecko/20110303 Firefox/3.6.15\nBuild Identifier: Mozilla/5.0 (Windows; U; Windows NT 6.1; en-GB; rv:1.9.2.15) Gecko/20110303 Firefox/3.6.15\n\nAll the content on my website is served Unicode Decomposed, (in development) due to the way it's stored interally, and the find-as-you-type can't match characters with accents.\n\nRequiring all data to be output in Unicode NFC form in order for search functionality to work seems a bit excessive on the part of FireFox.  Though admittedly, after testing, it seems to be the same character-stream matching situation on Opera, and IE.  Only Chrome adequately handles this.\n\n\nAlso: My keyboard input on Windows 7 uses combining characters (as opposed to deadkeys) to input accents.  The end result, is that while I can find text on my website, I can't find accented text on the web in general.\n\nThe net result is that I type in a then the -\u0308 key to  yield a\u0308  but this cannot find \u00e4 on a page.  And if I use my local german layout, I can find the latter by pressing the \u00e4 key, but not the former.\n\nSomething needs to be done to ensure that the text being searched, as well as the page content are in the same normalization form, at the very least, it seems very odd to visitors testing my app to see ba\u0308ren but searching for b\u00e4ren gives no match.\n\n\nChrome default matching:\nJP: Katakana=Hiragana (casing difference)\nDE: \u00df = ss (not s)\nEU: a\u0301e\u0301i\u0301o\u0301u\u0301 = aeiou = \u00e1\u00e9\u00ed\u00f3\u00fa  \n  : \u00e6 = ae; \u017f = s (historical variants)\n  : \u3391 = khz \u2116=no \u2121=tel (precomposed letterlike symbols)\n  : \u24d5\u24de\u24e7 = fox (circled letters)\nKR: \u1109\u1175\u11ab = \uc2e0 (combining jamo vs precomposed hangeul)\n  : \u3266 = \u1109 (stylized characters = base form)\n\n  1 = \u0a67 = \u0be7 = \u2081 = \u06f1 = \u1369 = ... (numerals, cross script)\n\n\nFrom the looks of all this, it seems that they are using ICU Collation Data with the Sort-Key length set to primary differences only, ignoring all secondary (accent) tertiary (case) and quatrenary differences (styles); including expansion handling \u00df = ss.  With the caveat that the full primary sort key for any expansions must match to display.  That is: \"\u2493\" will match \"12.\" but \"12\" cannot find the partial match to \"\u2493\"\n\nGiven the primary ICU-EN sort-key for each of the characters, it becomes more obvious:\n1: 159A\n2: 159B\n.: 028E\n\u2493: 159A 159B 028E\n\nhttp://www.unicode.org/charts/collation/\n\n\n\nReproducible: Always\n\nSteps to Reproduce:\nGiven the page content NFD: \"cafe\u0301 or ba\u0308ren \" or NFC: \"caf\u00e9 or b\u00e4ren\"\nSearch for cafe\u0301\nActual Results:  \nA search will only find one of the two cases, depending on the keyboard input method.\n\n\nExpected Results:  \nSearch will find both results\n\nIn addition, the searching is very literal in that the case-insensitiveness doesn't work in non-latin scripts reliably.\n\n\nThe way that Chrome searches is very robust.\n\u0439 can by found by searching for \u0438\u0306 (I can type that in using the russian base character, and the combining-diacritic in a different layout (altgr-u); Unrealistic, but possible.\n\n\n\u304a\u304a\u304b\u307f \u30aa\u30aa\u30ab\u30df  This is a casing difference only, and Chrome will find both for either input; Firefox will only find a direct character match.  Because both are very commonly in use, being unable to do a quick search on both is another usability issue that should be addressed.", "attachment_id": null, "is_private": false}, {"creator": "VYV03354@nifty.ne.jp", "attachment_id": null, "text": "Confirming. This is also important for searching text which contains Unicode Ideographic Variation Sequences.", "count": 1, "author": "VYV03354@nifty.ne.jp", "tags": [], "raw_text": "Confirming. This is also important for searching text which contains Unicode Ideographic Variation Sequences.", "creation_time": "2011-03-11T04:35:08Z", "bug_id": 640856, "is_private": false, "id": 5338300, "time": "2011-03-11T04:35:08Z"}, {"tags": [], "bug_id": 640856, "creation_time": "2011-03-11T04:46:07Z", "raw_text": "See also bug 202251 (but this is not a dupe)", "is_private": false, "id": 5338312, "time": "2011-03-11T04:46:07Z", "creator": "smontagu@smontagu.org", "attachment_id": null, "text": "See also bug 202251 (but this is not a dupe)", "count": 2, "author": "smontagu@smontagu.org"}, {"count": 3, "text": "(In reply to comment #1)\n> Confirming. This is also important for searching text which contains Unicode\n> Ideographic Variation Sequences.\n\nVariation Sequences are a somewhat different issue, more related to whether matching should be \"strict\" or \"loose\"; text with IVSs is not canonically equivalent to text without them. (So the IVS case is more akin to bug 202251; in many cases, users would prefer somewhat \"loose\" matching that ignores diacritics, variation selectors, and similar characters in the text. It's conceptually very similar to case-insensitive comparison, which we do by default.)\n\nThis bug is an example of the issue that operations involving Unicode text should treat canonically-equivalent code sequences as identical. This affects spell-check, for example, as well as searching. This should be done even if matching is \"strict\" in the sense that case differences, diacritics, IVS, etc are _not_ being ignored.", "author": "jfkthame@gmail.com", "creator": "jfkthame@gmail.com", "attachment_id": null, "time": "2011-03-11T13:44:50Z", "id": 5338855, "raw_text": "(In reply to comment #1)\n> Confirming. This is also important for searching text which contains Unicode\n> Ideographic Variation Sequences.\n\nVariation Sequences are a somewhat different issue, more related to whether matching should be \"strict\" or \"loose\"; text with IVSs is not canonically equivalent to text without them. (So the IVS case is more akin to bug 202251; in many cases, users would prefer somewhat \"loose\" matching that ignores diacritics, variation selectors, and similar characters in the text. It's conceptually very similar to case-insensitive comparison, which we do by default.)\n\nThis bug is an example of the issue that operations involving Unicode text should treat canonically-equivalent code sequences as identical. This affects spell-check, for example, as well as searching. This should be done even if matching is \"strict\" in the sense that case differences, diacritics, IVS, etc are _not_ being ignored.", "creation_time": "2011-03-11T13:44:50Z", "bug_id": 640856, "tags": [], "is_private": false}, {"bug_id": 640856, "creation_time": "2011-03-11T18:38:47Z", "raw_text": "(In reply to comment #3)\nHmm, I thought about the Chrome's behavior, but bug 202251 looks to be better about the topic. Thanks for pointing out.", "tags": [], "is_private": false, "time": "2011-03-11T18:38:47Z", "id": 5339471, "creator": "VYV03354@nifty.ne.jp", "attachment_id": null, "text": "(In reply to comment #3)\nHmm, I thought about the Chrome's behavior, but bug 202251 looks to be better about the topic. Thanks for pointing out.", "count": 4, "author": "VYV03354@nifty.ne.jp"}, {"tags": [], "raw_text": "With this patch, nsFind will normalize strings to NFKC and strip default ignorable characters before compare.", "bug_id": 640856, "creation_time": "2011-04-02T18:04:18Z", "is_private": false, "id": 5388477, "time": "2011-04-02T18:04:18Z", "creator": "VYV03354@nifty.ne.jp", "attachment_id": 523794, "count": 5, "text": "Created attachment 523794\npatch\n\nWith this patch, nsFind will normalize strings to NFKC and strip default ignorable characters before compare.", "author": "VYV03354@nifty.ne.jp"}, {"time": "2011-04-03T02:42:26Z", "id": 5388819, "is_private": false, "bug_id": 640856, "creation_time": "2011-04-03T02:42:26Z", "raw_text": "I'm not sure normalizing to NFKC is always a good idea - this discards distinctions that users may legitimately expect to be recognized by Find. I'd like this to be an _option_ (\"loose matching\" or something like that), but NFC might be more appropriate for now, at least until we consider how to expose such an option in the UI (similar to case sensitivity).", "tags": [], "author": "jfkthame@gmail.com", "count": 6, "text": "I'm not sure normalizing to NFKC is always a good idea - this discards distinctions that users may legitimately expect to be recognized by Find. I'd like this to be an _option_ (\"loose matching\" or something like that), but NFC might be more appropriate for now, at least until we consider how to expose such an option in the UI (similar to case sensitivity).", "attachment_id": null, "creator": "jfkthame@gmail.com"}, {"author": "jfkthame@gmail.com", "text": "In the testcase I think it would be helpful to use \\uXXXX escapes for the accented letters and for the combining accents, rather than literal UTF8 text; otherwise it's difficult to understand when looking at the test file what it's actually supposed to be testing.\n\nAlso, how about testing the reverse situation, where the document contains precomposed characters but the search text uses decomposed sequences?", "count": 7, "attachment_id": null, "creator": "jfkthame@gmail.com", "id": 5388825, "time": "2011-04-03T02:58:08Z", "is_private": false, "tags": [], "raw_text": "In the testcase I think it would be helpful to use \\uXXXX escapes for the accented letters and for the combining accents, rather than literal UTF8 text; otherwise it's difficult to understand when looking at the test file what it's actually supposed to be testing.\n\nAlso, how about testing the reverse situation, where the document contains precomposed characters but the search text uses decomposed sequences?", "bug_id": 640856, "creation_time": "2011-04-03T02:58:08Z"}, {"creator": "VYV03354@nifty.ne.jp", "attachment_id": null, "text": "(In reply to comment #6)\n> I'm not sure normalizing to NFKC is always a good idea - this discards\n> distinctions that users may legitimately expect to be recognized by Find. I'd\n> like this to be an _option_ (\"loose matching\" or something like that), but NFC\n> might be more appropriate for now, at least until we consider how to expose\n> such an option in the UI (similar to case sensitivity).\nWe want loose matching between Hankaku and Zenkaku kana. IE9 matches those Kana variants only when case sensitive option is checked. What about using NFKC when ignore case option is specified?\n(In reply to comment #7)\n> In the testcase I think it would be helpful to use \\uXXXX escapes for the\n> accented letters and for the combining accents, rather than literal UTF8 text;\n> otherwise it's difficult to understand when looking at the test file what it's\n> actually supposed to be testing.\n> \n> Also, how about testing the reverse situation, where the document contains\n> precomposed characters but the search text uses decomposed sequences?\nWill do.", "count": 8, "author": "VYV03354@nifty.ne.jp", "raw_text": "(In reply to comment #6)\n> I'm not sure normalizing to NFKC is always a good idea - this discards\n> distinctions that users may legitimately expect to be recognized by Find. I'd\n> like this to be an _option_ (\"loose matching\" or something like that), but NFC\n> might be more appropriate for now, at least until we consider how to expose\n> such an option in the UI (similar to case sensitivity).\nWe want loose matching between Hankaku and Zenkaku kana. IE9 matches those Kana variants only when case sensitive option is checked. What about using NFKC when ignore case option is specified?\n(In reply to comment #7)\n> In the testcase I think it would be helpful to use \\uXXXX escapes for the\n> accented letters and for the combining accents, rather than literal UTF8 text;\n> otherwise it's difficult to understand when looking at the test file what it's\n> actually supposed to be testing.\n> \n> Also, how about testing the reverse situation, where the document contains\n> precomposed characters but the search text uses decomposed sequences?\nWill do.", "creation_time": "2011-04-03T08:23:41Z", "bug_id": 640856, "tags": [], "is_private": false, "time": "2011-04-03T08:23:41Z", "id": 5388986}, {"text": "> IE9 matches those Kana variants only when case sensitive option is checked.\nSorry, only when case sensitive option is _unchecked_.", "count": 9, "author": "VYV03354@nifty.ne.jp", "creator": "VYV03354@nifty.ne.jp", "attachment_id": null, "time": "2011-04-03T08:25:31Z", "id": 5388988, "raw_text": "> IE9 matches those Kana variants only when case sensitive option is checked.\nSorry, only when case sensitive option is _unchecked_.", "bug_id": 640856, "creation_time": "2011-04-03T08:25:31Z", "tags": [], "is_private": false}, {"tags": [], "raw_text": "Changes:\n* Use NFC for case sensitive match.\n* Use charref instead of raw UTF-8 char.\n* Added a testcase finding a decomposed pattern from a precomposed text.\n* Fixed a bug found by the updated test.", "creation_time": "2011-04-03T10:28:37Z", "bug_id": 640856, "is_private": false, "id": 5389026, "time": "2011-04-03T10:28:37Z", "creator": "VYV03354@nifty.ne.jp", "attachment_id": 523857, "text": "Created attachment 523857\npatch v2\n\nChanges:\n* Use NFC for case sensitive match.\n* Use charref instead of raw UTF-8 char.\n* Added a testcase finding a decomposed pattern from a precomposed text.\n* Fixed a bug found by the updated test.", "count": 10, "author": "VYV03354@nifty.ne.jp"}, {"time": "2011-04-03T10:59:21Z", "id": 5389041, "creation_time": "2011-04-03T10:59:21Z", "bug_id": 640856, "raw_text": "The previous patch didn't handle halfwidth katakana sound marks correctly.", "tags": [], "is_private": false, "count": 11, "text": "Created attachment 523858\npatch v3\n\nThe previous patch didn't handle halfwidth katakana sound marks correctly.", "author": "VYV03354@nifty.ne.jp", "creator": "VYV03354@nifty.ne.jp", "attachment_id": 523858}, {"count": 12, "text": "Just a thought that occured to me when I had finished reporting the related Bug 647805: Would it be possible/make sense to have different default find behaviours in the normal browser window and in the view source window? Like that, normal users could happily ignore the different forms, but interested users could still find them in the view source window.", "id": 5391629, "time": "2011-04-05T22:45:03Z", "author": "j_mach_wust@shared-files.de", "tags": [], "creator": "j_mach_wust@shared-files.de", "creation_time": "2011-04-05T22:45:03Z", "bug_id": 640856, "raw_text": "Just a thought that occured to me when I had finished reporting the related Bug 647805: Would it be possible/make sense to have different default find behaviours in the normal browser window and in the view source window? Like that, normal users could happily ignore the different forms, but interested users could still find them in the view source window.", "attachment_id": null, "is_private": false}, {"time": "2011-05-04T12:05:43Z", "id": 5448013, "creation_time": "2011-05-04T12:05:43Z", "bug_id": 640856, "raw_text": "To the extent that we're introducing NFKC behaviors, I'd like to see the Unicode ligatures decomposed as well for find-- fl/\ufb02, ffi/\ufb03, ffl/\ufb04 and more (discussed http://en.wikipedia.org/wiki/Typographical_ligature and in the Unicode Normalization Charts, http://www.unicode.org/Public/UNIDATA/NormalizationTest.txt). The larger set includes some Arabic ligatures discussed on the Wikipedia page (and many more, of course), and which we can reasonably expect to be covered.\n\nAs discussed above, this is all covered in the ICU Collation tables-- is there a chance those can be incorporated wholesale here and elsewhere?\n\nIn the interests of full disclosure, I should say that I'm also interested in Mozilla incorporating ICU data so it can eventually provide ICU-based collations to Sqlite for the Storage API.", "tags": [], "is_private": false, "count": 13, "text": "To the extent that we're introducing NFKC behaviors, I'd like to see the Unicode ligatures decomposed as well for find-- fl/\ufb02, ffi/\ufb03, ffl/\ufb04 and more (discussed http://en.wikipedia.org/wiki/Typographical_ligature and in the Unicode Normalization Charts, http://www.unicode.org/Public/UNIDATA/NormalizationTest.txt). The larger set includes some Arabic ligatures discussed on the Wikipedia page (and many more, of course), and which we can reasonably expect to be covered.\n\nAs discussed above, this is all covered in the ICU Collation tables-- is there a chance those can be incorporated wholesale here and elsewhere?\n\nIn the interests of full disclosure, I should say that I'm also interested in Mozilla incorporating ICU data so it can eventually provide ICU-based collations to Sqlite for the Storage API.", "author": "ajlyon+bugmail@gmail.com", "creator": "ajlyon+bugmail@gmail.com", "attachment_id": null}, {"time": "2011-05-04T18:58:03Z", "id": 5449103, "bug_id": 640856, "creation_time": "2011-05-04T18:58:03Z", "raw_text": "", "tags": [], "is_private": false, "count": 14, "text": "Created attachment 530107\nupdated to tip", "author": "VYV03354@nifty.ne.jp", "creator": "VYV03354@nifty.ne.jp", "attachment_id": 530107}, {"id": 5486295, "time": "2011-05-23T13:40:37Z", "is_private": false, "tags": [], "raw_text": "", "bug_id": 640856, "creation_time": "2011-05-23T13:40:37Z", "author": "alice0775@gmail.com", "text": "*** Bug 658986 has been marked as a duplicate of this bug. ***", "count": 15, "attachment_id": null, "creator": "alice0775@gmail.com"}, {"author": "moz@jeka.info", "text": "This reminds me of bug 389651. Maybe someone can have a look?", "count": 16, "attachment_id": null, "creator": "moz@jeka.info", "time": "2011-05-23T16:24:51Z", "id": 5486690, "is_private": false, "raw_text": "This reminds me of bug 389651. Maybe someone can have a look?", "bug_id": 640856, "creation_time": "2011-05-23T16:24:51Z", "tags": []}, {"text": "A complete treatment of Unicode equivalence would, or at least could, address bug 389651 as well, since the zero-width space is included in the same set of rules.", "count": 17, "id": 5486752, "author": "ajlyon+bugmail@gmail.com", "time": "2011-05-23T16:44:26Z", "creator": "ajlyon+bugmail@gmail.com", "tags": [], "raw_text": "A complete treatment of Unicode equivalence would, or at least could, address bug 389651 as well, since the zero-width space is included in the same set of rules.", "creation_time": "2011-05-23T16:44:26Z", "bug_id": 640856, "attachment_id": null, "is_private": false}, {"id": 6975240, "time": "2013-01-08T16:48:01Z", "author": "deletesoftware+moz@yandex.ru", "count": 18, "text": "An older report: bug 374795", "is_private": false, "attachment_id": null, "tags": [], "creator": "deletesoftware+moz@yandex.ru", "bug_id": 640856, "creation_time": "2013-01-08T16:48:01Z", "raw_text": "An older report: bug 374795"}, {"text": "Experienced this issue on MacOS X (10.7.5), with FF 23.0.1 as well. I had a page in UTF-8 with accented characters and then copied matching text from the Finder and pasted it into the 'Find' field of the search toolbar. This text could not be found. Only by retyping the accented letters in the field was the match found. It looks like interaction between the clipboard is important too.", "count": 19, "author": "andrejohn.mas@gmail.com", "creator": "andrejohn.mas@gmail.com", "attachment_id": null, "time": "2013-09-04T20:47:13Z", "id": 7823608, "creation_time": "2013-09-04T20:47:13Z", "bug_id": 640856, "raw_text": "Experienced this issue on MacOS X (10.7.5), with FF 23.0.1 as well. I had a page in UTF-8 with accented characters and then copied matching text from the Finder and pasted it into the 'Find' field of the search toolbar. This text could not be found. Only by retyping the accented letters in the field was the match found. It looks like interaction between the clipboard is important too.", "tags": [], "is_private": false}, {"attachment_id": null, "creator": "jchaulk@mozilla.com", "author": "jchaulk@mozilla.com", "count": 20, "text": "*** Bug 648521 has been marked as a duplicate of this bug. ***", "is_private": false, "tags": [], "raw_text": "", "bug_id": 640856, "creation_time": "2014-05-07T14:35:12Z", "id": 8762332, "time": "2014-05-07T14:35:12Z"}, {"text": "*** Bug 477372 has been marked as a duplicate of this bug. ***", "count": 21, "id": 8776927, "time": "2014-05-10T14:00:18Z", "author": "gphemsley@gphemsley.org", "tags": [], "creator": "gphemsley@gphemsley.org", "bug_id": 640856, "creation_time": "2014-05-10T14:00:18Z", "raw_text": "", "attachment_id": null, "is_private": false}, {"author": "mdeboer@mozilla.com", "time": "2018-01-18T16:55:53Z", "id": 12979585, "text": "*** Bug 1428407 has been marked as a duplicate of this bug. ***", "count": 22, "attachment_id": null, "is_private": false, "raw_text": "", "bug_id": 640856, "creation_time": "2018-01-18T16:55:53Z", "creator": "mdeboer@mozilla.com", "tags": []}]}}, "comments": {}}