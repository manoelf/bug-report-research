{"comments": {}, "bugs": {"657655": {"comments": [{"count": 0, "author": "joe@drew.ca", "time": "2011-05-17T16:12:00Z", "is_private": false, "id": 5474953, "creator": "joe@drew.ca", "raw_text": "The tweet referred to in the URL has a bunch of diacritics that aren't being combined. This is the case in Chrome, Safari, *and* Firefox.\n\nhttp://grab.by/a9sj is how Twitter for Mac renders this text.\n\nIs Twitter rendering this wrong, or are we?", "attachment_id": null, "creation_time": "2011-05-17T16:12:00Z", "tags": [], "text": "The tweet referred to in the URL has a bunch of diacritics that aren't being combined. This is the case in Chrome, Safari, *and* Firefox.\n\nhttp://grab.by/a9sj is how Twitter for Mac renders this text.\n\nIs Twitter rendering this wrong, or are we?", "bug_id": 657655}, {"id": 5475298, "author": "jfkthame@gmail.com", "time": "2011-05-17T18:14:01Z", "count": 1, "is_private": false, "text": "Well, I suppose Twitter's rendering is in some sense closer to being \"right\". But the main issue here is that many of the characters are not supported by the primary fonts in the CSS font-family property, and so fallback happens - and we probably end up getting characters from several different fallback fonts. And proper diacritic positioning - which we *do* support via harfbuzz and OpenType fonts with 'mark' and 'mkmk' features - will not happen across font changes, as that completely breaks all shaping.\n\nThe main thing that would help this (aside from disabling the page's CSS and setting your browser's font to something like Code2000 that probably supports all the characters involved) would be to ensure that we do font selection on a character cluster basis, instead of treating each individual Unicode character separately. That's bug 543200.\n\n(Note that the result would still be dependent on the quality of diacritic support in the font that we end up using, but searching for a font that supports the entire base+diacritics cluster would greatly improve the odds.)", "bug_id": 657655, "raw_text": "Well, I suppose Twitter's rendering is in some sense closer to being \"right\". But the main issue here is that many of the characters are not supported by the primary fonts in the CSS font-family property, and so fallback happens - and we probably end up getting characters from several different fallback fonts. And proper diacritic positioning - which we *do* support via harfbuzz and OpenType fonts with 'mark' and 'mkmk' features - will not happen across font changes, as that completely breaks all shaping.\n\nThe main thing that would help this (aside from disabling the page's CSS and setting your browser's font to something like Code2000 that probably supports all the characters involved) would be to ensure that we do font selection on a character cluster basis, instead of treating each individual Unicode character separately. That's bug 543200.\n\n(Note that the result would still be dependent on the quality of diacritic support in the font that we end up using, but searching for a font that supports the entire base+diacritics cluster would greatly improve the odds.)", "creator": "jfkthame@gmail.com", "creation_time": "2011-05-17T18:14:01Z", "tags": [], "attachment_id": null}]}}}