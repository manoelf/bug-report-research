{"comments": {}, "bugs": {"679942": {"comments": [{"author": "mail@lukewagner.name", "text": "Created attachment 553958\nmeasurement patch\n\nbug 665707 proposes adding the ability to attach the \"compiled representations\" of a resource to its necko cache entry.  The shareable portion of a JSScript would be a prime candidate for this (see bug 665707 comment 8 to 13).\n\nTo get a feeling for how much this could save, I instrumented a browser.  On each full GC, the patch maintains a hash set where the key is the tuple (script->filename, script->lineno, script->length, script->code[0..script->length]).  When a script is traced, its key is extracted and it is added to the set.  If there is already a script in the set with the same key, I naively assume the cache would hit (and we'd share the script) and add script->totalSize() to a running sum that is reset/printed on each GC.  Lastly, in view of bug 678037, I only count scripts which have been run once.  This is pretty rough, but I think it gives a nice estimate of how much we could potentially win:\n\n                      # scripts                 totalSize sum\n                    total / share / %       total / share  / %\nStartup:             1504 /  63   / 4%      765KB / 16.0KB / 2%\nnews.google->14 tabs  29K / 18K   / 63%    16.8MB / 10.4MB / 62%\nfacebook->5 tabs       7K /  4K   / 64%     3.2MB /  2.0MB / 63%\nyahoo->7 tabs         11K /  3K   / 26%     6.3MB /  1.5MB / 24%\nwikipedia->20 tabs    10K /  8K   / 85%     6.1MB /  5.3MB / 86%\n\nHere, \"Site->N tabs\" means \"go to Site, then ctrl-click on N things\".  news.google is interesting because all the tabs are different domains; all the other examples were from the same domain.  I should note that, since not all of JSScript::totalSize() can be shared (some of it needs to stay per-compartment) and, as discussed in bug 678037, most scripts are pretty short, only maybe 60% of the \"share\" column could actually be saved by caching.  Still, that's a lot.\n\nAlso, the compile time for these scripts is a major part of page load time.  On the subject of compile time, bug 288473 has already attempted a caching strategy.  A key difference is that bug 288473 caches XDR (which incurs an encoding penalty) and decodes a new script on each hit (so there is no memory savings).  This mostly results from the use of the existing cache interface instead of the fancy new hotness proposed in bug 665707.\n\nMeasurement patch attached.", "count": 0, "creator": "mail@lukewagner.name", "is_private": false, "creation_time": "2011-08-17T23:56:34Z", "id": 5661340, "bug_id": 679942, "attachment_id": 553958, "raw_text": "bug 665707 proposes adding the ability to attach the \"compiled representations\" of a resource to its necko cache entry.  The shareable portion of a JSScript would be a prime candidate for this (see bug 665707 comment 8 to 13).\n\nTo get a feeling for how much this could save, I instrumented a browser.  On each full GC, the patch maintains a hash set where the key is the tuple (script->filename, script->lineno, script->length, script->code[0..script->length]).  When a script is traced, its key is extracted and it is added to the set.  If there is already a script in the set with the same key, I naively assume the cache would hit (and we'd share the script) and add script->totalSize() to a running sum that is reset/printed on each GC.  Lastly, in view of bug 678037, I only count scripts which have been run once.  This is pretty rough, but I think it gives a nice estimate of how much we could potentially win:\n\n                      # scripts                 totalSize sum\n                    total / share / %       total / share  / %\nStartup:             1504 /  63   / 4%      765KB / 16.0KB / 2%\nnews.google->14 tabs  29K / 18K   / 63%    16.8MB / 10.4MB / 62%\nfacebook->5 tabs       7K /  4K   / 64%     3.2MB /  2.0MB / 63%\nyahoo->7 tabs         11K /  3K   / 26%     6.3MB /  1.5MB / 24%\nwikipedia->20 tabs    10K /  8K   / 85%     6.1MB /  5.3MB / 86%\n\nHere, \"Site->N tabs\" means \"go to Site, then ctrl-click on N things\".  news.google is interesting because all the tabs are different domains; all the other examples were from the same domain.  I should note that, since not all of JSScript::totalSize() can be shared (some of it needs to stay per-compartment) and, as discussed in bug 678037, most scripts are pretty short, only maybe 60% of the \"share\" column could actually be saved by caching.  Still, that's a lot.\n\nAlso, the compile time for these scripts is a major part of page load time.  On the subject of compile time, bug 288473 has already attempted a caching strategy.  A key difference is that bug 288473 caches XDR (which incurs an encoding penalty) and decodes a new script on each hit (so there is no memory savings).  This mostly results from the use of the existing cache interface instead of the fancy new hotness proposed in bug 665707.\n\nMeasurement patch attached.", "time": "2011-08-17T23:56:34Z", "tags": []}, {"id": 5963521, "bug_id": 679942, "is_private": false, "creation_time": "2012-01-08T03:29:32Z", "creator": "danialhorton@gmail.com", "author": "danialhorton@gmail.com", "text": "Luke, would be interested to test a version of 10 or nightly with this change implemented, theres a massive memory usage in facebook compartments when multiple share or like buttons are active across several tabs", "count": 1, "tags": [], "time": "2012-01-08T03:29:32Z", "attachment_id": null, "raw_text": "Luke, would be interested to test a version of 10 or nightly with this change implemented, theres a massive memory usage in facebook compartments when multiple share or like buttons are active across several tabs"}, {"raw_text": "I'm afraid this isn't close to being implemented.  At the least, it needs support from Necko.", "attachment_id": null, "time": "2012-01-08T23:52:36Z", "tags": [], "text": "I'm afraid this isn't close to being implemented.  At the least, it needs support from Necko.", "count": 2, "author": "mail@lukewagner.name", "creator": "mail@lukewagner.name", "is_private": false, "creation_time": "2012-01-08T23:52:36Z", "id": 5964384, "bug_id": 679942}, {"raw_text": "Is this still relevant now that bug 679940 has been done?", "attachment_id": null, "time": "2013-06-14T05:15:57Z", "tags": [], "text": "Is this still relevant now that bug 679940 has been done?", "count": 3, "author": "n.nethercote@gmail.com", "creator": "n.nethercote@gmail.com", "is_private": false, "creation_time": "2013-06-14T05:15:57Z", "id": 7533784, "bug_id": 679942}, {"raw_text": "Probably not, I'll WONTFIX for now.", "attachment_id": null, "time": "2013-06-14T05:18:42Z", "tags": [], "text": "Probably not, I'll WONTFIX for now.", "count": 4, "author": "mail@lukewagner.name", "creator": "mail@lukewagner.name", "is_private": false, "creation_time": "2013-06-14T05:18:42Z", "bug_id": 679942, "id": 7533791}, {"time": "2013-06-14T05:43:39Z", "raw_text": "In the current setup, do we just save memory by sharing, or also save compilation time?", "id": 7533825, "bug_id": 679942, "text": "In the current setup, do we just save memory by sharing, or also save compilation time?", "count": 5, "author": "bzbarsky@mit.edu", "tags": [], "attachment_id": null, "creation_time": "2013-06-14T05:43:39Z", "is_private": false, "creator": "bzbarsky@mit.edu"}, {"tags": [], "attachment_id": null, "raw_text": "> In the current setup, do we just save memory by sharing, or also save\n> compilation time?\n\nThe former. Given the results in bug 813324 comment 19, I'm not convinced we should WONTFIX this. There's clearly some value in not only saving memory but also compilation time.\n\nHaving said that, other changes might make this moot to some extend. Lazy parsing of scripts will substantially decrease the time needed for parsing in general. Additionally, we might do things like clone scripts from other compartments if they have already been parsed in the current session. That would require at least the hashing part of this task, however.\n\nGiven that there's no clearly best path forward here, I think WONTFIXING is premature.", "time": "2013-06-14T11:31:02Z", "is_private": false, "creation_time": "2013-06-14T11:31:02Z", "bug_id": 679942, "id": 7534561, "author": "till@tillschneidereit.net", "text": "> In the current setup, do we just save memory by sharing, or also save\n> compilation time?\n\nThe former. Given the results in bug 813324 comment 19, I'm not convinced we should WONTFIX this. There's clearly some value in not only saving memory but also compilation time.\n\nHaving said that, other changes might make this moot to some extend. Lazy parsing of scripts will substantially decrease the time needed for parsing in general. Additionally, we might do things like clone scripts from other compartments if they have already been parsed in the current session. That would require at least the hashing part of this task, however.\n\nGiven that there's no clearly best path forward here, I think WONTFIXING is premature.", "count": 6, "creator": "till@tillschneidereit.net"}, {"creator": "mail@lukewagner.name", "creation_time": "2013-06-14T15:57:30Z", "is_private": false, "attachment_id": null, "tags": [], "text": "Another concern that has come up since filing this: with Till's patch, we always save memory (but never time; we lose a bit of time from the hashing).  If we start caching the bytecode for scripts that aren't being used then we might win some time but we potentially waste a ton of memory.  If we start thinking about saving bytecode to disk, Taras's general feedback on I/O perf indicates that we might end up going slower since we'd be performing more I/O.  That plus lazy parsing is what has made me lose interest in this bug.\n\nOTOH, bug 883154 sounds promising (saves parse time and doesn't waste memory).", "count": 7, "author": "mail@lukewagner.name", "bug_id": 679942, "id": 7535480, "raw_text": "Another concern that has come up since filing this: with Till's patch, we always save memory (but never time; we lose a bit of time from the hashing).  If we start caching the bytecode for scripts that aren't being used then we might win some time but we potentially waste a ton of memory.  If we start thinking about saving bytecode to disk, Taras's general feedback on I/O perf indicates that we might end up going slower since we'd be performing more I/O.  That plus lazy parsing is what has made me lose interest in this bug.\n\nOTOH, bug 883154 sounds promising (saves parse time and doesn't waste memory).", "time": "2013-06-14T15:57:30Z"}]}}}