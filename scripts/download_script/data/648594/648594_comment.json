{"bugs": {"648594": {"comments": [{"attachment_id": 524686, "tags": [], "creation_time": "2011-04-08T18:29:45Z", "bug_id": 648594, "author": "mark.yen@suse.com", "is_private": false, "id": 5397017, "creator": "mark.yen@suse.com", "raw_text": "See attached xpcshell unit test.\n\nWhen a JS component instantiated as a service has a reference to the proxy object manager, quitting the application causes a crash.  This is because there is no forced GC between freeing services and destroying the proxy object manager, leading to an outstanding reference that will be released after the proxy object manager goes away.  This attempts to call nsProxyObjectManager::Release on a deleted object.\n\nAm I allowed to call nsCycleCollector_collect() at that point?  If yes, that might work as a fix...", "text": "Created attachment 524686\nxpcshell unit test demonstrating the problem\n\nSee attached xpcshell unit test.\n\nWhen a JS component instantiated as a service has a reference to the proxy object manager, quitting the application causes a crash.  This is because there is no forced GC between freeing services and destroying the proxy object manager, leading to an outstanding reference that will be released after the proxy object manager goes away.  This attempts to call nsProxyObjectManager::Release on a deleted object.\n\nAm I allowed to call nsCycleCollector_collect() at that point?  If yes, that might work as a fix...", "count": 0, "time": "2011-04-08T18:29:45Z"}, {"author": "benjamin@smedbergs.us", "is_private": false, "id": 5397068, "attachment_id": null, "tags": [], "creation_time": "2011-04-08T18:40:37Z", "bug_id": 648594, "count": 1, "time": "2011-04-08T18:40:37Z", "creator": "benjamin@smedbergs.us", "raw_text": "I believe the \"correct\" answer here involves watching xpcom-shutdown and deleting the ref (which should be collected earlier than service-shutdown code).\n\nMy medium-term plan is to remove xpcom proxies entirely and require people to use custom runnables.", "text": "I believe the \"correct\" answer here involves watching xpcom-shutdown and deleting the ref (which should be collected earlier than service-shutdown code).\n\nMy medium-term plan is to remove xpcom proxies entirely and require people to use custom runnables."}, {"creation_time": "2011-04-08T19:00:58Z", "tags": [], "attachment_id": null, "raw_text": "Right, but there's no good place to go document that (because that's totally counter-intuitive) and gets nastier with javascript modules and lazy getters.  At least only the proxy object manager has this problem, since there's a cycle collector shutdown right after which should cause GC.\n\n(xpcom-shutdown happens before xpcom-shutdown-threads, and both are just before CC shuts down threads, so that should be fine.)\n\nIn regards to custom runnables, does that mean everything has to be asynchronous?  (That's not necessarily a bad thing, since the real problem with the POM is the nested event loop, but does complicate things a lot...)", "creator": "mark.yen@suse.com", "bug_id": 648594, "text": "Right, but there's no good place to go document that (because that's totally counter-intuitive) and gets nastier with javascript modules and lazy getters.  At least only the proxy object manager has this problem, since there's a cycle collector shutdown right after which should cause GC.\n\n(xpcom-shutdown happens before xpcom-shutdown-threads, and both are just before CC shuts down threads, so that should be fine.)\n\nIn regards to custom runnables, does that mean everything has to be asynchronous?  (That's not necessarily a bad thing, since the real problem with the POM is the nested event loop, but does complicate things a lot...)", "is_private": false, "time": "2011-04-08T19:00:58Z", "author": "mark.yen@suse.com", "count": 2, "id": 5397152}, {"bug_id": 648594, "creation_time": "2011-04-09T16:28:43Z", "tags": [], "attachment_id": null, "id": 5398420, "is_private": false, "author": "benjamin@smedbergs.us", "text": "You can dispatch a runnable synchronously (with the nested event loop) using nsIEventTarget::DISPATCH_SYNC.\n\nI don't want to take the significant perf hit of an extra cycle collection if we can fix this using code changes and common sense.", "raw_text": "You can dispatch a runnable synchronously (with the nested event loop) using nsIEventTarget::DISPATCH_SYNC.\n\nI don't want to take the significant perf hit of an extra cycle collection if we can fix this using code changes and common sense.", "creator": "benjamin@smedbergs.us", "time": "2011-04-09T16:28:43Z", "count": 3}]}}, "comments": {}}