{"comments": {}, "bugs": {"713310": {"comments": [{"raw_text": "The following report (in the URL field) has been generated by static analysis using Clang.\n\nIt would be good if someone familiar with the particular code could check if\n\n- this is really a bug or a false positive\n- and/or if it makes sense to adjust the code (even if there is not a real bug present, e.g. by adding a missing initialization).\n\n\nIn this particular report, the analyzer seems to assume that | count = *p++ + 1; | in line 1737 can evaluate to 1 such that the | while(--count) | loop is not executed. At the same time it assumes | item | can be larger than 0 and therefore, access | sizes[item]; | in line 1757 is invalid.", "creation_time": "2011-12-24T00:57:16Z", "attachment_id": null, "time": "2011-12-24T00:57:16Z", "text": "The following report (in the URL field) has been generated by static analysis using Clang.\n\nIt would be good if someone familiar with the particular code could check if\n\n- this is really a bug or a false positive\n- and/or if it makes sense to adjust the code (even if there is not a real bug present, e.g. by adding a missing initialization).\n\n\nIn this particular report, the analyzer seems to assume that | count = *p++ + 1; | in line 1737 can evaluate to 1 such that the | while(--count) | loop is not executed. At the same time it assumes | item | can be larger than 0 and therefore, access | sizes[item]; | in line 1757 is invalid.", "id": 5938105, "tags": [], "is_private": false, "count": 0, "bug_id": 713310, "author": "choller@mozilla.com", "creator": "choller@mozilla.com"}, {"raw_text": "I was looking at this (and the other warning in the same function) on Thursday, and it's either a false positive or I don't understand what the analyzer is complaining about.\n\nIt's possible that |item| may be >= |count| and therefore access an invalid part of |sizes| if the caller passes in an invalid value, but they are expected to pass only values from 0..count-1, as queried via nestegg_track_codec_data_count.  It wouldn't hurt to add a check that |item < count|, but doing this didn't silence the analyzer's warnings.", "creation_time": "2011-12-24T03:22:46Z", "creator": "kinetik@flim.org", "text": "I was looking at this (and the other warning in the same function) on Thursday, and it's either a false positive or I don't understand what the analyzer is complaining about.\n\nIt's possible that |item| may be >= |count| and therefore access an invalid part of |sizes| if the caller passes in an invalid value, but they are expected to pass only values from 0..count-1, as queried via nestegg_track_codec_data_count.  It wouldn't hurt to add a check that |item < count|, but doing this didn't silence the analyzer's warnings.", "author": "kinetik@flim.org", "attachment_id": null, "time": "2011-12-24T03:22:46Z", "tags": [], "is_private": false, "count": 1, "id": 5938268, "bug_id": 713310}, {"author": "choller@mozilla.com", "time": "2011-12-24T10:04:56Z", "attachment_id": null, "text": "(In reply to Matthew Gregan [:kinetik] from comment #1)\n> It wouldn't hurt to add a check that |item < count|, but doing this didn't silence the analyzer's warnings.\n\n\nWhat kind of check did you add there and where? I can give it a try myself then and then investigate why it doesn't silence the warning.", "creator": "choller@mozilla.com", "creation_time": "2011-12-24T10:04:56Z", "raw_text": "(In reply to Matthew Gregan [:kinetik] from comment #1)\n> It wouldn't hurt to add a check that |item < count|, but doing this didn't silence the analyzer's warnings.\n\n\nWhat kind of check did you add there and where? I can give it a try myself then and then investigate why it doesn't silence the warning.", "bug_id": 713310, "id": 5938472, "tags": [], "count": 2, "is_private": false}, {"author": "kinetik@flim.org", "creator": "kinetik@flim.org", "id": 5953042, "tags": [], "is_private": false, "count": 3, "bug_id": 713310, "raw_text": "I'm using clang version 3.1 (trunk 147127) for this.\n\nsizes[] is initialized from [0, count), so adding a check that item is [0, count) was my first thought:\n\n\n   if (count > 3)\n     return -1;\n \n+  if (item >= count)\n+    return -1;\n+\n   i = 0;\n   total = 0;\n   while (--count) {\n\n\nBut that's not sufficient to silence the warnings.  Next, I added a check that item is within the bounds of sizes[] (even though this is already established by the added check and the existing range check on count):\n\n\n   if (count > 3)\n     return -1;\n \n+  if (item >= count)\n+    return -1;\n+\n+  if (item >= 3)\n+    return -1;\n+\n   i = 0;\n   total = 0;\n   while (--count) {\n\n\nThe only thing I could find that would silence the warnings was:\n\n\n   if (count > 3)\n     return -1;\n \n+  if (item >= 3)\n+    return -1;\n+\n+  for (i = 0; i < 3; ++i)\n+    sizes[i] = 0;\n+\n   i = 0;\n   total = 0;\n   while (--count) {\n\n\n...which shouldn't be necessary, at least once a check is added that verifies item <= count.", "creation_time": "2012-01-04T02:17:24Z", "time": "2012-01-04T02:17:24Z", "attachment_id": null, "text": "I'm using clang version 3.1 (trunk 147127) for this.\n\nsizes[] is initialized from [0, count), so adding a check that item is [0, count) was my first thought:\n\n\n   if (count > 3)\n     return -1;\n \n+  if (item >= count)\n+    return -1;\n+\n   i = 0;\n   total = 0;\n   while (--count) {\n\n\nBut that's not sufficient to silence the warnings.  Next, I added a check that item is within the bounds of sizes[] (even though this is already established by the added check and the existing range check on count):\n\n\n   if (count > 3)\n     return -1;\n \n+  if (item >= count)\n+    return -1;\n+\n+  if (item >= 3)\n+    return -1;\n+\n   i = 0;\n   total = 0;\n   while (--count) {\n\n\nThe only thing I could find that would silence the warnings was:\n\n\n   if (count > 3)\n     return -1;\n \n+  if (item >= 3)\n+    return -1;\n+\n+  for (i = 0; i < 3; ++i)\n+    sizes[i] = 0;\n+\n   i = 0;\n   total = 0;\n   while (--count) {\n\n\n...which shouldn't be necessary, at least once a check is added that verifies item <= count."}, {"bug_id": 713310, "count": 4, "is_private": false, "tags": [], "id": 5953142, "text": "(In reply to Matthew Gregan [:kinetik] from comment #3)\n> ...which shouldn't be necessary, at least once a check is added that\n> verifies item <= count.\n\nYou can also add checks like if(foo)__builtin_unreachable(); Those telll the optimizer that foo must be false, and is a decent way to silence clang warnings.", "attachment_id": null, "time": "2012-01-04T03:15:55Z", "raw_text": "(In reply to Matthew Gregan [:kinetik] from comment #3)\n> ...which shouldn't be necessary, at least once a check is added that\n> verifies item <= count.\n\nYou can also add checks like if(foo)__builtin_unreachable(); Those telll the optimizer that foo must be false, and is a decent way to silence clang warnings.", "creation_time": "2012-01-04T03:15:55Z", "creator": "tterribe@vt.edu", "author": "tterribe@vt.edu"}]}}}