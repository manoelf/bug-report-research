{"comments": {}, "bugs": {"646225": {"comments": [{"id": 5378845, "is_private": false, "author": "jonathan.protzenko@gmail.com", "bug_id": 646225, "attachment_id": null, "creation_time": "2011-03-29T22:21:37Z", "tags": [], "count": 0, "time": "2011-03-29T22:21:37Z", "text": "So bug 574441 introduced fake headers (the ones with \"highwater mark\" (per :bienvenu's words)) that represent sent messages, waiting to be repalced with \"real headers\" once we get them from the server.\n\nWhen running getMessagesCollectionForHeaders on one of these headers, a totally unrelated message is returned. Symptoms: Thunderbird Conversations displays a totally unrelated conversation, followed by your message.\n\nThis sounds to me like a int overflow somewhere, and :asuth mentioned on IRC that the strtoul call from 636133 might be wrong, and may ought to be strtoull instead.", "creator": "jonathan.protzenko@gmail.com", "raw_text": "So bug 574441 introduced fake headers (the ones with \"highwater mark\" (per :bienvenu's words)) that represent sent messages, waiting to be repalced with \"real headers\" once we get them from the server.\n\nWhen running getMessagesCollectionForHeaders on one of these headers, a totally unrelated message is returned. Symptoms: Thunderbird Conversations displays a totally unrelated conversation, followed by your message.\n\nThis sounds to me like a int overflow somewhere, and :asuth mentioned on IRC that the strtoul call from 636133 might be wrong, and may ought to be strtoull instead."}, {"creator": "bugmail@asutherland.org", "raw_text": "Let me amend that by saying that it would be wrong if the message keys were 64-bit, but it seems like they are definitely 32-bit.  (I though the constant used in the test was 2^32, but it turned out to be a bit less than that...\n\nA potentially more possible thing would be that getMessageCollectionForHeaders is being passed a dead header and the attempt to get a messagekey from it returns something gibberishy which returns the wrong thing.  The query it constructs is based on folder and message key, which is pretty hard to go off the rails otherwise.", "text": "Let me amend that by saying that it would be wrong if the message keys were 64-bit, but it seems like they are definitely 32-bit.  (I though the constant used in the test was 2^32, but it turned out to be a bit less than that...\n\nA potentially more possible thing would be that getMessageCollectionForHeaders is being passed a dead header and the attempt to get a messagekey from it returns something gibberishy which returns the wrong thing.  The query it constructs is based on folder and message key, which is pretty hard to go off the rails otherwise.", "count": 1, "time": "2011-03-29T22:30:48Z", "attachment_id": null, "tags": [], "creation_time": "2011-03-29T22:30:48Z", "bug_id": 646225, "is_private": false, "author": "bugmail@asutherland.org", "id": 5378869}, {"attachment_id": null, "creation_time": "2011-04-18T18:44:58Z", "tags": [], "bug_id": 646225, "is_private": false, "author": "standard8@mozilla.com", "id": 5416354, "creator": "standard8@mozilla.com", "raw_text": "I don't think we can block 3.3 on this as it doesn't seem to be a user-visible error in Thunderbird by itself. We would, of course, take a fix for this.", "text": "I don't think we can block 3.3 on this as it doesn't seem to be a user-visible error in Thunderbird by itself. We would, of course, take a fix for this.", "count": 2, "time": "2011-04-18T18:44:58Z"}, {"bug_id": 646225, "text": "I'm getting these errors with Gloda dump enabled... investigation ongoing...\n\n2011-04-19 10:59:11\tgloda.datamodel\tINFO\tMessage with message key does not match expected header! (4D74DC9F.5000304@gmail.com expected, got 4DAD4ED6.5050104@gmail.com)\n2011-04-19 10:59:11\tgloda.datamodel\tINFO\tMessage with message key does not match expected header! (4D74DC9F.5000304@gmail.com expected, got 4DAD4ED6.5050104@gmail.com)\n2011-04-19 10:59:11\tgloda.datamodel\tINFO\tMessage with message key does not match expected header! (4D839451.3040108@gmail.com expected, got 4DAD4ED6.5050104@gmail.com)", "tags": [], "creation_time": "2011-04-19T09:04:49Z", "attachment_id": null, "raw_text": "I'm getting these errors with Gloda dump enabled... investigation ongoing...\n\n2011-04-19 10:59:11\tgloda.datamodel\tINFO\tMessage with message key does not match expected header! (4D74DC9F.5000304@gmail.com expected, got 4DAD4ED6.5050104@gmail.com)\n2011-04-19 10:59:11\tgloda.datamodel\tINFO\tMessage with message key does not match expected header! (4D74DC9F.5000304@gmail.com expected, got 4DAD4ED6.5050104@gmail.com)\n2011-04-19 10:59:11\tgloda.datamodel\tINFO\tMessage with message key does not match expected header! (4D839451.3040108@gmail.com expected, got 4DAD4ED6.5050104@gmail.com)", "creator": "jonathan.protzenko@gmail.com", "id": 5418034, "is_private": false, "author": "jonathan.protzenko@gmail.com", "time": "2011-04-19T09:04:49Z", "count": 3}, {"bug_id": 646225, "tags": [], "creation_time": "2011-04-19T12:26:39Z", "attachment_id": null, "id": 5418284, "author": "jonathan.protzenko@gmail.com", "is_private": false, "text": "Some notes for when asuth comes back from vacations:\n- the query that gloda uses when I issue my call to getMessagesCollectionForHeaders is\n\nSELECT * FROM messages INNER JOIN messagesText ON messages.id =\nmessagesText.rowid WHERE (id IN (SELECT id FROM messages WHERE (folderID IN\n(55)) AND (messageKey IN (4294967168))) AND +deleted = 0 AND +folderID IS NOT\nNULL AND +messageKey IS NOT NULL)\n\n- there's only one message selected, so I took a look at the inner query\n\nSELECT * FROM messages WHERE (folderID IN (55)) AND (messageKey IN (4294967168))\n\n- this actually returned three messages.\n\nI think that's an error. Gloda seems to pick up the msgKeyChanged notification properly, so I don't really know why this is happening...", "raw_text": "Some notes for when asuth comes back from vacations:\n- the query that gloda uses when I issue my call to getMessagesCollectionForHeaders is\n\nSELECT * FROM messages INNER JOIN messagesText ON messages.id =\nmessagesText.rowid WHERE (id IN (SELECT id FROM messages WHERE (folderID IN\n(55)) AND (messageKey IN (4294967168))) AND +deleted = 0 AND +folderID IS NOT\nNULL AND +messageKey IS NOT NULL)\n\n- there's only one message selected, so I took a look at the inner query\n\nSELECT * FROM messages WHERE (folderID IN (55)) AND (messageKey IN (4294967168))\n\n- this actually returned three messages.\n\nI think that's an error. Gloda seems to pick up the msgKeyChanged notification properly, so I don't really know why this is happening...", "creator": "jonathan.protzenko@gmail.com", "time": "2011-04-19T12:26:39Z", "count": 4}, {"attachment_id": null, "creation_time": "2011-04-19T13:33:55Z", "tags": [], "creator": "jonathan.protzenko@gmail.com", "raw_text": "More thoughts:\n- the part that actually performs the key update is updateMessageKeys from datastore.js\n- the query looks like \"UPDATE messages SET messageKey = ?1 WHERE id = ?2\");\" with\n  * ?1 being the correct new message key\n  * ?2 being 0, which leads me to think that there is something wrong happening there, which might incidentally be responsible for bug 646226, as gloda message IDs under 32 are not supposed to be valid,\n- the 0 is obtained from getGlodaState in index_msg.js where we go into the else-branch and return aMsgHdr.getUint32Property(GLODA_MESSAGE_ID_PROPERTY)\n\nI'll put this investigation on hold until asuth can confirm that I'm not going off the rails and wasting my time :-).", "bug_id": 646225, "text": "More thoughts:\n- the part that actually performs the key update is updateMessageKeys from datastore.js\n- the query looks like \"UPDATE messages SET messageKey = ?1 WHERE id = ?2\");\" with\n  * ?1 being the correct new message key\n  * ?2 being 0, which leads me to think that there is something wrong happening there, which might incidentally be responsible for bug 646226, as gloda message IDs under 32 are not supposed to be valid,\n- the 0 is obtained from getGlodaState in index_msg.js where we go into the else-branch and return aMsgHdr.getUint32Property(GLODA_MESSAGE_ID_PROPERTY)\n\nI'll put this investigation on hold until asuth can confirm that I'm not going off the rails and wasting my time :-).", "is_private": false, "count": 5, "time": "2011-04-19T13:33:55Z", "author": "jonathan.protzenko@gmail.com", "id": 5418399}, {"id": 5420493, "is_private": false, "time": "2011-04-20T03:50:16Z", "author": "bugmail@asutherland.org", "count": 6, "bug_id": 646225, "text": "Short answer, you are way on the rails; good job!\n\nYes, 0 seems like a very bad and illegal gloda id.  It will be a bit before I could directly look into it, but the most likely hypothetical (and unresearched) reasons would be:\n\n- The attribute is not on the message header when we go to look, either because we are using the wrong header, it is failing to be propagated, or by the time we look the header has been obsoleted.  Since the indexer goes out of its way to convert the message header to a [folder, message key] tuple to avoid that problem, it's unlikely that the last thing is sinking us, but this avoidance may be our problem.  Specifically, if we say \"hey, I noticed that header#FAKE is new, let's index it\" and then convert that to a note to ourself to index [some folder, FAKE], but don't update that tuple/the event-driven indexing job when messageKeyChanged happens, that could cause complications.\n\n- Similar deal but involving the pending commit tracker and the message key.  Perhaps we are not updating the pending commit tracker when the key changes, or we are using the post key where we mean to use the pre key.\n\n- Gloda or someone else is failing to commit changes to the .msf file prior to closing it, causing data loss.  This seems like it should not happen given that the indexer goes out of its way to explicitly commit things, etc.\n\n\nBased on what you are describing, it sounds like we are managing to perform the event-driven indexing for fake sent messages (assuming that 4294967168 is a legitimate speculative UID), but are screwing things up in the PendingCommitTracker in such a way that we leave the nsIMsgDBHdr thinking it is properly indexed, but the message key data completely out of sync.  Because we detect indexed-ness based on having a gloda id on an nsIMsgDBHdr but look it up by message key, it definitely sounds like the inconsistency is screwing things up fatally and the only thing that can fix it is a compaction pass.\n\nOne might ask why we still use the [folder id, message key] to get the collection for a message at this point if we could just rely on the gloda-id, especially since our failure in this case results in a major and obvious fast failure... and the sorta-answer is that it's desirable for the failure to be blatant, like we're seeing here.  I'm not strictly wedded to that call, but we probably want to error console it if we detect a mismatch if we change that logic...", "tags": [], "creation_time": "2011-04-20T03:50:16Z", "attachment_id": null, "raw_text": "Short answer, you are way on the rails; good job!\n\nYes, 0 seems like a very bad and illegal gloda id.  It will be a bit before I could directly look into it, but the most likely hypothetical (and unresearched) reasons would be:\n\n- The attribute is not on the message header when we go to look, either because we are using the wrong header, it is failing to be propagated, or by the time we look the header has been obsoleted.  Since the indexer goes out of its way to convert the message header to a [folder, message key] tuple to avoid that problem, it's unlikely that the last thing is sinking us, but this avoidance may be our problem.  Specifically, if we say \"hey, I noticed that header#FAKE is new, let's index it\" and then convert that to a note to ourself to index [some folder, FAKE], but don't update that tuple/the event-driven indexing job when messageKeyChanged happens, that could cause complications.\n\n- Similar deal but involving the pending commit tracker and the message key.  Perhaps we are not updating the pending commit tracker when the key changes, or we are using the post key where we mean to use the pre key.\n\n- Gloda or someone else is failing to commit changes to the .msf file prior to closing it, causing data loss.  This seems like it should not happen given that the indexer goes out of its way to explicitly commit things, etc.\n\n\nBased on what you are describing, it sounds like we are managing to perform the event-driven indexing for fake sent messages (assuming that 4294967168 is a legitimate speculative UID), but are screwing things up in the PendingCommitTracker in such a way that we leave the nsIMsgDBHdr thinking it is properly indexed, but the message key data completely out of sync.  Because we detect indexed-ness based on having a gloda id on an nsIMsgDBHdr but look it up by message key, it definitely sounds like the inconsistency is screwing things up fatally and the only thing that can fix it is a compaction pass.\n\nOne might ask why we still use the [folder id, message key] to get the collection for a message at this point if we could just rely on the gloda-id, especially since our failure in this case results in a major and obvious fast failure... and the sorta-answer is that it's desirable for the failure to be blatant, like we're seeing here.  I'm not strictly wedded to that call, but we probably want to error console it if we detect a mismatch if we change that logic...", "creator": "bugmail@asutherland.org"}, {"id": 5435110, "is_private": false, "author": "bugmail@asutherland.org", "bug_id": 646225, "creation_time": "2011-04-27T17:34:25Z", "tags": [], "attachment_id": null, "time": "2011-04-27T17:34:25Z", "count": 7, "text": "protz, are you waiting on additional feedback beyond comment 6 from me?  lemme know.", "raw_text": "protz, are you waiting on additional feedback beyond comment 6 from me?  lemme know.", "creator": "bugmail@asutherland.org"}, {"creation_time": "2011-04-30T09:53:32Z", "tags": [], "attachment_id": null, "bug_id": 646225, "is_private": false, "author": "jonathan.protzenko@gmail.com", "id": 5441088, "raw_text": "My theory is that bug 646556 caused invalid info to be stored in _keyChangedBatchInfo, and then, when another message would re-use the same fake message key later, it would pick up the old, outdated info from _keyChangedBatchInfo, and gloda would go all confused. But that's just a theory :-).", "creator": "jonathan.protzenko@gmail.com", "text": "My theory is that bug 646556 caused invalid info to be stored in _keyChangedBatchInfo, and then, when another message would re-use the same fake message key later, it would pick up the old, outdated info from _keyChangedBatchInfo, and gloda would go all confused. But that's just a theory :-).", "time": "2011-04-30T09:53:32Z", "count": 8}, {"raw_text": "Comment #5 was actually me discovering the root cause for bug 646226 ; comment #8 is wrong, the issue is still happening after landing the patch from bug 646226 ; the issue is still present after recreating global-messages-db.sqlite so there has to be something that results in entries with highwater message keys hanging around in the messages table. Since we're reusing these message keys, next time a message reuses an old key, getMessagesCollectionForHeaders finds the old entries in the messages table.", "creator": "jonathan.protzenko@gmail.com", "tags": [], "creation_time": "2011-05-05T21:06:24Z", "attachment_id": null, "text": "Comment #5 was actually me discovering the root cause for bug 646226 ; comment #8 is wrong, the issue is still happening after landing the patch from bug 646226 ; the issue is still present after recreating global-messages-db.sqlite so there has to be something that results in entries with highwater message keys hanging around in the messages table. Since we're reusing these message keys, next time a message reuses an old key, getMessagesCollectionForHeaders finds the old entries in the messages table.", "bug_id": 646225, "time": "2011-05-05T21:06:24Z", "author": "jonathan.protzenko@gmail.com", "count": 9, "is_private": false, "id": 5452044}, {"is_private": false, "time": "2011-05-07T08:37:29Z", "author": "jonathan.protzenko@gmail.com", "count": 10, "id": 5455098, "tags": [], "creation_time": "2011-05-07T08:37:29Z", "attachment_id": null, "raw_text": "My new color-coded debug output tells me that I do have a surprisingly high number of messages with the pseudoHdr Uint32 property still on them. I'd say a dozen or so. This means once in a while, a message I send doesn't get rid of that property.\n\nHowever, dumping the corresponding msgHdr's messageKey tells me that this is a regular message key, not a highwater one. Any idea how that could possibly happen?", "creator": "jonathan.protzenko@gmail.com", "bug_id": 646225, "text": "My new color-coded debug output tells me that I do have a surprisingly high number of messages with the pseudoHdr Uint32 property still on them. I'd say a dozen or so. This means once in a while, a message I send doesn't get rid of that property.\n\nHowever, dumping the corresponding msgHdr's messageKey tells me that this is a regular message key, not a highwater one. Any idea how that could possibly happen?"}, {"id": 5465332, "author": "jonathan.protzenko@gmail.com", "time": "2011-05-12T13:35:47Z", "count": 11, "is_private": false, "text": "Here's a procedure that worked for me. STR:\n- I'm in the unified inbox that also searches sent folders.\n- Send myself a message A (I'm running a fake smtp server, so nothing ends up being received).\n- Reply to the message that just appeared (message B).\n- Display the thread (I'm assuming you're running Thunderbird Conversations).\n- Start a new thread, by emailing yourself something (message C).\n- Reply to that new thread (message D).\n- Somehow message C flashed out of the view, leaving only message D.\n- Click on message D.\n- After a while, the collections for the two threads will be merged into one, and clicking on thread D will also return the messages from thread A.\n\nAndrew, I think having msgKeyChanged in index_msg.js invalidate all cache entries related to the old message key might be a good start. What do you think?", "bug_id": 646225, "raw_text": "Here's a procedure that worked for me. STR:\n- I'm in the unified inbox that also searches sent folders.\n- Send myself a message A (I'm running a fake smtp server, so nothing ends up being received).\n- Reply to the message that just appeared (message B).\n- Display the thread (I'm assuming you're running Thunderbird Conversations).\n- Start a new thread, by emailing yourself something (message C).\n- Reply to that new thread (message D).\n- Somehow message C flashed out of the view, leaving only message D.\n- Click on message D.\n- After a while, the collections for the two threads will be merged into one, and clicking on thread D will also return the messages from thread A.\n\nAndrew, I think having msgKeyChanged in index_msg.js invalidate all cache entries related to the old message key might be a good start. What do you think?", "creator": "jonathan.protzenko@gmail.com", "creation_time": "2011-05-12T13:35:47Z", "tags": [], "attachment_id": null}, {"bug_id": 646225, "creation_time": "2011-05-12T16:11:29Z", "tags": [], "attachment_id": null, "id": 5465667, "author": "jonathan.protzenko@gmail.com", "is_private": false, "text": "I blew up my database a few hours ago, and after a few minutes of testing (this includes restarting Thunderbird frequently) and sending out a lot of messages, I already have three messages in the gloda \"messages\" table, sharing the same messageKey (4294967168).", "raw_text": "I blew up my database a few hours ago, and after a few minutes of testing (this includes restarting Thunderbird frequently) and sending out a lot of messages, I already have three messages in the gloda \"messages\" table, sharing the same messageKey (4294967168).", "creator": "jonathan.protzenko@gmail.com", "time": "2011-05-12T16:11:29Z", "count": 12}, {"bug_id": 646225, "creation_time": "2011-05-12T17:46:31Z", "tags": [], "attachment_id": null, "id": 5465978, "is_private": false, "author": "bugmail@asutherland.org", "text": "(In reply to comment #11)\n> Andrew, I think having msgKeyChanged in index_msg.js invalidate all cache\n> entries related to the old message key might be a good start. What do you\n> think?\n\nBased on your characterization, I believe the problem from Thunderbird's conversation's perspective is:\n\nP1) Its getMessageCollectionForHeaders is returning messages from another conversation.\n\nThis is happening because:\n\nP2a) Gloda.getMessageCollectionForHeaders builds queries based on message keys and the query is never updated even when message keys change.  This is sorta okay because:\n\nP2b) GlodaDatastore.updateMessageKeys never generates itemsModified notifications when it updates the in-memory representations, but unfortunately...\n\nP2c) The fake message header keys can be reused.  So a long-lived getMessageCollectionForHeaders query that is issued on a fake header will keep the results with its query, but whenever any new fake-headers are indexed, they may *also* match the query, and so get smooshed in.\n\n\nI believe the phenomenon \"Somehow message C flashed out of the view, leaving only message D.\" is due to the fact that replying to a message is a dirtying event that will cause the message to be reindexed (because of the replied-to flag).  As a result, gloda will reindex the message and generate an itemsModified event which will cause all unfrozen to re-evaluate their queries... since the query is on the (folderID, fake message key) but the message now has value (folderID, real message key), it gets removed from the query set.\n\nThe good news is that it sounds like, apart from Gloda.getMessageCollectionForHeaders producing unreliable collections, it sounds like everything else is actually working, which is not a bad thing.  Sadly, we don't actually have the unit tests to prove it.\n\n\nI believe I've broadly characterized the solution set in IRC, but I'm going to revisit our possible options here so there's a canonical answer:\n\nS1) Stop using (folder ID, message key) constraints for getMessageCollectionForHeader(s) and exclusively use gloda-id's.  The problem is that un-indexed messages have no gloda-id (which is why we use folder/msgkey).  We could speculatively issue gloda-id's (SQLite does not issue the id's, we do, and we do so from the main thread), but because people can get at nsIMsgDBHdr's before the spam classifier is run, one potential danger is that we may issue id's to messages that will never get indexed.  Since we will still get msgsClassified notifications for these headers, however, it's possible we could deal with this at the cost of some extra property checking on messages we would otherwise ignore.\n\nnote: it would be critical that we use the glodaDirty flag (or something similar) to mark the gloda-id as speculative.  We would need to audit the current uses of PendingCommitTracker.getGlodaState and potentially change some of them to either be aware of the speculative id or pretend it does not exist.\n\n\nS2) Use gloda-id queries when we have gloda-id's, use (folder, message key) queries when we don't.  Permute (folder, message key) queries in-memory on msgKeyChanged events and I fear also deal with move-notifications.  We could optionally permute/promote the (folder, message key) constraints to gloda-id constraints once a message gets indexed, but that wouldn't save us from the message key tracking stuff.\n\n\nS3) Declare that getMessageCollectionForHeader(s) does not work on messages that are not yet indexed.  Make it the problem of Thunderbird Conversations/friends to deal with these complicating shenanigans themselves.\n\nThis would be more tenable if we were still planning to develop a UI that only exposed gloda-indexed messages; right now it seems like it would just be a jerky cop-out.  The counterpoint is that it's not clear anything in-tree is going to get bit by this right now, as the multi-message/thread summaries may potentially end up re-computing and re-querying when the message keys change, and show-conversation uses queries based on the conversation-id...", "raw_text": "(In reply to comment #11)\n> Andrew, I think having msgKeyChanged in index_msg.js invalidate all cache\n> entries related to the old message key might be a good start. What do you\n> think?\n\nBased on your characterization, I believe the problem from Thunderbird's conversation's perspective is:\n\nP1) Its getMessageCollectionForHeaders is returning messages from another conversation.\n\nThis is happening because:\n\nP2a) Gloda.getMessageCollectionForHeaders builds queries based on message keys and the query is never updated even when message keys change.  This is sorta okay because:\n\nP2b) GlodaDatastore.updateMessageKeys never generates itemsModified notifications when it updates the in-memory representations, but unfortunately...\n\nP2c) The fake message header keys can be reused.  So a long-lived getMessageCollectionForHeaders query that is issued on a fake header will keep the results with its query, but whenever any new fake-headers are indexed, they may *also* match the query, and so get smooshed in.\n\n\nI believe the phenomenon \"Somehow message C flashed out of the view, leaving only message D.\" is due to the fact that replying to a message is a dirtying event that will cause the message to be reindexed (because of the replied-to flag).  As a result, gloda will reindex the message and generate an itemsModified event which will cause all unfrozen to re-evaluate their queries... since the query is on the (folderID, fake message key) but the message now has value (folderID, real message key), it gets removed from the query set.\n\nThe good news is that it sounds like, apart from Gloda.getMessageCollectionForHeaders producing unreliable collections, it sounds like everything else is actually working, which is not a bad thing.  Sadly, we don't actually have the unit tests to prove it.\n\n\nI believe I've broadly characterized the solution set in IRC, but I'm going to revisit our possible options here so there's a canonical answer:\n\nS1) Stop using (folder ID, message key) constraints for getMessageCollectionForHeader(s) and exclusively use gloda-id's.  The problem is that un-indexed messages have no gloda-id (which is why we use folder/msgkey).  We could speculatively issue gloda-id's (SQLite does not issue the id's, we do, and we do so from the main thread), but because people can get at nsIMsgDBHdr's before the spam classifier is run, one potential danger is that we may issue id's to messages that will never get indexed.  Since we will still get msgsClassified notifications for these headers, however, it's possible we could deal with this at the cost of some extra property checking on messages we would otherwise ignore.\n\nnote: it would be critical that we use the glodaDirty flag (or something similar) to mark the gloda-id as speculative.  We would need to audit the current uses of PendingCommitTracker.getGlodaState and potentially change some of them to either be aware of the speculative id or pretend it does not exist.\n\n\nS2) Use gloda-id queries when we have gloda-id's, use (folder, message key) queries when we don't.  Permute (folder, message key) queries in-memory on msgKeyChanged events and I fear also deal with move-notifications.  We could optionally permute/promote the (folder, message key) constraints to gloda-id constraints once a message gets indexed, but that wouldn't save us from the message key tracking stuff.\n\n\nS3) Declare that getMessageCollectionForHeader(s) does not work on messages that are not yet indexed.  Make it the problem of Thunderbird Conversations/friends to deal with these complicating shenanigans themselves.\n\nThis would be more tenable if we were still planning to develop a UI that only exposed gloda-indexed messages; right now it seems like it would just be a jerky cop-out.  The counterpoint is that it's not clear anything in-tree is going to get bit by this right now, as the multi-message/thread summaries may potentially end up re-computing and re-querying when the message keys change, and show-conversation uses queries based on the conversation-id...", "creator": "bugmail@asutherland.org", "time": "2011-05-12T17:46:31Z", "count": 13}, {"count": 14, "time": "2011-05-12T17:49:02Z", "text": "Oh, and I left out a hacky workaround, which would be to make sure we don't reuse fake-message-header values in a single session.  I fear that might eventually result in sadness for the IMAP layer, however, if it ended up causing integer overflow/wraparound or any of the class of situations where we start colliding with real UIDs (or apparent UID space, even if we don't collide) or going into gibberish number territory.", "creator": "bugmail@asutherland.org", "raw_text": "Oh, and I left out a hacky workaround, which would be to make sure we don't reuse fake-message-header values in a single session.  I fear that might eventually result in sadness for the IMAP layer, however, if it ended up causing integer overflow/wraparound or any of the class of situations where we start colliding with real UIDs (or apparent UID space, even if we don't collide) or going into gibberish number territory.", "id": 5465985, "author": "bugmail@asutherland.org", "is_private": false, "bug_id": 646225, "attachment_id": null, "creation_time": "2011-05-12T17:49:02Z", "tags": []}, {"time": "2011-05-12T18:30:46Z", "count": 15, "text": "I could ameliorate this by paying attention to the UID returned on the append operation if the server supports UIDPLUS. In this case, I wouldn't have to use a fake UID but could use the real one. Since UIDPLUS support is more common than not, that could free us up to choose a relatively less efficient solution for the fake key issue. Sorry for not suggesting this earlier, but I didn't know this was going to be such a painful issue.\n\nIt would also be possible to be much less aggressive about re-using fake msg keys. In the current situation, does Thunderbird need to get shut down before re-using fake msg keys won't cause a problem?", "raw_text": "I could ameliorate this by paying attention to the UID returned on the append operation if the server supports UIDPLUS. In this case, I wouldn't have to use a fake UID but could use the real one. Since UIDPLUS support is more common than not, that could free us up to choose a relatively less efficient solution for the fake key issue. Sorry for not suggesting this earlier, but I didn't know this was going to be such a painful issue.\n\nIt would also be possible to be much less aggressive about re-using fake msg keys. In the current situation, does Thunderbird need to get shut down before re-using fake msg keys won't cause a problem?", "creator": "mozilla@davidbienvenu.org", "id": 5466107, "is_private": false, "author": "mozilla@davidbienvenu.org", "bug_id": 646225, "creation_time": "2011-05-12T18:30:46Z", "tags": [], "attachment_id": null}, {"text": "(In reply to comment #15)\n> It would also be possible to be much less aggressive about re-using fake msg\n> keys. In the current situation, does Thunderbird need to get shut down\n> before re-using fake msg keys won't cause a problem?\n\nRight now it's a question of the lifetime of gloda collections built from getMessageCollectionForHeader(s), which is really a question of the lifetime of things being displayed in the message summary pane, either the built-in stuff of Thunderbird Conversations.", "creator": "bugmail@asutherland.org", "raw_text": "(In reply to comment #15)\n> It would also be possible to be much less aggressive about re-using fake msg\n> keys. In the current situation, does Thunderbird need to get shut down\n> before re-using fake msg keys won't cause a problem?\n\nRight now it's a question of the lifetime of gloda collections built from getMessageCollectionForHeader(s), which is really a question of the lifetime of things being displayed in the message summary pane, either the built-in stuff of Thunderbird Conversations.", "count": 16, "time": "2011-05-12T20:57:48Z", "bug_id": 646225, "attachment_id": null, "tags": [], "creation_time": "2011-05-12T20:57:48Z", "id": 5466531, "author": "bugmail@asutherland.org", "is_private": false}, {"bug_id": 646225, "text": "Created attachment 532041\nuse appenduid result\n\nprotz, do you want to give this patch a try?\n\nasuth, did your last comment mean that once a user selects a different conversation, then we can re-use fake keys w/o this bug manifesting?", "attachment_id": 532041, "creation_time": "2011-05-12T22:14:47Z", "tags": [], "creator": "mozilla@davidbienvenu.org", "raw_text": "protz, do you want to give this patch a try?\n\nasuth, did your last comment mean that once a user selects a different conversation, then we can re-use fake keys w/o this bug manifesting?", "id": 5466775, "is_private": false, "count": 17, "author": "mozilla@davidbienvenu.org", "time": "2011-05-12T22:14:47Z"}, {"bug_id": 646225, "creation_time": "2011-05-12T22:15:56Z", "tags": [], "attachment_id": null, "id": 5466778, "is_private": false, "author": "jonathan.protzenko@gmail.com", "text": "Thanks for all the recap and the extensive explanations. It's late so I might not understand everything properly, but how does that account for the fact that I've got entries in the messages table that have a highwater mark and are never updated with the real message key?", "raw_text": "Thanks for all the recap and the extensive explanations. It's late so I might not understand everything properly, but how does that account for the fact that I've got entries in the messages table that have a highwater mark and are never updated with the real message key?", "creator": "jonathan.protzenko@gmail.com", "time": "2011-05-12T22:15:56Z", "count": 18}, {"attachment_id": null, "tags": [], "creation_time": "2011-05-12T22:16:23Z", "bug_id": 646225, "is_private": false, "author": "jonathan.protzenko@gmail.com", "id": 5466782, "creator": "jonathan.protzenko@gmail.com", "raw_text": "David, I'll give this a try tomorrow, right now, I'm afraid I need to sleep :-)", "text": "David, I'll give this a try tomorrow, right now, I'm afraid I need to sleep :-)", "count": 19, "time": "2011-05-12T22:16:23Z"}, {"id": 5466956, "count": 20, "author": "bugmail@asutherland.org", "time": "2011-05-12T23:06:19Z", "is_private": false, "text": "(In reply to comment #18)\n...\n> but how does that account for the\n> fact that I've got entries in the messages table that have a highwater mark\n> and are never updated with the real message key?\n\nThis suggests that msgsClassified is never being generated for some fake-made-real headers after their msgKeyChanged notifications are received.  gloda's msgKeyChanged handler just accumulates the changes in an in-memory structure; it requires a msgsClassified event to be generated for the messages subsequently for the changes to affect the in-memory and on-disk gloda representations.", "bug_id": 646225, "creator": "bugmail@asutherland.org", "raw_text": "(In reply to comment #18)\n...\n> but how does that account for the\n> fact that I've got entries in the messages table that have a highwater mark\n> and are never updated with the real message key?\n\nThis suggests that msgsClassified is never being generated for some fake-made-real headers after their msgKeyChanged notifications are received.  gloda's msgKeyChanged handler just accumulates the changes in an in-memory structure; it requires a msgsClassified event to be generated for the messages subsequently for the changes to affect the in-memory and on-disk gloda representations.", "attachment_id": null, "creation_time": "2011-05-12T23:06:19Z", "tags": []}, {"bug_id": 646225, "attachment_id": null, "creation_time": "2011-05-12T23:07:43Z", "tags": [], "id": 5466963, "is_private": false, "author": "bugmail@asutherland.org", "text": "(In reply to comment #17)\n> asuth, did your last comment mean that once a user selects a different\n> conversation, then we can re-use fake keys w/o this bug manifesting?\n\nYes, although I cringe at the thought of the presentation layer hinting to the IMAP layer about such things.", "creator": "bugmail@asutherland.org", "raw_text": "(In reply to comment #17)\n> asuth, did your last comment mean that once a user selects a different\n> conversation, then we can re-use fake keys w/o this bug manifesting?\n\nYes, although I cringe at the thought of the presentation layer hinting to the IMAP layer about such things.", "count": 21, "time": "2011-05-12T23:07:43Z"}, {"count": 22, "time": "2011-05-12T23:12:21Z", "creator": "mozilla@davidbienvenu.org", "raw_text": "(In reply to comment #21)\n> (In reply to comment #17)\n> > asuth, did your last comment mean that once a user selects a different\n> > conversation, then we can re-use fake keys w/o this bug manifesting?\n> \n> Yes, although I cringe at the thought of the presentation layer hinting to\n> the IMAP layer about such things.\n\nHa, that ain't happening. I was just trying to understand. So if I didn't reuse fake keys until I had to, the failure case would be the user staying on the same conversation and sending roughly 128 or 256 messages instead of 2.\n\nThough I suppose extensions could do all sorts of funky things like hold onto message collections.", "text": "(In reply to comment #21)\n> (In reply to comment #17)\n> > asuth, did your last comment mean that once a user selects a different\n> > conversation, then we can re-use fake keys w/o this bug manifesting?\n> \n> Yes, although I cringe at the thought of the presentation layer hinting to\n> the IMAP layer about such things.\n\nHa, that ain't happening. I was just trying to understand. So if I didn't reuse fake keys until I had to, the failure case would be the user staying on the same conversation and sending roughly 128 or 256 messages instead of 2.\n\nThough I suppose extensions could do all sorts of funky things like hold onto message collections.", "is_private": false, "author": "mozilla@davidbienvenu.org", "id": 5466977, "attachment_id": null, "tags": [], "creation_time": "2011-05-12T23:12:21Z", "bug_id": 646225}, {"id": 5467015, "is_private": false, "count": 23, "author": "mozilla@davidbienvenu.org", "time": "2011-05-12T23:29:56Z", "bug_id": 646225, "text": "(In reply to comment #20)\n\n> This suggests that msgsClassified is never being generated for some\n> fake-made-real headers after their msgKeyChanged notifications are received.\n> gloda's msgKeyChanged handler just accumulates the changes in an in-memory\n> structure; it requires a msgsClassified event to be generated for the\n> messages subsequently for the changes to affect the in-memory and on-disk\n> gloda representations.\n\nThis would mean that there's some way for newly downloaded imap headers not to cause a msgsClassified event, which would mean that gloda would never index them. If this happened, we'd see gloda not knowing about a lot of messages, I would think. I don't think there's anything special about the fake-made-real headers at header download time, other than the fact that we've sent a NotifyMsgKeyChanged notification.", "attachment_id": null, "creation_time": "2011-05-12T23:29:56Z", "tags": [], "creator": "mozilla@davidbienvenu.org", "raw_text": "(In reply to comment #20)\n\n> This suggests that msgsClassified is never being generated for some\n> fake-made-real headers after their msgKeyChanged notifications are received.\n> gloda's msgKeyChanged handler just accumulates the changes in an in-memory\n> structure; it requires a msgsClassified event to be generated for the\n> messages subsequently for the changes to affect the in-memory and on-disk\n> gloda representations.\n\nThis would mean that there's some way for newly downloaded imap headers not to cause a msgsClassified event, which would mean that gloda would never index them. If this happened, we'd see gloda not knowing about a lot of messages, I would think. I don't think there's anything special about the fake-made-real headers at header download time, other than the fact that we've sent a NotifyMsgKeyChanged notification."}, {"text": "(In reply to comment #23)\n> This would mean that there's some way for newly downloaded imap headers not\n> to cause a msgsClassified event, which would mean that gloda would never\n> index them. If this happened, we'd see gloda not knowing about a lot of\n> messages, I would think. I don't think there's anything special about the\n> fake-made-real headers at header download time, other than the fact that\n> we've sent a NotifyMsgKeyChanged notification.\n\nYes, that was (probably) wrong.  I have thought through some stuff that I did not think about in comment 13 because the STR did not mention the messages table issue.\n\nLong hypothesis short: msgKeyChanged is happening *during* the gloda indexing process for the fake header message.\n\nLong solution short: msgKeyChanged needs to see if we are actively indexing the message in question and, if so, adjust internal state.  It would also be nice if we could update the entries for the current job for messages not yet indexed or queued jobs.  I believe the indexing logic will operate correctly if we fail to do so in those other cases, we may just end up indexing some messages twice...\n\nWe likely do not want to use the job killing mechanism because we would need to complicate the job-killing mechanism a lot since we would not want to forget about indexing any other messages in the current job.  It's not required for correctness, just timeliness.  (The folder compaction logic does this, and so is slightly over-aggressive; it coincidentally was originally the only kind of event that could change message keys.)\n\nAn alternate means of addressing this would be a variant of solution S1 from comment 13 where we label all messages with their speculative gloda-id's when we mark them for enqueueing.", "bug_id": 646225, "raw_text": "(In reply to comment #23)\n> This would mean that there's some way for newly downloaded imap headers not\n> to cause a msgsClassified event, which would mean that gloda would never\n> index them. If this happened, we'd see gloda not knowing about a lot of\n> messages, I would think. I don't think there's anything special about the\n> fake-made-real headers at header download time, other than the fact that\n> we've sent a NotifyMsgKeyChanged notification.\n\nYes, that was (probably) wrong.  I have thought through some stuff that I did not think about in comment 13 because the STR did not mention the messages table issue.\n\nLong hypothesis short: msgKeyChanged is happening *during* the gloda indexing process for the fake header message.\n\nLong solution short: msgKeyChanged needs to see if we are actively indexing the message in question and, if so, adjust internal state.  It would also be nice if we could update the entries for the current job for messages not yet indexed or queued jobs.  I believe the indexing logic will operate correctly if we fail to do so in those other cases, we may just end up indexing some messages twice...\n\nWe likely do not want to use the job killing mechanism because we would need to complicate the job-killing mechanism a lot since we would not want to forget about indexing any other messages in the current job.  It's not required for correctness, just timeliness.  (The folder compaction logic does this, and so is slightly over-aggressive; it coincidentally was originally the only kind of event that could change message keys.)\n\nAn alternate means of addressing this would be a variant of solution S1 from comment 13 where we label all messages with their speculative gloda-id's when we mark them for enqueueing.", "creator": "bugmail@asutherland.org", "tags": [], "creation_time": "2011-05-13T00:03:16Z", "attachment_id": null, "id": 5467086, "time": "2011-05-13T00:03:16Z", "author": "bugmail@asutherland.org", "count": 24, "is_private": false}, {"id": 5473485, "author": "mozilla@davidbienvenu.org", "is_private": false, "bug_id": 646225, "creation_time": "2011-05-16T22:10:13Z", "tags": [], "attachment_id": 532041, "time": "2011-05-16T22:10:13Z", "count": 25, "text": "Comment on attachment 532041\nuse appenduid result\n\nOutside of the conversations context, this fix means we usually won't have to download headers for messages appended to the drafts or sent folders.", "raw_text": "Outside of the conversations context, this fix means we usually won't have to download headers for messages appended to the drafts or sent folders.", "creator": "mozilla@davidbienvenu.org"}, {"text": "thx for fixing the requestee, Ludo.", "bug_id": 646225, "raw_text": "thx for fixing the requestee, Ludo.", "creator": "mozilla@davidbienvenu.org", "tags": [], "creation_time": "2011-05-17T14:35:18Z", "attachment_id": null, "id": 5474742, "author": "mozilla@davidbienvenu.org", "time": "2011-05-17T14:35:18Z", "count": 26, "is_private": false}, {"id": 5485976, "count": 27, "time": "2011-05-23T08:51:42Z", "author": "jonathan.protzenko@gmail.com", "is_private": false, "text": "Sorry, stupid bugzilla tweaks bug.", "bug_id": 646225, "creator": "jonathan.protzenko@gmail.com", "raw_text": "Sorry, stupid bugzilla tweaks bug.", "attachment_id": null, "tags": [], "creation_time": "2011-05-23T08:51:42Z"}, {"bug_id": 646225, "text": "Created attachment 534385\nBacktrace\n\nI've had segfaults with the patch on, in the SetMsgAppendUid method, which I believe was affected by the patch. This segfault is 100% reproducible. It is a move of a message via drag-and-drop accross different accounts.", "attachment_id": 534385, "tags": [], "creation_time": "2011-05-23T09:22:10Z", "creator": "jonathan.protzenko@gmail.com", "raw_text": "I've had segfaults with the patch on, in the SetMsgAppendUid method, which I believe was affected by the patch. This segfault is 100% reproducible. It is a move of a message via drag-and-drop accross different accounts.", "id": 5486016, "is_private": false, "count": 28, "time": "2011-05-23T09:22:10Z", "author": "jonathan.protzenko@gmail.com"}, {"author": "jonathan.protzenko@gmail.com", "is_private": false, "id": 5486030, "tags": [], "creation_time": "2011-05-23T09:28:39Z", "attachment_id": 532041, "bug_id": 646225, "time": "2011-05-23T09:28:39Z", "count": 29, "raw_text": "feedback- because of the segfault", "creator": "jonathan.protzenko@gmail.com", "text": "Comment on attachment 532041\nuse appenduid result\n\nfeedback- because of the segfault"}, {"is_private": false, "time": "2011-05-23T14:17:06Z", "author": "mozilla@davidbienvenu.org", "count": 30, "id": 5486361, "creation_time": "2011-05-23T14:17:06Z", "tags": [], "attachment_id": 534431, "raw_text": "good catch, this should fix the crash.", "creator": "mozilla@davidbienvenu.org", "bug_id": 646225, "text": "Created attachment 534431\nfix for crash\n\ngood catch, this should fix the crash."}, {"id": 5486379, "author": "neil@httl.net", "time": "2011-05-23T14:24:56Z", "count": 31, "is_private": false, "text": "Comment on attachment 534431\nfix for crash\n\n>-  nsCOMPtr<nsImapMailCopyState> m_copyState;\nBah, how many more of these bogus references are there :-(", "bug_id": 646225, "raw_text": ">-  nsCOMPtr<nsImapMailCopyState> m_copyState;\nBah, how many more of these bogus references are there :-(", "creator": "neil@httl.net", "creation_time": "2011-05-23T14:24:56Z", "tags": [], "attachment_id": 534431}, {"bug_id": 646225, "text": "pushed to trunk http://hg.mozilla.org/comm-central/rev/5d098294efd2 in the hopes of getting it for TB 6.", "attachment_id": null, "tags": [], "creation_time": "2011-05-23T23:35:09Z", "creator": "mozilla@davidbienvenu.org", "raw_text": "pushed to trunk http://hg.mozilla.org/comm-central/rev/5d098294efd2 in the hopes of getting it for TB 6.", "id": 5488030, "is_private": false, "count": 32, "time": "2011-05-23T23:35:09Z", "author": "mozilla@davidbienvenu.org"}, {"text": "David, shall we try to land this on Miramar?", "creator": "jonathan.protzenko@gmail.com", "raw_text": "David, shall we try to land this on Miramar?", "count": 33, "time": "2011-05-24T06:23:49Z", "bug_id": 646225, "attachment_id": null, "creation_time": "2011-05-24T06:23:49Z", "tags": [], "id": 5488487, "is_private": false, "author": "jonathan.protzenko@gmail.com"}, {"is_private": false, "time": "2011-05-24T13:21:58Z", "author": "mozilla@davidbienvenu.org", "count": 34, "id": 5489071, "tags": [], "creation_time": "2011-05-24T13:21:58Z", "attachment_id": null, "raw_text": "I'd like it on Miramar, but I'll let Standard8 decide. Is my understanding correct that this contributes to a more or less permanent gloda issue of bad conversations?", "creator": "mozilla@davidbienvenu.org", "bug_id": 646225, "text": "I'd like it on Miramar, but I'll let Standard8 decide. Is my understanding correct that this contributes to a more or less permanent gloda issue of bad conversations?"}, {"id": 5490041, "count": 35, "author": "bugmail@asutherland.org", "time": "2011-05-24T18:35:11Z", "is_private": false, "text": "I'm reopening this bug because bienvenu's fix mitigates the underlying gloda problem I described on the bug when UIDPLUS is available, but it doesn't fix gloda's problem which is what is characterized in the subject.  This bug should be re-subjected and the gloda problem cloned off to another bug with the analysis thread if we want to mark this one fixed.\n\nFrom a triage perspective, if miramar has any of our recent msgKeyChanged escapades (I think it does), it probably really wants the migitation fix...", "bug_id": 646225, "creator": "bugmail@asutherland.org", "raw_text": "I'm reopening this bug because bienvenu's fix mitigates the underlying gloda problem I described on the bug when UIDPLUS is available, but it doesn't fix gloda's problem which is what is characterized in the subject.  This bug should be re-subjected and the gloda problem cloned off to another bug with the analysis thread if we want to mark this one fixed.\n\nFrom a triage perspective, if miramar has any of our recent msgKeyChanged escapades (I think it does), it probably really wants the migitation fix...", "attachment_id": null, "tags": [], "creation_time": "2011-05-24T18:35:11Z"}, {"is_private": false, "time": "2011-05-24T18:39:44Z", "author": "mozilla@davidbienvenu.org", "count": 36, "id": 5490054, "tags": [], "creation_time": "2011-05-24T18:39:44Z", "attachment_id": null, "raw_text": "er, yes, sorry about that - kept meaning to comment to that effect. And miramar does have the msgKeyChanged fun in it.\n\nI could simply file a new bug that describes the appenduid fix, which has other nice benefits, and just mark it fixed, and leave this one open.", "creator": "mozilla@davidbienvenu.org", "bug_id": 646225, "text": "er, yes, sorry about that - kept meaning to comment to that effect. And miramar does have the msgKeyChanged fun in it.\n\nI could simply file a new bug that describes the appenduid fix, which has other nice benefits, and just mark it fixed, and leave this one open."}, {"creator": "standard8@mozilla.com", "raw_text": "Ok, given the comments, I think I'd rather get this fixed now and ready for testing before the first beta rather than after.", "text": "Comment on attachment 534431\nfix for crash\n\nOk, given the comments, I think I'd rather get this fixed now and ready for testing before the first beta rather than after.", "count": 37, "time": "2011-05-26T11:31:12Z", "attachment_id": 534431, "tags": [], "creation_time": "2011-05-26T11:31:12Z", "bug_id": 646225, "author": "standard8@mozilla.com", "is_private": false, "id": 5494615}, {"creation_time": "2011-05-26T13:18:34Z", "tags": [], "attachment_id": null, "raw_text": "http://hg.mozilla.org/releases/comm-miramar/rev/205f41f6883a", "creator": "jonathan.protzenko@gmail.com", "bug_id": 646225, "text": "http://hg.mozilla.org/releases/comm-miramar/rev/205f41f6883a", "is_private": false, "time": "2011-05-26T13:18:34Z", "author": "jonathan.protzenko@gmail.com", "count": 38, "id": 5494753}, {"id": 6323289, "count": 39, "time": "2012-05-21T08:16:57Z", "author": "jonathan.protzenko@gmail.com", "is_private": false, "text": "Hi,\n\nhttp://getsatisfaction.com/mozilla_messaging/topics/thunderbird_conversations_not_working_correctly_on_osx?utm_content=topic_link&utm_medium=email&utm_source=reply_notification seems to imply that this problem has gotten worse. I unfortunately don't have time to work on this :(.\n\nThanks,\n\njonathan", "bug_id": 646225, "creator": "jonathan.protzenko@gmail.com", "raw_text": "Hi,\n\nhttp://getsatisfaction.com/mozilla_messaging/topics/thunderbird_conversations_not_working_correctly_on_osx?utm_content=topic_link&utm_medium=email&utm_source=reply_notification seems to imply that this problem has gotten worse. I unfortunately don't have time to work on this :(.\n\nThanks,\n\njonathan", "attachment_id": null, "tags": [], "creation_time": "2012-05-21T08:16:57Z"}, {"author": "sean@pedorro.com", "time": "2012-07-05T16:05:14Z", "count": 40, "is_private": false, "id": 6446916, "raw_text": "Message A is the last message in a valid thread.\nMessage B is an entirely new message (no 'reply', 'edit as new', or anything else) followed by its subsequent thread.\n\nOther attachments show these message sources including unrelated ID's.", "creator": "sean@pedorro.com", "tags": [], "creation_time": "2012-07-05T16:05:14Z", "attachment_id": 639364, "text": "Created attachment 639364\nInbox showing improperly threaded messages\n\nMessage A is the last message in a valid thread.\nMessage B is an entirely new message (no 'reply', 'edit as new', or anything else) followed by its subsequent thread.\n\nOther attachments show these message sources including unrelated ID's.", "bug_id": 646225}, {"id": 6446919, "is_private": false, "author": "sean@pedorro.com", "time": "2012-07-05T16:05:57Z", "count": 41, "bug_id": 646225, "text": "Created attachment 639365\nMessage A from improperly threaded messages", "tags": [], "creation_time": "2012-07-05T16:05:57Z", "attachment_id": 639365, "raw_text": "", "creator": "sean@pedorro.com"}, {"id": 6446922, "is_private": false, "count": 42, "author": "sean@pedorro.com", "time": "2012-07-05T16:06:30Z", "bug_id": 646225, "text": "Created attachment 639366\nMessage B from improperly threaded messages", "attachment_id": 639366, "creation_time": "2012-07-05T16:06:30Z", "tags": [], "creator": "sean@pedorro.com", "raw_text": ""}, {"text": "I don't know if this is particularly helpful at this point, but I've attached some screenshots showing this erroneous threading.  I've also included the source (including message ID's) from the two messages that were associated but shouldn't have been.", "creator": "sean@pedorro.com", "raw_text": "I don't know if this is particularly helpful at this point, but I've attached some screenshots showing this erroneous threading.  I've also included the source (including message ID's) from the two messages that were associated but shouldn't have been.", "count": 43, "time": "2012-07-05T16:14:23Z", "bug_id": 646225, "attachment_id": null, "tags": [], "creation_time": "2012-07-05T16:14:23Z", "id": 6446953, "is_private": false, "author": "sean@pedorro.com"}, {"author": "jonathan.protzenko@gmail.com", "is_private": false, "id": 6447135, "tags": [], "creation_time": "2012-07-05T17:08:28Z", "attachment_id": null, "bug_id": 646225, "time": "2012-07-05T17:08:28Z", "count": 44, "raw_text": "Hi Sean,\n\nThanks for adding some information to the bug. The problem is well-known and there are potential fixes outlined in comment #24; what we need is just someone with enough time to dive into the code and fix this :).\n\nShould something happen, you'll see some action in this bug!\n\nCheers,\n\njonathan", "creator": "jonathan.protzenko@gmail.com", "text": "Hi Sean,\n\nThanks for adding some information to the bug. The problem is well-known and there are potential fixes outlined in comment #24; what we need is just someone with enough time to dive into the code and fix this :).\n\nShould something happen, you'll see some action in this bug!\n\nCheers,\n\njonathan"}, {"id": 6447204, "author": "sean@pedorro.com", "is_private": false, "bug_id": 646225, "creation_time": "2012-07-05T17:24:29Z", "tags": [], "attachment_id": null, "time": "2012-07-05T17:24:29Z", "count": 45, "text": "Yeah - I'd read the thread and figured these wouldn't be much help.  I've been thinking about bugging my manager to give us 1-2 hrs per week of Google-style 'undirected' development time.  If I can convince him of it, I may start by digging into this bug because it's been driving me NUTZZ!\n\nBTW - thanks for creating the Conversations plugin.  IMHO that alone makes TB the #1 desktop email client. It needs to be officially integrated, supported, & maintained by Mozilla.", "raw_text": "Yeah - I'd read the thread and figured these wouldn't be much help.  I've been thinking about bugging my manager to give us 1-2 hrs per week of Google-style 'undirected' development time.  If I can convince him of it, I may start by digging into this bug because it's been driving me NUTZZ!\n\nBTW - thanks for creating the Conversations plugin.  IMHO that alone makes TB the #1 desktop email client. It needs to be officially integrated, supported, & maintained by Mozilla.", "creator": "sean@pedorro.com"}, {"bug_id": 646225, "tags": [], "creation_time": "2012-08-01T14:06:52Z", "attachment_id": null, "id": 6523473, "author": "jonathan.protzenko@gmail.com", "is_private": false, "text": "Sean, which IMAP server is it that you're connecting to? If you don't have that information at hand, you can find out by running from a terminal (assuming linux here):\n\nFor IMAP+SSL:\nprotzenk@sauternes:~ $ openssl s_client -connect imap.googlemail.com:993 -crlf\n\nFor regular IMAP:\nprotzenk@sauternes:~ $ nc imap.free.fr 143\n\nThe first few lines may have information about which kind of server they're running.", "raw_text": "Sean, which IMAP server is it that you're connecting to? If you don't have that information at hand, you can find out by running from a terminal (assuming linux here):\n\nFor IMAP+SSL:\nprotzenk@sauternes:~ $ openssl s_client -connect imap.googlemail.com:993 -crlf\n\nFor regular IMAP:\nprotzenk@sauternes:~ $ nc imap.free.fr 143\n\nThe first few lines may have information about which kind of server they're running.", "creator": "jonathan.protzenko@gmail.com", "time": "2012-08-01T14:06:52Z", "count": 46}, {"time": "2012-08-01T14:45:24Z", "count": 47, "text": "Unfortunately I'm not going to be able to look at this issue at this point.  I've just got too much other stuff going on.  Sorry about that.\n\nAs for the IMAP server I'm connecting to?  I've got two email addresses I'm using.  One is connecting to a DavMail instance running on localhost (DavMail works as a proxy to Exchange servers).  The other is hosted at hostmonster.com.  I ran that command and got a lot of certificate & SSL info, but I don't see anything identifying the server.  Why are you looking for this info?", "raw_text": "Unfortunately I'm not going to be able to look at this issue at this point.  I've just got too much other stuff going on.  Sorry about that.\n\nAs for the IMAP server I'm connecting to?  I've got two email addresses I'm using.  One is connecting to a DavMail instance running on localhost (DavMail works as a proxy to Exchange servers).  The other is hosted at hostmonster.com.  I ran that command and got a lot of certificate & SSL info, but I don't see anything identifying the server.  Why are you looking for this info?", "creator": "sean@pedorro.com", "id": 6523555, "author": "sean@pedorro.com", "is_private": false, "bug_id": 646225, "creation_time": "2012-08-01T14:45:24Z", "tags": [], "attachment_id": null}, {"text": "I just want to confirm that this bug only happens for servers which do not support the UIDPLUS command, but I think we're pretty sure this is already the case.", "creator": "jonathan.protzenko@gmail.com", "raw_text": "I just want to confirm that this bug only happens for servers which do not support the UIDPLUS command, but I think we're pretty sure this is already the case.", "count": 48, "time": "2012-08-01T14:46:40Z", "bug_id": 646225, "attachment_id": null, "tags": [], "creation_time": "2012-08-01T14:46:40Z", "id": 6523557, "is_private": false, "author": "jonathan.protzenko@gmail.com"}, {"id": 6523583, "is_private": false, "author": "sean@pedorro.com", "bug_id": 646225, "attachment_id": null, "tags": [], "creation_time": "2012-08-01T14:56:17Z", "count": 49, "time": "2012-08-01T14:56:17Z", "text": "Maybe this is the line your looking for from Hostmonster:\nOK [CAPABILITY IMAP4rev1 LITERAL+ SASL-IR LOGIN-REFERRALS ID ENABLE AUTH=PLAIN AUTH=LOGIN] Dovecot ready.\n\nI don't know if I'm seeing it at the Hostmonster server as I don't end up generating nearly as many threads on that account.  The one where I know I see this issue is on the DavMail server.  I'm running v3.9.8-1921.\n\nMaybe this helps?", "creator": "sean@pedorro.com", "raw_text": "Maybe this is the line your looking for from Hostmonster:\nOK [CAPABILITY IMAP4rev1 LITERAL+ SASL-IR LOGIN-REFERRALS ID ENABLE AUTH=PLAIN AUTH=LOGIN] Dovecot ready.\n\nI don't know if I'm seeing it at the Hostmonster server as I don't end up generating nearly as many threads on that account.  The one where I know I see this issue is on the DavMail server.  I'm running v3.9.8-1921.\n\nMaybe this helps?"}, {"is_private": false, "time": "2012-09-21T13:06:22Z", "author": "jonathan.protzenko@gmail.com", "count": 50, "id": 6654475, "creation_time": "2012-09-21T13:06:22Z", "tags": [], "attachment_id": null, "raw_text": "", "creator": "jonathan.protzenko@gmail.com", "bug_id": 646225, "text": "*** Bug 775856 has been marked as a duplicate of this bug. ***"}, {"is_private": false, "count": 51, "author": "vidartf+bugzilla@gmail.com", "time": "2013-02-18T15:46:11Z", "id": 7114345, "attachment_id": null, "tags": [], "creation_time": "2013-02-18T15:46:11Z", "creator": "vidartf+bugzilla@gmail.com", "raw_text": "Not sure if this adds information or not, but I feel its better to err on the safe side.\n\nIn Thunderbird 17.0.2 I noticed the following behavior: Sent emails are initially placed in the wrong thread both in the inbox view (threaded), and in Conversation View. After a restart of Thunderbird, the email will be placed correctly in the inbox list, but is still in the wrong spot in Conversation View. Instead of restarting, I can also open the Sent folder. There is then a short delay before the newly sent email pops up, and if I then switch back to the unified inbox/sent folder the email will be correctly sorted in the inbox view, but not in the Conversation view.\n\nTl;dr: The email goes to the wrong spot in both Thunderbird's inbox view and in Thunderbird Conversations' view, however the inbox view's sorting can be fixed by fiddling around, whereas Conversations' sorting can not.", "bug_id": 646225, "text": "Not sure if this adds information or not, but I feel its better to err on the safe side.\n\nIn Thunderbird 17.0.2 I noticed the following behavior: Sent emails are initially placed in the wrong thread both in the inbox view (threaded), and in Conversation View. After a restart of Thunderbird, the email will be placed correctly in the inbox list, but is still in the wrong spot in Conversation View. Instead of restarting, I can also open the Sent folder. There is then a short delay before the newly sent email pops up, and if I then switch back to the unified inbox/sent folder the email will be correctly sorted in the inbox view, but not in the Conversation view.\n\nTl;dr: The email goes to the wrong spot in both Thunderbird's inbox view and in Thunderbird Conversations' view, however the inbox view's sorting can be fixed by fiddling around, whereas Conversations' sorting can not."}, {"bug_id": 646225, "creation_time": "2013-02-18T16:01:25Z", "tags": [], "attachment_id": null, "id": 7114382, "author": "vseerror@lehigh.edu", "is_private": false, "text": "protz, is comment 49 sufficient for your question?\n\nI'm thinking we should close this fixed, and open new bug(s) for anything still not working", "raw_text": "protz, is comment 49 sufficient for your question?\n\nI'm thinking we should close this fixed, and open new bug(s) for anything still not working", "creator": "vseerror@lehigh.edu", "time": "2013-02-18T16:01:25Z", "count": 52}, {"attachment_id": null, "creation_time": "2013-02-18T16:11:44Z", "tags": [], "creator": "jonathan.protzenko@gmail.com", "raw_text": "Hello Wayne,\n\ncomment 49 confirms that this issue is only partly fixed, and that whatever remains to be fixed is accurately described by comment 24.\n\nI don't have time to work on this right now unfortunately, but anyone willing to fix this should read the discussion up to comment 24 which contains some guidance as to how to fix this.\n\nThanks,\n\njonathan", "bug_id": 646225, "text": "Hello Wayne,\n\ncomment 49 confirms that this issue is only partly fixed, and that whatever remains to be fixed is accurately described by comment 24.\n\nI don't have time to work on this right now unfortunately, but anyone willing to fix this should read the discussion up to comment 24 which contains some guidance as to how to fix this.\n\nThanks,\n\njonathan", "is_private": false, "count": 53, "author": "jonathan.protzenko@gmail.com", "time": "2013-02-18T16:11:44Z", "id": 7114398}, {"bug_id": 646225, "creation_time": "2013-02-27T13:10:33Z", "tags": [], "attachment_id": null, "id": 7148475, "author": "vseerror@lehigh.edu", "is_private": false, "text": "https://getsatisfaction.com/mozilla_messaging/topics/new_sent_mail_is_shown_with_an_unrelated_conversation", "raw_text": "https://getsatisfaction.com/mozilla_messaging/topics/new_sent_mail_is_shown_with_an_unrelated_conversation", "creator": "vseerror@lehigh.edu", "time": "2013-02-27T13:10:33Z", "count": 54}, {"is_private": false, "count": 55, "time": "2014-05-30T14:51:41Z", "author": "quidam@sogetthis.com", "id": 8864206, "attachment_id": null, "creation_time": "2014-05-30T14:51:41Z", "tags": [], "creator": "quidam@sogetthis.com", "raw_text": "Is anyone currently actively working on improving threading in Thunderbird?", "bug_id": 646225, "text": "Is anyone currently actively working on improving threading in Thunderbird?"}, {"creation_time": "2015-04-06T16:02:17Z", "tags": [], "attachment_id": null, "bug_id": 646225, "author": "i@guoyunhe.me", "is_private": false, "id": 10121329, "raw_text": "Anyone can help to fix this issue? It is badly needed for me.", "creator": "i@guoyunhe.me", "text": "Anyone can help to fix this issue? It is badly needed for me.", "time": "2015-04-06T16:02:17Z", "count": 56}, {"id": 11384505, "author": "vseerror@lehigh.edu", "time": "2016-05-05T12:13:12Z", "count": 57, "is_private": false, "text": "aceman, \nIt would be great to kill this off.\nIs comment 24 something you can handle?", "bug_id": 646225, "raw_text": "aceman, \nIt would be great to kill this off.\nIs comment 24 something you can handle?", "creator": "vseerror@lehigh.edu", "tags": [], "creation_time": "2016-05-05T12:13:12Z", "attachment_id": null}, {"time": "2016-05-05T12:20:37Z", "count": 58, "text": "IMAP and gloda in the same bug? No, that is not for me right now ;)", "raw_text": "IMAP and gloda in the same bug? No, that is not for me right now ;)", "creator": "acelists@atlas.sk", "id": 11384514, "author": "acelists@atlas.sk", "is_private": false, "bug_id": 646225, "tags": [], "creation_time": "2016-05-05T12:20:37Z", "attachment_id": null}, {"time": "2017-02-01T18:49:20Z", "count": 59, "raw_text": "In lieu of Thunderbird having (usable) conversation views, does anyone have a suggestion for another mail app? This Dekko thing may be interesting.\n\nWish I could contribute to the fix here, but it doesn't sound simple!", "creator": "akprasad@gmail.com", "text": "In lieu of Thunderbird having (usable) conversation views, does anyone have a suggestion for another mail app? This Dekko thing may be interesting.\n\nWish I could contribute to the fix here, but it doesn't sound simple!", "author": "akprasad@gmail.com", "is_private": false, "id": 12028770, "tags": ["off-topic"], "creation_time": "2017-02-01T18:49:20Z", "attachment_id": null, "bug_id": 646225}]}}}