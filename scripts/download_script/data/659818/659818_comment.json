{"comments": {}, "bugs": {"659818": {"comments": [{"is_private": false, "count": 0, "id": 5493792, "author": "jorendorff@mozilla.com", "creator": "jorendorff@mozilla.com", "time": "2011-05-25T23:31:53Z", "creation_time": "2011-05-25T23:31:53Z", "raw_text": "To reproduce\n  * create a closure using frame.eval\n  * save it somewhere\n  * call it later, after 'frame' has been popped from the JS stack.\n\nIf the methodjit is enabled, it works fine. If the methodjit is disabled, js_PutCallObject does not copy all the necessary slots, because script->debugMode is false (even though we are in debug mode).\n\nHere is the jit-test:\n\n// |jit-test| debug                                       \n// Closures created in frame.eval capture the environment even if the callee\n// is optimized.\n\nvar g = newGlobal('new-compartment');\nvar dbg = new Debug(g);\ndbg.hooks = {\n    debuggerHandler: function (frame) {\n        frame.older.eval(\"f3 = function () { return [a, b, c]; };\");\n    }\n};\n\ng.eval(\"function f1(a, b) { var c = a + b; f2(); c++; }\");\ng.eval(\"function f2() { debugger; }\");\ng.f1(2, 3);\nassertEq(g.f3().join(), \"2,3,6\");", "attachment_id": null, "tags": [], "bug_id": 659818, "text": "To reproduce\n  * create a closure using frame.eval\n  * save it somewhere\n  * call it later, after 'frame' has been popped from the JS stack.\n\nIf the methodjit is enabled, it works fine. If the methodjit is disabled, js_PutCallObject does not copy all the necessary slots, because script->debugMode is false (even though we are in debug mode).\n\nHere is the jit-test:\n\n// |jit-test| debug                                       \n// Closures created in frame.eval capture the environment even if the callee\n// is optimized.\n\nvar g = newGlobal('new-compartment');\nvar dbg = new Debug(g);\ndbg.hooks = {\n    debuggerHandler: function (frame) {\n        frame.older.eval(\"f3 = function () { return [a, b, c]; };\");\n    }\n};\n\ng.eval(\"function f1(a, b) { var c = a + b; f2(); c++; }\");\ng.eval(\"function f2() { debugger; }\");\ng.f1(2, 3);\nassertEq(g.f3().join(), \"2,3,6\");"}]}}}