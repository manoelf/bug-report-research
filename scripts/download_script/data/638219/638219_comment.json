{"bugs": {"638219": {"comments": [{"time": "2011-03-02T21:46:28Z", "id": 5316502, "is_private": false, "raw_text": "Let's integrate these into one harness that has all the features of either.", "bug_id": 638219, "creation_time": "2011-03-02T21:46:28Z", "tags": [], "author": "dmandelin@mozilla.com", "count": 0, "text": "Let's integrate these into one harness that has all the features of either.", "attachment_id": null, "creator": "dmandelin@mozilla.com"}, {"raw_text": "I agree we should do this.\n\nOne thing to watch out for is that jstests currently takes ages, and jit-tests don't. I think we want to keep a \"pretty-fast\" (20s or so) set of tests or test config.\n\nAn advantage of combining them is that we can run them as part of |make check|, which means they would test the more esoteric JITFLAGS, and also be run on the spidermonkey-only builds. Oh, and they'd get coverage from |make valgrind-check| which I believe they currently don't.", "bug_id": 638219, "creation_time": "2011-03-02T21:54:28Z", "creator": "paul.biggar@gmail.com", "tags": [], "is_private": false, "attachment_id": null, "text": "I agree we should do this.\n\nOne thing to watch out for is that jstests currently takes ages, and jit-tests don't. I think we want to keep a \"pretty-fast\" (20s or so) set of tests or test config.\n\nAn advantage of combining them is that we can run them as part of |make check|, which means they would test the more esoteric JITFLAGS, and also be run on the spidermonkey-only builds. Oh, and they'd get coverage from |make valgrind-check| which I believe they currently don't.", "count": 1, "author": "paul.biggar@gmail.com", "time": "2011-03-02T21:54:28Z", "id": 5316524}, {"attachment_id": null, "is_private": false, "tags": [], "creator": "n.nethercote@gmail.com", "creation_time": "2011-03-03T06:23:05Z", "bug_id": 638219, "raw_text": "(In reply to comment #1)\n> Oh, and they'd get coverage from |make\n> valgrind-check| which I believe they currently don't.\n\nIn case you don't already know this:  only three of the jit-tests get run under Valgrind:\n\n[ocean:~/moz/ws7/js/src/jit-test] rgrep \"jit-test.*valgrind\"\n./tests/basic/testShiftLeft.js:// |jit-test| TMFLAGS: full,fragprofile,treevis; valgrind\n./tests/basic/testRegExpTest.js:// |jit-test| TMFLAGS: full,fragprofile,treevis; valgrind\n./tests/basic/testSideExitInConstructor.js:// |jit-test| TMFLAGS: full,fragprofile,treevis; valgrind\n\nBetter than nothing, but not amazing.", "id": 5317695, "time": "2011-03-03T06:23:05Z", "author": "n.nethercote@gmail.com", "text": "(In reply to comment #1)\n> Oh, and they'd get coverage from |make\n> valgrind-check| which I believe they currently don't.\n\nIn case you don't already know this:  only three of the jit-tests get run under Valgrind:\n\n[ocean:~/moz/ws7/js/src/jit-test] rgrep \"jit-test.*valgrind\"\n./tests/basic/testShiftLeft.js:// |jit-test| TMFLAGS: full,fragprofile,treevis; valgrind\n./tests/basic/testRegExpTest.js:// |jit-test| TMFLAGS: full,fragprofile,treevis; valgrind\n./tests/basic/testSideExitInConstructor.js:// |jit-test| TMFLAGS: full,fragprofile,treevis; valgrind\n\nBetter than nothing, but not amazing.", "count": 2}, {"is_private": false, "creation_time": "2011-03-03T07:44:55Z", "bug_id": 638219, "raw_text": "(In reply to comment #2)\n> (In reply to comment #1)\n> > Oh, and they'd get coverage from |make\n> > valgrind-check| which I believe they currently don't.\n> \n> In case you don't already know this:  only three of the jit-tests get run under\n> Valgrind:\n> \n> Better than nothing, but not amazing.\n\nAh, I thought that |make check-valgrind| ran all the tests under valgrind. That is less cool, definitely.", "tags": [], "time": "2011-03-03T07:44:55Z", "id": 5317807, "attachment_id": null, "creator": "paul.biggar@gmail.com", "author": "paul.biggar@gmail.com", "count": 3, "text": "(In reply to comment #2)\n> (In reply to comment #1)\n> > Oh, and they'd get coverage from |make\n> > valgrind-check| which I believe they currently don't.\n> \n> In case you don't already know this:  only three of the jit-tests get run under\n> Valgrind:\n> \n> Better than nothing, but not amazing.\n\nAh, I thought that |make check-valgrind| ran all the tests under valgrind. That is less cool, definitely."}, {"tags": [], "creation_time": "2011-03-03T09:28:49Z", "bug_id": 638219, "raw_text": "(In reply to comment #3)\n> \n> Ah, I thought that |make check-valgrind| ran all the tests under valgrind.\n\nThat would be sloooooooow...", "is_private": false, "id": 5317951, "time": "2011-03-03T09:28:49Z", "creator": "n.nethercote@gmail.com", "attachment_id": null, "text": "(In reply to comment #3)\n> \n> Ah, I thought that |make check-valgrind| ran all the tests under valgrind.\n\nThat would be sloooooooow...", "count": 4, "author": "n.nethercote@gmail.com"}, {"author": "n.nethercote@gmail.com", "time": "2011-03-04T02:22:28Z", "id": 5320671, "text": "*** Bug 530953 has been marked as a duplicate of this bug. ***", "count": 5, "attachment_id": null, "is_private": false, "raw_text": "", "bug_id": 638219, "creation_time": "2011-03-04T02:22:28Z", "creator": "n.nethercote@gmail.com", "tags": []}, {"text": "Bug 530953 comment 1 has an analysis of the command line option differences between the two scripts.  Also note that the output formats are different.  For trace-tests.py it's like this:\n\n  [n_run | n_failed | n_passed]\n\nfor jstests.py it's like this:\n\n  [n_run | n_failed | n_skipped]", "count": 6, "id": 5320675, "time": "2011-03-04T02:23:55Z", "author": "n.nethercote@gmail.com", "tags": [], "creator": "n.nethercote@gmail.com", "creation_time": "2011-03-04T02:23:55Z", "bug_id": 638219, "raw_text": "Bug 530953 comment 1 has an analysis of the command line option differences between the two scripts.  Also note that the output formats are different.  For trace-tests.py it's like this:\n\n  [n_run | n_failed | n_passed]\n\nfor jstests.py it's like this:\n\n  [n_run | n_failed | n_skipped]", "attachment_id": null, "is_private": false}, {"author": "dirkjan@ochtman.nl", "text": "Created attachment 532712\nMove jit tests into tests/\n\nI'm thinking I might be able to move this along a little. The attached patch seems like a sane first step, though it's of course a little bit painful.", "count": 7, "attachment_id": 532712, "creator": "dirkjan@ochtman.nl", "time": "2011-05-16T19:36:54Z", "id": 5473045, "is_private": false, "creation_time": "2011-05-16T19:36:54Z", "bug_id": 638219, "raw_text": "I'm thinking I might be able to move this along a little. The attached patch seems like a sane first step, though it's of course a little bit painful.", "tags": []}, {"author": "dmandelin@mozilla.com", "text": "(In reply to comment #7)\n> Created attachment 532712 [details] [review]\n> Move jit tests into tests/\n> \n> I'm thinking I might be able to move this along a little. The attached patch\n> seems like a sane first step, though it's of course a little bit painful.\n\nDoes that actually work? The tests under tests/ and jit-tests/ have are run with different command lines (and also are discovered using different mechanisms).", "count": 8, "attachment_id": null, "creator": "dmandelin@mozilla.com", "time": "2011-05-17T00:06:07Z", "id": 5473773, "is_private": false, "raw_text": "(In reply to comment #7)\n> Created attachment 532712 [details] [review]\n> Move jit tests into tests/\n> \n> I'm thinking I might be able to move this along a little. The attached patch\n> seems like a sane first step, though it's of course a little bit painful.\n\nDoes that actually work? The tests under tests/ and jit-tests/ have are run with different command lines (and also are discovered using different mechanisms).", "bug_id": 638219, "creation_time": "2011-05-17T00:06:07Z", "tags": []}, {"time": "2011-05-17T07:37:08Z", "id": 5474229, "raw_text": "No, that obviously didn't work, as I forgot to make it a git diff. This seems to work, though; it passes make check-jit-test for me.", "bug_id": 638219, "creation_time": "2011-05-17T07:37:08Z", "tags": [], "is_private": false, "count": 9, "text": "Created attachment 532891\nMove jit tests into tests/, hg export edition\n\nNo, that obviously didn't work, as I forgot to make it a git diff. This seems to work, though; it passes make check-jit-test for me.", "author": "dirkjan@ochtman.nl", "creator": "dirkjan@ochtman.nl", "attachment_id": 532891}, {"is_private": false, "raw_text": "", "creation_time": "2011-05-17T07:39:15Z", "bug_id": 638219, "tags": [], "time": "2011-05-17T07:39:15Z", "id": 5474231, "attachment_id": 532892, "creator": "dirkjan@ochtman.nl", "author": "dirkjan@ochtman.nl", "count": 10, "text": "Created attachment 532892\nmove jit-tests, non-patch attachment"}, {"creator": "dirkjan@ochtman.nl", "attachment_id": null, "count": 11, "text": "Okay, so apparently Bugzilla mangles patches if you check the patch thingy. The latest attachment is unmangled, please have a look.", "author": "dirkjan@ochtman.nl", "bug_id": 638219, "creation_time": "2011-05-17T07:40:06Z", "raw_text": "Okay, so apparently Bugzilla mangles patches if you check the patch thingy. The latest attachment is unmangled, please have a look.", "tags": [], "is_private": false, "time": "2011-05-17T07:40:06Z", "id": 5474234}, {"attachment_id": null, "is_private": false, "creator": "dirkjan@ochtman.nl", "tags": [], "raw_text": "Scratch that. New proposed approach: keep jit_test.py and jstests.py and just refactor them under the hood and then at some point once the infra is sufficiently unified you can switch everyone to using The One True Way, which could be either of the two ways or a new third way.\n\nSo, next patch will be something moving all the Python code to one place, while preserving the interface of jit_test.py in the current js/src/jit-test/jit_test.py.\n\nIf anyone thinks down this path lies madness, please speak up.", "bug_id": 638219, "creation_time": "2011-05-17T13:23:04Z", "id": 5474622, "author": "dirkjan@ochtman.nl", "time": "2011-05-17T13:23:04Z", "count": 12, "text": "Scratch that. New proposed approach: keep jit_test.py and jstests.py and just refactor them under the hood and then at some point once the infra is sufficiently unified you can switch everyone to using The One True Way, which could be either of the two ways or a new third way.\n\nSo, next patch will be something moving all the Python code to one place, while preserving the interface of jit_test.py in the current js/src/jit-test/jit_test.py.\n\nIf anyone thinks down this path lies madness, please speak up."}, {"is_private": false, "tags": [], "creation_time": "2011-05-17T13:45:46Z", "bug_id": 638219, "raw_text": "Here's an attempt at moving the code for jit_test.py into the tests directory,\nwithout changing the interface to jit_test.py. The purpose of this is being\nable to merge the test code without disturbing the current interface, so\nthat users will only have to change their habits once.", "id": 5474662, "time": "2011-05-17T13:45:46Z", "attachment_id": 532947, "creator": "dirkjan@ochtman.nl", "author": "dirkjan@ochtman.nl", "count": 13, "text": "Created attachment 532947\nMove jit-test code into tests directory\n\nHere's an attempt at moving the code for jit_test.py into the tests directory,\nwithout changing the interface to jit_test.py. The purpose of this is being\nable to merge the test code without disturbing the current interface, so\nthat users will only have to change their habits once."}, {"count": 14, "text": "(In reply to comment #12)\n> Scratch that. New proposed approach: keep jit_test.py and jstests.py and\n> just refactor them under the hood and then at some point once the infra is\n> sufficiently unified you can switch everyone to using The One True Way,\n> which could be either of the two ways or a new third way.\n\nI think that's exactly the right approach. \n\nThe things that are necessarily different between the two are: (a) how to discover the list of tests, (b) how to run a test, and (c) how to interpret the outcome. Stuff like filtering test names, running in multiple threads, and reporting output is what we want to make common. I like your idea of refactoring incrementally instead of trying to fix it all at once (which is pretty much what I initially imagined).", "id": 5475247, "time": "2011-05-17T17:57:30Z", "author": "dmandelin@mozilla.com", "tags": [], "creator": "dmandelin@mozilla.com", "creation_time": "2011-05-17T17:57:30Z", "bug_id": 638219, "raw_text": "(In reply to comment #12)\n> Scratch that. New proposed approach: keep jit_test.py and jstests.py and\n> just refactor them under the hood and then at some point once the infra is\n> sufficiently unified you can switch everyone to using The One True Way,\n> which could be either of the two ways or a new third way.\n\nI think that's exactly the right approach. \n\nThe things that are necessarily different between the two are: (a) how to discover the list of tests, (b) how to run a test, and (c) how to interpret the outcome. Stuff like filtering test names, running in multiple threads, and reporting output is what we want to make common. I like your idea of refactoring incrementally instead of trying to fix it all at once (which is pretty much what I initially imagined).", "is_private": false, "attachment_id": null}, {"is_private": false, "bug_id": 638219, "creation_time": "2011-05-18T14:24:27Z", "raw_text": "Here's a bundle with my initial progress. Most of what's been done is moving jit_test.py interface onto the more elaborate jstests infrastructure. As part of that, jstests gained a few small features. I've tried to make nicely reviewable chunks of patch, cleaning up the coding style a little bit here and there where I was touching the code anyway. I've run some basic tests, but nothing extensive.", "tags": [], "time": "2011-05-18T14:24:27Z", "id": 5477039, "attachment_id": 533275, "creator": "dirkjan@ochtman.nl", "author": "dirkjan@ochtman.nl", "text": "Created attachment 533275\nBundle of 22 small patches for early review\n\nHere's a bundle with my initial progress. Most of what's been done is moving jit_test.py interface onto the more elaborate jstests infrastructure. As part of that, jstests gained a few small features. I've tried to make nicely reviewable chunks of patch, cleaning up the coding style a little bit here and there where I was touching the code anyway. I've run some basic tests, but nothing extensive.", "count": 15}, {"count": 16, "text": "(In reply to comment #15)\n> Created attachment 533275 [details]\n> Bundle of 22 small patches for early review\n> \n> Here's a bundle with my initial progress. Most of what's been done is moving\n> jit_test.py interface onto the more elaborate jstests infrastructure. As\n> part of that, jstests gained a few small features. I've tried to make nicely\n> reviewable chunks of patch, cleaning up the coding style a little bit here\n> and there where I was touching the code anyway. I've run some basic tests,\n> but nothing extensive.\n\nYour refactorings are really nice. This looks like a good direction to go, and I don't see any problems with anything in the bundle. We'll have to see how it looks closer when it's done of course, but I expect no problems based on your current progress.", "author": "paul.biggar@gmail.com", "creator": "paul.biggar@gmail.com", "attachment_id": null, "time": "2011-05-18T15:02:08Z", "id": 5477130, "bug_id": 638219, "creation_time": "2011-05-18T15:02:08Z", "raw_text": "(In reply to comment #15)\n> Created attachment 533275 [details]\n> Bundle of 22 small patches for early review\n> \n> Here's a bundle with my initial progress. Most of what's been done is moving\n> jit_test.py interface onto the more elaborate jstests infrastructure. As\n> part of that, jstests gained a few small features. I've tried to make nicely\n> reviewable chunks of patch, cleaning up the coding style a little bit here\n> and there where I was touching the code anyway. I've run some basic tests,\n> but nothing extensive.\n\nYour refactorings are really nice. This looks like a good direction to go, and I don't see any problems with anything in the bundle. We'll have to see how it looks closer when it's done of course, but I expect no problems based on your current progress.", "tags": [], "is_private": false}, {"is_private": false, "raw_text": "Would it be possible to hold off on things like bug 634090 while I hack on this? The patch that got landed for that yesterday basically just copied more code from jstests into jit_test, mostly stuff that I have already factored out in my patch queue, causing massive conflicts in my queue... I think the current state of my patch queue actually already has almost all of the features landed in that patch, so maybe we should just try to start to land the first part of it.", "creation_time": "2011-05-19T08:12:00Z", "bug_id": 638219, "tags": [], "time": "2011-05-19T08:12:00Z", "id": 5479462, "attachment_id": null, "creator": "dirkjan@ochtman.nl", "author": "dirkjan@ochtman.nl", "count": 17, "text": "Would it be possible to hold off on things like bug 634090 while I hack on this? The patch that got landed for that yesterday basically just copied more code from jstests into jit_test, mostly stuff that I have already factored out in my patch queue, causing massive conflicts in my queue... I think the current state of my patch queue actually already has almost all of the features landed in that patch, so maybe we should just try to start to land the first part of it."}, {"time": "2011-05-25T16:07:39Z", "id": 5492418, "creation_time": "2011-05-25T16:07:39Z", "bug_id": 638219, "raw_text": "Here's a new bundle, which goes a long way towards full unification. A bunch of options got ported from one to the other or vice versa. Patched marked with -xxx slightly change the functionality/interface, so should get extra review.", "tags": [], "is_private": false, "text": "Created attachment 535086\nFresh bundle, now at 62 patches\n\nHere's a new bundle, which goes a long way towards full unification. A bunch of options got ported from one to the other or vice versa. Patched marked with -xxx slightly change the functionality/interface, so should get extra review.", "count": 18, "author": "dirkjan@ochtman.nl", "creator": "dirkjan@ochtman.nl", "attachment_id": 535086}, {"count": 19, "text": "djc, how goes this? I've been holding off some test harness changes so you could get this done.", "author": "paul.biggar@gmail.com", "creator": "paul.biggar@gmail.com", "attachment_id": null, "id": 5535459, "time": "2011-06-15T22:58:21Z", "tags": [], "raw_text": "djc, how goes this? I've been holding off some test harness changes so you could get this done.", "creation_time": "2011-06-15T22:58:21Z", "bug_id": 638219, "is_private": false}, {"tags": [], "raw_text": "A new bundle, with patches to add back features from the backout.", "bug_id": 638219, "creation_time": "2011-06-19T20:12:35Z", "is_private": false, "id": 5541588, "time": "2011-06-19T20:12:35Z", "creator": "dirkjan@ochtman.nl", "attachment_id": 540342, "text": "Created attachment 540342\nNew bundle, 64 small patches\n\nA new bundle, with patches to add back features from the backout.", "count": 20, "author": "dirkjan@ochtman.nl"}, {"tags": [], "creation_time": "2011-06-19T20:14:57Z", "bug_id": 638219, "raw_text": "Here's a single large patch. It should probably be reviewed via the patch queue bundle, because it's hard to read on its own. There are further things that can be done, but I think we should try to land this now to prevent further churn. At least all the really redundant bits have been unified.", "is_private": false, "id": 5541589, "time": "2011-06-19T20:14:57Z", "creator": "dirkjan@ochtman.nl", "attachment_id": 540343, "count": 21, "text": "Created attachment 540343\nSingle large patch\n\nHere's a single large patch. It should probably be reviewed via the patch queue bundle, because it's hard to read on its own. There are further things that can be done, but I think we should try to land this now to prevent further churn. At least all the really redundant bits have been unified.", "author": "dirkjan@ochtman.nl"}, {"creator": "dmandelin@mozilla.com", "attachment_id": null, "count": 22, "text": "(In reply to comment #21)\n> Created attachment 540343 [details] [review]\n> Single large patch\n> \n> Here's a single large patch. It should probably be reviewed via the patch\n> queue bundle, because it's hard to read on its own. There are further things\n> that can be done, but I think we should try to land this now to prevent\n> further churn. At least all the really redundant bits have been unified.\n\nI briefly looked at this and what I saw looked pretty good.\n\nOne question I have is about the rationale for unifying Test and TestCase in tests.py: I intentionally had those two classes, not because I knew it was really important or anything, but because it seemed that \"a program that can be run\" and \"a test case, i.e., instructions for running a program and interpreting the results\" were separate concepts. Did you unify them to solve a particular problem, or for another design reason?", "author": "dmandelin@mozilla.com", "tags": [], "raw_text": "(In reply to comment #21)\n> Created attachment 540343 [details] [review]\n> Single large patch\n> \n> Here's a single large patch. It should probably be reviewed via the patch\n> queue bundle, because it's hard to read on its own. There are further things\n> that can be done, but I think we should try to land this now to prevent\n> further churn. At least all the really redundant bits have been unified.\n\nI briefly looked at this and what I saw looked pretty good.\n\nOne question I have is about the rationale for unifying Test and TestCase in tests.py: I intentionally had those two classes, not because I knew it was really important or anything, but because it seemed that \"a program that can be run\" and \"a test case, i.e., instructions for running a program and interpreting the results\" were separate concepts. Did you unify them to solve a particular problem, or for another design reason?", "creation_time": "2011-06-20T22:01:59Z", "bug_id": 638219, "is_private": false, "id": 5543850, "time": "2011-06-20T22:01:59Z"}, {"author": "dirkjan@ochtman.nl", "count": 23, "text": "Thanks for the comments. I unified the classes because I felt that the added abstraction didn't make any of the code easier; it felt kind of YAGNI to me. I understand the difference, but I feel like the concept of a \"test case\" can easily represent both \"instructions for running a program\" and \"interpreting the results\". In fact, judging from the code in jstests and jit_test, it seemed to me like in fact the instructions and the way the results should be interpreted are somewhat tightly coupled (in the sense that different test drivers have different kinds of instructions *and* different kinds of results interpretation), so that using a single class seemed to make for less complexity.", "attachment_id": null, "creator": "dirkjan@ochtman.nl", "time": "2011-06-21T08:04:24Z", "id": 5544753, "is_private": false, "raw_text": "Thanks for the comments. I unified the classes because I felt that the added abstraction didn't make any of the code easier; it felt kind of YAGNI to me. I understand the difference, but I feel like the concept of a \"test case\" can easily represent both \"instructions for running a program\" and \"interpreting the results\". In fact, judging from the code in jstests and jit_test, it seemed to me like in fact the instructions and the way the results should be interpreted are somewhat tightly coupled (in the sense that different test drivers have different kinds of instructions *and* different kinds of results interpretation), so that using a single class seemed to make for less complexity.", "bug_id": 638219, "creation_time": "2011-06-21T08:04:24Z", "tags": []}, {"is_private": false, "tags": [], "creation_time": "2011-07-06T01:02:06Z", "bug_id": 638219, "raw_text": "I'm having trouble running `jit-test.py -h`. Is this broken? The patch looks good, but I want to test it.", "id": 5575409, "time": "2011-07-06T01:02:06Z", "attachment_id": null, "creator": "paul.biggar@gmail.com", "author": "paul.biggar@gmail.com", "count": 24, "text": "I'm having trouble running `jit-test.py -h`. Is this broken? The patch looks good, but I want to test it."}, {"id": 5576991, "time": "2011-07-06T18:52:14Z", "is_private": false, "tags": [], "creation_time": "2011-07-06T18:52:14Z", "bug_id": 638219, "raw_text": "What exactly are you running? python jit-test/jit_test.py -h works for me.", "author": "dirkjan@ochtman.nl", "count": 25, "text": "What exactly are you running? python jit-test/jit_test.py -h works for me.", "attachment_id": null, "creator": "dirkjan@ochtman.nl"}, {"text": "Comment on attachment 540343\nSingle large patch\n\nReview of attachment 540343:\n-----------------------------------------------------------------\n\nLooking through the patch Q, everything looks right (that is, I think the code is good quality).\n\nThere appear to be some bugs though:\n\n- Missing `#!/usr/bin/env python` in jit_test.py\n- No args doesn't work:\n\n $ jit-test/jit_test.py objdir.DBG/js\nNo tests found matching command line arguments.\n\n\n- JITtests no longer work:\n $ jit-test/jit_test.py objdir.DBG/js a \n[   0|  14|  14] 100% ===============================================>|    0.9s^C\nREGRESSIONS:\n\n- -s flag doesn't work:\n\n $ jit-test/jit_test.py objdir.DBG/js args-vargc.js -s\n/Users/pbiggar/work/mozilla/reviews/js/src/jit-test/jit_test.py -e \"const platform='darwin'; const libdir='/Users/pbiggar/work/mozilla/reviews/js/src/jit-test/lib/';\" -f /Users/pbiggar/work/mozilla/reviews/js/src/jit-test/lib/prolog.js -m -p -j -f /Users/pbiggar/work/mozilla/reviews/js/src/jit-test/tests/arguments/args-vargc.js\nException in thread Thread-1:\nTraceback (most recent call last):\n  File \"/usr/local/Cellar/python/2.7/lib/python2.7/threading.py\", line 530, in __bootstrap_inner\n    self.run()\n  File \"/usr/local/Cellar/python/2.7/lib/python2.7/threading.py\", line 483, in run\n    self.__target(*self.__args, **self.__kwargs)\n  File \"/Users/pbiggar/work/mozilla/reviews/js/src/tests/workers.py\", line 83, in run\n    self.sink.push((task, result))\n  File \"/Users/pbiggar/work/mozilla/reviews/js/src/tests/workers.py\", line 47, in push\n    self.results.push(result)\n  File \"/Users/pbiggar/work/mozilla/reviews/js/src/tests/jittests.py\", line 182, in push\n    self.pb.update(self.n, tuple(self.counts))\nTypeError: update() takes exactly 2 arguments (3 given)\n\nREGRESSIONS:\n    -m -j -p /Users/pbiggar/work/mozilla/reviews/js/src/jit-test/tests/arguments/args-vargc.js\n\n\n-- -o flag doesn't work:\n\n $ jit-test/jit_test.py objdir.DBG/js args-vargc.js -o\nUsage: jit_test.py [options] JS_SHELL [TESTS]\n\njit_test.py: error: no such option: -e\nExit code: 2\n[   0|   1|   1] 100% ===============================================>|    0.2s\nREGRESSIONS:\n    -m -j -p /Users/pbiggar/work/mozilla/reviews/js/src/jit-test/tests/arguments/args-vargc.js\n\n\n-- I think the above problems were caused by my adding the hashbang. But without it I get different problems:\n\n $ python jit-test/jit_test.py objdir.DBG/js args-vargc.js\nException in thread Thread-2:\nTraceback (most recent call last):\n  File \"/usr/local/Cellar/python/2.7/lib/python2.7/threading.py\", line 530, in __bootstrap_inner\n    self.run()\n  File \"/usr/local/Cellar/python/2.7/lib/python2.7/threading.py\", line 483, in run\n    self.__target(*self.__args, **self.__kwargs)\n  File \"/Users/pbiggar/work/mozilla/reviews/js/src/tests/tests.py\", line 100, in th_run_cmd\n    p = Popen(cmd, env=env, **POPTS)\n  File \"/usr/local/Cellar/python/2.7/lib/python2.7/subprocess.py\", line 672, in __init__\n    errread, errwrite)\n  File \"/usr/local/Cellar/python/2.7/lib/python2.7/subprocess.py\", line 1201, in _execute_child\n    raise child_exception\nOSError: [Errno 8] Exec format error\n\nException in thread Thread-1:\nTraceback (most recent call last):\n  File \"/usr/local/Cellar/python/2.7/lib/python2.7/threading.py\", line 530, in __bootstrap_inner\n    self.run()\n  File \"/usr/local/Cellar/python/2.7/lib/python2.7/threading.py\", line 483, in run\n    self.__target(*self.__args, **self.__kwargs)\n  File \"/Users/pbiggar/work/mozilla/reviews/js/src/tests/workers.py\", line 81, in run\n    result = task()\n  File \"/Users/pbiggar/work/mozilla/reviews/js/src/tests/tests.py\", line 150, in __call__\n    return self.run(self.prefix, timeout, nostdio)\n  File \"/Users/pbiggar/work/mozilla/reviews/js/src/tests/jittests.py\", line 109, in run\n    out, err, code, dt, to = tests.run_cmd(cmd, env, timeout, avoid_stdio)\n  File \"/Users/pbiggar/work/mozilla/reviews/js/src/tests/tests.py\", line 134, in run_cmd\n    return l[1] + (timed_out,)\nTypeError: unsupported operand type(s) for +: 'NoneType' and 'tuple'\n\n                 100% ===============================================>|    0.0s\nPASSED ALL", "count": 26, "author": "paul.biggar@gmail.com", "time": "2011-07-06T21:20:52Z", "id": 5577398, "raw_text": "Review of attachment 540343:\n-----------------------------------------------------------------\n\nLooking through the patch Q, everything looks right (that is, I think the code is good quality).\n\nThere appear to be some bugs though:\n\n- Missing `#!/usr/bin/env python` in jit_test.py\n- No args doesn't work:\n\n $ jit-test/jit_test.py objdir.DBG/js\nNo tests found matching command line arguments.\n\n\n- JITtests no longer work:\n $ jit-test/jit_test.py objdir.DBG/js a \n[   0|  14|  14] 100% ===============================================>|    0.9s^C\nREGRESSIONS:\n\n- -s flag doesn't work:\n\n $ jit-test/jit_test.py objdir.DBG/js args-vargc.js -s\n/Users/pbiggar/work/mozilla/reviews/js/src/jit-test/jit_test.py -e \"const platform='darwin'; const libdir='/Users/pbiggar/work/mozilla/reviews/js/src/jit-test/lib/';\" -f /Users/pbiggar/work/mozilla/reviews/js/src/jit-test/lib/prolog.js -m -p -j -f /Users/pbiggar/work/mozilla/reviews/js/src/jit-test/tests/arguments/args-vargc.js\nException in thread Thread-1:\nTraceback (most recent call last):\n  File \"/usr/local/Cellar/python/2.7/lib/python2.7/threading.py\", line 530, in __bootstrap_inner\n    self.run()\n  File \"/usr/local/Cellar/python/2.7/lib/python2.7/threading.py\", line 483, in run\n    self.__target(*self.__args, **self.__kwargs)\n  File \"/Users/pbiggar/work/mozilla/reviews/js/src/tests/workers.py\", line 83, in run\n    self.sink.push((task, result))\n  File \"/Users/pbiggar/work/mozilla/reviews/js/src/tests/workers.py\", line 47, in push\n    self.results.push(result)\n  File \"/Users/pbiggar/work/mozilla/reviews/js/src/tests/jittests.py\", line 182, in push\n    self.pb.update(self.n, tuple(self.counts))\nTypeError: update() takes exactly 2 arguments (3 given)\n\nREGRESSIONS:\n    -m -j -p /Users/pbiggar/work/mozilla/reviews/js/src/jit-test/tests/arguments/args-vargc.js\n\n\n-- -o flag doesn't work:\n\n $ jit-test/jit_test.py objdir.DBG/js args-vargc.js -o\nUsage: jit_test.py [options] JS_SHELL [TESTS]\n\njit_test.py: error: no such option: -e\nExit code: 2\n[   0|   1|   1] 100% ===============================================>|    0.2s\nREGRESSIONS:\n    -m -j -p /Users/pbiggar/work/mozilla/reviews/js/src/jit-test/tests/arguments/args-vargc.js\n\n\n-- I think the above problems were caused by my adding the hashbang. But without it I get different problems:\n\n $ python jit-test/jit_test.py objdir.DBG/js args-vargc.js\nException in thread Thread-2:\nTraceback (most recent call last):\n  File \"/usr/local/Cellar/python/2.7/lib/python2.7/threading.py\", line 530, in __bootstrap_inner\n    self.run()\n  File \"/usr/local/Cellar/python/2.7/lib/python2.7/threading.py\", line 483, in run\n    self.__target(*self.__args, **self.__kwargs)\n  File \"/Users/pbiggar/work/mozilla/reviews/js/src/tests/tests.py\", line 100, in th_run_cmd\n    p = Popen(cmd, env=env, **POPTS)\n  File \"/usr/local/Cellar/python/2.7/lib/python2.7/subprocess.py\", line 672, in __init__\n    errread, errwrite)\n  File \"/usr/local/Cellar/python/2.7/lib/python2.7/subprocess.py\", line 1201, in _execute_child\n    raise child_exception\nOSError: [Errno 8] Exec format error\n\nException in thread Thread-1:\nTraceback (most recent call last):\n  File \"/usr/local/Cellar/python/2.7/lib/python2.7/threading.py\", line 530, in __bootstrap_inner\n    self.run()\n  File \"/usr/local/Cellar/python/2.7/lib/python2.7/threading.py\", line 483, in run\n    self.__target(*self.__args, **self.__kwargs)\n  File \"/Users/pbiggar/work/mozilla/reviews/js/src/tests/workers.py\", line 81, in run\n    result = task()\n  File \"/Users/pbiggar/work/mozilla/reviews/js/src/tests/tests.py\", line 150, in __call__\n    return self.run(self.prefix, timeout, nostdio)\n  File \"/Users/pbiggar/work/mozilla/reviews/js/src/tests/jittests.py\", line 109, in run\n    out, err, code, dt, to = tests.run_cmd(cmd, env, timeout, avoid_stdio)\n  File \"/Users/pbiggar/work/mozilla/reviews/js/src/tests/tests.py\", line 134, in run_cmd\n    return l[1] + (timed_out,)\nTypeError: unsupported operand type(s) for +: 'NoneType' and 'tuple'\n\n                 100% ===============================================>|    0.0s\nPASSED ALL", "creation_time": "2011-07-06T21:20:52Z", "bug_id": 638219, "creator": "paul.biggar@gmail.com", "tags": [], "attachment_id": 540343, "is_private": false}, {"author": "dirkjan@ochtman.nl", "count": 27, "text": "Created attachment 546293\nUpdated bundle to address bugs", "attachment_id": 546293, "creator": "dirkjan@ochtman.nl", "time": "2011-07-16T08:40:48Z", "id": 5594737, "is_private": false, "raw_text": "", "bug_id": 638219, "creation_time": "2011-07-16T08:40:48Z", "tags": []}, {"raw_text": "Here's an updated patch. It fixes two problems:\n\n- Added the hashbang to the new jit_test.py script\n- Updated the progress bar shim to conform to the progress bar interface\n\nThis now works with your tests shown above (and a few others).", "creation_time": "2011-07-16T08:42:37Z", "bug_id": 638219, "creator": "dirkjan@ochtman.nl", "tags": [], "attachment_id": 546294, "is_private": false, "text": "Created attachment 546294\nUpdated patch to address bugs\n\nHere's an updated patch. It fixes two problems:\n\n- Added the hashbang to the new jit_test.py script\n- Updated the progress bar shim to conform to the progress bar interface\n\nThis now works with your tests shown above (and a few others).", "count": 28, "author": "dirkjan@ochtman.nl", "time": "2011-07-16T08:42:37Z", "id": 5594739}, {"attachment_id": 546294, "creator": "paul.biggar@gmail.com", "author": "paul.biggar@gmail.com", "text": "Comment on attachment 546294\nUpdated patch to address bugs\n\nReview of attachment 546294:\n-----------------------------------------------------------------\n\nThe --valgrind-all option doesn't seem to work.\nI can't see a difference in whether I run --no-slow or not.\n\nThere's a weird traceback when the js shell is missing: `jit-test/jit_test.py obj`\n\nI haven't been testing jstests.py, might want to verify it still works too.\n\nCan you say how confident you are that everything still works?\n\n::: js/src/jit-test/jit_test.py\n@@ +7,2 @@\n>  \n> +import jittests\n\nself.slow isn't initialized here. Intentional?", "count": 29, "is_private": false, "tags": [], "bug_id": 638219, "creation_time": "2011-07-17T01:38:29Z", "raw_text": "Review of attachment 546294:\n-----------------------------------------------------------------\n\nThe --valgrind-all option doesn't seem to work.\nI can't see a difference in whether I run --no-slow or not.\n\nThere's a weird traceback when the js shell is missing: `jit-test/jit_test.py obj`\n\nI haven't been testing jstests.py, might want to verify it still works too.\n\nCan you say how confident you are that everything still works?\n\n::: js/src/jit-test/jit_test.py\n@@ +7,2 @@\n>  \n> +import jittests\n\nself.slow isn't initialized here. Intentional?", "id": 5595231, "time": "2011-07-17T01:38:29Z"}, {"attachment_id": null, "is_private": false, "tags": [], "creator": "dirkjan@ochtman.nl", "bug_id": 638219, "creation_time": "2011-07-17T09:32:41Z", "raw_text": "--valgrind-all works for me when I have valgrind installed. I found a jit-test that has the slow annotation (bug538615.js) and it will not be executed when passed with --no-slow, so that seems to work fine. And the traceback when the shell is missing was weird before my patches, too. I'd be happy to make it nicer, but that wasn't really the purpose of this bug.\n\nNot sure what you are referring to with the \"self.slow\"; you show a hunk at module-level, where self isn't usually defined. If you mean that tests/jittests.py:JITTest.__init__() doesn't define slow, that's correct: it now inherits from tests/tests.py:Test, and self.slow is initialized there.\n\nI think the subset of things that still work is probably very large, but it's pretty hard to check all the option interactions. And it's been a while since I actually made the changes... still, I think all the small patches should make it easy to catch most problems, so I think we'd have noticed them sooner. I definitely think the simple cases still work, and I'm happy to be on standby and fix issues as they come up once this lands. I definitely don't think there are any large issues lurking in there.", "id": 5595380, "time": "2011-07-17T09:32:41Z", "author": "dirkjan@ochtman.nl", "count": 30, "text": "--valgrind-all works for me when I have valgrind installed. I found a jit-test that has the slow annotation (bug538615.js) and it will not be executed when passed with --no-slow, so that seems to work fine. And the traceback when the shell is missing was weird before my patches, too. I'd be happy to make it nicer, but that wasn't really the purpose of this bug.\n\nNot sure what you are referring to with the \"self.slow\"; you show a hunk at module-level, where self isn't usually defined. If you mean that tests/jittests.py:JITTest.__init__() doesn't define slow, that's correct: it now inherits from tests/tests.py:Test, and self.slow is initialized there.\n\nI think the subset of things that still work is probably very large, but it's pretty hard to check all the option interactions. And it's been a while since I actually made the changes... still, I think all the small patches should make it easy to catch most problems, so I think we'd have noticed them sooner. I definitely think the simple cases still work, and I'm happy to be on standby and fix issues as they come up once this lands. I definitely don't think there are any large issues lurking in there."}, {"id": 5595952, "time": "2011-07-18T05:52:25Z", "author": "paul.biggar@gmail.com", "text": "(In reply to comment #30)\n> --valgrind-all works for me when I have valgrind installed.\n\nMy bad, my valgrind installation was broken, and the valgrind exe was missing. Now that it's reinstalled, it works great.\n\n\n\n> I found a\n> jit-test that has the slow annotation (bug538615.js) and it will not be\n> executed when passed with --no-slow, so that seems to work fine.\n\nI tested by looking at the test count with --no-slow, and without it, and the count was the same. I think bug 538615 is not run when --no-slow is omitted.\n\n\n> And the\n> traceback when the shell is missing was weird before my patches, too. I'd be\n> happy to make it nicer, but that wasn't really the purpose of this bug.\n\nYeah, that's fair enough.\n\n\n> Not sure what you are referring to with the \"self.slow\"; you show a hunk at\n> module-level, where self isn't usually defined. If you mean that\n> tests/jittests.py:JITTest.__init__() doesn't define slow, that's correct: it\n> now inherits from tests/tests.py:Test, and self.slow is initialized there.\n\nUm, weird. I've heard splinter (the new bugzilla review system) does such things. I was aiming at JITTest::__init__.  (You're right, I missed the inheritance, so we're good there.)\n\n\n\n> I think the subset of things that still work is probably very large, but\n> it's pretty hard to check all the option interactions. And it's been a while\n> since I actually made the changes... still, I think all the small patches\n> should make it easy to catch most problems, so I think we'd have noticed\n> them sooner. I definitely think the simple cases still work, and I'm happy\n> to be on standby and fix issues as they come up once this lands. I\n> definitely don't think there are any large issues lurking in there.\n\nThe small patches make it easier to see what's changing in each one, but it's still difficult to verify the changes. I've been manually testing it, and it seems to me that everything still works, with the objection of the --no-slow thing above. I'll be happy to r+ once that's fixed :)", "count": 31, "attachment_id": null, "is_private": false, "tags": [], "creator": "paul.biggar@gmail.com", "creation_time": "2011-07-18T05:52:25Z", "bug_id": 638219, "raw_text": "(In reply to comment #30)\n> --valgrind-all works for me when I have valgrind installed.\n\nMy bad, my valgrind installation was broken, and the valgrind exe was missing. Now that it's reinstalled, it works great.\n\n\n\n> I found a\n> jit-test that has the slow annotation (bug538615.js) and it will not be\n> executed when passed with --no-slow, so that seems to work fine.\n\nI tested by looking at the test count with --no-slow, and without it, and the count was the same. I think bug 538615 is not run when --no-slow is omitted.\n\n\n> And the\n> traceback when the shell is missing was weird before my patches, too. I'd be\n> happy to make it nicer, but that wasn't really the purpose of this bug.\n\nYeah, that's fair enough.\n\n\n> Not sure what you are referring to with the \"self.slow\"; you show a hunk at\n> module-level, where self isn't usually defined. If you mean that\n> tests/jittests.py:JITTest.__init__() doesn't define slow, that's correct: it\n> now inherits from tests/tests.py:Test, and self.slow is initialized there.\n\nUm, weird. I've heard splinter (the new bugzilla review system) does such things. I was aiming at JITTest::__init__.  (You're right, I missed the inheritance, so we're good there.)\n\n\n\n> I think the subset of things that still work is probably very large, but\n> it's pretty hard to check all the option interactions. And it's been a while\n> since I actually made the changes... still, I think all the small patches\n> should make it easy to catch most problems, so I think we'd have noticed\n> them sooner. I definitely think the simple cases still work, and I'm happy\n> to be on standby and fix issues as they come up once this lands. I\n> definitely don't think there are any large issues lurking in there.\n\nThe small patches make it easier to see what's changing in each one, but it's still difficult to verify the changes. I've been manually testing it, and it seems to me that everything still works, with the objection of the --no-slow thing above. I'll be happy to r+ once that's fixed :)"}, {"raw_text": "As for the --no-slow thing, let's just say I carefully preserved the semantics of --no-slow before my patches. ;) --no-slow is internally named run_slow, the default value is None and passing in the option sets it to False... I guess you can figure out what it'll change about the process. Do I have enough reason to feel confident about my patch yet? :)", "creation_time": "2011-07-18T16:30:16Z", "bug_id": 638219, "tags": [], "is_private": false, "time": "2011-07-18T16:30:16Z", "id": 5596681, "creator": "dirkjan@ochtman.nl", "attachment_id": null, "text": "As for the --no-slow thing, let's just say I carefully preserved the semantics of --no-slow before my patches. ;) --no-slow is internally named run_slow, the default value is None and passing in the option sets it to False... I guess you can figure out what it'll change about the process. Do I have enough reason to feel confident about my patch yet? :)", "count": 32, "author": "dirkjan@ochtman.nl"}, {"attachment_id": 546294, "creator": "paul.biggar@gmail.com", "author": "paul.biggar@gmail.com", "count": 33, "text": "Comment on attachment 546294\nUpdated patch to address bugs\n\nOh yeah, so it is. Looks good then, thanks for all the work on this.\n\nDo you need this pushed?", "is_private": false, "tags": [], "creation_time": "2011-07-18T17:43:11Z", "bug_id": 638219, "raw_text": "Oh yeah, so it is. Looks good then, thanks for all the work on this.\n\nDo you need this pushed?", "id": 5596920, "time": "2011-07-18T17:43:11Z"}, {"bug_id": 638219, "creation_time": "2011-07-18T18:54:19Z", "raw_text": "Oh, one more bug: when I run 'make check-jit-test', I get an error, due to jit-test.py haing an exit code of 2. That will make the builds go orange, so that needs to be fixed :)", "tags": [], "is_private": false, "time": "2011-07-18T18:54:19Z", "id": 5597152, "creator": "paul.biggar@gmail.com", "attachment_id": null, "text": "Oh, one more bug: when I run 'make check-jit-test', I get an error, due to jit-test.py haing an exit code of 2. That will make the builds go orange, so that needs to be fixed :)", "count": 34, "author": "paul.biggar@gmail.com"}, {"attachment_id": null, "creator": "dirkjan@ochtman.nl", "author": "dirkjan@ochtman.nl", "text": "I know where that bug comes from and have started to fix it, but I'm leaving for two weeks tomorrow. I'll try to complete the fix soon after. In the meantime, if you want to make progress on hacking jit-test or jstests, perhaps you can work on top of the patch queue? The fix for the return code shouldn't ripple too much.", "count": 35, "is_private": false, "bug_id": 638219, "creation_time": "2011-07-22T11:32:20Z", "raw_text": "I know where that bug comes from and have started to fix it, but I'm leaving for two weeks tomorrow. I'll try to complete the fix soon after. In the meantime, if you want to make progress on hacking jit-test or jstests, perhaps you can work on top of the patch queue? The fix for the return code shouldn't ripple too much.", "tags": [], "time": "2011-07-22T11:32:20Z", "id": 5606765}, {"time": "2011-07-28T07:50:34Z", "id": 5618758, "is_private": false, "raw_text": "Try run for 33b540f49141 is complete.\nDetailed breakdown of the results available here:\n    http://tbpl.mozilla.org/?tree=Try&rev=33b540f49141\nResults:\n    success: 15\n    failure: 2\nTotal buildrequests: 17\nBuilds available at http://ftp.mozilla.org/pub/mozilla.org/firefox/try-builds/pbiggar@mozilla.com-33b540f49141", "creation_time": "2011-07-28T07:50:34Z", "bug_id": 638219, "tags": [], "author": "release@mozilla.com", "text": "Try run for 33b540f49141 is complete.\nDetailed breakdown of the results available here:\n    http://tbpl.mozilla.org/?tree=Try&rev=33b540f49141\nResults:\n    success: 15\n    failure: 2\nTotal buildrequests: 17\nBuilds available at http://ftp.mozilla.org/pub/mozilla.org/firefox/try-builds/pbiggar@mozilla.com-33b540f49141", "count": 36, "attachment_id": null, "creator": "release@mozilla.com"}, {"is_private": false, "attachment_id": 549169, "creator": "paul.biggar@gmail.com", "tags": [], "raw_text": "", "creation_time": "2011-07-28T17:51:33Z", "bug_id": 638219, "id": 5619850, "author": "paul.biggar@gmail.com", "time": "2011-07-28T17:51:33Z", "text": "Created attachment 549169\nFixes exit code problem", "count": 37}, {"author": "paul.biggar@gmail.com", "text": "The build errors in comment 36 are on android (with the attachement from comment 37). There is no log for |make check|, but it fails after \"maybe reboot\", so I'm guessing something either times out, or it sees no output and doesn't like that.\n\nI guess the best way to fix this is to try it on an android machine, so doing that now.", "count": 38, "attachment_id": null, "creator": "paul.biggar@gmail.com", "time": "2011-07-28T17:59:13Z", "id": 5619872, "is_private": false, "raw_text": "The build errors in comment 36 are on android (with the attachement from comment 37). There is no log for |make check|, but it fails after \"maybe reboot\", so I'm guessing something either times out, or it sees no output and doesn't like that.\n\nI guess the best way to fix this is to try it on an android machine, so doing that now.", "creation_time": "2011-07-28T17:59:13Z", "bug_id": 638219, "tags": []}, {"time": "2012-07-20T19:28:34Z", "id": 6492269, "bug_id": 638219, "creation_time": "2012-07-20T19:28:34Z", "raw_text": "Terrence, sfink and I were not sure if jstests were run by the js shell (they are run by the browser, though). If it wasn't, this bug will fix it.", "tags": [], "is_private": false, "text": "Terrence, sfink and I were not sure if jstests were run by the js shell (they are run by the browser, though). If it wasn't, this bug will fix it.", "count": 39, "author": "nth10sd@gmail.com", "creator": "nth10sd@gmail.com", "attachment_id": null}, {"time": "2012-11-12T23:52:07Z", "id": 6815504, "raw_text": "See bug 745237 and bug 780568.", "bug_id": 638219, "creation_time": "2012-11-12T23:52:07Z", "tags": [], "is_private": false, "text": "See bug 745237 and bug 780568.", "count": 40, "author": "nth10sd@gmail.com", "creator": "nth10sd@gmail.com", "attachment_id": null}, {"tags": [], "creator": "gps@mozilla.com", "bug_id": 638219, "creation_time": "2012-12-14T18:46:58Z", "raw_text": "", "is_private": false, "attachment_id": null, "count": 41, "text": "*** Bug 686240 has been marked as a duplicate of this bug. ***", "id": 6915875, "time": "2012-12-14T18:46:58Z", "author": "gps@mozilla.com"}, {"time": "2012-12-14T19:07:59Z", "author": "gps@mozilla.com", "id": 6915968, "count": 42, "text": "FWIW, single threaded timings from my MBP last night:\n\nreal\t18m49.003s\nuser\t8m39.230s\nsys\t4m18.158s\n\nI reckon we could achieve wall time of < 3 minutes on this machine (assuming 5x speedup from 4 physical cores + hyperthreading and enough parallel processes to soak up CPU cycles lost from tests not exercising all available CPU cycles). This would be about 15 minutes wall time savings!\n\nThis would make |make check| run at least 2x faster. Our Linux and OS X builder times are hovering around 45 minutes to an hour (http://brasstacks.mozilla.com/gofaster/#/executiontime/build).\n\nIf my math is correct, running jit_test.py in parallel would enable us to complete builds on buildbot 20-33% faster! I'm pretty sure RelEng would love if this landed.", "attachment_id": null, "is_private": false, "bug_id": 638219, "creation_time": "2012-12-14T19:07:59Z", "raw_text": "FWIW, single threaded timings from my MBP last night:\n\nreal\t18m49.003s\nuser\t8m39.230s\nsys\t4m18.158s\n\nI reckon we could achieve wall time of < 3 minutes on this machine (assuming 5x speedup from 4 physical cores + hyperthreading and enough parallel processes to soak up CPU cycles lost from tests not exercising all available CPU cycles). This would be about 15 minutes wall time savings!\n\nThis would make |make check| run at least 2x faster. Our Linux and OS X builder times are hovering around 45 minutes to an hour (http://brasstacks.mozilla.com/gofaster/#/executiontime/build).\n\nIf my math is correct, running jit_test.py in parallel would enable us to complete builds on buildbot 20-33% faster! I'm pretty sure RelEng would love if this landed.", "tags": [], "creator": "gps@mozilla.com"}, {"creation_time": "2012-12-14T20:25:53Z", "bug_id": 638219, "raw_text": "The patches here no longer apply.  I'm going to take a crack at modernizing them.", "tags": [], "creator": "froydnj+bz@gmail.com", "is_private": false, "attachment_id": null, "count": 43, "text": "The patches here no longer apply.  I'm going to take a crack at modernizing them.", "time": "2012-12-14T20:25:53Z", "author": "froydnj+bz@gmail.com", "id": 6916285}, {"count": 44, "text": "I actually worked at that a few months ago, but I didn't get much buy-in from, well, anyone. I still feel kind of annoyed that all of this stuff has bitrotted.", "author": "dirkjan@ochtman.nl", "time": "2012-12-14T20:50:26Z", "id": 6916360, "raw_text": "I actually worked at that a few months ago, but I didn't get much buy-in from, well, anyone. I still feel kind of annoyed that all of this stuff has bitrotted.", "bug_id": 638219, "creation_time": "2012-12-14T20:50:26Z", "creator": "dirkjan@ochtman.nl", "tags": [], "is_private": false, "attachment_id": null}, {"id": 6916435, "time": "2012-12-14T21:10:18Z", "author": "froydnj+bz@gmail.com", "count": 45, "text": "Whoops, my bad, after not seeing movement on this bug for a year, I assumed you had abandoned your patches.  Apparently that's not the case!  Do the patches that you re-worked still apply, or have they bitrotted as well?", "attachment_id": null, "is_private": false, "tags": [], "creator": "froydnj+bz@gmail.com", "creation_time": "2012-12-14T21:10:18Z", "bug_id": 638219, "raw_text": "Whoops, my bad, after not seeing movement on this bug for a year, I assumed you had abandoned your patches.  Apparently that's not the case!  Do the patches that you re-worked still apply, or have they bitrotted as well?"}, {"time": "2012-12-14T21:12:25Z", "id": 6916444, "is_private": false, "raw_text": "(In reply to Dirkjan Ochtman (:djc) from comment #44)\n> I actually worked at that a few months ago, but I didn't get much buy-in\n> from, well, anyone. I still feel kind of annoyed that all of this stuff has\n> bitrotted.\n\nI'm all for supporting this change, though.", "bug_id": 638219, "creation_time": "2012-12-14T21:12:25Z", "tags": [], "author": "nth10sd@gmail.com", "count": 46, "text": "(In reply to Dirkjan Ochtman (:djc) from comment #44)\n> I actually worked at that a few months ago, but I didn't get much buy-in\n> from, well, anyone. I still feel kind of annoyed that all of this stuff has\n> bitrotted.\n\nI'm all for supporting this change, though.", "attachment_id": null, "creator": "nth10sd@gmail.com"}, {"author": "dirkjan@ochtman.nl", "count": 47, "text": "I could probably take another whack at it if there are people willing to review and land it. It would be nice if we could two or three patches landed before doing the rest of it. IIRC the first patch in my series was moving most of the jittest code, and that was very prone to generating hard-to-resolve conflicts if anyone wanted to do anything in there (which actually happened a few times during the days I worked on my patch series).", "attachment_id": null, "creator": "dirkjan@ochtman.nl", "id": 6916475, "time": "2012-12-14T21:16:04Z", "is_private": false, "tags": [], "creation_time": "2012-12-14T21:16:04Z", "bug_id": 638219, "raw_text": "I could probably take another whack at it if there are people willing to review and land it. It would be nice if we could two or three patches landed before doing the rest of it. IIRC the first patch in my series was moving most of the jittest code, and that was very prone to generating hard-to-resolve conflicts if anyone wanted to do anything in there (which actually happened a few times during the days I worked on my patch series)."}, {"time": "2012-12-15T09:47:06Z", "author": "terrence.d.cole@gmail.com", "id": 6917552, "count": 48, "text": "Warning: this is probably going to end up as a bit of a novella, so go grab a hot drink. Also, feel free to skip this if you are not specifically interested in the js test suites.\n\n(In reply to Dirkjan Ochtman (:djc) from comment #47)\n> I could probably take another whack at it if there are people willing to\n> review and land it. It would be nice if we could two or three patches landed\n> before doing the rest of it. IIRC the first patch in my series was moving\n> most of the jittest code, and that was very prone to generating\n> hard-to-resolve conflicts if anyone wanted to do anything in there (which\n> actually happened a few times during the days I worked on my patch series).\n\nThat was just before I got here -- I've always wondered what happened to those patches. \n\nOver the last year or so, I've been slowly plinking away at cleaning up the test suites: see bug 745230, bug 745237, bug 746836, and their linked blocker bugs. The keys to working successfully on the js test suites have been: (1) work in small chunks so that our chronically-overworked, non-python team will make time for reviewing non-mission-critical patches and (2) tie each piece of work to a new feature so that you can get buy-in for the review. Until we are at the top of arewefastyet.com, abstract goals like unification and cleanliness are going to get totally ignored, for good reason. That said, there are a huge number of ways that having a better test suite can get us to the top of AWFY faster, we just have to stay focused on providing tangible, incremental benefits.\n\nThe current state of affairs:\n\njit_test.py will run tests in the shell *only* and /not/ in the browser. It looks for and parses |jit-test| headers at the top of each test file. A test is considered successful if it finishes without an exception or segfault. It supports a bunch of CLI options that are useful specifically to JIT development and which the JIT development team changes the meaning of at-will. It has good support for running tests on ARM. It also has some neat features for storing and re-running tests that Marty uses extensively. It runs test in serial.\n\njstests.py is able to run tests in the shell /and/ its tests can also be run by the browser in \"reftest\" mode. The makefiles use jstests.py to generate the manifest immediately before starting the tests: there is no longer a clunky physical manifest to update when adding a test. It looks for and parses |reftest| headers: these correspond exactly to the browser's reftest manifest entries, so we cannot change the format. Each test must print a SUCCESS after it runs or the harness will consider it a failure. It runs tests in parallel.\n\nThe test suites are in a much better state now than they were a year ago. Although I haven't used Dirkjan's patches directly, I've managed to sneak in most of his refactoring work in one form or another. For example, the progressbar code is already shared by the two suites.\n\nObservations:\n- The jit-test suite is much better from a developer perspective: you can just cat a fuzzer testcase into the tree and you are done. Reftests need at least one additional assertion to be added.\n- The reftest suite requires the shell to work before you can even run tests with it (to parse the more complex |reftest| annotations).\n- Except for the point above, the reftest suite is much better when actually running shell tests because of the parallelism.\n- |jit-test| headers and |reftest| headers are just wildly and completely different. Just being able to understand both formats isn't enough: they each need different support from the test runner, from the result parser, and even from the system itself for the valgrind flag.\n- Some reftest tests require browser features and just nop in the shell.\n- Most jit-test tests would probably not get any (additional) benefit out of running in the browser, although they wouldn't lose any benefit if moved to the browser.\n- Moving the jit-tests to the browser on tbpl would allow the build step to complete even faster and allow the jit-tests to run in parallel with more things, but would be very hard to implement.\n- As Gregory just pointed out we desperately, desperately need the jit-tests to run in parallel.\n\nI've been meaning to spend a weekend on this last point and actually managed to make some progress on it two Fridays ago by making jit-tests import and use the jstests progressbar. With this done, the nice parallel test runner implementation in tests/lib/tasks_unix.py is at least available to the jit-tests, in theory. The first step is to make jit-tests use the Test and TestCase classes from tests/lib/tests.py so that it will be compatible with the task runner. I'm not sure what else will be required, but I don't imagine there will be too much more to do after that.\n\nThis would be a huge win. If it winds up in my review queue, I will make reviewing it my top priority.", "is_private": false, "attachment_id": null, "creation_time": "2012-12-15T09:47:06Z", "bug_id": 638219, "raw_text": "Warning: this is probably going to end up as a bit of a novella, so go grab a hot drink. Also, feel free to skip this if you are not specifically interested in the js test suites.\n\n(In reply to Dirkjan Ochtman (:djc) from comment #47)\n> I could probably take another whack at it if there are people willing to\n> review and land it. It would be nice if we could two or three patches landed\n> before doing the rest of it. IIRC the first patch in my series was moving\n> most of the jittest code, and that was very prone to generating\n> hard-to-resolve conflicts if anyone wanted to do anything in there (which\n> actually happened a few times during the days I worked on my patch series).\n\nThat was just before I got here -- I've always wondered what happened to those patches. \n\nOver the last year or so, I've been slowly plinking away at cleaning up the test suites: see bug 745230, bug 745237, bug 746836, and their linked blocker bugs. The keys to working successfully on the js test suites have been: (1) work in small chunks so that our chronically-overworked, non-python team will make time for reviewing non-mission-critical patches and (2) tie each piece of work to a new feature so that you can get buy-in for the review. Until we are at the top of arewefastyet.com, abstract goals like unification and cleanliness are going to get totally ignored, for good reason. That said, there are a huge number of ways that having a better test suite can get us to the top of AWFY faster, we just have to stay focused on providing tangible, incremental benefits.\n\nThe current state of affairs:\n\njit_test.py will run tests in the shell *only* and /not/ in the browser. It looks for and parses |jit-test| headers at the top of each test file. A test is considered successful if it finishes without an exception or segfault. It supports a bunch of CLI options that are useful specifically to JIT development and which the JIT development team changes the meaning of at-will. It has good support for running tests on ARM. It also has some neat features for storing and re-running tests that Marty uses extensively. It runs test in serial.\n\njstests.py is able to run tests in the shell /and/ its tests can also be run by the browser in \"reftest\" mode. The makefiles use jstests.py to generate the manifest immediately before starting the tests: there is no longer a clunky physical manifest to update when adding a test. It looks for and parses |reftest| headers: these correspond exactly to the browser's reftest manifest entries, so we cannot change the format. Each test must print a SUCCESS after it runs or the harness will consider it a failure. It runs tests in parallel.\n\nThe test suites are in a much better state now than they were a year ago. Although I haven't used Dirkjan's patches directly, I've managed to sneak in most of his refactoring work in one form or another. For example, the progressbar code is already shared by the two suites.\n\nObservations:\n- The jit-test suite is much better from a developer perspective: you can just cat a fuzzer testcase into the tree and you are done. Reftests need at least one additional assertion to be added.\n- The reftest suite requires the shell to work before you can even run tests with it (to parse the more complex |reftest| annotations).\n- Except for the point above, the reftest suite is much better when actually running shell tests because of the parallelism.\n- |jit-test| headers and |reftest| headers are just wildly and completely different. Just being able to understand both formats isn't enough: they each need different support from the test runner, from the result parser, and even from the system itself for the valgrind flag.\n- Some reftest tests require browser features and just nop in the shell.\n- Most jit-test tests would probably not get any (additional) benefit out of running in the browser, although they wouldn't lose any benefit if moved to the browser.\n- Moving the jit-tests to the browser on tbpl would allow the build step to complete even faster and allow the jit-tests to run in parallel with more things, but would be very hard to implement.\n- As Gregory just pointed out we desperately, desperately need the jit-tests to run in parallel.\n\nI've been meaning to spend a weekend on this last point and actually managed to make some progress on it two Fridays ago by making jit-tests import and use the jstests progressbar. With this done, the nice parallel test runner implementation in tests/lib/tasks_unix.py is at least available to the jit-tests, in theory. The first step is to make jit-tests use the Test and TestCase classes from tests/lib/tests.py so that it will be compatible with the task runner. I'm not sure what else will be required, but I don't imagine there will be too much more to do after that.\n\nThis would be a huge win. If it winds up in my review queue, I will make reviewing it my top priority.", "tags": [], "creator": "terrence.d.cole@gmail.com"}, {"creator": "dirkjan@ochtman.nl", "tags": [], "raw_text": "Terrence: thanks for the explanation.\n\nI fully understand how the JS engine arms race makes things like refactoring test driver scripts not a priority. I was just grumpy because (a) this was my first good chance at contributing to mozilla-central, after lots of ways of contributing in other ways around the fringes, (b) it was a mentored bug, so it was supposed to be easier for a non-core contributor to get something through the process, until the mentor left Mozilla and no one was able to pick it up, and (c) I spent quite a few hours on what was, in my opinion, a pretty high-quality, easily-reviewable patch set, that in the end mostly bitrotted, while bits and pieces were reimplemented by other people from scratch.\n\nI would like to try to get something into your review queue this week.", "creation_time": "2012-12-15T13:43:37Z", "bug_id": 638219, "attachment_id": null, "is_private": false, "text": "Terrence: thanks for the explanation.\n\nI fully understand how the JS engine arms race makes things like refactoring test driver scripts not a priority. I was just grumpy because (a) this was my first good chance at contributing to mozilla-central, after lots of ways of contributing in other ways around the fringes, (b) it was a mentored bug, so it was supposed to be easier for a non-core contributor to get something through the process, until the mentor left Mozilla and no one was able to pick it up, and (c) I spent quite a few hours on what was, in my opinion, a pretty high-quality, easily-reviewable patch set, that in the end mostly bitrotted, while bits and pieces were reimplemented by other people from scratch.\n\nI would like to try to get something into your review queue this week.", "count": 49, "id": 6917719, "author": "dirkjan@ochtman.nl", "time": "2012-12-15T13:43:37Z"}, {"is_private": false, "tags": [], "bug_id": 638219, "creation_time": "2012-12-15T16:26:37Z", "raw_text": "Terrence -- are you going to be available for review during your vacation? If not, you might want to update your bugzilla name with the time range you'll be gone.\n\nTerrence is really the right person for the reviews since he has the clearest vision of where this should go (and specifically the obstacles in the way, in the form of what workflow breaks with a given change.) But if he's unavailable, I'll do them.", "id": 6917883, "time": "2012-12-15T16:26:37Z", "attachment_id": null, "creator": "sphink@gmail.com", "author": "sphink@gmail.com", "count": 50, "text": "Terrence -- are you going to be available for review during your vacation? If not, you might want to update your bugzilla name with the time range you'll be gone.\n\nTerrence is really the right person for the reviews since he has the clearest vision of where this should go (and specifically the obstacles in the way, in the form of what workflow breaks with a given change.) But if he's unavailable, I'll do them."}, {"attachment_id": null, "creator": "terrence.d.cole@gmail.com", "author": "terrence.d.cole@gmail.com", "text": "(In reply to Dirkjan Ochtman (:djc) from comment #49)\n> I would like to try to get something into your review queue this week.\n\nAwesome! I will do my best to make sure we don't drop the ball again.\n\nAs Steve says, I am out of the office until the end of the year, so do please account for a higher than normal review latency. I will have my machine with me for the duration, and I will try to check my mail and review queue at least daily.", "count": 51, "is_private": false, "tags": [], "raw_text": "(In reply to Dirkjan Ochtman (:djc) from comment #49)\n> I would like to try to get something into your review queue this week.\n\nAwesome! I will do my best to make sure we don't drop the ball again.\n\nAs Steve says, I am out of the office until the end of the year, so do please account for a higher than normal review latency. I will have my machine with me for the duration, and I will try to check my mail and review queue at least daily.", "creation_time": "2012-12-15T17:13:39Z", "bug_id": 638219, "id": 6917951, "time": "2012-12-15T17:13:39Z"}, {"attachment_id": null, "creator": "ted@mielczarek.org", "author": "ted@mielczarek.org", "count": 52, "text": "Just FWIW,\n(In reply to Terrence Cole [:terrence] (on holiday until 2013) from comment #48)\n> - Moving the jit-tests to the browser on tbpl would allow the build step to\n> complete even faster and allow the jit-tests to run in parallel with more\n> things, but would be very hard to implement.\n\nI don't think there's any need to move jit-tests to run in-browser. We *should* move them to run on the test machines from the test package, since we could also then run them on Android devices fairly easily, but we can continue running them in the JS shell. We run xpcshell tests similarly, there's no reason we can't do it for JS tests.", "is_private": false, "tags": [], "bug_id": 638219, "creation_time": "2012-12-17T13:04:50Z", "raw_text": "Just FWIW,\n(In reply to Terrence Cole [:terrence] (on holiday until 2013) from comment #48)\n> - Moving the jit-tests to the browser on tbpl would allow the build step to\n> complete even faster and allow the jit-tests to run in parallel with more\n> things, but would be very hard to implement.\n\nI don't think there's any need to move jit-tests to run in-browser. We *should* move them to run on the test machines from the test package, since we could also then run them on Android devices fairly easily, but we can continue running them in the JS shell. We run xpcshell tests similarly, there's no reason we can't do it for JS tests.", "id": 6920433, "time": "2012-12-17T13:04:50Z"}, {"id": 6921784, "time": "2012-12-17T19:00:28Z", "author": "gps@mozilla.com", "text": "I agree with Ted that we should move these tests out of |make check| and into a new test \"job.\" However, I think that's considerably more work than refactoring jit_test.py to run tests in parallel. It's also more difficult to make changes to things once they live as a separate test job. Therefore, I recommend that the course of action be 1) refactor jit_test.py to run in parallel 2) pull things out of |make check|. #2 should be a separate bug blocked upon completion of this one.", "count": 53, "is_private": false, "attachment_id": null, "tags": [], "creator": "gps@mozilla.com", "creation_time": "2012-12-17T19:00:28Z", "bug_id": 638219, "raw_text": "I agree with Ted that we should move these tests out of |make check| and into a new test \"job.\" However, I think that's considerably more work than refactoring jit_test.py to run tests in parallel. It's also more difficult to make changes to things once they live as a separate test job. Therefore, I recommend that the course of action be 1) refactor jit_test.py to run in parallel 2) pull things out of |make check|. #2 should be a separate bug blocked upon completion of this one."}, {"raw_text": "> 2) pull things out of |make check|. #2 should be a separate bug\n> blocked upon completion of this one.\n\nI filed bug 822394.", "bug_id": 638219, "creation_time": "2012-12-17T19:32:19Z", "tags": [], "is_private": false, "time": "2012-12-17T19:32:19Z", "id": 6921921, "creator": "nth10sd@gmail.com", "attachment_id": null, "text": "> 2) pull things out of |make check|. #2 should be a separate bug\n> blocked upon completion of this one.\n\nI filed bug 822394.", "count": 54, "author": "nth10sd@gmail.com"}, {"tags": [], "raw_text": "Making a separate test job also involves packaging up everything needed for the tests. Apparently this is already done for jstests, given that they run in the browser in a separate job already? I would think it would go something like\n\n1. merge jit_test and jstests, with |make check| and jsreftests both running at least as much as they currently do\n\n2. perhaps it'll fall out naturally from the above, but get parallel running to work in the merged version (jstests already run in parallel)\n\n3. make the jit_tests packagable for a separate job run (and ensure that the jstests packaging will work for a separate shell-only run in addition to its current in-browser run)\n\n4. create a separate job for running shell tests on the packaged version\n\n5. Remove make check from the build job\n\nOnce the functionality is there, I can help with the buildbot and tbpl portions of this. It would be very nice to see movement on this; it really bothers me that all of our builds have to wait on |make check| before either reporting status or spawning the dependent test jobs.", "bug_id": 638219, "creation_time": "2012-12-17T19:35:09Z", "is_private": false, "id": 6921931, "time": "2012-12-17T19:35:09Z", "creator": "sphink@gmail.com", "attachment_id": null, "text": "Making a separate test job also involves packaging up everything needed for the tests. Apparently this is already done for jstests, given that they run in the browser in a separate job already? I would think it would go something like\n\n1. merge jit_test and jstests, with |make check| and jsreftests both running at least as much as they currently do\n\n2. perhaps it'll fall out naturally from the above, but get parallel running to work in the merged version (jstests already run in parallel)\n\n3. make the jit_tests packagable for a separate job run (and ensure that the jstests packaging will work for a separate shell-only run in addition to its current in-browser run)\n\n4. create a separate job for running shell tests on the packaged version\n\n5. Remove make check from the build job\n\nOnce the functionality is there, I can help with the buildbot and tbpl portions of this. It would be very nice to see movement on this; it really bothers me that all of our builds have to wait on |make check| before either reporting status or spawning the dependent test jobs.", "count": 55, "author": "sphink@gmail.com"}, {"count": 56, "text": "(In reply to Steve Fink [:sfink] from comment #55)\n> Once the functionality is there, I can help with the buildbot and tbpl\n> portions of this. It would be very nice to see movement on this; it really\n> bothers me that all of our builds have to wait on |make check| before either\n> reporting status or spawning the dependent test jobs.\n\nnit: \"make check\" doesn't block the test jobs from starting. Builds are uploaded after the build+package is complete, and then make check is run and other tests are spawned in parallel. Making \"make check\" faster just means we use up fewer resources on the builders, trading it for time on the test machines. (However, we can run in parallel with other test suites.)", "author": "ted@mielczarek.org", "time": "2012-12-17T20:40:06Z", "id": 6922165, "raw_text": "(In reply to Steve Fink [:sfink] from comment #55)\n> Once the functionality is there, I can help with the buildbot and tbpl\n> portions of this. It would be very nice to see movement on this; it really\n> bothers me that all of our builds have to wait on |make check| before either\n> reporting status or spawning the dependent test jobs.\n\nnit: \"make check\" doesn't block the test jobs from starting. Builds are uploaded after the build+package is complete, and then make check is run and other tests are spawned in parallel. Making \"make check\" faster just means we use up fewer resources on the builders, trading it for time on the test machines. (However, we can run in parallel with other test suites.)", "creation_time": "2012-12-17T20:40:06Z", "bug_id": 638219, "creator": "ted@mielczarek.org", "tags": [], "attachment_id": null, "is_private": false}, {"is_private": false, "tags": [], "raw_text": "I didn't know that! Ok, that makes me feel better, thanks.", "creation_time": "2012-12-17T21:02:59Z", "bug_id": 638219, "id": 6922250, "time": "2012-12-17T21:02:59Z", "attachment_id": null, "creator": "sphink@gmail.com", "author": "sphink@gmail.com", "count": 57, "text": "I didn't know that! Ok, that makes me feel better, thanks."}, {"count": 58, "text": "> nit: \"make check\" doesn't block the test jobs from starting. Builds are\n> uploaded after the build+package is complete, and then make check is run and\n> other tests are spawned in parallel. Making \"make check\" faster just means\n> we use up fewer resources on the builders, trading it for time on the test\n> machines. (However, we can run in parallel with other test suites.)\n\nHowever make check does delay the time before we can see if the job passed/failed and also view the log (for the vast majority of people who do not have BuildVPN access and thus are unable to view the stdio on the buildbot master directly). This in the past has impacted the length of time taken for bisecting weird bustage, and therefore the length of time the tree has had to remain closed.", "id": 6923147, "author": "emorley@mozilla.com", "time": "2012-12-18T00:26:45Z", "creator": "emorley@mozilla.com", "tags": [], "raw_text": "> nit: \"make check\" doesn't block the test jobs from starting. Builds are\n> uploaded after the build+package is complete, and then make check is run and\n> other tests are spawned in parallel. Making \"make check\" faster just means\n> we use up fewer resources on the builders, trading it for time on the test\n> machines. (However, we can run in parallel with other test suites.)\n\nHowever make check does delay the time before we can see if the job passed/failed and also view the log (for the vast majority of people who do not have BuildVPN access and thus are unable to view the stdio on the buildbot master directly). This in the past has impacted the length of time taken for bisecting weird bustage, and therefore the length of time the tree has had to remain closed.", "creation_time": "2012-12-18T00:26:45Z", "bug_id": 638219, "attachment_id": null, "is_private": false}, {"author": "terrence.d.cole@gmail.com", "count": 59, "text": "(In reply to Steve Fink [:sfink] from comment #55)\n> 1. merge jit_test and jstests, with |make check| and jsreftests both running\n> at least as much as they currently do\n\nI'd rather put this at the end of the list. Given how incredibly hard that is going to be, I don't think we should block the important stuff below. Besides, I think this is more likely to fall out of the below than vice-versa.\n \n> 2. perhaps it'll fall out naturally from the above, but get parallel running\n> to work in the merged version (jstests already run in parallel)\n\nWe're already sharing the ProgressBar. All we need to do is share the definition of a Test and TestCase, which I think Dirkjan is going to be working on this week.\n\n> 3. make the jit_tests packagable for a separate job run (and ensure that the\n> jstests packaging will work for a separate shell-only run in addition to its\n> current in-browser run)\n>\n> 4. create a separate job for running shell tests on the packaged version\n> \n> 5. Remove make check from the build job\n\nWe could even work on 3-5 in parallel to 2 if anyone has the time.", "attachment_id": null, "creator": "terrence.d.cole@gmail.com", "time": "2012-12-18T04:26:28Z", "id": 6923812, "is_private": false, "raw_text": "(In reply to Steve Fink [:sfink] from comment #55)\n> 1. merge jit_test and jstests, with |make check| and jsreftests both running\n> at least as much as they currently do\n\nI'd rather put this at the end of the list. Given how incredibly hard that is going to be, I don't think we should block the important stuff below. Besides, I think this is more likely to fall out of the below than vice-versa.\n \n> 2. perhaps it'll fall out naturally from the above, but get parallel running\n> to work in the merged version (jstests already run in parallel)\n\nWe're already sharing the ProgressBar. All we need to do is share the definition of a Test and TestCase, which I think Dirkjan is going to be working on this week.\n\n> 3. make the jit_tests packagable for a separate job run (and ensure that the\n> jstests packaging will work for a separate shell-only run in addition to its\n> current in-browser run)\n>\n> 4. create a separate job for running shell tests on the packaged version\n> \n> 5. Remove make check from the build job\n\nWe could even work on 3-5 in parallel to 2 if anyone has the time.", "bug_id": 638219, "creation_time": "2012-12-18T04:26:28Z", "tags": []}, {"creation_time": "2013-01-08T20:59:25Z", "bug_id": 638219, "raw_text": "", "tags": [], "is_private": false, "time": "2013-01-08T20:59:25Z", "id": 6976445, "creator": "gps@mozilla.com", "attachment_id": null, "text": "*** Bug 827960 has been marked as a duplicate of this bug. ***", "count": 60, "author": "gps@mozilla.com"}, {"creator": "dirkjan@ochtman.nl", "attachment_id": null, "text": "Sorry for being slow on this. Hope to still do it, though, this weekend.", "count": 61, "author": "dirkjan@ochtman.nl", "bug_id": 638219, "creation_time": "2013-01-08T21:11:21Z", "raw_text": "Sorry for being slow on this. Hope to still do it, though, this weekend.", "tags": [], "is_private": false, "time": "2013-01-08T21:11:21Z", "id": 6976488}, {"raw_text": "I'd like to see if we can land this patch before I go on doing much else. Last time around, it proved that this kind of patch is way too easily corrupted by other people landing some small fix into the test scripts.\n\nI'm not entirely sure why the normpath() didn't work; I tried running from the src directory, with ./jit-test/jit_test.py ./js, and it failed without the replacement of normpath() by abspath().", "bug_id": 638219, "creation_time": "2013-01-13T19:48:13Z", "creator": "dirkjan@ochtman.nl", "tags": [], "attachment_id": 701600, "is_private": false, "text": "Created attachment 701600\nFirst stage: move jit_test code to js/src/tests\n\nI'd like to see if we can land this patch before I go on doing much else. Last time around, it proved that this kind of patch is way too easily corrupted by other people landing some small fix into the test scripts.\n\nI'm not entirely sure why the normpath() didn't work; I tried running from the src directory, with ./jit-test/jit_test.py ./js, and it failed without the replacement of normpath() by abspath().", "count": 62, "author": "dirkjan@ochtman.nl", "time": "2013-01-13T19:48:13Z", "id": 6995788}, {"attachment_id": null, "is_private": false, "creator": "ted@mielczarek.org", "tags": [], "raw_text": "Did you do a standalone JS build in the srcdir? Note that the \"js\" binary is actually built into js/src/shell, and symlinked back up to js/src (as well as $(DIST)/bin).", "creation_time": "2013-01-14T15:38:35Z", "bug_id": 638219, "id": 6997700, "author": "ted@mielczarek.org", "time": "2013-01-14T15:38:35Z", "text": "Did you do a standalone JS build in the srcdir? Note that the \"js\" binary is actually built into js/src/shell, and symlinked back up to js/src (as well as $(DIST)/bin).", "count": 63}, {"tags": [], "creator": "dirkjan@ochtman.nl", "bug_id": 638219, "creation_time": "2013-01-14T15:42:56Z", "raw_text": "I built using \"make\" from js/src.", "is_private": false, "attachment_id": null, "count": 64, "text": "I built using \"make\" from js/src.", "id": 6997753, "time": "2013-01-14T15:42:56Z", "author": "dirkjan@ochtman.nl"}, {"tags": [], "creator": "terrence.d.cole@gmail.com", "creation_time": "2013-01-14T19:09:25Z", "bug_id": 638219, "raw_text": "(In reply to Ted Mielczarek [:ted.mielczarek] from comment #63)\n> Did you do a standalone JS build in the srcdir? Note that the \"js\" binary is\n> actually built into js/src/shell, and symlinked back up to js/src (as well\n> as $(DIST)/bin).\n\nI've also hit this error. How does realpath behave in this case?", "attachment_id": null, "is_private": false, "text": "(In reply to Ted Mielczarek [:ted.mielczarek] from comment #63)\n> Did you do a standalone JS build in the srcdir? Note that the \"js\" binary is\n> actually built into js/src/shell, and symlinked back up to js/src (as well\n> as $(DIST)/bin).\n\nI've also hit this error. How does realpath behave in this case?", "count": 65, "id": 6999178, "time": "2013-01-14T19:09:25Z", "author": "terrence.d.cole@gmail.com"}, {"time": "2013-01-14T19:34:12Z", "id": 6999278, "raw_text": "Sorry, that was absurdly unclear, so let me clarify: people frequently, as part of their normal workflow, run the test suites from the /craziest/ places in their path. We must to support this.\n\nMy thinking was that we would move each piece of jit-tests over to the tests/lib as needed, but the way you are doing this will work fine too. I think we can even do it without having to re-solve the problem above, since we already have robust code to handle this in add_libdir_to_path.\n\nWhat I'd like to do is:\n1) Copy jit-test/jit_tests.py to tests/lib/jittests.py.\n2) In jit-test/jit_tests.py, remove everything but |add_libdir_to_path| and |main|.\n3) In tests/lib/jittest.py, remove |add_libdir_to_path| (it's already in the path) and |main|.\n4) In jit-test/jit_tests.py, call |add_libdir_to_path()| so that we have access to jittests.py, then import all the symbols main uses from jittests.py.\n\nThis uses our existing search code, so we won't break any existing uses and keeps the driver bits nicely separated from library code (or at least code that will become library code later on).", "creation_time": "2013-01-14T19:34:12Z", "bug_id": 638219, "tags": [], "is_private": false, "count": 66, "text": "Sorry, that was absurdly unclear, so let me clarify: people frequently, as part of their normal workflow, run the test suites from the /craziest/ places in their path. We must to support this.\n\nMy thinking was that we would move each piece of jit-tests over to the tests/lib as needed, but the way you are doing this will work fine too. I think we can even do it without having to re-solve the problem above, since we already have robust code to handle this in add_libdir_to_path.\n\nWhat I'd like to do is:\n1) Copy jit-test/jit_tests.py to tests/lib/jittests.py.\n2) In jit-test/jit_tests.py, remove everything but |add_libdir_to_path| and |main|.\n3) In tests/lib/jittest.py, remove |add_libdir_to_path| (it's already in the path) and |main|.\n4) In jit-test/jit_tests.py, call |add_libdir_to_path()| so that we have access to jittests.py, then import all the symbols main uses from jittests.py.\n\nThis uses our existing search code, so we won't break any existing uses and keeps the driver bits nicely separated from library code (or at least code that will become library code later on).", "author": "terrence.d.cole@gmail.com", "creator": "terrence.d.cole@gmail.com", "attachment_id": null}, {"is_private": false, "attachment_id": 701920, "creator": "dirkjan@ochtman.nl", "tags": [], "raw_text": "Here's take 2:\n\n- Moves code to tests/lib rather than just tests\n- Keeps using the add_libdir_to_path() function\n\nHowever, main() is still shipped of to the jittests library with the rest of the code for now, due to somewhat pervasive use of module-level globals. This will be on the agenda for cleanup at a later stage.", "bug_id": 638219, "creation_time": "2013-01-14T20:19:37Z", "id": 6999490, "author": "dirkjan@ochtman.nl", "time": "2013-01-14T20:19:37Z", "text": "Created attachment 701920\nMove jit_test code js/src/tests/lib (take 2)\n\nHere's take 2:\n\n- Moves code to tests/lib rather than just tests\n- Keeps using the add_libdir_to_path() function\n\nHowever, main() is still shipped of to the jittests library with the rest of the code for now, due to somewhat pervasive use of module-level globals. This will be on the agenda for cleanup at a later stage.", "count": 67}, {"raw_text": "Review of attachment 701920:\n-----------------------------------------------------------------\n\nThis looks much better. \\o/", "bug_id": 638219, "creation_time": "2013-01-14T20:22:46Z", "tags": [], "is_private": false, "time": "2013-01-14T20:22:46Z", "id": 6999505, "creator": "terrence.d.cole@gmail.com", "attachment_id": 701920, "text": "Comment on attachment 701920\nMove jit_test code js/src/tests/lib (take 2)\n\nReview of attachment 701920:\n-----------------------------------------------------------------\n\nThis looks much better. \\o/", "count": 68, "author": "terrence.d.cole@gmail.com"}, {"author": "Ms2ger@gmail.com", "count": 69, "text": "https://tbpl.mozilla.org/?tree=Try&rev=ba64d94b474e", "attachment_id": null, "creator": "Ms2ger@gmail.com", "time": "2013-01-14T20:53:58Z", "id": 6999636, "is_private": false, "bug_id": 638219, "creation_time": "2013-01-14T20:53:58Z", "raw_text": "https://tbpl.mozilla.org/?tree=Try&rev=ba64d94b474e", "tags": []}, {"attachment_id": null, "creator": "dirkjan@ochtman.nl", "author": "dirkjan@ochtman.nl", "text": "Try looks good, I think we can land this.", "count": 70, "is_private": false, "tags": [], "creation_time": "2013-01-15T07:28:16Z", "bug_id": 638219, "raw_text": "Try looks good, I think we can land this.", "id": 7001692, "time": "2013-01-15T07:28:16Z"}, {"is_private": false, "raw_text": "https://hg.mozilla.org/integration/mozilla-inbound/rev/9de04b80715f", "creation_time": "2013-01-15T18:58:24Z", "bug_id": 638219, "tags": [], "time": "2013-01-15T18:58:24Z", "id": 7003981, "attachment_id": null, "creator": "terrence.d.cole@gmail.com", "author": "terrence.d.cole@gmail.com", "text": "https://hg.mozilla.org/integration/mozilla-inbound/rev/9de04b80715f", "count": 71}, {"creator": "terrence.d.cole@gmail.com", "tags": [], "raw_text": "It looks like the above patch stripped the execute bit on jit_tests.py. This re-adds it.", "bug_id": 638219, "creation_time": "2013-01-15T19:55:49Z", "attachment_id": 702445, "is_private": false, "count": 72, "text": "Created attachment 702445\nfollow up\n\nIt looks like the above patch stripped the execute bit on jit_tests.py. This re-adds it.", "id": 7004261, "author": "terrence.d.cole@gmail.com", "time": "2013-01-15T19:55:49Z"}, {"count": 73, "text": "Comment on attachment 702445\nfollow up\n\nWhoops, set the reviewer incorrectly.", "author": "terrence.d.cole@gmail.com", "creator": "terrence.d.cole@gmail.com", "attachment_id": 702445, "id": 7004263, "time": "2013-01-15T19:56:29Z", "tags": [], "raw_text": "Whoops, set the reviewer incorrectly.", "bug_id": 638219, "creation_time": "2013-01-15T19:56:29Z", "is_private": false}, {"author": "dirkjan@ochtman.nl", "text": "Comment on attachment 702445\nfollow up\n\nAh, yeah, that's a bit stupid.", "count": 74, "attachment_id": 702445, "creator": "dirkjan@ochtman.nl", "id": 7004266, "time": "2013-01-15T19:57:12Z", "is_private": false, "tags": [], "bug_id": 638219, "creation_time": "2013-01-15T19:57:12Z", "raw_text": "Ah, yeah, that's a bit stupid."}, {"text": "https://tbpl.mozilla.org/?tree=Mozilla-Inbound&rev=919b82e39cf8", "count": 75, "author": "terrence.d.cole@gmail.com", "creator": "terrence.d.cole@gmail.com", "attachment_id": null, "id": 7004281, "time": "2013-01-15T20:00:30Z", "tags": [], "creation_time": "2013-01-15T20:00:30Z", "bug_id": 638219, "raw_text": "https://tbpl.mozilla.org/?tree=Mozilla-Inbound&rev=919b82e39cf8", "is_private": false}, {"attachment_id": null, "creator": "emorley@mozilla.com", "author": "emorley@mozilla.com", "text": "https://hg.mozilla.org/mozilla-central/rev/9de04b80715f\nhttps://hg.mozilla.org/mozilla-central/rev/919b82e39cf8", "count": 76, "is_private": false, "tags": [], "raw_text": "https://hg.mozilla.org/mozilla-central/rev/9de04b80715f\nhttps://hg.mozilla.org/mozilla-central/rev/919b82e39cf8", "creation_time": "2013-01-16T20:36:47Z", "bug_id": 638219, "id": 7009290, "time": "2013-01-16T20:36:47Z"}, {"count": 77, "text": "Created attachment 705078\nBatch 1, patch 1: remove +x bit from tests/lib/jittests.py", "author": "dirkjan@ochtman.nl", "creator": "dirkjan@ochtman.nl", "attachment_id": 705078, "time": "2013-01-22T21:00:15Z", "id": 7027225, "raw_text": "", "creation_time": "2013-01-22T21:00:15Z", "bug_id": 638219, "tags": [], "is_private": false}, {"count": 78, "text": "Created attachment 705079\nBatch 1, patch 2: clean up imports and unused variables", "time": "2013-01-22T21:01:19Z", "author": "dirkjan@ochtman.nl", "id": 7027230, "bug_id": 638219, "creation_time": "2013-01-22T21:01:19Z", "raw_text": "", "tags": [], "creator": "dirkjan@ochtman.nl", "attachment_id": 705079, "is_private": false}, {"creator": "dirkjan@ochtman.nl", "tags": [], "raw_text": "", "creation_time": "2013-01-22T21:01:59Z", "bug_id": 638219, "is_private": false, "attachment_id": 705080, "count": 79, "text": "Created attachment 705080\nBatch 1, patch 3: Get rid of wildcard imports", "id": 7027232, "author": "dirkjan@ochtman.nl", "time": "2013-01-22T21:01:59Z"}, {"time": "2013-01-22T21:02:52Z", "id": 7027238, "is_private": false, "raw_text": "", "bug_id": 638219, "creation_time": "2013-01-22T21:02:52Z", "tags": [], "author": "dirkjan@ochtman.nl", "text": "Created attachment 705083\nBatch 1, patch 4: style: print is a statement, add space around formatting operator", "count": 80, "attachment_id": 705083, "creator": "dirkjan@ochtman.nl"}, {"creator": "dirkjan@ochtman.nl", "attachment_id": 705084, "text": "Created attachment 705084\nBatch 1, patch 5: pass jit-test script options around as an argument", "count": 81, "author": "dirkjan@ochtman.nl", "raw_text": "", "bug_id": 638219, "creation_time": "2013-01-22T21:03:44Z", "tags": [], "is_private": false, "time": "2013-01-22T21:03:44Z", "id": 7027240}, {"author": "dirkjan@ochtman.nl", "text": "Created attachment 705085\nBatch 1, patch 6: pass path to JS shell around as an argument", "count": 82, "attachment_id": 705085, "creator": "dirkjan@ochtman.nl", "id": 7027244, "time": "2013-01-22T21:04:23Z", "is_private": false, "tags": [], "bug_id": 638219, "creation_time": "2013-01-22T21:04:23Z", "raw_text": ""}, {"raw_text": "This concludes the first batch. Together, these pass both all of the jit tests, and the jstests results are unchanged (3 regressions). If the reviews are positive, we could land these as a single patch, unless we want to preserve the smaller patches to facilitate post-facto review.", "creation_time": "2013-01-22T21:06:29Z", "bug_id": 638219, "tags": [], "is_private": false, "time": "2013-01-22T21:06:29Z", "id": 7027247, "creator": "dirkjan@ochtman.nl", "attachment_id": 705086, "count": 83, "text": "Created attachment 705086\nBatch 1, patch 7: move jittests.main() function back into jit_test.py script\n\nThis concludes the first batch. Together, these pass both all of the jit tests, and the jstests results are unchanged (3 regressions). If the reviews are positive, we could land these as a single patch, unless we want to preserve the smaller patches to facilitate post-facto review.", "author": "dirkjan@ochtman.nl"}, {"creation_time": "2013-01-22T21:21:26Z", "bug_id": 638219, "raw_text": "Ah, so that's where that bit wondered off to.", "tags": [], "is_private": false, "time": "2013-01-22T21:21:26Z", "id": 7027337, "creator": "terrence.d.cole@gmail.com", "attachment_id": 705078, "count": 84, "text": "Comment on attachment 705078\nBatch 1, patch 1: remove +x bit from tests/lib/jittests.py\n\nAh, so that's where that bit wondered off to.", "author": "terrence.d.cole@gmail.com"}, {"creator": "terrence.d.cole@gmail.com", "attachment_id": 705083, "text": "Comment on attachment 705083\nBatch 1, patch 4: style: print is a statement, add space around formatting operator\n\nReview of attachment 705083:\n-----------------------------------------------------------------\n\nI'd like two changes to this patch:\n1) We'd like to move to Python3, which has a print function, so we should be doing |from __future__ import print_function| and keeping the parentheses. Ms2ger did this for the jstests in Bug 832750, although it appears to have yet to land.\n2) Use |str.format()| for all string formatting.\n\n::: js/src/tests/lib/jittests.py\n@@ +440,4 @@\n>                          written.add(test.path)\n>                  out.close()\n>              except IOError:\n> +                sys.stderr.write(\"Exception thrown trying to write failure file '%s'\\n\" %\n\nPlease use print(..., file=sys.stderr).", "count": 85, "author": "terrence.d.cole@gmail.com", "bug_id": 638219, "creation_time": "2013-01-22T21:37:48Z", "raw_text": "Review of attachment 705083:\n-----------------------------------------------------------------\n\nI'd like two changes to this patch:\n1) We'd like to move to Python3, which has a print function, so we should be doing |from __future__ import print_function| and keeping the parentheses. Ms2ger did this for the jstests in Bug 832750, although it appears to have yet to land.\n2) Use |str.format()| for all string formatting.\n\n::: js/src/tests/lib/jittests.py\n@@ +440,4 @@\n>                          written.add(test.path)\n>                  out.close()\n>              except IOError:\n> +                sys.stderr.write(\"Exception thrown trying to write failure file '%s'\\n\" %\n\nPlease use print(..., file=sys.stderr).", "tags": [], "is_private": false, "time": "2013-01-22T21:37:48Z", "id": 7027404}, {"id": 7027413, "time": "2013-01-22T21:42:52Z", "is_private": false, "tags": [], "raw_text": "Review of attachment 705084:\n-----------------------------------------------------------------\n\nVery nice.\n\n::: js/src/tests/lib/jittests.py\n@@ +616,4 @@\n>      op.add_option('-j', '--worker-count', dest='max_jobs', type=int, default=max_jobs_default,\n>                    help='Number of tests to run in parallel (default %default)')\n>  \n> +    OPTIONS, args = op.parse_args(argv)\n\nOPTIONS isn't a global anymore, so it would probably be better for this to be lower case |options|.", "creation_time": "2013-01-22T21:42:52Z", "bug_id": 638219, "author": "terrence.d.cole@gmail.com", "text": "Comment on attachment 705084\nBatch 1, patch 5: pass jit-test script options around as an argument\n\nReview of attachment 705084:\n-----------------------------------------------------------------\n\nVery nice.\n\n::: js/src/tests/lib/jittests.py\n@@ +616,4 @@\n>      op.add_option('-j', '--worker-count', dest='max_jobs', type=int, default=max_jobs_default,\n>                    help='Number of tests to run in parallel (default %default)')\n>  \n> +    OPTIONS, args = op.parse_args(argv)\n\nOPTIONS isn't a global anymore, so it would probably be better for this to be lower case |options|.", "count": 86, "attachment_id": 705084, "creator": "terrence.d.cole@gmail.com"}, {"is_private": false, "attachment_id": 705085, "tags": [], "creator": "terrence.d.cole@gmail.com", "bug_id": 638219, "creation_time": "2013-01-22T21:52:07Z", "raw_text": "Review of attachment 705085:\n-----------------------------------------------------------------\n\nWe should probably do the same thing that the jstests.py does for this: stick |js| on the |options| object as |options.js_shell| so that we only have to pass one object everywhere. This should make the diff quite a bit smaller as well. The relevant code from jstests is in tests/jstests.py on line 134 to 139, although the |requested_paths| manipulation is not relevant to jit-tests.\n\n::: js/src/tests/lib/jittests.py\n@@ +137,4 @@\n>                  ans.append(test)\n>      return ans\n>  \n> +def get_test_cmd(js, path, jitflags, lib_dir, shell_args):\n\nThis can stay: you'll just want to call it as get_test_cmd(options.js_shell, ...).", "id": 7027446, "time": "2013-01-22T21:52:07Z", "author": "terrence.d.cole@gmail.com", "text": "Comment on attachment 705085\nBatch 1, patch 6: pass path to JS shell around as an argument\n\nReview of attachment 705085:\n-----------------------------------------------------------------\n\nWe should probably do the same thing that the jstests.py does for this: stick |js| on the |options| object as |options.js_shell| so that we only have to pass one object everywhere. This should make the diff quite a bit smaller as well. The relevant code from jstests is in tests/jstests.py on line 134 to 139, although the |requested_paths| manipulation is not relevant to jit-tests.\n\n::: js/src/tests/lib/jittests.py\n@@ +137,4 @@\n>                  ans.append(test)\n>      return ans\n>  \n> +def get_test_cmd(js, path, jitflags, lib_dir, shell_args):\n\nThis can stay: you'll just want to call it as get_test_cmd(options.js_shell, ...).", "count": 87}, {"creator": "terrence.d.cole@gmail.com", "attachment_id": 705086, "text": "Comment on attachment 705086\nBatch 1, patch 7: move jittests.main() function back into jit_test.py script\n\nReview of attachment 705086:\n-----------------------------------------------------------------\n\n::: js/src/jit-test/jit_test.py\n@@ +17,5 @@\n>  import jittests\n>  \n> +def main(argv):\n> +\n> +    script_path = os.path.abspath(sys.modules['__main__'].__file__)\n\nYou shouldn't need to look in sys.modules anymore to get to __file__.", "count": 88, "author": "terrence.d.cole@gmail.com", "tags": [], "raw_text": "Review of attachment 705086:\n-----------------------------------------------------------------\n\n::: js/src/jit-test/jit_test.py\n@@ +17,5 @@\n>  import jittests\n>  \n> +def main(argv):\n> +\n> +    script_path = os.path.abspath(sys.modules['__main__'].__file__)\n\nYou shouldn't need to look in sys.modules anymore to get to __file__.", "creation_time": "2013-01-22T21:55:16Z", "bug_id": 638219, "is_private": false, "id": 7027455, "time": "2013-01-22T21:55:16Z"}, {"author": "dirkjan@ochtman.nl", "count": 89, "text": "Thanks for the quick and thorough reviews!\n\n(In reply to Terrence Cole [:terrence] from comment #85)\n> I'd like two changes to this patch:\n> 1) We'd like to move to Python3, which has a print function, so we should be\n> doing |from __future__ import print_function| and keeping the parentheses.\n> Ms2ger did this for the jstests in Bug 832750, although it appears to have\n> yet to land.\n> 2) Use |str.format()| for all string formatting.\n\nRespectfully, I disagree on these. First, I think I'm still in the cleanup phase for this whole thing, and moving the Python code closer to something that's more recognizable as (PEP8-like) Python is a good thing. What you're talking about is future-proofing at best, and I'd like to save that for some later time when the codebase is in better shape.\n\nSecond, while a move to Python 3 at some point would be a good thing, I disagree that it's a good goal to start introducing partial Python 3-isms at this point. I'm pretty sure many Python developers at this point aren't too familiar with the look of Python 3, and this goes even more for Mozilla devs for whom Python isn't (even close to) their primary language.\n\nThird, I think the jury is still out on whether the str.format() idiom is always the preferred one even in Python 3, and I don't think it's a win for these simple cases (also see the point above about familiarity).\n\nSo I'd prefer to keep this patch (mostly, see below) as is for now, and we can future-proofing it can be done at some later stage.\n\n> ::: js/src/tests/lib/jittests.py\n> @@ +440,4 @@\n> >                          written.add(test.path)\n> >                  out.close()\n> >              except IOError:\n> > +                sys.stderr.write(\"Exception thrown trying to write failure file '%s'\\n\" %\n> \n> Please use print(..., file=sys.stderr).\n\nGiven my little rant above, this could become print >> sys.stderr, ....\n\n(In reply to Terrence Cole [:terrence] from comment #86)\n> OPTIONS isn't a global anymore, so it would probably be better for this to\n> be lower case |options|.\n\nMakes sense.\n\n(In reply to Terrence Cole [:terrence] from comment #87)\n> We should probably do the same thing that the jstests.py does for this:\n> stick |js| on the |options| object as |options.js_shell| so that we only\n> have to pass one object everywhere. This should make the diff quite a bit\n> smaller as well. The relevant code from jstests is in tests/jstests.py on\n> line 134 to 139, although the |requested_paths| manipulation is not relevant\n> to jit-tests.\n\nYeah, I was thinking about that, will do.\n\n(In reply to Terrence Cole [:terrence] from comment #88)\n> ::: js/src/jit-test/jit_test.py\n> @@ +17,5 @@\n> >  import jittests\n> >  \n> > +def main(argv):\n> > +\n> > +    script_path = os.path.abspath(sys.modules['__main__'].__file__)\n> \n> You shouldn't need to look in sys.modules anymore to get to __file__.\n\nRight, good catch.", "attachment_id": null, "creator": "dirkjan@ochtman.nl", "time": "2013-01-23T07:57:09Z", "id": 7029009, "is_private": false, "raw_text": "Thanks for the quick and thorough reviews!\n\n(In reply to Terrence Cole [:terrence] from comment #85)\n> I'd like two changes to this patch:\n> 1) We'd like to move to Python3, which has a print function, so we should be\n> doing |from __future__ import print_function| and keeping the parentheses.\n> Ms2ger did this for the jstests in Bug 832750, although it appears to have\n> yet to land.\n> 2) Use |str.format()| for all string formatting.\n\nRespectfully, I disagree on these. First, I think I'm still in the cleanup phase for this whole thing, and moving the Python code closer to something that's more recognizable as (PEP8-like) Python is a good thing. What you're talking about is future-proofing at best, and I'd like to save that for some later time when the codebase is in better shape.\n\nSecond, while a move to Python 3 at some point would be a good thing, I disagree that it's a good goal to start introducing partial Python 3-isms at this point. I'm pretty sure many Python developers at this point aren't too familiar with the look of Python 3, and this goes even more for Mozilla devs for whom Python isn't (even close to) their primary language.\n\nThird, I think the jury is still out on whether the str.format() idiom is always the preferred one even in Python 3, and I don't think it's a win for these simple cases (also see the point above about familiarity).\n\nSo I'd prefer to keep this patch (mostly, see below) as is for now, and we can future-proofing it can be done at some later stage.\n\n> ::: js/src/tests/lib/jittests.py\n> @@ +440,4 @@\n> >                          written.add(test.path)\n> >                  out.close()\n> >              except IOError:\n> > +                sys.stderr.write(\"Exception thrown trying to write failure file '%s'\\n\" %\n> \n> Please use print(..., file=sys.stderr).\n\nGiven my little rant above, this could become print >> sys.stderr, ....\n\n(In reply to Terrence Cole [:terrence] from comment #86)\n> OPTIONS isn't a global anymore, so it would probably be better for this to\n> be lower case |options|.\n\nMakes sense.\n\n(In reply to Terrence Cole [:terrence] from comment #87)\n> We should probably do the same thing that the jstests.py does for this:\n> stick |js| on the |options| object as |options.js_shell| so that we only\n> have to pass one object everywhere. This should make the diff quite a bit\n> smaller as well. The relevant code from jstests is in tests/jstests.py on\n> line 134 to 139, although the |requested_paths| manipulation is not relevant\n> to jit-tests.\n\nYeah, I was thinking about that, will do.\n\n(In reply to Terrence Cole [:terrence] from comment #88)\n> ::: js/src/jit-test/jit_test.py\n> @@ +17,5 @@\n> >  import jittests\n> >  \n> > +def main(argv):\n> > +\n> > +    script_path = os.path.abspath(sys.modules['__main__'].__file__)\n> \n> You shouldn't need to look in sys.modules anymore to get to __file__.\n\nRight, good catch.", "bug_id": 638219, "creation_time": "2013-01-23T07:57:09Z", "tags": []}, {"id": 7029026, "time": "2013-01-23T08:03:53Z", "author": "n.nethercote@gmail.com", "count": 90, "text": "> Second, while a move to Python 3 at some point would be a good thing, I\n> disagree that it's a good goal to start introducing partial Python 3-isms at\n> this point. I'm pretty sure many Python developers at this point aren't too\n> familiar with the look of Python 3, and this goes even more for Mozilla devs\n> for whom Python isn't (even close to) their primary language.\n\nSpeaking as someone who's only started learning Python in the last month, it seems worthwhile using the Python 3 forms that should be valid forever, rather than the Python 2 forms that won't.", "is_private": false, "attachment_id": null, "tags": [], "creator": "n.nethercote@gmail.com", "bug_id": 638219, "creation_time": "2013-01-23T08:03:53Z", "raw_text": "> Second, while a move to Python 3 at some point would be a good thing, I\n> disagree that it's a good goal to start introducing partial Python 3-isms at\n> this point. I'm pretty sure many Python developers at this point aren't too\n> familiar with the look of Python 3, and this goes even more for Mozilla devs\n> for whom Python isn't (even close to) their primary language.\n\nSpeaking as someone who's only started learning Python in the last month, it seems worthwhile using the Python 3 forms that should be valid forever, rather than the Python 2 forms that won't."}, {"is_private": false, "attachment_id": null, "creator": "Ms2ger@gmail.com", "tags": [], "raw_text": "(In reply to Dirkjan Ochtman (:djc) from comment #89)\n> Thanks for the quick and thorough reviews!\n> \n> (In reply to Terrence Cole [:terrence] from comment #85)\n> > I'd like two changes to this patch:\n> > 1) We'd like to move to Python3, which has a print function, so we should be\n> > doing |from __future__ import print_function| and keeping the parentheses.\n> > Ms2ger did this for the jstests in Bug 832750, although it appears to have\n> > yet to land.\n> > 2) Use |str.format()| for all string formatting.\n> \n> Respectfully, I disagree on these. First, I think I'm still in the cleanup\n> phase for this whole thing, and moving the Python code closer to something\n> that's more recognizable as (PEP8-like) Python is a good thing. What you're\n> talking about is future-proofing at best, and I'd like to save that for some\n> later time when the codebase is in better shape.\n> \n> Second, while a move to Python 3 at some point would be a good thing, I\n> disagree that it's a good goal to start introducing partial Python 3-isms at\n> this point. I'm pretty sure many Python developers at this point aren't too\n> familiar with the look of Python 3, and this goes even more for Mozilla devs\n> for whom Python isn't (even close to) their primary language.\n> \n> Third, I think the jury is still out on whether the str.format() idiom is\n> always the preferred one even in Python 3, and I don't think it's a win for\n> these simple cases (also see the point above about familiarity).\n> \n> So I'd prefer to keep this patch (mostly, see below) as is for now, and we\n> can future-proofing it can be done at some later stage.\n\nI don't care about str.format() vs %-style, but I strongly object to moving away from python 3-compat instead of towards it. Python 2 is a dead end, so getting people more used to python 3'isms like print-as-a-function is unambiguously good thing, IMO. Adding more technical debt isn't.", "creation_time": "2013-01-23T09:31:34Z", "bug_id": 638219, "id": 7029131, "author": "Ms2ger@gmail.com", "time": "2013-01-23T09:31:34Z", "text": "(In reply to Dirkjan Ochtman (:djc) from comment #89)\n> Thanks for the quick and thorough reviews!\n> \n> (In reply to Terrence Cole [:terrence] from comment #85)\n> > I'd like two changes to this patch:\n> > 1) We'd like to move to Python3, which has a print function, so we should be\n> > doing |from __future__ import print_function| and keeping the parentheses.\n> > Ms2ger did this for the jstests in Bug 832750, although it appears to have\n> > yet to land.\n> > 2) Use |str.format()| for all string formatting.\n> \n> Respectfully, I disagree on these. First, I think I'm still in the cleanup\n> phase for this whole thing, and moving the Python code closer to something\n> that's more recognizable as (PEP8-like) Python is a good thing. What you're\n> talking about is future-proofing at best, and I'd like to save that for some\n> later time when the codebase is in better shape.\n> \n> Second, while a move to Python 3 at some point would be a good thing, I\n> disagree that it's a good goal to start introducing partial Python 3-isms at\n> this point. I'm pretty sure many Python developers at this point aren't too\n> familiar with the look of Python 3, and this goes even more for Mozilla devs\n> for whom Python isn't (even close to) their primary language.\n> \n> Third, I think the jury is still out on whether the str.format() idiom is\n> always the preferred one even in Python 3, and I don't think it's a win for\n> these simple cases (also see the point above about familiarity).\n> \n> So I'd prefer to keep this patch (mostly, see below) as is for now, and we\n> can future-proofing it can be done at some later stage.\n\nI don't care about str.format() vs %-style, but I strongly object to moving away from python 3-compat instead of towards it. Python 2 is a dead end, so getting people more used to python 3'isms like print-as-a-function is unambiguously good thing, IMO. Adding more technical debt isn't.", "count": 91}, {"time": "2013-01-23T17:36:23Z", "id": 7030552, "is_private": false, "bug_id": 638219, "creation_time": "2013-01-23T17:36:23Z", "raw_text": "(In reply to :Ms2ger from comment #91)\n> I don't care about str.format() vs %-style, but I strongly object to moving\n> away from python 3-compat instead of towards it. Python 2 is a dead end, so\n> getting people more used to python 3'isms like print-as-a-function is\n> unambiguously good thing, IMO. Adding more technical debt isn't.\n\nI strongly agree with Ms2ger on all these points.", "tags": [], "author": "gps@mozilla.com", "text": "(In reply to :Ms2ger from comment #91)\n> I don't care about str.format() vs %-style, but I strongly object to moving\n> away from python 3-compat instead of towards it. Python 2 is a dead end, so\n> getting people more used to python 3'isms like print-as-a-function is\n> unambiguously good thing, IMO. Adding more technical debt isn't.\n\nI strongly agree with Ms2ger on all these points.", "count": 92, "attachment_id": null, "creator": "gps@mozilla.com"}, {"time": "2013-01-23T17:45:06Z", "id": 7030579, "is_private": false, "raw_text": "Review optional (:terrence r+'ed v1).", "creation_time": "2013-01-23T17:45:06Z", "bug_id": 638219, "tags": [], "author": "dirkjan@ochtman.nl", "text": "Created attachment 705406\nBatch 1, patch 5: pass jit-test script options around as an argument (v2)\n\nReview optional (:terrence r+'ed v1).", "count": 93, "attachment_id": 705406, "creator": "dirkjan@ochtman.nl"}, {"creator": "dirkjan@ochtman.nl", "attachment_id": 705407, "text": "Created attachment 705407\nBatch 1, patch 6: pass path to JS shell around as an option value", "count": 94, "author": "dirkjan@ochtman.nl", "tags": [], "raw_text": "", "creation_time": "2013-01-23T17:47:26Z", "bug_id": 638219, "is_private": false, "id": 7030585, "time": "2013-01-23T17:47:26Z"}, {"count": 95, "text": "Created attachment 705409\nBatch 1, patch 7: move jittests.main() function back into jit_test.py script (v2)\n\nNo review necessary (:terrence +1ed v1).", "author": "dirkjan@ochtman.nl", "creator": "dirkjan@ochtman.nl", "attachment_id": 705409, "id": 7030597, "time": "2013-01-23T17:50:18Z", "tags": [], "creation_time": "2013-01-23T17:50:18Z", "bug_id": 638219, "raw_text": "No review necessary (:terrence +1ed v1).", "is_private": false}, {"count": 96, "text": "Comment on attachment 705407\nBatch 1, patch 6: pass path to JS shell around as an option value\n\nReview of attachment 705407:\n-----------------------------------------------------------------\n\nPerfect!", "author": "terrence.d.cole@gmail.com", "time": "2013-01-24T17:45:07Z", "id": 7034994, "raw_text": "Review of attachment 705407:\n-----------------------------------------------------------------\n\nPerfect!", "creation_time": "2013-01-24T17:45:07Z", "bug_id": 638219, "creator": "terrence.d.cole@gmail.com", "tags": [], "attachment_id": 705407, "is_private": false}, {"count": 97, "text": "Created attachment 706442\nBatch 1, patch 4: style: treat print as a function, improve formatting\n\nThis is a proposed alternative to patch 4. It requires a minimum of python2.6 (for the __future__.print_function import).", "id": 7039201, "time": "2013-01-25T17:33:40Z", "author": "dirkjan@ochtman.nl", "tags": [], "creator": "dirkjan@ochtman.nl", "bug_id": 638219, "creation_time": "2013-01-25T17:33:40Z", "raw_text": "This is a proposed alternative to patch 4. It requires a minimum of python2.6 (for the __future__.print_function import).", "is_private": false, "attachment_id": 706442}, {"is_private": false, "raw_text": "> This is a proposed alternative to patch 4. It requires a minimum of\n> python2.6 (for the __future__.print_function import).\n\nWe already require Python 2.7 to build Firefox.", "bug_id": 638219, "creation_time": "2013-01-25T18:31:44Z", "tags": [], "time": "2013-01-25T18:31:44Z", "id": 7039435, "attachment_id": null, "creator": "nth10sd@gmail.com", "author": "nth10sd@gmail.com", "count": 98, "text": "> This is a proposed alternative to patch 4. It requires a minimum of\n> python2.6 (for the __future__.print_function import).\n\nWe already require Python 2.7 to build Firefox."}, {"id": 7039437, "time": "2013-01-25T18:32:39Z", "is_private": false, "tags": [], "raw_text": "Review of attachment 706442:\n-----------------------------------------------------------------\n\nThank you! I think that's just what's called for here.", "creation_time": "2013-01-25T18:32:39Z", "bug_id": 638219, "author": "terrence.d.cole@gmail.com", "count": 99, "text": "Comment on attachment 706442\nBatch 1, patch 4: style: treat print as a function, improve formatting\n\nReview of attachment 706442:\n-----------------------------------------------------------------\n\nThank you! I think that's just what's called for here.", "attachment_id": 706442, "creator": "terrence.d.cole@gmail.com"}, {"count": 100, "text": "(In reply to Gary Kwong [:gkw] from comment #98)\n> > This is a proposed alternative to patch 4. It requires a minimum of\n> > python2.6 (for the __future__.print_function import).\n> \n> We already require Python 2.7 to build Firefox.\n\nThough not to test it.", "author": "Ms2ger@gmail.com", "creator": "Ms2ger@gmail.com", "attachment_id": null, "time": "2013-01-25T18:34:49Z", "id": 7039462, "creation_time": "2013-01-25T18:34:49Z", "bug_id": 638219, "raw_text": "(In reply to Gary Kwong [:gkw] from comment #98)\n> > This is a proposed alternative to patch 4. It requires a minimum of\n> > python2.6 (for the __future__.print_function import).\n> \n> We already require Python 2.7 to build Firefox.\n\nThough not to test it.", "tags": [], "is_private": false}, {"count": 101, "text": "(In reply to :Ms2ger from comment #100)\n> (In reply to Gary Kwong [:gkw] from comment #98)\n> > > This is a proposed alternative to patch 4. It requires a minimum of\n> > > python2.6 (for the __future__.print_function import).\n> > \n> > We already require Python 2.7 to build Firefox.\n> \n> Though not to test it.\n\nWhile we have some test runners still running <2.7, the move to require 2.7 applies for the test runners as well. i.e. the test runners can be upgraded to and made to require 2.7 without any future policy change or announcement. As long as tests pass on official infra and 2.7, you are good to go.", "author": "gps@mozilla.com", "creator": "gps@mozilla.com", "attachment_id": null, "id": 7041128, "time": "2013-01-26T01:55:06Z", "tags": [], "bug_id": 638219, "creation_time": "2013-01-26T01:55:06Z", "raw_text": "(In reply to :Ms2ger from comment #100)\n> (In reply to Gary Kwong [:gkw] from comment #98)\n> > > This is a proposed alternative to patch 4. It requires a minimum of\n> > > python2.6 (for the __future__.print_function import).\n> > \n> > We already require Python 2.7 to build Firefox.\n> \n> Though not to test it.\n\nWhile we have some test runners still running <2.7, the move to require 2.7 applies for the test runners as well. i.e. the test runners can be upgraded to and made to require 2.7 without any future policy change or announcement. As long as tests pass on official infra and 2.7, you are good to go.", "is_private": false}, {"is_private": false, "attachment_id": null, "tags": [], "creator": "ted@mielczarek.org", "bug_id": 638219, "creation_time": "2013-01-28T13:03:17Z", "raw_text": "We only currently run jit-tests as part of \"make check\" on the build machines anyway, so Python 2.7 is required.", "id": 7044170, "time": "2013-01-28T13:03:17Z", "author": "ted@mielczarek.org", "text": "We only currently run jit-tests as part of \"make check\" on the build machines anyway, so Python 2.7 is required.", "count": 102}, {"tags": [], "raw_text": "Thanks to sfink:\n\nhttps://tbpl.mozilla.org/?tree=Try&rev=351017b03a07\nhttps://tbpl.mozilla.org/?tree=Try&rev=61766eb5d599", "bug_id": 638219, "creation_time": "2013-02-05T20:14:34Z", "is_private": false, "id": 7072708, "time": "2013-02-05T20:14:34Z", "creator": "dirkjan@ochtman.nl", "attachment_id": null, "text": "Thanks to sfink:\n\nhttps://tbpl.mozilla.org/?tree=Try&rev=351017b03a07\nhttps://tbpl.mozilla.org/?tree=Try&rev=61766eb5d599", "count": 103, "author": "dirkjan@ochtman.nl"}, {"attachment_id": null, "creator": "dirkjan@ochtman.nl", "author": "dirkjan@ochtman.nl", "text": "The try results look good to me, can someone verify, please?", "count": 104, "is_private": false, "raw_text": "The try results look good to me, can someone verify, please?", "bug_id": 638219, "creation_time": "2013-02-06T07:57:11Z", "tags": [], "time": "2013-02-06T07:57:11Z", "id": 7074761}, {"creator": "terrence.d.cole@gmail.com", "attachment_id": null, "count": 105, "text": "Sorry I haven't gotten around to pushing this yet, I'm in major crunch time for GGC.", "author": "terrence.d.cole@gmail.com", "tags": [], "raw_text": "Sorry I haven't gotten around to pushing this yet, I'm in major crunch time for GGC.", "bug_id": 638219, "creation_time": "2013-02-08T18:07:54Z", "is_private": false, "id": 7085570, "time": "2013-02-08T18:07:54Z"}, {"count": 106, "text": "Thanks for letting me know, I'll wait a bit longer. :)", "time": "2013-02-08T18:10:43Z", "author": "dirkjan@ochtman.nl", "id": 7085582, "bug_id": 638219, "creation_time": "2013-02-08T18:10:43Z", "raw_text": "Thanks for letting me know, I'll wait a bit longer. :)", "tags": [], "creator": "dirkjan@ochtman.nl", "is_private": false, "attachment_id": null}, {"attachment_id": null, "creator": "sphink@gmail.com", "author": "sphink@gmail.com", "count": 107, "text": "http://hg.mozilla.org/integration/mozilla-inbound/rev/08b008e9759c\nhttp://hg.mozilla.org/integration/mozilla-inbound/rev/86287769a004\nhttp://hg.mozilla.org/integration/mozilla-inbound/rev/49264b222656\nhttp://hg.mozilla.org/integration/mozilla-inbound/rev/f6bd56a6308a\nhttp://hg.mozilla.org/integration/mozilla-inbound/rev/e3a7645f4b5a\nhttp://hg.mozilla.org/integration/mozilla-inbound/rev/48bca0e99c35\nhttp://hg.mozilla.org/integration/mozilla-inbound/rev/a20aedb81887", "is_private": false, "tags": [], "creation_time": "2013-02-08T23:16:13Z", "bug_id": 638219, "raw_text": "http://hg.mozilla.org/integration/mozilla-inbound/rev/08b008e9759c\nhttp://hg.mozilla.org/integration/mozilla-inbound/rev/86287769a004\nhttp://hg.mozilla.org/integration/mozilla-inbound/rev/49264b222656\nhttp://hg.mozilla.org/integration/mozilla-inbound/rev/f6bd56a6308a\nhttp://hg.mozilla.org/integration/mozilla-inbound/rev/e3a7645f4b5a\nhttp://hg.mozilla.org/integration/mozilla-inbound/rev/48bca0e99c35\nhttp://hg.mozilla.org/integration/mozilla-inbound/rev/a20aedb81887", "id": 7086810, "time": "2013-02-08T23:16:13Z"}, {"id": 7086815, "time": "2013-02-08T23:18:45Z", "is_private": false, "tags": [], "creation_time": "2013-02-08T23:18:45Z", "bug_id": 638219, "raw_text": "(In reply to Dirkjan Ochtman (:djc) from comment #106)\n> Thanks for letting me know, I'll wait a bit longer. :)\n\nDone! Steve still had this sitting in his patch queue, so I asked him to push to m-i. What do you have planned next?", "author": "terrence.d.cole@gmail.com", "count": 108, "text": "(In reply to Dirkjan Ochtman (:djc) from comment #106)\n> Thanks for letting me know, I'll wait a bit longer. :)\n\nDone! Steve still had this sitting in his patch queue, so I asked him to push to m-i. What do you have planned next?", "attachment_id": null, "creator": "terrence.d.cole@gmail.com"}, {"id": 7087860, "author": "ryanvm@gmail.com", "time": "2013-02-09T15:49:10Z", "text": "https://hg.mozilla.org/mozilla-central/rev/a20aedb81887\nhttps://hg.mozilla.org/mozilla-central/rev/48bca0e99c35\nhttps://hg.mozilla.org/mozilla-central/rev/e3a7645f4b5a\nhttps://hg.mozilla.org/mozilla-central/rev/f6bd56a6308a\nhttps://hg.mozilla.org/mozilla-central/rev/49264b222656\nhttps://hg.mozilla.org/mozilla-central/rev/86287769a004\nhttps://hg.mozilla.org/mozilla-central/rev/08b008e9759c", "count": 109, "attachment_id": null, "is_private": false, "creator": "ryanvm@gmail.com", "tags": [], "raw_text": "https://hg.mozilla.org/mozilla-central/rev/a20aedb81887\nhttps://hg.mozilla.org/mozilla-central/rev/48bca0e99c35\nhttps://hg.mozilla.org/mozilla-central/rev/e3a7645f4b5a\nhttps://hg.mozilla.org/mozilla-central/rev/f6bd56a6308a\nhttps://hg.mozilla.org/mozilla-central/rev/49264b222656\nhttps://hg.mozilla.org/mozilla-central/rev/86287769a004\nhttps://hg.mozilla.org/mozilla-central/rev/08b008e9759c", "creation_time": "2013-02-09T15:49:10Z", "bug_id": 638219}, {"time": "2013-02-09T15:51:37Z", "id": 7087875, "is_private": false, "raw_text": "I'll have a look at next steps on Monday, probably.", "bug_id": 638219, "creation_time": "2013-02-09T15:51:37Z", "tags": [], "author": "dirkjan@ochtman.nl", "count": 110, "text": "I'll have a look at next steps on Monday, probably.", "attachment_id": null, "creator": "dirkjan@ochtman.nl"}, {"is_private": false, "raw_text": "", "creation_time": "2013-02-13T17:59:02Z", "bug_id": 638219, "tags": [], "time": "2013-02-13T17:59:02Z", "id": 7099817, "attachment_id": 713472, "creator": "dirkjan@ochtman.nl", "author": "dirkjan@ochtman.nl", "count": 111, "text": "Created attachment 713472\nBatch 2, patch 1: move command construction into Test class"}, {"author": "dirkjan@ochtman.nl", "text": "Created attachment 713473\nBatch 2, patch 2: extract valgrind setup, prepend in Test.command()", "count": 112, "attachment_id": 713473, "creator": "dirkjan@ochtman.nl", "time": "2013-02-13T18:00:22Z", "id": 7099827, "is_private": false, "raw_text": "", "bug_id": 638219, "creation_time": "2013-02-13T18:00:22Z", "tags": []}, {"time": "2013-02-13T18:01:03Z", "id": 7099830, "is_private": false, "creation_time": "2013-02-13T18:01:03Z", "bug_id": 638219, "raw_text": "", "tags": [], "author": "dirkjan@ochtman.nl", "text": "Created attachment 713474\nBatch 2, patch 3: save static paths in module-level constants", "count": 113, "attachment_id": 713474, "creator": "dirkjan@ochtman.nl"}, {"is_private": false, "raw_text": "Review of attachment 713472:\n-----------------------------------------------------------------\n\nThat's a nice cleanup!", "creation_time": "2013-02-13T21:56:47Z", "bug_id": 638219, "tags": [], "time": "2013-02-13T21:56:47Z", "id": 7101328, "attachment_id": 713472, "creator": "terrence.d.cole@gmail.com", "author": "terrence.d.cole@gmail.com", "text": "Comment on attachment 713472\nBatch 2, patch 1: move command construction into Test class\n\nReview of attachment 713472:\n-----------------------------------------------------------------\n\nThat's a nice cleanup!", "count": 114}, {"id": 7101556, "time": "2013-02-13T22:34:36Z", "tags": [], "raw_text": "Review of attachment 713473:\n-----------------------------------------------------------------\n\nThis needs a bit more work to remove the global usage. Ask me on IRC if what I've requested isn't clear.\n\n::: js/src/tests/lib/jittests.py\n@@ +29,5 @@\n> +        'valgrind', '-q', '--smc-check=all-non-file', '--error-exitcode=1',\n> +        '--gen-suppressions=all', '--show-possibly-lost=no', '--leak-check=full'\n> +    ]\n> +    if os.uname()[0] == 'Darwin':\n> +        VALGRIND.append('--dsymutil=yes')\n\nI like how you've cached the valgrind command bits, rather than recomputing them every test, but we should store the cached value as a class property on Test, not in the globals.\n\nIt turns out it's really easy to do this in python. The |class| statement creates a new |dict|, sets it as the global, runs the code in the class's definition, then sets that dict as the new class object's __dict__ property. Thus /any/ definitions you make in the class definition will be accessible through the class and shared by all objects of the class, not just method definitions. For example:\n~~~~~~\nclass Foo:\n    tmp = 'bar'\n    Bar = ''\n    if tmp:\n        Bar = tmp\n    del tmp\n\n    def show_bar(self):\n        print(self.Bar)\n    \n    def show_tmp(self):\n        print(self.tmp)\n\nFoo().show_bar() # prints 'bar'\nFoo().show_tmp() # AttributeError: no 'tmp' in class Foo\n~~~~~~\n\nPlease use this to scope the valgrind bits to Test. Also please rename VALGRIND to ValgrindCommand. Likewise, call _PATHS paths and _VALGRINDS valgrinds and |del| them when you are done defining ValgrindCommand.\n\n@@ +145,5 @@\n>          # via the \"|jit-test|\" line.  Remove dups because they are toggles.\n> +        cmd = [js] + list(set(self.jitflags)) + shell_args + ['-e', expr]\n> +        cmd += ['-f', os.path.join(lib_dir, 'prolog.js'), '-f', self.path]\n> +        if self.valgrind:\n> +            cmd = VALGRIND + cmd\n\nThen you can access the valgrind bits as |self.ValgrindCommand| here.", "bug_id": 638219, "creation_time": "2013-02-13T22:34:36Z", "is_private": false, "count": 115, "text": "Comment on attachment 713473\nBatch 2, patch 2: extract valgrind setup, prepend in Test.command()\n\nReview of attachment 713473:\n-----------------------------------------------------------------\n\nThis needs a bit more work to remove the global usage. Ask me on IRC if what I've requested isn't clear.\n\n::: js/src/tests/lib/jittests.py\n@@ +29,5 @@\n> +        'valgrind', '-q', '--smc-check=all-non-file', '--error-exitcode=1',\n> +        '--gen-suppressions=all', '--show-possibly-lost=no', '--leak-check=full'\n> +    ]\n> +    if os.uname()[0] == 'Darwin':\n> +        VALGRIND.append('--dsymutil=yes')\n\nI like how you've cached the valgrind command bits, rather than recomputing them every test, but we should store the cached value as a class property on Test, not in the globals.\n\nIt turns out it's really easy to do this in python. The |class| statement creates a new |dict|, sets it as the global, runs the code in the class's definition, then sets that dict as the new class object's __dict__ property. Thus /any/ definitions you make in the class definition will be accessible through the class and shared by all objects of the class, not just method definitions. For example:\n~~~~~~\nclass Foo:\n    tmp = 'bar'\n    Bar = ''\n    if tmp:\n        Bar = tmp\n    del tmp\n\n    def show_bar(self):\n        print(self.Bar)\n    \n    def show_tmp(self):\n        print(self.tmp)\n\nFoo().show_bar() # prints 'bar'\nFoo().show_tmp() # AttributeError: no 'tmp' in class Foo\n~~~~~~\n\nPlease use this to scope the valgrind bits to Test. Also please rename VALGRIND to ValgrindCommand. Likewise, call _PATHS paths and _VALGRINDS valgrinds and |del| them when you are done defining ValgrindCommand.\n\n@@ +145,5 @@\n>          # via the \"|jit-test|\" line.  Remove dups because they are toggles.\n> +        cmd = [js] + list(set(self.jitflags)) + shell_args + ['-e', expr]\n> +        cmd += ['-f', os.path.join(lib_dir, 'prolog.js'), '-f', self.path]\n> +        if self.valgrind:\n> +            cmd = VALGRIND + cmd\n\nThen you can access the valgrind bits as |self.ValgrindCommand| here.", "author": "terrence.d.cole@gmail.com", "creator": "terrence.d.cole@gmail.com", "attachment_id": 713473}, {"is_private": false, "attachment_id": 713474, "raw_text": "Review of attachment 713474:\n-----------------------------------------------------------------\n\nThis is a good use of globals.\n\n::: js/src/jit-test/jit_test.py\n@@ +107,5 @@\n>          read_all = False\n>          try:\n>              f = open(options.read_tests)\n>              for line in f:\n> +                test_list.append(os.path.join(TEST_DIR, line.strip('\\n')))\n\nI think this needs to be jittests.TEST_DIR.\n\n::: js/src/tests/lib/jittests.py\n@@ +142,2 @@\n>          if not libdir_var.endswith('/'):\n>              libdir_var += '/'\n\nSince we fully control LIB_DIR, would it make sense to just assert that LIB_DIR endswith '/' and use it directly?", "creation_time": "2013-02-13T22:54:48Z", "bug_id": 638219, "creator": "terrence.d.cole@gmail.com", "tags": [], "author": "terrence.d.cole@gmail.com", "time": "2013-02-13T22:54:48Z", "id": 7101647, "text": "Comment on attachment 713474\nBatch 2, patch 3: save static paths in module-level constants\n\nReview of attachment 713474:\n-----------------------------------------------------------------\n\nThis is a good use of globals.\n\n::: js/src/jit-test/jit_test.py\n@@ +107,5 @@\n>          read_all = False\n>          try:\n>              f = open(options.read_tests)\n>              for line in f:\n> +                test_list.append(os.path.join(TEST_DIR, line.strip('\\n')))\n\nI think this needs to be jittests.TEST_DIR.\n\n::: js/src/tests/lib/jittests.py\n@@ +142,2 @@\n>          if not libdir_var.endswith('/'):\n>              libdir_var += '/'\n\nSince we fully control LIB_DIR, would it make sense to just assert that LIB_DIR endswith '/' and use it directly?", "count": 116}, {"creator": "terrence.d.cole@gmail.com", "attachment_id": 713472, "count": 117, "text": "Comment on attachment 713472\nBatch 2, patch 1: move command construction into Test class\n\nReview of attachment 713472:\n-----------------------------------------------------------------\n\n::: js/src/tests/lib/jittests.py\n@@ +241,1 @@\n>  \n\nAlso, please remove this extra space.", "author": "terrence.d.cole@gmail.com", "creation_time": "2013-02-13T22:55:09Z", "bug_id": 638219, "raw_text": "Review of attachment 713472:\n-----------------------------------------------------------------\n\n::: js/src/tests/lib/jittests.py\n@@ +241,1 @@\n>  \n\nAlso, please remove this extra space.", "tags": [], "is_private": false, "time": "2013-02-13T22:55:09Z", "id": 7101648}, {"raw_text": "(In reply to Terrence Cole [:terrence] from comment #115)\n> Comment on attachment 713473\n> Batch 2, patch 2: extract valgrind setup, prepend in Test.command()\n> \n> Review of attachment 713473:\n> -----------------------------------------------------------------\n> \n> This needs a bit more work to remove the global usage. Ask me on IRC if what\n> I've requested isn't clear.\n> \n> ::: js/src/tests/lib/jittests.py\n> @@ +29,5 @@\n> > +        'valgrind', '-q', '--smc-check=all-non-file', '--error-exitcode=1',\n> > +        '--gen-suppressions=all', '--show-possibly-lost=no', '--leak-check=full'\n> > +    ]\n> > +    if os.uname()[0] == 'Darwin':\n> > +        VALGRIND.append('--dsymutil=yes')\n> \n> I like how you've cached the valgrind command bits, rather than recomputing\n> them every test, but we should store the cached value as a class property on\n> Test, not in the globals.\n\nWhat's the value of this? Having it as a class attribute is mostly equivalent to having it as a module-level constant, and there is nothing Test-specific about the valgrind we use. I'd see some value if we could replace the Test.valgrind instance property directly with the command, but since it seems to rely on test flags, that won't work. \n\n> Please use this to scope the valgrind bits to Test. Also please rename\n> VALGRIND to ValgrindCommand. Likewise, call _PATHS paths and _VALGRINDS\n> valgrinds and |del| them when you are done defining ValgrindCommand.\n\nI also think ValgrindCommand is a bad name. Capitalized names are generally reserved for classes only in common Python style; it'd have to be valgrind_command to comply with PEP8-like style.", "bug_id": 638219, "creation_time": "2013-02-14T08:01:40Z", "tags": [], "is_private": false, "time": "2013-02-14T08:01:40Z", "id": 7102841, "creator": "dirkjan@ochtman.nl", "attachment_id": null, "text": "(In reply to Terrence Cole [:terrence] from comment #115)\n> Comment on attachment 713473\n> Batch 2, patch 2: extract valgrind setup, prepend in Test.command()\n> \n> Review of attachment 713473:\n> -----------------------------------------------------------------\n> \n> This needs a bit more work to remove the global usage. Ask me on IRC if what\n> I've requested isn't clear.\n> \n> ::: js/src/tests/lib/jittests.py\n> @@ +29,5 @@\n> > +        'valgrind', '-q', '--smc-check=all-non-file', '--error-exitcode=1',\n> > +        '--gen-suppressions=all', '--show-possibly-lost=no', '--leak-check=full'\n> > +    ]\n> > +    if os.uname()[0] == 'Darwin':\n> > +        VALGRIND.append('--dsymutil=yes')\n> \n> I like how you've cached the valgrind command bits, rather than recomputing\n> them every test, but we should store the cached value as a class property on\n> Test, not in the globals.\n\nWhat's the value of this? Having it as a class attribute is mostly equivalent to having it as a module-level constant, and there is nothing Test-specific about the valgrind we use. I'd see some value if we could replace the Test.valgrind instance property directly with the command, but since it seems to rely on test flags, that won't work. \n\n> Please use this to scope the valgrind bits to Test. Also please rename\n> VALGRIND to ValgrindCommand. Likewise, call _PATHS paths and _VALGRINDS\n> valgrinds and |del| them when you are done defining ValgrindCommand.\n\nI also think ValgrindCommand is a bad name. Capitalized names are generally reserved for classes only in common Python style; it'd have to be valgrind_command to comply with PEP8-like style.", "count": 118, "author": "dirkjan@ochtman.nl"}, {"count": 119, "text": "(In reply to Terrence Cole [:terrence] from comment #116)\n> Comment on attachment 713474\n> Batch 2, patch 3: save static paths in module-level constants\n> \n> Review of attachment 713474:\n> -----------------------------------------------------------------\n> \n> This is a good use of globals.\n> \n> ::: js/src/jit-test/jit_test.py\n> @@ +107,5 @@\n> >          read_all = False\n> >          try:\n> >              f = open(options.read_tests)\n> >              for line in f:\n> > +                test_list.append(os.path.join(TEST_DIR, line.strip('\\n')))\n> \n> I think this needs to be jittests.TEST_DIR.\n\nRight, will fix that.\n\n> ::: js/src/tests/lib/jittests.py\n> @@ +142,2 @@\n> >          if not libdir_var.endswith('/'):\n> >              libdir_var += '/'\n> \n> Since we fully control LIB_DIR, would it make sense to just assert that\n> LIB_DIR endswith '/' and use it directly?\n\nI think Test.command() is the only user of LIB_DIR, so I'd say we don't even need the assertion if we just make sure LIB_DIR ends with a '/'.", "id": 7102849, "time": "2013-02-14T08:04:34Z", "author": "dirkjan@ochtman.nl", "tags": [], "creator": "dirkjan@ochtman.nl", "creation_time": "2013-02-14T08:04:34Z", "bug_id": 638219, "raw_text": "(In reply to Terrence Cole [:terrence] from comment #116)\n> Comment on attachment 713474\n> Batch 2, patch 3: save static paths in module-level constants\n> \n> Review of attachment 713474:\n> -----------------------------------------------------------------\n> \n> This is a good use of globals.\n> \n> ::: js/src/jit-test/jit_test.py\n> @@ +107,5 @@\n> >          read_all = False\n> >          try:\n> >              f = open(options.read_tests)\n> >              for line in f:\n> > +                test_list.append(os.path.join(TEST_DIR, line.strip('\\n')))\n> \n> I think this needs to be jittests.TEST_DIR.\n\nRight, will fix that.\n\n> ::: js/src/tests/lib/jittests.py\n> @@ +142,2 @@\n> >          if not libdir_var.endswith('/'):\n> >              libdir_var += '/'\n> \n> Since we fully control LIB_DIR, would it make sense to just assert that\n> LIB_DIR endswith '/' and use it directly?\n\nI think Test.command() is the only user of LIB_DIR, so I'd say we don't even need the assertion if we just make sure LIB_DIR ends with a '/'.", "attachment_id": null, "is_private": false}, {"raw_text": "(In reply to Dirkjan Ochtman (:djc) from comment #118)\n> (In reply to Terrence Cole [:terrence] from comment #115)\n> > Comment on attachment 713473\n> > Batch 2, patch 2: extract valgrind setup, prepend in Test.command()\n> > \n> > Review of attachment 713473:\n> > -----------------------------------------------------------------\n> > \n> > This needs a bit more work to remove the global usage. Ask me on IRC if what\n> > I've requested isn't clear.\n> > \n> > ::: js/src/tests/lib/jittests.py\n> > @@ +29,5 @@\n> > > +        'valgrind', '-q', '--smc-check=all-non-file', '--error-exitcode=1',\n> > > +        '--gen-suppressions=all', '--show-possibly-lost=no', '--leak-check=full'\n> > > +    ]\n> > > +    if os.uname()[0] == 'Darwin':\n> > > +        VALGRIND.append('--dsymutil=yes')\n> > \n> > I like how you've cached the valgrind command bits, rather than recomputing\n> > them every test, but we should store the cached value as a class property on\n> > Test, not in the globals.\n> \n> What's the value of this? Having it as a class attribute is mostly\n> equivalent to having it as a module-level constant, and there is nothing\n> Test-specific about the valgrind we use. I'd see some value if we could\n> replace the Test.valgrind instance property directly with the command, but\n> since it seems to rely on test flags, that won't work. \n\nYeah, there is a bit of history here. Ideally, we'd run all tests under valgrind, but we can't because it's just too slow -- I think it takes several weeks actually. The fuzzers do run this test occasionally, but it's resource intensive so they don't do it often. What they do instead is fuzz the shell with small tests under valgrind. When the fuzzers find a test that fails under valgrind they add the valgrind annotation to force the test to run in the same environment that they used to find it. I think there are only a handful of tests with this flag and I think in practice they don't actually run on tinderbox because of the valgrind requirement.\n\nYour patch is a nice enhancement to the jit-test suite because currently we have no way to know when a failing test was running under valgrind without knowing that the test has the annotation.\n\nTo answer your actual question, there are two reasons that I'd like to see VALGRIND scoped to Test. First, Test is the sole user, so scoping the definition to Test makes it clear that changing the definition of VALGRIND will only effect Test. More importantly, it forces the definition to stay inside Test. We don't want it getting forgotten or worse, duplicated, when we transplant the Test code into a different file.\n\n> > Please use this to scope the valgrind bits to Test. Also please rename\n> > VALGRIND to ValgrindCommand. Likewise, call _PATHS paths and _VALGRINDS\n> > valgrinds and |del| them when you are done defining ValgrindCommand.\n> \n> I also think ValgrindCommand is a bad name. Capitalized names are generally\n> reserved for classes only in common Python style; it'd have to be\n> valgrind_command to comply with PEP8-like style.\n\nYeah, that's a good point: I was thinking in SpiderMonkey style, but this should be PEP8. I requested a name change mostly because I'd like to separate it from the |valgrind| flag by more than simple capitalization. Would you be okay with VALGRIND_COMMAND?", "bug_id": 638219, "creation_time": "2013-02-14T23:46:22Z", "creator": "terrence.d.cole@gmail.com", "tags": [], "attachment_id": null, "is_private": false, "count": 120, "text": "(In reply to Dirkjan Ochtman (:djc) from comment #118)\n> (In reply to Terrence Cole [:terrence] from comment #115)\n> > Comment on attachment 713473\n> > Batch 2, patch 2: extract valgrind setup, prepend in Test.command()\n> > \n> > Review of attachment 713473:\n> > -----------------------------------------------------------------\n> > \n> > This needs a bit more work to remove the global usage. Ask me on IRC if what\n> > I've requested isn't clear.\n> > \n> > ::: js/src/tests/lib/jittests.py\n> > @@ +29,5 @@\n> > > +        'valgrind', '-q', '--smc-check=all-non-file', '--error-exitcode=1',\n> > > +        '--gen-suppressions=all', '--show-possibly-lost=no', '--leak-check=full'\n> > > +    ]\n> > > +    if os.uname()[0] == 'Darwin':\n> > > +        VALGRIND.append('--dsymutil=yes')\n> > \n> > I like how you've cached the valgrind command bits, rather than recomputing\n> > them every test, but we should store the cached value as a class property on\n> > Test, not in the globals.\n> \n> What's the value of this? Having it as a class attribute is mostly\n> equivalent to having it as a module-level constant, and there is nothing\n> Test-specific about the valgrind we use. I'd see some value if we could\n> replace the Test.valgrind instance property directly with the command, but\n> since it seems to rely on test flags, that won't work. \n\nYeah, there is a bit of history here. Ideally, we'd run all tests under valgrind, but we can't because it's just too slow -- I think it takes several weeks actually. The fuzzers do run this test occasionally, but it's resource intensive so they don't do it often. What they do instead is fuzz the shell with small tests under valgrind. When the fuzzers find a test that fails under valgrind they add the valgrind annotation to force the test to run in the same environment that they used to find it. I think there are only a handful of tests with this flag and I think in practice they don't actually run on tinderbox because of the valgrind requirement.\n\nYour patch is a nice enhancement to the jit-test suite because currently we have no way to know when a failing test was running under valgrind without knowing that the test has the annotation.\n\nTo answer your actual question, there are two reasons that I'd like to see VALGRIND scoped to Test. First, Test is the sole user, so scoping the definition to Test makes it clear that changing the definition of VALGRIND will only effect Test. More importantly, it forces the definition to stay inside Test. We don't want it getting forgotten or worse, duplicated, when we transplant the Test code into a different file.\n\n> > Please use this to scope the valgrind bits to Test. Also please rename\n> > VALGRIND to ValgrindCommand. Likewise, call _PATHS paths and _VALGRINDS\n> > valgrinds and |del| them when you are done defining ValgrindCommand.\n> \n> I also think ValgrindCommand is a bad name. Capitalized names are generally\n> reserved for classes only in common Python style; it'd have to be\n> valgrind_command to comply with PEP8-like style.\n\nYeah, that's a good point: I was thinking in SpiderMonkey style, but this should be PEP8. I requested a name change mostly because I'd like to separate it from the |valgrind| flag by more than simple capitalization. Would you be okay with VALGRIND_COMMAND?", "author": "terrence.d.cole@gmail.com", "time": "2013-02-14T23:46:22Z", "id": 7106197}, {"is_private": false, "attachment_id": null, "creation_time": "2013-02-15T00:10:21Z", "bug_id": 638219, "raw_text": "> When the fuzzers find a test that\n> fails under valgrind they add the valgrind annotation to force the test to\n> run in the same environment that they used to find it. I think there are\n> only a handful of tests with this flag and I think in practice they don't\n> actually run on tinderbox because of the valgrind requirement.\n\nI think it's only three jit-tests that get run under Valgrind (and I know that testShiftLeft.js is one of them).  I always run jit-tests under Valgrind and periodically one fails because of Valgrind finding an error.  But jit-tests.py doesn't indicate that the failure is because of Valgrind and so the failing command line that it reports doesn't actually fail, and I have to manually add the valgrind flags.", "tags": [], "creator": "n.nethercote@gmail.com", "time": "2013-02-15T00:10:21Z", "author": "n.nethercote@gmail.com", "id": 7106288, "count": 121, "text": "> When the fuzzers find a test that\n> fails under valgrind they add the valgrind annotation to force the test to\n> run in the same environment that they used to find it. I think there are\n> only a handful of tests with this flag and I think in practice they don't\n> actually run on tinderbox because of the valgrind requirement.\n\nI think it's only three jit-tests that get run under Valgrind (and I know that testShiftLeft.js is one of them).  I always run jit-tests under Valgrind and periodically one fails because of Valgrind finding an error.  But jit-tests.py doesn't indicate that the failure is because of Valgrind and so the failing command line that it reports doesn't actually fail, and I have to manually add the valgrind flags."}, {"is_private": false, "tags": [], "raw_text": "(In reply to Nicholas Nethercote [:njn] from comment #121)\n> I think it's only three jit-tests that get run under Valgrind (and I know\n> that testShiftLeft.js is one of them).  I always run jit-tests under\n> Valgrind and periodically one fails because of Valgrind finding an error. \n> But jit-tests.py doesn't indicate that the failure is because of Valgrind\n> and so the failing command line that it reports doesn't actually fail, and I\n> have to manually add the valgrind flags.\n\nI think this bug will be fixing that problem: it attaches the valgrind bits to the command line in Test itself, rather than tacking them on just before the run.", "creation_time": "2013-02-15T00:35:56Z", "bug_id": 638219, "id": 7106377, "time": "2013-02-15T00:35:56Z", "attachment_id": null, "creator": "terrence.d.cole@gmail.com", "author": "terrence.d.cole@gmail.com", "count": 122, "text": "(In reply to Nicholas Nethercote [:njn] from comment #121)\n> I think it's only three jit-tests that get run under Valgrind (and I know\n> that testShiftLeft.js is one of them).  I always run jit-tests under\n> Valgrind and periodically one fails because of Valgrind finding an error. \n> But jit-tests.py doesn't indicate that the failure is because of Valgrind\n> and so the failing command line that it reports doesn't actually fail, and I\n> have to manually add the valgrind flags.\n\nI think this bug will be fixing that problem: it attaches the valgrind bits to the command line in Test itself, rather than tacking them on just before the run."}, {"time": "2013-02-15T00:47:00Z", "id": 7106432, "raw_text": "> I think this bug will be fixing that problem: it attaches the valgrind bits\n> to the command line in Test itself, rather than tacking them on just before\n> the run.\n\nExcellent!  (That's what I hoped, but I didn't quite understand from your comment if it would happen.)", "creation_time": "2013-02-15T00:47:00Z", "bug_id": 638219, "tags": [], "is_private": false, "count": 123, "text": "> I think this bug will be fixing that problem: it attaches the valgrind bits\n> to the command line in Test itself, rather than tacking them on just before\n> the run.\n\nExcellent!  (That's what I hoped, but I didn't quite understand from your comment if it would happen.)", "author": "n.nethercote@gmail.com", "creator": "n.nethercote@gmail.com", "attachment_id": null}, {"attachment_id": 714276, "creator": "dirkjan@ochtman.nl", "author": "dirkjan@ochtman.nl", "count": 124, "text": "Created attachment 714276\nBatch 2, patch 1: move command construction into Test class\n\nRemoved the newline, although under protest! Man, you're nitpicky... Can a man keep a tiny little bit of his personal style intact around here? ;)\n\nI always start functions with an empty line if the rest of the function contains multiple vertical blocks. By not making the function header stick to the first block, the blocks are more clearly delineated.", "is_private": false, "raw_text": "Removed the newline, although under protest! Man, you're nitpicky... Can a man keep a tiny little bit of his personal style intact around here? ;)\n\nI always start functions with an empty line if the rest of the function contains multiple vertical blocks. By not making the function header stick to the first block, the blocks are more clearly delineated.", "bug_id": 638219, "creation_time": "2013-02-15T07:39:43Z", "tags": [], "time": "2013-02-15T07:39:43Z", "id": 7107097}, {"attachment_id": 714277, "is_private": false, "creator": "dirkjan@ochtman.nl", "tags": [], "raw_text": "Okay, your analysis makes some sense. I've used VALGRIND_CMD for the name; it's a little shorter, and should clarify and distinguish enough from other uses.", "bug_id": 638219, "creation_time": "2013-02-15T07:42:54Z", "id": 7107101, "author": "dirkjan@ochtman.nl", "time": "2013-02-15T07:42:54Z", "count": 125, "text": "Created attachment 714277\nBatch 2, patch 2: extract valgrind setup, prepend in Test.command() (v2)\n\nOkay, your analysis makes some sense. I've used VALGRIND_CMD for the name; it's a little shorter, and should clarify and distinguish enough from other uses."}, {"is_private": false, "attachment_id": 714280, "tags": [], "creator": "dirkjan@ochtman.nl", "bug_id": 638219, "creation_time": "2013-02-15T07:44:43Z", "raw_text": "Added a trailing slash to LIB_DIR. Extended the changeset message a little bit to explain why I think it's okay to point to directory paths that are somewhat far removed from the script, since that feels a little bit ugly to me.", "id": 7107106, "time": "2013-02-15T07:44:43Z", "author": "dirkjan@ochtman.nl", "text": "Created attachment 714280\nBatch 2, patch 3: save static paths in module-level constants\n\nAdded a trailing slash to LIB_DIR. Extended the changeset message a little bit to explain why I think it's okay to point to directory paths that are somewhat far removed from the script, since that feels a little bit ugly to me.", "count": 126}, {"author": "dirkjan@ochtman.nl", "count": 127, "text": "Created attachment 714287\nBatch 2, patch 3: save static paths in module-level constants (v2)\n\nMissed some signatures in the last version, this is better.", "attachment_id": 714287, "creator": "dirkjan@ochtman.nl", "time": "2013-02-15T08:03:50Z", "id": 7107132, "is_private": false, "raw_text": "Missed some signatures in the last version, this is better.", "creation_time": "2013-02-15T08:03:50Z", "bug_id": 638219, "tags": []}, {"raw_text": "", "creation_time": "2013-02-15T16:01:55Z", "bug_id": 638219, "tags": [], "is_private": false, "time": "2013-02-15T16:01:55Z", "id": 7108127, "creator": "dirkjan@ochtman.nl", "attachment_id": 714375, "text": "Created attachment 714375\nBatch 2, patch 4: use TestOutput class to wrap test results", "count": 128, "author": "dirkjan@ochtman.nl"}, {"creator": "dirkjan@ochtman.nl", "attachment_id": 714416, "count": 129, "text": "Created attachment 714416\nBatch 2, patch 5: reuse cmd saved in results object rather than rebuilding it\n\nIn particular, not passing shell_args around as much will help later on...", "author": "dirkjan@ochtman.nl", "tags": [], "creation_time": "2013-02-15T16:51:10Z", "bug_id": 638219, "raw_text": "In particular, not passing shell_args around as much will help later on...", "is_private": false, "id": 7108378, "time": "2013-02-15T16:51:10Z"}, {"creator": "dirkjan@ochtman.nl", "tags": [], "raw_text": "Reporting on test output seems a better fit for process_test_results() than for run_test().", "bug_id": 638219, "creation_time": "2013-02-15T16:53:33Z", "attachment_id": 714420, "is_private": false, "text": "Created attachment 714420\nBatch 2, patch 6: move test result output into result processing function\n\nReporting on test output seems a better fit for process_test_results() than for run_test().", "count": 130, "id": 7108386, "author": "dirkjan@ochtman.nl", "time": "2013-02-15T16:53:33Z"}, {"attachment_id": 714423, "creator": "dirkjan@ochtman.nl", "author": "dirkjan@ochtman.nl", "count": 131, "text": "Created attachment 714423\nBatch 2, patch 7: set all test-independent command-line bits up once, pass in", "is_private": false, "tags": [], "raw_text": "", "creation_time": "2013-02-15T16:59:05Z", "bug_id": 638219, "id": 7108413, "time": "2013-02-15T16:59:05Z"}, {"time": "2013-02-15T17:00:33Z", "id": 7108420, "creation_time": "2013-02-15T17:00:33Z", "bug_id": 638219, "raw_text": "I think that pretty much concludes batch 2. In the next batch, I can start to move closer to using the jstests tasks framework for the JIT tests.", "tags": [], "is_private": false, "text": "I think that pretty much concludes batch 2. In the next batch, I can start to move closer to using the jstests tasks framework for the JIT tests.", "count": 132, "author": "dirkjan@ochtman.nl", "creator": "dirkjan@ochtman.nl", "attachment_id": null}, {"id": 7125055, "time": "2013-02-21T00:22:39Z", "tags": [], "raw_text": "Review of attachment 714375:\n-----------------------------------------------------------------\n\nThat's a very nice cleanup!", "creation_time": "2013-02-21T00:22:39Z", "bug_id": 638219, "is_private": false, "count": 133, "text": "Comment on attachment 714375\nBatch 2, patch 4: use TestOutput class to wrap test results\n\nReview of attachment 714375:\n-----------------------------------------------------------------\n\nThat's a very nice cleanup!", "author": "terrence.d.cole@gmail.com", "creator": "terrence.d.cole@gmail.com", "attachment_id": 714375}, {"creator": "terrence.d.cole@gmail.com", "attachment_id": 714420, "count": 134, "text": "Comment on attachment 714420\nBatch 2, patch 6: move test result output into result processing function\n\nReview of attachment 714420:\n-----------------------------------------------------------------\n\nAgreed!", "author": "terrence.d.cole@gmail.com", "bug_id": 638219, "creation_time": "2013-02-21T00:27:33Z", "raw_text": "Review of attachment 714420:\n-----------------------------------------------------------------\n\nAgreed!", "tags": [], "is_private": false, "time": "2013-02-21T00:27:33Z", "id": 7125072}, {"raw_text": "Review of attachment 714423:\n-----------------------------------------------------------------\n\nSorry I didn't get to these sooner!", "creation_time": "2013-02-21T00:33:31Z", "bug_id": 638219, "creator": "terrence.d.cole@gmail.com", "tags": [], "attachment_id": 714423, "is_private": false, "text": "Comment on attachment 714423\nBatch 2, patch 7: set all test-independent command-line bits up once, pass in\n\nReview of attachment 714423:\n-----------------------------------------------------------------\n\nSorry I didn't get to these sooner!", "count": 135, "author": "terrence.d.cole@gmail.com", "time": "2013-02-21T00:33:31Z", "id": 7125105}, {"text": "(In reply to Terrence Cole [:terrence] from comment #135)\n> Sorry I didn't get to these sooner!\n\nNo problem. I think you forgot to take a look at the new patch 2, though!", "count": 136, "author": "dirkjan@ochtman.nl", "creator": "dirkjan@ochtman.nl", "attachment_id": null, "time": "2013-02-21T08:29:15Z", "id": 7126099, "raw_text": "(In reply to Terrence Cole [:terrence] from comment #135)\n> Sorry I didn't get to these sooner!\n\nNo problem. I think you forgot to take a look at the new patch 2, though!", "bug_id": 638219, "creation_time": "2013-02-21T08:29:15Z", "tags": [], "is_private": false}, {"count": 137, "text": "Comment on attachment 714277\nBatch 2, patch 2: extract valgrind setup, prepend in Test.command() (v2)\n\nReview of attachment 714277:\n-----------------------------------------------------------------\n\nDoh! You are right, I missed this one somehow. This version looks very nice.", "id": 7128501, "author": "terrence.d.cole@gmail.com", "time": "2013-02-21T19:44:57Z", "creator": "terrence.d.cole@gmail.com", "tags": [], "raw_text": "Review of attachment 714277:\n-----------------------------------------------------------------\n\nDoh! You are right, I missed this one somehow. This version looks very nice.", "creation_time": "2013-02-21T19:44:57Z", "bug_id": 638219, "is_private": false, "attachment_id": 714277}, {"id": 7132388, "time": "2013-02-22T17:20:07Z", "is_private": false, "tags": [], "creation_time": "2013-02-22T17:20:07Z", "bug_id": 638219, "raw_text": "Since my push privileges still haven't been fixed (bug 837533), can someone please bundle up these changes and push them into try?", "author": "dirkjan@ochtman.nl", "text": "Since my push privileges still haven't been fixed (bug 837533), can someone please bundle up these changes and push them into try?", "count": 138, "attachment_id": null, "creator": "dirkjan@ochtman.nl"}, {"is_private": false, "attachment_id": null, "creator": "release@mozilla.com", "tags": [], "raw_text": "Try run for 00f6759b085f is complete.\nDetailed breakdown of the results available here:\n    https://tbpl.mozilla.org/?tree=Try&rev=00f6759b085f\nResults (out of 45 total builds):\n    success: 42\n    warnings: 1\n    failure: 2\nBuilds (or logs if builds failed) available at:\nhttp://ftp.mozilla.org/pub/mozilla.org/firefox/try-builds/Ms2ger@gmail.com-00f6759b085f", "bug_id": 638219, "creation_time": "2013-03-01T20:30:48Z", "id": 7159338, "author": "release@mozilla.com", "time": "2013-03-01T20:30:48Z", "text": "Try run for 00f6759b085f is complete.\nDetailed breakdown of the results available here:\n    https://tbpl.mozilla.org/?tree=Try&rev=00f6759b085f\nResults (out of 45 total builds):\n    success: 42\n    warnings: 1\n    failure: 2\nBuilds (or logs if builds failed) available at:\nhttp://ftp.mozilla.org/pub/mozilla.org/firefox/try-builds/Ms2ger@gmail.com-00f6759b085f", "count": 139}, {"is_private": false, "creation_time": "2013-03-01T21:45:47Z", "bug_id": 638219, "raw_text": "Try run for 00f6759b085f is complete.\nDetailed breakdown of the results available here:\n    https://tbpl.mozilla.org/?tree=Try&rev=00f6759b085f\nResults (out of 46 total builds):\n    success: 42\n    warnings: 1\n    failure: 3\nBuilds (or logs if builds failed) available at:\nhttp://ftp.mozilla.org/pub/mozilla.org/firefox/try-builds/Ms2ger@gmail.com-00f6759b085f", "tags": [], "time": "2013-03-01T21:45:47Z", "id": 7159648, "attachment_id": null, "creator": "release@mozilla.com", "author": "release@mozilla.com", "text": "Try run for 00f6759b085f is complete.\nDetailed breakdown of the results available here:\n    https://tbpl.mozilla.org/?tree=Try&rev=00f6759b085f\nResults (out of 46 total builds):\n    success: 42\n    warnings: 1\n    failure: 3\nBuilds (or logs if builds failed) available at:\nhttp://ftp.mozilla.org/pub/mozilla.org/firefox/try-builds/Ms2ger@gmail.com-00f6759b085f", "count": 140}, {"is_private": false, "bug_id": 638219, "creation_time": "2013-03-01T21:47:35Z", "raw_text": "So I think the try results look good. Can someone look them over to make sure I didn't miss anything and if I didn't, push the patches out to inbound?", "tags": [], "time": "2013-03-01T21:47:35Z", "id": 7159655, "attachment_id": null, "creator": "dirkjan@ochtman.nl", "author": "dirkjan@ochtman.nl", "text": "So I think the try results look good. Can someone look them over to make sure I didn't miss anything and if I didn't, push the patches out to inbound?", "count": 141}, {"attachment_id": null, "creator": "terrence.d.cole@gmail.com", "author": "terrence.d.cole@gmail.com", "count": 142, "text": "Yeah, looks good. I'll push as soon as m-i opens.", "is_private": false, "bug_id": 638219, "creation_time": "2013-03-01T22:24:27Z", "raw_text": "Yeah, looks good. I'll push as soon as m-i opens.", "tags": [], "time": "2013-03-01T22:24:27Z", "id": 7159804}, {"author": "terrence.d.cole@gmail.com", "time": "2013-03-01T23:47:36Z", "id": 7160098, "text": "https://hg.mozilla.org/integration/mozilla-inbound/rev/008743f80cb1\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/a8d5cbaa6a46\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/513464517953\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/750b5be0a25c\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/396ab87da092\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/4ef9fd350087\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/9777754132a4\n\nGreen try run at:\nhttps://tbpl.mozilla.org/?tree=Try&rev=00f6759b085f", "count": 143, "attachment_id": null, "is_private": false, "raw_text": "https://hg.mozilla.org/integration/mozilla-inbound/rev/008743f80cb1\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/a8d5cbaa6a46\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/513464517953\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/750b5be0a25c\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/396ab87da092\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/4ef9fd350087\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/9777754132a4\n\nGreen try run at:\nhttps://tbpl.mozilla.org/?tree=Try&rev=00f6759b085f", "bug_id": 638219, "creation_time": "2013-03-01T23:47:36Z", "creator": "terrence.d.cole@gmail.com", "tags": []}, {"text": "https://hg.mozilla.org/integration/mozilla-inbound/rev/25ac92017a5a", "count": 144, "time": "2013-03-02T01:08:23Z", "author": "terrence.d.cole@gmail.com", "id": 7160378, "bug_id": 638219, "creation_time": "2013-03-02T01:08:23Z", "raw_text": "https://hg.mozilla.org/integration/mozilla-inbound/rev/25ac92017a5a", "tags": [], "creator": "terrence.d.cole@gmail.com", "attachment_id": null, "is_private": false}, {"id": 7160930, "author": "Ms2ger@gmail.com", "time": "2013-03-02T09:49:50Z", "count": 145, "text": "Comment on attachment 714375\nBatch 2, patch 4: use TestOutput class to wrap test results\n\nReview of attachment 714375:\n-----------------------------------------------------------------\n\n::: js/src/tests/lib/jittests.py\n@@ +498,2 @@\n>                  else:\n>                      lines = [ _ for _ in out.split('\\n') + err.split('\\n')\n\nSo, yeah, you forgot to change these, which means that a test failure now turns red and shows 'command timed out: 3600 seconds without output, attempting to kill'; see <https://tbpl.mozilla.org/php/getParsedLog.php?id=20245776&tree=Mozilla-Inbound> for example.", "attachment_id": 714375, "is_private": false, "creator": "Ms2ger@gmail.com", "tags": [], "raw_text": "Review of attachment 714375:\n-----------------------------------------------------------------\n\n::: js/src/tests/lib/jittests.py\n@@ +498,2 @@\n>                  else:\n>                      lines = [ _ for _ in out.split('\\n') + err.split('\\n')\n\nSo, yeah, you forgot to change these, which means that a test failure now turns red and shows 'command timed out: 3600 seconds without output, attempting to kill'; see <https://tbpl.mozilla.org/php/getParsedLog.php?id=20245776&tree=Mozilla-Inbound> for example.", "creation_time": "2013-03-02T09:49:50Z", "bug_id": 638219}, {"count": 146, "text": "https://hg.mozilla.org/integration/mozilla-inbound/rev/fc74c83f5ed5", "id": 7160937, "author": "Ms2ger@gmail.com", "time": "2013-03-02T09:55:15Z", "creator": "Ms2ger@gmail.com", "tags": [], "raw_text": "https://hg.mozilla.org/integration/mozilla-inbound/rev/fc74c83f5ed5", "bug_id": 638219, "creation_time": "2013-03-02T09:55:15Z", "attachment_id": null, "is_private": false}, {"attachment_id": null, "is_private": false, "creation_time": "2013-03-02T10:17:21Z", "bug_id": 638219, "raw_text": "Thanks for fixing that up. Are there any best practices I can follow to make sure I catch these kinds of bugs before stuff is pushed?", "tags": [], "creator": "dirkjan@ochtman.nl", "time": "2013-03-02T10:17:21Z", "author": "dirkjan@ochtman.nl", "id": 7160958, "count": 147, "text": "Thanks for fixing that up. Are there any best practices I can follow to make sure I catch these kinds of bugs before stuff is pushed?"}, {"id": 7160972, "author": "Ms2ger@gmail.com", "time": "2013-03-02T10:38:34Z", "count": 148, "text": "Looks like pyflakes <https://pypi.python.org/pypi/pyflakes> caught it:\n\n$ pyflakes js/src/tests/lib/jittests.py\njs/src/tests/lib/jittests.py:17: 'cpu_count' imported but unused\njs/src/tests/lib/jittests.py:499: undefined name 'out'\njs/src/tests/lib/jittests.py:499: undefined name 'err'\njs/src/tests/lib/jittests.py:546: 'android' imported but unused\n\nIt doesn't catch everything, and not everything it catches is a bug, but it can still be pretty useful.", "attachment_id": null, "is_private": false, "creator": "Ms2ger@gmail.com", "tags": [], "raw_text": "Looks like pyflakes <https://pypi.python.org/pypi/pyflakes> caught it:\n\n$ pyflakes js/src/tests/lib/jittests.py\njs/src/tests/lib/jittests.py:17: 'cpu_count' imported but unused\njs/src/tests/lib/jittests.py:499: undefined name 'out'\njs/src/tests/lib/jittests.py:499: undefined name 'err'\njs/src/tests/lib/jittests.py:546: 'android' imported but unused\n\nIt doesn't catch everything, and not everything it catches is a bug, but it can still be pretty useful.", "creation_time": "2013-03-02T10:38:34Z", "bug_id": 638219}, {"time": "2013-03-02T10:42:54Z", "id": 7160976, "creation_time": "2013-03-02T10:42:54Z", "bug_id": 638219, "raw_text": "Ah, yeah. I actually used pyflakes before. I was talking more about maybe synthesizing different kinds of test failures, so I can be sure to hit more code paths.", "tags": [], "is_private": false, "text": "Ah, yeah. I actually used pyflakes before. I was talking more about maybe synthesizing different kinds of test failures, so I can be sure to hit more code paths.", "count": 149, "author": "dirkjan@ochtman.nl", "creator": "dirkjan@ochtman.nl", "attachment_id": null}, {"attachment_id": null, "is_private": false, "tags": [], "creator": "gps@mozilla.com", "bug_id": 638219, "creation_time": "2013-03-02T21:34:32Z", "raw_text": "https://hg.mozilla.org/mozilla-central/rev/008743f80cb1\nhttps://hg.mozilla.org/mozilla-central/rev/a8d5cbaa6a46\nhttps://hg.mozilla.org/mozilla-central/rev/513464517953\nhttps://hg.mozilla.org/mozilla-central/rev/750b5be0a25c\nhttps://hg.mozilla.org/mozilla-central/rev/396ab87da092\nhttps://hg.mozilla.org/mozilla-central/rev/4ef9fd350087\nhttps://hg.mozilla.org/mozilla-central/rev/9777754132a4\nhttps://hg.mozilla.org/mozilla-central/rev/25ac92017a5a\nhttps://hg.mozilla.org/mozilla-central/rev/fc74c83f5ed5", "id": 7161690, "time": "2013-03-02T21:34:32Z", "author": "gps@mozilla.com", "text": "https://hg.mozilla.org/mozilla-central/rev/008743f80cb1\nhttps://hg.mozilla.org/mozilla-central/rev/a8d5cbaa6a46\nhttps://hg.mozilla.org/mozilla-central/rev/513464517953\nhttps://hg.mozilla.org/mozilla-central/rev/750b5be0a25c\nhttps://hg.mozilla.org/mozilla-central/rev/396ab87da092\nhttps://hg.mozilla.org/mozilla-central/rev/4ef9fd350087\nhttps://hg.mozilla.org/mozilla-central/rev/9777754132a4\nhttps://hg.mozilla.org/mozilla-central/rev/25ac92017a5a\nhttps://hg.mozilla.org/mozilla-central/rev/fc74c83f5ed5", "count": 150}, {"text": "Dirkjan: is there anything I can help with to move this forward?", "count": 151, "author": "Ms2ger@gmail.com", "time": "2013-06-18T11:51:19Z", "id": 7546479, "raw_text": "Dirkjan: is there anything I can help with to move this forward?", "creation_time": "2013-06-18T11:51:19Z", "bug_id": 638219, "creator": "Ms2ger@gmail.com", "tags": [], "attachment_id": null, "is_private": false}, {"is_private": false, "tags": [], "raw_text": "Not really. Sorry for stalling so long, I'll get back into it.", "bug_id": 638219, "creation_time": "2013-06-18T11:59:28Z", "id": 7546494, "time": "2013-06-18T11:59:28Z", "attachment_id": null, "creator": "dirkjan@ochtman.nl", "author": "dirkjan@ochtman.nl", "text": "Not really. Sorry for stalling so long, I'll get back into it.", "count": 152}, {"id": 7632682, "time": "2013-07-14T09:47:05Z", "is_private": false, "tags": [], "raw_text": "I started hacking on this again, but right now I can't figure out how to run the test suite (jstests). There's no makefile that I can use targets from, and if I try to run it directly it doesn't seem to work:\n\ndjc@djc-mbp src $ python tests/jstests.py ../../obj-ff-dbg/js/src/js\nTraceback (most recent call last):\n  File \"tests/jstests.py\", line 339, in <module>\n    sys.exit(main())\n  File \"tests/jstests.py\", line 297, in main\n    skip_list, test_list = load_tests(options, requested_paths, excluded_paths)\n  File \"tests/jstests.py\", line 239, in load_tests\n    test_list = manifest.load(test_dir, xul_tester)\n  File \"/Users/djc/src/mozilla-central/js/src/tests/lib/manifest.py\", line 376, in load\n    _parse_test_header(fullpath, testcase, xul_tester)\n  File \"/Users/djc/src/mozilla-central/js/src/tests/lib/manifest.py\", line 277, in _parse_test_header\n    _parse_one(testcase, xul_tester)\n  File \"/Users/djc/src/mozilla-central/js/src/tests/lib/manifest.py\", line 132, in _parse_one\n    if xul_tester.test(cond):\n  File \"/Users/djc/src/mozilla-central/js/src/tests/lib/manifest.py\", line 99, in test\n    % (cond, out, err))\nException: Failed to test XUL condition '!xulRuntime.shell&&xulRuntime.OS==\"Linux\"&&xulRuntime.XPCOMABI.match(/x86_64/)'; output was '', stderr was 'dyld: Library not loaded: @executable_path/libnss3.dylib\\n  Referenced from: /Users/djc/src/mozilla-central/obj-ff-dbg/js/src/js\\n  Reason: image not found\\n'\n\nIf I set LD_PRELOAD_PATH to obj-ff-debug/dist/libs, it still doesn't work. Any hints?", "creation_time": "2013-07-14T09:47:05Z", "bug_id": 638219, "author": "dirkjan@ochtman.nl", "count": 153, "text": "I started hacking on this again, but right now I can't figure out how to run the test suite (jstests). There's no makefile that I can use targets from, and if I try to run it directly it doesn't seem to work:\n\ndjc@djc-mbp src $ python tests/jstests.py ../../obj-ff-dbg/js/src/js\nTraceback (most recent call last):\n  File \"tests/jstests.py\", line 339, in <module>\n    sys.exit(main())\n  File \"tests/jstests.py\", line 297, in main\n    skip_list, test_list = load_tests(options, requested_paths, excluded_paths)\n  File \"tests/jstests.py\", line 239, in load_tests\n    test_list = manifest.load(test_dir, xul_tester)\n  File \"/Users/djc/src/mozilla-central/js/src/tests/lib/manifest.py\", line 376, in load\n    _parse_test_header(fullpath, testcase, xul_tester)\n  File \"/Users/djc/src/mozilla-central/js/src/tests/lib/manifest.py\", line 277, in _parse_test_header\n    _parse_one(testcase, xul_tester)\n  File \"/Users/djc/src/mozilla-central/js/src/tests/lib/manifest.py\", line 132, in _parse_one\n    if xul_tester.test(cond):\n  File \"/Users/djc/src/mozilla-central/js/src/tests/lib/manifest.py\", line 99, in test\n    % (cond, out, err))\nException: Failed to test XUL condition '!xulRuntime.shell&&xulRuntime.OS==\"Linux\"&&xulRuntime.XPCOMABI.match(/x86_64/)'; output was '', stderr was 'dyld: Library not loaded: @executable_path/libnss3.dylib\\n  Referenced from: /Users/djc/src/mozilla-central/obj-ff-dbg/js/src/js\\n  Reason: image not found\\n'\n\nIf I set LD_PRELOAD_PATH to obj-ff-debug/dist/libs, it still doesn't work. Any hints?", "attachment_id": null, "creator": "dirkjan@ochtman.nl"}, {"author": "arai.unmht@gmail.com", "count": 154, "text": "I think setting DYLD_LIBRARY_PATH will work.\n  DYLD_LIBRARY_PATH=../../obj-ff-dbg/dist/lib python tests/jstests.py ../../obj-ff-dbg/js/src/js\n\nBy the way, how about passing \"../../obj-ff-dbg/dist/bin/js\" instead of \"../../obj-ff-dbg/js/src/js\"?\nThe symbolic link to libnss3.dylib is also located there,\nso \"@executable_path/libnss3.dylib\" can be loaded from it without setting DYLD_LIBRARY_PATH.", "attachment_id": null, "creator": "arai.unmht@gmail.com", "id": 7633135, "time": "2013-07-15T00:36:02Z", "is_private": false, "tags": [], "bug_id": 638219, "creation_time": "2013-07-15T00:36:02Z", "raw_text": "I think setting DYLD_LIBRARY_PATH will work.\n  DYLD_LIBRARY_PATH=../../obj-ff-dbg/dist/lib python tests/jstests.py ../../obj-ff-dbg/js/src/js\n\nBy the way, how about passing \"../../obj-ff-dbg/dist/bin/js\" instead of \"../../obj-ff-dbg/js/src/js\"?\nThe symbolic link to libnss3.dylib is also located there,\nso \"@executable_path/libnss3.dylib\" can be loaded from it without setting DYLD_LIBRARY_PATH."}, {"count": 155, "text": "I'm going to drop the pretention that I'll ever get this further than I have so far, sorry.", "author": "dirkjan@ochtman.nl", "creator": "dirkjan@ochtman.nl", "attachment_id": null, "id": 8899209, "time": "2014-06-07T12:44:55Z", "tags": [], "creation_time": "2014-06-07T12:44:55Z", "bug_id": 638219, "raw_text": "I'm going to drop the pretention that I'll ever get this further than I have so far, sorry.", "is_private": false}]}}, "comments": {}}