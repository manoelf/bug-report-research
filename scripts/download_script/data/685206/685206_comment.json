{"comments": {}, "bugs": {"685206": {"comments": [{"author": "alonso12345@hotmail.com", "attachment_id": null, "time": "2011-09-07T17:02:12Z", "creator": "alonso12345@hotmail.com", "text": "To use the rendering intents for ICC profiles it's necessary to read new tags that are not read in the current stage.\n\nThese tags are A2B1 A2B2 B2A1 B2A2, and for absolute-colorimetry intent, mediawhitepoint.\n\nAlso, the way that the tags are read seems that does some extra checks that would not be necessary, so I think it could be possible to improve performance.", "raw_text": "To use the rendering intents for ICC profiles it's necessary to read new tags that are not read in the current stage.\n\nThese tags are A2B1 A2B2 B2A1 B2A2, and for absolute-colorimetry intent, mediawhitepoint.\n\nAlso, the way that the tags are read seems that does some extra checks that would not be necessary, so I think it could be possible to improve performance.", "creation_time": "2011-09-07T17:02:12Z", "bug_id": 685206, "id": 5705204, "tags": [], "is_private": false, "count": 0}, {"creation_time": "2011-09-07T17:11:16Z", "raw_text": "Patch to review.", "author": "alonso12345@hotmail.com", "attachment_id": 558860, "time": "2011-09-07T17:11:16Z", "creator": "alonso12345@hotmail.com", "text": "Created attachment 558860\nReads new tags and tries to improve performance\n\nPatch to review.", "id": 5705221, "tags": [], "count": 1, "is_private": false, "bug_id": 685206}, {"creator": "b56girard@gmail.com", "text": "Comment on attachment 558860\nReads new tags and tries to improve performance\n\nReview of attachment 558860:\n-----------------------------------------------------------------\n\nOverall this patch looks good. With a few changes I think we should take it.\n\nI know the spacing situation in qcms isn't perfect but I'd like to prevent it from getting worse. We should be using tabs in these files instead of spaces even if it's not the proper mozilla style. See 'noexpandtab' in the header.\n\n::: gfx/qcms/iccread.c\n@@ +332,3 @@\n>  \tstruct matrix matrix;\n> +    uint8_t i;\n> +    uint32_t offset = read_u32(src, 128 + 4 + 4*index*3 + 4);\n\nWe have this pattern |128 + 4 + 4*index*3 + 4| repeated in a lot of places. I think we should refactor this to either a helper function or macro. |index| should be named to something more descriptive such as |tag_index|.\n\n@@ -1067,5 @@\n> -\t\t\t\tprofile->greenTRC = read_tag_curveType(src, index, TAG_gTRC);\n> -\t\t\t\tprofile->blueTRC = read_tag_curveType(src, index, TAG_bTRC);\n> -\n> -\t\t\t\tif (!profile->redTRC || !profile->blueTRC || !profile->greenTRC)\n> -\t\t\t\t\tgoto invalid_tag_table;\n\nYour patching is missing some of the validation that was performed here. For example a RGB color space profile should have a rgb TRC when not running in iccv4 mode.\n\n@@ -1073,5 @@\n> -\t\t} else if (profile->color_space == GRAY_SIGNATURE) {\n> -\n> -\t\t\tprofile->grayTRC = read_tag_curveType(src, index, TAG_kTRC);\n> -\t\t\tif (!profile->grayTRC)\n> -\t\t\t\tgoto invalid_tag_table;\n\nLike wise here. Can we confirm that these are safely checked elsewhere?", "author": "b56girard@gmail.com", "time": "2011-09-07T17:42:49Z", "attachment_id": 558860, "raw_text": "Review of attachment 558860:\n-----------------------------------------------------------------\n\nOverall this patch looks good. With a few changes I think we should take it.\n\nI know the spacing situation in qcms isn't perfect but I'd like to prevent it from getting worse. We should be using tabs in these files instead of spaces even if it's not the proper mozilla style. See 'noexpandtab' in the header.\n\n::: gfx/qcms/iccread.c\n@@ +332,3 @@\n>  \tstruct matrix matrix;\n> +    uint8_t i;\n> +    uint32_t offset = read_u32(src, 128 + 4 + 4*index*3 + 4);\n\nWe have this pattern |128 + 4 + 4*index*3 + 4| repeated in a lot of places. I think we should refactor this to either a helper function or macro. |index| should be named to something more descriptive such as |tag_index|.\n\n@@ -1067,5 @@\n> -\t\t\t\tprofile->greenTRC = read_tag_curveType(src, index, TAG_gTRC);\n> -\t\t\t\tprofile->blueTRC = read_tag_curveType(src, index, TAG_bTRC);\n> -\n> -\t\t\t\tif (!profile->redTRC || !profile->blueTRC || !profile->greenTRC)\n> -\t\t\t\t\tgoto invalid_tag_table;\n\nYour patching is missing some of the validation that was performed here. For example a RGB color space profile should have a rgb TRC when not running in iccv4 mode.\n\n@@ -1073,5 @@\n> -\t\t} else if (profile->color_space == GRAY_SIGNATURE) {\n> -\n> -\t\t\tprofile->grayTRC = read_tag_curveType(src, index, TAG_kTRC);\n> -\t\t\tif (!profile->grayTRC)\n> -\t\t\t\tgoto invalid_tag_table;\n\nLike wise here. Can we confirm that these are safely checked elsewhere?", "creation_time": "2011-09-07T17:42:49Z", "bug_id": 685206, "tags": [], "is_private": false, "count": 2, "id": 5705330}, {"creator": "jmuizelaar@mozilla.com", "author": "jmuizelaar@mozilla.com", "creation_time": "2011-09-07T19:56:01Z", "raw_text": "What's the performance difference this makes?", "text": "What's the performance difference this makes?", "attachment_id": null, "time": "2011-09-07T19:56:01Z", "tags": [], "count": 3, "is_private": false, "id": 5705741, "bug_id": 685206}, {"author": "alonso12345@hotmail.com", "creator": "alonso12345@hotmail.com", "bug_id": 685206, "id": 5706124, "is_private": false, "count": 4, "tags": [], "attachment_id": 558969, "time": "2011-09-07T21:52:26Z", "text": "Created attachment 558969\nModifications previous patch\n\nChanges done.", "creation_time": "2011-09-07T21:52:26Z", "raw_text": "Changes done."}, {"author": "alonso12345@hotmail.com", "creator": "alonso12345@hotmail.com", "attachment_id": null, "time": "2011-09-08T08:56:07Z", "text": "Sorry Jeff, I didn't saw your comment yesterday.\nThe performance improvement it's not expected to be great but there is.\nIn the original code we have this:\n\n1027 \tindex = read_tag_table(profile, src);\n\nThis returns the tag table that is in scr, so we are duplicating some part of the memory.\n\nAfter the tag table duplicate we have this kind of code:\n1040 \tif (find_tag(index, TAG_A2B0)) {\n1041 \t\tif (read_u32(src, find_tag(index, TAG_A2B0)->offset) == LUT8_TYPE ||\n1042 \t\t    read_u32(src, find_tag(index, TAG_A2B0)->offset) == LUT16_TYPE) {\n1043 \t\t\tprofile->A2B0 = read_tag_lutType(src, index, TAG_A2B0);\n\nThe find_tag function is looking for tag signatures in the previous array \"index\", from start, until it reaches the tag if it exist. In this code we see that makes the search of the same tag 3 times in the if statements and one more in read_tag_lutType() which is very redundant, if we enter the function it's because the tag is present. The worst case scenario is the tag exist but is in the last position. This is reading the entire array 4 times. If we have in mind that we want to read all the profile makes no much sense a search function, it fits more a code that reads and process tags one by one.\n\nThinking in this, I eliminated the memory duplicate and replaced the find function to a switch/case statement. It allows to only access only one time in the existing tags.\n\nSo, the improvement in run time would be, use less memory, and less memory accesses.\nI know that this would not be great improvement in this case. The best improvement that I see is that the code it's clearer and easier to add new tags to be read (less if statements to check if the tag is present).", "creation_time": "2011-09-08T08:56:07Z", "raw_text": "Sorry Jeff, I didn't saw your comment yesterday.\nThe performance improvement it's not expected to be great but there is.\nIn the original code we have this:\n\n1027 \tindex = read_tag_table(profile, src);\n\nThis returns the tag table that is in scr, so we are duplicating some part of the memory.\n\nAfter the tag table duplicate we have this kind of code:\n1040 \tif (find_tag(index, TAG_A2B0)) {\n1041 \t\tif (read_u32(src, find_tag(index, TAG_A2B0)->offset) == LUT8_TYPE ||\n1042 \t\t    read_u32(src, find_tag(index, TAG_A2B0)->offset) == LUT16_TYPE) {\n1043 \t\t\tprofile->A2B0 = read_tag_lutType(src, index, TAG_A2B0);\n\nThe find_tag function is looking for tag signatures in the previous array \"index\", from start, until it reaches the tag if it exist. In this code we see that makes the search of the same tag 3 times in the if statements and one more in read_tag_lutType() which is very redundant, if we enter the function it's because the tag is present. The worst case scenario is the tag exist but is in the last position. This is reading the entire array 4 times. If we have in mind that we want to read all the profile makes no much sense a search function, it fits more a code that reads and process tags one by one.\n\nThinking in this, I eliminated the memory duplicate and replaced the find function to a switch/case statement. It allows to only access only one time in the existing tags.\n\nSo, the improvement in run time would be, use less memory, and less memory accesses.\nI know that this would not be great improvement in this case. The best improvement that I see is that the code it's clearer and easier to add new tags to be read (less if statements to check if the tag is present).", "bug_id": 685206, "id": 5707114, "is_private": false, "count": 5, "tags": []}, {"author": "b56girard@gmail.com", "attachment_id": null, "time": "2011-09-19T14:11:48Z", "text": "(In reply to JordiM from comment #5)\n> So, the improvement in run time would be, use less memory, and less memory\n> accesses.\n> I know that this would not be great improvement in this case. The best\n> improvement that I see is that the code it's clearer and easier to add new\n> tags to be read (less if statements to check if the tag is present).\n\nFirst I want to apologize for taking so long on the review. I was away for travel.\n \nThis patch does reduce the searching we do for tags which is describable, but we may read unnecessary tags (rgb tags for gray signature) although this isn't strictly an objection. I don't see any memory space reduction?", "creator": "b56girard@gmail.com", "creation_time": "2011-09-19T14:11:48Z", "raw_text": "(In reply to JordiM from comment #5)\n> So, the improvement in run time would be, use less memory, and less memory\n> accesses.\n> I know that this would not be great improvement in this case. The best\n> improvement that I see is that the code it's clearer and easier to add new\n> tags to be read (less if statements to check if the tag is present).\n\nFirst I want to apologize for taking so long on the review. I was away for travel.\n \nThis patch does reduce the searching we do for tags which is describable, but we may read unnecessary tags (rgb tags for gray signature) although this isn't strictly an objection. I don't see any memory space reduction?", "bug_id": 685206, "id": 5722915, "tags": [], "count": 6, "is_private": false}, {"id": 5722923, "tags": [], "is_private": false, "count": 7, "bug_id": 685206, "creation_time": "2011-09-19T14:14:00Z", "raw_text": "Review of attachment 558969:\n-----------------------------------------------------------------\n\nWe still need to convert the spaces to tabs. Best way I know of is saving the patch, unapply it, back it up, run a regex for a line starting in '<Start of line>+<space>' and replacing by '+<tab>', reapplying the patch. This wont add additional lines to your patch. Let me know if you want a hand with this.\n\nOnce we get a final version of the patch, and I ran some test, we will put it into the qcms repo and then merge that with the mozilla code base pending Jeff's approval.\n\n::: gfx/qcms/iccread.c\n@@ +963,5 @@\n> +                switch(read_u32(mem, 128 + 4 + 12*i)){\n> +                \n> +                    case(TAG_bXYZ):\n> +                        profile->blueColorant = read_tag_XYZType(mem, i);\n> +\t\t\t\t\t\tcolorantIsPresent[0]=true;\n\nStyle nit:\ncolorantIsPresent[0..2] = true;\n\n@@ -986,0 +943,141 @@\n> > +bool read_tag_table(qcms_profile *profile, struct mem_source *mem)\n> > +{\n> > +    uint32_t tagCount,offset;\n> > +    unsigned int i;\nNaN more ...\n\nWhat's colorantIsPresent for? Isn't the TRC null check sufficient?\n\nNeed to check for RGB_SIGNATURE.\n\nThe format here should be '<tab>if (...)'", "attachment_id": 558969, "time": "2011-09-19T14:14:00Z", "text": "Comment on attachment 558969\nModifications previous patch\n\nReview of attachment 558969:\n-----------------------------------------------------------------\n\nWe still need to convert the spaces to tabs. Best way I know of is saving the patch, unapply it, back it up, run a regex for a line starting in '<Start of line>+<space>' and replacing by '+<tab>', reapplying the patch. This wont add additional lines to your patch. Let me know if you want a hand with this.\n\nOnce we get a final version of the patch, and I ran some test, we will put it into the qcms repo and then merge that with the mozilla code base pending Jeff's approval.\n\n::: gfx/qcms/iccread.c\n@@ +963,5 @@\n> +                switch(read_u32(mem, 128 + 4 + 12*i)){\n> +                \n> +                    case(TAG_bXYZ):\n> +                        profile->blueColorant = read_tag_XYZType(mem, i);\n> +\t\t\t\t\t\tcolorantIsPresent[0]=true;\n\nStyle nit:\ncolorantIsPresent[0..2] = true;\n\n@@ -986,0 +943,141 @@\n> > +bool read_tag_table(qcms_profile *profile, struct mem_source *mem)\n> > +{\n> > +    uint32_t tagCount,offset;\n> > +    unsigned int i;\nNaN more ...\n\nWhat's colorantIsPresent for? Isn't the TRC null check sufficient?\n\nNeed to check for RGB_SIGNATURE.\n\nThe format here should be '<tab>if (...)'", "author": "b56girard@gmail.com", "creator": "b56girard@gmail.com"}, {"creator": "b56girard@gmail.com", "author": "b56girard@gmail.com", "creation_time": "2011-09-19T14:15:06Z", "raw_text": "(In reply to Benoit Girard (:BenWa) from comment #6)\n> describable\ns/describable/desirable", "text": "(In reply to Benoit Girard (:BenWa) from comment #6)\n> describable\ns/describable/desirable", "time": "2011-09-19T14:15:06Z", "attachment_id": null, "count": 8, "is_private": false, "tags": [], "id": 5722924, "bug_id": 685206}, {"tags": [], "is_private": false, "count": 9, "id": 5724315, "bug_id": 685206, "creation_time": "2011-09-19T22:54:14Z", "raw_text": "The possibility to read RGB tags in a gray signature it's only possible in malformed ICC profiles. The standard describes the gray profiles to only contain common tags and the grayTRCtag. In the case of RGB signatures, they don't have to have grayTRCtag. See clause 8 in ICC.1:2004-10.\nThe memory reduction is minimal and only inside the function qcms_profile_from_memory.\nIt's the result of not copying the tag table from src to the index variable in 1027 in the original code.\nhttp://mxr.mozilla.org/mozilla-central/source/gfx/qcms/iccread.c#1027\n\nAbout the colorant variable I think you are right, but I'm going to check it out again tomorrow to be sure it makes no sense. I'm sleepy and it's possible I miss something.\nThe RGB_Signature it's checked, but not in an explicit way.\n::: gfx/qcms/iccread.c\n@@ +960 @@\n>if (profile->color_space == RGB_SIGNATURE || profile->color_space == GRAY_SIGNATURE) {\n@@ +1085 @@\nif (profile->color_space == GRAY_SIGNATURE && !profile->grayTRC)\n\nIn the first if, we have that the only accepted signatures are gray and RGB. This last if, checks the signature. If it's gray, we know the signature is gray, if not, it can only be RGB. Another one will not pass the first if. So, we have indirectly checked RGB.\nI don't know if you want another type of check.", "text": "The possibility to read RGB tags in a gray signature it's only possible in malformed ICC profiles. The standard describes the gray profiles to only contain common tags and the grayTRCtag. In the case of RGB signatures, they don't have to have grayTRCtag. See clause 8 in ICC.1:2004-10.\nThe memory reduction is minimal and only inside the function qcms_profile_from_memory.\nIt's the result of not copying the tag table from src to the index variable in 1027 in the original code.\nhttp://mxr.mozilla.org/mozilla-central/source/gfx/qcms/iccread.c#1027\n\nAbout the colorant variable I think you are right, but I'm going to check it out again tomorrow to be sure it makes no sense. I'm sleepy and it's possible I miss something.\nThe RGB_Signature it's checked, but not in an explicit way.\n::: gfx/qcms/iccread.c\n@@ +960 @@\n>if (profile->color_space == RGB_SIGNATURE || profile->color_space == GRAY_SIGNATURE) {\n@@ +1085 @@\nif (profile->color_space == GRAY_SIGNATURE && !profile->grayTRC)\n\nIn the first if, we have that the only accepted signatures are gray and RGB. This last if, checks the signature. If it's gray, we know the signature is gray, if not, it can only be RGB. Another one will not pass the first if. So, we have indirectly checked RGB.\nI don't know if you want another type of check.", "attachment_id": null, "time": "2011-09-19T22:54:14Z", "creator": "alonso12345@hotmail.com", "author": "alonso12345@hotmail.com"}, {"creator": "alonso12345@hotmail.com", "author": "alonso12345@hotmail.com", "count": 10, "is_private": false, "tags": [], "id": 5726772, "bug_id": 685206, "creation_time": "2011-09-20T21:22:44Z", "raw_text": "Rechecked the colorant variable.\nI put it to make sure that all the colorants are present. In the original code when a tag is found it reads the three tags, in the new code it's possible that a malformed profile contains only one or two colorants.", "text": "Rechecked the colorant variable.\nI put it to make sure that all the colorants are present. In the original code when a tag is found it reads the three tags, in the new code it's possible that a malformed profile contains only one or two colorants.", "time": "2011-09-20T21:22:44Z", "attachment_id": null}, {"id": 5740294, "tags": [], "count": 11, "is_private": false, "bug_id": 685206, "raw_text": "Changed spaces to tabs. I tried to follow the stile nit for colorant, but it doesn't compile so I didn't do it. In this patch the colorant initialization is equal as the previous patch.", "creation_time": "2011-09-27T15:46:23Z", "attachment_id": 562777, "time": "2011-09-27T15:46:23Z", "text": "Created attachment 562777\nNo spaces version\n\nChanged spaces to tabs. I tried to follow the stile nit for colorant, but it doesn't compile so I didn't do it. In this patch the colorant initialization is equal as the previous patch.", "author": "alonso12345@hotmail.com", "creator": "alonso12345@hotmail.com"}, {"creator": "b56girard@gmail.com", "author": "b56girard@gmail.com", "text": "Hi JordiM. I sent you an email last week asking if you were available for a short conference call with Jeff and I to discuss how we should handling parsing of the new tags.", "time": "2011-09-27T15:55:58Z", "attachment_id": null, "creation_time": "2011-09-27T15:55:58Z", "raw_text": "Hi JordiM. I sent you an email last week asking if you were available for a short conference call with Jeff and I to discuss how we should handling parsing of the new tags.", "bug_id": 685206, "tags": [], "count": 12, "is_private": false, "id": 5740336}, {"tags": [], "count": 13, "is_private": false, "id": 5740666, "bug_id": 685206, "creation_time": "2011-09-27T17:45:02Z", "raw_text": "Sorry. Email answered.", "creator": "alonso12345@hotmail.com", "text": "Sorry. Email answered.", "author": "alonso12345@hotmail.com", "time": "2011-09-27T17:45:02Z", "attachment_id": null}, {"raw_text": "Hi guys.\nI'm sorry but I think that the best I could do is leave the firefox developing. I thought that I would have enough time to spend but as you can see by the long time without any patch I was wrong.\nI hope that someone will get this patch and that in the future I could contribute more than I had done this time.\n\nRegards,\nJordi.", "creation_time": "2011-11-12T12:24:16Z", "time": "2011-11-12T12:24:16Z", "attachment_id": null, "text": "Hi guys.\nI'm sorry but I think that the best I could do is leave the firefox developing. I thought that I would have enough time to spend but as you can see by the long time without any patch I was wrong.\nI hope that someone will get this patch and that in the future I could contribute more than I had done this time.\n\nRegards,\nJordi.", "id": 5844593, "is_private": false, "count": 14, "tags": [], "bug_id": 685206, "author": "alonso12345@hotmail.com", "creator": "alonso12345@hotmail.com"}]}}}