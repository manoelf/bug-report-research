{"comments": {}, "bugs": {"1631346": {"comments": [{"bug_id": 1631346, "id": 14765845, "attachment_id": null, "creator": "gsvelto@mozilla.com", "tags": [], "author": "gsvelto@mozilla.com", "time": "2020-04-20T07:29:34Z", "creation_time": "2020-04-20T07:29:34Z", "text": "This bug is for crash report bp-ba7fba8d-60db-46d3-be92-44d7e0200419.\n\n```\nTop 10 frames of crashing thread:\n\n0 libxul.so void nsAutoTObserverArray<mozilla::dom::PerformanceObserver*, 0ul>::AppendElementUnlessExists<mozilla::dom::PerformanceObserver*> xpcom/ds/nsTObserverArray.h:199\n1 libxul.so mozilla::dom::PerformanceObserver::Observe dom/performance/PerformanceObserver.cpp:296\n2 libxul.so mozilla::dom::PerformanceObserver_Binding::observe dom/bindings/PerformanceObserverBinding.cpp:255\n3 libxul.so bool mozilla::dom::binding_detail::GenericMethod<mozilla::dom::binding_detail::NormalThisPolicy, mozilla::dom::binding_detail::ThrowExceptions> dom/bindings/BindingUtils.cpp:3205\n4 libxul.so js::InternalCallOrConstruct js/src/vm/Interpreter.cpp:584\n5 libxul.so Interpret js/src/vm/Interpreter.cpp:647\n6 libxul.so js::InternalCallOrConstruct js/src/vm/Interpreter.cpp:619\n7 libxul.so js::fun_call js/src/vm/JSFunction.cpp:1130\n8 libxul.so js::InternalCallOrConstruct js/src/vm/Interpreter.cpp:584\n9 libxul.so Interpret js/src/vm/Interpreter.cpp:647\n\n```\nLooks like this crash has been around since bug 1539006 landed. From the looks of it we're accessing a `NULL` pointer hold by the `mPerformance` field. Not being familiar with this code I don't see how this could happen. Maybe the object was created with a `NULL` element to begin with?", "raw_text": "This bug is for crash report bp-ba7fba8d-60db-46d3-be92-44d7e0200419.\n\n```\nTop 10 frames of crashing thread:\n\n0 libxul.so void nsAutoTObserverArray<mozilla::dom::PerformanceObserver*, 0ul>::AppendElementUnlessExists<mozilla::dom::PerformanceObserver*> xpcom/ds/nsTObserverArray.h:199\n1 libxul.so mozilla::dom::PerformanceObserver::Observe dom/performance/PerformanceObserver.cpp:296\n2 libxul.so mozilla::dom::PerformanceObserver_Binding::observe dom/bindings/PerformanceObserverBinding.cpp:255\n3 libxul.so bool mozilla::dom::binding_detail::GenericMethod<mozilla::dom::binding_detail::NormalThisPolicy, mozilla::dom::binding_detail::ThrowExceptions> dom/bindings/BindingUtils.cpp:3205\n4 libxul.so js::InternalCallOrConstruct js/src/vm/Interpreter.cpp:584\n5 libxul.so Interpret js/src/vm/Interpreter.cpp:647\n6 libxul.so js::InternalCallOrConstruct js/src/vm/Interpreter.cpp:619\n7 libxul.so js::fun_call js/src/vm/JSFunction.cpp:1130\n8 libxul.so js::InternalCallOrConstruct js/src/vm/Interpreter.cpp:584\n9 libxul.so Interpret js/src/vm/Interpreter.cpp:647\n\n```\nLooks like this crash has been around since bug 1539006 landed. From the looks of it we're accessing a `NULL` pointer hold by the `mPerformance` field. Not being familiar with this code I don't see how this could happen. Maybe the object was created with a `NULL` element to begin with?", "is_private": false, "count": 0}, {"id": 14772625, "bug_id": 1631346, "author": "continuation@gmail.com", "tags": [], "creator": "continuation@gmail.com", "attachment_id": null, "is_private": false, "raw_text": "The performance observer object could have been unlinked. Unlinking doesn't clear out the JS to C++ reference. Of course, this indicates a bug in code somewhere because we should not be able to get at JS that holds unlinked C++ objects.", "creation_time": "2020-04-22T20:26:01Z", "time": "2020-04-22T20:26:01Z", "text": "The performance observer object could have been unlinked. Unlinking doesn't clear out the JS to C++ reference. Of course, this indicates a bug in code somewhere because we should not be able to get at JS that holds unlinked C++ objects.", "count": 1}, {"id": 14777023, "bug_id": 1631346, "author": "bas@basschouten.com", "tags": [], "creator": "bas@basschouten.com", "attachment_id": null, "is_private": false, "raw_text": "Sean, the crash rate isn't too hard here but it seems like it would be an easy fix. Would you like to look at this?", "text": "Sean, the crash rate isn't too hard here but it seems like it would be an easy fix. Would you like to look at this?", "time": "2020-04-24T19:01:08Z", "creation_time": "2020-04-24T19:01:08Z", "count": 2}, {"attachment_id": 9150527, "creator": "sefeng@mozilla.com", "tags": [], "author": "sefeng@mozilla.com", "bug_id": 1631346, "id": 14834232, "count": 3, "text": "Created attachment 9150527\nBug 1631346 - Fix a null ptr crash in PerformanceObserver::Observe r=baku", "creation_time": "2020-05-20T18:03:12Z", "time": "2020-05-20T18:03:12Z", "raw_text": "", "is_private": false}, {"id": 14850866, "bug_id": 1631346, "author": "pulsebot@bots.tld", "tags": [], "creator": "pulsebot@bots.tld", "attachment_id": null, "is_private": false, "raw_text": "Pushed by sefeng@mozilla.com:\nhttps://hg.mozilla.org/integration/autoland/rev/186ec6c80cbd\nFix a null ptr crash in PerformanceObserver::Observe r=baku", "time": "2020-05-29T03:44:57Z", "creation_time": "2020-05-29T03:44:57Z", "text": "Pushed by sefeng@mozilla.com:\nhttps://hg.mozilla.org/integration/autoland/rev/186ec6c80cbd\nFix a null ptr crash in PerformanceObserver::Observe r=baku", "count": 4}, {"is_private": false, "raw_text": "https://hg.mozilla.org/mozilla-central/rev/186ec6c80cbd", "creation_time": "2020-05-29T10:05:42Z", "time": "2020-05-29T10:05:42Z", "text": "https://hg.mozilla.org/mozilla-central/rev/186ec6c80cbd", "count": 5, "id": 14851256, "bug_id": 1631346, "author": "rgurzau@mozilla.com", "tags": ["bugherder"], "creator": "rgurzau@mozilla.com", "attachment_id": null}]}}}