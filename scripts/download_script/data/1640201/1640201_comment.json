{"bugs": {"1640201": {"comments": [{"time": "2020-05-22T15:24:32Z", "count": 0, "tags": [], "creator": "chutten@mozilla.com", "creation_time": "2020-05-22T15:24:32Z", "attachment_id": null, "bug_id": 1640201, "id": 14837717, "author": "chutten@mozilla.com", "raw_text": "The [upload mechanism docs](https://mozilla.github.io/glean/book/dev/core/internal/upload.html) are very helpful in understanding the flow up to `get_upload_task` but not so helpful in understanding the expected way language bindings will interact with the task when they have one.\n\nFor instance, TIL that we have a nice abstraction between a Ping Upload Worker and a Ping Uploader where the former takes care of language/platform/OS-specific things that aren't networking and the latter takes care of application-specific networking things.\n\n(So for FOG for example the Upload Worker won't do much to start with (we haven't figured out the Lifecycle Design yet which impacts scheduling, _and_ FOG shares a language with the core so there's no translation) and all the fun will happen (for now) in the Ping Uploader)", "text": "The [upload mechanism docs](https://mozilla.github.io/glean/book/dev/core/internal/upload.html) are very helpful in understanding the flow up to `get_upload_task` but not so helpful in understanding the expected way language bindings will interact with the task when they have one.\n\nFor instance, TIL that we have a nice abstraction between a Ping Upload Worker and a Ping Uploader where the former takes care of language/platform/OS-specific things that aren't networking and the latter takes care of application-specific networking things.\n\n(So for FOG for example the Upload Worker won't do much to start with (we haven't figured out the Lifecycle Design yet which impacts scheduling, _and_ FOG shares a language with the core so there's no translation) and all the fun will happen (for now) in the Ping Uploader)", "is_private": false}, {"creator": "alessio.placitelli@gmail.com", "creation_time": "2020-07-02T10:23:05Z", "time": "2020-07-02T10:23:05Z", "count": 1, "tags": [], "id": 14914242, "author": "alessio.placitelli@gmail.com", "text": "Sorry I got to this late. The [current C# design](https://searchfox.org/glean/source/glean-core/csharp/Glean/Net) reflects how I thought the the net compartment should work like:\n\n* The `PingUploader` interface describes the contract between the `BaseUploader` and the SDK or user-provided uploaders.\n* There is a `BaseUploader` component that is responsible for interfacing with the lower level FFI `get_upload_*` calls and dealing with the logic in a platform-coherent way.\n  * Every Glean instance will always have a single `BaseUploader` instance.\n  * The `BaseUploader` is fed, at Glean initialization, with an instance of an implementation of the `PingUploader` interface.\n  * Whenever `BaseUploader` thinks it should perform an upload, it will call the provided instance of the `PingUploader` interface and call `upload` with the data it's getting from the glean-core/FFI.\n  * Any throttling happens at this layer!\n  * Any logic for cancelling uploads or triggering uploads is provided by this object.\n* The `HttpClientUploader` is the default SDK-provided HTTP uploader. It acts as an adapter between the platform-specific upload library and the Glean upload APIs.\n\nNote that most of the language have now diverged, due to the many iterations that got us here, from this design. For example, in Kotlin, the [`BaseUploader` is mostly empty](https://searchfox.org/glean/source/glean-core/android/src/main/java/mozilla/telemetry/glean/net/BaseUploader.kt) and its functionalities are spread in the [`PingUploadWorker`](https://searchfox.org/glean/source/glean-core/android/src/main/java/mozilla/telemetry/glean/scheduler/PingUploadWorker.kt).", "raw_text": "Sorry I got to this late. The [current C# design](https://searchfox.org/glean/source/glean-core/csharp/Glean/Net) reflects how I thought the the net compartment should work like:\n\n* The `PingUploader` interface describes the contract between the `BaseUploader` and the SDK or user-provided uploaders.\n* There is a `BaseUploader` component that is responsible for interfacing with the lower level FFI `get_upload_*` calls and dealing with the logic in a platform-coherent way.\n  * Every Glean instance will always have a single `BaseUploader` instance.\n  * The `BaseUploader` is fed, at Glean initialization, with an instance of an implementation of the `PingUploader` interface.\n  * Whenever `BaseUploader` thinks it should perform an upload, it will call the provided instance of the `PingUploader` interface and call `upload` with the data it's getting from the glean-core/FFI.\n  * Any throttling happens at this layer!\n  * Any logic for cancelling uploads or triggering uploads is provided by this object.\n* The `HttpClientUploader` is the default SDK-provided HTTP uploader. It acts as an adapter between the platform-specific upload library and the Glean upload APIs.\n\nNote that most of the language have now diverged, due to the many iterations that got us here, from this design. For example, in Kotlin, the [`BaseUploader` is mostly empty](https://searchfox.org/glean/source/glean-core/android/src/main/java/mozilla/telemetry/glean/net/BaseUploader.kt) and its functionalities are spread in the [`PingUploadWorker`](https://searchfox.org/glean/source/glean-core/android/src/main/java/mozilla/telemetry/glean/scheduler/PingUploadWorker.kt).", "is_private": false, "attachment_id": null, "bug_id": 1640201}, {"text": "Hey Bea, does the above make sense to you? Did I capture the current intents of the upload API?", "raw_text": "Hey Bea, does the above make sense to you? Did I capture the current intents of the upload API?", "is_private": false, "author": "alessio.placitelli@gmail.com", "id": 14914252, "bug_id": 1640201, "attachment_id": null, "creator": "alessio.placitelli@gmail.com", "creation_time": "2020-07-02T10:25:34Z", "count": 2, "tags": [], "time": "2020-07-02T10:25:34Z"}, {"bug_id": 1640201, "attachment_id": null, "is_private": false, "text": "Some minor points that stood out to me:\n\n> * Any throttling happens at this layer!\n\nWell, there is throttling in this layer but there is also throttling in the rust core. This layer will do exponential backoff in case we have too many (too many = 3) recoverable errors in a same batch of uploads. But the core will take care of rate limiting to 10 pings uploads per minute. In the future the core will do both.\n\n> * Any logic for cancelling uploads or triggering uploads is provided by this object.\n\nDo we actually have logic to cancel uploads?\n\nOther than that your description looks fine, although it is very specific to the C# bindings. But you pointed that out already.", "raw_text": "Some minor points that stood out to me:\n\n> * Any throttling happens at this layer!\n\nWell, there is throttling in this layer but there is also throttling in the rust core. This layer will do exponential backoff in case we have too many (too many = 3) recoverable errors in a same batch of uploads. But the core will take care of rate limiting to 10 pings uploads per minute. In the future the core will do both.\n\n> * Any logic for cancelling uploads or triggering uploads is provided by this object.\n\nDo we actually have logic to cancel uploads?\n\nOther than that your description looks fine, although it is very specific to the C# bindings. But you pointed that out already.", "id": 14916893, "author": "brizental@mozilla.com", "tags": [], "count": 3, "time": "2020-07-03T13:24:24Z", "creation_time": "2020-07-03T13:24:24Z", "creator": "brizental@mozilla.com"}, {"creation_time": "2020-07-03T13:29:46Z", "creator": "alessio.placitelli@gmail.com", "tags": [], "count": 4, "time": "2020-07-03T13:29:46Z", "is_private": false, "text": "(In reply to Beatriz Rizental from comment #3)\n> Some minor points that stood out to me:\n> \n> > * Any throttling happens at this layer!\n> \n> Well, there is throttling in this layer but there is also throttling in the rust core. This layer will do exponential backoff in case we have too many (too many = 3) recoverable errors in a same batch of uploads. But the core will take care of rate limiting to 10 pings uploads per minute. In the future the core will do both.\n\nThis is assuming that, in the future, the upload API will return an amount of time to wait for the next request. So I'd expect this component to handle the waiting\n\n> > * Any logic for cancelling uploads or triggering uploads is provided by this object.\n> \n> Do we actually have logic to cancel uploads?\n\nYes, we do that, for example,  when disabling telemetry.\n\n> Other than that your description looks fine, although it is very specific to the C# bindings. But you pointed that out already.\n\nYup, other language bindings should match as well, but they'd require some refactoring.", "raw_text": "(In reply to Beatriz Rizental from comment #3)\n> Some minor points that stood out to me:\n> \n> > * Any throttling happens at this layer!\n> \n> Well, there is throttling in this layer but there is also throttling in the rust core. This layer will do exponential backoff in case we have too many (too many = 3) recoverable errors in a same batch of uploads. But the core will take care of rate limiting to 10 pings uploads per minute. In the future the core will do both.\n\nThis is assuming that, in the future, the upload API will return an amount of time to wait for the next request. So I'd expect this component to handle the waiting\n\n> > * Any logic for cancelling uploads or triggering uploads is provided by this object.\n> \n> Do we actually have logic to cancel uploads?\n\nYes, we do that, for example,  when disabling telemetry.\n\n> Other than that your description looks fine, although it is very specific to the C# bindings. But you pointed that out already.\n\nYup, other language bindings should match as well, but they'd require some refactoring.", "author": "alessio.placitelli@gmail.com", "id": 14916899, "bug_id": 1640201, "attachment_id": null}, {"creator": "alessio.placitelli@gmail.com", "creation_time": "2020-07-08T11:16:28Z", "count": 5, "tags": [], "time": "2020-07-08T11:16:28Z", "raw_text": "Hey Chris, Jan-Erik are the above comments enough or should I write a separate mini proposal?", "text": "Hey Chris, Jan-Erik are the above comments enough or should I write a separate mini proposal?", "is_private": false, "author": "alessio.placitelli@gmail.com", "id": 14924975, "bug_id": 1640201, "attachment_id": null}, {"is_private": false, "raw_text": "So long as there's a pretty diagram I think I'll be happy : )\n\n(( though I think I would like to bikeshed some clever names for these components at a later date ))", "text": "So long as there's a pretty diagram I think I'll be happy : )\n\n(( though I think I would like to bikeshed some clever names for these components at a later date ))", "id": 14925114, "author": "chutten@mozilla.com", "bug_id": 1640201, "attachment_id": null, "creation_time": "2020-07-08T12:33:45Z", "creator": "chutten@mozilla.com", "tags": [], "count": 6, "time": "2020-07-08T12:33:45Z"}, {"bug_id": 1640201, "attachment_id": null, "raw_text": "> The PingUploader interface describes the contract between the BaseUploader and the SDK or user-provided uploaders.\n\nDo we allow to switch out the uploader for anything but Android?\n\n> (( though I think I would like to bikeshed some clever names for these components at a later date ))\n\nYes please.\n\n---\n\nDon't need a mini proposal either, but we should put these details in some more permanent documentation.\nThen we can expand on them or unify it across implementations accordingly.", "text": "> The PingUploader interface describes the contract between the BaseUploader and the SDK or user-provided uploaders.\n\nDo we allow to switch out the uploader for anything but Android?\n\n> (( though I think I would like to bikeshed some clever names for these components at a later date ))\n\nYes please.\n\n---\n\nDon't need a mini proposal either, but we should put these details in some more permanent documentation.\nThen we can expand on them or unify it across implementations accordingly.", "is_private": false, "author": "jrediger@mozilla.com", "id": 14925383, "count": 7, "tags": [], "time": "2020-07-08T14:46:55Z", "creator": "jrediger@mozilla.com", "creation_time": "2020-07-08T14:46:55Z"}, {"creation_time": "2020-07-13T09:18:14Z", "creator": "pulgasaur@mozilla.bugs", "tags": [], "count": 8, "time": "2020-07-13T09:18:14Z", "is_private": false, "raw_text": "", "text": "Created attachment 9163152\nLink to GitHub pull-request: https://github.com/mozilla/glean/pull/1056", "id": 14933892, "author": "pulgasaur@mozilla.bugs", "bug_id": 1640201, "attachment_id": 9163152}]}}, "comments": {}}