{"comments": {}, "bugs": {"682954": {"comments": [{"attachment_id": null, "tags": [], "creator": "msamuel@mozilla.com", "creation_time": "2011-08-29T20:29:51Z", "is_private": false, "raw_text": "", "time": "2011-08-29T20:29:51Z", "author": "msamuel@mozilla.com", "count": 0, "text": "", "bug_id": 682954, "id": 5685923}, {"author": "msamuel@mozilla.com", "text": "Created attachment 558429\nWIP - Error Handler drives the UI\n\nNote: this patch is pretty rough. There is a lot of room for improvement and some things may not appear sane at the moment (aside from a severe lack of tests). However it gives a good idea of the direction I'd like to go.", "count": 1, "bug_id": 682954, "id": 5701586, "raw_text": "Note: this patch is pretty rough. There is a lot of room for improvement and some things may not appear sane at the moment (aside from a severe lack of tests). However it gives a good idea of the direction I'd like to go.", "time": "2011-09-06T09:27:03Z", "creator": "msamuel@mozilla.com", "is_private": false, "creation_time": "2011-09-06T09:27:03Z", "attachment_id": 558429, "tags": []}, {"tags": [], "attachment_id": 558429, "raw_text": "Very, very nice.\n\n>+    switch (notificationDetails.errorCode) {\n>+      case Weave.LOGIN_ERROR:\n>+        buttonFunction = function() { gSyncUI.openPrefs(); return true; };\n>+        break;\n>+      case Weave.SYNC_UPDATE_NEEDED:\n>+        buttonFunction = \n>+          function() { window.openUILinkIn(\"https://services.mozilla.com/update/\", \"tab\"); return true; };\n>+        break;\n>+      case Weave.APPROACHING_QUOTA:\n>+        buttonFunction = function() { gSyncUI.openQuotaDialog(); return true; };\n>+        break;\n>+      case Weave.SERVER_BACKOFF:\n>+        buttonFunction = function() { gSyncUI.openServerStatus(); return true; };\n>+        break;\n>+      case Weave.SYNC_ERROR:\n>+        buttonFunction = function() { gSyncUI.doSync(); return true; };\n>+        break;\n>+      case Weave.QUOTA_NOTICE:\n>+        buttonFunction = function() { gSyncUI.openQuotaDialog(); return true; };\n>+        break;\n>+      case Weave.DELAYED_SYNC:\n>+        buttonFunction = function() { gSyncUI.openServerStatus(); return true; };\n>+        break;\n\nThis can be written more elegantly:\n\n  let buttonDispatch = {};\n  buttonDispatch[Weave.LOGIN_ERROR] = function () { gSyncUI.openPrefs(); return true; };\n  buttonDispatch[Weave.APPROACHING_QUOTA] = function () { gSyncUI.openQuotaDialog(); return true; };\n  ...\n\nand then do:\n\n  let buttonFunc = buttonDispatch[notificationDetails.errorCode];\n\nYou probably also want to make sure that we actually found a function for the given error code, so you could do something like this, because showing no button at all rather than one that doesn't work is probably better:\n\n  if (typeof buttonFunc == \"function\") {\n    buttons.push(...);\n  }\n\n>       case \"weave:ui:login:error\":\n>-        this.onLoginError();\n>+        // if we haven't set up the client, don't show errors\n>+        if (this._needsSetup()) {\n>+          return;\n>+        }\n>+        // fall through\n>+      case \"weave:ui:sync:error\":\n>+      case \"weave:ui:sync:delayed\":\n>+      case \"weave:ui:quota:remaining\":\n>+        this.showError(subject);\n>         break;\n\nDo we still need different notification topics here? Wouldn't one suffice? (The _needsSetup() check won't hurt for any of the other\n\n>   checkServerError: function checkServerError(resp) {\n>     switch (resp.status) {\n>       case 400:\n>         if (resp == RESPONSE_OVER_QUOTA) {\n>           Status.sync = OVER_QUOTA;\n>+        } else if (Weave.Service.isLoggedIn) {\n>+          Status.sync = BAD_SERVER_REQUEST;\n>+        } else {\n>+          Status.login = BAD_SERVER_REQUEST;\n>         }\n>         break;\n...\n>+BAD_SERVER_REQUEST:                    \"error.sync.reason.bad_server_request\",\n...\n>+error.sync.reason.bad_server_request = HTTP Error 400 - Bad Server Request\n\nThis is not a very useful message to show users. An HTTP 400 status code is basically just an indication for the client to look for the actual error code in the HTTP body, which can be one of these: http://docs.services.mozilla.com/respcodes.html. None of them are meaningful to users apart from the over quota bit. All the other ones basically mean that either the client or the server messed up, so \"a technical error occurred\" is a perfectly valid description. ;) We should probably log the response body, though!\n\n>diff --git a/services/sync/locales/en-US/sync.properties b/services/sync/locales/en-US/sync.properties\n>--- a/services/sync/locales/en-US/sync.properties\n>+++ b/services/sync/locales/en-US/sync.properties\n>@@ -1,32 +1,33 @@\n> # %1: the user name (Ed), %2: the app name (Firefox), %3: the operating system (Android)\n> client.name2 = %1$S's %2$S on %3$S\n> \n> # %S is the date and time at which the last sync successfully completed\n> lastSync2.label = Last sync: %S\n> \n> mobile.label = Mobile Bookmarks\n> \n>-remote.pending.label = Remote tabs are being synced\u00e2\u0080\u00a6\n>+remote.pending.label = Remote tabs are being synced\n...\n>-error.login.prefs.label = Preferences\u00e2\u0080\u00a6\n>+error.login.prefs.label = Preferences\n\nPlease don't change these strings.\n\n>+error.sync.backoff = The Sync server has encountered an error, but you don't need to do anything about it. We'll resume syncing your data in a bit.\n\nHow about \"The Sync server is experiencing problems. Syncing will resume automatically.\" It's a bit shorter :) This will only show if you're explicitly clicking \"Sync Now\", right?\n\n>+// UI Error Codes\n>+LOGIN_ERROR:                           0,\n>+SYNC_ERROR:                            1,\n>+SYNC_UPDATE_NEEDED:                    2,\n>+APPROACHING_QUOTA:                     3,\n>+SERVER_BACKOFF:                        4,\n>+QUOTA_NOTICE:                          5,\n>+DELAYED_SYNC:                          6,\n\nCan we use strings here? For a lot of these we already have constants, right? Like LOGIN_FAILED, SYNC-FAILED, etc.\n\n>+  onQuotaNotice: function onQuotaNotice(subject, data) {\n>+    let title = Utils.toStr(\"warning.sync.quota.label\");\n>+    let description = Utils.toStr(\"warning.sync.quota.description\");\n>+\n>+    let notificationDetails = {\n>+      notification: \n>+        new Weave.Notification(title, description, null,\n>+                         Weave.Notifications.PRIORITY_WARNING),\n>+      buttonStrings: \n>+        [Utils.toStr(\"error.sync.viewQuotaButton.label\"),\n>+        Utils.toStr(\"error.sync.viewQuotaButton.accesskey\")],\n>+\n>+      errorCode: QUOTA_NOTICE\n>+    };\n>+\n>+    Svc.Obs.notify(\"weave:ui:quota:remaining\", notificationDetails);    \n>+  },\n\nLook at this as an example for all the other \"onFoobar\" methods, I think we probably want to fix Weave.Notification a bit. I think the translation shouldn't happen here but in there, and the button stuff should probably be contained in there, too. Essentially, you'd create a Notification object based on the error code and a bunch of strings and then would hand that off to the UI. I think that'd be a lot cleaner.\n\nSkipping the tests for now... gotta run.", "time": "2011-09-09T23:27:24Z", "is_private": false, "creation_time": "2011-09-09T23:27:24Z", "id": 5711894, "bug_id": 682954, "author": "philipp@weitershausen.de", "count": 2, "text": "Comment on attachment 558429\nWIP - Error Handler drives the UI\n\nVery, very nice.\n\n>+    switch (notificationDetails.errorCode) {\n>+      case Weave.LOGIN_ERROR:\n>+        buttonFunction = function() { gSyncUI.openPrefs(); return true; };\n>+        break;\n>+      case Weave.SYNC_UPDATE_NEEDED:\n>+        buttonFunction = \n>+          function() { window.openUILinkIn(\"https://services.mozilla.com/update/\", \"tab\"); return true; };\n>+        break;\n>+      case Weave.APPROACHING_QUOTA:\n>+        buttonFunction = function() { gSyncUI.openQuotaDialog(); return true; };\n>+        break;\n>+      case Weave.SERVER_BACKOFF:\n>+        buttonFunction = function() { gSyncUI.openServerStatus(); return true; };\n>+        break;\n>+      case Weave.SYNC_ERROR:\n>+        buttonFunction = function() { gSyncUI.doSync(); return true; };\n>+        break;\n>+      case Weave.QUOTA_NOTICE:\n>+        buttonFunction = function() { gSyncUI.openQuotaDialog(); return true; };\n>+        break;\n>+      case Weave.DELAYED_SYNC:\n>+        buttonFunction = function() { gSyncUI.openServerStatus(); return true; };\n>+        break;\n\nThis can be written more elegantly:\n\n  let buttonDispatch = {};\n  buttonDispatch[Weave.LOGIN_ERROR] = function () { gSyncUI.openPrefs(); return true; };\n  buttonDispatch[Weave.APPROACHING_QUOTA] = function () { gSyncUI.openQuotaDialog(); return true; };\n  ...\n\nand then do:\n\n  let buttonFunc = buttonDispatch[notificationDetails.errorCode];\n\nYou probably also want to make sure that we actually found a function for the given error code, so you could do something like this, because showing no button at all rather than one that doesn't work is probably better:\n\n  if (typeof buttonFunc == \"function\") {\n    buttons.push(...);\n  }\n\n>       case \"weave:ui:login:error\":\n>-        this.onLoginError();\n>+        // if we haven't set up the client, don't show errors\n>+        if (this._needsSetup()) {\n>+          return;\n>+        }\n>+        // fall through\n>+      case \"weave:ui:sync:error\":\n>+      case \"weave:ui:sync:delayed\":\n>+      case \"weave:ui:quota:remaining\":\n>+        this.showError(subject);\n>         break;\n\nDo we still need different notification topics here? Wouldn't one suffice? (The _needsSetup() check won't hurt for any of the other\n\n>   checkServerError: function checkServerError(resp) {\n>     switch (resp.status) {\n>       case 400:\n>         if (resp == RESPONSE_OVER_QUOTA) {\n>           Status.sync = OVER_QUOTA;\n>+        } else if (Weave.Service.isLoggedIn) {\n>+          Status.sync = BAD_SERVER_REQUEST;\n>+        } else {\n>+          Status.login = BAD_SERVER_REQUEST;\n>         }\n>         break;\n...\n>+BAD_SERVER_REQUEST:                    \"error.sync.reason.bad_server_request\",\n...\n>+error.sync.reason.bad_server_request = HTTP Error 400 - Bad Server Request\n\nThis is not a very useful message to show users. An HTTP 400 status code is basically just an indication for the client to look for the actual error code in the HTTP body, which can be one of these: http://docs.services.mozilla.com/respcodes.html. None of them are meaningful to users apart from the over quota bit. All the other ones basically mean that either the client or the server messed up, so \"a technical error occurred\" is a perfectly valid description. ;) We should probably log the response body, though!\n\n>diff --git a/services/sync/locales/en-US/sync.properties b/services/sync/locales/en-US/sync.properties\n>--- a/services/sync/locales/en-US/sync.properties\n>+++ b/services/sync/locales/en-US/sync.properties\n>@@ -1,32 +1,33 @@\n> # %1: the user name (Ed), %2: the app name (Firefox), %3: the operating system (Android)\n> client.name2 = %1$S's %2$S on %3$S\n> \n> # %S is the date and time at which the last sync successfully completed\n> lastSync2.label = Last sync: %S\n> \n> mobile.label = Mobile Bookmarks\n> \n>-remote.pending.label = Remote tabs are being synced\u00e2\u0080\u00a6\n>+remote.pending.label = Remote tabs are being synced\n...\n>-error.login.prefs.label = Preferences\u00e2\u0080\u00a6\n>+error.login.prefs.label = Preferences\n\nPlease don't change these strings.\n\n>+error.sync.backoff = The Sync server has encountered an error, but you don't need to do anything about it. We'll resume syncing your data in a bit.\n\nHow about \"The Sync server is experiencing problems. Syncing will resume automatically.\" It's a bit shorter :) This will only show if you're explicitly clicking \"Sync Now\", right?\n\n>+// UI Error Codes\n>+LOGIN_ERROR:                           0,\n>+SYNC_ERROR:                            1,\n>+SYNC_UPDATE_NEEDED:                    2,\n>+APPROACHING_QUOTA:                     3,\n>+SERVER_BACKOFF:                        4,\n>+QUOTA_NOTICE:                          5,\n>+DELAYED_SYNC:                          6,\n\nCan we use strings here? For a lot of these we already have constants, right? Like LOGIN_FAILED, SYNC-FAILED, etc.\n\n>+  onQuotaNotice: function onQuotaNotice(subject, data) {\n>+    let title = Utils.toStr(\"warning.sync.quota.label\");\n>+    let description = Utils.toStr(\"warning.sync.quota.description\");\n>+\n>+    let notificationDetails = {\n>+      notification: \n>+        new Weave.Notification(title, description, null,\n>+                         Weave.Notifications.PRIORITY_WARNING),\n>+      buttonStrings: \n>+        [Utils.toStr(\"error.sync.viewQuotaButton.label\"),\n>+        Utils.toStr(\"error.sync.viewQuotaButton.accesskey\")],\n>+\n>+      errorCode: QUOTA_NOTICE\n>+    };\n>+\n>+    Svc.Obs.notify(\"weave:ui:quota:remaining\", notificationDetails);    \n>+  },\n\nLook at this as an example for all the other \"onFoobar\" methods, I think we probably want to fix Weave.Notification a bit. I think the translation shouldn't happen here but in there, and the button stuff should probably be contained in there, too. Essentially, you'd create a Notification object based on the error code and a bunch of strings and then would hand that off to the UI. I think that'd be a lot cleaner.\n\nSkipping the tests for now... gotta run.", "creator": "philipp@weitershausen.de"}, {"tags": [], "time": "2011-10-12T15:19:06Z", "attachment_id": null, "raw_text": "", "id": 5777491, "bug_id": 682954, "is_private": false, "creation_time": "2011-10-12T15:19:06Z", "creator": "philipp@weitershausen.de", "author": "philipp@weitershausen.de", "text": "*** Bug 575780 has been marked as a duplicate of this bug. ***", "count": 3}]}}}