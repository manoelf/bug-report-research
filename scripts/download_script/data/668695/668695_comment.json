{"comments": {}, "bugs": {"668695": {"comments": [{"creator": "continuation@gmail.com", "creation_time": "2011-07-01T01:15:00Z", "time": "2011-07-01T01:15:00Z", "author": "continuation@gmail.com", "is_private": false, "count": 0, "id": 5568701, "bug_id": 668695, "text": "+++ This bug was initially created as a clone of Bug #649532 +++\n\nPython scripts to analyze the new cycle collector logs.\n\n- parsing library\n- root finding\n- cycle collector checker\n\nI'm making a separate bug for the scripts themselves.", "tags": [], "attachment_id": null, "raw_text": "+++ This bug was initially created as a clone of Bug #649532 +++\n\nPython scripts to analyze the new cycle collector logs.\n\n- parsing library\n- root finding\n- cycle collector checker\n\nI'm making a separate bug for the scripts themselves."}, {"count": 1, "id": 5570657, "is_private": false, "time": "2011-07-02T00:18:28Z", "creation_time": "2011-07-02T00:18:28Z", "creator": "continuation@gmail.com", "author": "continuation@gmail.com", "attachment_id": 543545, "raw_text": "Here are the scripts.  parse_cc_graph.py is a library that is a common log parser.  Unfortunately, parsing files is a bit slower than I'd like. It takes about 6 seconds to parse a 40 meg log file.  Well, I don't know if that is good or bad.\n\nUnlike peter's original scripts, I don't have a preprocessing step in the root finder to the reverse the graph, because reversing the graph doesn't seem to take that long compared to parsing it in.  I could also add a script that reverses the graph, as that could be useful for manual exploration of the graph.", "text": "Created attachment 543545\nPython scripts for CC logs: root finding, checking CC results\n\nHere are the scripts.  parse_cc_graph.py is a library that is a common log parser.  Unfortunately, parsing files is a bit slower than I'd like. It takes about 6 seconds to parse a 40 meg log file.  Well, I don't know if that is good or bad.\n\nUnlike peter's original scripts, I don't have a preprocessing step in the root finder to the reverse the graph, because reversing the graph doesn't seem to take that long compared to parsing it in.  I could also add a script that reverses the graph, as that could be useful for manual exploration of the graph.", "bug_id": 668695, "tags": []}, {"id": 5684744, "count": 2, "is_private": false, "author": "peterv@propagandism.org", "time": "2011-08-29T13:54:32Z", "creation_time": "2011-08-29T13:54:32Z", "creator": "peterv@propagandism.org", "raw_text": "argparse seems to require Python 2.7, could we use optparse for now (even though it's deprecated)?\n\nFor the root finding script I think it's helpful to know how many missing edges there are for a \"root\", my script printed that out. When looking at a refcount tree you actually know how many missing refs you're looking for. It's very rare but I've had cases where the refcount of a root decreased between the final CC and shutdown, so in that case I knew that the refcount tree wasn't showing the exact state from when the final CC happened.\n\nVery minor, but I get distracted by edges that don't have a description, because they look different:\n\n    --[xpc_GetJSPrivate(obj)]-> 0x1269b5070 [XPCWrappedNative (XULDocument)]\n    --[mIdentity]-> 0x1009dda00 [nsDocument (XUL) places.xul]\n    --[mCommandDispatcher]-> 0x12699fb60 [nsXULCommandDispatcher]\n    ---> 0x1269e0190 [nsGenericElement (XUL) commandset]\n    --[GetParent()]-> 0x1269cdba0 [nsGenericElement (XUL) commandset]\n    --[GetParent()]-> 0x11d0e36d0 [nsGenericElement (XUL) commandset]\n    --[GetParent()]-> 0x11d0cc200 [nsGenericElement (XUL) window]\n\nI'd leave the (empty) square brackets in that case.\n\nSpeed of at least the root finder seemed ok to me.", "attachment_id": null, "bug_id": 668695, "text": "argparse seems to require Python 2.7, could we use optparse for now (even though it's deprecated)?\n\nFor the root finding script I think it's helpful to know how many missing edges there are for a \"root\", my script printed that out. When looking at a refcount tree you actually know how many missing refs you're looking for. It's very rare but I've had cases where the refcount of a root decreased between the final CC and shutdown, so in that case I knew that the refcount tree wasn't showing the exact state from when the final CC happened.\n\nVery minor, but I get distracted by edges that don't have a description, because they look different:\n\n    --[xpc_GetJSPrivate(obj)]-> 0x1269b5070 [XPCWrappedNative (XULDocument)]\n    --[mIdentity]-> 0x1009dda00 [nsDocument (XUL) places.xul]\n    --[mCommandDispatcher]-> 0x12699fb60 [nsXULCommandDispatcher]\n    ---> 0x1269e0190 [nsGenericElement (XUL) commandset]\n    --[GetParent()]-> 0x1269cdba0 [nsGenericElement (XUL) commandset]\n    --[GetParent()]-> 0x11d0e36d0 [nsGenericElement (XUL) commandset]\n    --[GetParent()]-> 0x11d0cc200 [nsGenericElement (XUL) window]\n\nI'd leave the (empty) square brackets in that case.\n\nSpeed of at least the root finder seemed ok to me.", "tags": []}, {"id": 5684767, "count": 3, "is_private": false, "time": "2011-08-29T14:05:28Z", "creation_time": "2011-08-29T14:05:28Z", "creator": "continuation@gmail.com", "author": "continuation@gmail.com", "attachment_id": null, "raw_text": "(In reply to Peter Van der Beken [:peterv] from comment #2)\n> argparse seems to require Python 2.7, could we use optparse for now (even\n> though it's deprecated)?\n\nSure.  I'm not really a Python expert, so I just went with whatever Google turned up.\n\n> For the root finding script I think it's helpful to know how many missing\n> edges there are for a \"root\", my script printed that out. When looking at a\n> refcount tree you actually know how many missing refs you're looking for.\n> It's very rare but I've had cases where the refcount of a root decreased\n> between the final CC and shutdown, so in that case I knew that the refcount\n> tree wasn't showing the exact state from when the final CC happened.\n\nOh, good point.  I didn't realize I'd missed that.\n\n> Very minor, but I get distracted by edges that don't have a description,\n> because they look different:\n\n> I'd leave the (empty) square brackets in that case.\n\nI'll fix that.\n \n> Speed of at least the root finder seemed ok to me.\n\nOkay, that's good.  I did some profiling and found that about half the time of the script was spent storing the edge names, which was a bit sad.\n\nI have some slightly newer versions of these scripts at https://github.com/amccreight/heapgraph/tree/master/cc but I don't think I changed anything substantial in there.  They could actually be the same.  Or slightly older, come to think of it... I'll compare and post here if there are any newer changes there.", "tags": [], "text": "(In reply to Peter Van der Beken [:peterv] from comment #2)\n> argparse seems to require Python 2.7, could we use optparse for now (even\n> though it's deprecated)?\n\nSure.  I'm not really a Python expert, so I just went with whatever Google turned up.\n\n> For the root finding script I think it's helpful to know how many missing\n> edges there are for a \"root\", my script printed that out. When looking at a\n> refcount tree you actually know how many missing refs you're looking for.\n> It's very rare but I've had cases where the refcount of a root decreased\n> between the final CC and shutdown, so in that case I knew that the refcount\n> tree wasn't showing the exact state from when the final CC happened.\n\nOh, good point.  I didn't realize I'd missed that.\n\n> Very minor, but I get distracted by edges that don't have a description,\n> because they look different:\n\n> I'd leave the (empty) square brackets in that case.\n\nI'll fix that.\n \n> Speed of at least the root finder seemed ok to me.\n\nOkay, that's good.  I did some profiling and found that about half the time of the script was spent storing the edge names, which was a bit sad.\n\nI have some slightly newer versions of these scripts at https://github.com/amccreight/heapgraph/tree/master/cc but I don't think I changed anything substantial in there.  They could actually be the same.  Or slightly older, come to think of it... I'll compare and post here if there are any newer changes there.", "bug_id": 668695}, {"bug_id": 668695, "text": "I added support for unknown edges so it looks like the following:\n\n0x14707e6d0 [nsGenericElement (xhtml) ul]\n    --[mAttrsAndChildren[i]]-> 0x146daeba0 [nsGenericDOMDataNode]\n\n    Root 0x14707e6d0 is a ref counted object with 1 unknown edge(s).\n    known edges:\n       0x14707eb50 [nsGenericElement (xhtml) li] --[GetParent()]-> 0x14707e6d0\n       0x146daefb0 [nsGenericElement (xhtml) li] --[GetParent()]-> 0x14707e6d0\n\nI also changed empty edges to be displayed with the brackets, and likewise with nodes.  Before my fix nodes with empty names would make the script throw an exception.  Oops!\n\nStill need to change to the old system of arguments.", "tags": [], "attachment_id": null, "raw_text": "I added support for unknown edges so it looks like the following:\n\n0x14707e6d0 [nsGenericElement (xhtml) ul]\n    --[mAttrsAndChildren[i]]-> 0x146daeba0 [nsGenericDOMDataNode]\n\n    Root 0x14707e6d0 is a ref counted object with 1 unknown edge(s).\n    known edges:\n       0x14707eb50 [nsGenericElement (xhtml) li] --[GetParent()]-> 0x14707e6d0\n       0x146daefb0 [nsGenericElement (xhtml) li] --[GetParent()]-> 0x14707e6d0\n\nI also changed empty edges to be displayed with the brackets, and likewise with nodes.  Before my fix nodes with empty names would make the script throw an exception.  Oops!\n\nStill need to change to the old system of arguments.", "creation_time": "2011-08-29T22:24:33Z", "time": "2011-08-29T22:24:33Z", "creator": "continuation@gmail.com", "author": "continuation@gmail.com", "id": 5686292, "count": 4, "is_private": false}, {"attachment_id": 556880, "raw_text": "In addition to the changes in Comment #4, I changed both scripts to use optparse, and updated the comments in the CC checker a little.  I also synced this up to github.  Probably easier to read these scripts there: https://github.com/amccreight/heapgraph/tree/master/cc", "tags": [], "bug_id": 668695, "text": "Created attachment 556880\nPython scripts for CC logs: root finding, checking CC results\n\nIn addition to the changes in Comment #4, I changed both scripts to use optparse, and updated the comments in the CC checker a little.  I also synced this up to github.  Probably easier to read these scripts there: https://github.com/amccreight/heapgraph/tree/master/cc", "id": 5687974, "count": 5, "is_private": false, "time": "2011-08-30T16:32:02Z", "creation_time": "2011-08-30T16:32:02Z", "creator": "continuation@gmail.com", "author": "continuation@gmail.com"}, {"creator": "continuation@gmail.com", "creation_time": "2011-08-30T16:33:48Z", "time": "2011-08-30T16:33:48Z", "author": "continuation@gmail.com", "is_private": false, "id": 5687980, "count": 6, "tags": [], "text": "I was also wondering if maybe having a reference to the github repo might be useful, for the latest version.  My plan is to tag whatever versions get committed to m-c.", "bug_id": 668695, "attachment_id": null, "raw_text": "I was also wondering if maybe having a reference to the github repo might be useful, for the latest version.  My plan is to tag whatever versions get committed to m-c."}, {"count": 7, "id": 5729628, "is_private": false, "creation_time": "2011-09-21T23:21:12Z", "time": "2011-09-21T23:21:12Z", "creator": "continuation@gmail.com", "author": "continuation@gmail.com", "attachment_id": null, "raw_text": "One of the nice things about having a log parsing library is that it is easy to write new scripts.  It only took me a few minutes to whip up this little script to analyze the classes of garbage objects:\n\nhttps://github.com/amccreight/heapgraph/blob/master/cc/garbage_census.py\n\nI did this for bug 682219, where there's some kind of leak with a weird setting, and the CC isn't collecting anything, but if you do a CC log dump (which does a WANT_ALL_TRACES) suddenly the CC finds things!  It is a little unsettling.  Anyways, with this script I was able to see that there's a ton of XUL stuff that is collected.  I don't know if it is actually useful.", "tags": [], "text": "One of the nice things about having a log parsing library is that it is easy to write new scripts.  It only took me a few minutes to whip up this little script to analyze the classes of garbage objects:\n\nhttps://github.com/amccreight/heapgraph/blob/master/cc/garbage_census.py\n\nI did this for bug 682219, where there's some kind of leak with a weird setting, and the CC isn't collecting anything, but if you do a CC log dump (which does a WANT_ALL_TRACES) suddenly the CC finds things!  It is a little unsettling.  Anyways, with this script I was able to see that there's a ton of XUL stuff that is collected.  I don't know if it is actually useful.", "bug_id": 668695}]}}}