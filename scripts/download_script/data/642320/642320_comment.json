{"comments": {}, "bugs": {"642320": {"comments": [{"bug_id": 642320, "tags": [], "count": 0, "time": "2011-03-16T23:51:57Z", "creator": "sphink@gmail.com", "text": "At least for methodjitted code, we should emit call frame unwinding and debug info and use gdb's JIT registration API to load it in.\n\nThis is one of a family of related bugs dealing with JIT code reporting. It started as bug 599499, but I want a general JIT code registration API that has multiple separately enabled backends: gdb, breakpad, whatever Windows uses, valgrind, oprofile, etc.\n\nBut this bug is for gdb support specifically.", "creation_time": "2011-03-16T23:51:57Z", "is_private": false, "raw_text": "At least for methodjitted code, we should emit call frame unwinding and debug info and use gdb's JIT registration API to load it in.\n\nThis is one of a family of related bugs dealing with JIT code reporting. It started as bug 599499, but I want a general JIT code registration API that has multiple separately enabled backends: gdb, breakpad, whatever Windows uses, valgrind, oprofile, etc.\n\nBut this bug is for gdb support specifically.", "id": 5349864, "author": "sphink@gmail.com", "attachment_id": null}, {"attachment_id": null, "is_private": false, "time": "2011-03-16T23:54:23Z", "author": "sphink@gmail.com", "creation_time": "2011-03-16T23:54:23Z", "text": "I have a proof of concept working. It only handles x86_64, it can only do a single function, and due to a libdwarf bug the line number information isn't quite right so the 'next' command in gdb isn't working. But it's a start. It's nice to finally see a backtrace through a JITted function.", "id": 5349874, "raw_text": "I have a proof of concept working. It only handles x86_64, it can only do a single function, and due to a libdwarf bug the line number information isn't quite right so the 'next' command in gdb isn't working. But it's a start. It's nice to finally see a backtrace through a JITted function.", "creator": "sphink@gmail.com", "count": 1, "tags": [], "bug_id": 642320}, {"author": "benjamin@smedbergs.us", "raw_text": "JIT code on x86 always has a frame pointer, right? Is that also true of x86-64? This is mainly about getting better information from a debugging session in a DEBUG build?", "id": 5350858, "text": "JIT code on x86 always has a frame pointer, right? Is that also true of x86-64? This is mainly about getting better information from a debugging session in a DEBUG build?", "creation_time": "2011-03-17T16:06:12Z", "bug_id": 642320, "tags": [], "count": 2, "creator": "benjamin@smedbergs.us", "attachment_id": null, "is_private": false, "time": "2011-03-17T16:06:12Z"}, {"count": 3, "tags": [], "creator": "sphink@gmail.com", "bug_id": 642320, "creation_time": "2011-03-17T17:17:53Z", "text": "(In reply to comment #2)\n> JIT code on x86 always has a frame pointer, right? Is that also true of x86-64?\n> This is mainly about getting better information from a debugging session in a\n> DEBUG build?\n\nYes, both x86 and x86_64 preserve the frame pointer. Unfortunately, on x86_64 it doesn't do any good -- you can't get a backtrace with a JITted method on the stack, apparently because the x86_64 ABI says that you can't depend on having the frame pointer and so must use unwind info for this instead. I don't understand why gdb can't detect that no unwind information is available and fall back to using the frame pointer (before giving up entirely), and I suspect there's a worthwhile patch to gdb to fix that. jimb might know more.\n\nThe unwind info can either be stored in a .eh_frame section or a .debug_frame section. The two are almost identical in format, with just enough of a difference that you can't rename one to the other. The big difference is that .eh_frame is marked ALLOC, so it is part of the runtime image. (It's _e_xception _h_andler frame info.) In the JITted case, gdb is loading the symbol file, so the ALLOC bit is irrelevant.\n\nSo at least for now, this is mainly about getting better information from a debugging session, yes. As for DEBUG, I'm hoping we don't have to restrict it to that. I'd like opt builds to have a runtime option to turn it on. (Where \"it\" probably means more than just gdb-usable stuff. Breakpad, maybe.)\n\nIt'd be kind of funny getting better symbol info for JIT code than for the rest, but so be it...\n\nOh, and this'll give more than stack unwinding if you ask for it. I'm also generating line number -> PC mapping info, so you can step through Javascript code (which'll need to be written to disk for gdb to find it, unfortunately.) I'd like to expose more, but that's for later.", "id": 5351023, "raw_text": "(In reply to comment #2)\n> JIT code on x86 always has a frame pointer, right? Is that also true of x86-64?\n> This is mainly about getting better information from a debugging session in a\n> DEBUG build?\n\nYes, both x86 and x86_64 preserve the frame pointer. Unfortunately, on x86_64 it doesn't do any good -- you can't get a backtrace with a JITted method on the stack, apparently because the x86_64 ABI says that you can't depend on having the frame pointer and so must use unwind info for this instead. I don't understand why gdb can't detect that no unwind information is available and fall back to using the frame pointer (before giving up entirely), and I suspect there's a worthwhile patch to gdb to fix that. jimb might know more.\n\nThe unwind info can either be stored in a .eh_frame section or a .debug_frame section. The two are almost identical in format, with just enough of a difference that you can't rename one to the other. The big difference is that .eh_frame is marked ALLOC, so it is part of the runtime image. (It's _e_xception _h_andler frame info.) In the JITted case, gdb is loading the symbol file, so the ALLOC bit is irrelevant.\n\nSo at least for now, this is mainly about getting better information from a debugging session, yes. As for DEBUG, I'm hoping we don't have to restrict it to that. I'd like opt builds to have a runtime option to turn it on. (Where \"it\" probably means more than just gdb-usable stuff. Breakpad, maybe.)\n\nIt'd be kind of funny getting better symbol info for JIT code than for the rest, but so be it...\n\nOh, and this'll give more than stack unwinding if you ask for it. I'm also generating line number -> PC mapping info, so you can step through Javascript code (which'll need to be written to disk for gdb to find it, unfortunately.) I'd like to expose more, but that's for later.", "author": "sphink@gmail.com", "time": "2011-03-17T17:17:53Z", "is_private": false, "attachment_id": null}, {"author": "jimb@mozilla.com", "attachment_id": null, "bug_id": 642320, "time": "2011-03-17T17:52:11Z", "creator": "jimb@mozilla.com", "count": 4, "tags": [], "text": "(In reply to comment #2)\n> JIT code on x86 always has a frame pointer, right? Is that also true of x86-64?\n> This is mainly about getting better information from a debugging session in a\n> DEBUG build?\n\nWell, in the long run, once SpiderMonkey has generated this DWARF, I think it should tell the crash handler where it is, so the crash handler can include the data in the minidump. Then the processor could say, \"Oh, here's an interesting stream; let's add its contents to the symbol files I've read already\" and we could get JavaScript backtraces for jitted code in our crash reports.\n\n(!!!)", "is_private": false, "creation_time": "2011-03-17T17:52:11Z", "raw_text": "(In reply to comment #2)\n> JIT code on x86 always has a frame pointer, right? Is that also true of x86-64?\n> This is mainly about getting better information from a debugging session in a\n> DEBUG build?\n\nWell, in the long run, once SpiderMonkey has generated this DWARF, I think it should tell the crash handler where it is, so the crash handler can include the data in the minidump. Then the processor could say, \"Oh, here's an interesting stream; let's add its contents to the symbol files I've read already\" and we could get JavaScript backtraces for jitted code in our crash reports.\n\n(!!!)", "id": 5351178}, {"attachment_id": null, "is_private": false, "time": "2011-03-17T18:03:56Z", "author": "mh+mozilla@glandium.org", "raw_text": "except the minidump writer doesn't store frame unwinding information, nor symbols.", "id": 5351217, "text": "except the minidump writer doesn't store frame unwinding information, nor symbols.", "creation_time": "2011-03-17T18:03:56Z", "bug_id": 642320, "count": 5, "creator": "mh+mozilla@glandium.org", "tags": []}, {"bug_id": 642320, "tags": [], "count": 6, "time": "2011-03-20T22:40:15Z", "creator": "jimb@mozilla.com", "text": "(In reply to comment #5)\n> except the minidump writer doesn't store frame unwinding information, nor\n> symbols.\n\nSteve's patch causes the method JIT to generate DWARF describing the machine code it produces in memory. The minidump writer has an interface via which you can request that other areas of memory be included in the minidump (I think; but even if it doesn't, we could add them). What I'm saying is that we should use that interface to include the run-time-generated DWARF in the minidump file, and we should extend the dump processor to parse that. The processor can reuse the DWARF parsing code we already have in the tree for the dump_syms tool.", "is_private": false, "creation_time": "2011-03-20T22:40:15Z", "raw_text": "(In reply to comment #5)\n> except the minidump writer doesn't store frame unwinding information, nor\n> symbols.\n\nSteve's patch causes the method JIT to generate DWARF describing the machine code it produces in memory. The minidump writer has an interface via which you can request that other areas of memory be included in the minidump (I think; but even if it doesn't, we could add them). What I'm saying is that we should use that interface to include the run-time-generated DWARF in the minidump file, and we should extend the dump processor to parse that. The processor can reuse the DWARF parsing code we already have in the tree for the dump_syms tool.", "id": 5356386, "author": "jimb@mozilla.com", "attachment_id": null}, {"text": "Created attachment 521039\nNotify GDB of JM-generated JIT debug info\n\nFor now, apply this patch on top of the two patches in bug 599499.\n\nThis is a half-baked work in progress. It generates an in-memory ELF object file containing DWARF debug info for J\u00e4germonkey-generated JIT code, then calls the magic GDB dummy function to register that debug info with GDB.\n\nIt currently supports the main body and the JaegerTrampoline invocation code only. (The latter should really have its debug info included in its object file, but I haven't looked into how to do that yet.) It does not cover any ICs nor JaegerTrampolineReturn. It is x86_64 and probably Linux only. It leaks memory. It has bad breath and bites babies. Only use it if you're curious and want to try it out. Currently, it gives you:\n\n- x86_64 can do stack traces through JM-generated code\n- the innermost JS function will show up on the stack\n- if you break or step into the JIT code, you can single-step through the Javascript\n\nRight now, it generates the object file in /dev/shm/elf.o, which obviously fails if you don't have tmpfs or similar mounted there. It reuses the same filename for all JIT code objects. (I'm not sure if that's a problem.) It has some bizarre behavior sometimes when you rerun the JS-containing binary multiple times (possibly reloading with code changes between each?) A common failure mode is for the inferior to somehow have its PC get set to an invalid value in the middle of an instruction, leading to SIGILL or SIGSEGV.\n\nIt will error out if you don't have my patch to libdwarf to fix code alignment on x86_64. You can \"fix\" that uncommenting the section starting with \"Temporary horrible hack\" in jsdwarf.cpp, but then stepping through JS will be erratic (it'll probably skip some lines.) David Anderson (not ours), the libdwarf author, is working on a newer version and will include the fix in it. I'll need to do a configure check in the meantime.\n\nI intend to change many things about this patch, including its interface with the rest of the JS engine.", "creation_time": "2011-03-22T22:00:19Z", "raw_text": "For now, apply this patch on top of the two patches in bug 599499.\n\nThis is a half-baked work in progress. It generates an in-memory ELF object file containing DWARF debug info for J\u00e4germonkey-generated JIT code, then calls the magic GDB dummy function to register that debug info with GDB.\n\nIt currently supports the main body and the JaegerTrampoline invocation code only. (The latter should really have its debug info included in its object file, but I haven't looked into how to do that yet.) It does not cover any ICs nor JaegerTrampolineReturn. It is x86_64 and probably Linux only. It leaks memory. It has bad breath and bites babies. Only use it if you're curious and want to try it out. Currently, it gives you:\n\n- x86_64 can do stack traces through JM-generated code\n- the innermost JS function will show up on the stack\n- if you break or step into the JIT code, you can single-step through the Javascript\n\nRight now, it generates the object file in /dev/shm/elf.o, which obviously fails if you don't have tmpfs or similar mounted there. It reuses the same filename for all JIT code objects. (I'm not sure if that's a problem.) It has some bizarre behavior sometimes when you rerun the JS-containing binary multiple times (possibly reloading with code changes between each?) A common failure mode is for the inferior to somehow have its PC get set to an invalid value in the middle of an instruction, leading to SIGILL or SIGSEGV.\n\nIt will error out if you don't have my patch to libdwarf to fix code alignment on x86_64. You can \"fix\" that uncommenting the section starting with \"Temporary horrible hack\" in jsdwarf.cpp, but then stepping through JS will be erratic (it'll probably skip some lines.) David Anderson (not ours), the libdwarf author, is working on a newer version and will include the fix in it. I'll need to do a configure check in the meantime.\n\nI intend to change many things about this patch, including its interface with the rest of the JS engine.", "id": 5361055, "bug_id": 642320, "count": 7, "tags": [], "creator": "sphink@gmail.com", "author": "sphink@gmail.com", "is_private": false, "time": "2011-03-22T22:00:19Z", "attachment_id": 521039}, {"attachment_id": 521351, "is_private": false, "time": "2011-03-23T23:53:23Z", "author": "sphink@gmail.com", "text": "Created attachment 521351\nNotify GDB of JM-generated JIT debug info\n\nSomewhat more \"real\" patch. Add unregistration, fix misuse of the registration API. Stop leaking memory like crazy. Support multiple scripts by setting ownership correctly. Rename jsjitutil -> jsjitwatcher. (The names are still pretty bad overall in this patch.)", "creation_time": "2011-03-23T23:53:23Z", "raw_text": "Somewhat more \"real\" patch. Add unregistration, fix misuse of the registration API. Stop leaking memory like crazy. Support multiple scripts by setting ownership correctly. Rename jsjitutil -> jsjitwatcher. (The names are still pretty bad overall in this patch.)", "id": 5364456, "bug_id": 642320, "creator": "sphink@gmail.com", "tags": [], "count": 8}, {"attachment_id": null, "author": "timeless@bemail.org", "count": 9, "tags": [], "creator": "timeless@bemail.org", "time": "2011-03-26T23:19:08Z", "bug_id": 642320, "id": 5372338, "raw_text": "do we support JIT for DOMWorkers and other thread inhabitants?", "creation_time": "2011-03-26T23:19:08Z", "is_private": false, "text": "do we support JIT for DOMWorkers and other thread inhabitants?"}, {"time": "2011-03-29T00:06:27Z", "is_private": false, "attachment_id": 522531, "creator": "sphink@gmail.com", "tags": [], "count": 10, "bug_id": 642320, "creation_time": "2011-03-29T00:06:27Z", "text": "Created attachment 522531\nconfigure changes for gdb/jit code registration\n\nConfigure changes for pulling in the support library needed for registering JIT-generated code with GDB. I am 80% certain that I'm doing this incorrectly, but I've tried a few approaches and none of them feel quite right. Either I can't get it to handle the error cases how I'd like, or I write too much configure code by hand (which usually means I'm doing it wrong.)\n\nSo I'll spell out what's going on:\n\n- libdwarf is required for constructing the in-memory DWARF info\n\n- it is possible, even likely, that users will need to point to a non-system version of libdwarf (the currently released version doesn't work very well on x86_64)\n\n- libelf.so from elfutils is required for formatting and writing the ELF object file.\n\n- libelf is much more standard, and is installed on most systems already.\n\n- users may or may not want the gdb/JIT integration\n\nAC_CHECK_LIB(foo,...) seems to add -lfoo to LIBS by default, whether it's actually needed for the options given or not. I mimicked this behavior.\n\nShould add a --with-libelf option? Then it seems like I'd need to do manual checking for --with-libdwarf to be dependent on whether libelf was found.\n\nconfigure hurts my poor little brain...", "id": 5376202, "raw_text": "Configure changes for pulling in the support library needed for registering JIT-generated code with GDB. I am 80% certain that I'm doing this incorrectly, but I've tried a few approaches and none of them feel quite right. Either I can't get it to handle the error cases how I'd like, or I write too much configure code by hand (which usually means I'm doing it wrong.)\n\nSo I'll spell out what's going on:\n\n- libdwarf is required for constructing the in-memory DWARF info\n\n- it is possible, even likely, that users will need to point to a non-system version of libdwarf (the currently released version doesn't work very well on x86_64)\n\n- libelf.so from elfutils is required for formatting and writing the ELF object file.\n\n- libelf is much more standard, and is installed on most systems already.\n\n- users may or may not want the gdb/JIT integration\n\nAC_CHECK_LIB(foo,...) seems to add -lfoo to LIBS by default, whether it's actually needed for the options given or not. I mimicked this behavior.\n\nShould add a --with-libelf option? Then it seems like I'd need to do manual checking for --with-libdwarf to be dependent on whether libelf was found.\n\nconfigure hurts my poor little brain...", "author": "sphink@gmail.com"}, {"attachment_id": 522531, "author": "sphink@gmail.com", "is_private": false, "creation_time": "2011-03-29T00:08:28Z", "text": "Comment on attachment 522531\nconfigure changes for gdb/jit code registration\n\nI forgot to mention: the patches in this bug depend on the patches in bug 645887, although the configure patch dependency is an artificial one (the context requires it, not the configure script code itself.)", "id": 5376211, "raw_text": "I forgot to mention: the patches in this bug depend on the patches in bug 645887, although the configure patch dependency is an artificial one (the context requires it, not the configure script code itself.)", "count": 11, "creator": "sphink@gmail.com", "tags": [], "time": "2011-03-29T00:08:28Z", "bug_id": 642320}, {"creation_time": "2011-03-29T01:05:37Z", "text": "If we want to ship with this stuff enabled (and I think we do), our usual practice is just to slurp the libraries into the tree.\n\nBut, is the DWARF we're emitting really so complex? Couldn't we just emit it ourselves? You can fake up an ELF file in a few pages:\n\nhttp://code.google.com/p/google-breakpad/source/browse/trunk/src/common/dwarf/dwarf2reader_cfi_unittest.cc#2316", "id": 5376372, "raw_text": "If we want to ship with this stuff enabled (and I think we do), our usual practice is just to slurp the libraries into the tree.\n\nBut, is the DWARF we're emitting really so complex? Couldn't we just emit it ourselves? You can fake up an ELF file in a few pages:\n\nhttp://code.google.com/p/google-breakpad/source/browse/trunk/src/common/dwarf/dwarf2reader_cfi_unittest.cc#2316", "tags": [], "count": 12, "creator": "jimb@mozilla.com", "bug_id": 642320, "author": "jimb@mozilla.com", "is_private": false, "time": "2011-03-29T01:05:37Z", "attachment_id": null}, {"time": "2011-03-29T01:07:19Z", "is_private": false, "attachment_id": null, "count": 13, "tags": [], "creator": "jimb@mozilla.com", "bug_id": 642320, "creation_time": "2011-03-29T01:07:19Z", "text": "(To be clear, I think using an external libdwarf and libelf is fine for now.)", "id": 5376380, "raw_text": "(To be clear, I think using an external libdwarf and libelf is fine for now.)", "author": "jimb@mozilla.com"}, {"attachment_id": 522547, "author": "sphink@gmail.com", "count": 14, "creator": "sphink@gmail.com", "time": "2011-03-29T01:10:26Z", "tags": [], "bug_id": 642320, "is_private": false, "creation_time": "2011-03-29T01:10:26Z", "text": "Created attachment 522547\nNotify GDB of JM-generated JIT debug info\n\nDepends on patch from bug 645887.\n\nI'm sure I'm doing all kinds of things wrong in this patch, but I've been staring at it for too long. I know this code isn't pretty.\n\nhttp://sourceware.org/gdb/current/onlinedocs/gdb/JIT-Interface.html is the gdb documentation of the JIT code registration API.", "id": 5376390, "raw_text": "Depends on patch from bug 645887.\n\nI'm sure I'm doing all kinds of things wrong in this patch, but I've been staring at it for too long. I know this code isn't pretty.\n\nhttp://sourceware.org/gdb/current/onlinedocs/gdb/JIT-Interface.html is the gdb documentation of the JIT code registration API."}, {"attachment_id": null, "time": "2011-03-29T01:15:51Z", "is_private": false, "author": "jimb@mozilla.com", "bug_id": 642320, "tags": [], "creator": "jimb@mozilla.com", "count": 15, "raw_text": "Do we really need the top-level configure.in changes? There's no requirement that configure.in and js/src/configure.in remain \"in sync\". configure scripts tolerate unrecognized flags, and the top-level configure script should just propagate everything it gets down to js/src/configure.\n\nI'm not seeing an AC_DEFINE in the second patch, and I'm not sure what the AC_SUBST is used by.", "id": 5376406, "text": "Do we really need the top-level configure.in changes? There's no requirement that configure.in and js/src/configure.in remain \"in sync\". configure scripts tolerate unrecognized flags, and the top-level configure script should just propagate everything it gets down to js/src/configure.\n\nI'm not seeing an AC_DEFINE in the second patch, and I'm not sure what the AC_SUBST is used by.", "creation_time": "2011-03-29T01:15:51Z"}, {"is_private": false, "time": "2011-03-29T01:22:12Z", "attachment_id": null, "id": 5376419, "raw_text": "As a local variable, maybe, but I don't think we can keep \"snowWhite\" as a class member name. :)", "creation_time": "2011-03-29T01:22:12Z", "text": "As a local variable, maybe, but I don't think we can keep \"snowWhite\" as a class member name. :)", "creator": "jimb@mozilla.com", "count": 16, "tags": [], "bug_id": 642320, "author": "jimb@mozilla.com"}, {"author": "jimb@mozilla.com", "id": 5376488, "raw_text": "Rather than putting jsdwarf.cpp in a big #ifdef, wouldn't it better simply to put the conditional in the Makefile, and just skip that source file and object file altogether?\n\nAre the declarations at the head of class DwarfGenerator meant to be public, or private?\n\nI wasn't able to find uses of add_JaegerTrampoline_FDE; where should I look?\n\nDwarfGenerator's data members need comments. And now is the time to choose meaningful names. 'die' is not a very good name, for example.\n\nShould DwarfGenerator's destructor close fd if it's open? I know one shouldn't do serious work in a destructor...\n\nRather than using thread-specific storage, could we store the DwarfGenerator pointer in the context or compartment? That would require propagating JSContext pointers around more, but I think that's preferable...\n\nI think you should use one of the standard temporary filename generation functions. I think mkstemp is probably best; it's available on Linux, and Mac, too.\n\nRather than including the code in the ELF file's .text segment, can't you create a SHT_NOBITS .text section? That's what separate-debug files use; GDB likes those.\n\nWhat is the effect of the 'asm(\"\")' in the registration function? Does the compiler really omit this function's code if that's not there?\n\nThe definition of init_bytes (again, not a great name) is conditional on __x86_64, but its use is not. It's fine to be x86-64-only for now, but we should be sure to error out helpfully (preferably in the configure script) if someone tries to use it on other platforms.\n\nIn general, this code should be written with an eye towards supporting all our major architectures. At present, there's no organized segregation of processor-specific and processor-independent code.\n\nI think the above comments are going to require enough changes that I'd like to re-review after they've been addressed.", "creation_time": "2011-03-29T02:08:43Z", "text": "Rather than putting jsdwarf.cpp in a big #ifdef, wouldn't it better simply to put the conditional in the Makefile, and just skip that source file and object file altogether?\n\nAre the declarations at the head of class DwarfGenerator meant to be public, or private?\n\nI wasn't able to find uses of add_JaegerTrampoline_FDE; where should I look?\n\nDwarfGenerator's data members need comments. And now is the time to choose meaningful names. 'die' is not a very good name, for example.\n\nShould DwarfGenerator's destructor close fd if it's open? I know one shouldn't do serious work in a destructor...\n\nRather than using thread-specific storage, could we store the DwarfGenerator pointer in the context or compartment? That would require propagating JSContext pointers around more, but I think that's preferable...\n\nI think you should use one of the standard temporary filename generation functions. I think mkstemp is probably best; it's available on Linux, and Mac, too.\n\nRather than including the code in the ELF file's .text segment, can't you create a SHT_NOBITS .text section? That's what separate-debug files use; GDB likes those.\n\nWhat is the effect of the 'asm(\"\")' in the registration function? Does the compiler really omit this function's code if that's not there?\n\nThe definition of init_bytes (again, not a great name) is conditional on __x86_64, but its use is not. It's fine to be x86-64-only for now, but we should be sure to error out helpfully (preferably in the configure script) if someone tries to use it on other platforms.\n\nIn general, this code should be written with an eye towards supporting all our major architectures. At present, there's no organized segregation of processor-specific and processor-independent code.\n\nI think the above comments are going to require enough changes that I'd like to re-review after they've been addressed.", "creator": "jimb@mozilla.com", "count": 17, "tags": [], "bug_id": 642320, "attachment_id": null, "is_private": false, "time": "2011-03-29T02:08:43Z"}, {"is_private": false, "time": "2011-03-29T16:49:48Z", "attachment_id": null, "text": "(In reply to comment #12)\n> If we want to ship with this stuff enabled (and I think we do), our usual\n> practice is just to slurp the libraries into the tree.\n> \n> But, is the DWARF we're emitting really so complex? Couldn't we just emit it\n> ourselves? You can fake up an ELF file in a few pages:\n> \n> http://code.google.com/p/google-breakpad/source/browse/trunk/src/common/dwarf/dwarf2reader_cfi_unittest.cc#2316\n\nHey, I didn't know about that stuff! That API seems much nicer than libelf+libdwarf. It looks like it does less handholding, but it would be nice to get rid of the contortions induced by the libelf/libdwarf APIs.\n\nWhen I got into this, I knew nothing about elf or dwarf, so I assumed for portability and sanity I'd need to use a generating library. Now I'm not so sure -- even with them, you end up writing architecture-dependent code, so what's the point?", "creation_time": "2011-03-29T16:49:48Z", "raw_text": "(In reply to comment #12)\n> If we want to ship with this stuff enabled (and I think we do), our usual\n> practice is just to slurp the libraries into the tree.\n> \n> But, is the DWARF we're emitting really so complex? Couldn't we just emit it\n> ourselves? You can fake up an ELF file in a few pages:\n> \n> http://code.google.com/p/google-breakpad/source/browse/trunk/src/common/dwarf/dwarf2reader_cfi_unittest.cc#2316\n\nHey, I didn't know about that stuff! That API seems much nicer than libelf+libdwarf. It looks like it does less handholding, but it would be nice to get rid of the contortions induced by the libelf/libdwarf APIs.\n\nWhen I got into this, I knew nothing about elf or dwarf, so I assumed for portability and sanity I'd need to use a generating library. Now I'm not so sure -- even with them, you end up writing architecture-dependent code, so what's the point?", "id": 5377821, "bug_id": 642320, "tags": [], "creator": "sphink@gmail.com", "count": 18, "author": "sphink@gmail.com"}, {"author": "sphink@gmail.com", "bug_id": 642320, "creator": "sphink@gmail.com", "count": 19, "tags": [], "text": "(In reply to comment #15)\n> Do we really need the top-level configure.in changes? There's no requirement\n> that configure.in and js/src/configure.in remain \"in sync\". configure scripts\n> tolerate unrecognized flags, and the top-level configure script should just\n> propagate everything it gets down to js/src/configure.\n\nI've gotten comments before that from people who would really like them to be in sync as possible. Although maybe that's only if they use the same stuff, even if they use it differently?\n\n> I'm not seeing an AC_DEFINE in the second patch, and I'm not sure what the\n> AC_SUBST is used by.\n\nYes, looking at it now, it looks like I botched them anyway. I did a bunch of patch splitting and refactoring, and apparently \"does it still compile?\" isn't really the right test...", "creation_time": "2011-03-29T17:00:08Z", "raw_text": "(In reply to comment #15)\n> Do we really need the top-level configure.in changes? There's no requirement\n> that configure.in and js/src/configure.in remain \"in sync\". configure scripts\n> tolerate unrecognized flags, and the top-level configure script should just\n> propagate everything it gets down to js/src/configure.\n\nI've gotten comments before that from people who would really like them to be in sync as possible. Although maybe that's only if they use the same stuff, even if they use it differently?\n\n> I'm not seeing an AC_DEFINE in the second patch, and I'm not sure what the\n> AC_SUBST is used by.\n\nYes, looking at it now, it looks like I botched them anyway. I did a bunch of patch splitting and refactoring, and apparently \"does it still compile?\" isn't really the right test...", "id": 5377862, "attachment_id": null, "time": "2011-03-29T17:00:08Z", "is_private": false}, {"attachment_id": 522731, "is_private": false, "time": "2011-03-29T17:51:28Z", "author": "sphink@gmail.com", "creation_time": "2011-03-29T17:51:28Z", "text": "Created attachment 522731\nconfigure changes for gdb/jit code registration\n\nOk, this repairs the configure support to actually work again.\n\nkhuey, is it ok to leave out all of the changes to the toplevel configure.in if it isn't used outside of js/src?\n\nAlso, note that this is the version using libelf and libdwarf. I may end up switching over to jimb's stuff, in which case this would mostly all go away. But I'm guessing I'll want to do that in a followup bug. We'll see.", "id": 5377990, "raw_text": "Ok, this repairs the configure support to actually work again.\n\nkhuey, is it ok to leave out all of the changes to the toplevel configure.in if it isn't used outside of js/src?\n\nAlso, note that this is the version using libelf and libdwarf. I may end up switching over to jimb's stuff, in which case this would mostly all go away. But I'm guessing I'll want to do that in a followup bug. We'll see.", "tags": [], "creator": "sphink@gmail.com", "count": 20, "bug_id": 642320}, {"author": "sphink@gmail.com", "bug_id": 642320, "count": 21, "creator": "sphink@gmail.com", "tags": [], "raw_text": "Doh! Never mind for now. I'll need to do more configure changes to make the whole compilation conditional.", "id": 5377995, "text": "Comment on attachment 522731\nconfigure changes for gdb/jit code registration\n\nDoh! Never mind for now. I'll need to do more configure changes to make the whole compilation conditional.", "creation_time": "2011-03-29T17:53:06Z", "attachment_id": 522731, "time": "2011-03-29T17:53:06Z", "is_private": false}, {"author": "sphink@gmail.com", "bug_id": 642320, "count": 22, "tags": [], "creator": "sphink@gmail.com", "raw_text": "(In reply to comment #17)\n> Rather than putting jsdwarf.cpp in a big #ifdef, wouldn't it better simply to\n> put the conditional in the Makefile, and just skip that source file and object\n> file altogether?\n\nOk, done.\n\n> Are the declarations at the head of class DwarfGenerator meant to be public, or\n> private?\n\nOh, right. I made them public because of the add_dwarf_section callback. Fixed.\n\n> I wasn't able to find uses of add_JaegerTrampoline_FDE; where should I look?\n\nIn my personal patch queue history. Sorry, this was a leftover remnant after bug 645111 obsoleted it. Deleted.\n\n> DwarfGenerator's data members need comments. And now is the time to choose\n> meaningful names. 'die' is not a very good name, for example.\n\nCommented. I also renamed 'die' and 'cu_die' to 'functionDIE' and 'compilationUnitDIE'. Is your objection to the use of the DWARF jargon 'DIE'? I thought it would help readers connect it with the DWARF spec.\n\n> Should DwarfGenerator's destructor close fd if it's open? I know one shouldn't\n> do serious work in a destructor...\n\nWell, *something* probably ought to close it. Whoops! Ok, done. (In both registerJITCode() after it's no longer needed, and the destructor in case registerJITCode() got skipped somehow.)\n\n> Rather than using thread-specific storage, could we store the DwarfGenerator\n> pointer in the context or compartment? That would require propagating JSContext\n> pointers around more, but I think that's preferable...\n\nI can't. The whole reason I need tls is because libdwarf takes a callback argument in dwarf_producer_init_b that it uses to generate the ELF sections, and there's no way to pass any custom data to it. So I'd still need tls to pass in a JSContext, JSCompartment, or JSRuntime.\n\nI've asked the libdwarf author (David Anderson) to add this, and he seems willing, but it doesn't sound like the next release is going to happen very soon. I may just stop using libelf and libdwarf instead to resolve this and other issues.\n\n> I think you should use one of the standard temporary filename generation\n> functions. I think mkstemp is probably best; it's available on Linux, and Mac,\n> too.\n\nOk. But it doesn't address another issue, which is what directory to put things in. I was using /dev/shm because it's an easy way to avoid hitting the disk when using an API (libelf) that insists on having a file descriptor. But it's not guaranteed to exist.\n\n> Rather than including the code in the ELF file's .text segment, can't you\n> create a SHT_NOBITS .text section? That's what separate-debug files use; GDB\n> likes those.\n\nGreat idea! I know next to nothing about ELF. I don't really understand the interaction between SHT_NOBITS and SHF_ALLOC, but it seems fine with the combination. (And that's what a sample separate-debug file I just checked does.)\n\nArgh! Except libelf doesn't seem to handle it correctly. It appears to allocate space in the object file for SHT_NOBITS sections anyway. OpenSUSE has a patch for it: https://build.opensuse.org/package/view_file?file=libelf-ignore-NOBITS-sh_offset.patch&package=elfutils&project=openSUSE%3AFactory&srcmd5=965189fd9e18ff33f0ec437b77031378\n\nI'll use SHT_NOBITS. Things should magically get smaller if we link with a fixed libelf.\n\n> What is the effect of the 'asm(\"\")' in the registration function? Does the\n> compiler really omit this function's code if that's not there?\n\nI don't know if it really does omit it, but apparently it would be legal. From the gcc info:\n\n`noinline'\n     This function attribute prevents a function from being considered\n     for inlining.  If the function does not have side-effects, there\n     are optimizations other than inlining that causes function calls\n     to be optimized away, although the function call is live.  To keep\n     such calls from being optimized away, put\n          asm (\"\");\n     (*note Extended Asm::) in the called function, to serve as a\n     special side-effect.\n\n> The definition of init_bytes (again, not a great name) is conditional on\n> __x86_64, but its use is not. It's fine to be x86-64-only for now, but we\n> should be sure to error out helpfully (preferably in the configure script) if\n> someone tries to use it on other platforms.\n\nI was using the name of the parameter in the libdwarf API call. But now that I'm down to a single FDE, I think I'll ditch the CIE instructions entirely, making the issue moot.\n\n> In general, this code should be written with an eye towards supporting all our\n> major architectures. At present, there's no organized segregation of\n> processor-specific and processor-independent code.\n\nI was hoping by using \"standard\" libraries that I'd be able to hide much of this, even though the generated code is necessarily architecture-specific. But yes, the remaining bits should be organized better. How's this latest patch? It's somewhat better.\n\n> I think the above comments are going to require enough changes that I'd like to\n> re-review after they've been addressed.\n\nThat's the outcome I was hoping for at this point. Thanks for the laundry list! Gimme another.", "id": 5379722, "text": "Created attachment 522942\nNotify GDB of JM-generated JIT debug info\n\n(In reply to comment #17)\n> Rather than putting jsdwarf.cpp in a big #ifdef, wouldn't it better simply to\n> put the conditional in the Makefile, and just skip that source file and object\n> file altogether?\n\nOk, done.\n\n> Are the declarations at the head of class DwarfGenerator meant to be public, or\n> private?\n\nOh, right. I made them public because of the add_dwarf_section callback. Fixed.\n\n> I wasn't able to find uses of add_JaegerTrampoline_FDE; where should I look?\n\nIn my personal patch queue history. Sorry, this was a leftover remnant after bug 645111 obsoleted it. Deleted.\n\n> DwarfGenerator's data members need comments. And now is the time to choose\n> meaningful names. 'die' is not a very good name, for example.\n\nCommented. I also renamed 'die' and 'cu_die' to 'functionDIE' and 'compilationUnitDIE'. Is your objection to the use of the DWARF jargon 'DIE'? I thought it would help readers connect it with the DWARF spec.\n\n> Should DwarfGenerator's destructor close fd if it's open? I know one shouldn't\n> do serious work in a destructor...\n\nWell, *something* probably ought to close it. Whoops! Ok, done. (In both registerJITCode() after it's no longer needed, and the destructor in case registerJITCode() got skipped somehow.)\n\n> Rather than using thread-specific storage, could we store the DwarfGenerator\n> pointer in the context or compartment? That would require propagating JSContext\n> pointers around more, but I think that's preferable...\n\nI can't. The whole reason I need tls is because libdwarf takes a callback argument in dwarf_producer_init_b that it uses to generate the ELF sections, and there's no way to pass any custom data to it. So I'd still need tls to pass in a JSContext, JSCompartment, or JSRuntime.\n\nI've asked the libdwarf author (David Anderson) to add this, and he seems willing, but it doesn't sound like the next release is going to happen very soon. I may just stop using libelf and libdwarf instead to resolve this and other issues.\n\n> I think you should use one of the standard temporary filename generation\n> functions. I think mkstemp is probably best; it's available on Linux, and Mac,\n> too.\n\nOk. But it doesn't address another issue, which is what directory to put things in. I was using /dev/shm because it's an easy way to avoid hitting the disk when using an API (libelf) that insists on having a file descriptor. But it's not guaranteed to exist.\n\n> Rather than including the code in the ELF file's .text segment, can't you\n> create a SHT_NOBITS .text section? That's what separate-debug files use; GDB\n> likes those.\n\nGreat idea! I know next to nothing about ELF. I don't really understand the interaction between SHT_NOBITS and SHF_ALLOC, but it seems fine with the combination. (And that's what a sample separate-debug file I just checked does.)\n\nArgh! Except libelf doesn't seem to handle it correctly. It appears to allocate space in the object file for SHT_NOBITS sections anyway. OpenSUSE has a patch for it: https://build.opensuse.org/package/view_file?file=libelf-ignore-NOBITS-sh_offset.patch&package=elfutils&project=openSUSE%3AFactory&srcmd5=965189fd9e18ff33f0ec437b77031378\n\nI'll use SHT_NOBITS. Things should magically get smaller if we link with a fixed libelf.\n\n> What is the effect of the 'asm(\"\")' in the registration function? Does the\n> compiler really omit this function's code if that's not there?\n\nI don't know if it really does omit it, but apparently it would be legal. From the gcc info:\n\n`noinline'\n     This function attribute prevents a function from being considered\n     for inlining.  If the function does not have side-effects, there\n     are optimizations other than inlining that causes function calls\n     to be optimized away, although the function call is live.  To keep\n     such calls from being optimized away, put\n          asm (\"\");\n     (*note Extended Asm::) in the called function, to serve as a\n     special side-effect.\n\n> The definition of init_bytes (again, not a great name) is conditional on\n> __x86_64, but its use is not. It's fine to be x86-64-only for now, but we\n> should be sure to error out helpfully (preferably in the configure script) if\n> someone tries to use it on other platforms.\n\nI was using the name of the parameter in the libdwarf API call. But now that I'm down to a single FDE, I think I'll ditch the CIE instructions entirely, making the issue moot.\n\n> In general, this code should be written with an eye towards supporting all our\n> major architectures. At present, there's no organized segregation of\n> processor-specific and processor-independent code.\n\nI was hoping by using \"standard\" libraries that I'd be able to hide much of this, even though the generated code is necessarily architecture-specific. But yes, the remaining bits should be organized better. How's this latest patch? It's somewhat better.\n\n> I think the above comments are going to require enough changes that I'd like to\n> re-review after they've been addressed.\n\nThat's the outcome I was hoping for at this point. Thanks for the laundry list! Gimme another.", "creation_time": "2011-03-30T07:11:00Z", "attachment_id": 522942, "time": "2011-03-30T07:11:00Z", "is_private": false}, {"author": "sphink@gmail.com", "attachment_id": null, "raw_text": "Oh, right. One thing that I keep forgetting to write down somewhere -- this is still missing a way to get the source text for stepping through. Right now, I'm just recording script->filename, which works fine for my only test case, which is running a script from the shell. But in the browser, that'll be a URL, which is useless to gdb.\n\nSo to really step through JS code, we'll need a mechanism for writing out a plain copy of all mjitted source scripts somewhere. Or something.", "id": 5379738, "text": "Oh, right. One thing that I keep forgetting to write down somewhere -- this is still missing a way to get the source text for stepping through. Right now, I'm just recording script->filename, which works fine for my only test case, which is running a script from the shell. But in the browser, that'll be a URL, which is useless to gdb.\n\nSo to really step through JS code, we'll need a mechanism for writing out a plain copy of all mjitted source scripts somewhere. Or something.", "is_private": false, "creation_time": "2011-03-30T07:23:17Z", "bug_id": 642320, "creator": "sphink@gmail.com", "count": 23, "time": "2011-03-30T07:23:17Z", "tags": []}, {"attachment_id": null, "time": "2011-03-30T19:01:16Z", "is_private": false, "author": "jimb@mozilla.com", "creator": "jimb@mozilla.com", "tags": [], "count": 24, "bug_id": 642320, "id": 5381061, "raw_text": "(In reply to comment #22)\n> > DwarfGenerator's data members need comments. And now is the time to choose\n> > meaningful names. 'die' is not a very good name, for example.\n> \n> Commented. I also renamed 'die' and 'cu_die' to 'functionDIE' and\n> 'compilationUnitDIE'. Is your objection to the use of the DWARF jargon 'DIE'? I\n> thought it would help readers connect it with the DWARF spec.\n\nOh, using DWARF terminology is good, for exactly the reason you say. It's just that there are so many different dies flying around in DWARF that 'die' by itself is too vague. 'functionDIE' is perfect.\n\n> > Should DwarfGenerator's destructor close fd if it's open? I know one shouldn't\n> > do serious work in a destructor...\n> \n> Well, *something* probably ought to close it. Whoops! Ok, done. (In both\n> registerJITCode() after it's no longer needed, and the destructor in case\n> registerJITCode() got skipped somehow.)\n\nSounds perfect.\n\n> > Rather than using thread-specific storage, could we store the DwarfGenerator\n> > pointer in the context or compartment? That would require propagating JSContext\n> > pointers around more, but I think that's preferable...\n> \n> I can't. The whole reason I need tls is because libdwarf takes a callback\n> argument in dwarf_producer_init_b that it uses to generate the ELF sections,\n> and there's no way to pass any custom data to it. So I'd still need tls to pass\n> in a JSContext, JSCompartment, or JSRuntime.\n\nWow, what a pain. If you don't switch away from libdwarf altogether, could you perhaps enclose the TSS usage in a little class that takes care of allocating and freeing the index, and is a template to provide a strictly-typed getters and setters?\n\n> > I think you should use one of the standard temporary filename generation\n> > functions. I think mkstemp is probably best; it's available on Linux, and Mac,\n> > too.\n> \n> Ok. But it doesn't address another issue, which is what directory to put things\n> in. I was using /dev/shm because it's an easy way to avoid hitting the disk\n> when using an API (libelf) that insists on having a file descriptor. But it's\n> not guaranteed to exist.\n\nmkstemp will respect the user's TMPDIR environment variable, and otherwise generally behave like everything else that makes temporary files. That seems fine to me.\n\n> > Rather than including the code in the ELF file's .text segment, can't you\n> > create a SHT_NOBITS .text section? That's what separate-debug files use; GDB\n> > likes those.\n> \n> Great idea! I know next to nothing about ELF. I don't really understand the\n> interaction between SHT_NOBITS and SHF_ALLOC, but it seems fine with the\n> combination. (And that's what a sample separate-debug file I just checked\n> does.)\n\nYeah, you probably want to imitate separate-debug files as much as possible.\n\n> Argh! Except libelf doesn't seem to handle it correctly. It appears to allocate\n> space in the object file for SHT_NOBITS sections anyway. OpenSUSE has a patch\n> for it:\n> https://build.opensuse.org/package/view_file?file=libelf-ignore-NOBITS-sh_offset.patch&package=elfutils&project=openSUSE%3AFactory&srcmd5=965189fd9e18ff33f0ec437b77031378\n> \n> I'll use SHT_NOBITS. Things should magically get smaller if we link with a\n> fixed libelf.\n\nYou can tell you're in well-traveled territory when the tools are this good. :)\n\n> > What is the effect of the 'asm(\"\")' in the registration function? Does the\n> > compiler really omit this function's code if that's not there?\n> \n> I don't know if it really does omit it, but apparently it would be legal. From\n> the gcc info:\n> \n> `noinline'\n>      This function attribute prevents a function from being considered\n>      for inlining.  If the function does not have side-effects, there\n>      are optimizations other than inlining that causes function calls\n>      to be optimized away, although the function call is live.  To keep\n>      such calls from being optimized away, put\n>           asm (\"\");\n>      (*note Extended Asm::) in the called function, to serve as a\n>      special side-effect.\n\nCould we try leaving out the asm and the noinline attribute, and see if we actually have any troubles? That function has external linkage, so I don't think the compiler can really tell that it's \"unused\" anyway. Perhaps the linker would throw it away. But I'd like to wait for the need to arise before we put in magic.\n\n> > In general, this code should be written with an eye towards supporting all our\n> > major architectures. At present, there's no organized segregation of\n> > processor-specific and processor-independent code.\n> \n> I was hoping by using \"standard\" libraries that I'd be able to hide much of\n> this, even though the generated code is necessarily architecture-specific. But\n> yes, the remaining bits should be organized better. How's this latest patch?\n> It's somewhat better.\n\nI'll take a look.\n\n> That's the outcome I was hoping for at this point. Thanks for the laundry list!\n> Gimme another.\n\nOn its way! :)", "creation_time": "2011-03-30T19:01:16Z", "text": "(In reply to comment #22)\n> > DwarfGenerator's data members need comments. And now is the time to choose\n> > meaningful names. 'die' is not a very good name, for example.\n> \n> Commented. I also renamed 'die' and 'cu_die' to 'functionDIE' and\n> 'compilationUnitDIE'. Is your objection to the use of the DWARF jargon 'DIE'? I\n> thought it would help readers connect it with the DWARF spec.\n\nOh, using DWARF terminology is good, for exactly the reason you say. It's just that there are so many different dies flying around in DWARF that 'die' by itself is too vague. 'functionDIE' is perfect.\n\n> > Should DwarfGenerator's destructor close fd if it's open? I know one shouldn't\n> > do serious work in a destructor...\n> \n> Well, *something* probably ought to close it. Whoops! Ok, done. (In both\n> registerJITCode() after it's no longer needed, and the destructor in case\n> registerJITCode() got skipped somehow.)\n\nSounds perfect.\n\n> > Rather than using thread-specific storage, could we store the DwarfGenerator\n> > pointer in the context or compartment? That would require propagating JSContext\n> > pointers around more, but I think that's preferable...\n> \n> I can't. The whole reason I need tls is because libdwarf takes a callback\n> argument in dwarf_producer_init_b that it uses to generate the ELF sections,\n> and there's no way to pass any custom data to it. So I'd still need tls to pass\n> in a JSContext, JSCompartment, or JSRuntime.\n\nWow, what a pain. If you don't switch away from libdwarf altogether, could you perhaps enclose the TSS usage in a little class that takes care of allocating and freeing the index, and is a template to provide a strictly-typed getters and setters?\n\n> > I think you should use one of the standard temporary filename generation\n> > functions. I think mkstemp is probably best; it's available on Linux, and Mac,\n> > too.\n> \n> Ok. But it doesn't address another issue, which is what directory to put things\n> in. I was using /dev/shm because it's an easy way to avoid hitting the disk\n> when using an API (libelf) that insists on having a file descriptor. But it's\n> not guaranteed to exist.\n\nmkstemp will respect the user's TMPDIR environment variable, and otherwise generally behave like everything else that makes temporary files. That seems fine to me.\n\n> > Rather than including the code in the ELF file's .text segment, can't you\n> > create a SHT_NOBITS .text section? That's what separate-debug files use; GDB\n> > likes those.\n> \n> Great idea! I know next to nothing about ELF. I don't really understand the\n> interaction between SHT_NOBITS and SHF_ALLOC, but it seems fine with the\n> combination. (And that's what a sample separate-debug file I just checked\n> does.)\n\nYeah, you probably want to imitate separate-debug files as much as possible.\n\n> Argh! Except libelf doesn't seem to handle it correctly. It appears to allocate\n> space in the object file for SHT_NOBITS sections anyway. OpenSUSE has a patch\n> for it:\n> https://build.opensuse.org/package/view_file?file=libelf-ignore-NOBITS-sh_offset.patch&package=elfutils&project=openSUSE%3AFactory&srcmd5=965189fd9e18ff33f0ec437b77031378\n> \n> I'll use SHT_NOBITS. Things should magically get smaller if we link with a\n> fixed libelf.\n\nYou can tell you're in well-traveled territory when the tools are this good. :)\n\n> > What is the effect of the 'asm(\"\")' in the registration function? Does the\n> > compiler really omit this function's code if that's not there?\n> \n> I don't know if it really does omit it, but apparently it would be legal. From\n> the gcc info:\n> \n> `noinline'\n>      This function attribute prevents a function from being considered\n>      for inlining.  If the function does not have side-effects, there\n>      are optimizations other than inlining that causes function calls\n>      to be optimized away, although the function call is live.  To keep\n>      such calls from being optimized away, put\n>           asm (\"\");\n>      (*note Extended Asm::) in the called function, to serve as a\n>      special side-effect.\n\nCould we try leaving out the asm and the noinline attribute, and see if we actually have any troubles? That function has external linkage, so I don't think the compiler can really tell that it's \"unused\" anyway. Perhaps the linker would throw it away. But I'd like to wait for the need to arise before we put in magic.\n\n> > In general, this code should be written with an eye towards supporting all our\n> > major architectures. At present, there's no organized segregation of\n> > processor-specific and processor-independent code.\n> \n> I was hoping by using \"standard\" libraries that I'd be able to hide much of\n> this, even though the generated code is necessarily architecture-specific. But\n> yes, the remaining bits should be organized better. How's this latest patch?\n> It's somewhat better.\n\nI'll take a look.\n\n> That's the outcome I was hoping for at this point. Thanks for the laundry list!\n> Gimme another.\n\nOn its way! :)"}, {"attachment_id": null, "author": "jimb@mozilla.com", "id": 5381166, "raw_text": "snowWhite still has to go. Sorry. :) The joke will get old.\n\n> I can't. The whole reason I need tls is because libdwarf takes a callback\n> argument in dwarf_producer_init_b that it uses to generate the ELF sections,\n> and there's no way to pass any custom data to it. So I'd still need tls to pass\n> in a JSContext, JSCompartment, or JSRuntime.\n\nBy the way, this is the kind of explanation that should be in the comment for the TSS index.\n\nLooking at the JITWatcher member function implementations, this definitely seems like a case where JITWatcher would be an abstract base class, with implementations for GDB, oprofile, and so on. Having members and function bodies chosen by #ifdef is just using the preprocessor to get the same effect. I know there are admonitions in the SpiderMonkey C++ style guide against virtual functions, but this is a classic case.\n\nMore in a bit.", "is_private": false, "creation_time": "2011-03-30T19:39:27Z", "text": "snowWhite still has to go. Sorry. :) The joke will get old.\n\n> I can't. The whole reason I need tls is because libdwarf takes a callback\n> argument in dwarf_producer_init_b that it uses to generate the ELF sections,\n> and there's no way to pass any custom data to it. So I'd still need tls to pass\n> in a JSContext, JSCompartment, or JSRuntime.\n\nBy the way, this is the kind of explanation that should be in the comment for the TSS index.\n\nLooking at the JITWatcher member function implementations, this definitely seems like a case where JITWatcher would be an abstract base class, with implementations for GDB, oprofile, and so on. Having members and function bodies chosen by #ifdef is just using the preprocessor to get the same effect. I know there are admonitions in the SpiderMonkey C++ style guide against virtual functions, but this is a classic case.\n\nMore in a bit.", "tags": [], "time": "2011-03-30T19:39:27Z", "count": 25, "creator": "jimb@mozilla.com", "bug_id": 642320}, {"tags": [], "count": 26, "creator": "Jacob.Bramley@arm.com", "time": "2011-07-05T10:44:40Z", "bug_id": 642320, "id": 5573619, "raw_text": "What's the status of this? Is it still planned to go ahead? I'd really like this on ARM. We have no mandatory frame pointers in the ABI and not even an easy way to identify the caller, as the return address is stored in a frame-specific location.", "is_private": false, "creation_time": "2011-07-05T10:44:40Z", "text": "What's the status of this? Is it still planned to go ahead? I'd really like this on ARM. We have no mandatory frame pointers in the ABI and not even an easy way to identify the caller, as the return address is stored in a frame-specific location.", "attachment_id": null, "author": "Jacob.Bramley@arm.com"}, {"attachment_id": null, "time": "2011-07-13T17:59:36Z", "is_private": false, "author": "sphink@gmail.com", "bug_id": 642320, "tags": [], "count": 27, "creator": "sphink@gmail.com", "raw_text": "(In reply to comment #26)\n> What's the status of this?\n\nIgnored but not abandoned.\n\n> Is it still planned to go ahead? \n\nYes. Though I can't give an ETA. I have a little more work to do on an unrelated bug, then I'll be working on redoing the JIT registration API (since I'm now using it for yet another purpose, bug 642054). After that, I have to decide whether to work on this consumer or another (eg the profiler). This one may be close enough that it'd be worth finishing.\n\nAlso, the newer version of libdwarf is out, which will remove the need for some of the uglier bits of this.\n\n> I'd really like\n> this on ARM. We have no mandatory frame pointers in the ABI and not even an\n> easy way to identify the caller, as the return address is stored in a\n> frame-specific location.\n\nWhen I get there, I may need some help with ARM support.", "id": 5589444, "text": "(In reply to comment #26)\n> What's the status of this?\n\nIgnored but not abandoned.\n\n> Is it still planned to go ahead? \n\nYes. Though I can't give an ETA. I have a little more work to do on an unrelated bug, then I'll be working on redoing the JIT registration API (since I'm now using it for yet another purpose, bug 642054). After that, I have to decide whether to work on this consumer or another (eg the profiler). This one may be close enough that it'd be worth finishing.\n\nAlso, the newer version of libdwarf is out, which will remove the need for some of the uglier bits of this.\n\n> I'd really like\n> this on ARM. We have no mandatory frame pointers in the ABI and not even an\n> easy way to identify the caller, as the return address is stored in a\n> frame-specific location.\n\nWhen I get there, I may need some help with ARM support.", "creation_time": "2011-07-13T17:59:36Z"}, {"raw_text": "Updated for newer JIT registration API from bug 645887. Still no ARM, still haven't imported the newer libdwarf, so not ready for review yet. Mostly works here on Linux x86-64, though I haven't figured out how to convince gdb to 'next' over what I want it to next over; it currently steps too much and too little, depending, even though it has full line <-> PC info.", "id": 5748328, "text": "Created attachment 563611\nNotify GDB of JM-generated JIT debug info\n\nUpdated for newer JIT registration API from bug 645887. Still no ARM, still haven't imported the newer libdwarf, so not ready for review yet. Mostly works here on Linux x86-64, though I haven't figured out how to convince gdb to 'next' over what I want it to next over; it currently steps too much and too little, depending, even though it has full line <-> PC info.", "is_private": false, "creation_time": "2011-09-30T00:49:05Z", "bug_id": 642320, "time": "2011-09-30T00:49:05Z", "count": 28, "creator": "sphink@gmail.com", "tags": [], "author": "sphink@gmail.com", "attachment_id": 563611}, {"attachment_id": 567551, "time": "2011-10-17T20:10:21Z", "is_private": false, "author": "sphink@gmail.com", "tags": [], "creator": "sphink@gmail.com", "count": 29, "bug_id": 642320, "id": 5787171, "raw_text": "Updated again. I think the difference from the last version is some memory management bugfixes (I was freeing some memory too early), and an attempt to handle inlined call frames properly. Well, mostly properly -- I give the write file:lineno for inlined frames, but do not generated the DWARF info giving the inlined call info, so gdb won't be able to synthesize stack frames for inline calls.", "creation_time": "2011-10-17T20:10:21Z", "text": "Created attachment 567551\nNotify GDB of JM-generated JIT debug info\n\nUpdated again. I think the difference from the last version is some memory management bugfixes (I was freeing some memory too early), and an attempt to handle inlined call frames properly. Well, mostly properly -- I give the write file:lineno for inlined frames, but do not generated the DWARF info giving the inlined call info, so gdb won't be able to synthesize stack frames for inline calls."}, {"time": "2011-11-20T16:33:16Z", "is_private": false, "attachment_id": null, "tags": [], "count": 30, "creator": "ted@mielczarek.org", "bug_id": 642320, "creation_time": "2011-11-20T16:33:16Z", "text": "Apparently a simpler interface landed in GDB trunk:\nhttp://playingwithpointers.com/archives/633", "id": 5861303, "raw_text": "Apparently a simpler interface landed in GDB trunk:\nhttp://playingwithpointers.com/archives/633", "author": "ted@mielczarek.org"}, {"bug_id": 642320, "count": 31, "creator": "tom@tromey.com", "tags": [], "raw_text": "I think now it is simpler to write an unwinder in Python; plus a frame filter\nto display interesting stuff about the newly discovered frames.\n\nI have started this project here:\nhttps://github.com/tromey/spidermonkey-unwinder\n... but really it ought to be moved into the tree.\n\nThis requires gdb 7.10 (not released yet); a further gdb patch (see the README);\nand at least a partial fix for bug 757969 (which is in the bug, but old; I have\na rebased version here).\n\nThe current code has some limitations; and I've only ported it to x86-64.\nBut, it's better than the status quo and doesn't require the JITs to emit\nany sort of debug info.", "id": 10983017, "text": "I think now it is simpler to write an unwinder in Python; plus a frame filter\nto display interesting stuff about the newly discovered frames.\n\nI have started this project here:\nhttps://github.com/tromey/spidermonkey-unwinder\n... but really it ought to be moved into the tree.\n\nThis requires gdb 7.10 (not released yet); a further gdb patch (see the README);\nand at least a partial fix for bug 757969 (which is in the bug, but old; I have\na rebased version here).\n\nThe current code has some limitations; and I've only ported it to x86-64.\nBut, it's better than the status quo and doesn't require the JITs to emit\nany sort of debug info.", "creation_time": "2015-12-02T21:37:23Z", "author": "tom@tromey.com", "time": "2015-12-02T21:37:23Z", "is_private": false, "attachment_id": null}, {"creation_time": "2015-12-15T17:32:58Z", "is_private": false, "text": "See bug 1232712 for the unwinder.", "id": 11007687, "raw_text": "See bug 1232712 for the unwinder.", "creator": "tom@tromey.com", "tags": [], "time": "2015-12-15T17:32:58Z", "count": 32, "bug_id": 642320, "attachment_id": null, "author": "tom@tromey.com"}]}}}