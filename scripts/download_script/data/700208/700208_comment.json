{"comments": {}, "bugs": {"700208": {"comments": [{"text": "SoundCloud published an HTML 5 <audio> interoperability test.  We're failing 8 tests:\n\n1. Seeking to unbuffered position with seamless playback\n2. Supports MP3 format (bug 562730)\n3. Consistent timeupdate interval (15ms - 250ms)\n4. Property \"played\" (bug 462959)\n5. Property \"playbackRate\" (bug 495040)\n6. Property \"defaultPlaybackRate\" (bug 495040)\n7. Property \"currentTime\"\n8. Event \"ratechange\" (bug 495040)\n\nOf the ones we don't already have bugs for:\n\n1. Test is broken (serves unseekable Ogg and expects to seek, also could fail\n   intermittently depending on media download speed).\n3. Expects delta time between timeupdate events to be >= 15ms and <= 250ms, in Firefox\n   the test sees a delta time of 260-285ms.  This is a real bug.\n7. Test is broken (serves unseekable Ogg and expects to seek, can pass intermittently\n   depending on media download speed).", "tags": [], "time": "2011-11-07T03:24:04Z", "bug_id": 700208, "creation_time": "2011-11-07T03:24:04Z", "author": "kinetik@flim.org", "count": 0, "is_private": false, "creator": "kinetik@flim.org", "id": 5829874, "raw_text": "SoundCloud published an HTML 5 <audio> interoperability test.  We're failing 8 tests:\n\n1. Seeking to unbuffered position with seamless playback\n2. Supports MP3 format (bug 562730)\n3. Consistent timeupdate interval (15ms - 250ms)\n4. Property \"played\" (bug 462959)\n5. Property \"playbackRate\" (bug 495040)\n6. Property \"defaultPlaybackRate\" (bug 495040)\n7. Property \"currentTime\"\n8. Event \"ratechange\" (bug 495040)\n\nOf the ones we don't already have bugs for:\n\n1. Test is broken (serves unseekable Ogg and expects to seek, also could fail\n   intermittently depending on media download speed).\n3. Expects delta time between timeupdate events to be >= 15ms and <= 250ms, in Firefox\n   the test sees a delta time of 260-285ms.  This is a real bug.\n7. Test is broken (serves unseekable Ogg and expects to seek, can pass intermittently\n   depending on media download speed).", "attachment_id": null}, {"creation_time": "2011-11-07T03:30:47Z", "author": "kinetik@flim.org", "text": "Filed bug 700210 for #3.\n\nI've attempted to contact the owners about the broken tests.", "tags": [], "time": "2011-11-07T03:30:47Z", "is_private": false, "creator": "kinetik@flim.org", "id": 5829880, "attachment_id": null, "raw_text": "Filed bug 700210 for #3.\n\nI've attempted to contact the owners about the broken tests.", "bug_id": 700208, "count": 1}, {"creation_time": "2011-11-07T10:12:57Z", "author": "kinetik@flim.org", "text": "When I say \"unseekable Ogg\", what I mean is that the server does not support range requests, so Firefox is only able to seek in buffered parts of the file.\n\n#1 is unreliable because it attempts to seek to audio.buffered.end(0) + 60, but depending on download speed it's possible for audio.buffered.end(0) to equal audio.duration, so the test not complete.\n\n#7 is unreliable because it can intermittently pass depending on media download speed, as a seek into a buffered area will succeed but a seek into an unbuffered area will fail due to the first issue mention in this comment.", "tags": [], "time": "2011-11-07T10:12:57Z", "is_private": false, "creator": "kinetik@flim.org", "id": 5830116, "attachment_id": null, "raw_text": "When I say \"unseekable Ogg\", what I mean is that the server does not support range requests, so Firefox is only able to seek in buffered parts of the file.\n\n#1 is unreliable because it attempts to seek to audio.buffered.end(0) + 60, but depending on download speed it's possible for audio.buffered.end(0) to equal audio.duration, so the test not complete.\n\n#7 is unreliable because it can intermittently pass depending on media download speed, as a seek into a buffered area will succeed but a seek into an unbuffered area will fail due to the first issue mention in this comment.", "bug_id": 700208, "count": 2}, {"count": 3, "bug_id": 700208, "is_private": false, "creator": "kinetik@flim.org", "creation_time": "2011-11-07T10:16:17Z", "author": "kinetik@flim.org", "text": "Additionally, it's not clear to me what #1 intends to test, but seeking to an unbuffered area will not be seamless as there will be network and decoding delays involved in the seek.\n\nIf it's expected that the old playback location continues to play until the seek completes, this isn't the case in Firefox nor in any implementation I'm aware of.  The test doesn't (and can't) detect this behaviour, anyway.\n\nWhat the test appears to be checking is whether playback continues automatically after seeking into an unbuffered area--if this is the intended action the test should probably be renamed to reflect what is being tested.", "tags": [], "time": "2011-11-07T10:16:17Z", "attachment_id": null, "raw_text": "Additionally, it's not clear to me what #1 intends to test, but seeking to an unbuffered area will not be seamless as there will be network and decoding delays involved in the seek.\n\nIf it's expected that the old playback location continues to play until the seek completes, this isn't the case in Firefox nor in any implementation I'm aware of.  The test doesn't (and can't) detect this behaviour, anyway.\n\nWhat the test appears to be checking is whether playback continues automatically after seeking into an unbuffered area--if this is the intended action the test should probably be renamed to reflect what is being tested.", "id": 5830123}, {"count": 4, "is_private": false, "creator": "tomas@soundcloud.com", "text": "Hi Matthew!\n\nI must say you caught us by surprise since we're today doing a final work marathon on this project to be released tomorrow.\nAnyway your input is very valuable and the Github repo (http://github.com/soundcloud/areweplayingyet) is open now. If you have any suggestions to improve a test just create a Pull Request.\n\nGoing to fix some tests now! ;)", "bug_id": 700208, "time": "2011-11-07T10:54:13Z", "tags": [], "creation_time": "2011-11-07T10:54:13Z", "author": "tomas@soundcloud.com", "raw_text": "Hi Matthew!\n\nI must say you caught us by surprise since we're today doing a final work marathon on this project to be released tomorrow.\nAnyway your input is very valuable and the Github repo (http://github.com/soundcloud/areweplayingyet) is open now. If you have any suggestions to improve a test just create a Pull Request.\n\nGoing to fix some tests now! ;)", "attachment_id": null, "id": 5830325}, {"count": 5, "bug_id": 700208, "attachment_id": null, "raw_text": "After running the full test on Firefox Beta 8 (beta channel), the count is still at 0 at the bottom of website.", "id": 5831965, "creator": "antoine.mozilla@gmail.com", "is_private": false, "author": "antoine.mozilla@gmail.com", "creation_time": "2011-11-07T21:01:58Z", "time": "2011-11-07T21:01:58Z", "tags": [], "text": "After running the full test on Firefox Beta 8 (beta channel), the count is still at 0 at the bottom of website."}, {"is_private": false, "creator": "tomas@soundcloud.com", "count": 6, "creation_time": "2011-11-07T21:20:17Z", "author": "tomas@soundcloud.com", "text": "Antoine as I wrote above, you shouldn't consider anything final until Wednesday. Thank you for your feedback.", "tags": [], "time": "2011-11-07T21:20:17Z", "bug_id": 700208, "attachment_id": null, "raw_text": "Antoine as I wrote above, you shouldn't consider anything final until Wednesday. Thank you for your feedback.", "id": 5832034}, {"count": 7, "bug_id": 700208, "attachment_id": null, "raw_text": "The seeking issue is resolved, so #7 now passes.  I think #1 should pass now, but I suspect the test is timing out before it has a chance to complete.  The tests have a default timeout of 10s, which may be too low when running some of them over a slowish international link.\n\nTwo new tests are failing: AAC support (we don't, no bug to reference, but the reasoning is roughly the same as for MP3), and 'stalled' (which should pass, not sure what's going on there).", "id": 5839203, "creator": "kinetik@flim.org", "is_private": false, "author": "kinetik@flim.org", "creation_time": "2011-11-10T03:23:53Z", "time": "2011-11-10T03:23:53Z", "tags": [], "text": "The seeking issue is resolved, so #7 now passes.  I think #1 should pass now, but I suspect the test is timing out before it has a chance to complete.  The tests have a default timeout of 10s, which may be too low when running some of them over a slowish international link.\n\nTwo new tests are failing: AAC support (we don't, no bug to reference, but the reasoning is roughly the same as for MP3), and 'stalled' (which should pass, not sure what's going on there)."}, {"id": 5839639, "attachment_id": null, "raw_text": "Hi Matthew!\n\nLet's talk about the #1. Do you understand the use case? If implemented right, it allows fast playback of _any_ part of an audio file (without the need to buffer everything until that point) and then if no more user interaction happens it should continue playback smoothly.\n\nAbout AAC support... You should now more about that than me but didn't it go open source recently?\n\nThe stalled event is not working on Firefox... The loadstart event is triggered, then we halt the transfer of data for 3500ms (the spec requires 3000 but we gave some space) where stalled should be triggered.\n\nCheers,\nTom\u00e1s", "author": "tomas@soundcloud.com", "creation_time": "2011-11-10T11:06:11Z", "bug_id": 700208, "tags": [], "time": "2011-11-10T11:06:11Z", "text": "Hi Matthew!\n\nLet's talk about the #1. Do you understand the use case? If implemented right, it allows fast playback of _any_ part of an audio file (without the need to buffer everything until that point) and then if no more user interaction happens it should continue playback smoothly.\n\nAbout AAC support... You should now more about that than me but didn't it go open source recently?\n\nThe stalled event is not working on Firefox... The loadstart event is triggered, then we halt the transfer of data for 3500ms (the spec requires 3000 but we gave some space) where stalled should be triggered.\n\nCheers,\nTom\u00e1s", "creator": "tomas@soundcloud.com", "is_private": false, "count": 8}, {"id": 5839655, "raw_text": "Apple release their ALAC (Apple Lossless Audio Codec, equivalent to FLAC) under an open source license, but AFAIK, AAC is still encumbered with patents.", "attachment_id": null, "text": "Apple release their ALAC (Apple Lossless Audio Codec, equivalent to FLAC) under an open source license, but AFAIK, AAC is still encumbered with patents.", "time": "2011-11-10T11:11:19Z", "bug_id": 700208, "tags": [], "creation_time": "2011-11-10T11:11:19Z", "author": "padenot@mozilla.com", "count": 9, "is_private": false, "creator": "padenot@mozilla.com"}, {"attachment_id": null, "raw_text": "@Paul Do you think ALAC could be a good way of erradicating the problem of having different audio formats for different browsers?", "id": 5839670, "is_private": false, "creator": "tomas@soundcloud.com", "count": 10, "creation_time": "2011-11-10T11:17:19Z", "author": "tomas@soundcloud.com", "text": "@Paul Do you think ALAC could be a good way of erradicating the problem of having different audio formats for different browsers?", "time": "2011-11-10T11:17:19Z", "bug_id": 700208, "tags": []}, {"text": "Tomas, ALAC is unfortunately a lossless audio codec, and is intended for very high quality/high bitrate streams, so it might not be very useful for our purpose, which is streaming media.", "bug_id": 700208, "time": "2011-11-10T11:42:54Z", "tags": [], "creation_time": "2011-11-10T11:42:54Z", "author": "padenot@mozilla.com", "count": 11, "is_private": false, "creator": "padenot@mozilla.com", "id": 5839720, "raw_text": "Tomas, ALAC is unfortunately a lossless audio codec, and is intended for very high quality/high bitrate streams, so it might not be very useful for our purpose, which is streaming media.", "attachment_id": null}, {"raw_text": "@Paul, acknowledged. So what are your ideas on how this could be solved?", "attachment_id": null, "id": 5839783, "count": 12, "creator": "tomas@soundcloud.com", "is_private": false, "time": "2011-11-10T12:53:11Z", "bug_id": 700208, "tags": [], "text": "@Paul, acknowledged. So what are your ideas on how this could be solved?", "author": "tomas@soundcloud.com", "creation_time": "2011-11-10T12:53:11Z"}, {"id": 5840239, "raw_text": "@Matthew: The first test was indeed timing out. Have look at it now! http://areweplayingyet.org/support-seeking-unbuffered-position", "attachment_id": null, "text": "@Matthew: The first test was indeed timing out. Have look at it now! http://areweplayingyet.org/support-seeking-unbuffered-position", "time": "2011-11-10T16:41:23Z", "bug_id": 700208, "tags": [], "creation_time": "2011-11-10T16:41:23Z", "author": "tomas@soundcloud.com", "count": 13, "is_private": false, "creator": "tomas@soundcloud.com"}, {"raw_text": "Tom\u00e1s, the codec issue is hard. Apple and MS could support Ogg like Google, Opera, and Mozilla. In some years the patents on mp3 will expire and we can add that to Firefox. A shim that does audio decompression in js might work in the meantime.\n\nFortunately, the <audio> element lets you specify multiple <source> elements!", "attachment_id": null, "id": 5840358, "is_private": false, "creator": "giles@thaumas.net", "text": "Tom\u00e1s, the codec issue is hard. Apple and MS could support Ogg like Google, Opera, and Mozilla. In some years the patents on mp3 will expire and we can add that to Firefox. A shim that does audio decompression in js might work in the meantime.\n\nFortunately, the <audio> element lets you specify multiple <source> elements!", "tags": [], "time": "2011-11-10T17:24:05Z", "creation_time": "2011-11-10T17:24:05Z", "author": "giles@thaumas.net", "count": 14, "bug_id": 700208}, {"creator": "tomas@soundcloud.com", "is_private": false, "count": 15, "author": "tomas@soundcloud.com", "creation_time": "2011-11-11T00:02:54Z", "tags": [], "bug_id": 700208, "time": "2011-11-11T00:02:54Z", "text": "Can anyone look at this test source and validate that is valid (passing or not)? Webkit people are saying that seeking should only happen after the canplay event was triggered but this makes Firefox fail.", "attachment_id": null, "raw_text": "Can anyone look at this test source and validate that is valid (passing or not)? Webkit people are saying that seeking should only happen after the canplay event was triggered but this makes Firefox fail.", "id": 5841710}, {"count": 16, "bug_id": 700208, "attachment_id": null, "raw_text": "http://areweplayingyet.org/support-seeking-unbuffered-position", "id": 5841712, "creator": "tomas@soundcloud.com", "is_private": false, "author": "tomas@soundcloud.com", "creation_time": "2011-11-11T00:03:27Z", "time": "2011-11-11T00:03:27Z", "tags": [], "text": "http://areweplayingyet.org/support-seeking-unbuffered-position"}, {"id": 5841885, "attachment_id": null, "raw_text": "It _made_ Firefox fail because canplay is triggered again after the seek so there would be an infinite loop. Passing now.", "creation_time": "2011-11-11T01:13:50Z", "author": "tomas@soundcloud.com", "text": "It _made_ Firefox fail because canplay is triggered again after the seek so there would be an infinite loop. Passing now.", "bug_id": 700208, "time": "2011-11-11T01:13:50Z", "tags": [], "is_private": false, "creator": "tomas@soundcloud.com", "count": 17}, {"raw_text": "Requiring the canplay event before seeking corresponds to HAVE_FUTURE_DATA.  It should be possible to seek as soon as you reach HAVE_METADATA (and receive the loadedmetadata event).", "attachment_id": null, "id": 5841962, "is_private": false, "creator": "kinetik@flim.org", "text": "Requiring the canplay event before seeking corresponds to HAVE_FUTURE_DATA.  It should be possible to seek as soon as you reach HAVE_METADATA (and receive the loadedmetadata event).", "tags": [], "time": "2011-11-11T01:59:17Z", "creation_time": "2011-11-11T01:59:17Z", "author": "kinetik@flim.org", "count": 18, "bug_id": 700208}, {"count": 19, "bug_id": 700208, "is_private": false, "creator": "tomas@soundcloud.com", "text": "Matthew can you please link me to the spec part that defines that? Thanks", "tags": [], "time": "2011-11-11T11:35:52Z", "creation_time": "2011-11-11T11:35:52Z", "author": "tomas@soundcloud.com", "raw_text": "Matthew can you please link me to the spec part that defines that? Thanks", "attachment_id": null, "id": 5842428}, {"raw_text": "Here: http://www.whatwg.org/specs/web-apps/current-work/multipage/video.html#seeking\n\nNote that it's an error to seek while in readyState HAVE_NOTHING.  All other states are valid, including HAVE_METADATA.\n\nHere: http://www.whatwg.org/specs/web-apps/current-work/multipage/video.html#the-ready-states\n\nUnder HAVE_METADATA: \"The API will no longer raise an exception when seeking.\"\n\nAlso note in that section that canplay is fired when the readyState is HAVE_FUTURE_DATA.\n\nSo this change is wrong, and should be reverted: https://github.com/soundcloud/areweplayingyet/commit/37d10a57d420807cc6838f8e94d56f5198b01798", "attachment_id": null, "id": 5847823, "count": 20, "creator": "kinetik@flim.org", "is_private": false, "tags": [], "bug_id": 700208, "time": "2011-11-14T22:07:34Z", "text": "Here: http://www.whatwg.org/specs/web-apps/current-work/multipage/video.html#seeking\n\nNote that it's an error to seek while in readyState HAVE_NOTHING.  All other states are valid, including HAVE_METADATA.\n\nHere: http://www.whatwg.org/specs/web-apps/current-work/multipage/video.html#the-ready-states\n\nUnder HAVE_METADATA: \"The API will no longer raise an exception when seeking.\"\n\nAlso note in that section that canplay is fired when the readyState is HAVE_FUTURE_DATA.\n\nSo this change is wrong, and should be reverted: https://github.com/soundcloud/areweplayingyet/commit/37d10a57d420807cc6838f8e94d56f5198b01798", "author": "kinetik@flim.org", "creation_time": "2011-11-14T22:07:34Z"}, {"id": 5847833, "raw_text": "It's probably better to have these discussions in the AreWePlayingYet issue tracker so they're more visible to other interested parties.  This bug is intended to track Firefox bugs, and also track notes on the tests before the AWPY issue tracker was opened up.  I'll file AWPY test bugs there from now on.", "attachment_id": null, "text": "It's probably better to have these discussions in the AreWePlayingYet issue tracker so they're more visible to other interested parties.  This bug is intended to track Firefox bugs, and also track notes on the tests before the AWPY issue tracker was opened up.  I'll file AWPY test bugs there from now on.", "tags": [], "bug_id": 700208, "time": "2011-11-14T22:10:03Z", "creation_time": "2011-11-14T22:10:03Z", "author": "kinetik@flim.org", "count": 21, "is_private": false, "creator": "kinetik@flim.org"}, {"attachment_id": null, "raw_text": "Loop test fails on Linux (with PulseAudio) due to bug 582513.", "id": 5880407, "is_private": false, "creator": "kinetik@flim.org", "count": 22, "creation_time": "2011-11-29T23:02:32Z", "author": "kinetik@flim.org", "text": "Loop test fails on Linux (with PulseAudio) due to bug 582513.", "time": "2011-11-29T23:02:32Z", "tags": [], "bug_id": 700208}, {"count": 23, "bug_id": 700208, "creator": "alex_mayorga@yahoo.com", "is_private": false, "time": "2012-03-14T20:07:43Z", "tags": [], "text": "Just stumbles into AWPY today, so please bear with me.\n\nThese still fail on Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:14.0) Gecko/20120314 Firefox/14.0a1 ID:20120314031139\n\nhttp://areweplayingyet.org/support-seeking-unbuffered-position\nhttp://areweplayingyet.org/support-hot-swapping-src\nhttp://areweplayingyet.org/support-consistent-playback-delay\nhttp://areweplayingyet.org/property-seeking\nhttp://areweplayingyet.org/property-played\nhttp://areweplayingyet.org/property-playbackRate\nhttp://areweplayingyet.org/property-defaultPlaybackRate\nhttp://areweplayingyet.org/event-suspend\nhttp://areweplayingyet.org/event-stalled\nhttp://areweplayingyet.org/event-seeking\nhttp://areweplayingyet.org/event-ratechange\nhttp://areweplayingyet.org/event-pause\nhttp://areweplayingyet.org/event-loadedmetadata\nhttp://areweplayingyet.org/attribute-preload-metadata\n\nChanging \"Platform\" accordingly.\n\nShould new bugs be filled for the failing new tests?", "author": "alex_mayorga@yahoo.com", "creation_time": "2012-03-14T20:07:43Z", "raw_text": "Just stumbles into AWPY today, so please bear with me.\n\nThese still fail on Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:14.0) Gecko/20120314 Firefox/14.0a1 ID:20120314031139\n\nhttp://areweplayingyet.org/support-seeking-unbuffered-position\nhttp://areweplayingyet.org/support-hot-swapping-src\nhttp://areweplayingyet.org/support-consistent-playback-delay\nhttp://areweplayingyet.org/property-seeking\nhttp://areweplayingyet.org/property-played\nhttp://areweplayingyet.org/property-playbackRate\nhttp://areweplayingyet.org/property-defaultPlaybackRate\nhttp://areweplayingyet.org/event-suspend\nhttp://areweplayingyet.org/event-stalled\nhttp://areweplayingyet.org/event-seeking\nhttp://areweplayingyet.org/event-ratechange\nhttp://areweplayingyet.org/event-pause\nhttp://areweplayingyet.org/event-loadedmetadata\nhttp://areweplayingyet.org/attribute-preload-metadata\n\nChanging \"Platform\" accordingly.\n\nShould new bugs be filled for the failing new tests?", "attachment_id": null, "id": 6140216}, {"id": 6140448, "raw_text": "The failing tests need to be reviewed to confirm they're valid tests, and if so, why they're failing.  That can be done separately for each test if someone would like to file individual bugs that block this one.", "attachment_id": null, "text": "The failing tests need to be reviewed to confirm they're valid tests, and if so, why they're failing.  That can be done separately for each test if someone would like to file individual bugs that block this one.", "tags": [], "bug_id": 700208, "time": "2012-03-14T21:07:21Z", "creation_time": "2012-03-14T21:07:21Z", "author": "kinetik@flim.org", "count": 24, "is_private": false, "creator": "kinetik@flim.org"}, {"text": "Hey guys,\nWe made minors update to AWPY:\n - Introduced check for Opus support http://areweplayingyet.org/support-format-opus :)\n - Split the test 'support-seeking-unbuffered-position' into 3 tests to take into account different codecs and removed the former one. (you can read more about the motivations: https://github.com/soundcloud/areweplayingyet/pull/41)\n  * http://areweplayingyet.org/support-seeking-unbuffered-position-ogg\n  * http://areweplayingyet.org/support-seeking-unbuffered-position-mp3\n  * http://areweplayingyet.org/support-seeking-unbuffered-position-aac\n\nWe will also introduce an equivalent test for Opus.\nOr if you want to contribute you can propose a patch :)", "bug_id": 700208, "tags": [], "time": "2012-10-11T18:25:04Z", "creation_time": "2012-10-11T18:25:04Z", "author": "yves.vangoethem@gmail.com", "count": 25, "is_private": false, "creator": "yves.vangoethem@gmail.com", "id": 6720125, "raw_text": "Hey guys,\nWe made minors update to AWPY:\n - Introduced check for Opus support http://areweplayingyet.org/support-format-opus :)\n - Split the test 'support-seeking-unbuffered-position' into 3 tests to take into account different codecs and removed the former one. (you can read more about the motivations: https://github.com/soundcloud/areweplayingyet/pull/41)\n  * http://areweplayingyet.org/support-seeking-unbuffered-position-ogg\n  * http://areweplayingyet.org/support-seeking-unbuffered-position-mp3\n  * http://areweplayingyet.org/support-seeking-unbuffered-position-aac\n\nWe will also introduce an equivalent test for Opus.\nOr if you want to contribute you can propose a patch :)", "attachment_id": null}, {"raw_text": "In this day, \nFirefox nightly 20.0a1 (2012-11-26) have 42 test passed/47. Firefox fail for:\n* Seeking to unbuffered position with continuous playback after seeking (MP3)\n* Seeking to unbuffered position with continuous playback after seeking (AAC)\n* Supports MP3 format\n* Supports AAC format\n=> Normal: problems with patent. It's work if you choose Ogg.\n* Event \"stalled\"  I can't find a bug for it in bigzilla.\n\n\nFirefox 17.0 have 39/47. The difference it's for:\n* Property \"playbackRate\"\n* Property \"defaultPlaybackRate\"\n* Event \"ratechange\"", "attachment_id": null, "id": 6852093, "count": 26, "is_private": false, "creator": "vulcain@gmx.com", "text": "In this day, \nFirefox nightly 20.0a1 (2012-11-26) have 42 test passed/47. Firefox fail for:\n* Seeking to unbuffered position with continuous playback after seeking (MP3)\n* Seeking to unbuffered position with continuous playback after seeking (AAC)\n* Supports MP3 format\n* Supports AAC format\n=> Normal: problems with patent. It's work if you choose Ogg.\n* Event \"stalled\"  I can't find a bug for it in bigzilla.\n\n\nFirefox 17.0 have 39/47. The difference it's for:\n* Property \"playbackRate\"\n* Property \"defaultPlaybackRate\"\n* Event \"ratechange\"", "time": "2012-11-26T18:17:50Z", "bug_id": 700208, "tags": [], "creation_time": "2012-11-26T18:17:50Z", "author": "vulcain@gmx.com"}, {"count": 27, "bug_id": 700208, "creator": "sidrabbit@ya.ru", "is_private": false, "author": "sidrabbit@ya.ru", "creation_time": "2012-11-26T18:42:13Z", "time": "2012-11-26T18:42:13Z", "tags": [], "text": "(In reply to vulcain from comment #26)\n> * Event \"stalled\"  I can't find a bug for it in bigzilla.\nI think it's bug 702870.", "attachment_id": null, "raw_text": "(In reply to vulcain from comment #26)\n> * Event \"stalled\"  I can't find a bug for it in bigzilla.\nI think it's bug 702870.", "id": 6852203}, {"creation_time": "2012-11-26T20:45:33Z", "author": "vulcain@gmx.com", "text": "Firefox 17 on android 4.1 have 38/47:\n* Seeking to unbuffered position with continuous playback after seeking (AAC)\n* Seeking to unbuffered position with continuous playback after seeking (MP3)\n* Seeking to unbuffered position with continuous playback after seeking (Ogg)\n* Support MP3 format\n* Consistent time between play() and actual playback (< 20ms)\n* Property \"playbackRate\"\n* Property \"defaultPlaybackRate\"\n* Event \"stalled\"\n* Event \"ratechange\"\n\nwith Firefox 20.0a  nightly on Android 4.1 :42/47\n* Seeking to unbuffered position with continuous playback after seeking (AAC)\n* Seeking to unbuffered position with continuous playback after seeking (Ogg)\n* Support MP3 format\n* Consistent time between play() and actual playback (< 20ms)\n* Event \"stalled\"", "tags": [], "time": "2012-11-26T20:45:33Z", "is_private": false, "creator": "vulcain@gmx.com", "id": 6852664, "attachment_id": null, "raw_text": "Firefox 17 on android 4.1 have 38/47:\n* Seeking to unbuffered position with continuous playback after seeking (AAC)\n* Seeking to unbuffered position with continuous playback after seeking (MP3)\n* Seeking to unbuffered position with continuous playback after seeking (Ogg)\n* Support MP3 format\n* Consistent time between play() and actual playback (< 20ms)\n* Property \"playbackRate\"\n* Property \"defaultPlaybackRate\"\n* Event \"stalled\"\n* Event \"ratechange\"\n\nwith Firefox 20.0a  nightly on Android 4.1 :42/47\n* Seeking to unbuffered position with continuous playback after seeking (AAC)\n* Seeking to unbuffered position with continuous playback after seeking (Ogg)\n* Support MP3 format\n* Consistent time between play() and actual playback (< 20ms)\n* Event \"stalled\"", "bug_id": 700208, "count": 28}, {"author": "vulcain@gmx.com", "creation_time": "2012-11-26T21:47:58Z", "bug_id": 700208, "tags": [], "time": "2012-11-26T21:47:58Z", "text": "For information on Linux 3.2.0-34-generic x86_64:\nOpera 12.11 have 39/47 (fail for seek all format, don't support Opus, mp3, aac; Event \"abort\"; Event \"stalled\", Seeking to unbuffered position with continuous playback after seeking with ogg, mp3, aac). \nChromium 20.0.1132.47 have 19/47\nGoogle Chrome 23.0.1271.91 have 43/47 and fail for Event \"stalled\" and Seeking to unbuffered position with continuous playback after seeking for mp3, aac, Ogg. Amazing, i don't remember that Chrome could play opus codec.\n\nOn Android 4.1, Opera mobile 12.10 have 35/47 Chrome have 29/47, Dolphin  Browser 9.0.3 have 29/47, Android Browser 4.1.2 have 29/47.", "creator": "vulcain@gmx.com", "is_private": false, "count": 29, "id": 6852948, "attachment_id": null, "raw_text": "For information on Linux 3.2.0-34-generic x86_64:\nOpera 12.11 have 39/47 (fail for seek all format, don't support Opus, mp3, aac; Event \"abort\"; Event \"stalled\", Seeking to unbuffered position with continuous playback after seeking with ogg, mp3, aac). \nChromium 20.0.1132.47 have 19/47\nGoogle Chrome 23.0.1271.91 have 43/47 and fail for Event \"stalled\" and Seeking to unbuffered position with continuous playback after seeking for mp3, aac, Ogg. Amazing, i don't remember that Chrome could play opus codec.\n\nOn Android 4.1, Opera mobile 12.10 have 35/47 Chrome have 29/47, Dolphin  Browser 9.0.3 have 29/47, Android Browser 4.1.2 have 29/47."}, {"creator": "alex.fdm@terra.com.br", "is_private": false, "time": "2016-08-16T19:40:40Z", "tags": [], "text": "With Firefox 48 on Windows 10:\n* Event \"stalled\"\n* Event \"abort\"\n\nNone of the previous reports mention this \"abort\" failure, I am not sure if it is a new test or a regression.", "author": "alex.fdm@terra.com.br", "creation_time": "2016-08-16T19:40:40Z", "raw_text": "With Firefox 48 on Windows 10:\n* Event \"stalled\"\n* Event \"abort\"\n\nNone of the previous reports mention this \"abort\" failure, I am not sure if it is a new test or a regression.", "attachment_id": null, "id": 11630003, "count": 30, "bug_id": 700208}, {"raw_text": "Firefox 48 on android 4.4 have 42/47:\n* Consistent time between play() and actual playback (< 20ms)\n* Property \"buffered\"\n* Event \"stalled\"\n* Event \"canplaythrough\"\n* Event \"abort\"\n\nNone of the previous Android reports mention these \"buffered\", \"canplaythrough\" or \"abort\" failures, I am not sure if they are new tests or regressions.", "attachment_id": null, "id": 11630194, "creator": "alex.fdm@terra.com.br", "is_private": false, "time": "2016-08-16T20:44:11Z", "tags": [], "text": "Firefox 48 on android 4.4 have 42/47:\n* Consistent time between play() and actual playback (< 20ms)\n* Property \"buffered\"\n* Event \"stalled\"\n* Event \"canplaythrough\"\n* Event \"abort\"\n\nNone of the previous Android reports mention these \"buffered\", \"canplaythrough\" or \"abort\" failures, I am not sure if they are new tests or regressions.", "author": "alex.fdm@terra.com.br", "creation_time": "2016-08-16T20:44:11Z", "count": 31, "bug_id": 700208}, {"attachment_id": null, "raw_text": "[update] With Firefox 48 to 51 on Windows 10 we have 44/47:\n* Property \"buffered\" (I missed this failure on #c30 above)\n* Event \"stalled\"\n* Event \"abort\"\n\nNone of the previous Android reports mention these \"buffered\", or \"abort\" failures, I am not sure if they are new tests or regressions.", "id": 11630224, "creator": "alex.fdm@terra.com.br", "is_private": false, "count": 32, "author": "alex.fdm@terra.com.br", "creation_time": "2016-08-16T20:51:23Z", "tags": [], "time": "2016-08-16T20:51:23Z", "bug_id": 700208, "text": "[update] With Firefox 48 to 51 on Windows 10 we have 44/47:\n* Property \"buffered\" (I missed this failure on #c30 above)\n* Event \"stalled\"\n* Event \"abort\"\n\nNone of the previous Android reports mention these \"buffered\", or \"abort\" failures, I am not sure if they are new tests or regressions."}]}}}