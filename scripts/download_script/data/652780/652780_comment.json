{"comments": {}, "bugs": {"652780": {"comments": [{"time": "2011-04-26T12:14:49Z", "is_private": false, "tags": [], "raw_text": "", "bug_id": 652780, "count": 0, "id": 5431516, "attachment_id": null, "text": "", "creator": "evilpies@gmail.com", "author": "evilpies@gmail.com", "creation_time": "2011-04-26T12:14:49Z"}, {"creation_time": "2011-06-28T21:15:17Z", "author": "jwalden@mit.edu", "text": "Created attachment 542595\nReasonably-current failures list\n\nThis was the set of failures I got with a near-pristine TM build yesterday.  It could use categorization.  So far I've been picking a test at a time to investigate and fix, so I don't know exactly how many issues this represents.  I'm reasonably confident most of the Object.defineProperty failures are due to [].length not being redefinable through that method, so it'd probably be best for anyone looking to categorize these to start with the non-O.dP tests first.", "creator": "jwalden@mit.edu", "id": 5562843, "attachment_id": 542595, "count": 1, "bug_id": 652780, "raw_text": "This was the set of failures I got with a near-pristine TM build yesterday.  It could use categorization.  So far I've been picking a test at a time to investigate and fix, so I don't know exactly how many issues this represents.  I'm reasonably confident most of the Object.defineProperty failures are due to [].length not being redefinable through that method, so it'd probably be best for anyone looking to categorize these to start with the non-O.dP tests first.", "tags": [], "is_private": false, "time": "2011-06-28T21:15:17Z"}, {"raw_text": "We have some bugs, the tests have some bugs (to be reported shortly, need to open up a browser that has my test262 bugzilla password saved), about as you'd expect.\n\nI haven't fully investigated most of the tests that appear to be [].length redefinition, and arguments bizarreness oddities.  I don't think there's much to gain investigating the former -- we know what they are in general, and the few that aren't, we can deal with after fixing the bulk of them, with much less effort.  There's also a couple decodeURI tests that might be fixed by a reviewed patch to be landed soon for bug 660612, but given those tests' complexity I'm uninterested in investigating until I know that particular problem exists post-patch.  Other than that everything's investigated, with bugs filed.", "bug_id": 652780, "count": 2, "time": "2011-07-02T02:31:10Z", "is_private": false, "tags": [], "creation_time": "2011-07-02T02:31:10Z", "attachment_id": 543562, "id": 5570778, "creator": "jwalden@mit.edu", "text": "Created attachment 543562\nFailures list, now mostly categorized\n\nWe have some bugs, the tests have some bugs (to be reported shortly, need to open up a browser that has my test262 bugzilla password saved), about as you'd expect.\n\nI haven't fully investigated most of the tests that appear to be [].length redefinition, and arguments bizarreness oddities.  I don't think there's much to gain investigating the former -- we know what they are in general, and the few that aren't, we can deal with after fixing the bulk of them, with much less effort.  There's also a couple decodeURI tests that might be fixed by a reviewed patch to be landed soon for bug 660612, but given those tests' complexity I'm uninterested in investigating until I know that particular problem exists post-patch.  Other than that everything's investigated, with bugs filed.", "author": "jwalden@mit.edu"}, {"attachment_id": 543599, "id": 5571098, "text": "Created attachment 543599\nXML results from http://test262.ecmascript.org/ - using Firefox 5.0 on Mac OS X 10.6", "creator": "znerd@FreeBSD.org", "author": "znerd@FreeBSD.org", "creation_time": "2011-07-02T11:19:39Z", "time": "2011-07-02T11:19:39Z", "is_private": false, "tags": [], "raw_text": "", "bug_id": 652780, "count": 3}, {"count": 4, "raw_text": "The split tests mentioned in attachment 543562 are <https://bugs.ecmascript.org/show_bug.cgi?id=60>.  The bad-this tests mentioned in attachment 543562 are <https://bugs.ecmascript.org/show_bug.cgi?id=117>.", "bug_id": 652780, "is_private": false, "tags": [], "time": "2011-07-05T23:12:00Z", "creation_time": "2011-07-05T23:12:00Z", "author": "jwalden@mit.edu", "attachment_id": null, "id": 5575196, "creator": "jwalden@mit.edu", "text": "The split tests mentioned in attachment 543562 are <https://bugs.ecmascript.org/show_bug.cgi?id=60>.  The bad-this tests mentioned in attachment 543562 are <https://bugs.ecmascript.org/show_bug.cgi?id=117>."}, {"bug_id": 652780, "count": 5, "time": "2011-07-05T23:39:47Z", "creator": "jwalden@mit.edu", "author": "jwalden@mit.edu", "raw_text": "Some of the tests wrongly expect that U+0085 NEXT LINE is a space character.  I filed <https://bugs.ecmascript.org/show_bug.cgi?id=118> to cover that.", "tags": [], "is_private": false, "creation_time": "2011-07-05T23:39:47Z", "text": "Some of the tests wrongly expect that U+0085 NEXT LINE is a space character.  I filed <https://bugs.ecmascript.org/show_bug.cgi?id=118> to cover that.", "attachment_id": null, "id": 5575246}, {"text": "S13.0_A5 checks that the engine doesn't implement destructuring parameters to function statements, which we do implement.  I filed https://bugs.ecmascript.org/show_bug.cgi?id=133 on getting that bit of extension-testing removed from the test.", "creator": "jwalden@mit.edu", "attachment_id": null, "id": 5592755, "author": "jwalden@mit.edu", "creation_time": "2011-07-15T01:09:10Z", "time": "2011-07-15T01:09:10Z", "tags": [], "is_private": false, "bug_id": 652780, "raw_text": "S13.0_A5 checks that the engine doesn't implement destructuring parameters to function statements, which we do implement.  I filed https://bugs.ecmascript.org/show_bug.cgi?id=133 on getting that bit of extension-testing removed from the test.", "count": 6}, {"time": "2011-08-04T20:29:36Z", "is_private": false, "tags": [], "raw_text": "This updates waldo's list taking into account what we've fixed and what was fixed in test262 upstream.\n\nI've removed these from waldo's categories, since all the tests that rely on them no longer fail:\nbug 668024 (actually, this hasn't landed, but I tested with that patch included)\nbug 652771\nbug 635017\nbug 668934\nbug 660612\nBuggy global object in our DOM (for undefined, NaN, Infinity writing/deletion)\nBug 331773 (isn't needed for test262; I guess bug 660612 fixed that.)\n\n\nThere are the tests which no longer fail:\n\n11.13.1-4-27-s\n11.13.1-4-3-s\n11.4.1-4.a-8-s\n15.2.3.6-4-354-13\n15.2.3.6-4-354-4\n15.2.3.6-4-360-3\n15.2.3.6-4-360-7\n15.2.3.6-4-531-13\n15.2.3.6-4-531-4\n15.2.3.6-4-538-3\n15.2.3.6-4-538-7\n15.2.3.7-6-a-24\n15.5.4.20-3-2\n15.5.4.20-3-3\n15.5.4.20-3-4\n15.5.4.20-3-5\n15.5.4.20-3-6\nS15.1.2.2_A2_T10\nS15.1.2.3_A2_T10\nS15.1.3.1_A2.4_T1\nS15.1.3.2_A2.4_T1\nS15.10.6.2_A12\nS15.10.6.2_A1_T16\nS15.10.6.3_A1_T16\nS15.4.4.12_A2_T1\nS15.4.4.12_A2_T4\nS15.4.4.12_A3_T2\nS15.4.4.12_A3_T3\nS15.5.4.10_A1_T4\nS15.5.4.10_A1_T6\nS15.5.4.10_A1_T7\nS15.5.4.10_A1_T8\nS15.5.4.10_A1_T9\nS15.5.4.12_A1_T4\nS9.3.1_A2\nS9.3.1_A3_T1\nS9.3.1_A3_T2", "bug_id": 652780, "count": 7, "id": 5634148, "attachment_id": 550813, "text": "Created attachment 550813\nFailures list, categorized and updated\n\nThis updates waldo's list taking into account what we've fixed and what was fixed in test262 upstream.\n\nI've removed these from waldo's categories, since all the tests that rely on them no longer fail:\nbug 668024 (actually, this hasn't landed, but I tested with that patch included)\nbug 652771\nbug 635017\nbug 668934\nbug 660612\nBuggy global object in our DOM (for undefined, NaN, Infinity writing/deletion)\nBug 331773 (isn't needed for test262; I guess bug 660612 fixed that.)\n\n\nThere are the tests which no longer fail:\n\n11.13.1-4-27-s\n11.13.1-4-3-s\n11.4.1-4.a-8-s\n15.2.3.6-4-354-13\n15.2.3.6-4-354-4\n15.2.3.6-4-360-3\n15.2.3.6-4-360-7\n15.2.3.6-4-531-13\n15.2.3.6-4-531-4\n15.2.3.6-4-538-3\n15.2.3.6-4-538-7\n15.2.3.7-6-a-24\n15.5.4.20-3-2\n15.5.4.20-3-3\n15.5.4.20-3-4\n15.5.4.20-3-5\n15.5.4.20-3-6\nS15.1.2.2_A2_T10\nS15.1.2.3_A2_T10\nS15.1.3.1_A2.4_T1\nS15.1.3.2_A2.4_T1\nS15.10.6.2_A12\nS15.10.6.2_A1_T16\nS15.10.6.3_A1_T16\nS15.4.4.12_A2_T1\nS15.4.4.12_A2_T4\nS15.4.4.12_A3_T2\nS15.4.4.12_A3_T3\nS15.5.4.10_A1_T4\nS15.5.4.10_A1_T6\nS15.5.4.10_A1_T7\nS15.5.4.10_A1_T8\nS15.5.4.10_A1_T9\nS15.5.4.12_A1_T4\nS9.3.1_A2\nS9.3.1_A3_T1\nS9.3.1_A3_T2", "creator": "paul.biggar@gmail.com", "author": "paul.biggar@gmail.com", "creation_time": "2011-08-04T20:29:36Z"}, {"raw_text": "Nice :>", "bug_id": 652780, "count": 8, "time": "2011-08-04T20:38:28Z", "is_private": false, "tags": [], "creation_time": "2011-08-04T20:38:28Z", "id": 5634182, "attachment_id": null, "creator": "evilpies@gmail.com", "text": "Nice :>", "author": "evilpies@gmail.com"}, {"count": 9, "raw_text": "Test262 has fixed a lot of the problems with their tests, and we've fixed a few here, so the list is now a bit shorter.", "bug_id": 652780, "is_private": false, "tags": [], "time": "2011-08-10T16:25:33Z", "creation_time": "2011-08-10T16:25:33Z", "author": "paul.biggar@gmail.com", "id": 5645199, "attachment_id": 552094, "text": "Created attachment 552094\nupdated for recent test262 updates\n\nTest262 has fixed a lot of the problems with their tests, and we've fixed a few here, so the list is now a bit shorter.", "creator": "paul.biggar@gmail.com"}, {"author": "m.goleb+mozilla@gmail.com", "attachment_id": null, "id": 7021353, "creator": "m.goleb+mozilla@gmail.com", "text": "There's a regression, Firefox Nightly (21) fails a lot tests that Fx stable (18) didn't, errors say, citing: \"eval within global execution context\".", "creation_time": "2013-01-20T23:48:50Z", "is_private": false, "tags": [], "time": "2013-01-20T23:48:50Z", "count": 10, "raw_text": "There's a regression, Firefox Nightly (21) fails a lot tests that Fx stable (18) didn't, errors say, citing: \"eval within global execution context\".", "bug_id": 652780}, {"text": "Since Chrome fails only 15 tests now, Safari - 8, IE10 - 8, Opera - 10 (all of them in stable versions) and Firefox Nightly fails 209 tests, I think this bug needs the parity-webkit and parity-ie flags (I'd also say parity-opera but since they're switching to WebKit it has probably lost significance).", "attachment_id": null, "id": 7238203, "creation_time": "2013-03-24T17:48:59Z", "tags": [], "is_private": false, "raw_text": "Since Chrome fails only 15 tests now, Safari - 8, IE10 - 8, Opera - 10 (all of them in stable versions) and Firefox Nightly fails 209 tests, I think this bug needs the parity-webkit and parity-ie flags (I'd also say parity-opera but since they're switching to WebKit it has probably lost significance).", "creator": "m.goleb+mozilla@gmail.com", "author": "m.goleb+mozilla@gmail.com", "time": "2013-03-24T17:48:59Z", "bug_id": 652780, "count": 11}, {"id": 7290814, "attachment_id": 734809, "text": "Created attachment 734809\nList of failures in a build with the latest WIP from bug 858381\n\nWith non-writable array length implemented (note that bug's not fixed, the patch there isn't ready, it still has issues to work through), the failure count drops to 68.\n\nLooking at some of the tests that fail on the site, I'm not convinced all the test262 issues mentioned before have been resolved.  But investigating too much further probably should wait til bug 858381 is fixed.", "creation_time": "2013-04-08T20:36:03Z", "is_private": false, "tags": [], "raw_text": "With non-writable array length implemented (note that bug's not fixed, the patch there isn't ready, it still has issues to work through), the failure count drops to 68.\n\nLooking at some of the tests that fail on the site, I'm not convinced all the test262 issues mentioned before have been resolved.  But investigating too much further probably should wait til bug 858381 is fixed.", "creator": "jwalden@mit.edu", "author": "jwalden@mit.edu", "time": "2013-04-08T20:36:03Z", "bug_id": 652780, "count": 12}, {"raw_text": "There are some new failures, that aren't present on Walden's attachment.\nBut there are some failures that are gone!\n\nI have installed addons (I forgot to disable them, sorry). I hope they don't change the results.", "bug_id": 652780, "count": 13, "time": "2013-04-26T20:06:37Z", "is_private": false, "tags": [], "creation_time": "2013-04-26T20:06:37Z", "attachment_id": 742525, "id": 7360747, "creator": "guijoselito@gmail.com", "text": "Created attachment 742525\nResults on nightly post-858381\n\nThere are some new failures, that aren't present on Walden's attachment.\nBut there are some failures that are gone!\n\nI have installed addons (I forgot to disable them, sorry). I hope they don't change the results.", "author": "guijoselito@gmail.com"}, {"id": 7360788, "attachment_id": null, "creator": "evilpies@gmail.com", "text": "All these Array.prototype.* ones are problems with the test suite. I reported them https://bugs.ecmascript.org/show_bug.cgi?id=1453.", "author": "evilpies@gmail.com", "creation_time": "2013-04-26T20:16:12Z", "time": "2013-04-26T20:16:12Z", "is_private": false, "tags": [], "raw_text": "All these Array.prototype.* ones are problems with the test suite. I reported them https://bugs.ecmascript.org/show_bug.cgi?id=1453.", "bug_id": 652780, "count": 14}, {"time": "2013-08-23T12:30:16Z", "bug_id": 652780, "count": 15, "creator": "deleeuw+bugzilla@gmail.com", "author": "deleeuw+bugzilla@gmail.com", "is_private": false, "tags": [], "raw_text": "A lot of new errors since last time. Ran with today's Nightly.\n\nLatest released Chrome has 11 errors. Nightly has 73.\n\nI also noticed that the tests ran a lot faster in Chrome than in Nightly.", "id": 7782630, "attachment_id": 794626, "text": "Created attachment 794626\nResults as of 2013-08-23\n\nA lot of new errors since last time. Ran with today's Nightly.\n\nLatest released Chrome has 11 errors. Nightly has 73.\n\nI also noticed that the tests ran a lot faster in Chrome than in Nightly.", "creation_time": "2013-08-23T12:30:16Z"}, {"creator": "deleeuw+bugzilla@gmail.com", "author": "deleeuw+bugzilla@gmail.com", "bug_id": 652780, "count": 16, "time": "2013-08-23T13:27:06Z", "creation_time": "2013-08-23T13:27:06Z", "attachment_id": null, "id": 7782771, "text": "By contrast 23.0.1 has 193 errors. So a good improvement compared to the latest release.", "raw_text": "By contrast 23.0.1 has 193 errors. So a good improvement compared to the latest release.", "is_private": false, "tags": []}, {"author": "bruant.d@gmail.com", "text": "(In reply to Kai de Leeuw from comment #15)\n> I also noticed that the tests ran a lot faster in Chrome than in Nightly.\nI believe this is due to the test runner playing with iframes a lot rather than a raw JavaScript performance issue.", "creator": "bruant.d@gmail.com", "id": 7782817, "attachment_id": null, "creation_time": "2013-08-23T13:35:36Z", "tags": [], "is_private": false, "time": "2013-08-23T13:35:36Z", "count": 17, "bug_id": 652780, "raw_text": "(In reply to Kai de Leeuw from comment #15)\n> I also noticed that the tests ran a lot faster in Chrome than in Nightly.\nI believe this is due to the test runner playing with iframes a lot rather than a raw JavaScript performance issue."}, {"tags": [], "is_private": false, "raw_text": "Tom's Hardware Guide's \"Web Browser Grand Prix\" (tracking bug 933949) includes test262.", "text": "Tom's Hardware Guide's \"Web Browser Grand Prix\" (tracking bug 933949) includes test262.", "id": 8045396, "attachment_id": null, "creation_time": "2013-11-06T02:03:21Z", "time": "2013-11-06T02:03:21Z", "bug_id": 652780, "count": 18, "creator": "cpeterson@mozilla.com", "author": "cpeterson@mozilla.com"}, {"count": 19, "raw_text": "Firefox 29 and Nightly 32 fail 42 test cases. Chrome 35 fails only 5 test cases.", "bug_id": 652780, "is_private": false, "tags": [], "time": "2014-06-02T23:55:10Z", "creation_time": "2014-06-02T23:55:10Z", "author": "cpeterson@mozilla.com", "id": 8873929, "attachment_id": 8432891, "text": "Created attachment 8432891\nResults as of 2014-06-02\n\nFirefox 29 and Nightly 32 fail 42 test cases. Chrome 35 fails only 5 test cases.", "creator": "cpeterson@mozilla.com"}, {"is_private": false, "tags": [], "raw_text": "Firefox 33 now failing 53 test cases:\n\n10.4.3-1-104\tStrict mode should not ToObject thisArg if not an object. Strict equality operator should succeed.\tFail\n10.4.3-1-106\tStrict mode should not ToObject thisArg if not an object. Return type should be 'number'.\tFail\nS12.1_A4_T2\tChecking if execution of \"y={x}\" fails\tFail\nS12.6.4_A15\tUsing block within \"for-in\" Expression\tFail\n15.11.4.4-8-2\tError.prototype.toString return empty string when 'name' is empty string and 'msg' is undefined\tFail\n15.2.3.4-1-4\tObject.getOwnPropertyNames throws TypeError if 'O' is a boolean\tFail\n15.2.3.4-1-5\tObject.getOwnPropertyNames throws TypeError if 'O' is a string\tFail\n15.2.3.4-1\tObject.getOwnPropertyNames throws TypeError if type of first param is not Object\tFail\n15.2.3.6-4-292-1\tObject.defineProperty - 'O' is an Arguments object of a function that has formal parameters, 'name' is own property of 'O' which is also defined in [[ParameterMap]] of 'O', and 'desc' is data descriptor, test updating multiple attribute values of 'name' (10.6 [[DefineOwnProperty]] step 3 and 5.b)\tFail\n15.2.3.6-4-293-2\tObject.defineProperty - 'O' is an Arguments object of a function that has formal parameters, 'name' is own data property of 'O' which is also defined in [[ParameterMap]] of 'O', test TypeError is thrown when updating the [[Value]] attribute value of 'name' which is defined as unwritable and non-configurable (10.6 [[DefineOwnProperty]] step 4 and step 5b)\tFail\n15.2.3.6-4-293-3\tObject.defineProperty - 'O' is an Arguments object of a function that has formal parameters, 'name' is own data property of 'O' which is also defined in [[ParameterMap]] of 'O', test TypeError is not thrown when updating the [[Value]] attribute value of 'name' which is defined as non-writable and configurable (10.6 [[DefineOwnProperty]] step 3 and step 5.b)\tFail\n15.2.3.6-4-294-1\tObject.defineProperty - 'O' is an Arguments object of a function that has formal parameters, 'name' is own data property of 'O' which is also defined in [[ParameterMap]] of 'O', test TypeError is thrown when updating the [[Writable]] attribute value of 'name' which is defined as non-configurable (10.6 [[DefineOwnProperty]] step 4 and 5b)\tFail\n15.2.3.6-4-295-1\tObject.defineProperty - 'O' is an Arguments object of a function that has formal parameters, 'name' is own data property of 'O' which is also defined in [[ParameterMap]] of 'O', test TypeError is thrown when updating the [[Enumerable]] attribute value of 'name' which is defined as non-configurable (10.6 [[DefineOwnProperty]] step 4 and step 5b)\tFail\n15.2.3.6-4-296-1\tObject.defineProperty - 'O' is an Arguments object of a function that has formal parameters, 'name' is own data property of 'O' which is also defined in [[ParameterMap]] of 'O', test TypeError is thrown when updating the [[Configurable]] attribute value of 'name' which is defined as non-configurable (10.6 [[DefineOwnProperty]] step 4 and step 5b)\tFail\n15.2.3.6-4-354-13\tObject.defineProperty will update [[Value]] attribute of indexed property successfully when [[Configurable]] attribute is true and [[Writable]] attribute is false, 'O' is the global object (8.12.9 - step Note)\tFail\n15.2.3.6-4-354-4\tObject.defineProperty will update [[Value]] attribute successfully when [[Configurable]] attribute is true and [[Writable]] attribute is false, 'O' is the global object (8.12.9 - step Note)\tFail\n15.2.3.6-4-360-3\tES5 Attributes - Updating data property 'P' whose attributes are [[Writable]]: false, [[Enumerable]]: true, [[Configurable]]: true to an accessor property, 'O' is the global object (8.12.9 - step 9.b.i)\tFail\n15.2.3.6-4-360-7\tES5 Attributes - Updating indexed data property 'P' whose attributes are [[Writable]]: false, [[Enumerable]]: true, [[Configurable]]: true to an accessor property, 'O' is the global object (8.12.9 - step 9.b.i)\tFail\n15.2.3.6-4-531-13\tObject.defineProperty will update [[Get]] and [[Set]] attributes of indexed accessor property 'P' successfully when [[Configurable]] attribute is true, 'O' is the global object (8.12.9 step 11)\tFail\n15.2.3.6-4-531-17\tES5 Attributes - Updating an indexed accessor property 'P' using simple assignment is successful, 'O' is the global object (8.12.5 step 5.b)\tFail\n15.2.3.6-4-531-4\tObject.defineProperty will update [[Get]] and [[Set]] attributes of named accessor property 'P' successfully when [[Configurable]] attribute is true, 'O' is the global object (8.12.9 step 11)\tFail\n15.2.3.6-4-538-3\tES5 Attributes - Updating a named accessor property 'P' whose [[Configurable]] attribute is true to a data property is successful, 'O' is the global object\tFail\n15.2.3.6-4-538-7\tES5 Attributes - Updating an indexed accessor property 'P' whose [[Configurable]] attribute is true to a data property is successful, 'O' is the global object\tFail\n15.2.3.7-6-a-24\tObject.defineProperties - 'O' is the global object which implements its own [[GetOwnProperty]] method to get 'P' (8.12.9 step 1 )\tFail\n15.4.4.14-1-17\tArray.prototype.indexOf applied to the global object\tFail\n15.4.4.14-2-15\tArray.prototype.indexOf - 'length' is property of the global object\tFail\n15.4.4.14-9-b-i-23\tArray.prototype.indexOf - This object is the global object\tFail\n15.4.4.15-1-17\tArray.prototype.lastIndexOf applied to the global object\tFail\n15.4.4.15-2-15\tArray.prototype.lastIndexOf - 'length' is property of the global object\tFail\n15.4.4.15-8-b-i-23\tArray.prototype.lastIndexOf - This object is the global object\tFail\n15.4.4.16-2-15\tArray.prototype.every - 'length' is property of the global object\tFail\n15.4.4.16-7-c-i-23\tArray.prototype.every - This object is an global object which contains index property\tFail\n15.4.4.17-2-15\tArray.prototype.some - 'length' is property of the global object\tFail\n15.4.4.17-7-c-i-23\tArray.prototype.some - This object is an global object which contains index property\tFail\n15.4.4.18-2-15\tArray.prototype.forEach - 'length' is property of the global object\tFail\n15.4.4.18-7-c-i-23\tArray.prototype.forEach - This object is an global object which contains index property\tFail\n15.4.4.19-8-c-i-23\tArray.prototype.map - This object is the global object which contains index property\tFail\n15.4.4.20-2-15\tArray.prototype.filter - 'length' is property of the global object\tFail\n15.4.4.20-9-c-i-23\tArray.prototype.filter - This object is the global object which contains index property\tFail\n15.4.4.21-2-15\tArray.prototype.reduce - 'length' is property of the global object\tFail\n15.4.4.21-8-b-iii-1-23\tArray.prototype.reduce - This object is the global object which contains index property\tFail\n15.4.4.21-9-c-i-23\tArray.prototype.reduce - This object is the global object which contains index property\tFail\n15.4.4.22-2-15\tArray.prototype.reduceRight - 'length' is property of the global object\tFail\n15.4.4.22-8-b-iii-1-23\tArray.prototype.reduceRight - This object is the global object which contains index property\tFail\n15.4.4.22-9-c-i-23\tArray.prototype.reduceRight - This object is an global object which contains index property\tFail\n15.4.4.4-5-c-i-1\tArray.prototype.concat will concat an Array when index property (read-only) exists in Array.prototype (Step 5.c.i)\tFail\nS15.4.4.4_A3_T1\t[[Prototype]] of Array instance is Array.prototype, [[Prototype] of Array.prototype is Object.prototype\tFail\nS15.9.3.1_A5_T1\t2 arguments, (year, month)\tFail\nS15.9.3.1_A5_T2\t3 arguments, (year, month, date)\tFail\nS15.9.3.1_A5_T3\t4 arguments, (year, month, date, hours)\tFail\nS15.9.3.1_A5_T4\t5 arguments, (year, month, date, hours, minutes)\tFail\nS15.9.3.1_A5_T5\t6 arguments, (year, month, date, hours, minutes, seconds)\tFail\nS15.9.3.1_A5_T6\t7 arguments, (year, month, date, hours, minutes, seconds, ms)\tFail\n\nTest suite version: ES5 | Test suite date: 2014-09-18", "attachment_id": null, "id": 9479408, "text": "Firefox 33 now failing 53 test cases:\n\n10.4.3-1-104\tStrict mode should not ToObject thisArg if not an object. Strict equality operator should succeed.\tFail\n10.4.3-1-106\tStrict mode should not ToObject thisArg if not an object. Return type should be 'number'.\tFail\nS12.1_A4_T2\tChecking if execution of \"y={x}\" fails\tFail\nS12.6.4_A15\tUsing block within \"for-in\" Expression\tFail\n15.11.4.4-8-2\tError.prototype.toString return empty string when 'name' is empty string and 'msg' is undefined\tFail\n15.2.3.4-1-4\tObject.getOwnPropertyNames throws TypeError if 'O' is a boolean\tFail\n15.2.3.4-1-5\tObject.getOwnPropertyNames throws TypeError if 'O' is a string\tFail\n15.2.3.4-1\tObject.getOwnPropertyNames throws TypeError if type of first param is not Object\tFail\n15.2.3.6-4-292-1\tObject.defineProperty - 'O' is an Arguments object of a function that has formal parameters, 'name' is own property of 'O' which is also defined in [[ParameterMap]] of 'O', and 'desc' is data descriptor, test updating multiple attribute values of 'name' (10.6 [[DefineOwnProperty]] step 3 and 5.b)\tFail\n15.2.3.6-4-293-2\tObject.defineProperty - 'O' is an Arguments object of a function that has formal parameters, 'name' is own data property of 'O' which is also defined in [[ParameterMap]] of 'O', test TypeError is thrown when updating the [[Value]] attribute value of 'name' which is defined as unwritable and non-configurable (10.6 [[DefineOwnProperty]] step 4 and step 5b)\tFail\n15.2.3.6-4-293-3\tObject.defineProperty - 'O' is an Arguments object of a function that has formal parameters, 'name' is own data property of 'O' which is also defined in [[ParameterMap]] of 'O', test TypeError is not thrown when updating the [[Value]] attribute value of 'name' which is defined as non-writable and configurable (10.6 [[DefineOwnProperty]] step 3 and step 5.b)\tFail\n15.2.3.6-4-294-1\tObject.defineProperty - 'O' is an Arguments object of a function that has formal parameters, 'name' is own data property of 'O' which is also defined in [[ParameterMap]] of 'O', test TypeError is thrown when updating the [[Writable]] attribute value of 'name' which is defined as non-configurable (10.6 [[DefineOwnProperty]] step 4 and 5b)\tFail\n15.2.3.6-4-295-1\tObject.defineProperty - 'O' is an Arguments object of a function that has formal parameters, 'name' is own data property of 'O' which is also defined in [[ParameterMap]] of 'O', test TypeError is thrown when updating the [[Enumerable]] attribute value of 'name' which is defined as non-configurable (10.6 [[DefineOwnProperty]] step 4 and step 5b)\tFail\n15.2.3.6-4-296-1\tObject.defineProperty - 'O' is an Arguments object of a function that has formal parameters, 'name' is own data property of 'O' which is also defined in [[ParameterMap]] of 'O', test TypeError is thrown when updating the [[Configurable]] attribute value of 'name' which is defined as non-configurable (10.6 [[DefineOwnProperty]] step 4 and step 5b)\tFail\n15.2.3.6-4-354-13\tObject.defineProperty will update [[Value]] attribute of indexed property successfully when [[Configurable]] attribute is true and [[Writable]] attribute is false, 'O' is the global object (8.12.9 - step Note)\tFail\n15.2.3.6-4-354-4\tObject.defineProperty will update [[Value]] attribute successfully when [[Configurable]] attribute is true and [[Writable]] attribute is false, 'O' is the global object (8.12.9 - step Note)\tFail\n15.2.3.6-4-360-3\tES5 Attributes - Updating data property 'P' whose attributes are [[Writable]]: false, [[Enumerable]]: true, [[Configurable]]: true to an accessor property, 'O' is the global object (8.12.9 - step 9.b.i)\tFail\n15.2.3.6-4-360-7\tES5 Attributes - Updating indexed data property 'P' whose attributes are [[Writable]]: false, [[Enumerable]]: true, [[Configurable]]: true to an accessor property, 'O' is the global object (8.12.9 - step 9.b.i)\tFail\n15.2.3.6-4-531-13\tObject.defineProperty will update [[Get]] and [[Set]] attributes of indexed accessor property 'P' successfully when [[Configurable]] attribute is true, 'O' is the global object (8.12.9 step 11)\tFail\n15.2.3.6-4-531-17\tES5 Attributes - Updating an indexed accessor property 'P' using simple assignment is successful, 'O' is the global object (8.12.5 step 5.b)\tFail\n15.2.3.6-4-531-4\tObject.defineProperty will update [[Get]] and [[Set]] attributes of named accessor property 'P' successfully when [[Configurable]] attribute is true, 'O' is the global object (8.12.9 step 11)\tFail\n15.2.3.6-4-538-3\tES5 Attributes - Updating a named accessor property 'P' whose [[Configurable]] attribute is true to a data property is successful, 'O' is the global object\tFail\n15.2.3.6-4-538-7\tES5 Attributes - Updating an indexed accessor property 'P' whose [[Configurable]] attribute is true to a data property is successful, 'O' is the global object\tFail\n15.2.3.7-6-a-24\tObject.defineProperties - 'O' is the global object which implements its own [[GetOwnProperty]] method to get 'P' (8.12.9 step 1 )\tFail\n15.4.4.14-1-17\tArray.prototype.indexOf applied to the global object\tFail\n15.4.4.14-2-15\tArray.prototype.indexOf - 'length' is property of the global object\tFail\n15.4.4.14-9-b-i-23\tArray.prototype.indexOf - This object is the global object\tFail\n15.4.4.15-1-17\tArray.prototype.lastIndexOf applied to the global object\tFail\n15.4.4.15-2-15\tArray.prototype.lastIndexOf - 'length' is property of the global object\tFail\n15.4.4.15-8-b-i-23\tArray.prototype.lastIndexOf - This object is the global object\tFail\n15.4.4.16-2-15\tArray.prototype.every - 'length' is property of the global object\tFail\n15.4.4.16-7-c-i-23\tArray.prototype.every - This object is an global object which contains index property\tFail\n15.4.4.17-2-15\tArray.prototype.some - 'length' is property of the global object\tFail\n15.4.4.17-7-c-i-23\tArray.prototype.some - This object is an global object which contains index property\tFail\n15.4.4.18-2-15\tArray.prototype.forEach - 'length' is property of the global object\tFail\n15.4.4.18-7-c-i-23\tArray.prototype.forEach - This object is an global object which contains index property\tFail\n15.4.4.19-8-c-i-23\tArray.prototype.map - This object is the global object which contains index property\tFail\n15.4.4.20-2-15\tArray.prototype.filter - 'length' is property of the global object\tFail\n15.4.4.20-9-c-i-23\tArray.prototype.filter - This object is the global object which contains index property\tFail\n15.4.4.21-2-15\tArray.prototype.reduce - 'length' is property of the global object\tFail\n15.4.4.21-8-b-iii-1-23\tArray.prototype.reduce - This object is the global object which contains index property\tFail\n15.4.4.21-9-c-i-23\tArray.prototype.reduce - This object is the global object which contains index property\tFail\n15.4.4.22-2-15\tArray.prototype.reduceRight - 'length' is property of the global object\tFail\n15.4.4.22-8-b-iii-1-23\tArray.prototype.reduceRight - This object is the global object which contains index property\tFail\n15.4.4.22-9-c-i-23\tArray.prototype.reduceRight - This object is an global object which contains index property\tFail\n15.4.4.4-5-c-i-1\tArray.prototype.concat will concat an Array when index property (read-only) exists in Array.prototype (Step 5.c.i)\tFail\nS15.4.4.4_A3_T1\t[[Prototype]] of Array instance is Array.prototype, [[Prototype] of Array.prototype is Object.prototype\tFail\nS15.9.3.1_A5_T1\t2 arguments, (year, month)\tFail\nS15.9.3.1_A5_T2\t3 arguments, (year, month, date)\tFail\nS15.9.3.1_A5_T3\t4 arguments, (year, month, date, hours)\tFail\nS15.9.3.1_A5_T4\t5 arguments, (year, month, date, hours, minutes)\tFail\nS15.9.3.1_A5_T5\t6 arguments, (year, month, date, hours, minutes, seconds)\tFail\nS15.9.3.1_A5_T6\t7 arguments, (year, month, date, hours, minutes, seconds, ms)\tFail\n\nTest suite version: ES5 | Test suite date: 2014-09-18", "creation_time": "2014-10-21T18:05:16Z", "time": "2014-10-21T18:05:16Z", "bug_id": 652780, "count": 20, "creator": "alex.fdm@terra.com.br", "author": "alex.fdm@terra.com.br"}, {"creation_time": "2014-10-21T22:29:52Z", "text": "(In reply to Alexandre Folle de Menezes from comment #20)\n> Firefox 33 now failing 53 test cases:\n\nThis triage is at a quick skim, going from memory of previous investigation in many cases, tempered with inspection of cases where memory of the error message wasn't helpful.  So I may have gotten some of these wrong.  Still, I'm pretty confident it's generally accurate.  What it reveals is that test262 has a lot of tests that are broken, and a smallish handful that SpiderMonkey doesn't implement right, mostly in very edge-case behaviors.\n\nThese failures look bogus in light of ES6 additions (note that test262-the-site may well not be up-to-date with ES6 changes, nor even up-to-date with test262 on Github):\n\n> S12.1_A4_T2\tChecking if execution of \"y={x}\" fails\tFail\n> S12.6.4_A15\tUsing block within \"for-in\" Expression\tFail\n> 15.11.4.4-8-2\tError.prototype.toString return empty string when 'name' is\n> empty string and 'msg' is undefined\tFail\n\nThese look bogus in light of ES6 changes to ES5 semantics:\n\n> 15.2.3.4-1-4\tObject.getOwnPropertyNames throws TypeError if 'O' is a boolean\n> Fail\n> 15.2.3.4-1-5\tObject.getOwnPropertyNames throws TypeError if 'O' is a string\n> Fail\n> 15.2.3.4-1\tObject.getOwnPropertyNames throws TypeError if type of first\n> param is not Object\tFail\n> S15.4.4.4_A3_T1\t[[Prototype]] of Array instance is Array.prototype,\n> [[Prototype] of Array.prototype is Object.prototype\tFail\n\nThese I think are bogus in a browser environment with the DOM's global object (which has interesting [[DefineOwnProperty]] and [[Set]] behaviors for \"length\" and indexed properties) -- they may fail, but they're not actual bugs:\n\n> 15.2.3.6-4-354-13\tObject.defineProperty will update [[Value]] attribute of\n> indexed property successfully when [[Configurable]] attribute is true and\n> [[Writable]] attribute is false, 'O' is the global object (8.12.9 - step\n> Note)\tFail\n> 15.2.3.6-4-360-7\tES5 Attributes - Updating indexed data property 'P' whose\n> attributes are [[Writable]]: false, [[Enumerable]]: true, [[Configurable]]:\n> true to an accessor property, 'O' is the global object (8.12.9 - step 9.b.i)\n> Fail\n> 15.2.3.6-4-531-13\tObject.defineProperty will update [[Get]] and [[Set]]\n> attributes of indexed accessor property 'P' successfully when\n> [[Configurable]] attribute is true, 'O' is the global object (8.12.9 step\n> 11)\tFail\n> 15.2.3.6-4-538-7\tES5 Attributes - Updating an indexed accessor property 'P'\n> whose [[Configurable]] attribute is true to a data property is successful,\n> 'O' is the global object\tFail\n> 15.2.3.6-4-531-17\tES5 Attributes - Updating an indexed accessor property 'P'\n> using simple assignment is successful, 'O' is the global object (8.12.5 step\n> 5.b)\tFail\n> 15.4.4.14-1-17\tArray.prototype.indexOf applied to the global object\tFail\n> 15.4.4.14-2-15\tArray.prototype.indexOf - 'length' is property of the global\n> object\tFail\n> 15.4.4.14-9-b-i-23\tArray.prototype.indexOf - This object is the global\n> object\tFail\n> 15.4.4.15-1-17\tArray.prototype.lastIndexOf applied to the global object\tFail\n> 15.4.4.15-2-15\tArray.prototype.lastIndexOf - 'length' is property of the\n> global object\tFail\n> 15.4.4.15-8-b-i-23\tArray.prototype.lastIndexOf - This object is the global\n> object\tFail\n> 15.4.4.16-2-15\tArray.prototype.every - 'length' is property of the global\n> object\tFail\n> 15.4.4.16-7-c-i-23\tArray.prototype.every - This object is an global object\n> which contains index property\tFail\n> 15.4.4.17-2-15\tArray.prototype.some - 'length' is property of the global\n> object\tFail\n> 15.4.4.17-7-c-i-23\tArray.prototype.some - This object is an global object\n> which contains index property\tFail\n> 15.4.4.18-2-15\tArray.prototype.forEach - 'length' is property of the global\n> object\tFail\n> 15.4.4.18-7-c-i-23\tArray.prototype.forEach - This object is an global object\n> which contains index property\tFail\n> 15.4.4.19-8-c-i-23\tArray.prototype.map - This object is the global object\n> which contains index property\tFail\n> 15.4.4.20-2-15\tArray.prototype.filter - 'length' is property of the global\n> object\tFail\n> 15.4.4.20-9-c-i-23\tArray.prototype.filter - This object is the global object\n> which contains index property\tFail\n> 15.4.4.21-2-15\tArray.prototype.reduce - 'length' is property of the global\n> object\tFail\n> 15.4.4.21-8-b-iii-1-23\tArray.prototype.reduce - This object is the global\n> object which contains index property\tFail\n> 15.4.4.21-9-c-i-23\tArray.prototype.reduce - This object is the global object\n> which contains index property\tFail\n> 15.4.4.22-2-15\tArray.prototype.reduceRight - 'length' is property of the\n> global object\tFail\n> 15.4.4.22-8-b-iii-1-23\tArray.prototype.reduceRight - This object is the\n> global object which contains index property\tFail\n> 15.4.4.22-9-c-i-23\tArray.prototype.reduceRight - This object is an global\n> object which contains index property\tFail\n> 15.4.4.4-5-c-i-1\tArray.prototype.concat will concat an Array when index\n> property (read-only) exists in Array.prototype (Step 5.c.i)\tFail\n\nI suspect DOM spec choices make these tests invalid, but I haven't deeply investigated them to be certain:\n\n> 15.2.3.6-4-354-4\tObject.defineProperty will update [[Value]] attribute\n> successfully when [[Configurable]] attribute is true and [[Writable]]\n> attribute is false, 'O' is the global object (8.12.9 - step Note)\tFail\n> 15.2.3.6-4-360-3\tES5 Attributes - Updating data property 'P' whose\n> attributes are [[Writable]]: false, [[Enumerable]]: true, [[Configurable]]:\n> true to an accessor property, 'O' is the global object (8.12.9 - step 9.b.i)\n> Fail\n> 15.2.3.6-4-531-4\tObject.defineProperty will update [[Get]] and [[Set]]\n> attributes of named accessor property 'P' successfully when [[Configurable]]\n> attribute is true, 'O' is the global object (8.12.9 step 11)\tFail\n> 15.2.3.6-4-538-3\tES5 Attributes - Updating a named accessor property 'P'\n> whose [[Configurable]] attribute is true to a data property is successful,\n> 'O' is the global object\tFail\n> 15.2.3.7-6-a-24\tObject.defineProperties - 'O' is the global object which\n> implements its own [[GetOwnProperty]] method to get 'P' (8.12.9 step 1 )\tFail\n\nThese failures are valid:\n\n> 10.4.3-1-104\tStrict mode should not ToObject thisArg if not an object.\n> Strict equality operator should succeed.\tFail\n> 10.4.3-1-106\tStrict mode should not ToObject thisArg if not an object.\n> Return type should be 'number'.\tFail\n> 15.2.3.6-4-292-1\tObject.defineProperty - 'O' is an Arguments object of a\n> function that has formal parameters, 'name' is own property of 'O' which is\n> also defined in [[ParameterMap]] of 'O', and 'desc' is data descriptor, test\n> updating multiple attribute values of 'name' (10.6 [[DefineOwnProperty]]\n> step 3 and 5.b)\tFail\n> 15.2.3.6-4-293-2\tObject.defineProperty - 'O' is an Arguments object of a\n> function that has formal parameters, 'name' is own data property of 'O'\n> which is also defined in [[ParameterMap]] of 'O', test TypeError is thrown\n> when updating the [[Value]] attribute value of 'name' which is defined as\n> unwritable and non-configurable (10.6 [[DefineOwnProperty]] step 4 and step\n> 5b)\tFail\n> 15.2.3.6-4-293-3\tObject.defineProperty - 'O' is an Arguments object of a\n> function that has formal parameters, 'name' is own data property of 'O'\n> which is also defined in [[ParameterMap]] of 'O', test TypeError is not\n> thrown when updating the [[Value]] attribute value of 'name' which is\n> defined as non-writable and configurable (10.6 [[DefineOwnProperty]] step 3\n> and step 5.b)\tFail\n> 15.2.3.6-4-294-1\tObject.defineProperty - 'O' is an Arguments object of a\n> function that has formal parameters, 'name' is own data property of 'O'\n> which is also defined in [[ParameterMap]] of 'O', test TypeError is thrown\n> when updating the [[Writable]] attribute value of 'name' which is defined as\n> non-configurable (10.6 [[DefineOwnProperty]] step 4 and 5b)\tFail\n> 15.2.3.6-4-295-1\tObject.defineProperty - 'O' is an Arguments object of a\n> function that has formal parameters, 'name' is own data property of 'O'\n> which is also defined in [[ParameterMap]] of 'O', test TypeError is thrown\n> when updating the [[Enumerable]] attribute value of 'name' which is defined\n> as non-configurable (10.6 [[DefineOwnProperty]] step 4 and step 5b)\tFail\n> 15.2.3.6-4-296-1\tObject.defineProperty - 'O' is an Arguments object of a\n> function that has formal parameters, 'name' is own data property of 'O'\n> which is also defined in [[ParameterMap]] of 'O', test TypeError is thrown\n> when updating the [[Configurable]] attribute value of 'name' which is\n> defined as non-configurable (10.6 [[DefineOwnProperty]] step 4 and step 5b)\n> Fail\n\nMemory suggests this is valid, and easily fixt if someone investigates it:\n\n> S15.9.3.1_A5_T1\t2 arguments, (year, month)\tFail\n> S15.9.3.1_A5_T2\t3 arguments, (year, month, date)\tFail\n> S15.9.3.1_A5_T3\t4 arguments, (year, month, date, hours)\tFail\n> S15.9.3.1_A5_T4\t5 arguments, (year, month, date, hours, minutes)\tFail\n> S15.9.3.1_A5_T5\t6 arguments, (year, month, date, hours, minutes, seconds)\n> Fail\n> S15.9.3.1_A5_T6\t7 arguments, (year, month, date, hours, minutes, seconds,\n> ms)\tFail", "attachment_id": null, "id": 9481263, "raw_text": "(In reply to Alexandre Folle de Menezes from comment #20)\n> Firefox 33 now failing 53 test cases:\n\nThis triage is at a quick skim, going from memory of previous investigation in many cases, tempered with inspection of cases where memory of the error message wasn't helpful.  So I may have gotten some of these wrong.  Still, I'm pretty confident it's generally accurate.  What it reveals is that test262 has a lot of tests that are broken, and a smallish handful that SpiderMonkey doesn't implement right, mostly in very edge-case behaviors.\n\nThese failures look bogus in light of ES6 additions (note that test262-the-site may well not be up-to-date with ES6 changes, nor even up-to-date with test262 on Github):\n\n> S12.1_A4_T2\tChecking if execution of \"y={x}\" fails\tFail\n> S12.6.4_A15\tUsing block within \"for-in\" Expression\tFail\n> 15.11.4.4-8-2\tError.prototype.toString return empty string when 'name' is\n> empty string and 'msg' is undefined\tFail\n\nThese look bogus in light of ES6 changes to ES5 semantics:\n\n> 15.2.3.4-1-4\tObject.getOwnPropertyNames throws TypeError if 'O' is a boolean\n> Fail\n> 15.2.3.4-1-5\tObject.getOwnPropertyNames throws TypeError if 'O' is a string\n> Fail\n> 15.2.3.4-1\tObject.getOwnPropertyNames throws TypeError if type of first\n> param is not Object\tFail\n> S15.4.4.4_A3_T1\t[[Prototype]] of Array instance is Array.prototype,\n> [[Prototype] of Array.prototype is Object.prototype\tFail\n\nThese I think are bogus in a browser environment with the DOM's global object (which has interesting [[DefineOwnProperty]] and [[Set]] behaviors for \"length\" and indexed properties) -- they may fail, but they're not actual bugs:\n\n> 15.2.3.6-4-354-13\tObject.defineProperty will update [[Value]] attribute of\n> indexed property successfully when [[Configurable]] attribute is true and\n> [[Writable]] attribute is false, 'O' is the global object (8.12.9 - step\n> Note)\tFail\n> 15.2.3.6-4-360-7\tES5 Attributes - Updating indexed data property 'P' whose\n> attributes are [[Writable]]: false, [[Enumerable]]: true, [[Configurable]]:\n> true to an accessor property, 'O' is the global object (8.12.9 - step 9.b.i)\n> Fail\n> 15.2.3.6-4-531-13\tObject.defineProperty will update [[Get]] and [[Set]]\n> attributes of indexed accessor property 'P' successfully when\n> [[Configurable]] attribute is true, 'O' is the global object (8.12.9 step\n> 11)\tFail\n> 15.2.3.6-4-538-7\tES5 Attributes - Updating an indexed accessor property 'P'\n> whose [[Configurable]] attribute is true to a data property is successful,\n> 'O' is the global object\tFail\n> 15.2.3.6-4-531-17\tES5 Attributes - Updating an indexed accessor property 'P'\n> using simple assignment is successful, 'O' is the global object (8.12.5 step\n> 5.b)\tFail\n> 15.4.4.14-1-17\tArray.prototype.indexOf applied to the global object\tFail\n> 15.4.4.14-2-15\tArray.prototype.indexOf - 'length' is property of the global\n> object\tFail\n> 15.4.4.14-9-b-i-23\tArray.prototype.indexOf - This object is the global\n> object\tFail\n> 15.4.4.15-1-17\tArray.prototype.lastIndexOf applied to the global object\tFail\n> 15.4.4.15-2-15\tArray.prototype.lastIndexOf - 'length' is property of the\n> global object\tFail\n> 15.4.4.15-8-b-i-23\tArray.prototype.lastIndexOf - This object is the global\n> object\tFail\n> 15.4.4.16-2-15\tArray.prototype.every - 'length' is property of the global\n> object\tFail\n> 15.4.4.16-7-c-i-23\tArray.prototype.every - This object is an global object\n> which contains index property\tFail\n> 15.4.4.17-2-15\tArray.prototype.some - 'length' is property of the global\n> object\tFail\n> 15.4.4.17-7-c-i-23\tArray.prototype.some - This object is an global object\n> which contains index property\tFail\n> 15.4.4.18-2-15\tArray.prototype.forEach - 'length' is property of the global\n> object\tFail\n> 15.4.4.18-7-c-i-23\tArray.prototype.forEach - This object is an global object\n> which contains index property\tFail\n> 15.4.4.19-8-c-i-23\tArray.prototype.map - This object is the global object\n> which contains index property\tFail\n> 15.4.4.20-2-15\tArray.prototype.filter - 'length' is property of the global\n> object\tFail\n> 15.4.4.20-9-c-i-23\tArray.prototype.filter - This object is the global object\n> which contains index property\tFail\n> 15.4.4.21-2-15\tArray.prototype.reduce - 'length' is property of the global\n> object\tFail\n> 15.4.4.21-8-b-iii-1-23\tArray.prototype.reduce - This object is the global\n> object which contains index property\tFail\n> 15.4.4.21-9-c-i-23\tArray.prototype.reduce - This object is the global object\n> which contains index property\tFail\n> 15.4.4.22-2-15\tArray.prototype.reduceRight - 'length' is property of the\n> global object\tFail\n> 15.4.4.22-8-b-iii-1-23\tArray.prototype.reduceRight - This object is the\n> global object which contains index property\tFail\n> 15.4.4.22-9-c-i-23\tArray.prototype.reduceRight - This object is an global\n> object which contains index property\tFail\n> 15.4.4.4-5-c-i-1\tArray.prototype.concat will concat an Array when index\n> property (read-only) exists in Array.prototype (Step 5.c.i)\tFail\n\nI suspect DOM spec choices make these tests invalid, but I haven't deeply investigated them to be certain:\n\n> 15.2.3.6-4-354-4\tObject.defineProperty will update [[Value]] attribute\n> successfully when [[Configurable]] attribute is true and [[Writable]]\n> attribute is false, 'O' is the global object (8.12.9 - step Note)\tFail\n> 15.2.3.6-4-360-3\tES5 Attributes - Updating data property 'P' whose\n> attributes are [[Writable]]: false, [[Enumerable]]: true, [[Configurable]]:\n> true to an accessor property, 'O' is the global object (8.12.9 - step 9.b.i)\n> Fail\n> 15.2.3.6-4-531-4\tObject.defineProperty will update [[Get]] and [[Set]]\n> attributes of named accessor property 'P' successfully when [[Configurable]]\n> attribute is true, 'O' is the global object (8.12.9 step 11)\tFail\n> 15.2.3.6-4-538-3\tES5 Attributes - Updating a named accessor property 'P'\n> whose [[Configurable]] attribute is true to a data property is successful,\n> 'O' is the global object\tFail\n> 15.2.3.7-6-a-24\tObject.defineProperties - 'O' is the global object which\n> implements its own [[GetOwnProperty]] method to get 'P' (8.12.9 step 1 )\tFail\n\nThese failures are valid:\n\n> 10.4.3-1-104\tStrict mode should not ToObject thisArg if not an object.\n> Strict equality operator should succeed.\tFail\n> 10.4.3-1-106\tStrict mode should not ToObject thisArg if not an object.\n> Return type should be 'number'.\tFail\n> 15.2.3.6-4-292-1\tObject.defineProperty - 'O' is an Arguments object of a\n> function that has formal parameters, 'name' is own property of 'O' which is\n> also defined in [[ParameterMap]] of 'O', and 'desc' is data descriptor, test\n> updating multiple attribute values of 'name' (10.6 [[DefineOwnProperty]]\n> step 3 and 5.b)\tFail\n> 15.2.3.6-4-293-2\tObject.defineProperty - 'O' is an Arguments object of a\n> function that has formal parameters, 'name' is own data property of 'O'\n> which is also defined in [[ParameterMap]] of 'O', test TypeError is thrown\n> when updating the [[Value]] attribute value of 'name' which is defined as\n> unwritable and non-configurable (10.6 [[DefineOwnProperty]] step 4 and step\n> 5b)\tFail\n> 15.2.3.6-4-293-3\tObject.defineProperty - 'O' is an Arguments object of a\n> function that has formal parameters, 'name' is own data property of 'O'\n> which is also defined in [[ParameterMap]] of 'O', test TypeError is not\n> thrown when updating the [[Value]] attribute value of 'name' which is\n> defined as non-writable and configurable (10.6 [[DefineOwnProperty]] step 3\n> and step 5.b)\tFail\n> 15.2.3.6-4-294-1\tObject.defineProperty - 'O' is an Arguments object of a\n> function that has formal parameters, 'name' is own data property of 'O'\n> which is also defined in [[ParameterMap]] of 'O', test TypeError is thrown\n> when updating the [[Writable]] attribute value of 'name' which is defined as\n> non-configurable (10.6 [[DefineOwnProperty]] step 4 and 5b)\tFail\n> 15.2.3.6-4-295-1\tObject.defineProperty - 'O' is an Arguments object of a\n> function that has formal parameters, 'name' is own data property of 'O'\n> which is also defined in [[ParameterMap]] of 'O', test TypeError is thrown\n> when updating the [[Enumerable]] attribute value of 'name' which is defined\n> as non-configurable (10.6 [[DefineOwnProperty]] step 4 and step 5b)\tFail\n> 15.2.3.6-4-296-1\tObject.defineProperty - 'O' is an Arguments object of a\n> function that has formal parameters, 'name' is own data property of 'O'\n> which is also defined in [[ParameterMap]] of 'O', test TypeError is thrown\n> when updating the [[Configurable]] attribute value of 'name' which is\n> defined as non-configurable (10.6 [[DefineOwnProperty]] step 4 and step 5b)\n> Fail\n\nMemory suggests this is valid, and easily fixt if someone investigates it:\n\n> S15.9.3.1_A5_T1\t2 arguments, (year, month)\tFail\n> S15.9.3.1_A5_T2\t3 arguments, (year, month, date)\tFail\n> S15.9.3.1_A5_T3\t4 arguments, (year, month, date, hours)\tFail\n> S15.9.3.1_A5_T4\t5 arguments, (year, month, date, hours, minutes)\tFail\n> S15.9.3.1_A5_T5\t6 arguments, (year, month, date, hours, minutes, seconds)\n> Fail\n> S15.9.3.1_A5_T6\t7 arguments, (year, month, date, hours, minutes, seconds,\n> ms)\tFail", "tags": [], "is_private": false, "author": "jwalden@mit.edu", "creator": "jwalden@mit.edu", "count": 21, "bug_id": 652780, "time": "2014-10-21T22:29:52Z"}, {"raw_text": "(In reply to Jeff Walden [:Waldo] (remove +bmo to email) from comment #21)\n> Memory suggests this is valid, and easily fixt if someone investigates it:\n> \n> > S15.9.3.1_A5_T1\t2 arguments, (year, month)\tFail\n> > S15.9.3.1_A5_T2\t3 arguments, (year, month, date)\tFail\n> > S15.9.3.1_A5_T3\t4 arguments, (year, month, date, hours)\tFail\n> > S15.9.3.1_A5_T4\t5 arguments, (year, month, date, hours, minutes)\tFail\n> > S15.9.3.1_A5_T5\t6 arguments, (year, month, date, hours, minutes, seconds)\n> > Fail\n> > S15.9.3.1_A5_T6\t7 arguments, (year, month, date, hours, minutes, seconds,\n> > ms)\tFail\n\nI think the date tests are broken outside of PDT time zone:\n\nhttps://bugs.ecmascript.org/show_bug.cgi?id=293", "tags": [], "is_private": false, "creation_time": "2014-10-21T23:09:23Z", "text": "(In reply to Jeff Walden [:Waldo] (remove +bmo to email) from comment #21)\n> Memory suggests this is valid, and easily fixt if someone investigates it:\n> \n> > S15.9.3.1_A5_T1\t2 arguments, (year, month)\tFail\n> > S15.9.3.1_A5_T2\t3 arguments, (year, month, date)\tFail\n> > S15.9.3.1_A5_T3\t4 arguments, (year, month, date, hours)\tFail\n> > S15.9.3.1_A5_T4\t5 arguments, (year, month, date, hours, minutes)\tFail\n> > S15.9.3.1_A5_T5\t6 arguments, (year, month, date, hours, minutes, seconds)\n> > Fail\n> > S15.9.3.1_A5_T6\t7 arguments, (year, month, date, hours, minutes, seconds,\n> > ms)\tFail\n\nI think the date tests are broken outside of PDT time zone:\n\nhttps://bugs.ecmascript.org/show_bug.cgi?id=293", "attachment_id": null, "id": 9481489, "count": 22, "bug_id": 652780, "time": "2014-10-21T23:09:23Z", "author": "cpeterson@mozilla.com", "creator": "cpeterson@mozilla.com"}, {"author": "evilpies@gmail.com", "creator": "evilpies@gmail.com", "time": "2015-03-08T14:25:15Z", "count": 23, "bug_id": 652780, "text": "Created attachment 8574394\nTrunk results as of 2013-08-23\n\nhttps://github.com/tc39/test262/ is now really easy to run. It's somewhat annoying that we still don't run most the tests in our automation.\n\n - Ran 12134 tests\n - Passed 11606 tests (95.6%)\n - Failed 528 tests (4.4%)", "attachment_id": 8574394, "id": 10001160, "creation_time": "2015-03-08T14:25:15Z", "tags": [], "is_private": false, "raw_text": "https://github.com/tc39/test262/ is now really easy to run. It's somewhat annoying that we still don't run most the tests in our automation.\n\n - Ran 12134 tests\n - Passed 11606 tests (95.6%)\n - Failed 528 tests (4.4%)"}, {"count": 24, "bug_id": 652780, "time": "2015-03-08T14:29:15Z", "author": "evilpies@gmail.com", "creator": "evilpies@gmail.com", "raw_text": "s/2013-08-23/2015-03-08/", "tags": [], "is_private": false, "creation_time": "2015-03-08T14:29:15Z", "text": "s/2013-08-23/2015-03-08/", "attachment_id": null, "id": 10001164}, {"bug_id": 652780, "count": 25, "time": "2015-03-08T15:20:33Z", "creator": "scott@perturb.org", "author": "scott@perturb.org", "raw_text": "@evilpie what version are you running? I just ran Test262 on Firefox 36.0.1 on Windows and got\n\nTotal tests ran: 11552 | Pass: 11449 | Fail: 103 | Failed to load: 0\n\nIs there a newer version than whats on http://test262.ecmascript.org/? You ran more test than I did.", "is_private": false, "tags": [], "creation_time": "2015-03-08T15:20:33Z", "attachment_id": null, "id": 10001226, "text": "@evilpie what version are you running? I just ran Test262 on Firefox 36.0.1 on Windows and got\n\nTotal tests ran: 11552 | Pass: 11449 | Fail: 103 | Failed to load: 0\n\nIs there a newer version than whats on http://test262.ecmascript.org/? You ran more test than I did."}, {"raw_text": "The website uses the \"es5-tests\" branch (https://github.com/tc39/test262/tree/es5-tests).", "tags": [], "is_private": false, "creation_time": "2015-03-08T15:27:05Z", "text": "The website uses the \"es5-tests\" branch (https://github.com/tc39/test262/tree/es5-tests).", "attachment_id": null, "id": 10001237, "bug_id": 652780, "count": 26, "time": "2015-03-08T15:27:05Z", "creator": "andrebargull@googlemail.com", "author": "andrebargull@googlemail.com"}, {"text": "(In reply to Tom Schuster [:evilpie] from comment #23)\n> https://github.com/tc39/test262/ is now really easy to run. It's somewhat\n> annoying that we still don't run most the tests in our automation.\n\nFodder for another SM job?", "id": 10002148, "attachment_id": null, "creation_time": "2015-03-09T02:21:13Z", "tags": [], "is_private": false, "raw_text": "(In reply to Tom Schuster [:evilpie] from comment #23)\n> https://github.com/tc39/test262/ is now really easy to run. It's somewhat\n> annoying that we still don't run most the tests in our automation.\n\nFodder for another SM job?", "creator": "ryanvm@gmail.com", "author": "ryanvm@gmail.com", "time": "2015-03-09T02:21:13Z", "bug_id": 652780, "count": 27}, {"attachment_id": null, "id": 11599095, "text": "Found a new host:\nhttp://v8.github.io/test262/website/default.html", "creation_time": "2016-08-04T14:46:39Z", "is_private": false, "tags": [], "raw_text": "Found a new host:\nhttp://v8.github.io/test262/website/default.html", "author": "alex.fdm@terra.com.br", "creator": "alex.fdm@terra.com.br", "time": "2016-08-04T14:46:39Z", "count": 28, "bug_id": 652780}]}}}