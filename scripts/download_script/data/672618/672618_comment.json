{"comments": {}, "bugs": {"672618": {"comments": [{"author": "mbeltzner@gmail.com", "creator": "mbeltzner@gmail.com", "time": "2011-07-19T20:20:21Z", "attachment_id": null, "text": "Bug 251137 was originally opened with a simple purpose, which was to provide greater control to users and prevent what's becoming a common error scenario:\n\n - user sees a link on a page\n - user thinks \"boy, I want to be sure that opens in a new tab/window\"\n - user ctrl/shift clicks on the link\n\nIf the link was, in fact, a javascript URI, then what happens is a new tab is opened with that javascript URI unhelpfully in the locationBar. The user expectation was that it would open in a new tab.\n\nNow, in most cases (I have no data to hand, but it is certainly true of virtually every case that I've personally run across) the javascript URI was either going to open that link in a new tab or a popup window. I am *not* advocating that we force popup windows into a new tab - that's apparently much harder, and someone's free to file a different bug for that issue.\n\nWhat I *am* advocating is that a simple fix to get closer to user expectations would be to ignore the modifier when a user clicks on a javascript URI. There are a couple of corner cases which could annoy people:\n\n - user wanted to open in new window, and instead it opens a new tab, or\n - user wanted to open in a new tab, and instead it opens a popup\n - instead it does some JS thing on the page (ie: opens in lightbox)\n\nBut I would argue both of those are better than\n\n - it opens a useless tab", "creation_time": "2011-07-19T20:20:21Z", "raw_text": "Bug 251137 was originally opened with a simple purpose, which was to provide greater control to users and prevent what's becoming a common error scenario:\n\n - user sees a link on a page\n - user thinks \"boy, I want to be sure that opens in a new tab/window\"\n - user ctrl/shift clicks on the link\n\nIf the link was, in fact, a javascript URI, then what happens is a new tab is opened with that javascript URI unhelpfully in the locationBar. The user expectation was that it would open in a new tab.\n\nNow, in most cases (I have no data to hand, but it is certainly true of virtually every case that I've personally run across) the javascript URI was either going to open that link in a new tab or a popup window. I am *not* advocating that we force popup windows into a new tab - that's apparently much harder, and someone's free to file a different bug for that issue.\n\nWhat I *am* advocating is that a simple fix to get closer to user expectations would be to ignore the modifier when a user clicks on a javascript URI. There are a couple of corner cases which could annoy people:\n\n - user wanted to open in new window, and instead it opens a new tab, or\n - user wanted to open in a new tab, and instead it opens a popup\n - instead it does some JS thing on the page (ie: opens in lightbox)\n\nBut I would argue both of those are better than\n\n - it opens a useless tab", "bug_id": 672618, "id": 5599949, "tags": [], "count": 0, "is_private": false}, {"author": "gavin.sharp@gmail.com", "creator": "gavin.sharp@gmail.com", "raw_text": "I think this is sufficient, but I don't particularly have time to look into tests at the moment.", "creation_time": "2011-07-19T20:48:33Z", "attachment_id": 546891, "time": "2011-07-19T20:48:33Z", "text": "Created attachment 546891\npatch\n\nI think this is sufficient, but I don't particularly have time to look into tests at the moment.", "id": 5600029, "is_private": false, "count": 1, "tags": [], "bug_id": 672618}, {"author": "mbeltzner@gmail.com", "creator": "mbeltzner@gmail.com", "id": 5600499, "count": 2, "is_private": false, "tags": [], "bug_id": 672618, "creation_time": "2011-07-19T23:15:35Z", "raw_text": "Asking for review (Dao, feel free to reassign, but I figure you know this area best) and ui-review (ohai, Alex!)\n\nAlso asking for feedback from bz (who is wise in the way of loading documents and such) and Jesse (who is wise in the way of security and how this might intersect with it, though I struggle to see that as an issue)", "attachment_id": 546891, "time": "2011-07-19T23:15:35Z", "text": "Comment on attachment 546891\npatch\n\nAsking for review (Dao, feel free to reassign, but I figure you know this area best) and ui-review (ohai, Alex!)\n\nAlso asking for feedback from bz (who is wise in the way of loading documents and such) and Jesse (who is wise in the way of security and how this might intersect with it, though I struggle to see that as an issue)"}, {"is_private": false, "count": 3, "tags": [], "id": 5600530, "bug_id": 672618, "creation_time": "2011-07-19T23:30:06Z", "raw_text": "I have been accused of patch stealing; my bad. Mostly wanted to get the ui team's opinion.", "creator": "mbeltzner@gmail.com", "text": "Comment on attachment 546891\npatch\n\nI have been accused of patch stealing; my bad. Mostly wanted to get the ui team's opinion.", "time": "2011-07-19T23:30:06Z", "attachment_id": 546891, "author": "mbeltzner@gmail.com"}, {"creator": "jruderman@gmail.com", "author": "jruderman@gmail.com", "bug_id": 672618, "count": 4, "is_private": false, "tags": [], "id": 5600581, "text": "Seems like a reasonable thing to do until we can fix bug 55696.\n\nBug 151142 and bug 251137 may be related. Bug 138198 is the SeaMonkey equivalent.\n\nComments on the patch:\n\n* It might be good for the comment to explain why we're doing this (by referring to bug 55696 and/or bug 335963).\n\n* Please don't parse protocols out of URLs using regexps.\n\n* We should make sure the patch does the right thing for middle-clicks.", "time": "2011-07-19T23:50:53Z", "attachment_id": null, "creation_time": "2011-07-19T23:50:53Z", "raw_text": "Seems like a reasonable thing to do until we can fix bug 55696.\n\nBug 151142 and bug 251137 may be related. Bug 138198 is the SeaMonkey equivalent.\n\nComments on the patch:\n\n* It might be good for the comment to explain why we're doing this (by referring to bug 55696 and/or bug 335963).\n\n* Please don't parse protocols out of URLs using regexps.\n\n* We should make sure the patch does the right thing for middle-clicks."}, {"author": "faaborg@gmail.com", "creator": "faaborg@gmail.com", "id": 5600655, "tags": [], "is_private": false, "count": 5, "bug_id": 672618, "creation_time": "2011-07-20T00:30:09Z", "raw_text": "yep, better than a useless tab", "time": "2011-07-20T00:30:09Z", "attachment_id": 546891, "text": "Comment on attachment 546891\npatch\n\nyep, better than a useless tab"}, {"raw_text": "(In reply to comment #4)\n> * Please don't parse protocols out of URLs using regexps.\n\nGenerally I would agree with this, but there's no scriptable way to access the link's existing underlying nsIURI, as far as I know, and creating another nsIURI manually just to parse the scheme is unnecessary overhead - the .href return value is nsIURI.spec, so we don't need to deal with arbitrary values, and this particular check isn't critical to get 100% right.", "creation_time": "2011-07-20T01:48:26Z", "attachment_id": null, "time": "2011-07-20T01:48:26Z", "author": "gavin.sharp@gmail.com", "text": "(In reply to comment #4)\n> * Please don't parse protocols out of URLs using regexps.\n\nGenerally I would agree with this, but there's no scriptable way to access the link's existing underlying nsIURI, as far as I know, and creating another nsIURI manually just to parse the scheme is unnecessary overhead - the .href return value is nsIURI.spec, so we don't need to deal with arbitrary values, and this particular check isn't critical to get 100% right.", "creator": "gavin.sharp@gmail.com", "id": 5600795, "is_private": false, "count": 6, "tags": [], "bug_id": 672618}, {"author": "bzbarsky@mit.edu", "creator": "bzbarsky@mit.edu", "raw_text": "In an ideal world we'd have such a getter, btw... Worth filing a bug on.  Even more, we'd ideally be checking that this is a script-executing protocol instead of assuming that javascript: is the only such beastie.\n\nBut yeah, I think in this case this is probably alright.  Certainly the failure mode is not insecure or anything like that, which is the usual worry with manual parsing and scheme white/blacklisting.", "creation_time": "2011-07-20T03:37:24Z", "time": "2011-07-20T03:37:24Z", "attachment_id": null, "text": "In an ideal world we'd have such a getter, btw... Worth filing a bug on.  Even more, we'd ideally be checking that this is a script-executing protocol instead of assuming that javascript: is the only such beastie.\n\nBut yeah, I think in this case this is probably alright.  Certainly the failure mode is not insecure or anything like that, which is the usual worry with manual parsing and scheme white/blacklisting.", "id": 5600865, "count": 7, "is_private": false, "tags": [], "bug_id": 672618}, {"author": "smjg@iname.com", "creator": "smjg@iname.com", "raw_text": "The last comment was 2 years ago - what's the current status?  It seems to have been partly implemented.  This is actually a real annoyance.\n\nWhen I middle-click a link, I want to open the linked-to page in a new tab.  Even if the JS implementation of the link is such that the browser can't open it in a new tab, opening it in the current tab (and consequently throwing me out of some Flash game or other interactive feature I am using on the page) without warning me first is the absolute last thing I want.\n\nOther bugs I've found about the handling of middle-click on JavaScript URLs:\n\nBug 126862 - middle click on javascript links should act like normal click\nBug 138198 - \"open link in new tab\" (middle or ctrl click) doesn't work for javascript links (should act like normal click)\nBug 175836 - middle-click on javascript urls should... work\nBug 226497 - Middle clicking on javascript link or form button does not open new tab.", "creation_time": "2013-12-25T23:16:44Z", "attachment_id": null, "time": "2013-12-25T23:16:44Z", "text": "The last comment was 2 years ago - what's the current status?  It seems to have been partly implemented.  This is actually a real annoyance.\n\nWhen I middle-click a link, I want to open the linked-to page in a new tab.  Even if the JS implementation of the link is such that the browser can't open it in a new tab, opening it in the current tab (and consequently throwing me out of some Flash game or other interactive feature I am using on the page) without warning me first is the absolute last thing I want.\n\nOther bugs I've found about the handling of middle-click on JavaScript URLs:\n\nBug 126862 - middle click on javascript links should act like normal click\nBug 138198 - \"open link in new tab\" (middle or ctrl click) doesn't work for javascript links (should act like normal click)\nBug 175836 - middle-click on javascript urls should... work\nBug 226497 - Middle clicking on javascript link or form button does not open new tab.", "id": 8226779, "tags": [], "count": 8, "is_private": false, "bug_id": 672618}, {"text": "*** Bug 601118 has been marked as a duplicate of this bug. ***", "creator": "dao+bmo@mozilla.com", "attachment_id": null, "time": "2019-07-04T10:06:21Z", "author": "dao+bmo@mozilla.com", "raw_text": "", "creation_time": "2019-07-04T10:06:21Z", "bug_id": 672618, "is_private": false, "count": 9, "tags": [], "id": 14214723}, {"bug_id": 672618, "count": 10, "is_private": false, "tags": [], "id": 14214725, "text": "*** Bug 1525585 has been marked as a duplicate of this bug. ***", "attachment_id": null, "time": "2019-07-04T10:09:41Z", "raw_text": "", "creation_time": "2019-07-04T10:09:41Z", "creator": "dao+bmo@mozilla.com", "author": "dao+bmo@mozilla.com"}, {"tags": ["advocacy"], "count": 11, "is_private": false, "id": 14214802, "bug_id": 672618, "raw_text": "> Seems like a reasonable thing to do until we can fix bug 55696.\n\nNo, please don't apply such measly workaround!\n\nThat bug has been open for 19 years meanwhile and we'd probably wait another 19 years for a reasonable fix if we get it pseudo-fixed now in the wrong way.\n\nIf I middle-click, ctrl-click, shift-click, whatever, I expect uniform behaviour. The user really does not care whether the website programmer has used real links or some broken JavaScript crap at that point.\nMaking behaviour dependent on uneducated implementation details would violate the principle of least astonishment.", "creation_time": "2019-07-04T11:33:29Z", "text": "> Seems like a reasonable thing to do until we can fix bug 55696.\n\nNo, please don't apply such measly workaround!\n\nThat bug has been open for 19 years meanwhile and we'd probably wait another 19 years for a reasonable fix if we get it pseudo-fixed now in the wrong way.\n\nIf I middle-click, ctrl-click, shift-click, whatever, I expect uniform behaviour. The user really does not care whether the website programmer has used real links or some broken JavaScript crap at that point.\nMaking behaviour dependent on uneducated implementation details would violate the principle of least astonishment.", "time": "2019-07-04T11:33:29Z", "attachment_id": null, "creator": "towo@towo.net", "author": "towo@towo.net"}, {"author": "dao+bmo@mozilla.com", "creator": "dao+bmo@mozilla.com", "time": "2019-07-04T13:00:28Z", "attachment_id": 9075948, "text": "Created attachment 9075948\nBug 672618 - when user ctrl / shift clicks on a javascript url, ignore the modifier. r=Gijs", "raw_text": "", "creation_time": "2019-07-04T13:00:28Z", "bug_id": 672618, "id": 14214955, "is_private": false, "count": 12, "tags": []}, {"creator": "towo@towo.net", "author": "towo@towo.net", "text": "The original report is \"advocating\", according to its own wording, so why was my comment hidden as \"advocacy\".\nHow to handle this is obviously controversial and discussion is important.\nAbout your patch: please don't! See my \"advocacy\".", "attachment_id": null, "time": "2019-07-04T13:16:42Z", "raw_text": "The original report is \"advocating\", according to its own wording, so why was my comment hidden as \"advocacy\".\nHow to handle this is obviously controversial and discussion is important.\nAbout your patch: please don't! See my \"advocacy\".", "creation_time": "2019-07-04T13:16:42Z", "bug_id": 672618, "tags": ["off-topic"], "is_private": false, "count": 13, "id": 14214982}, {"author": "dao+bmo@mozilla.com", "creator": "dao+bmo@mozilla.com", "id": 14214996, "count": 14, "is_private": false, "tags": [], "bug_id": 672618, "creation_time": "2019-07-04T13:23:01Z", "raw_text": "(In reply to Thomas Wolff from comment #13)\n> The original report is \"advocating\", according to its own wording, so why was my comment hidden as \"advocacy\".\n> How to handle this is obviously controversial and discussion is important.\n> About your patch: please don't! See my \"advocacy\".\n\nYou added nothing to the discussion other than that you'd like bug 55696 to be fixed instead. That logic is flawed; not fixing this bug won't make it more likely that we'll fix bug 55696, as the last several years have shown.", "time": "2019-07-04T13:23:01Z", "attachment_id": null, "text": "(In reply to Thomas Wolff from comment #13)\n> The original report is \"advocating\", according to its own wording, so why was my comment hidden as \"advocacy\".\n> How to handle this is obviously controversial and discussion is important.\n> About your patch: please don't! See my \"advocacy\".\n\nYou added nothing to the discussion other than that you'd like bug 55696 to be fixed instead. That logic is flawed; not fixing this bug won't make it more likely that we'll fix bug 55696, as the last several years have shown."}, {"bug_id": 672618, "id": 14216570, "tags": [], "is_private": false, "count": 15, "time": "2019-07-05T13:43:15Z", "attachment_id": null, "text": "I'd like to understand what the core DOM bit here is, exactly.  Generally speaking, that part should all be covered by specs, so either we're not following the spec now (in what way?) or we're not following the spec after the changes (in what way and why?) or whatever the proposed change is is not covered by the spec (should probably be fixed)...", "creation_time": "2019-07-05T13:43:15Z", "raw_text": "I'd like to understand what the core DOM bit here is, exactly.  Generally speaking, that part should all be covered by specs, so either we're not following the spec now (in what way?) or we're not following the spec after the changes (in what way and why?) or whatever the proposed change is is not covered by the spec (should probably be fixed)...", "author": "bzbarsky@mit.edu", "creator": "bzbarsky@mit.edu"}, {"author": "dao+bmo@mozilla.com", "creator": "dao+bmo@mozilla.com", "id": 14216618, "count": 16, "is_private": false, "tags": [], "bug_id": 672618, "raw_text": "(In reply to Boris Zbarsky [:bzbarsky, bz on IRC] from comment #15)\n> I'd like to understand what the core DOM bit here is, exactly.\n\nThis code prevents default link handling when using a modifier: https://searchfox.org/mozilla-central/rev/040aa667f419932adf425d92c7438f03230ad96b/dom/base/Element.cpp#3095-3099\n\nIf changing this is a spec violation, then Chrome already violates the spec, and the spec should likely be updated...", "creation_time": "2019-07-05T14:13:21Z", "time": "2019-07-05T14:13:21Z", "attachment_id": null, "text": "(In reply to Boris Zbarsky [:bzbarsky, bz on IRC] from comment #15)\n> I'd like to understand what the core DOM bit here is, exactly.\n\nThis code prevents default link handling when using a modifier: https://searchfox.org/mozilla-central/rev/040aa667f419932adf425d92c7438f03230ad96b/dom/base/Element.cpp#3095-3099\n\nIf changing this is a spec violation, then Chrome already violates the spec, and the spec should likely be updated..."}, {"attachment_id": null, "time": "2019-07-05T15:04:31Z", "text": "Yes, I know what our existing code does.  My question was what the proposed changes to that are.", "creation_time": "2019-07-05T15:04:31Z", "raw_text": "Yes, I know what our existing code does.  My question was what the proposed changes to that are.", "bug_id": 672618, "id": 14216680, "tags": [], "count": 17, "is_private": false, "author": "bzbarsky@mit.edu", "creator": "bzbarsky@mit.edu"}, {"time": "2019-07-05T15:11:50Z", "attachment_id": null, "text": "(In reply to Boris Zbarsky [:bzbarsky, bz on IRC] from comment #17)\n> Yes, I know what our existing code does.  My question was what the proposed changes to that are.\n\nIgnore the modifiers for js links, i.e. open the link as if no modifier was used... There's a patch attached where you could take a closer look.", "creation_time": "2019-07-05T15:11:50Z", "raw_text": "(In reply to Boris Zbarsky [:bzbarsky, bz on IRC] from comment #17)\n> Yes, I know what our existing code does.  My question was what the proposed changes to that are.\n\nIgnore the modifiers for js links, i.e. open the link as if no modifier was used... There's a patch attached where you could take a closer look.", "bug_id": 672618, "id": 14216688, "is_private": false, "count": 18, "tags": [], "author": "dao+bmo@mozilla.com", "creator": "dao+bmo@mozilla.com"}, {"creator": "bzbarsky@mit.edu", "author": "bzbarsky@mit.edu", "count": 19, "is_private": false, "tags": [], "id": 14216719, "bug_id": 672618, "raw_text": "Yes, I saw the patch.  What I wanted to know is what the patch is _trying_ to do as opposed to what it's _doing_, because one of the things a DOM reviewer will presumably want to check is whether what it's doing is what it's actually trying to do.\n\nThe comments about \"current window\" in the patch don't help, because there's no guarantee that a left click will load the link \"in the current window\" either (e.g. the `<a>` could have a `target` attribute), and that made the \"what is the goal?\" question even harder to divine from the code+comments.  I guess smaug already commented about that...\n\nI'm a little torn about whether it's better to handle this stuff in the core element code or in the UI code that normally handles modifier-clicks anyway.  The UI code could just call `.click()` on the anchor in question if it wants to trigger it \"normally\", right?", "creation_time": "2019-07-05T15:31:15Z", "text": "Yes, I saw the patch.  What I wanted to know is what the patch is _trying_ to do as opposed to what it's _doing_, because one of the things a DOM reviewer will presumably want to check is whether what it's doing is what it's actually trying to do.\n\nThe comments about \"current window\" in the patch don't help, because there's no guarantee that a left click will load the link \"in the current window\" either (e.g. the `<a>` could have a `target` attribute), and that made the \"what is the goal?\" question even harder to divine from the code+comments.  I guess smaug already commented about that...\n\nI'm a little torn about whether it's better to handle this stuff in the core element code or in the UI code that normally handles modifier-clicks anyway.  The UI code could just call `.click()` on the anchor in question if it wants to trigger it \"normally\", right?", "time": "2019-07-05T15:31:15Z", "attachment_id": null}, {"attachment_id": null, "time": "2019-07-05T15:40:09Z", "text": "`target` handling is an open question, I was going to investigate further Chrome's behavior.\n\nUsing `click() ` is an interesting idea, I can give that a try.", "creation_time": "2019-07-05T15:40:09Z", "raw_text": "`target` handling is an open question, I was going to investigate further Chrome's behavior.\n\nUsing `click() ` is an interesting idea, I can give that a try.", "bug_id": 672618, "id": 14216731, "tags": [], "is_private": false, "count": 20, "author": "dao+bmo@mozilla.com", "creator": "dao+bmo@mozilla.com"}, {"bug_id": 672618, "id": 14216881, "tags": [], "is_private": false, "count": 21, "time": "2019-07-05T17:32:33Z", "attachment_id": null, "text": "(In reply to Boris Zbarsky [:bzbarsky, bz on IRC] from comment #19)\n> The UI code could just call `.click()` on the anchor in question if it wants to trigger it \"normally\", right?\n\nThis sort of works but triggers another click event. So this:\n\n`data:text/html;,<a href=\"javascript:\" onclick=\"alert('hi')\">click me`\n\n... gives one alert for a middle click (which might be expected), but two alerts for e.g. shift+click which definitely isn't expected. I'm guessing we'd want to hide the original click event from the page. Can this be done from UI code in the child process? `event.stopPropagation()` in `ClickHandlerChild.jsm` doesn't seem to work. This is a capturing listener in the system group.", "creation_time": "2019-07-05T17:32:33Z", "raw_text": "(In reply to Boris Zbarsky [:bzbarsky, bz on IRC] from comment #19)\n> The UI code could just call `.click()` on the anchor in question if it wants to trigger it \"normally\", right?\n\nThis sort of works but triggers another click event. So this:\n\n`data:text/html;,<a href=\"javascript:\" onclick=\"alert('hi')\">click me`\n\n... gives one alert for a middle click (which might be expected), but two alerts for e.g. shift+click which definitely isn't expected. I'm guessing we'd want to hide the original click event from the page. Can this be done from UI code in the child process? `event.stopPropagation()` in `ClickHandlerChild.jsm` doesn't seem to work. This is a capturing listener in the system group.", "author": "dao+bmo@mozilla.com", "creator": "dao+bmo@mozilla.com"}, {"author": "bzbarsky@mit.edu", "creator": "bzbarsky@mit.edu", "attachment_id": null, "time": "2019-07-05T17:42:16Z", "text": "> gives one alert for a middle click (which might be expected)\n\nThat's a bug.  See bug 1533630.  That said, for modifier+left-click this would in fact be an issue.\n\nMaybe we should just add an API on anchors (chromeonly) to trigger the activation behavior directly.  As a core change, I'd prefer that to adding javascript: special-casing in the click handling, I suspect, but I'd like to know what Olli thinks.", "raw_text": "> gives one alert for a middle click (which might be expected)\n\nThat's a bug.  See bug 1533630.  That said, for modifier+left-click this would in fact be an issue.\n\nMaybe we should just add an API on anchors (chromeonly) to trigger the activation behavior directly.  As a core change, I'd prefer that to adding javascript: special-casing in the click handling, I suspect, but I'd like to know what Olli thinks.", "creation_time": "2019-07-05T17:42:16Z", "bug_id": 672618, "id": 14216894, "is_private": false, "count": 22, "tags": []}, {"author": "dao+bmo@mozilla.com", "creator": "dao+bmo@mozilla.com", "raw_text": "(In reply to Boris Zbarsky [:bzbarsky, bz on IRC] from comment #22)\n> Maybe we should just add an API on anchors (chromeonly) to trigger the activation behavior directly.  As a core change, I'd prefer that to adding javascript: special-casing in the click handling, I suspect, but I'd like to know what Olli thinks.\n\nHmm, wouldn't dispatching a `DOMActivate` event do the trick?", "creation_time": "2019-07-05T17:57:02Z", "attachment_id": null, "time": "2019-07-05T17:57:02Z", "text": "(In reply to Boris Zbarsky [:bzbarsky, bz on IRC] from comment #22)\n> Maybe we should just add an API on anchors (chromeonly) to trigger the activation behavior directly.  As a core change, I'd prefer that to adding javascript: special-casing in the click handling, I suspect, but I'd like to know what Olli thinks.\n\nHmm, wouldn't dispatching a `DOMActivate` event do the trick?", "id": 14216911, "count": 23, "is_private": false, "tags": [], "bug_id": 672618}, {"creation_time": "2019-07-05T18:00:21Z", "raw_text": "It would, for the moment, but that's also page-observable, of course.  Maybe that's OK.", "text": "It would, for the moment, but that's also page-observable, of course.  Maybe that's OK.", "creator": "bzbarsky@mit.edu", "author": "bzbarsky@mit.edu", "time": "2019-07-05T18:00:21Z", "attachment_id": null, "tags": [], "count": 24, "is_private": false, "id": 14216915, "bug_id": 672618}, {"creation_time": "2019-07-05T19:43:40Z", "raw_text": "Middle click on data:text/html;,<a href=\"javascript:\" onclick=\"alert('hi')\">click me\nshouldn't show any alert, since middle click doesn't produce click events on web, bug 1379466\n\nDOMActivate without click is perhaps confusing.\n\nA chromeonly method on anchors and other links to trigger activation behavior sounds good to me. But it should\nstill somehow deal with the link target. Should it just not care about target if scheme is javascript - is that what other browsers do?\n(If so, that is something to get to the spec)", "attachment_id": null, "time": "2019-07-05T19:43:40Z", "text": "Middle click on data:text/html;,<a href=\"javascript:\" onclick=\"alert('hi')\">click me\nshouldn't show any alert, since middle click doesn't produce click events on web, bug 1379466\n\nDOMActivate without click is perhaps confusing.\n\nA chromeonly method on anchors and other links to trigger activation behavior sounds good to me. But it should\nstill somehow deal with the link target. Should it just not care about target if scheme is javascript - is that what other browsers do?\n(If so, that is something to get to the spec)", "id": 14217111, "tags": [], "count": 25, "is_private": false, "bug_id": 672618, "author": "bugs@pettay.fi", "creator": "bugs@pettay.fi"}, {"creator": "erwinm@alumni.beloit.edu", "author": "erwinm@alumni.beloit.edu", "creation_time": "2021-02-09T20:26:57Z", "raw_text": "Not a solution, but perhaps a partial workaround.\n\n1. With links, Firefox can already show a status panel in the lower-left corner.\n\n2. With some fake-links, Firefox can already NOT show a status panel in the lower left corner.\n\n3. With some fake-links, Firefox shows code such as javascript:; instead of a url.\n\nThe status panel, or its absence, is out of the way, hard to see, and therefore, not much use to users who don't expect to encounter this bug.\n\nI don't know the code, but whatever cues Firefox uses to show or not show a status panel could also be used to show a link cursor or a fake-link cursor on mouseover, where 1. a status panel NOT including \"javascript\" in its location would get a link icon, and 2. a status panel including \"javascript\" in its location, or the lack of a status panel, or a status panel of length 0, would get a fake-link icon.\n\nI posted a version of that as bug 1690165, which is currently WON'TFIX.", "text": "Not a solution, but perhaps a partial workaround.\n\n1. With links, Firefox can already show a status panel in the lower-left corner.\n\n2. With some fake-links, Firefox can already NOT show a status panel in the lower left corner.\n\n3. With some fake-links, Firefox shows code such as javascript:; instead of a url.\n\nThe status panel, or its absence, is out of the way, hard to see, and therefore, not much use to users who don't expect to encounter this bug.\n\nI don't know the code, but whatever cues Firefox uses to show or not show a status panel could also be used to show a link cursor or a fake-link cursor on mouseover, where 1. a status panel NOT including \"javascript\" in its location would get a link icon, and 2. a status panel including \"javascript\" in its location, or the lack of a status panel, or a status panel of length 0, would get a fake-link icon.\n\nI posted a version of that as bug 1690165, which is currently WON'TFIX.", "time": "2021-02-09T20:26:57Z", "attachment_id": null, "count": 26, "is_private": false, "tags": [], "id": 15257591, "bug_id": 672618}]}}}