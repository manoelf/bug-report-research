{"comments": {}, "bugs": {"666713": {"comments": [{"creation_time": "2011-06-23T19:42:00Z", "is_private": false, "creator": "benjamin@smedbergs.us", "tags": [], "attachment_id": null, "bug_id": 666713, "id": 5551926, "count": 0, "text": "In order to scope content processes, we need a dynamic analysis of ways in which chrome touches content. We want to identify:\n\n    non message-manager scripts\n    which touch a \"content object\"\n    or implement nsIWebProgressListener \n\nDefinitions:\n\nNon message-manager script is any chrome script that isn't run through nsIChromeFrameMessageManager.loadFrameScript.\n\nContent objects are at least the following:\n\n    Any DOM object (window, document, or node)\n    Docshell or docshell derivative\n    nsIWebProgress\n    nsIDOMWindowUtils\n\nAlthough it turns out that the nsIWebProgressListener bit may be unnecessary, because it's necessary to get a nsIWebProgress to attach a listener.", "author": "benjamin@smedbergs.us", "time": "2011-06-23T19:42:00Z", "raw_text": "In order to scope content processes, we need a dynamic analysis of ways in which chrome touches content. We want to identify:\n\n    non message-manager scripts\n    which touch a \"content object\"\n    or implement nsIWebProgressListener \n\nDefinitions:\n\nNon message-manager script is any chrome script that isn't run through nsIChromeFrameMessageManager.loadFrameScript.\n\nContent objects are at least the following:\n\n    Any DOM object (window, document, or node)\n    Docshell or docshell derivative\n    nsIWebProgress\n    nsIDOMWindowUtils\n\nAlthough it turns out that the nsIWebProgressListener bit may be unnecessary, because it's necessary to get a nsIWebProgress to attach a listener."}, {"creator": "adw@mozilla.com", "author": "adw@mozilla.com", "text": "Created attachment 541500\nWIP patch\n\nThis patch is close to reviewable I think.  Benjamin, could you verify that it captures what we want in the manner we want?\n\nExample output when starting up Firefox and immediately quiting is here: http://people.mozilla.com/~adw/e10s-content-log.txt", "count": 1, "id": 5552346, "bug_id": 666713, "is_private": false, "creation_time": "2011-06-23T21:28:26Z", "time": "2011-06-23T21:28:26Z", "attachment_id": 541500, "raw_text": "This patch is close to reviewable I think.  Benjamin, could you verify that it captures what we want in the manner we want?\n\nExample output when starting up Firefox and immediately quiting is here: http://people.mozilla.com/~adw/e10s-content-log.txt", "tags": []}, {"raw_text": "Blake, could you check that I've logged all the right wrapper sites to support the goal in comment 0?", "attachment_id": 541500, "time": "2011-06-23T21:29:16Z", "tags": [], "count": 2, "text": "Comment on attachment 541500\nWIP patch\n\nBlake, could you check that I've logged all the right wrapper sites to support the goal in comment 0?", "author": "adw@mozilla.com", "creator": "adw@mozilla.com", "creation_time": "2011-06-23T21:29:16Z", "is_private": false, "bug_id": 666713, "id": 5552350}, {"raw_text": "Hmm, looks like I'm missing some wrapper creation sites:  there are some property accesses on wrappers that don't have corresponding previous creations.  Logging WrapperFactory::PrepareForWrapping right after the JSAutoEnterCompartment is created seems to capture them.", "time": "2011-06-23T23:27:29Z", "bug_id": 666713, "id": 5552763, "count": 3, "text": "Hmm, looks like I'm missing some wrapper creation sites:  there are some property accesses on wrappers that don't have corresponding previous creations.  Logging WrapperFactory::PrepareForWrapping right after the JSAutoEnterCompartment is created seems to capture them.", "author": "adw@mozilla.com", "tags": [], "attachment_id": null, "creation_time": "2011-06-23T23:27:29Z", "is_private": false, "creator": "adw@mozilla.com"}, {"attachment_id": null, "tags": [], "creator": "adw@mozilla.com", "creation_time": "2011-06-25T01:15:41Z", "is_private": false, "raw_text": "Oh, it's probably obvious, but to get a clean log like the one in comment 1 you can grep stdout:\n\negrep '^@adw|^[0-9]+|^JavaScript stack is empty' | sed 's/^@adw //'\n\nThe @adws are only temporary of course, and I expect the printfs are too.", "time": "2011-06-25T01:15:41Z", "count": 4, "text": "Oh, it's probably obvious, but to get a clean log like the one in comment 1 you can grep stdout:\n\negrep '^@adw|^[0-9]+|^JavaScript stack is empty' | sed 's/^@adw //'\n\nThe @adws are only temporary of course, and I expect the printfs are too.", "author": "adw@mozilla.com", "id": 5555565, "bug_id": 666713}, {"tags": [], "time": "2011-06-29T21:29:06Z", "attachment_id": 541500, "raw_text": "I told drew that I couldn't provide much technical feedback. I do want to get this deployed onto mozilla-central in a way that debug builds at least can run it. This probably involves a little bit of fixing the printfs so that they can be sent to a logfile instead of stdout. After the most obvious pieces of Firefox are fixed, the noise will be significantly reduced and we can start taking logs from debug mochitest-* runs to get a good measure of the scope of remaining work for the Firefox frontend.", "id": 5565591, "bug_id": 666713, "creation_time": "2011-06-29T21:29:06Z", "is_private": false, "creator": "benjamin@smedbergs.us", "author": "benjamin@smedbergs.us", "text": "Comment on attachment 541500\nWIP patch\n\nI told drew that I couldn't provide much technical feedback. I do want to get this deployed onto mozilla-central in a way that debug builds at least can run it. This probably involves a little bit of fixing the printfs so that they can be sent to a logfile instead of stdout. After the most obvious pieces of Firefox are fixed, the noise will be significantly reduced and we can start taking logs from debug mochitest-* runs to get a good measure of the scope of remaining work for the Firefox frontend.", "count": 5}, {"tags": [], "attachment_id": 541500, "creation_time": "2011-07-06T00:32:38Z", "is_private": false, "creator": "mrbkap@gmail.com", "time": "2011-07-06T00:32:38Z", "raw_text": "Review of attachment 541500:\n-----------------------------------------------------------------\n\nThere's a couple of overarching cleanup things here: the XXXadw comments don't seem necessary to me, especially if this is going to be checked in. There's a block of commented-out code that could be removed (or debugged, I don't think we should crash there). Overall, this looks like a fine approach though. I have a bunch of nitpicks and small comments, though.\n\n::: content/base/src/nsInProcessTabChildGlobal.cpp\n@@ +324,5 @@\n>    NS_ENSURE_SUCCESS(rv, false);\n>  \n> +  //XXXadw\n> +  if (!JS_DefineProperty(cx, global, \"__isFrameScript__\",\n> +                         BOOLEAN_TO_JSVAL(true), NULL, NULL, JSPROP_ENUMERATE))\n\nI really don't like this. I'd much rather that instead of testing for this property in C++, you actually got the C++ object out and QI'd it.\n\n::: js/src/xpconnect/src/xpcwrappednative.cpp\n@@ +643,5 @@\n>  }\n>  \n> +//XXXadw\n> +static JSBool\n> +isWrapperContentRelated(XPCWrappedNative* wrapper)\n\nNit corner: Start static functions like this with a capital letter.\n\nStyle in XPConnect-land is ugly, but is:\n\nif(foo)\n{\n    bar;\n}\nelse\n{\n    baz;\n}\n\n::: js/src/xpconnect/wrappers/Makefile.in\n@@ +51,5 @@\n>  \t          CrossOriginWrapper.cpp \\\n>  \t\t  FilteringWrapper.cpp \\\n>  \t\t  XrayWrapper.cpp \\\n> +\t\t  WrapperFactory.cpp \\\n> +\t\t  contentLog.cpp\n\nAnother nit: mind making this ContentLog.cpp to fit in with the naming conventions for the rest of the directory?\n\n::: js/src/xpconnect/wrappers/WrapperFactory.cpp\n@@ +152,5 @@\n>  \n> +        //XXXadw I tried a logContentAccess here, but the output didn't make\n> +        // sense, and it seemed to be called multiple times for the same objects\n> +        // that the Rewrap one was but with various unhelpful values for\n> +        // \"object:\".\n\nYeah, this is redundant with respect to the logContentAccess in Rewrap.\n\n@@ +285,5 @@\n> +            // is.  but which one(s) of the branches below is relevant?  seems\n> +            // like the else branch, at least.\n> +            //XXXadw i tried putting the shouldDumpJSInfo = true here rather\n> +            // than below, but it didn't make a difference, not on startup at\n> +            // least.\n\nI don't really understand this comment. Under it is one case where the object being touched actually is a chrome object (the isSystem case) and the other two are content objects being used in chrome.\n\nI think that the way things are set up right now, you're catching wrapper creation in a bunch of places. It would be a little cleaner to consolidate all of it into this function (and, in particular) this section of the code.\n\n@@ +397,5 @@\n>      // is relied on by XPCNativeWrapper.unwrap.\n>      wrapperObj->setProxyExtra(js::ObjectValue(*xrayHolder));\n> +\n> +    //XXXadw\n> +    if (shouldDumpJSInfo)\n\nThis will miss .wrappedJSObject uses since they will have returned early above. However, this omission is worked around by the logContentAccess in WaiveXrayAndWrap.\n\n@@ +444,5 @@\n>      if (obj->compartment() == cx->compartment) {\n>          *vp = OBJECT_TO_JSVAL(obj);\n> +\n> +        //XXXadw i tried a logContentAccess here, but it doesn't seem to get\n> +        // called.  a breakpoint in gdb confirms.\n\nI also think that we could assert that the object in question is a chrome object, so you wouldn't want a logContentAccess.\n\n@@ +453,5 @@\n>      obj = WaiveXray(cx, obj);\n>      if (!obj)\n>          return false;\n>  \n> +    //XXXadw not sure if it's right to call logContentAccess here.\n\nIt is, but it would have been cleaner to do this in Rewrap.\n\n::: js/src/xpconnect/wrappers/XrayWrapper.cpp\n@@ +859,5 @@\n> +    //XXXadw\n> +    // I'm wondering about what kind of things get trapped here.  This line at\n> +    // extensions-content.js:254 did:\n> +    //   window.wrappedJSObject.__defineGetter__(\"InstallTrigger\", function() {\n> +    // The object that was printed was:\n\nThis is weird. I wouldn't expect this code to run for that line of JS code.\n\n::: js/src/xpconnect/wrappers/contentLog.cpp\n@@ +17,5 @@\n> +using namespace xpc;\n> +\n> +\n> +static void\n> +log(const char *fmt=\"\", ...)\n\nWhy the default parameter?\n\n@@ +22,5 @@\n> +{\n> +  const char *uberFmt = \"@adw %s\\n\";\n> +  int uberAllesFmtLen = strlen(fmt) + strlen(uberFmt) - 2 + 1;\n> +  char *uberAllesFmt =\n> +    reinterpret_cast<char *>(NS_Alloc(sizeof(char) * uberAllesFmtLen));\n\nCan you use nsPrintfCString here?\n\n@@ +73,5 @@\n> +\n> +  // message manager script origin\n> +  {\n> +    JSAutoEnterCompartment ac;\n> +    JSObject *scriptGlobal = JS_GetGlobalObject(cx);\n\nI think you want JS_GetGlobalForScopeChain here. JS_GetGlobalObject(cx) gets you the global object of the context, which may or may not have anything to do with the currently-running code.", "id": 5575348, "bug_id": 666713, "author": "mrbkap@gmail.com", "count": 6, "text": "Comment on attachment 541500\nWIP patch\n\nReview of attachment 541500:\n-----------------------------------------------------------------\n\nThere's a couple of overarching cleanup things here: the XXXadw comments don't seem necessary to me, especially if this is going to be checked in. There's a block of commented-out code that could be removed (or debugged, I don't think we should crash there). Overall, this looks like a fine approach though. I have a bunch of nitpicks and small comments, though.\n\n::: content/base/src/nsInProcessTabChildGlobal.cpp\n@@ +324,5 @@\n>    NS_ENSURE_SUCCESS(rv, false);\n>  \n> +  //XXXadw\n> +  if (!JS_DefineProperty(cx, global, \"__isFrameScript__\",\n> +                         BOOLEAN_TO_JSVAL(true), NULL, NULL, JSPROP_ENUMERATE))\n\nI really don't like this. I'd much rather that instead of testing for this property in C++, you actually got the C++ object out and QI'd it.\n\n::: js/src/xpconnect/src/xpcwrappednative.cpp\n@@ +643,5 @@\n>  }\n>  \n> +//XXXadw\n> +static JSBool\n> +isWrapperContentRelated(XPCWrappedNative* wrapper)\n\nNit corner: Start static functions like this with a capital letter.\n\nStyle in XPConnect-land is ugly, but is:\n\nif(foo)\n{\n    bar;\n}\nelse\n{\n    baz;\n}\n\n::: js/src/xpconnect/wrappers/Makefile.in\n@@ +51,5 @@\n>  \t          CrossOriginWrapper.cpp \\\n>  \t\t  FilteringWrapper.cpp \\\n>  \t\t  XrayWrapper.cpp \\\n> +\t\t  WrapperFactory.cpp \\\n> +\t\t  contentLog.cpp\n\nAnother nit: mind making this ContentLog.cpp to fit in with the naming conventions for the rest of the directory?\n\n::: js/src/xpconnect/wrappers/WrapperFactory.cpp\n@@ +152,5 @@\n>  \n> +        //XXXadw I tried a logContentAccess here, but the output didn't make\n> +        // sense, and it seemed to be called multiple times for the same objects\n> +        // that the Rewrap one was but with various unhelpful values for\n> +        // \"object:\".\n\nYeah, this is redundant with respect to the logContentAccess in Rewrap.\n\n@@ +285,5 @@\n> +            // is.  but which one(s) of the branches below is relevant?  seems\n> +            // like the else branch, at least.\n> +            //XXXadw i tried putting the shouldDumpJSInfo = true here rather\n> +            // than below, but it didn't make a difference, not on startup at\n> +            // least.\n\nI don't really understand this comment. Under it is one case where the object being touched actually is a chrome object (the isSystem case) and the other two are content objects being used in chrome.\n\nI think that the way things are set up right now, you're catching wrapper creation in a bunch of places. It would be a little cleaner to consolidate all of it into this function (and, in particular) this section of the code.\n\n@@ +397,5 @@\n>      // is relied on by XPCNativeWrapper.unwrap.\n>      wrapperObj->setProxyExtra(js::ObjectValue(*xrayHolder));\n> +\n> +    //XXXadw\n> +    if (shouldDumpJSInfo)\n\nThis will miss .wrappedJSObject uses since they will have returned early above. However, this omission is worked around by the logContentAccess in WaiveXrayAndWrap.\n\n@@ +444,5 @@\n>      if (obj->compartment() == cx->compartment) {\n>          *vp = OBJECT_TO_JSVAL(obj);\n> +\n> +        //XXXadw i tried a logContentAccess here, but it doesn't seem to get\n> +        // called.  a breakpoint in gdb confirms.\n\nI also think that we could assert that the object in question is a chrome object, so you wouldn't want a logContentAccess.\n\n@@ +453,5 @@\n>      obj = WaiveXray(cx, obj);\n>      if (!obj)\n>          return false;\n>  \n> +    //XXXadw not sure if it's right to call logContentAccess here.\n\nIt is, but it would have been cleaner to do this in Rewrap.\n\n::: js/src/xpconnect/wrappers/XrayWrapper.cpp\n@@ +859,5 @@\n> +    //XXXadw\n> +    // I'm wondering about what kind of things get trapped here.  This line at\n> +    // extensions-content.js:254 did:\n> +    //   window.wrappedJSObject.__defineGetter__(\"InstallTrigger\", function() {\n> +    // The object that was printed was:\n\nThis is weird. I wouldn't expect this code to run for that line of JS code.\n\n::: js/src/xpconnect/wrappers/contentLog.cpp\n@@ +17,5 @@\n> +using namespace xpc;\n> +\n> +\n> +static void\n> +log(const char *fmt=\"\", ...)\n\nWhy the default parameter?\n\n@@ +22,5 @@\n> +{\n> +  const char *uberFmt = \"@adw %s\\n\";\n> +  int uberAllesFmtLen = strlen(fmt) + strlen(uberFmt) - 2 + 1;\n> +  char *uberAllesFmt =\n> +    reinterpret_cast<char *>(NS_Alloc(sizeof(char) * uberAllesFmtLen));\n\nCan you use nsPrintfCString here?\n\n@@ +73,5 @@\n> +\n> +  // message manager script origin\n> +  {\n> +    JSAutoEnterCompartment ac;\n> +    JSObject *scriptGlobal = JS_GetGlobalObject(cx);\n\nI think you want JS_GetGlobalForScopeChain here. JS_GetGlobalObject(cx) gets you the global object of the context, which may or may not have anything to do with the currently-running code."}, {"tags": [], "attachment_id": null, "raw_text": "Thanks Blake.  A couple of questions before I can finish a for-review patch:\n\n(In reply to comment #6)\n> There's a couple of overarching cleanup things here: the XXXadw comments\n> don't seem necessary to me, especially if this is going to be checked in.\n\nSure, they're just breadcrumbs and thoughts while I'm working.\n\n> ::: content/base/src/nsInProcessTabChildGlobal.cpp\n> @@ +324,5 @@\n> >    NS_ENSURE_SUCCESS(rv, false);\n> >  \n> > +  //XXXadw\n> > +  if (!JS_DefineProperty(cx, global, \"__isFrameScript__\",\n> > +                         BOOLEAN_TO_JSVAL(true), NULL, NULL, JSPROP_ENUMERATE))\n> \n> I really don't like this. I'd much rather that instead of testing for this\n> property in C++, you actually got the C++ object out and QI'd it.\n\nDefinitely a hack, but I don't know what you mean by \"got the C++ object out\".  I tried QI'ing the ptr returned by JS_GetContextPrivate(cx) to nsIFrameMessageManager, and that seems to work.  (Neat trick!)  Is that what you mean?\n\n> @@ +397,5 @@\n> >      // is relied on by XPCNativeWrapper.unwrap.\n> >      wrapperObj->setProxyExtra(js::ObjectValue(*xrayHolder));\n> > +\n> > +    //XXXadw\n> > +    if (shouldDumpJSInfo)\n> \n> This will miss .wrappedJSObject uses since they will have returned early\n> above. However, this omission is worked around by the logContentAccess in\n> WaiveXrayAndWrap.\n\nAll the early returns in WrapperFactory::Rewrap look like error conditions to me.  Which one are you referring to?", "time": "2011-07-10T01:39:24Z", "creation_time": "2011-07-10T01:39:24Z", "is_private": false, "bug_id": 666713, "id": 5583101, "author": "adw@mozilla.com", "text": "Thanks Blake.  A couple of questions before I can finish a for-review patch:\n\n(In reply to comment #6)\n> There's a couple of overarching cleanup things here: the XXXadw comments\n> don't seem necessary to me, especially if this is going to be checked in.\n\nSure, they're just breadcrumbs and thoughts while I'm working.\n\n> ::: content/base/src/nsInProcessTabChildGlobal.cpp\n> @@ +324,5 @@\n> >    NS_ENSURE_SUCCESS(rv, false);\n> >  \n> > +  //XXXadw\n> > +  if (!JS_DefineProperty(cx, global, \"__isFrameScript__\",\n> > +                         BOOLEAN_TO_JSVAL(true), NULL, NULL, JSPROP_ENUMERATE))\n> \n> I really don't like this. I'd much rather that instead of testing for this\n> property in C++, you actually got the C++ object out and QI'd it.\n\nDefinitely a hack, but I don't know what you mean by \"got the C++ object out\".  I tried QI'ing the ptr returned by JS_GetContextPrivate(cx) to nsIFrameMessageManager, and that seems to work.  (Neat trick!)  Is that what you mean?\n\n> @@ +397,5 @@\n> >      // is relied on by XPCNativeWrapper.unwrap.\n> >      wrapperObj->setProxyExtra(js::ObjectValue(*xrayHolder));\n> > +\n> > +    //XXXadw\n> > +    if (shouldDumpJSInfo)\n> \n> This will miss .wrappedJSObject uses since they will have returned early\n> above. However, this omission is worked around by the logContentAccess in\n> WaiveXrayAndWrap.\n\nAll the early returns in WrapperFactory::Rewrap look like error conditions to me.  Which one are you referring to?", "count": 7, "creator": "adw@mozilla.com"}, {"id": 5592528, "bug_id": 666713, "text": "Created attachment 546034\nfor-review patch\n\nThis is ready for review, but I still have the two questions in comment 7.", "count": 8, "author": "adw@mozilla.com", "time": "2011-07-14T23:05:54Z", "raw_text": "This is ready for review, but I still have the two questions in comment 7.", "creation_time": "2011-07-14T23:05:54Z", "is_private": false, "creator": "adw@mozilla.com", "tags": [], "attachment_id": 546034}, {"creation_time": "2011-07-15T00:34:45Z", "is_private": false, "bug_id": 666713, "id": 5592701, "count": 9, "text": "I'll do some mochitest suite runs to see how this affects its time to completion.  The 8 KB output stream buffer size may be too small (or large).  Identical stacks may need to be ignored to reduce the amount of I/O.  (Hmm, that would be nice for the human going through the log, too.)  Starting the browser, clicking a link or two, and opening the page info window yielded a 2 MB log. :\\", "author": "adw@mozilla.com", "creator": "adw@mozilla.com", "tags": [], "raw_text": "I'll do some mochitest suite runs to see how this affects its time to completion.  The 8 KB output stream buffer size may be too small (or large).  Identical stacks may need to be ignored to reduce the amount of I/O.  (Hmm, that would be nice for the human going through the log, too.)  Starting the browser, clicking a link or two, and opening the page info window yielded a 2 MB log. :\\", "attachment_id": null, "time": "2011-07-15T00:34:45Z"}, {"tags": [], "attachment_id": null, "creation_time": "2011-07-16T03:23:07Z", "is_private": false, "creator": "adw@mozilla.com", "time": "2011-07-16T03:23:07Z", "raw_text": "I started a mochitest-plain run around noon and when I left the office at 7:00 it was still going, and that's with my patch but with the logging turned off.  I wonder if it's so slow because I'm running it headless with xvfb.  Anyway, next week I'll try only mochitest-browser-chrome without my patch at all to get a baseline.", "bug_id": 666713, "id": 5594638, "count": 10, "text": "I started a mochitest-plain run around noon and when I left the office at 7:00 it was still going, and that's with my patch but with the logging turned off.  I wonder if it's so slow because I'm running it headless with xvfb.  Anyway, next week I'll try only mochitest-browser-chrome without my patch at all to get a baseline.", "author": "adw@mozilla.com"}, {"author": "benjamin@smedbergs.us", "text": "Note that there is a case mismatch in ContentLog.cpp:\n\n#include \"contentLog.h\"\n\nmust be #include \"ContentLog.h\"", "count": 11, "creator": "benjamin@smedbergs.us", "is_private": false, "creation_time": "2011-07-18T18:59:51Z", "bug_id": 666713, "id": 5597179, "attachment_id": null, "raw_text": "Note that there is a case mismatch in ContentLog.cpp:\n\n#include \"contentLog.h\"\n\nmust be #include \"ContentLog.h\"", "time": "2011-07-18T18:59:51Z", "tags": []}, {"text": "Yeah, thanks.  (I renamed that file at the last minute, and I'm not sure why it still successfully compiled...)  I'll batch that fix with whatever other review comments you and Blake have.", "count": 12, "author": "adw@mozilla.com", "creator": "adw@mozilla.com", "creation_time": "2011-07-18T19:10:54Z", "is_private": false, "id": 5597218, "bug_id": 666713, "raw_text": "Yeah, thanks.  (I renamed that file at the last minute, and I'm not sure why it still successfully compiled...)  I'll batch that fix with whatever other review comments you and Blake have.", "attachment_id": null, "time": "2011-07-18T19:10:54Z", "tags": []}, {"is_private": false, "creation_time": "2011-07-18T22:47:37Z", "id": 5597933, "bug_id": 666713, "author": "mrbkap@gmail.com", "text": "(In reply to comment #7)\n> Definitely a hack, but I don't know what you mean by \"got the C++ object\n> out\".  I tried QI'ing the ptr returned by JS_GetContextPrivate(cx) to\n> nsIFrameMessageManager, and that seems to work.  (Neat trick!)  Is that what\n> you mean?\n\nInstead of looking up the property on the object, you can take the JS object and call nsIXPConnect::GetNativeOfWrapper. If that QIs to nsIFrameMessageManager, then you have the right JS object.\n\n> All the early returns in WrapperFactory::Rewrap look like error conditions\n> to me.  Which one are you referring to?\n\nThere's a tricky one: if (!wrapperObj || !xrayHolder) return wrapperObj; might be a success condition if we're not creating an Xray wrapper.", "count": 13, "creator": "mrbkap@gmail.com", "tags": [], "attachment_id": null, "raw_text": "(In reply to comment #7)\n> Definitely a hack, but I don't know what you mean by \"got the C++ object\n> out\".  I tried QI'ing the ptr returned by JS_GetContextPrivate(cx) to\n> nsIFrameMessageManager, and that seems to work.  (Neat trick!)  Is that what\n> you mean?\n\nInstead of looking up the property on the object, you can take the JS object and call nsIXPConnect::GetNativeOfWrapper. If that QIs to nsIFrameMessageManager, then you have the right JS object.\n\n> All the early returns in WrapperFactory::Rewrap look like error conditions\n> to me.  Which one are you referring to?\n\nThere's a tricky one: if (!wrapperObj || !xrayHolder) return wrapperObj; might be a success condition if we're not creating an Xray wrapper.", "time": "2011-07-18T22:47:37Z"}, {"is_private": false, "creation_time": "2011-07-18T23:24:26Z", "creator": "mrbkap@gmail.com", "tags": [], "attachment_id": 546034, "id": 5598037, "bug_id": 666713, "author": "mrbkap@gmail.com", "count": 14, "text": "Comment on attachment 546034\nfor-review patch\n\nReview of attachment 546034:\n-----------------------------------------------------------------\n\nThis looks good to me with the following comments addressed.\n\n::: js/src/xpconnect/src/xpcwrappednative.cpp\n@@ +649,5 @@\n> +{\n> +    XPCNativeSet* set = wrapper->GetSet();\n> +    XPCNativeInterface** ifaces = set->GetInterfaceArray();\n> +    PRUint16 ifacesLen = set->GetInterfaceCount();\n> +    for (PRUint16 i = 0; i < ifacesLen; i++)\n\nUber-nit: (here and below) nix the space after |for| and |if|.\n\n::: js/src/xpconnect/wrappers/ContentLog.cpp\n@@ +280,5 @@\n> +\n> +  JSAutoByteString propStr;\n> +  const char *propName =\n> +    propertyID && JSID_IS_STRING(*propertyID) ?\n> +    js_AtomToPrintableString(cx, JSID_TO_ATOM(*propertyID), &propStr) :\n\nI don't think you want to use an atom here. Instead, you can simply do: \n\nJSString *str = propertyID && JSID_IS_STRING(*propertyID) ? JSID_TO_STRING(*propertyID) : nsnull;\nconst char *propName = str ? propStr.encode(cx, str) : nsnull;", "time": "2011-07-18T23:24:26Z", "raw_text": "Review of attachment 546034:\n-----------------------------------------------------------------\n\nThis looks good to me with the following comments addressed.\n\n::: js/src/xpconnect/src/xpcwrappednative.cpp\n@@ +649,5 @@\n> +{\n> +    XPCNativeSet* set = wrapper->GetSet();\n> +    XPCNativeInterface** ifaces = set->GetInterfaceArray();\n> +    PRUint16 ifacesLen = set->GetInterfaceCount();\n> +    for (PRUint16 i = 0; i < ifacesLen; i++)\n\nUber-nit: (here and below) nix the space after |for| and |if|.\n\n::: js/src/xpconnect/wrappers/ContentLog.cpp\n@@ +280,5 @@\n> +\n> +  JSAutoByteString propStr;\n> +  const char *propName =\n> +    propertyID && JSID_IS_STRING(*propertyID) ?\n> +    js_AtomToPrintableString(cx, JSID_TO_ATOM(*propertyID), &propStr) :\n\nI don't think you want to use an atom here. Instead, you can simply do: \n\nJSString *str = propertyID && JSID_IS_STRING(*propertyID) ? JSID_TO_STRING(*propertyID) : nsnull;\nconst char *propName = str ? propStr.encode(cx, str) : nsnull;"}, {"creator": "adw@mozilla.com", "is_private": false, "creation_time": "2011-07-19T00:41:36Z", "attachment_id": 546687, "tags": [], "text": "Created attachment 546687\nmochitest-browser-chrome crash stack\n\nWith my logging turned on, mochitest-browser-chrome crashes half-way through.  The stack is attached.  It's a failing assertion:\n\n#2  0x025ed439 in JS_Assert (s=0x2ca990c \"shape.methodObject() == prev.toObject()\", file=0x2ca92ec \"/home/adw/mozilla-central/js/src/jsscope.cpp\", ln=1234)\n\nSeems bad, like the instrumentation is changing some JS-related state:  the stack has JIT calls on it, and my ContentLog.cpp is not on the stack at all.\n\nI've only debugged it to this line in my patch:\n\n  char *stackBuf = xpc->DebugPrintJSStack(PR_FALSE, PR_FALSE, PR_FALSE);\n\nIf I don't call DebugPrintJSStack, no crash.", "count": 15, "author": "adw@mozilla.com", "bug_id": 666713, "id": 5598224, "time": "2011-07-19T00:41:36Z", "raw_text": "With my logging turned on, mochitest-browser-chrome crashes half-way through.  The stack is attached.  It's a failing assertion:\n\n#2  0x025ed439 in JS_Assert (s=0x2ca990c \"shape.methodObject() == prev.toObject()\", file=0x2ca92ec \"/home/adw/mozilla-central/js/src/jsscope.cpp\", ln=1234)\n\nSeems bad, like the instrumentation is changing some JS-related state:  the stack has JIT calls on it, and my ContentLog.cpp is not on the stack at all.\n\nI've only debugged it to this line in my patch:\n\n  char *stackBuf = xpc->DebugPrintJSStack(PR_FALSE, PR_FALSE, PR_FALSE);\n\nIf I don't call DebugPrintJSStack, no crash."}, {"attachment_id": null, "raw_text": "I've isolated the crash to the tests in browser/base/content/test/tabview/.  Here's the JS stack when it happens: \n\n(gdb) call DumpJSStack()\n0 anonymous(261) [\"chrome://browser/content/tabview.js\":672]\n    this = [object ChromeWindow @ 0x2488c860 (native @ 0x2488be38)]\n1 <TOP LEVEL> [\"<unknown>\":0]\n    <failed to get 'this' value>\n\nUnfortunately tabview.js uses a bunch of #includes, so I'll have to track down that line by hand.", "time": "2011-07-19T00:52:07Z", "tags": [], "author": "adw@mozilla.com", "count": 16, "text": "I've isolated the crash to the tests in browser/base/content/test/tabview/.  Here's the JS stack when it happens: \n\n(gdb) call DumpJSStack()\n0 anonymous(261) [\"chrome://browser/content/tabview.js\":672]\n    this = [object ChromeWindow @ 0x2488c860 (native @ 0x2488be38)]\n1 <TOP LEVEL> [\"<unknown>\":0]\n    <failed to get 'this' value>\n\nUnfortunately tabview.js uses a bunch of #includes, so I'll have to track down that line by hand.", "creator": "adw@mozilla.com", "is_private": false, "creation_time": "2011-07-19T00:52:07Z", "id": 5598244, "bug_id": 666713}, {"time": "2011-07-19T20:30:05Z", "raw_text": "You are right to be surprised that DebugPrintJSStack can cause later problems. Debugging functions should generally be read-only, right?\n\nWell, this one has a side effect, one that is normally innocuous, but in your case it happens to trigger an unrelated bug.\n\nXPConnect::DebugPrintJSStack calls xpc_PrintJSStack\nwhich calls FormatJSStackDump\nwhich calls FormatJSFrame for each JS stack frame\nwhich calls JS_GetFrameScopeChain\nwhich causes the frame's scope chain to be lazily initialized.\n\nThis is correct behavior, but it seems to be triggering bug 561359.", "attachment_id": null, "tags": [], "creator": "jorendorff@mozilla.com", "count": 17, "text": "You are right to be surprised that DebugPrintJSStack can cause later problems. Debugging functions should generally be read-only, right?\n\nWell, this one has a side effect, one that is normally innocuous, but in your case it happens to trigger an unrelated bug.\n\nXPConnect::DebugPrintJSStack calls xpc_PrintJSStack\nwhich calls FormatJSStackDump\nwhich calls FormatJSFrame for each JS stack frame\nwhich calls JS_GetFrameScopeChain\nwhich causes the frame's scope chain to be lazily initialized.\n\nThis is correct behavior, but it seems to be triggering bug 561359.", "author": "jorendorff@mozilla.com", "id": 5599969, "bug_id": 666713, "is_private": false, "creation_time": "2011-07-19T20:30:05Z"}, {"creator": "adw@mozilla.com", "author": "adw@mozilla.com", "count": 18, "text": "This is the tabview.js line where I crash:\n\n  if (typeof options.complete == \"function\")\n\nhttp://hg.mozilla.org/mozilla-central/file/e00f1b194440/browser/base/content/tabview/iq.js#l626\n\nChecking the crash stack, it looks like the \"complete\" property lookup may be the problem.\n\n(In reply to comment #17)\n> This is correct behavior, but it seems to be triggering bug 561359.\n\nThanks for that info, Jason.  Is there anything I can do about it?  Any debugging I can do for you?", "id": 5600121, "bug_id": 666713, "is_private": false, "creation_time": "2011-07-19T21:13:17Z", "time": "2011-07-19T21:13:17Z", "attachment_id": null, "raw_text": "This is the tabview.js line where I crash:\n\n  if (typeof options.complete == \"function\")\n\nhttp://hg.mozilla.org/mozilla-central/file/e00f1b194440/browser/base/content/tabview/iq.js#l626\n\nChecking the crash stack, it looks like the \"complete\" property lookup may be the problem.\n\n(In reply to comment #17)\n> This is correct behavior, but it seems to be triggering bug 561359.\n\nThanks for that info, Jason.  Is there anything I can do about it?  Any debugging I can do for you?", "tags": []}, {"attachment_id": null, "raw_text": "Not unless you can find the memory leak in that patch. See bug 561359 comment 44.", "time": "2011-07-26T06:38:12Z", "tags": [], "author": "jorendorff@mozilla.com", "count": 19, "text": "Not unless you can find the memory leak in that patch. See bug 561359 comment 44.", "creator": "jorendorff@mozilla.com", "creation_time": "2011-07-26T06:38:12Z", "is_private": false, "id": 5613203, "bug_id": 666713}, {"creator": "odvarko@gmail.com", "is_private": false, "creation_time": "2011-08-16T11:07:20Z", "attachment_id": null, "tags": [], "author": "odvarko@gmail.com", "text": "I cloned http://hg.mozilla.org/mozilla-central applied the 'for-review' patch and when building I am experiencing following error:\n\nCreating library xul.lib and object xul.exp\nContentLog.obj : error LNK2019: unresolved external symbol \"char const * __cdecl\n js_AtomToPrintableString(struct JSContext *,class JSAtom *,class JSAutoByteStri\nng *)\" (?js_AtomToPrintableString@@YAPBDPAUJSContext@@PAVJSAtom@@PAVJSAutoByteSt\nring@@@Z) referenced in function \"unsigned int __cdecl LogContentAccessImpl(char\n const *,struct JSContext *,struct JSObject *,struct jsid *)\" (?LogContentAccess\nImpl@@YAIPBDPAUJSContext@@PAUJSObject@@PAUjsid@@@Z)\nxul.dll : fatal error LNK1120: 1 unresolved externals\n\n\nHere is my .mozconfig\n\n# Options for client.mk.\nmk_add_options MOZ_CO_PROJECT=browser\nmk_add_options MOZ_OBJDIR=@TOPSRCDIR@/_obj-browser-debug\n\n# Options for 'configure' (same as command-line options).\nac_add_options --enable-extensions=default\nac_add_options --enable-application=browser\nac_add_options --enable-debug\nac_add_options --disable-optimize\nac_add_options --enable-shared\nac_add_options --disable-tests\nac_add_options --enable-logging\nac_cv_visibility_pragma=no\nac_add_options --disable-installer\nac_add_options --enable-chrome-format=flat\nac_add_options --enable-debug-symbols=yes\nac_add_options --disable-embedding-tests\nac_add_options --disable-mochitest\nac_add_options --disable-accessibility\nac_add_options --disable-updater\nac_add_options --disable-static\nac_add_options --enable-libxul\nac_add_options --disable-ipc\nac_add_options --disable-angle\n\nAny tips?\n\nHonza", "count": 20, "bug_id": 666713, "id": 5656563, "raw_text": "I cloned http://hg.mozilla.org/mozilla-central applied the 'for-review' patch and when building I am experiencing following error:\n\nCreating library xul.lib and object xul.exp\nContentLog.obj : error LNK2019: unresolved external symbol \"char const * __cdecl\n js_AtomToPrintableString(struct JSContext *,class JSAtom *,class JSAutoByteStri\nng *)\" (?js_AtomToPrintableString@@YAPBDPAUJSContext@@PAVJSAtom@@PAVJSAutoByteSt\nring@@@Z) referenced in function \"unsigned int __cdecl LogContentAccessImpl(char\n const *,struct JSContext *,struct JSObject *,struct jsid *)\" (?LogContentAccess\nImpl@@YAIPBDPAUJSContext@@PAUJSObject@@PAUjsid@@@Z)\nxul.dll : fatal error LNK1120: 1 unresolved externals\n\n\nHere is my .mozconfig\n\n# Options for client.mk.\nmk_add_options MOZ_CO_PROJECT=browser\nmk_add_options MOZ_OBJDIR=@TOPSRCDIR@/_obj-browser-debug\n\n# Options for 'configure' (same as command-line options).\nac_add_options --enable-extensions=default\nac_add_options --enable-application=browser\nac_add_options --enable-debug\nac_add_options --disable-optimize\nac_add_options --enable-shared\nac_add_options --disable-tests\nac_add_options --enable-logging\nac_cv_visibility_pragma=no\nac_add_options --disable-installer\nac_add_options --enable-chrome-format=flat\nac_add_options --enable-debug-symbols=yes\nac_add_options --disable-embedding-tests\nac_add_options --disable-mochitest\nac_add_options --disable-accessibility\nac_add_options --disable-updater\nac_add_options --disable-static\nac_add_options --enable-libxul\nac_add_options --disable-ipc\nac_add_options --disable-angle\n\nAny tips?\n\nHonza", "time": "2011-08-16T11:07:20Z"}, {"count": 21, "text": "Btw. I am on Windows Vista.\nHonza", "author": "odvarko@gmail.com", "id": 5657058, "bug_id": 666713, "time": "2011-08-16T15:15:25Z", "raw_text": "Btw. I am on Windows Vista.\nHonza", "creator": "odvarko@gmail.com", "creation_time": "2011-08-16T15:15:25Z", "is_private": false, "attachment_id": null, "tags": []}, {"author": "felipc@gmail.com", "text": "Honza, make the change suggested in the second part of comment 14 to get it to compile", "count": 22, "id": 5658549, "bug_id": 666713, "raw_text": "Honza, make the change suggested in the second part of comment 14 to get it to compile", "time": "2011-08-16T23:55:47Z", "creator": "felipc@gmail.com", "creation_time": "2011-08-16T23:55:47Z", "is_private": false, "attachment_id": null, "tags": []}, {"creation_time": "2011-08-17T08:08:41Z", "is_private": false, "creator": "odvarko@gmail.com", "tags": [], "attachment_id": null, "id": 5659093, "bug_id": 666713, "author": "odvarko@gmail.com", "count": 23, "text": "(In reply to Felipe Gomes (:felipe) from comment #22)\n> Honza, make the change suggested in the second part of comment 14 to get it\n> to compile\nYep, it fixed the problem, thanks Felipe!\n\nOne more question.\n\nMy goal is to use the logging-patch and identify all places in Firebug where chrome touches the content. Such analysis will help me to prepare a plan for Firebug transition to e10s.\n\nAs expected, I am getting huge log file. Start Firefox, reload the home page produces: 4MB, 60K+ lines\n\nI would like to redirect the logging into Firebug Tracing Console that we also use to see all logs coming from Firebug itself (often the only way how to debug a debugger).\n\nWould it be possible to expose a simple XPCOM (service) that I could access in JS, register a listener into it and handle all logs dynamically?\n\nThe listener could get following parameters:\n\nfunction contentAccessListener(accessDesc, jscontext, object, property, stack)\n{\n}\n\nHonza", "raw_text": "(In reply to Felipe Gomes (:felipe) from comment #22)\n> Honza, make the change suggested in the second part of comment 14 to get it\n> to compile\nYep, it fixed the problem, thanks Felipe!\n\nOne more question.\n\nMy goal is to use the logging-patch and identify all places in Firebug where chrome touches the content. Such analysis will help me to prepare a plan for Firebug transition to e10s.\n\nAs expected, I am getting huge log file. Start Firefox, reload the home page produces: 4MB, 60K+ lines\n\nI would like to redirect the logging into Firebug Tracing Console that we also use to see all logs coming from Firebug itself (often the only way how to debug a debugger).\n\nWould it be possible to expose a simple XPCOM (service) that I could access in JS, register a listener into it and handle all logs dynamically?\n\nThe listener could get following parameters:\n\nfunction contentAccessListener(accessDesc, jscontext, object, property, stack)\n{\n}\n\nHonza", "time": "2011-08-17T08:08:41Z"}, {"tags": [], "time": "2011-08-31T00:39:50Z", "attachment_id": 557048, "raw_text": "This addresses Blake's comments except for these:\n\n(In reply to Blake Kaplan (:mrbkap) from comment #13)\n> Instead of looking up the property on the object, you can take the JS object\n> and call nsIXPConnect::GetNativeOfWrapper. If that QIs to\n> nsIFrameMessageManager, then you have the right JS object.\n\nThat didn't work, so this patch still uses JS_GetContextPrivate().\n\n(In reply to Blake Kaplan (:mrbkap) from comment #13)\n> There's a tricky one: if (!wrapperObj || !xrayHolder) return wrapperObj;\n> might be a success condition if we're not creating an Xray wrapper.\n\nIf !wrapperObj, I don't know what to log.  I tried |obj| but that doesn't seem to be right.  JSWrapper::obj_toString() takes a JSObject *wrapper.  So I just left the unconsolidated log calls that Blake mentions in comment 6 (the ones in WrapperFactory::Rewrap and WrapperFactory::WaiveXrayAndWrap).\n\n---\n\nWhat's left to do:\n\nWrappers are logged when they're created (and when their properties are accessed), but not if they're later cached and then passed around.  (Caching happens internally to the wrapper implementations, and various front-end JS also holds on to references.)  So for example, when browser.xml's get_docShell() is called every time after the first time, nothing's logged.  (I spent a lot of time trying to find wrapper code paths to catch these for the various types of wrappers.  I found some promising paths, but I ran into the next problem...)\n\nJez found a false positive in bug 674313.  I don't know how to tell whether a given wrapper (xpcwrappednative at least) is truly content-related, e.g., whether a DOM window is a chrome window or a content window.", "id": 5689520, "bug_id": 666713, "is_private": false, "creation_time": "2011-08-31T00:39:50Z", "creator": "adw@mozilla.com", "author": "adw@mozilla.com", "text": "Created attachment 557048\nupdated patch\n\nThis addresses Blake's comments except for these:\n\n(In reply to Blake Kaplan (:mrbkap) from comment #13)\n> Instead of looking up the property on the object, you can take the JS object\n> and call nsIXPConnect::GetNativeOfWrapper. If that QIs to\n> nsIFrameMessageManager, then you have the right JS object.\n\nThat didn't work, so this patch still uses JS_GetContextPrivate().\n\n(In reply to Blake Kaplan (:mrbkap) from comment #13)\n> There's a tricky one: if (!wrapperObj || !xrayHolder) return wrapperObj;\n> might be a success condition if we're not creating an Xray wrapper.\n\nIf !wrapperObj, I don't know what to log.  I tried |obj| but that doesn't seem to be right.  JSWrapper::obj_toString() takes a JSObject *wrapper.  So I just left the unconsolidated log calls that Blake mentions in comment 6 (the ones in WrapperFactory::Rewrap and WrapperFactory::WaiveXrayAndWrap).\n\n---\n\nWhat's left to do:\n\nWrappers are logged when they're created (and when their properties are accessed), but not if they're later cached and then passed around.  (Caching happens internally to the wrapper implementations, and various front-end JS also holds on to references.)  So for example, when browser.xml's get_docShell() is called every time after the first time, nothing's logged.  (I spent a lot of time trying to find wrapper code paths to catch these for the various types of wrappers.  I found some promising paths, but I ran into the next problem...)\n\nJez found a false positive in bug 674313.  I don't know how to tell whether a given wrapper (xpcwrappednative at least) is truly content-related, e.g., whether a DOM window is a chrome window or a content window.", "count": 24}, {"tags": [], "attachment_id": null, "is_private": false, "creation_time": "2011-09-02T03:18:15Z", "creator": "mrbkap@gmail.com", "raw_text": "(In reply to Drew Willcoxon :adw from comment #24)\n> That didn't work, so this patch still uses JS_GetContextPrivate().\n\nDidn't work how? I still think there's a chance that JS_GetContextPrivate will give you the wrong object.\n\n> \n> (In reply to Blake Kaplan (:mrbkap) from comment #13)\n> > There's a tricky one: if (!wrapperObj || !xrayHolder) return wrapperObj;\n> > might be a success condition if we're not creating an Xray wrapper.\n> \n> If !wrapperObj, I don't know what to log.  I tried |obj| but that doesn't\n> seem to be right.\n\nSorry, I was too brief in my comment: if !wrapperObj, then this is actually a failure case and you don't need to log anything. It's slightly tricky but the idea is that if wrapperObj is null, then we want to return null and if xrayHolder is null, we want to return wrapperObj (since we won't be creating an Xray wrapper).\n\n> Jez found a false positive in bug 674313.  I don't know how to tell whether\n> a given wrapper (xpcwrappednative at least) is truly content-related, e.g.,\n> whether a DOM window is a chrome window or a content window.\n\nThere's a few interfaces that chrome windows implement that content windows don't. In particular, chrome windows implement nsIDOMChromeWindow. Does that help at all?", "time": "2011-09-02T03:18:15Z", "id": 5695460, "bug_id": 666713, "count": 25, "text": "(In reply to Drew Willcoxon :adw from comment #24)\n> That didn't work, so this patch still uses JS_GetContextPrivate().\n\nDidn't work how? I still think there's a chance that JS_GetContextPrivate will give you the wrong object.\n\n> \n> (In reply to Blake Kaplan (:mrbkap) from comment #13)\n> > There's a tricky one: if (!wrapperObj || !xrayHolder) return wrapperObj;\n> > might be a success condition if we're not creating an Xray wrapper.\n> \n> If !wrapperObj, I don't know what to log.  I tried |obj| but that doesn't\n> seem to be right.\n\nSorry, I was too brief in my comment: if !wrapperObj, then this is actually a failure case and you don't need to log anything. It's slightly tricky but the idea is that if wrapperObj is null, then we want to return null and if xrayHolder is null, we want to return wrapperObj (since we won't be creating an Xray wrapper).\n\n> Jez found a false positive in bug 674313.  I don't know how to tell whether\n> a given wrapper (xpcwrappednative at least) is truly content-related, e.g.,\n> whether a DOM window is a chrome window or a content window.\n\nThere's a few interfaces that chrome windows implement that content windows don't. In particular, chrome windows implement nsIDOMChromeWindow. Does that help at all?", "author": "mrbkap@gmail.com"}, {"tags": [], "raw_text": "(In reply to Blake Kaplan (:mrbkap) from comment #25)\n> (In reply to Drew Willcoxon :adw from comment #24)\n> > That didn't work, so this patch still uses JS_GetContextPrivate().\n> \n> Didn't work how? I still think there's a chance that JS_GetContextPrivate\n> will give you the wrong object.\n\nGetNativeOfWrapper's return value didn't QI to nsIFrameMessageManager for wrappers I knew to be related to frame scripts.  But maybe my code is wrong, or I'm passing the wrong objects to GetNativeOfWrapper:\n\n  // Ignore message manager scripts.\n  nsCOMPtr<nsIXPConnect> xpc(do_GetService(nsIXPConnect::GetCID()));\n  NS_ENSURE_STATE(xpc);\n  nsCOMPtr<nsISupports> native(xpc->GetNativeOfWrapper(cx, wrapper));\n  if (nsCOMPtr<nsIFrameMessageManager>(do_QueryInterface(native)))\n    return NS_OK;\n\n> Sorry, I was too brief in my comment: if !wrapperObj, then this is actually\n> a failure case and you don't need to log anything. It's slightly tricky but\n> the idea is that if wrapperObj is null, then we want to return null and if\n> xrayHolder is null, we want to return wrapperObj (since we won't be creating\n> an Xray wrapper).\n\nOK... I'm still not sure exactly where in WrapperFactory::Rewrap to stick the log call (and what object to log) in order to avoid the log call in WaiveXrayAndWrap.  I think you're saying it's somewhere above the if (!wrapperObj || !xrayHolder) conditional, but that's as far as I get.\n\n> There's a few interfaces that chrome windows implement that content windows\n> don't. In particular, chrome windows implement nsIDOMChromeWindow. Does that\n> help at all?\n\nYeah... I found that pretty much everything goes through WrapperFactory::DoubleWrap, like, all wrapper \"gets\".  So this new patch logs that function too and attempts to determine which wrappers are content-related.  Is that OK?  It seems to capture what I want, meaning the gets, in addition to creations that other log sites were already capturing...", "attachment_id": 558953, "time": "2011-09-07T21:20:17Z", "is_private": false, "creation_time": "2011-09-07T21:20:17Z", "id": 5706023, "bug_id": 666713, "text": "Created attachment 558953\nDoubleWrap patch\n\n(In reply to Blake Kaplan (:mrbkap) from comment #25)\n> (In reply to Drew Willcoxon :adw from comment #24)\n> > That didn't work, so this patch still uses JS_GetContextPrivate().\n> \n> Didn't work how? I still think there's a chance that JS_GetContextPrivate\n> will give you the wrong object.\n\nGetNativeOfWrapper's return value didn't QI to nsIFrameMessageManager for wrappers I knew to be related to frame scripts.  But maybe my code is wrong, or I'm passing the wrong objects to GetNativeOfWrapper:\n\n  // Ignore message manager scripts.\n  nsCOMPtr<nsIXPConnect> xpc(do_GetService(nsIXPConnect::GetCID()));\n  NS_ENSURE_STATE(xpc);\n  nsCOMPtr<nsISupports> native(xpc->GetNativeOfWrapper(cx, wrapper));\n  if (nsCOMPtr<nsIFrameMessageManager>(do_QueryInterface(native)))\n    return NS_OK;\n\n> Sorry, I was too brief in my comment: if !wrapperObj, then this is actually\n> a failure case and you don't need to log anything. It's slightly tricky but\n> the idea is that if wrapperObj is null, then we want to return null and if\n> xrayHolder is null, we want to return wrapperObj (since we won't be creating\n> an Xray wrapper).\n\nOK... I'm still not sure exactly where in WrapperFactory::Rewrap to stick the log call (and what object to log) in order to avoid the log call in WaiveXrayAndWrap.  I think you're saying it's somewhere above the if (!wrapperObj || !xrayHolder) conditional, but that's as far as I get.\n\n> There's a few interfaces that chrome windows implement that content windows\n> don't. In particular, chrome windows implement nsIDOMChromeWindow. Does that\n> help at all?\n\nYeah... I found that pretty much everything goes through WrapperFactory::DoubleWrap, like, all wrapper \"gets\".  So this new patch logs that function too and attempts to determine which wrappers are content-related.  Is that OK?  It seems to capture what I want, meaning the gets, in addition to creations that other log sites were already capturing...", "count": 26, "author": "adw@mozilla.com", "creator": "adw@mozilla.com"}, {"time": "2011-09-07T21:24:38Z", "raw_text": "Accidentally left three unnecessary #includes in xpcwrappednative.cpp.  I'll remove those if the rest of the patch turns out to be OK.", "attachment_id": null, "tags": [], "creator": "adw@mozilla.com", "text": "Accidentally left three unnecessary #includes in xpcwrappednative.cpp.  I'll remove those if the rest of the patch turns out to be OK.", "count": 27, "author": "adw@mozilla.com", "bug_id": 666713, "id": 5706042, "creation_time": "2011-09-07T21:24:38Z", "is_private": false}, {"creator": "mrbkap@gmail.com", "creation_time": "2011-09-20T21:54:20Z", "is_private": false, "attachment_id": null, "tags": [], "author": "mrbkap@gmail.com", "count": 28, "text": "(In reply to Drew Willcoxon :adw from comment #26)\n>   // Ignore message manager scripts.\n>   nsCOMPtr<nsIXPConnect> xpc(do_GetService(nsIXPConnect::GetCID()));\n>   NS_ENSURE_STATE(xpc);\n>   nsCOMPtr<nsISupports> native(xpc->GetNativeOfWrapper(cx, wrapper));\n>   if (nsCOMPtr<nsIFrameMessageManager>(do_QueryInterface(native)))\n>     return NS_OK;\n\nYeah, you actually need to get the global object of the wrapper here (using JS_GetGlobalForObject(cx, wrapper)) before doing the QI. Otherwise this code is basically asking if every wrapper it sees is a message manager itself.\n\n> OK... I'm still not sure exactly where in WrapperFactory::Rewrap to stick\n> the log call (and what object to log) in order to avoid the log call in\n> WaiveXrayAndWrap.  I think you're saying it's somewhere above the if\n> (!wrapperObj || !xrayHolder) conditional, but that's as far as I get.\n\nI think the current code is correct.\n\n> Yeah... I found that pretty much everything goes through\n> WrapperFactory::DoubleWrap, like, all wrapper \"gets\".  So this new patch\n> logs that function too and attempts to determine which wrappers are\n> content-related.  Is that OK?  It seems to capture what I want, meaning the\n> gets, in addition to creations that other log sites were already capturing...\n\nI think that logging in DoubleWrap will double-log for most objects. DoubleWrap is only ever called from WrapperFactory::PrepareForWrapping which is always called directly before WrapperFactory::Rewrap, which is already logged.", "bug_id": 666713, "id": 5726884, "time": "2011-09-20T21:54:20Z", "raw_text": "(In reply to Drew Willcoxon :adw from comment #26)\n>   // Ignore message manager scripts.\n>   nsCOMPtr<nsIXPConnect> xpc(do_GetService(nsIXPConnect::GetCID()));\n>   NS_ENSURE_STATE(xpc);\n>   nsCOMPtr<nsISupports> native(xpc->GetNativeOfWrapper(cx, wrapper));\n>   if (nsCOMPtr<nsIFrameMessageManager>(do_QueryInterface(native)))\n>     return NS_OK;\n\nYeah, you actually need to get the global object of the wrapper here (using JS_GetGlobalForObject(cx, wrapper)) before doing the QI. Otherwise this code is basically asking if every wrapper it sees is a message manager itself.\n\n> OK... I'm still not sure exactly where in WrapperFactory::Rewrap to stick\n> the log call (and what object to log) in order to avoid the log call in\n> WaiveXrayAndWrap.  I think you're saying it's somewhere above the if\n> (!wrapperObj || !xrayHolder) conditional, but that's as far as I get.\n\nI think the current code is correct.\n\n> Yeah... I found that pretty much everything goes through\n> WrapperFactory::DoubleWrap, like, all wrapper \"gets\".  So this new patch\n> logs that function too and attempts to determine which wrappers are\n> content-related.  Is that OK?  It seems to capture what I want, meaning the\n> gets, in addition to creations that other log sites were already capturing...\n\nI think that logging in DoubleWrap will double-log for most objects. DoubleWrap is only ever called from WrapperFactory::PrepareForWrapping which is always called directly before WrapperFactory::Rewrap, which is already logged."}, {"count": 29, "text": "(In reply to Blake Kaplan (:mrbkap) from comment #28)\n> Yeah, you actually need to get the global object of the wrapper here (using\n> JS_GetGlobalForObject(cx, wrapper)) before doing the QI. Otherwise this code\n> is basically asking if every wrapper it sees is a message manager itself.\n\nOops, sorry, I confused myself here. Instead of using the wrapper or JS_GetGlobalObject(cx) you probably want to use JS_GetGlobalForScopeChain(cx).", "author": "mrbkap@gmail.com", "creator": "mrbkap@gmail.com", "creation_time": "2011-09-20T22:50:45Z", "is_private": false, "id": 5727034, "bug_id": 666713, "raw_text": "(In reply to Blake Kaplan (:mrbkap) from comment #28)\n> Yeah, you actually need to get the global object of the wrapper here (using\n> JS_GetGlobalForObject(cx, wrapper)) before doing the QI. Otherwise this code\n> is basically asking if every wrapper it sees is a message manager itself.\n\nOops, sorry, I confused myself here. Instead of using the wrapper or JS_GetGlobalObject(cx) you probably want to use JS_GetGlobalForScopeChain(cx).", "attachment_id": null, "time": "2011-09-20T22:50:45Z", "tags": []}, {"bug_id": 666713, "id": 5727057, "creation_time": "2011-09-20T22:57:37Z", "is_private": false, "creator": "mrbkap@gmail.com", "text": "Comment on attachment 558953\nDoubleWrap patch\n\nThis looks really good. I just want to iterate one more time on the JS_GetGlobalObject(cx) thing.", "count": 30, "author": "mrbkap@gmail.com", "tags": [], "time": "2011-09-20T22:57:37Z", "raw_text": "This looks really good. I just want to iterate one more time on the JS_GetGlobalObject(cx) thing.", "attachment_id": 558953}, {"attachment_id": null, "raw_text": "JS_GetGlobalForScopeChain didn't work:\n\n  nsCOMPtr<nsISupports> native(\n    xpc->GetNativeOfWrapper(cx, JS_GetGlobalForScopeChain(cx)));\n  if (nsCOMPtr<nsIFrameMessageManager>(do_QueryInterface(native)))\n    return NS_OK;\n\nThis didn't catch stacks from extensions-content.js, which I know to be a frame script.  Sorry if I'm being dense and this isn't the right incantation either.\n\nBut JS_GetGlobalObject did work.  I didn't try JS_GetGlobalForObject.\n\nFWIW, this is the reason I was using JS_GetContextPrivate:\n\nhttp://mxr.mozilla.org/mozilla-central/source/content/base/src/nsInProcessTabChildGlobal.cpp?rev=91aa25a681a5#328\n\nnsInProcessTabChildGlobal implements nsIInProcessContentFrameMessageManager, the specific type of message manager I want to ignore.\n\n(In reply to Blake Kaplan (:mrbkap) from comment #28)\n> I think that logging in DoubleWrap will double-log for most objects.\n> DoubleWrap is only ever called from WrapperFactory::PrepareForWrapping which\n> is always called directly before WrapperFactory::Rewrap, which is already\n> logged.\n\nLogging DoubleWrap at the site I do in the patch definitely catches wrapper accesses that I need to catch and that aren't caught by the logging in Rewrap.  I tried broadening the scope of what's logged in Rewrap by checking isObjContentRelated in addition to the shouldLogContentAccess flag that I set, but that still missed wrappers that DoubleWrap catches.\n\nAnd I noticed I'm not catching the HTML document being passed as an argument to the getBrowserIndexForDocument method of tabbrowser.  I don't know why or where I would put more logging in to catch it.  I'm really tired of this.", "time": "2011-09-27T02:47:25Z", "tags": [], "author": "adw@mozilla.com", "text": "JS_GetGlobalForScopeChain didn't work:\n\n  nsCOMPtr<nsISupports> native(\n    xpc->GetNativeOfWrapper(cx, JS_GetGlobalForScopeChain(cx)));\n  if (nsCOMPtr<nsIFrameMessageManager>(do_QueryInterface(native)))\n    return NS_OK;\n\nThis didn't catch stacks from extensions-content.js, which I know to be a frame script.  Sorry if I'm being dense and this isn't the right incantation either.\n\nBut JS_GetGlobalObject did work.  I didn't try JS_GetGlobalForObject.\n\nFWIW, this is the reason I was using JS_GetContextPrivate:\n\nhttp://mxr.mozilla.org/mozilla-central/source/content/base/src/nsInProcessTabChildGlobal.cpp?rev=91aa25a681a5#328\n\nnsInProcessTabChildGlobal implements nsIInProcessContentFrameMessageManager, the specific type of message manager I want to ignore.\n\n(In reply to Blake Kaplan (:mrbkap) from comment #28)\n> I think that logging in DoubleWrap will double-log for most objects.\n> DoubleWrap is only ever called from WrapperFactory::PrepareForWrapping which\n> is always called directly before WrapperFactory::Rewrap, which is already\n> logged.\n\nLogging DoubleWrap at the site I do in the patch definitely catches wrapper accesses that I need to catch and that aren't caught by the logging in Rewrap.  I tried broadening the scope of what's logged in Rewrap by checking isObjContentRelated in addition to the shouldLogContentAccess flag that I set, but that still missed wrappers that DoubleWrap catches.\n\nAnd I noticed I'm not catching the HTML document being passed as an argument to the getBrowserIndexForDocument method of tabbrowser.  I don't know why or where I would put more logging in to catch it.  I'm really tired of this.", "count": 31, "creator": "adw@mozilla.com", "is_private": false, "creation_time": "2011-09-27T02:47:25Z", "id": 5739051, "bug_id": 666713}, {"time": "2011-09-27T04:30:22Z", "attachment_id": null, "raw_text": "Assigning to Blake to take it from here for the rest of these dark closets of the platform bits, or to delegate as makes sense.\n\nPrevious status was that the patch as-is (even a while back) provided enough good information to be usable for detection of many e10s-conversion-needing spots. Is that still the case?", "tags": [], "creator": "hzbz@pm.me", "author": "hzbz@pm.me", "count": 32, "text": "Assigning to Blake to take it from here for the rest of these dark closets of the platform bits, or to delegate as makes sense.\n\nPrevious status was that the patch as-is (even a while back) provided enough good information to be usable for detection of many e10s-conversion-needing spots. Is that still the case?", "bug_id": 666713, "id": 5739201, "is_private": false, "creation_time": "2011-09-27T04:30:22Z"}, {"id": 7629814, "bug_id": 666713, "author": "mrbkap@gmail.com", "count": 33, "text": "I'm not actually working on this and it isn't clear that we need it anymore.", "raw_text": "I'm not actually working on this and it isn't clear that we need it anymore.", "time": "2013-07-12T18:50:09Z", "is_private": false, "creation_time": "2013-07-12T18:50:09Z", "creator": "mrbkap@gmail.com", "tags": [], "attachment_id": null}, {"count": 34, "text": "No assignee, updating the status.", "author": "sledru@mozilla.com", "creator": "sledru@mozilla.com", "is_private": false, "creation_time": "2018-10-15T08:32:46Z", "bug_id": 666713, "id": 13684868, "raw_text": "No assignee, updating the status.", "attachment_id": null, "time": "2018-10-15T08:32:46Z", "tags": []}, {"tags": [], "attachment_id": null, "raw_text": "No assignee, updating the status.", "time": "2018-10-15T08:35:02Z", "is_private": false, "creation_time": "2018-10-15T08:35:02Z", "bug_id": 666713, "id": 13685019, "author": "sledru@mozilla.com", "text": "No assignee, updating the status.", "count": 35, "creator": "sledru@mozilla.com"}, {"author": "sledru@mozilla.com", "text": "No assignee, updating the status.", "count": 36, "bug_id": 666713, "id": 13685330, "time": "2018-10-15T08:39:21Z", "raw_text": "No assignee, updating the status.", "creator": "sledru@mozilla.com", "is_private": false, "creation_time": "2018-10-15T08:39:21Z", "attachment_id": null, "tags": []}, {"attachment_id": null, "tags": [], "creator": "sledru@mozilla.com", "creation_time": "2018-10-15T08:41:56Z", "is_private": false, "time": "2018-10-15T08:41:56Z", "raw_text": "No assignee, updating the status.", "text": "No assignee, updating the status.", "count": 37, "author": "sledru@mozilla.com", "bug_id": 666713, "id": 13685581}]}}}