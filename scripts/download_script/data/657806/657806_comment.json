{"bugs": {"657806": {"comments": [{"author": "bill.mccloskey@gmail.com", "creator": "bill.mccloskey@gmail.com", "count": 0, "bug_id": 657806, "time": "2011-05-17T23:06:56Z", "creation_time": "2011-05-17T23:06:56Z", "id": 5475984, "attachment_id": null, "text": "I just ran SunSpider and V8 on Linux opt builds with -fstrict-aliasing and -fno-strict-aliasing. I'm unable to see any performance difference.\n\nThe advantage of turning it off is that we don't have to deal with lots of annoying warnings. Also, we won't get any more scary bugs like bug 567627.", "raw_text": "I just ran SunSpider and V8 on Linux opt builds with -fstrict-aliasing and -fno-strict-aliasing. I'm unable to see any performance difference.\n\nThe advantage of turning it off is that we don't have to deal with lots of annoying warnings. Also, we won't get any more scary bugs like bug 567627.", "is_private": false, "tags": []}, {"raw_text": "Interesting!  I'm trying to turn it on in the main build in bug 414641.  (My patch also makes strict aliasing warnings errors.)\n\nGood performance numbers are kind of hard to come by right now (bug 653961) -- maybe we can wait to see what the full-browser perf is like with and without strict aliasing before flipping the JS switch?", "is_private": false, "tags": [], "creation_time": "2011-05-18T04:18:20Z", "attachment_id": null, "id": 5476428, "text": "Interesting!  I'm trying to turn it on in the main build in bug 414641.  (My patch also makes strict aliasing warnings errors.)\n\nGood performance numbers are kind of hard to come by right now (bug 653961) -- maybe we can wait to see what the full-browser perf is like with and without strict aliasing before flipping the JS switch?", "bug_id": 657806, "count": 1, "time": "2011-05-18T04:18:20Z", "creator": "justin.lebar+bug@gmail.com", "author": "justin.lebar+bug@gmail.com"}, {"tags": [], "is_private": false, "raw_text": "Also, did you benchmark using gcc 4.5?  The strict aliasing engine was overhauled for that version.  (It might be worth benchmarking pgo'ed builds, too.)", "text": "Also, did you benchmark using gcc 4.5?  The strict aliasing engine was overhauled for that version.  (It might be worth benchmarking pgo'ed builds, too.)", "id": 5476435, "attachment_id": null, "creation_time": "2011-05-18T04:19:52Z", "time": "2011-05-18T04:19:52Z", "count": 2, "bug_id": 657806, "author": "justin.lebar+bug@gmail.com", "creator": "justin.lebar+bug@gmail.com"}, {"time": "2011-05-18T11:03:13Z", "tags": [], "is_private": false, "bug_id": 657806, "raw_text": "As I understand it, -fstrict-aliasing warnings highlight undefined behaviour. If that's the case (http://gcc.gnu.org/onlinedocs/gcc-4.4.3/gcc/Optimize-Options.html#index-fstrict_002daliasing-750 indicates it is), then I think we should keep -fstrict-aliasing turned on.", "count": 3, "text": "As I understand it, -fstrict-aliasing warnings highlight undefined behaviour. If that's the case (http://gcc.gnu.org/onlinedocs/gcc-4.4.3/gcc/Optimize-Options.html#index-fstrict_002daliasing-750 indicates it is), then I think we should keep -fstrict-aliasing turned on.", "creator": "paul.biggar@gmail.com", "attachment_id": null, "id": 5476806, "author": "paul.biggar@gmail.com", "creation_time": "2011-05-18T11:03:13Z"}, {"bug_id": 657806, "count": 4, "time": "2011-05-18T12:40:31Z", "creator": "justin.lebar+bug@gmail.com", "author": "justin.lebar+bug@gmail.com", "raw_text": "The problem is that the warning engine uses heuristics -- it's not guaranteed to warn about all undefined behavior.  It's therefore possible to get things like bug 567627 even with -Werror-strict-aliasing.", "tags": [], "is_private": false, "creation_time": "2011-05-18T12:40:31Z", "text": "The problem is that the warning engine uses heuristics -- it's not guaranteed to warn about all undefined behavior.  It's therefore possible to get things like bug 567627 even with -Werror-strict-aliasing.", "attachment_id": null, "id": 5476881}, {"time": "2011-05-18T12:41:32Z", "count": 5, "bug_id": 657806, "author": "justin.lebar+bug@gmail.com", "creator": "justin.lebar+bug@gmail.com", "tags": [], "is_private": false, "raw_text": "These docs don't spell it out as well as they should, but http://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wstrict_002daliasing-339", "text": "These docs don't spell it out as well as they should, but http://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wstrict_002daliasing-339", "id": 5476882, "attachment_id": null, "creation_time": "2011-05-18T12:41:32Z"}, {"is_private": false, "tags": [], "time": "2011-05-18T17:16:58Z", "count": 6, "raw_text": "First, just to clarify what Justin said, -fstrict-aliasing controls what code gets generated, while -Wstrict-aliasing controls what warnings are printed. Here are the two cases under consideration:\n\n-fstrict-aliasing -Wstrict-aliasing: GCC may generate faster code, but it may also print spurious warnings and it may generate \"incorrect\" code without warning you (by \"incorrect\" I mean code that's correct according to the C standard but doesn't do what you want). This last piece is what's scary, I think.\n\n-fno-strict-aliasing: The generated code may be slower, but you will never get any warnings and you don't have to worry about incorrect code.\n\nI think a reasonable middle ground would be to turn strict aliasing on for most of the browser but turn it off for JS. The reason I'd like to turn it off is that I'm pretty sure there's no way to write, say, a custom memory allocator that is correct according to the C standard. There's a ton of this sort of code in the JS engine, particularly the GC.\n\nHowever, I definitely don't want to regress performance. I'll try GCC 4.5 when I get a chance.", "bug_id": 657806, "author": "bill.mccloskey@gmail.com", "id": 5477482, "attachment_id": null, "creator": "bill.mccloskey@gmail.com", "text": "First, just to clarify what Justin said, -fstrict-aliasing controls what code gets generated, while -Wstrict-aliasing controls what warnings are printed. Here are the two cases under consideration:\n\n-fstrict-aliasing -Wstrict-aliasing: GCC may generate faster code, but it may also print spurious warnings and it may generate \"incorrect\" code without warning you (by \"incorrect\" I mean code that's correct according to the C standard but doesn't do what you want). This last piece is what's scary, I think.\n\n-fno-strict-aliasing: The generated code may be slower, but you will never get any warnings and you don't have to worry about incorrect code.\n\nI think a reasonable middle ground would be to turn strict aliasing on for most of the browser but turn it off for JS. The reason I'd like to turn it off is that I'm pretty sure there's no way to write, say, a custom memory allocator that is correct according to the C standard. There's a ton of this sort of code in the JS engine, particularly the GC.\n\nHowever, I definitely don't want to regress performance. I'll try GCC 4.5 when I get a chance.", "creation_time": "2011-05-18T17:16:58Z"}, {"raw_text": "One optimization strict aliasing allows is the re-ordering of reads and writes.  If I know that pointers X and Y can't point to the same thing (that is, they can't alias), then given code that does\n\n  store *X\n  load *Y\n\nI can place the load before the store.  This might help me avoid pipeline stalls when I go to use the value *Y.\n\nModern desktop CPUs already do this kind of reordering internally, so it might not help much there.  But this kind of thing could matter more on ARM or Atom.\n\nMy point is that it might be pretty hard to establish whether this optimization has an effect on speed.  That might be a good reason to turn it off, though!  :)", "bug_id": 657806, "count": 7, "time": "2011-05-18T17:27:50Z", "is_private": false, "tags": [], "creation_time": "2011-05-18T17:27:50Z", "id": 5477522, "attachment_id": null, "text": "One optimization strict aliasing allows is the re-ordering of reads and writes.  If I know that pointers X and Y can't point to the same thing (that is, they can't alias), then given code that does\n\n  store *X\n  load *Y\n\nI can place the load before the store.  This might help me avoid pipeline stalls when I go to use the value *Y.\n\nModern desktop CPUs already do this kind of reordering internally, so it might not help much there.  But this kind of thing could matter more on ARM or Atom.\n\nMy point is that it might be pretty hard to establish whether this optimization has an effect on speed.  That might be a good reason to turn it off, though!  :)", "creator": "justin.lebar+bug@gmail.com", "author": "justin.lebar+bug@gmail.com"}, {"author": "bill.mccloskey@gmail.com", "text": "I forgot to add: another reason to turn it off in the JS engine alone is that most of our execution time is spent in generated code. So compiler optimizations like this have less effect on total execution time.\n\nAlso, given the possibility for this optimization to make us crash unexpectedly, I think we should lean toward turning it off unless we can prove that it actually improves performance.", "creator": "bill.mccloskey@gmail.com", "attachment_id": null, "id": 5477593, "creation_time": "2011-05-18T17:45:26Z", "tags": [], "is_private": false, "time": "2011-05-18T17:45:26Z", "count": 8, "bug_id": 657806, "raw_text": "I forgot to add: another reason to turn it off in the JS engine alone is that most of our execution time is spent in generated code. So compiler optimizations like this have less effect on total execution time.\n\nAlso, given the possibility for this optimization to make us crash unexpectedly, I think we should lean toward turning it off unless we can prove that it actually improves performance."}, {"attachment_id": null, "id": 5477619, "creator": "benjamin@smedbergs.us", "text": "Strict aliasing is disabled for the main tree by default (bug 413253).\n\nBut it also appears to be disabled by default for the JS tree: http://mxr.mozilla.org/mozilla-central/source/js/src/configure.in#1579\n\nSo I'm not really sure what this bug is about.\n\nBug 414641 is about turning strict aliasing back on.", "author": "benjamin@smedbergs.us", "creation_time": "2011-05-18T17:53:07Z", "time": "2011-05-18T17:53:07Z", "is_private": false, "tags": [], "raw_text": "Strict aliasing is disabled for the main tree by default (bug 413253).\n\nBut it also appears to be disabled by default for the JS tree: http://mxr.mozilla.org/mozilla-central/source/js/src/configure.in#1579\n\nSo I'm not really sure what this bug is about.\n\nBug 414641 is about turning strict aliasing back on.", "bug_id": 657806, "count": 9}, {"creation_time": "2011-05-18T18:19:58Z", "author": "bill.mccloskey@gmail.com", "creator": "bill.mccloskey@gmail.com", "text": "(In reply to comment #9)\n> But it also appears to be disabled by default for the JS tree:\n> http://mxr.mozilla.org/mozilla-central/source/js/src/configure.in#1579\n\nIt's a bit confusing. Here is where it's turned on:\nhttp://mxr.mozilla.org/mozilla-central/source/js/src/Makefile.in#90\n\nThe combination of these two causes all JS files to be compiled with both -fno-strict-aliasing and -fstrict-aliasing. The second one wins, maybe because it comes last.", "id": 5477717, "attachment_id": null, "count": 10, "bug_id": 657806, "raw_text": "(In reply to comment #9)\n> But it also appears to be disabled by default for the JS tree:\n> http://mxr.mozilla.org/mozilla-central/source/js/src/configure.in#1579\n\nIt's a bit confusing. Here is where it's turned on:\nhttp://mxr.mozilla.org/mozilla-central/source/js/src/Makefile.in#90\n\nThe combination of these two causes all JS files to be compiled with both -fno-strict-aliasing and -fstrict-aliasing. The second one wins, maybe because it comes last.", "tags": [], "is_private": false, "time": "2011-05-18T18:19:58Z"}, {"raw_text": "(In reply to comment #6)\n> -fstrict-aliasing -Wstrict-aliasing: GCC may generate faster code, but it\n> may also print spurious warnings and it may generate \"incorrect\" code\n> without warning you (by \"incorrect\" I mean code that's correct according to\n> the C standard but doesn't do what you want).\n\nJust to be clear: C99 and C++98 both have strict aliasing clauses (C++'s is 3.10.15) so, IIUC, whatever the compiler is allowed to do with -fstrict-aliasing its technically allowed to do with -fno-strict-aliasing; its just that it chooses not to for obvious reasons.  However, I still do not agree with comment 3 since, currently, we seem to getting the worst of both worlds; false negatives and false positives.  I could be forgetting, but I don't think I've seen a true positive yet.", "bug_id": 657806, "count": 11, "time": "2011-05-18T18:28:42Z", "is_private": false, "tags": [], "creation_time": "2011-05-18T18:28:42Z", "attachment_id": null, "id": 5477758, "creator": "mail@lukewagner.name", "text": "(In reply to comment #6)\n> -fstrict-aliasing -Wstrict-aliasing: GCC may generate faster code, but it\n> may also print spurious warnings and it may generate \"incorrect\" code\n> without warning you (by \"incorrect\" I mean code that's correct according to\n> the C standard but doesn't do what you want).\n\nJust to be clear: C99 and C++98 both have strict aliasing clauses (C++'s is 3.10.15) so, IIUC, whatever the compiler is allowed to do with -fstrict-aliasing its technically allowed to do with -fno-strict-aliasing; its just that it chooses not to for obvious reasons.  However, I still do not agree with comment 3 since, currently, we seem to getting the worst of both worlds; false negatives and false positives.  I could be forgetting, but I don't think I've seen a true positive yet.", "author": "mail@lukewagner.name"}, {"raw_text": "Bug 421984 added this on purpose for the JS engine.", "tags": [], "is_private": false, "creation_time": "2011-05-18T18:38:17Z", "text": "Bug 421984 added this on purpose for the JS engine.", "attachment_id": null, "id": 5477788, "bug_id": 657806, "count": 12, "time": "2011-05-18T18:38:17Z", "creator": "benjamin@smedbergs.us", "author": "benjamin@smedbergs.us"}, {"time": "2011-05-18T18:50:26Z", "is_private": false, "tags": [], "raw_text": "> I could be forgetting, but I don't think I've seen a true positive yet.\n\nI definitely saw some true positives in bug 414641.  There's at least one false negative, although if that's all, I think that's pretty impressive.  (With that one issue fixed, the browser passes all the tests.  But there's of course a fear that it might still be broken.)", "bug_id": 657806, "count": 13, "attachment_id": null, "id": 5477836, "text": "> I could be forgetting, but I don't think I've seen a true positive yet.\n\nI definitely saw some true positives in bug 414641.  There's at least one false negative, although if that's all, I think that's pretty impressive.  (With that one issue fixed, the browser passes all the tests.  But there's of course a fear that it might still be broken.)", "creator": "justin.lebar+bug@gmail.com", "author": "justin.lebar+bug@gmail.com", "creation_time": "2011-05-18T18:50:26Z"}, {"creator": "sayrer@gmail.com", "author": "sayrer@gmail.com", "time": "2011-05-18T21:15:13Z", "bug_id": 657806, "count": 14, "text": "Strict aliasing was a win back when we spent a lot more time executing C++ than we do now. I can see it not mattering these days.", "attachment_id": null, "id": 5478291, "creation_time": "2011-05-18T21:15:13Z", "tags": [], "is_private": false, "raw_text": "Strict aliasing was a win back when we spent a lot more time executing C++ than we do now. I can see it not mattering these days."}, {"bug_id": 657806, "raw_text": "Based on the discussion in bug 680515, I'd like to try and resurrect this bug if possible. Justin, it looked like things kind of petered out in bug 414641. Would you be more amenable to turning strict aliasing off in JS now?\n\nTo restate the case: there are a number of places in the JS engine where we knowingly and somewhat unavoidably violate the language's aliasing rules (particularly in the GC). On rare occasions, this leads to correctness issues like bug 567627. More commonly, we end up with lots of warnings and we have to hack around them with some creative casting. If we turn off -fstrict-aliasing, these problems will go away in practice (although I realize that we're still technically breaking the rules). Given that we haven't been able to reliably measure any performance gain from having strict aliasing enabled, and given the headaches it causes, I think it should be disabled.", "count": 15, "time": "2011-08-21T02:18:09Z", "tags": [], "is_private": false, "creation_time": "2011-08-21T02:18:09Z", "text": "Based on the discussion in bug 680515, I'd like to try and resurrect this bug if possible. Justin, it looked like things kind of petered out in bug 414641. Would you be more amenable to turning strict aliasing off in JS now?\n\nTo restate the case: there are a number of places in the JS engine where we knowingly and somewhat unavoidably violate the language's aliasing rules (particularly in the GC). On rare occasions, this leads to correctness issues like bug 567627. More commonly, we end up with lots of warnings and we have to hack around them with some creative casting. If we turn off -fstrict-aliasing, these problems will go away in practice (although I realize that we're still technically breaking the rules). Given that we haven't been able to reliably measure any performance gain from having strict aliasing enabled, and given the headaches it causes, I think it should be disabled.", "creator": "bill.mccloskey@gmail.com", "id": 5667678, "attachment_id": null, "author": "bill.mccloskey@gmail.com"}, {"author": "gal@uci.edu", "creator": "gal@uci.edu", "count": 16, "bug_id": 657806, "time": "2011-08-21T02:36:17Z", "creation_time": "2011-08-21T02:36:17Z", "attachment_id": null, "id": 5667687, "text": "Rafael, does LLVM support disabling strict aliasing and is that consistently respected during PGO etc?", "raw_text": "Rafael, does LLVM support disabling strict aliasing and is that consistently respected during PGO etc?", "is_private": false, "tags": []}, {"creation_time": "2011-08-21T04:59:58Z", "author": "justin.lebar+bug@gmail.com", "creator": "justin.lebar+bug@gmail.com", "text": "> Justin, it looked like things kind of petered out in bug 414641. Would you be \n> more amenable to turning strict aliasing off in JS now?\n\nYes, I would be.  To recap bug 414641, I had GCC generating working code with -fstrict-aliasing on for the browser, but it broke when we turned on -O3.  From my point of view, this is a strong argument against using -fstrict-aliasing anywhere -- your code could break whenever GCC changes how it optimizes code.  It even seems possible that the nondeterminism in PGO could cause some builds to work and others to be broken.\n\nSince strict aliasing violations are so common, I have to imagine that all current and future toolchains will support -fno-strict-aliasing.  Also, any compiler which doesn't support -fno-strict-aliasing will apparently have difficulty with the browser.  (Not to suggest it's not worth checking, of course!)", "id": 5667773, "attachment_id": null, "count": 17, "bug_id": 657806, "raw_text": "> Justin, it looked like things kind of petered out in bug 414641. Would you be \n> more amenable to turning strict aliasing off in JS now?\n\nYes, I would be.  To recap bug 414641, I had GCC generating working code with -fstrict-aliasing on for the browser, but it broke when we turned on -O3.  From my point of view, this is a strong argument against using -fstrict-aliasing anywhere -- your code could break whenever GCC changes how it optimizes code.  It even seems possible that the nondeterminism in PGO could cause some builds to work and others to be broken.\n\nSince strict aliasing violations are so common, I have to imagine that all current and future toolchains will support -fno-strict-aliasing.  Also, any compiler which doesn't support -fno-strict-aliasing will apparently have difficulty with the browser.  (Not to suggest it's not worth checking, of course!)", "tags": [], "is_private": false, "time": "2011-08-21T04:59:58Z"}, {"tags": [], "is_private": false, "raw_text": "(In reply to Andreas Gal :gal from comment #16)\n> Rafael, does LLVM support disabling strict aliasing and is that consistently\n> respected during PGO etc?\n\nLLVM has no PGO at the moment. In any case, the type alias rules are explicitly embedded in the IL, so -fno-strict-aliasing just omits that information and everything works as expected.", "text": "(In reply to Andreas Gal :gal from comment #16)\n> Rafael, does LLVM support disabling strict aliasing and is that consistently\n> respected during PGO etc?\n\nLLVM has no PGO at the moment. In any case, the type alias rules are explicitly embedded in the IL, so -fno-strict-aliasing just omits that information and everything works as expected.", "id": 5669076, "attachment_id": null, "creation_time": "2011-08-22T13:46:15Z", "time": "2011-08-22T13:46:15Z", "count": 18, "bug_id": 657806, "author": "respindola@unverified.tld", "creator": "respindola@unverified.tld"}, {"creation_time": "2011-08-22T13:50:36Z", "author": "respindola@unverified.tld", "text": "(In reply to Justin Lebar [:jlebar] (out 8/12 - 8/21) from comment #17)\n> > Justin, it looked like things kind of petered out in bug 414641. Would you be \n> > more amenable to turning strict aliasing off in JS now?\n> \n> Yes, I would be.  To recap bug 414641, I had GCC generating working code\n> with -fstrict-aliasing on for the browser, but it broke when we turned on\n> -O3.  From my point of view, this is a strong argument against using\n> -fstrict-aliasing anywhere -- your code could break whenever GCC changes how\n> it optimizes code.  It even seems possible that the nondeterminism in PGO\n> could cause some builds to work and others to be broken.\n\nWe could make the PGO builds deterministic. The way I have seem it done before is to check in the profiles in the repository and update them from time to time.\n\nI would love for our build to be deterministic. If other also think it is important, I can open a bug to track it.\n\n> Since strict aliasing violations are so common, I have to imagine that all\n> current and future toolchains will support -fno-strict-aliasing.  Also, any\n> compiler which doesn't support -fno-strict-aliasing will apparently have\n> difficulty with the browser.  (Not to suggest it's not worth checking, of\n> course!)\n\nWe should check code size too.\n\nI worry a bit about options that enable extensions to the standard language. Non strict aliasing is an extension, and one that is hard to know when it is being used.\n\nDoes VC have an option for turning strict aliasing off too?", "creator": "respindola@unverified.tld", "attachment_id": null, "id": 5669085, "count": 19, "bug_id": 657806, "raw_text": "(In reply to Justin Lebar [:jlebar] (out 8/12 - 8/21) from comment #17)\n> > Justin, it looked like things kind of petered out in bug 414641. Would you be \n> > more amenable to turning strict aliasing off in JS now?\n> \n> Yes, I would be.  To recap bug 414641, I had GCC generating working code\n> with -fstrict-aliasing on for the browser, but it broke when we turned on\n> -O3.  From my point of view, this is a strong argument against using\n> -fstrict-aliasing anywhere -- your code could break whenever GCC changes how\n> it optimizes code.  It even seems possible that the nondeterminism in PGO\n> could cause some builds to work and others to be broken.\n\nWe could make the PGO builds deterministic. The way I have seem it done before is to check in the profiles in the repository and update them from time to time.\n\nI would love for our build to be deterministic. If other also think it is important, I can open a bug to track it.\n\n> Since strict aliasing violations are so common, I have to imagine that all\n> current and future toolchains will support -fno-strict-aliasing.  Also, any\n> compiler which doesn't support -fno-strict-aliasing will apparently have\n> difficulty with the browser.  (Not to suggest it's not worth checking, of\n> course!)\n\nWe should check code size too.\n\nI worry a bit about options that enable extensions to the standard language. Non strict aliasing is an extension, and one that is hard to know when it is being used.\n\nDoes VC have an option for turning strict aliasing off too?", "tags": [], "is_private": false, "time": "2011-08-22T13:50:36Z"}, {"tags": [], "is_private": false, "time": "2011-08-22T13:53:48Z", "count": 20, "bug_id": 657806, "raw_text": "(In reply to Rafael \u00c1vila de Esp\u00edndola (:espindola) from comment #19)\n> Does VC have an option for turning strict aliasing off too?\n\nStrict aliasing is off by default on MSVC.  I'm not aware of any way to turn it *on*.", "author": "khuey@kylehuey.com", "creator": "khuey@kylehuey.com", "text": "(In reply to Rafael \u00c1vila de Esp\u00edndola (:espindola) from comment #19)\n> Does VC have an option for turning strict aliasing off too?\n\nStrict aliasing is off by default on MSVC.  I'm not aware of any way to turn it *on*.", "attachment_id": null, "id": 5669094, "creation_time": "2011-08-22T13:53:48Z"}, {"count": 21, "raw_text": "> We could make the PGO builds deterministic. The way I have seem it done before \n> is to check in the profiles in the repository and update them from time to time.\n\nEven if this were workable (I'm not sure it is, but we can discuss in another bug if you'd like), you'd still have the problem that, when updating the profiles, you might tickle the compiler into mis-optimizing.", "bug_id": 657806, "is_private": false, "tags": [], "time": "2011-08-22T15:54:23Z", "creation_time": "2011-08-22T15:54:23Z", "author": "justin.lebar+bug@gmail.com", "attachment_id": null, "id": 5669342, "creator": "justin.lebar+bug@gmail.com", "text": "> We could make the PGO builds deterministic. The way I have seem it done before \n> is to check in the profiles in the repository and update them from time to time.\n\nEven if this were workable (I'm not sure it is, but we can discuss in another bug if you'd like), you'd still have the problem that, when updating the profiles, you might tickle the compiler into mis-optimizing."}, {"creation_time": "2012-06-27T14:38:13Z", "text": "Is anyone working on this? Can we close it as wontfix for now and let anyone that starts working on it again reopen it or create a new bug?", "id": 6427039, "attachment_id": null, "raw_text": "Is anyone working on this? Can we close it as wontfix for now and let anyone that starts working on it again reopen it or create a new bug?", "tags": [], "is_private": false, "author": "respindola@unverified.tld", "creator": "respindola@unverified.tld", "count": 22, "bug_id": 657806, "time": "2012-06-27T14:38:13Z"}, {"time": "2012-08-09T14:36:49Z", "is_private": false, "tags": [], "raw_text": "Is anyone working on this?", "bug_id": 657806, "count": 23, "id": 6543587, "attachment_id": null, "text": "Is anyone working on this?", "creator": "respindola@unverified.tld", "author": "respindola@unverified.tld", "creation_time": "2012-08-09T14:36:49Z"}, {"count": 24, "bug_id": 657806, "time": "2014-04-18T06:16:39Z", "author": "cpeterson@mozilla.com", "creator": "cpeterson@mozilla.com", "raw_text": "", "is_private": false, "tags": [], "creation_time": "2014-04-18T06:16:39Z", "id": 8680771, "attachment_id": null, "text": "*** Bug 450691 has been marked as a duplicate of this bug. ***"}]}}, "comments": {}}