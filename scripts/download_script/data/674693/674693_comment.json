{"comments": {}, "bugs": {"674693": {"comments": [{"creator": "cjones.bugs@gmail.com", "creation_time": "2011-07-27T21:12:58Z", "time": "2011-07-27T21:12:58Z", "author": "cjones.bugs@gmail.com", "is_private": false, "count": 0, "id": 5617759, "text": "Paul's note:\n\nIt is currently non-trivial to maximize the visible browser area on mobile devices (i.e. scroll away url bars) or to trigger the native resolution on any device. Additionally, it is almost impossible to create a page that doesn't have scrolling content (device-width doesn't do the trick).\n\nAddendum:\n\nThis has been a pet peeve for a while.  I don't believe it's possible for web content to render to the full window at native DPI in Firefox Mobile across all devices.  If content doesn't set a fixed width or use meta viewport (blecch!), then we allocate it a width that's usually wider than the native window.  In addition, we monkey with the CSS-pixel-to-dev-pixel ratio for various compat issues.  That's all fine, but it means that it's not possible for DPI-aware web apps, say a game or PDF reader, to get \"native app\" quality (pixel perfect rendering).  We should fix that.\n\nThere might be two items here: (i) make it easier to hide hide-able UI, like URL bar (in Firefox Mobile, that's easy but hacky; maybe a standard is needed?); (ii) allow apps to fill the actual window width and render 1:1 with device pixels.\n\nI don't have a lot of ideas but I do feel strongly that this should not involve meta viewport at all, and in fact we should start deprecating it.  Maybe CSS media queries are the right start for this?", "bug_id": 674693, "tags": [], "attachment_id": null, "raw_text": "Paul's note:\n\nIt is currently non-trivial to maximize the visible browser area on mobile devices (i.e. scroll away url bars) or to trigger the native resolution on any device. Additionally, it is almost impossible to create a page that doesn't have scrolling content (device-width doesn't do the trick).\n\nAddendum:\n\nThis has been a pet peeve for a while.  I don't believe it's possible for web content to render to the full window at native DPI in Firefox Mobile across all devices.  If content doesn't set a fixed width or use meta viewport (blecch!), then we allocate it a width that's usually wider than the native window.  In addition, we monkey with the CSS-pixel-to-dev-pixel ratio for various compat issues.  That's all fine, but it means that it's not possible for DPI-aware web apps, say a game or PDF reader, to get \"native app\" quality (pixel perfect rendering).  We should fix that.\n\nThere might be two items here: (i) make it easier to hide hide-able UI, like URL bar (in Firefox Mobile, that's easy but hacky; maybe a standard is needed?); (ii) allow apps to fill the actual window width and render 1:1 with device pixels.\n\nI don't have a lot of ideas but I do feel strongly that this should not involve meta viewport at all, and in fact we should start deprecating it.  Maybe CSS media queries are the right start for this?"}, {"is_private": false, "count": 1, "id": 5617767, "creator": "cjones.bugs@gmail.com", "time": "2011-07-27T21:14:57Z", "creation_time": "2011-07-27T21:14:57Z", "author": "cjones.bugs@gmail.com", "attachment_id": null, "raw_text": "Note: I filed this in Core:General, but this work will touch a lot of different components, up to the frontend.", "tags": [], "bug_id": 674693, "text": "Note: I filed this in Core:General, but this work will touch a lot of different components, up to the frontend."}, {"is_private": false, "id": 5617876, "count": 2, "creator": "mbrubeck@limpet.net", "time": "2011-07-27T21:45:50Z", "creation_time": "2011-07-27T21:45:50Z", "author": "mbrubeck@limpet.net", "attachment_id": null, "raw_text": "The W3C CSS Device Adaptation draft standard might be the right way to move forward with this, though at the moment it has some unresolved issues about resolution handling:\n\nhttp://dev.w3.org/csswg/css-device-adapt/\n\nFor hiding browser chrome, window.scrollTo is currently the de facto standard for doing this on mobile.  Bug 654122 covers cases where this doesn't work in Fennec.  For the future, the \"right\" way might be the fullscreen API (bug 545812) which could also hide OS chrome (not just browser chrome).", "text": "The W3C CSS Device Adaptation draft standard might be the right way to move forward with this, though at the moment it has some unresolved issues about resolution handling:\n\nhttp://dev.w3.org/csswg/css-device-adapt/\n\nFor hiding browser chrome, window.scrollTo is currently the de facto standard for doing this on mobile.  Bug 654122 covers cases where this doesn't work in Fennec.  For the future, the \"right\" way might be the fullscreen API (bug 545812) which could also hide OS chrome (not just browser chrome).", "bug_id": 674693, "tags": []}, {"author": "cjones.bugs@gmail.com", "creation_time": "2011-07-27T23:16:22Z", "time": "2011-07-27T23:16:22Z", "creator": "cjones.bugs@gmail.com", "count": 3, "id": 5618134, "is_private": false, "tags": [], "text": "(In reply to comment #2)\n> The W3C CSS Device Adaptation draft standard might be the right way to move\n> forward with this, though at the moment it has some unresolved issues about\n> resolution handling:\n> \n> http://dev.w3.org/csswg/css-device-adapt/\n\nThat looks very promising, thanks.\n\n> For hiding browser chrome, window.scrollTo is currently the de facto\n> standard for doing this on mobile.  Bug 654122 covers cases where this\n> doesn't work in Fennec.\n\nYeah that's the \"easy and hacky\" thing I referenced above.  Certainly not the worst thing on the Web, but that approach assumes a lot about the UI paradigm.\n\n>  For the future, the \"right\" way might be the\n> fullscreen API (bug 545812) which could also hide OS chrome (not just\n> browser chrome).\n\nIn general I disagree --- fullscreen is a different beast, with security concerns and associated permissions that need to be granted that something like a PDF reader absolutely doesn't need (normally; might need it for \"slideshow mode\" or something).\n\nI do agree that a lot of the use-cases of full-window drawing for games e.g. would be better satisfied by the fullscreen API.", "bug_id": 674693, "raw_text": "(In reply to comment #2)\n> The W3C CSS Device Adaptation draft standard might be the right way to move\n> forward with this, though at the moment it has some unresolved issues about\n> resolution handling:\n> \n> http://dev.w3.org/csswg/css-device-adapt/\n\nThat looks very promising, thanks.\n\n> For hiding browser chrome, window.scrollTo is currently the de facto\n> standard for doing this on mobile.  Bug 654122 covers cases where this\n> doesn't work in Fennec.\n\nYeah that's the \"easy and hacky\" thing I referenced above.  Certainly not the worst thing on the Web, but that approach assumes a lot about the UI paradigm.\n\n>  For the future, the \"right\" way might be the\n> fullscreen API (bug 545812) which could also hide OS chrome (not just\n> browser chrome).\n\nIn general I disagree --- fullscreen is a different beast, with security concerns and associated permissions that need to be granted that something like a PDF reader absolutely doesn't need (normally; might need it for \"slideshow mode\" or something).\n\nI do agree that a lot of the use-cases of full-window drawing for games e.g. would be better satisfied by the fullscreen API.", "attachment_id": null}, {"is_private": false, "id": 5618964, "count": 4, "creator": "pbakaus@zynga.com", "time": "2011-07-28T11:28:54Z", "creation_time": "2011-07-28T11:28:54Z", "author": "pbakaus@zynga.com", "attachment_id": null, "raw_text": "The plugin we use to handle normalization across devices needs to work through a lot of different hooks to make this work.\n\nFor once, scrolling away the URL bar via scrollTo isn't as simple as it seems. For once, it's impossible to reliably know the timing when you have to trigger scrollTo to make it work - if you do it on domready or even load, it doesn't scroll way in many browsers (not sure about Firefox mobile). I therefore need to have a interval running that tries to call scrollTo every 10ms after load, and quits as soon as the window.innerHeight has changed adequately. This, however, is not reliable either, as for instance Android browsers report info between keyframes, i.e. \"during\" the scroll-away of the bar, 720,722,729 and so on. Therefore, on some Android, you have to *know* the expected end height, which is less than ideal.\n\nRegarding full screen: We'd love to have a fullscreen API to work against. There's security implications, but it needs to happen. Flash had fullscreen for ages, and it's sorely needed for extensive immersive gameplay.", "tags": [], "bug_id": 674693, "text": "The plugin we use to handle normalization across devices needs to work through a lot of different hooks to make this work.\n\nFor once, scrolling away the URL bar via scrollTo isn't as simple as it seems. For once, it's impossible to reliably know the timing when you have to trigger scrollTo to make it work - if you do it on domready or even load, it doesn't scroll way in many browsers (not sure about Firefox mobile). I therefore need to have a interval running that tries to call scrollTo every 10ms after load, and quits as soon as the window.innerHeight has changed adequately. This, however, is not reliable either, as for instance Android browsers report info between keyframes, i.e. \"during\" the scroll-away of the bar, 720,722,729 and so on. Therefore, on some Android, you have to *know* the expected end height, which is less than ideal.\n\nRegarding full screen: We'd love to have a fullscreen API to work against. There's security implications, but it needs to happen. Flash had fullscreen for ages, and it's sorely needed for extensive immersive gameplay."}, {"author": "roc@ocallahan.org", "creator": "roc@ocallahan.org", "creation_time": "2011-07-30T00:05:23Z", "time": "2011-07-30T00:05:23Z", "is_private": false, "id": 5623185, "count": 5, "tags": [], "text": "(In reply to comment #3)\n> (In reply to comment #2)\n> >  For the future, the \"right\" way might be the\n> > fullscreen API (bug 545812) which could also hide OS chrome (not just\n> > browser chrome).\n> \n> In general I disagree --- fullscreen is a different beast, with security\n> concerns and associated permissions that need to be granted that something\n> like a PDF reader absolutely doesn't need (normally; might need it for\n> \"slideshow mode\" or something).\n> \n> I do agree that a lot of the use-cases of full-window drawing for games e.g.\n> would be better satisfied by the fullscreen API.\n\nCan you elaborate on the distinction here? I think if you want to make the browser and OS chrome disappear, the fullscreen API is the right API.", "bug_id": 674693, "raw_text": "(In reply to comment #3)\n> (In reply to comment #2)\n> >  For the future, the \"right\" way might be the\n> > fullscreen API (bug 545812) which could also hide OS chrome (not just\n> > browser chrome).\n> \n> In general I disagree --- fullscreen is a different beast, with security\n> concerns and associated permissions that need to be granted that something\n> like a PDF reader absolutely doesn't need (normally; might need it for\n> \"slideshow mode\" or something).\n> \n> I do agree that a lot of the use-cases of full-window drawing for games e.g.\n> would be better satisfied by the fullscreen API.\n\nCan you elaborate on the distinction here? I think if you want to make the browser and OS chrome disappear, the fullscreen API is the right API.", "attachment_id": null}, {"bug_id": 674693, "text": "Agreed.\n\nThe non-fullscreen case is dirt simple: if the browser has hideable UI that's showing after page-load and occluding, say, my PDF, then I want that hideable UI to go away if possible.  That's probably true for any \"content document\".  You could argue that that's a UA problem, and I might be inclined to agree :), but the way to make hideable UI go away in fennec and android-browser is by using scrollTo hackery.\n\nAlso, welcome back.", "tags": [], "raw_text": "Agreed.\n\nThe non-fullscreen case is dirt simple: if the browser has hideable UI that's showing after page-load and occluding, say, my PDF, then I want that hideable UI to go away if possible.  That's probably true for any \"content document\".  You could argue that that's a UA problem, and I might be inclined to agree :), but the way to make hideable UI go away in fennec and android-browser is by using scrollTo hackery.\n\nAlso, welcome back.", "attachment_id": null, "author": "cjones.bugs@gmail.com", "creator": "cjones.bugs@gmail.com", "creation_time": "2011-07-30T00:27:08Z", "time": "2011-07-30T00:27:08Z", "is_private": false, "count": 6, "id": 5623214}, {"count": 7, "id": 5623227, "attachment_id": null, "is_private": false, "raw_text": "In Fennec, there are times that the sidebars are open and no amount of scrollTo hackery will hide those, iirc. For the URLBar, scrollTo should work - but we might have a bug filed on that.\n\nI know the UX team wanted some control over the UI and when parts are visible and hidden.", "time": "2011-07-30T00:35:02Z", "creation_time": "2011-07-30T00:35:02Z", "creator": "mark.finkle@gmail.com", "text": "In Fennec, there are times that the sidebars are open and no amount of scrollTo hackery will hide those, iirc. For the URLBar, scrollTo should work - but we might have a bug filed on that.\n\nI know the UX team wanted some control over the UI and when parts are visible and hidden.", "bug_id": 674693, "tags": [], "author": "mark.finkle@gmail.com"}, {"attachment_id": null, "raw_text": "(In reply to comment #7)\n> In Fennec, there are times that the sidebars are open and no amount of\n> scrollTo hackery will hide those, iirc.\n\nThat wasn't my experience (bug 638269), but maybe things have changed since then.  Agree that that's a bug though, and there are cases when we don't want content to hide open UI.", "bug_id": 674693, "text": "(In reply to comment #7)\n> In Fennec, there are times that the sidebars are open and no amount of\n> scrollTo hackery will hide those, iirc.\n\nThat wasn't my experience (bug 638269), but maybe things have changed since then.  Agree that that's a bug though, and there are cases when we don't want content to hide open UI.", "tags": [], "count": 8, "id": 5623231, "is_private": false, "time": "2011-07-30T00:38:25Z", "creation_time": "2011-07-30T00:38:25Z", "creator": "cjones.bugs@gmail.com", "author": "cjones.bugs@gmail.com"}, {"raw_text": "(In reply to comment #6)\n> The non-fullscreen case is dirt simple: if the browser has hideable UI\n> that's showing after page-load and occluding, say, my PDF, then I want that\n> hideable UI to go away if possible.  That's probably true for any \"content\n> document\".  You could argue that that's a UA problem, and I might be\n> inclined to agree :), but the way to make hideable UI go away in fennec and\n> android-browser is by using scrollTo hackery.\n\nI still don't understand why the full-screen API is not the perfect API to make that UI go away.", "attachment_id": null, "tags": [], "bug_id": 674693, "text": "(In reply to comment #6)\n> The non-fullscreen case is dirt simple: if the browser has hideable UI\n> that's showing after page-load and occluding, say, my PDF, then I want that\n> hideable UI to go away if possible.  That's probably true for any \"content\n> document\".  You could argue that that's a UA problem, and I might be\n> inclined to agree :), but the way to make hideable UI go away in fennec and\n> android-browser is by using scrollTo hackery.\n\nI still don't understand why the full-screen API is not the perfect API to make that UI go away.", "is_private": false, "count": 9, "id": 5624723, "author": "roc@ocallahan.org", "creator": "roc@ocallahan.org", "time": "2011-08-01T05:52:50Z", "creation_time": "2011-08-01T05:52:50Z"}, {"is_private": false, "count": 10, "id": 5624816, "creator": "pbakaus@zynga.com", "creation_time": "2011-08-01T08:10:56Z", "time": "2011-08-01T08:10:56Z", "author": "pbakaus@zynga.com", "attachment_id": null, "raw_text": "(In reply to comment #9)\n> (In reply to comment #6)\n> > The non-fullscreen case is dirt simple: if the browser has hideable UI\n> > that's showing after page-load and occluding, say, my PDF, then I want that\n> > hideable UI to go away if possible.  That's probably true for any \"content\n> > document\".  You could argue that that's a UA problem, and I might be\n> > inclined to agree :), but the way to make hideable UI go away in fennec and\n> > android-browser is by using scrollTo hackery.\n> \n> I still don't understand why the full-screen API is not the perfect API to\n> make that UI go away.\n\nI don't think any of both is exclusive. The full-screen API will most likely trigger alarming looking popups or notification bars that users have to click. That's ok, as it has valid security implications. But a game or website you point your browser to should load immediately. In this case, I want to make sure I can use the maximum visible area on a mobile device.\n\nCompare to a fashion store - you could rent the one on the second floor or, a little more expensive, the one on the first floor. The first floor is more attractive as people walking by will be able to see your clothes with basically no effort. To get the full hands-on experience, they still have to push the door and get in.", "tags": [], "text": "(In reply to comment #9)\n> (In reply to comment #6)\n> > The non-fullscreen case is dirt simple: if the browser has hideable UI\n> > that's showing after page-load and occluding, say, my PDF, then I want that\n> > hideable UI to go away if possible.  That's probably true for any \"content\n> > document\".  You could argue that that's a UA problem, and I might be\n> > inclined to agree :), but the way to make hideable UI go away in fennec and\n> > android-browser is by using scrollTo hackery.\n> \n> I still don't understand why the full-screen API is not the perfect API to\n> make that UI go away.\n\nI don't think any of both is exclusive. The full-screen API will most likely trigger alarming looking popups or notification bars that users have to click. That's ok, as it has valid security implications. But a game or website you point your browser to should load immediately. In this case, I want to make sure I can use the maximum visible area on a mobile device.\n\nCompare to a fashion store - you could rent the one on the second floor or, a little more expensive, the one on the first floor. The first floor is more attractive as people walking by will be able to see your clothes with basically no effort. To get the full hands-on experience, they still have to push the door and get in.", "bug_id": 674693}, {"count": 11, "id": 5624910, "is_private": false, "creation_time": "2011-08-01T09:53:58Z", "time": "2011-08-01T09:53:58Z", "creator": "roc@ocallahan.org", "author": "roc@ocallahan.org", "attachment_id": null, "raw_text": "So you want an API that means \"give me the maximum visible area I can get right now without triggering any security UI\"?\n\nThis is a confusing issue because on mobile we don't seem to care security-wise that the URL bar is usually not visible, even though on desktop we try really hard to make sure the URL bar is not spoofable. I'm not sure why we don't care on mobile (other than the obvious that it sucks to have it taking up screen area).", "bug_id": 674693, "text": "So you want an API that means \"give me the maximum visible area I can get right now without triggering any security UI\"?\n\nThis is a confusing issue because on mobile we don't seem to care security-wise that the URL bar is usually not visible, even though on desktop we try really hard to make sure the URL bar is not spoofable. I'm not sure why we don't care on mobile (other than the obvious that it sucks to have it taking up screen area).", "tags": []}, {"raw_text": "(In reply to comment #11)\n> So you want an API that means \"give me the maximum visible area I can get\n> right now without triggering any security UI\"?\n\nYes. \n> \n> This is a confusing issue because on mobile we don't seem to care\n> security-wise that the URL bar is usually not visible, even though on\n> desktop we try really hard to make sure the URL bar is not spoofable. I'm\n> not sure why we don't care on mobile (other than the obvious that it sucks\n> to have it taking up screen area).\n\nSeems people are used to URL bars that scroll away on mobile devices since iOS. Theoretically, somebody could fake the URL bar, have people insert urls in there and do some evil cross-domain scripting scripts or whatever. Haven't heard about it yet though.", "attachment_id": null, "text": "(In reply to comment #11)\n> So you want an API that means \"give me the maximum visible area I can get\n> right now without triggering any security UI\"?\n\nYes. \n> \n> This is a confusing issue because on mobile we don't seem to care\n> security-wise that the URL bar is usually not visible, even though on\n> desktop we try really hard to make sure the URL bar is not spoofable. I'm\n> not sure why we don't care on mobile (other than the obvious that it sucks\n> to have it taking up screen area).\n\nSeems people are used to URL bars that scroll away on mobile devices since iOS. Theoretically, somebody could fake the URL bar, have people insert urls in there and do some evil cross-domain scripting scripts or whatever. Haven't heard about it yet though.", "bug_id": 674693, "tags": [], "id": 5624919, "count": 12, "is_private": false, "author": "pbakaus@zynga.com", "time": "2011-08-01T09:59:38Z", "creation_time": "2011-08-01T09:59:38Z", "creator": "pbakaus@zynga.com"}, {"creation_time": "2011-08-01T11:45:41Z", "time": "2011-08-01T11:45:41Z", "creator": "roc@ocallahan.org", "author": "roc@ocallahan.org", "id": 5624992, "count": 13, "is_private": false, "text": "OK. It sounds to me like the CSS Device Adaptation proposal fits pretty well then.", "bug_id": 674693, "tags": [], "attachment_id": null, "raw_text": "OK. It sounds to me like the CSS Device Adaptation proposal fits pretty well then."}, {"count": 14, "id": 5625070, "is_private": false, "author": "pbakaus@zynga.com", "creation_time": "2011-08-01T12:55:34Z", "time": "2011-08-01T12:55:34Z", "creator": "pbakaus@zynga.com", "raw_text": "(In reply to comment #13)\n> OK. It sounds to me like the CSS Device Adaptation proposal fits pretty well\n> then.\n\nGonna have a look. Thanks!", "attachment_id": null, "text": "(In reply to comment #13)\n> OK. It sounds to me like the CSS Device Adaptation proposal fits pretty well\n> then.\n\nGonna have a look. Thanks!", "bug_id": 674693, "tags": []}, {"tags": [], "text": "(In reply to comment #11)\n> This is a confusing issue because on mobile we don't seem to care\n> security-wise that the URL bar is usually not visible, even though on\n> desktop we try really hard to make sure the URL bar is not spoofable. I'm\n> not sure why we don't care on mobile (other than the obvious that it sucks\n> to have it taking up screen area).\n\n(Aside to Mozilla folks: has this design gotten security review?  I've been assuming so, but haven't ever asked.  Now seems like a good time.)", "bug_id": 674693, "raw_text": "(In reply to comment #11)\n> This is a confusing issue because on mobile we don't seem to care\n> security-wise that the URL bar is usually not visible, even though on\n> desktop we try really hard to make sure the URL bar is not spoofable. I'm\n> not sure why we don't care on mobile (other than the obvious that it sucks\n> to have it taking up screen area).\n\n(Aside to Mozilla folks: has this design gotten security review?  I've been assuming so, but haven't ever asked.  Now seems like a good time.)", "attachment_id": null, "author": "cjones.bugs@gmail.com", "creation_time": "2011-08-01T17:37:10Z", "time": "2011-08-01T17:37:10Z", "creator": "cjones.bugs@gmail.com", "id": 5625659, "count": 15, "is_private": false}, {"tags": [], "text": "(In reply to Chris Jones [:cjones] [:warhammer] from comment #15)\n> (Aside to Mozilla folks: has this design gotten security review?  I've been\n> assuming so, but haven't ever asked.  Now seems like a good time.)\nBug 605206 was marked wontfx (not sure why. we want to solve this, its just a hard problem to solve).\n\nI'm not sure what the difference is between this bug and 677989? The way they read to me, both could be solved by either implementing the CSS Device Adaptation spec (because that gives us an end run around the \"iphone\" web), or adding a special \"-moz-device-resolution\" tag to metaviewport.", "bug_id": 674693, "attachment_id": null, "raw_text": "(In reply to Chris Jones [:cjones] [:warhammer] from comment #15)\n> (Aside to Mozilla folks: has this design gotten security review?  I've been\n> assuming so, but haven't ever asked.  Now seems like a good time.)\nBug 605206 was marked wontfx (not sure why. we want to solve this, its just a hard problem to solve).\n\nI'm not sure what the difference is between this bug and 677989? The way they read to me, both could be solved by either implementing the CSS Device Adaptation spec (because that gives us an end run around the \"iphone\" web), or adding a special \"-moz-device-resolution\" tag to metaviewport.", "creator": "wjohnston2000@gmail.com", "creation_time": "2011-08-13T21:55:17Z", "time": "2011-08-13T21:55:17Z", "author": "wjohnston2000@gmail.com", "is_private": false, "count": 16, "id": 5652130}, {"tags": [], "text": "Refocusing this bug to \"full window without unwanted UI\".  The other bug is about rendering at device-pixel resolution.\n\nA special \"let me to render to full window and at device resolution\" flag doesn't seem too bad to me.  I would prefer to have that as part of Device Adaption than pile on apple's hack, but that's just a style issue.", "bug_id": 674693, "attachment_id": null, "raw_text": "Refocusing this bug to \"full window without unwanted UI\".  The other bug is about rendering at device-pixel resolution.\n\nA special \"let me to render to full window and at device resolution\" flag doesn't seem too bad to me.  I would prefer to have that as part of Device Adaption than pile on apple's hack, but that's just a style issue.", "creator": "cjones.bugs@gmail.com", "creation_time": "2011-08-15T15:59:37Z", "time": "2011-08-15T15:59:37Z", "author": "cjones.bugs@gmail.com", "is_private": false, "id": 5654265, "count": 17}, {"is_private": false, "id": 7140600, "count": 18, "author": "cjones.bugs@gmail.com", "creator": "cjones.bugs@gmail.com", "creation_time": "2013-02-25T21:54:06Z", "time": "2013-02-25T21:54:06Z", "raw_text": "Note wrt bug 844910, this \"style\" is the default for installed b2g apps, for just this reason.  Still relevant for async pan/zoomed code though.", "attachment_id": null, "tags": [], "bug_id": 674693, "text": "Note wrt bug 844910, this \"style\" is the default for installed b2g apps, for just this reason.  Still relevant for async pan/zoomed code though."}]}}}