{
  "comments": {},
  "bugs": {
    "389274": {
      "comments": [
        {
          "attachment_id": null,
          "creation_time": "2007-07-23T17:57:51Z",
          "id": 3257077,
          "text": "Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.5) Gecko/20070713 Firefox/2.0.0.5\n\nThis is spun off from bug 385882.\n\nSteps to reproduce:\n1. Tools > Options > Main > Choose \"Show my windows and tabs from last time\"\n2. Go to http://www.mozilla.org/editor/midasdemo/ and input some text.\n3. File > Quit\n4. Reopen Firefox and try typing into the editor.\n\nActual results:\nThe text that was in the editor is NOT restored and you cannot type anything in the editor. An error is also in the Error Console:\n\nError: uncaught exception: Permission denied to set property HTMLDocument.designMode\n\nExpected results:\nText is restored and I'm able to edit it. \n\nThis regressed on BRANCH between 2007-07-11-03 and 2007-07-12-03: http://bonsai.mozilla.org/cvsquery.cgi?treeid=default&module=PhoenixTinderbox&branch=MOZILLA_1_8_BRANCH&branchtype=match&dir=&file=&filetype=match&who=&whotype=match&sortby=Date&hours=2&date=explicit&mindate=2007-07-11+02&maxdate=2007-07-12+04&cvsroot=%2Fcvsroot.\n\nThis issue has been around on trunk since at least 2007-01-01-04, FWIW.",
          "raw_text": "Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.5) Gecko/20070713 Firefox/2.0.0.5\n\nThis is spun off from bug 385882.\n\nSteps to reproduce:\n1. Tools > Options > Main > Choose \"Show my windows and tabs from last time\"\n2. Go to http://www.mozilla.org/editor/midasdemo/ and input some text.\n3. File > Quit\n4. Reopen Firefox and try typing into the editor.\n\nActual results:\nThe text that was in the editor is NOT restored and you cannot type anything in the editor. An error is also in the Error Console:\n\nError: uncaught exception: Permission denied to set property HTMLDocument.designMode\n\nExpected results:\nText is restored and I'm able to edit it. \n\nThis regressed on BRANCH between 2007-07-11-03 and 2007-07-12-03: http://bonsai.mozilla.org/cvsquery.cgi?treeid=default&module=PhoenixTinderbox&branch=MOZILLA_1_8_BRANCH&branchtype=match&dir=&file=&filetype=match&who=&whotype=match&sortby=Date&hours=2&date=explicit&mindate=2007-07-11+02&maxdate=2007-07-12+04&cvsroot=%2Fcvsroot.\n\nThis issue has been around on trunk since at least 2007-01-01-04, FWIW.",
          "bug_id": 389274,
          "creator": "ispiked@gmail.com",
          "author": "ispiked@gmail.com",
          "is_private": false,
          "tags": [],
          "time": "2007-07-23T17:57:51Z",
          "count": 0
        },
        {
          "bug_id": 389274,
          "attachment_id": null,
          "creation_time": "2007-07-23T18:07:51Z",
          "text": "Confirmed, I see this in the error console:\nError: uncaught exception: Permission denied to set property HTMLDocument.designMode",
          "raw_text": "Confirmed, I see this in the error console:\nError: uncaught exception: Permission denied to set property HTMLDocument.designMode",
          "id": 3257088,
          "is_private": false,
          "tags": [],
          "time": "2007-07-23T18:07:51Z",
          "count": 1,
          "creator": "martijn.martijn@gmail.com",
          "author": "martijn.martijn@gmail.com"
        },
        {
          "attachment_id": null,
          "text": "Aha! So I tracked down the regression range on trunk to between 2006-08-15-04 and 2006-08-16-04. Bug 332182 landed in this range as well as in the branch regression range I found, so I guess we've found our offender.",
          "raw_text": "Aha! So I tracked down the regression range on trunk to between 2006-08-15-04 and 2006-08-16-04. Bug 332182 landed in this range as well as in the branch regression range I found, so I guess we've found our offender.",
          "id": 3257097,
          "creation_time": "2007-07-23T18:13:50Z",
          "bug_id": 389274,
          "author": "ispiked@gmail.com",
          "creator": "ispiked@gmail.com",
          "is_private": false,
          "count": 2,
          "time": "2007-07-23T18:13:50Z",
          "tags": []
        },
        {
          "is_private": false,
          "tags": [],
          "time": "2007-07-24T03:46:34Z",
          "count": 3,
          "creator": "bzbarsky@mit.edu",
          "author": "bzbarsky@mit.edu",
          "bug_id": 389274,
          "attachment_id": null,
          "creation_time": "2007-07-24T03:46:34Z",
          "raw_text": "This is a bug in session restore, more or less.  Its serialization and deserialization of history entries doesn't include the principal (exposed as .owner on the history entry since bug 337260 got fixed).  As a result, when it loads that session history (which seems to be how it handles restoration as far as I can tell), the permission end up wrong.  It's always had problems for data: and javascript: URIs; all that happened is that about:blank now has the same problems.\n\nChances are, just serializing out the URI of the principal and then creating a codebase principal when deserializing will \"work\" on branch in most cases.  On trunk, I've been working on making principals implement nsISerializable.  I assume that session restore can store binary blobs as needed?\n\nI'd be happy to help out if needed, but I'd want to be pointed at the places where we do the actual serializing and deserializing in nsSessionStore.js.  Then we'd want to change _deserializeHistoryEntry to use create() like docshell does itself.",
          "id": 3257735,
          "text": "This is a bug in session restore, more or less.  Its serialization and deserialization of history entries doesn't include the principal (exposed as .owner on the history entry since bug 337260 got fixed).  As a result, when it loads that session history (which seems to be how it handles restoration as far as I can tell), the permission end up wrong.  It's always had problems for data: and javascript: URIs; all that happened is that about:blank now has the same problems.\n\nChances are, just serializing out the URI of the principal and then creating a codebase principal when deserializing will \"work\" on branch in most cases.  On trunk, I've been working on making principals implement nsISerializable.  I assume that session restore can store binary blobs as needed?\n\nI'd be happy to help out if needed, but I'd want to be pointed at the places where we do the actual serializing and deserializing in nsSessionStore.js.  Then we'd want to change _deserializeHistoryEntry to use create() like docshell does itself."
        },
        {
          "bug_id": 389274,
          "attachment_id": null,
          "text": "Then again, brendan's been arguing for an alternate serialization format for principals.  If people can figure out what they want, we could do that too.",
          "raw_text": "Then again, brendan's been arguing for an alternate serialization format for principals.  If people can figure out what they want, we could do that too.",
          "id": 3257736,
          "creation_time": "2007-07-24T03:48:11Z",
          "is_private": false,
          "count": 4,
          "time": "2007-07-24T03:48:11Z",
          "tags": [],
          "author": "bzbarsky@mit.edu",
          "creator": "bzbarsky@mit.edu"
        },
        {
          "bug_id": 389274,
          "attachment_id": null,
          "creation_time": "2007-08-01T10:31:20Z",
          "raw_text": "(In reply to comment #3)\n> I assume that session restore can store binary blobs as needed?\n\nSince we support JSON serialization, you'd have to manage with strings, IEEE 754 numbers and arrays containing those. An encoded string should probably do the job.\n\n> where we do the actual serializing and deserializing in nsSessionStore.js. \n\nThat's really just _serializeHistoryEntry and _deserializeHistoryEntry which convert a \"@mozilla.org/browser/session-history-entry;1\" to a JS object and vice versa.",
          "id": 3266563,
          "text": "(In reply to comment #3)\n> I assume that session restore can store binary blobs as needed?\n\nSince we support JSON serialization, you'd have to manage with strings, IEEE 754 numbers and arrays containing those. An encoded string should probably do the job.\n\n> where we do the actual serializing and deserializing in nsSessionStore.js. \n\nThat's really just _serializeHistoryEntry and _deserializeHistoryEntry which convert a \"@mozilla.org/browser/session-history-entry;1\" to a JS object and vice versa.",
          "is_private": false,
          "tags": [],
          "time": "2007-08-01T10:31:20Z",
          "count": 5,
          "creator": "zeniko@gmail.com",
          "author": "zeniko@gmail.com"
        },
        {
          "tags": [],
          "count": 6,
          "time": "2007-08-21T23:02:32Z",
          "is_private": false,
          "creator": "dveditz@mozilla.com",
          "author": "dveditz@mozilla.com",
          "bug_id": 389274,
          "creation_time": "2007-08-21T23:02:32Z",
          "raw_text": "Not blocking the 1.8 branch, but when there's a trunk fix please renominate for the branch.",
          "id": 3287389,
          "text": "Not blocking the 1.8 branch, but when there's a trunk fix please renominate for the branch.",
          "attachment_id": null
        },
        {
          "is_private": false,
          "tags": [],
          "count": 7,
          "time": "2007-09-13T18:03:44Z",
          "creator": "bzbarsky@mit.edu",
          "author": "bzbarsky@mit.edu",
          "bug_id": 389274,
          "attachment_id": 280766,
          "creation_time": "2007-09-13T18:03:44Z",
          "raw_text": "This patch requires the fix for bug 369566 to work.  It also fixes the bug the existing code had with truncating postdata at the first null, while I was here.\n\njst, could you review the session history part?\n\nmconnor, could you review the session store part?",
          "text": "Created attachment 280766\nTrunk fix\n\nThis patch requires the fix for bug 369566 to work.  It also fixes the bug the existing code had with truncating postdata at the first null, while I was here.\n\njst, could you review the session history part?\n\nmconnor, could you review the session store part?",
          "id": 3310673
        },
        {
          "tags": [],
          "count": 8,
          "time": "2007-09-13T18:08:10Z",
          "is_private": false,
          "creator": "bzbarsky@mit.edu",
          "author": "bzbarsky@mit.edu",
          "bug_id": 389274,
          "creation_time": "2007-09-13T18:08:10Z",
          "id": 3310676,
          "text": "Created attachment 280767\nBranch patch\n\nDoesn't really have much to do with the trunk patch, for what it's worth.",
          "raw_text": "Doesn't really have much to do with the trunk patch, for what it's worth.",
          "attachment_id": 280767
        },
        {
          "author": "zeniko@gmail.com",
          "creator": "zeniko@gmail.com",
          "count": 9,
          "time": "2007-09-13T18:26:59Z",
          "tags": [],
          "is_private": false,
          "raw_text": "Thanks for taking this on, Boris.\nMy comment to the SessionStore bits:\n\n>-        var postdata = stream.read(stream.available());\n\nWhat's the reason for the seemingly unrelated postdata changes?\n\n>+      catch (ex) { debug(ex); }\n\nWhat are you expecting to catch here?\n\n>-      stream.setData(aEntry.postdata, -1);\n>+      var postdata = atob(aEntry.postdata);\n>+      stream.setData(postdata, postdata.length);\n\nThis looks like it will break if there's postdata to be restored when Firefox 3 is started for the first time (having Firefox set to \"restore the windows/tabs from last time\").\n\nI'd prefer if you used a different property (aEntry.postdata_b64 or similar) and fell back to Firefox 2's property if available.\n\nBTW: What's the advantage of base64'ing the string? Aren't JavaScript strings able to contain \\0 ?\n\n>+      var binaryData = atob(aEntry.owner);\n\nAgain: what will happen here when aEntry.owner is a nsIURI.spec from Firefox 2?",
          "text": "Comment on attachment 280766\nTrunk fix\n\nThanks for taking this on, Boris.\nMy comment to the SessionStore bits:\n\n>-        var postdata = stream.read(stream.available());\n\nWhat's the reason for the seemingly unrelated postdata changes?\n\n>+      catch (ex) { debug(ex); }\n\nWhat are you expecting to catch here?\n\n>-      stream.setData(aEntry.postdata, -1);\n>+      var postdata = atob(aEntry.postdata);\n>+      stream.setData(postdata, postdata.length);\n\nThis looks like it will break if there's postdata to be restored when Firefox 3 is started for the first time (having Firefox set to \"restore the windows/tabs from last time\").\n\nI'd prefer if you used a different property (aEntry.postdata_b64 or similar) and fell back to Firefox 2's property if available.\n\nBTW: What's the advantage of base64'ing the string? Aren't JavaScript strings able to contain \\0 ?\n\n>+      var binaryData = atob(aEntry.owner);\n\nAgain: what will happen here when aEntry.owner is a nsIURI.spec from Firefox 2?",
          "id": 3310691,
          "creation_time": "2007-09-13T18:26:59Z",
          "attachment_id": 280766,
          "bug_id": 389274
        },
        {
          "time": "2007-09-13T19:03:40Z",
          "count": 10,
          "tags": [],
          "is_private": false,
          "author": "bzbarsky@mit.edu",
          "creator": "bzbarsky@mit.edu",
          "bug_id": 389274,
          "text": "> What's the reason for the seemingly unrelated postdata changes?\n\nSee comment 7.\n\n> What are you expecting to catch here?\n\nI have no idea.  I modeled this after the postdata code, basically.  The obvious thing would be the Write() method of the object failing for some reason.\n\n> I'd prefer if you used a different property (aEntry.postdata_b64 or similar)\n\nOK, I can do that.\n\n> Aren't JavaScript strings able to contain \\0 ?\n\nThey are, but the JSON serialization doesn't deal.  See bug 396068.  There might be similar issues with other control chars, so this seemed like the safe thing to do.\n\n> Again: what will happen here when aEntry.owner is a nsIURI.spec from Firefox\n> 2?\n\nI suppose we can use ownerURI on branch and create a principal here... Would that work? \n\nToo bad our security APIs are such a mess.  :(",
          "id": 3310730,
          "raw_text": "> What's the reason for the seemingly unrelated postdata changes?\n\nSee comment 7.\n\n> What are you expecting to catch here?\n\nI have no idea.  I modeled this after the postdata code, basically.  The obvious thing would be the Write() method of the object failing for some reason.\n\n> I'd prefer if you used a different property (aEntry.postdata_b64 or similar)\n\nOK, I can do that.\n\n> Aren't JavaScript strings able to contain \\0 ?\n\nThey are, but the JSON serialization doesn't deal.  See bug 396068.  There might be similar issues with other control chars, so this seemed like the safe thing to do.\n\n> Again: what will happen here when aEntry.owner is a nsIURI.spec from Firefox\n> 2?\n\nI suppose we can use ownerURI on branch and create a principal here... Would that work? \n\nToo bad our security APIs are such a mess.  :(",
          "creation_time": "2007-09-13T19:03:40Z",
          "attachment_id": null
        },
        {
          "attachment_id": null,
          "creation_time": "2007-09-13T19:48:30Z",
          "id": 3310781,
          "raw_text": "(In reply to comment #10)\n> I have no idea.\n\nCatching seems like the safer thing to do, but please add a comment as to that this isn't anything special you're trying to catch (in case the code gets refactored or we want to try without the try-catch-block).\n\n> They are, but the JSON serialization doesn't deal.  See bug 396068.\n\nHm, our JSON code would really have dealt with that more graciously than toSource which we use here. Fixing bug 387859 would thus prevent the need for this hack. Please add a comment as to considering reverting the postdata bits once that bug is fixed.\n\n> I suppose we can use ownerURI on branch and create a principal here...\n\nThat'd be great. Any chance your trunk patch could make use of .ownerURI as well when .owner is missing?\n\nBTW: How portable are the serialized owners (Mac/Windows/different profiles)?",
          "text": "(In reply to comment #10)\n> I have no idea.\n\nCatching seems like the safer thing to do, but please add a comment as to that this isn't anything special you're trying to catch (in case the code gets refactored or we want to try without the try-catch-block).\n\n> They are, but the JSON serialization doesn't deal.  See bug 396068.\n\nHm, our JSON code would really have dealt with that more graciously than toSource which we use here. Fixing bug 387859 would thus prevent the need for this hack. Please add a comment as to considering reverting the postdata bits once that bug is fixed.\n\n> I suppose we can use ownerURI on branch and create a principal here...\n\nThat'd be great. Any chance your trunk patch could make use of .ownerURI as well when .owner is missing?\n\nBTW: How portable are the serialized owners (Mac/Windows/different profiles)?",
          "bug_id": 389274,
          "creator": "zeniko@gmail.com",
          "author": "zeniko@gmail.com",
          "is_private": false,
          "tags": [],
          "count": 11,
          "time": "2007-09-13T19:48:30Z"
        },
        {
          "is_private": false,
          "time": "2007-09-13T20:08:27Z",
          "count": 12,
          "bug_id": 389274,
          "tags": [],
          "author": "bzbarsky@mit.edu",
          "attachment_id": null,
          "creator": "bzbarsky@mit.edu",
          "id": 3310798,
          "raw_text": "> Please add a comment as to considering reverting the postdata bits\n\nSome of those bits are needed no matter what (e.g. the setData() length changes).  But yes, the base64 encoding would not be needed.\n\n> Any chance your trunk patch could make use of .ownerURI as\n> well when .owner is missing?\n\nThat's what I meant by \"create a principal here\".  ;)\n\n> BTW: How portable are the serialized owners (Mac/Windows/different profiles)?\n\nThey're as portable as anything else we send through the binary input stream.  Which means that things will work unless someone changes the serialization functions in nsPrincipal, will be portable across different endianness machines, etc.",
          "text": "> Please add a comment as to considering reverting the postdata bits\n\nSome of those bits are needed no matter what (e.g. the setData() length changes).  But yes, the base64 encoding would not be needed.\n\n> Any chance your trunk patch could make use of .ownerURI as\n> well when .owner is missing?\n\nThat's what I meant by \"create a principal here\".  ;)\n\n> BTW: How portable are the serialized owners (Mac/Windows/different profiles)?\n\nThey're as portable as anything else we send through the binary input stream.  Which means that things will work unless someone changes the serialization functions in nsPrincipal, will be portable across different endianness machines, etc.",
          "creation_time": "2007-09-13T20:08:27Z"
        },
        {
          "tags": [],
          "time": "2007-09-17T01:10:40Z",
          "count": 13,
          "is_private": false,
          "creator": "bzbarsky@mit.edu",
          "author": "bzbarsky@mit.edu",
          "bug_id": 389274,
          "creation_time": "2007-09-17T01:10:40Z",
          "text": "Created attachment 281132\nUpdated branch patch\n\nLet me know if I need a different reviewer, ok?",
          "raw_text": "Let me know if I need a different reviewer, ok?",
          "id": 3313286,
          "attachment_id": 281132
        },
        {
          "attachment_id": 281133,
          "creation_time": "2007-09-17T01:13:20Z",
          "raw_text": "I've tested that Fx2 -> Fx2, Fx2 -> trunk, trunk -> trunk restores all work with these patches.",
          "text": "Created attachment 281133\nUpdated trunk fix\n\nI've tested that Fx2 -> Fx2, Fx2 -> trunk, trunk -> trunk restores all work with these patches.",
          "id": 3313287,
          "bug_id": 389274,
          "creator": "bzbarsky@mit.edu",
          "author": "bzbarsky@mit.edu",
          "is_private": false,
          "tags": [],
          "count": 14,
          "time": "2007-09-17T01:13:20Z"
        },
        {
          "creation_time": "2007-09-17T05:08:30Z",
          "id": 3313351,
          "raw_text": "r+ for the SessionStore changes. Just one detail:\n\n>+          // We can stop doing base64 encoding once our serialization into JSON\n>+          // is guaranteed to handle all chars in strings, including embedded\n>+          // nulls.\n\nJSON and toSource/uneval are two quite similar but still different serializations - and it's only the latter which fails here. What about \"... once .toSource() is guaranteed ... (see bug 375639).\"?",
          "text": "Comment on attachment 281133\nUpdated trunk fix\n\nr+ for the SessionStore changes. Just one detail:\n\n>+          // We can stop doing base64 encoding once our serialization into JSON\n>+          // is guaranteed to handle all chars in strings, including embedded\n>+          // nulls.\n\nJSON and toSource/uneval are two quite similar but still different serializations - and it's only the latter which fails here. What about \"... once .toSource() is guaranteed ... (see bug 375639).\"?",
          "attachment_id": 281133,
          "bug_id": 389274,
          "creator": "zeniko@gmail.com",
          "author": "zeniko@gmail.com",
          "tags": [],
          "time": "2007-09-17T05:08:30Z",
          "count": 15,
          "is_private": false
        },
        {
          "bug_id": 389274,
          "creation_time": "2007-09-17T05:18:02Z",
          "text": "I can do that, sure.  Though I wouldn't trust it to deal once that bug is fixed....",
          "raw_text": "I can do that, sure.  Though I wouldn't trust it to deal once that bug is fixed....",
          "id": 3313352,
          "attachment_id": null,
          "tags": [],
          "time": "2007-09-17T05:18:02Z",
          "count": 16,
          "is_private": false,
          "creator": "bzbarsky@mit.edu",
          "author": "bzbarsky@mit.edu"
        },
        {
          "time": "2007-09-17T05:19:14Z",
          "count": 17,
          "tags": [],
          "is_private": false,
          "author": "bzbarsky@mit.edu",
          "creator": "bzbarsky@mit.edu",
          "bug_id": 389274,
          "id": 3313353,
          "raw_text": "Requesting branch approval.  This should be a very safe fix that fixes corner cases of session restore and about:blank subframes in most cases (basically all cases except when the parent page has a certificate principal).",
          "text": "Comment on attachment 281132\nUpdated branch patch\n\nRequesting branch approval.  This should be a very safe fix that fixes corner cases of session restore and about:blank subframes in most cases (basically all cases except when the parent page has a certificate principal).",
          "creation_time": "2007-09-17T05:19:14Z",
          "attachment_id": 281132
        },
        {
          "attachment_id": 281133,
          "raw_text": "Requesting approval for regression fix.  Risk is pretty low, in my opinion.",
          "id": 3313354,
          "text": "Comment on attachment 281133\nUpdated trunk fix\n\nRequesting approval for regression fix.  Risk is pretty low, in my opinion.",
          "creation_time": "2007-09-17T05:19:43Z",
          "bug_id": 389274,
          "author": "bzbarsky@mit.edu",
          "creator": "bzbarsky@mit.edu",
          "is_private": false,
          "time": "2007-09-17T05:19:43Z",
          "count": 18,
          "tags": []
        },
        {
          "attachment_id": null,
          "creation_time": "2007-09-17T22:27:36Z",
          "raw_text": "Trunk fix checked in.",
          "id": 3314086,
          "text": "Trunk fix checked in.",
          "bug_id": 389274,
          "creator": "bzbarsky@mit.edu",
          "author": "bzbarsky@mit.edu",
          "is_private": false,
          "tags": [],
          "time": "2007-09-17T22:27:36Z",
          "count": 19
        },
        {
          "attachment_id": 281132,
          "creation_time": "2007-09-24T19:30:33Z",
          "raw_text": "approved for 1.8.1.8, a=dveditz for release-drivers",
          "text": "Comment on attachment 281132\nUpdated branch patch\n\napproved for 1.8.1.8, a=dveditz for release-drivers",
          "id": 3321272,
          "bug_id": 389274,
          "creator": "dveditz@mozilla.com",
          "author": "dveditz@mozilla.com",
          "is_private": false,
          "tags": [],
          "count": 20,
          "time": "2007-09-24T19:30:33Z"
        },
        {
          "creator": "bzbarsky@mit.edu",
          "author": "bzbarsky@mit.edu",
          "is_private": false,
          "tags": [],
          "count": 21,
          "time": "2007-09-25T16:39:02Z",
          "attachment_id": null,
          "creation_time": "2007-09-25T16:39:02Z",
          "raw_text": "Fixed on branch",
          "text": "Fixed on branch",
          "id": 3322332,
          "bug_id": 389274
        },
        {
          "tags": [],
          "time": "2007-10-10T16:18:02Z",
          "count": 22,
          "is_private": false,
          "creator": "cbook@mozilla.com",
          "author": "cbook@mozilla.com",
          "bug_id": 389274,
          "creation_time": "2007-10-10T16:18:02Z",
          "raw_text": "verified fixed 1.8.1.8 using Mozilla/5.0 (Windows; U; Windows NT 5.2; de; rv:1.8.1.8) Gecko/20071008 Firefox/2.0.0.8 ID:2007100816 and the steps to reproduce from this bug ",
          "text": "verified fixed 1.8.1.8 using Mozilla/5.0 (Windows; U; Windows NT 5.2; de; rv:1.8.1.8) Gecko/20071008 Firefox/2.0.0.8 ID:2007100816 and the steps to reproduce from this bug ",
          "id": 3337429,
          "attachment_id": null
        },
        {
          "attachment_id": null,
          "text": "*** Bug 385882 has been marked as a duplicate of this bug. ***",
          "id": 3368027,
          "raw_text": "",
          "creation_time": "2007-11-10T04:16:52Z",
          "bug_id": 389274,
          "author": "mconnor@mozilla.com",
          "creator": "mconnor@mozilla.com",
          "is_private": false,
          "count": 23,
          "time": "2007-11-10T04:16:52Z",
          "tags": []
        },
        {
          "is_private": false,
          "bug_id": 389274,
          "count": 24,
          "time": "2008-03-15T22:44:22Z",
          "tags": [],
          "attachment_id": null,
          "author": "pkasting@google.com",
          "creator": "pkasting@google.com",
          "id": 3530023,
          "raw_text": "",
          "text": "*** Bug 344185 has been marked as a duplicate of this bug. ***",
          "creation_time": "2008-03-15T22:44:22Z"
        }
      ]
    }
  }
}
